void sub_1916C88AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44 - 104);
  _Unwind_Resume(a1);
}

void sub_1916C89D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    operator delete(__p);
  JUMPOUT(0x1916C8990);
}

void sub_1916C89F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    JUMPOUT(0x1916C8A08);
  JUMPOUT(0x1916C8998);
}

void sub_1916C8A10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    operator delete(__p);
  JUMPOUT(0x1916C89A0);
}

void sub_1916C8A28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    operator delete(__p);
  JUMPOUT(0x1916C89A8);
}

void Espresso::rnn_kernel_cpu::__launch_gru()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "GRU not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1916C8A7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::rnn_kernel_cpu::lstm_elementwise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  float *v31;
  float *v32;
  float v33;
  unint64_t v34;
  float v35;
  float v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;

  v9 = a1;
  v51 = *(unsigned int *)(*(_QWORD *)a3 + 20);
  v10 = *(int *)(a1 + 312);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v60, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v58, *(void **)a4, *(std::__shared_weak_count **)(a4 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v56, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v54, *(void **)a6, *(std::__shared_weak_count **)(a6 + 8));
  if ((int)v51 >= 1)
  {
    v11 = 0;
    v12 = *(float **)(v54 + 24);
    v13 = &v12[2 * v10];
    v14 = &v12[3 * (_DWORD)v10];
    v15 = *(float **)(v58 + 24);
    v16 = *(_QWORD *)(v60 + 24);
    v49 = v9;
    v50 = 16 * v10;
    v17 = 4 * v10;
    v53 = *(float **)(v56 + 24);
    v18 = 4 * v10;
    do
    {
      v19 = v13;
      v20 = v10;
      if ((int)v10 >= 1)
      {
        do
        {
          *v19 = *(float *)(v9 + 316) + *v19;
          ++v19;
          --v20;
        }
        while (v20);
      }
      if ((_DWORD)v10)
      {
        v21 = v18;
        v52 = v11;
        v22 = v12;
        v23 = v10;
        do
        {
          *v22 = 1.0 / (float)(expf(-*v22) + 1.0);
          ++v22;
          --v23;
        }
        while (v23);
        v24 = v10;
        v25 = v10;
        do
        {
          v12[v24] = tanhf(v12[v24]);
          ++v24;
          --v25;
        }
        while (v25);
        for (i = 0; i != v10; ++i)
          v13[i] = 1.0 / (float)(expf(-v13[i]) + 1.0);
        v27 = 3 * (_DWORD)v10;
        v28 = v10;
        do
        {
          v12[v27] = 1.0 / (float)(expf(-v12[v27]) + 1.0);
          ++v27;
          --v28;
        }
        while (v28);
        v11 = v52;
        v18 = v21;
        if ((int)v10 >= 1)
        {
          v30 = v10;
          v29 = v53;
          v31 = v12;
          v32 = v15;
          do
          {
            v33 = *v29++;
            *v32++ = (float)(*v31 * v31[v10]) + (float)(v31[2 * v10] * v33);
            ++v31;
            --v30;
          }
          while (v30);
          v34 = 0;
          do
          {
            v35 = v14[v34 / 4];
            v36 = tanhf(v15[v34 / 4]);
            v18 = v21;
            *(float *)(v16 + v34) = v35 * v36;
            v34 += 4;
          }
          while (v21 != v34);
        }
      }
      ++v11;
      v9 = v49;
      v13 = (float *)((char *)v13 + v50);
      v12 = (float *)((char *)v12 + v50);
      v15 = (float *)((char *)v15 + v17);
      v53 = (float *)((char *)v53 + v17);
      v16 += v17;
      v14 = (float *)((char *)v14 + v50);
    }
    while (v11 != v51);
  }
  v37 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v57;
  if (v57)
  {
    v41 = (unint64_t *)&v57->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v59;
  if (v59)
  {
    v44 = (unint64_t *)&v59->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v61;
  if (v61)
  {
    v47 = (unint64_t *)&v61->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1916C8DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  va_list va2;

  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::rnn_kernel_cpu::embedding_lookup_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  float v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  float v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v9 = *(unsigned int *)(a1 + 312);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v34, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v32, *(void **)a4, *(std::__shared_weak_count **)(a4 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v30, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v28, *(void **)a6, *(std::__shared_weak_count **)(a6 + 8));
  v10 = v29;
  v11 = **(float **)(v28 + 24);
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if ((int)v9 >= 1)
  {
    v14 = *(float **)(v34 + 24);
    v15 = (float *)(*(_QWORD *)(v32 + 24) + 4 * (int)v11);
    v16 = *(float **)(v30 + 24);
    v17 = 4 * *(int *)(v32 + 8);
    do
    {
      v18 = *v16++;
      *v14++ = *v15 + v18;
      v15 = (float *)((char *)v15 + v17);
      --v9;
    }
    while (v9);
  }
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v33;
  if (v33)
  {
    v23 = (unint64_t *)&v33->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v35;
  if (v35)
  {
    v26 = (unint64_t *)&v35->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1916C8FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::rnn_kernel_cpu::set_seq(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  std::__shared_weak_count *v16;

  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v15, *(void **)a5, *(std::__shared_weak_count **)(a5 + 8));
  v7 = **(_DWORD **)(v15 + 24);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(v14, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  v8 = (std::__shared_weak_count *)v14[1];
  *(_DWORD *)(*(_QWORD *)(v14[0] + 24) + 4 * a4) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1916C90F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::matrix_vector_mult_batched(uint64_t a1, uint64_t a2, unsigned int __K, const float *__A, unsigned int __ldc, float *__C, int __M, float a8)
{
  float *v8;
  uint64_t v11;
  vDSP_Length v13;
  uint64_t v14;
  std::runtime_error *exception;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;

  v8 = __C;
  if (*(_QWORD *)(*(_QWORD *)a1 + 8) != __PAIR64__(__ldc, __K))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v40, __K);
    v17 = std::string::insert(&v40, 0, "[matrix_vector_mult_batched] Mismatch ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v41, "/");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, __ldc);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v39;
    else
      v21 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      size = v39.__r_.__value_.__l.__size_;
    v23 = std::string::append(&v42, (const std::string::value_type *)v21, size);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v43, "/");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v38, *(_DWORD *)(*(_QWORD *)a1 + 8));
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v38;
    else
      v27 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    else
      v28 = v38.__r_.__value_.__l.__size_;
    v29 = std::string::append(&v44, (const std::string::value_type *)v27, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::string::append(&v45, "/");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v37, *(_DWORD *)(*(_QWORD *)a1 + 12));
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v37;
    else
      v33 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v34 = v37.__r_.__value_.__l.__size_;
    v35 = std::string::append(&v46, (const std::string::value_type *)v33, v34);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v47);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  LODWORD(v11) = __M;
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, __M, __ldc, __K, 1.0, __A, __K, *(const float **)(*(_QWORD *)a1 + 24), __K, a8, __C, __ldc);
  if (*(_QWORD *)a2 && (int)v11 >= 1)
  {
    v13 = (int)__ldc;
    v14 = 4 * (int)__ldc;
    v11 = v11;
    do
    {
      vDSP_vadd(*(const float **)(*(_QWORD *)a2 + 24), 1, v8, 1, v8, 1, v13);
      v8 = (float *)((char *)v8 + v14);
      --v11;
    }
    while (v11);
  }
}

void sub_1916C93C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  int v57;
  uint64_t v58;

  if (*(char *)(v58 - 57) < 0)
    operator delete(*(void **)(v58 - 80));
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 89) < 0)
    operator delete(*(void **)(v58 - 112));
  if (*(char *)(v58 - 121) < 0)
    operator delete(*(void **)(v58 - 144));
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v58 - 153) < 0)
    operator delete(*(void **)(v58 - 176));
  if (a56 < 0)
    operator delete(a51);
  if (a30 < 0)
    operator delete(a25);
  if (a49 < 0)
    operator delete(a44);
  if (a42 < 0)
    operator delete(a37);
  if (a36 < 0)
  {
    operator delete(a31);
    if ((v57 & 1) == 0)
LABEL_26:
      _Unwind_Resume(a1);
  }
  else if (!v57)
  {
    goto LABEL_26;
  }
  __cxa_free_exception(v56);
  goto LABEL_26;
}

float vision::DCN::boundingbox::calculate_overlap(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;

  v3 = a1[1];
  v2 = a1[2];
  v4 = *a1 - v2;
  v6 = a2[1];
  v5 = a2[2];
  v7 = *a2 - v5;
  v8 = *a1 + v2;
  v9 = *a2 + v5;
  v10 = v3 - v2;
  v11 = v6 - v5;
  v12 = v2 + v3;
  v13 = v5 + v6;
  v14 = fmaxf(fminf(v8, v9) - fmaxf(v4, v7), 0.0) * fmaxf(fminf(v12, v5 + v6) - fmaxf(v10, v6 - v5), 0.0);
  return v14
       / (float)((float)((float)((float)(v8 - v4) * (float)(v12 - v10)) + (float)((float)(v9 - v7) * (float)(v13 - v11)))
               - v14);
}

void Espresso::kaldi_like_sgemv_float_int8(Espresso *this, const signed __int8 *a2, const float *a3, const float *a4, float *a5, unint64_t a6, unsigned int a7, const inner_product_uniforms *a8, BOOL a9)
{
  vDSP_Length v12;
  size_t v13;
  void *v14;
  const float *v15;
  float *v16;
  unint64_t v17;
  uint64_t *v18;
  int8x16_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int8x16_t v24;
  _QWORD block[13];
  int8x16_t v30;
  float *v31;

  v12 = a8;
  if (a6 >> 62)
    v13 = -1;
  else
    v13 = 4 * a6;
  v14 = (void *)operator new[]();
  bzero(v14, v13);
  if (a6)
  {
    v15 = a4;
    v16 = (float *)v14;
    v17 = a6;
    do
    {
      vDSP_sve(v15, 1, v16++, v12);
      v15 += v12;
      --v17;
    }
    while (v17);
  }
  if (a9)
  {
    v18 = (uint64_t *)operator new();
    Espresso::InputQuantizationContext<short>::InputQuantizationContext(v18, a4, v12, a6);
    v19 = *(int8x16_t *)v18;
  }
  else
  {
    v18 = 0;
    v19 = 0uLL;
  }
  v24 = v19;
  v20 = a7;
  v21 = v12 * a6;
  if (v12 * a6 * a7 < 0x1E8481)
  {
    v23 = 1;
    v22 = v20;
  }
  else
  {
    if (v21 > 0x186A0)
      v22 = 1;
    else
      v22 = 0x186A0 / v21;
    v23 = a7 / v22 + 1;
  }
  bzero(a5, 4 * v20 * a6);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN8Espresso30kaldi_like_sgemv_float_genericIaEEvPKT_PKfS5_S5_PfmRKNS_22inner_product_uniformsEb_block_invoke;
  block[3] = &__block_descriptor_tmp_10860;
  block[4] = v22;
  block[5] = v20;
  block[6] = a6;
  block[7] = this;
  block[8] = v12;
  block[9] = a2;
  block[10] = a3;
  block[11] = a4;
  block[12] = v14;
  v30 = vextq_s8(v24, v24, 8uLL);
  v31 = a5;
  dispatch_apply(v23, 0, block);
  if (v18)
    std::default_delete<Espresso::InputQuantizationContext<short>>::operator()[abi:ne180100](v18);
  JUMPOUT(0x19401CD78);
}

void sub_1916C9794(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x19401CD90](v2, 0x90C40C859B4A5);
  MEMORY[0x19401CD78](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::InputQuantizationContext<short>::InputQuantizationContext(_QWORD *a1, const float *a2, vDSP_Length a3, unint64_t a4)
{
  size_t v8;
  void *v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  const float *v14;
  float *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;

  if (a4 >> 62)
    v8 = -1;
  else
    v8 = 4 * a4;
  v9 = (void *)operator new[]();
  bzero(v9, v8);
  *a1 = v9;
  if (((a4 * a3) & 0x8000000000000000) != 0)
    v10 = -1;
  else
    v10 = 2 * a4 * a3;
  v11 = (void *)operator new[]();
  bzero(v11, v10);
  a1[1] = v11;
  v12 = (void *)operator new[]();
  bzero(v12, v8);
  v13 = 4 * a3;
  if (a4)
  {
    v14 = a2;
    v15 = (float *)v12;
    v16 = a4;
    do
    {
      vDSP_maxmgv(v14, 1, v15++, a3);
      v14 = (const float *)((char *)v14 + v13);
      --v16;
    }
    while (v16);
  }
  v17 = (void *)operator new[]();
  bzero(v17, 4 * a3);
  if (a4)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = *((float *)v12 + v19);
      if (v20 == 0.0)
        v21 = 1.0;
      else
        v21 = 32767.0 / v20;
      *(float *)(*a1 + 4 * v19) = v21;
      memcpy(v17, a2, 4 * a3);
      cblas_sscal(a3, v21, (float *)v17, 1);
      vDSP_vfix16((const float *)v17, 1, (__int16 *)(a1[1] + v18), 1, a3);
      ++v19;
      v18 += 2 * a3;
      a2 = (const float *)((char *)a2 + v13);
    }
    while (a4 != v19);
  }
  MEMORY[0x19401CD78](v17, 0x1000C8052888210);
  MEMORY[0x19401CD78](v12, 0x1000C8052888210);
  return a1;
}

void sub_1916C99E0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x19401CD78](v2, 0x1000C8052888210);
  v4 = v1[1];
  v1[1] = 0;
  if (v4)
    MEMORY[0x19401CD78](v4, 0x1000C80BDFB0063);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    MEMORY[0x19401CD78](v5, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void std::default_delete<Espresso::InputQuantizationContext<short>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    MEMORY[0x19401CD78](v2, 0x1000C80BDFB0063);
  v3 = *a1;
  *a1 = 0;
  if (v3)
    MEMORY[0x19401CD78](v3, 0x1000C8052888210);
  JUMPOUT(0x19401CD90);
}

void Espresso::kaldi_like_sgemv_float_uint8(Espresso *this, const unsigned __int8 *a2, const float *a3, const float *a4, float *a5, unint64_t a6, unsigned int a7, const inner_product_uniforms *a8, BOOL a9)
{
  vDSP_Length v12;
  size_t v13;
  void *v14;
  const float *v15;
  float *v16;
  unint64_t v17;
  uint64_t *v18;
  int8x16_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  int8x16_t v24;
  _QWORD block[13];
  int8x16_t v30;
  float *v31;

  v12 = a8;
  if (a6 >> 62)
    v13 = -1;
  else
    v13 = 4 * a6;
  v14 = (void *)operator new[]();
  bzero(v14, v13);
  if (a6)
  {
    v15 = a4;
    v16 = (float *)v14;
    v17 = a6;
    do
    {
      vDSP_sve(v15, 1, v16++, v12);
      v15 += v12;
      --v17;
    }
    while (v17);
  }
  if (a9)
  {
    v18 = (uint64_t *)operator new();
    Espresso::InputQuantizationContext<short>::InputQuantizationContext(v18, a4, v12, a6);
    v19 = *(int8x16_t *)v18;
  }
  else
  {
    v18 = 0;
    v19 = 0uLL;
  }
  v24 = v19;
  v20 = a7;
  v21 = v12 * a6;
  if (v12 * a6 * a7 < 0x1E8481)
  {
    v23 = 1;
    v22 = v20;
  }
  else
  {
    if (v21 > 0x186A0)
      v22 = 1;
    else
      v22 = 0x186A0 / v21;
    v23 = a7 / v22 + 1;
  }
  bzero(a5, 4 * v20 * a6);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN8Espresso30kaldi_like_sgemv_float_genericIhEEvPKT_PKfS5_S5_PfmRKNS_22inner_product_uniformsEb_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  block[4] = v22;
  block[5] = v20;
  block[6] = a6;
  block[7] = this;
  block[8] = v12;
  block[9] = a2;
  block[10] = a3;
  block[11] = a4;
  block[12] = v14;
  v30 = vextq_s8(v24, v24, 8uLL);
  v31 = a5;
  dispatch_apply(v23, 0, block);
  if (v18)
    std::default_delete<Espresso::InputQuantizationContext<short>>::operator()[abi:ne180100](v18);
  JUMPOUT(0x19401CD78);
}

void sub_1916CA6EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x19401CD90](v2, 0x90C40C859B4A5);
  MEMORY[0x19401CD78](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void Espresso::analysis_pass_insert_casts::~analysis_pass_insert_casts(Espresso::analysis_pass_insert_casts *this)
{
  *(_QWORD *)this = &off_1E2D93380;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E2D93380;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::analysis_pass_insert_casts::deserialize(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  float *v6;
  uint64_t v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint8_t buf[8];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = 0;
  v17 = 0;
  (*(void (**)(_QWORD, _QWORD **))(*(_QWORD *)*a2 + 32))(*a2, &v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    v6 = (float *)(a1 + 8);
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a2 + 120))(&v13, *a2, v4);
      v7 = Espresso::keys_translation::c_api_engine_from_name(v4);
      v8 = Espresso::keys_translation::cpp_platform_from_c_api(v7);
      std::__hash_table<Espresso::platform,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,std::allocator<Espresso::platform>>::__emplace_unique_key_args<Espresso::platform,Espresso::platform const&>(v6, v8, v8);
      v9 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  *(_QWORD *)buf = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return 1;
}

void sub_1916CB36C()
{
  JUMPOUT(0x1916CB374);
}

void Espresso::analysis_pass_insert_casts::serialize(Espresso::analysis_pass_insert_casts *this@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  int *i;
  void *v6;
  Espresso *v7;
  const char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p;
  uint64_t v28;
  uint64_t v29;
  uint8_t buf[8];
  std::__shared_weak_count *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(&__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a2, (uint64_t)v4, &__p);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  for (i = (int *)*((_QWORD *)this + 3); i; i = *(int **)i)
  {
    v6 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    std::string::basic_string[abi:ne180100]<0>(&__p, "json");
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v25, (uint64_t)v6, &__p);
    if (SHIBYTE(v29) < 0)
      operator delete(__p);
    __p = 0;
    v28 = 0;
    v29 = 0;
    Espresso::abstract_engine_factory::shared(buf);
    Espresso::abstract_engine_factory::engine_for_platform(*(uint64_t *)buf, i + 4, &v23);
    v9 = v31;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v23;
    if (v23)
    {
      v7 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
      if (v7)
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        v7 = (Espresso *)MEMORY[0x19401C808](&__p, v13);
      }
    }
    v14 = HIBYTE(v29);
    if (v29 < 0)
      v14 = v28;
    if (!v14)
    {
      v15 = Espresso::espresso_os_log_subsystem(v7, v8);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v22 = i[4];
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v22;
        _os_log_error_impl(&dword_190DAF000, v15, OS_LOG_TYPE_ERROR, "Cannot find engine for platform: %d", buf, 8u);
      }
    }
    (*(void (**)(_QWORD, void **, uint64_t *))(*(_QWORD *)*a2 + 240))(*a2, &__p, &v25);
    v16 = v24;
    if (v24)
    {
      v17 = (unint64_t *)&v24->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (SHIBYTE(v29) < 0)
      operator delete(__p);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
}

void sub_1916CB624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<Espresso::platform,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,std::allocator<Espresso::platform>>::__emplace_unique_key_args<Espresso::platform,Espresso::platform const&>(float *a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v33 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v33)
        operator delete(v33);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v22)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
      v6 %= v7;
  }
  else
  {
    v6 = ((_DWORD)v7 - 1) & v6;
  }
LABEL_64:
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v31)
  {
    *v12 = *v31;
LABEL_72:
    *v31 = v12;
    goto LABEL_73;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v30[v6] = a1 + 4;
  if (*v12)
  {
    v32 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_1916CBA7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_params_insert_casts::~pass_params_insert_casts(Espresso::pass_params_insert_casts *this)
{
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_insert_casts::~pass_insert_casts(Espresso::pass_insert_casts *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_insert_casts::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

void Espresso::pass_insert_casts::run_on_network(Espresso::pass_insert_casts *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  const void *v4;
  _DWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  const void *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  std::string *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  std::string *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  char v80;
  char v81;
  unsigned __int8 *v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  _OWORD *v92;
  int v93;
  _QWORD *v94;
  _OWORD *v95;
  BOOL v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void *v100;
  Espresso::net *v101;
  void *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  _QWORD *v120;
  _QWORD *v121;
  char *v122;
  uint64_t **v123;
  uint64_t **v124;
  unsigned int v125;
  _DWORD *v126;
  std::__shared_weak_count *v127;
  __int128 v128;
  _BYTE __p[24];
  void *v130;
  void *v131[2];
  void *v132[4];
  uint64_t v133[3];
  __int128 *v134[3];
  unint64_t v135;
  __int128 *v136[2];
  uint64_t **v137;
  __int128 *v138;
  uint64_t *v139;
  __int128 v140;
  __int128 v141;
  int v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  unsigned __int8 *v146;
  __int128 v147;
  __int128 v148;
  int v149;

  v4 = (const void *)*((_QWORD *)this + 1);
  if (!v4
  {
    v126 = 0;
    v127 = 0;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("pass_implicit_casting: options are not set");
  }
  v118 = a3;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v126 = v7;
  v127 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v125 = v7[2];
  Espresso::net::_tag_inputs_and_outputs((Espresso::net *)a2);
  Espresso::net::get_producers_of_blobs((Espresso::net *)a2, (uint64_t)v131);
  v136[0] = 0;
  v11 = a2[4];
  if (a2[5] != v11)
  {
    v12 = 0;
    v120 = a2 + 7;
    v121 = a2 + 12;
    v119 = "Couldn't find top names for layer %zu";
    v123 = a2 + 44;
    do
    {
      v13 = &v11[2 * v12];
      if (!*v13)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Network has nullptr layer");
      if (*(_DWORD *)(*v13 + 8) == v125)
      {
        if (!std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v121, v12))goto LABEL_191;
        if (!std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v120, v12))
        {
          v119 = "Couldn't find bottom names for layer %zu";
LABEL_191:
          Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>(v119, v12);
        }
        *(_QWORD *)&v128 = v136;
        v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v120, (unint64_t *)v136, (uint64_t)&std::piecewise_construct, (uint64_t **)&v128);
        v15 = v14[3];
        if (v14[4] == v15)
        {
          v17 = -1;
        }
        else
        {
          v16 = 0;
          v17 = -1;
          do
          {
            v18 = (_QWORD *)(v15 + 24 * v16);
            v19 = *(_DWORD *)(*v13 + 12);
            LODWORD(v143) = *(_DWORD *)(*v13 + 8);
            LODWORD(v134[0]) = v19;
            if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v131, (uint64_t)v18))
            {
              v20 = a2[4][2
                        * std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v131, (uint64_t)v18)[5]];
              v21 = *(_DWORD *)(v20 + 8);
              LODWORD(v20) = *(_DWORD *)(v20 + 12);
              LODWORD(v143) = v21;
              LODWORD(v134[0]) = v20;
            }
            Espresso::net::resolve_blob_numerical_properties((uint64_t)a2, v18, (int *)&v143, v134, (uint64_t)&v128);
            if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[45], v18))
            {
              (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, unint64_t))(**(_QWORD **)(*v13 + 64)
                                                                                               + 24))(&v147, *(_QWORD *)(*v13 + 64), 0, v16);
              if ((_QWORD)v147)
              {
                if (*(_BYTE *)(v147 + 8))
                  DWORD2(v128) = *(_DWORD *)(v147 + 12);
                if (*(_BYTE *)(v147 + 16))
                {
                  v128 = *(_OWORD *)(v147 + 24);
                  if (&v128 != (__int128 *)(v147 + 24))
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *(char **)(v147 + 40), *(_QWORD *)(v147 + 48), (uint64_t)(*(_QWORD *)(v147 + 48) - *(_QWORD *)(v147 + 40)) >> 2);
                }
              }
              *(_QWORD *)&v140 = v18;
              v22 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v123, v18, (uint64_t)&std::piecewise_construct, (__int128 **)&v140);
              *(_OWORD *)(v22 + 56) = v128;
              if (v22 + 56 != (char *)&v128)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v22 + 72, *(char **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 2);
              v23 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
              if (*((_QWORD *)&v147 + 1))
              {
                v24 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
                do
                  v25 = __ldaxr(v24);
                while (__stlxr(v25 - 1, v24));
                if (!v25)
                {
                  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                  std::__shared_weak_count::__release_weak(v23);
                }
              }
            }
            if (v17 < 0)
              v17 = (int)v134[0];
            if (*(_QWORD *)__p)
            {
              *(_QWORD *)&__p[8] = *(_QWORD *)__p;
              operator delete(*(void **)__p);
            }
            ++v16;
            v15 = v14[3];
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v14[4] - v15) >> 3) > v16);
        }
        *(_QWORD *)&v128 = v136;
        v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v121, (unint64_t *)v136, (uint64_t)&std::piecewise_construct, (uint64_t **)&v128);
        v27 = v26[3];
        v28 = v26[4];
        if (v28 != v27)
        {
          v29 = 0;
          do
          {
            if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[45], (_QWORD *)(v27 + 24 * v29)))
            {
              Espresso::net::resolve_blob_numerical_properties((uint64_t)a2, (_QWORD *)(v27 + 24 * v29), (int *)(*v13 + 8), (_DWORD *)(*v13 + 12), (uint64_t)&v128);
              (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, unint64_t))(**(_QWORD **)(*v13 + 64)
                                                                                                + 24))(&v147, *(_QWORD *)(*v13 + 64), 1, v29);
              if ((_QWORD)v147)
              {
                if (*(_BYTE *)(v147 + 8))
                  DWORD2(v128) = *(_DWORD *)(v147 + 12);
                if (*(_BYTE *)(v147 + 16))
                {
                  v128 = *(_OWORD *)(v147 + 24);
                  if (&v128 != (__int128 *)(v147 + 24))
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *(char **)(v147 + 40), *(_QWORD *)(v147 + 48), (uint64_t)(*(_QWORD *)(v147 + 48) - *(_QWORD *)(v147 + 40)) >> 2);
                }
              }
              else if (v17 >= 1)
              {
                DWORD2(v128) = v17;
              }
              *(_QWORD *)&v140 = v27 + 24 * v29;
              v30 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v123, (_QWORD *)v140, (uint64_t)&std::piecewise_construct, (__int128 **)&v140);
              *(_OWORD *)(v30 + 56) = v128;
              if (v30 + 56 != (char *)&v128)
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30 + 72, *(char **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 2);
              v31 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
              if (*((_QWORD *)&v147 + 1))
              {
                v32 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
                do
                  v33 = __ldaxr(v32);
                while (__stlxr(v33 - 1, v32));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              if (*(_QWORD *)__p)
              {
                *(_QWORD *)&__p[8] = *(_QWORD *)__p;
                operator delete(*(void **)__p);
              }
              v27 = v26[3];
              v28 = v26[4];
            }
            ++v29;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v28 - v27) >> 3) > v29);
        }
      }
      v12 = (unint64_t)++v136[0];
      v11 = a2[4];
    }
    while (v136[0] < (__int128 *)(((char *)a2[5] - (char *)v11) >> 4));
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v132[0]);
  v34 = v131[0];
  v131[0] = 0;
  if (v34)
    operator delete(v34);
  v35 = std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(a2 + 50, v125, &v125);
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v148 = 0u;
  v147 = 0u;
  v149 = 1065353216;
  v141 = 0u;
  v140 = 0u;
  v142 = 1065353216;
  v136[1] = &v140;
  v137 = a2;
  v138 = &v147;
  v139 = &v143;
  v124 = v35 + 5;
  v135 = 0;
  v136[0] = (__int128 *)(v35 + 5);
  v37 = a2[4];
  v36 = a2[5];
  if (v36 != v37)
  {
    v38 = 0;
    do
    {
      v39 = &v37[2 * v38];
      if (!*v39)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Network has nullptr layer");
      if (*(_DWORD *)(*v39 + 8) == v125)
      {
        memset(v132, 0, sizeof(v132));
        *(_OWORD *)v131 = 0u;
        if (*((_BYTE *)a2[2] + 127))
          Espresso::base_kernel::get_runtime_type_config(*(_QWORD **)(*v39 + 64), v133, (uint64_t *)v134, &v128);
        else
          (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t *, __int128 **))(**(_QWORD **)(*v39 + 64)
                                                                                         + 312))(&v128, *(_QWORD *)(*v39 + 64), v133, v134);
        std::vector<Espresso::blob_numerical_properties>::__vdeallocate((uint64_t *)v131);
        *(_OWORD *)v131 = v128;
        v132[0] = *(void **)__p;
        *(_QWORD *)__p = 0;
        v128 = 0uLL;
        std::vector<Espresso::blob_numerical_properties>::__vdeallocate((uint64_t *)&v132[1]);
        *(_OWORD *)&v132[1] = *(_OWORD *)&__p[8];
        v132[3] = v130;
        *(_QWORD *)&__p[16] = 0;
        v130 = 0;
        *(_QWORD *)&__p[8] = 0;
        v146 = &__p[8];
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
        v146 = (unsigned __int8 *)&v128;
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
        *(_QWORD *)&v128 = &v135;
        v40 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(a2 + 7), &v135, (uint64_t)&std::piecewise_construct, (uint64_t **)&v128);
        *(_QWORD *)&v128 = &v135;
        v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(a2 + 12), &v135, (uint64_t)&std::piecewise_construct, (uint64_t **)&v128);
        v42 = v40 + 3;
        v43 = v41 + 3;
        v44 = *v39;
        v45 = *(const void **)(*v39 + 64);
        if (v45)
        {
          if (v46)
          {
            v47 = *(std::__shared_weak_count **)(v44 + 72);
            *(_QWORD *)&v128 = v46;
            *((_QWORD *)&v128 + 1) = v47;
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            v50 = (int *)(*(uint64_t (**)(void *))(*(_QWORD *)v46 + 320))(v46);
            v51 = v40[3];
            if (v40[4] != v51)
            {
              v52 = 0;
              v53 = 0;
              v54 = *v50;
              v55 = (*v50 > 0xD) | (0xFFCu >> *v50);
              do
              {
                v146 = (unsigned __int8 *)(v51 + v52);
                v56 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v124, (_QWORD *)(v51 + v52), (uint64_t)&std::piecewise_construct, (__int128 **)&v146)+ 16);
                v57 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v128 + 320))(v128);
                if ((((v56 > 0xE) | (0x3003u >> v56)) & v55 & 1) == 0 || !*(_DWORD *)(v57 + 4))
                {
                  v58 = *v42;
                  v146 = (unsigned __int8 *)(*v43 + v52);
                  v59 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v140, v146, (__int128 **)&v146);
                  LODWORD(v146) = v56;
                  v60 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v59 + 40), v56, &v146);
                  std::string::operator=(v60 + 1, (const std::string *)(v58 + v52));
                  v61 = *v43;
                  v146 = (unsigned __int8 *)(*v42 + v52);
                  v62 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v140, v146, (__int128 **)&v146);
                  LODWORD(v146) = v54;
                  v63 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v62 + 40), v54, &v146);
                  std::string::operator=(v63 + 1, (const std::string *)(v61 + v52));
                }
                ++v53;
                v51 = v40[3];
                v52 += 24;
              }
              while (v53 < 0xAAAAAAAAAAAAAAABLL * ((v40[4] - v51) >> 3));
              v47 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
            }
            if (v47)
            {
              v64 = (unint64_t *)&v47->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
          }
        }
        *(_QWORD *)&v128 = &v132[1];
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
        *(_QWORD *)&v128 = v131;
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
        v131[0] = v133;
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)v131);
        v131[0] = v134;
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)v131);
        v38 = v135;
        v37 = a2[4];
        v36 = a2[5];
      }
      v135 = ++v38;
    }
    while (v38 < ((char *)v36 - (char *)v37) >> 4);
  }
  Espresso::net::insert_layers((uint64_t)a2, &v143);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::~__hash_table((uint64_t)&v140);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v147);
  v131[0] = &v143;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v131);
  v128 = 0u;
  *(_OWORD *)__p = 0u;
  *(_DWORD *)&__p[16] = 1065353216;
  Espresso::net::get_consumers_of_blobs(a2, &v128, (uint64_t)v131);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v128);
  Espresso::net::get_analysis_if_existing<Espresso::analysis_make_ssa>(&v143, (uint64_t)a2);
  *((_QWORD *)&v140 + 1) = 0;
  *(_QWORD *)&v141 = 0;
  *(_QWORD *)&v140 = (char *)&v140 + 8;
  v128 = 0u;
  *(_OWORD *)__p = 0u;
  *(_DWORD *)&__p[16] = 1065353216;
  v133[0] = 0;
  v66 = a2[4];
  v67 = a2[5];
  if (v67 == v66)
  {
    v66 = a2[5];
    goto LABEL_154;
  }
  v68 = 0;
  v122 = (char *)(a2 + 12);
  do
  {
    v69 = &v66[2 * v68];
    v70 = *v69;
    if (!*v69)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Network has nullptr layer");
    v71 = (_QWORD *)(v70 + 40);
    v72 = *(char *)(v70 + 63);
    if (v72 < 0)
    {
      if (*(_QWORD *)(v70 + 48) != 4)
        goto LABEL_143;
      v71 = (_QWORD *)*v71;
    }
    else if (v72 != 4)
    {
      goto LABEL_143;
    }
    if (*(_DWORD *)v71 != 1953718627)
      goto LABEL_143;
    if (*(_DWORD *)(v70 + 8) != v125)
      goto LABEL_143;
    *(_QWORD *)&v147 = v133;
    v73 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v122, (unint64_t *)v133, (uint64_t)&std::piecewise_construct, (uint64_t **)&v147);
    if (v73[4] == v73[3])
      goto LABEL_143;
    v74 = *(_QWORD *)(*v69 + 64);
    std::string::basic_string[abi:ne180100]<0>(&v147, "is_output");
    if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v74 + 240), (unsigned __int8 *)&v147))
    {
      v75 = *(_QWORD *)(*v69 + 64);
      std::string::basic_string[abi:ne180100]<0>(v136, "is_output");
      v134[0] = (__int128 *)v136;
      v76 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v75 + 240, (unsigned __int8 *)v136, (uint64_t)&std::piecewise_construct, v134)+ 10) != 0;
      if (SHIBYTE(v137) < 0)
        operator delete(v136[0]);
    }
    else
    {
      v76 = 0;
    }
    if (SBYTE7(v148) < 0)
    {
      operator delete((void *)v147);
      if (v76)
        goto LABEL_143;
    }
    else if (v76)
    {
      goto LABEL_143;
    }
    *(_QWORD *)&v147 = v133;
    v77 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v122, (unint64_t *)v133, (uint64_t)&std::piecewise_construct, (uint64_t **)&v147);
    v78 = (unsigned __int8 *)v77[3];
    v79 = (unsigned __int8 *)v77[4];
    if (v78 == v79)
    {
      v80 = 0;
      goto LABEL_128;
    }
    v80 = 0;
    v81 = 0;
    do
    {
      Espresso::ssa_blob_name::ssa_blob_name((uint64_t)&v147, (uint64_t)v78);
      if (v143
        && (v136[0] = (__int128 *)((char *)&v147 + 8),
            (unint64_t)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143 + 8, (uint64_t)&v147 + 8, (uint64_t)&std::piecewise_construct, v136)[5] > 1)|| (v82 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v131, v78)) != 0&& *((_QWORD *)v82 + 6) != *((_QWORD *)v82 + 5))
      {
        v81 = 1;
LABEL_117:
        v83 = 1;
        goto LABEL_119;
      }
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[33], (_QWORD *)&v147 + 1))
      {
        v136[0] = (__int128 *)((char *)&v147 + 8);
        if (std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2 + 32, (_QWORD *)&v147 + 1, v136)[56])
        {
          v80 = 1;
          goto LABEL_117;
        }
      }
      v83 = 0;
LABEL_119:
      if (SHIBYTE(v148) < 0)
        operator delete(*((void **)&v147 + 1));
      v78 += 24;
      if (v78 == v79)
        v84 = 1;
      else
        v84 = v83;
    }
    while ((v84 & 1) == 0);
    if ((v81 & 1) != 0)
      goto LABEL_143;
LABEL_128:
    if ((v80 & 1) != 0)
      goto LABEL_143;
    v85 = *(_QWORD *)(*v69 + 64);
    std::string::basic_string[abi:ne180100]<0>(&v147, "basic_block_head");
    if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v85 + 240), (unsigned __int8 *)&v147))
    {
      v86 = *(_QWORD *)(*v69 + 64);
      std::string::basic_string[abi:ne180100]<0>(v136, "basic_block_head");
      v134[0] = (__int128 *)v136;
      v87 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 240, (unsigned __int8 *)v136, (uint64_t)&std::piecewise_construct, v134)+ 10) != 0;
      if (SHIBYTE(v137) < 0)
        operator delete(v136[0]);
    }
    else
    {
      v87 = 0;
    }
    if (SBYTE7(v148) < 0)
      operator delete((void *)v147);
    if (v87)
    {
      if (v133[0] + 1 >= (unint64_t)(((char *)a2[5] - (char *)a2[4]) >> 4))
        goto LABEL_143;
      v88 = *(_QWORD *)(*v69 + 64);
      std::string::basic_string[abi:ne180100]<0>(&v147, "basic_block_head");
      v136[0] = &v147;
      LODWORD(v88) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 240, (unsigned __int8 *)&v147, (uint64_t)&std::piecewise_construct, v136)+ 10);
      v89 = *(_QWORD *)(a2[4][2 * v133[0] + 2] + 64);
      std::string::basic_string[abi:ne180100]<0>(v136, "basic_block_head");
      v134[0] = (__int128 *)v136;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v89 + 240, (unsigned __int8 *)v136, (uint64_t)&std::piecewise_construct, v134)+ 10) = v88;
      if (SHIBYTE(v137) < 0)
        operator delete(v136[0]);
      if (SBYTE7(v148) < 0)
        operator delete((void *)v147);
      v90 = a2[4][2 * v133[0] + 2];
      *(_QWORD *)&v147 = *v69 + 16;
      v91 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v128, v147, (uint64_t)&std::piecewise_construct, (__int128 **)&v147);
      std::string::operator=((std::string *)(v91 + 5), (const std::string *)(v90 + 16));
    }
    std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v140, v133[0], v133[0]);
LABEL_143:
    v68 = v133[0] + 1;
    v133[0] = v68;
    v66 = a2[4];
    v67 = a2[5];
  }
  while (v68 < ((char *)v67 - (char *)v66) >> 4);
  v92 = (_OWORD *)v140;
  if ((__int128 *)v140 != (__int128 *)((char *)&v140 + 8))
  {
    v93 = 0;
    do
    {
      Espresso::net::remove_layer((Espresso::net *)a2, *((_DWORD *)v92 + 8) - v93);
      v94 = (_QWORD *)*((_QWORD *)v92 + 1);
      if (v94)
      {
        do
        {
          v95 = v94;
          v94 = (_QWORD *)*v94;
        }
        while (v94);
      }
      else
      {
        do
        {
          v95 = (_OWORD *)*((_QWORD *)v92 + 2);
          v96 = *(_QWORD *)v95 == (_QWORD)v92;
          v92 = v95;
        }
        while (!v96);
      }
      ++v93;
      v92 = v95;
    }
    while (v95 != (__int128 *)((char *)&v140 + 8));
    v66 = a2[4];
    v67 = a2[5];
  }
LABEL_154:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v128);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v140, *((_QWORD **)&v140 + 1));
  v97 = v144;
  if (v144)
  {
    v98 = (unint64_t *)&v144->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v132[0]);
  v100 = v131[0];
  v131[0] = 0;
  if (v100)
    operator delete(v100);
  Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>((uint64_t)a2);
  Espresso::correct_jump_labels_after_ordering_change((Espresso *)a2, v101);
  Espresso::net::get_analysis_if_existing<Espresso::analysis_pass_insert_casts>(v131, (uint64_t)a2);
  if (!v131[0])
  {
    v108 = operator new(0x48uLL);
    v108[1] = 0;
    v108[2] = 0;
    *v108 = &off_1E2DBD738;
    v108[8] = 0;
    v108[3] = &off_1E2D93380;
    *((_OWORD *)v108 + 2) = 0u;
    *((_OWORD *)v108 + 3) = 0u;
    *((_DWORD *)v108 + 16) = 1065353216;
    v109 = (std::__shared_weak_count *)v131[1];
    v131[0] = v108 + 3;
    v131[1] = v108;
    if (v109)
    {
      v110 = (unint64_t *)&v109->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
  }
  v102 = v131[0];
  std::__hash_table<Espresso::platform,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,std::allocator<Espresso::platform>>::__emplace_unique_key_args<Espresso::platform,Espresso::platform const&>((float *)v131[0] + 2, v125, v125);
  v103 = (std::__shared_weak_count *)v131[1];
  if (v131[1])
  {
    v104 = (unint64_t *)((char *)v131[1] + 8);
    do
      v105 = __ldxr(v104);
    while (__stxr(v105 + 1, v104));
    *(_BYTE *)v118 = 1;
    *(_QWORD *)(v118 + 8) = v102;
    *(_QWORD *)(v118 + 16) = v103;
    do
      v106 = __ldxr(v104);
    while (__stxr(v106 + 1, v104));
    do
      v107 = __ldaxr(v104);
    while (__stlxr(v107 - 1, v104));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  else
  {
    *(_BYTE *)v118 = 1;
    *(_QWORD *)(v118 + 8) = v102;
    *(_QWORD *)(v118 + 16) = 0;
  }
  v112 = (std::__shared_weak_count *)v131[1];
  if (v131[1])
  {
    v113 = (unint64_t *)((char *)v131[1] + 8);
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v115 = v127;
  if (v127)
  {
    v116 = (unint64_t *)&v127->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
}

void sub_1916CCBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,_QWORD *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  uint64_t v56;

  if (a43 < 0)
    operator delete(a38);
  if (*(char *)(v56 - 121) < 0)
    operator delete(a56);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a19);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v56 - 224, a47);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v56 - 184);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::collect_requested_types(_anonymous_namespace_ *this, const Espresso::net *a2, unint64_t a3, int a4)
{
  char v4;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  int v32;
  char **v33;
  int v34;
  BOOL v35;
  char **v36;
  _QWORD *v37;
  char **v38;
  unsigned int v39;
  __int128 v40;
  void *__p;
  _BYTE *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  void **v47[2];
  unint64_t v48;
  unint64_t v49;
  char *v50;

  v4 = a4;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (a4)
  {
    v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)a2 + 12, a3);
    if (&v44 == v8 + 3)
      goto LABEL_6;
  }
  else
  {
    v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)a2 + 7, a3);
    if (&v44 == v8 + 3)
      goto LABEL_6;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v44, (std::string *)v8[3], (std::string *)v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
LABEL_6:
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v9 = v44;
  v10 = v45;
  if (v44 != v45)
  {
    v38 = (char **)((char *)a2 + 408);
    do
    {
      v11 = *((_QWORD *)a2 + 4) + 16 * a3;
      HIDWORD(v40) = 1;
      v42 = 0;
      v43 = 0;
      __p = 0;
      *(_QWORD *)&v40 = 0x13F800000;
      DWORD2(v40) = *(_DWORD *)(*(_QWORD *)v11 + 12);
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 45), v9))goto LABEL_12;
      v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a2 + 352, v9);
      v40 = *(_OWORD *)(v12 + 7);
      if (&v40 != (__int128 *)(v12 + 7))
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, (char *)v12[9], v12[10], (uint64_t)(v12[10] - v12[9]) >> 2);
      if ((DWORD2(v40) & 0x80000000) != 0)
      {
        DWORD2(v40) = *(_DWORD *)(*(_QWORD *)v11 + 12);
        if ((v4 & 1) != 0)
          goto LABEL_13;
      }
      else
      {
LABEL_12:
        if ((v4 & 1) != 0)
          goto LABEL_13;
      }
      v15 = *(_QWORD *)v11;
      v16 = (_QWORD *)(*(_QWORD *)v11 + 40);
      if (*(char *)(*(_QWORD *)v11 + 63) < 0)
      {
        v18 = *(_QWORD *)(v15 + 48);
        if (v18 == 4)
        {
          v16 = (_QWORD *)*v16;
LABEL_51:
          if (*(_DWORD *)v16 == 1953718627)
            goto LABEL_52;
          goto LABEL_13;
        }
        if (v18 != 11)
          goto LABEL_13;
        v16 = (_QWORD *)*v16;
      }
      else
      {
        v17 = *(unsigned __int8 *)(*(_QWORD *)v11 + 63);
        if (v17 == 4)
          goto LABEL_51;
        if (v17 != 11)
          goto LABEL_13;
      }
      v19 = (_QWORD *)*v16;
      v20 = *(_QWORD *)((char *)v16 + 3);
      if (v19 == (_QWORD *)0x747269765F696870 && v20 == 0x6C6175747269765FLL)
      {
LABEL_52:
        v31 = *v38;
        if (*v38)
        {
          v32 = *(_DWORD *)(v15 + 8);
          v33 = (char **)((char *)a2 + 408);
          do
          {
            v34 = *((_DWORD *)v31 + 8);
            v35 = v34 < v32;
            if (v34 >= v32)
              v36 = (char **)v31;
            else
              v36 = (char **)(v31 + 8);
            if (!v35)
              v33 = (char **)v31;
            v31 = *v36;
          }
          while (*v36);
          if (v33 != v38 && v32 >= *((_DWORD *)v33 + 8))
          {
            if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v33[6], v9))
            {
              v37 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v33 + 5), v9);
              v40 = *(_OWORD *)(v37 + 7);
              if (&v40 != (__int128 *)(v37 + 7))
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, (char *)v37[9], v37[10], (uint64_t)(v37[10] - v37[9]) >> 2);
            }
          }
        }
      }
LABEL_13:
      v39 = DWORD2(v40);
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 64) + 8);
      if (((*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v13 + 104))(v13, &v39, *(_QWORD *)v11 + 12) & 1) == 0)
      {
        v14 = v39;
        if (v39 <= 0xE)
        {
          if (((1 << v39) & 0x7E00) != 0)
          {
            v14 = *(_DWORD *)(*(_QWORD *)v11 + 12);
          }
          else if (((1 << v39) & 0x1F) == 0)
          {
            v14 = 3;
          }
          DWORD2(v40) = v14;
        }
      }
      v23 = *((_QWORD *)this + 1);
      v22 = *((_QWORD *)this + 2);
      if (v23 >= v22)
      {
        v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - *(_QWORD *)this) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - *(_QWORD *)this) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x333333333333333)
          v28 = 0x666666666666666;
        else
          v28 = v26;
        v50 = (char *)this + 16;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v28);
        else
          v29 = 0;
        v30 = v28 + 40 * v25;
        v47[0] = (void **)v28;
        v47[1] = (void **)v30;
        v48 = v30;
        v49 = v28 + 40 * v29;
        *(_OWORD *)v30 = v40;
        *(_QWORD *)(v30 + 24) = 0;
        *(_QWORD *)(v30 + 32) = 0;
        *(_QWORD *)(v30 + 16) = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v30 + 16), __p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 2);
        v48 += 40;
        std::vector<Espresso::blob_numerical_properties>::__swap_out_circular_buffer((uint64_t *)this, v47);
        v24 = *((_QWORD *)this + 1);
        std::__split_buffer<Espresso::blob_numerical_properties>::~__split_buffer((uint64_t)v47);
      }
      else
      {
        *(_OWORD *)v23 = v40;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0;
        *(_QWORD *)(v23 + 16) = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)(v23 + 16), __p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 2);
        v24 = v23 + 40;
        *((_QWORD *)this + 1) = v24;
      }
      *((_QWORD *)this + 1) = v24;
      if (__p)
      {
        v42 = __p;
        operator delete(__p);
      }
      v9 += 3;
    }
    while (v9 != v10);
  }
  v47[0] = (void **)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v47);
}

void sub_1916CD200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::blob_numerical_properties>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<Espresso::blob_numerical_properties>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void `anonymous namespace'::update_runtime_types_and_insert_casts(Espresso::net &,Espresso::platform const&)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t **v17;
  char *v18;
  char *v19;
  uint64_t **v20;
  _QWORD *v21;
  unint64_t v22;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  size_t v32;
  std::string *v33;
  const std::string::value_type *v34;
  std::string *v35;
  std::string::size_type size;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  int v45;
  int v46;
  size_t v47;
  std::string *v48;
  const std::string::value_type *v49;
  int v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  __int128 v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  std::string *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  std::string *v74;
  uint64_t v75;
  uint64_t **v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  int v90;
  __int128 v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  const std::string *begin;
  uint64_t v103;
  unsigned __int8 *v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  std::string *v111;
  uint64_t **v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  const std::string *v122;
  uint64_t v123;
  unsigned __int8 *v124;
  unint64_t v125;
  uint8x8_t v126;
  unint64_t v127;
  uint64_t **v128;
  uint64_t *i;
  unint64_t v130;
  int v131;
  std::string v136;
  std::string v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::string v140;
  std::string v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::string v144;
  std::vector<std::string> v145;
  std::vector<std::string> v146;
  std::string v147;
  std::string __str;
  void **v149;
  __int128 v150;
  std::vector<std::string> v151[2];
  int v152;
  char v153[8];
  void *v154[2];
  char v155;
  int v156;
  std::string *v157;

  v5 = *a3;
  if (a3[1] == *a3)
    return;
  v6 = a4;
  v7 = a3;
  v9 = 0;
  v131 = a2 - 1;
  do
  {
    v10 = v5 + 24 * v9;
    v156 = *(_DWORD *)(*v6 + 40 * v9 + 8);
    Espresso::ssa_blob_name::ssa_blob_name((uint64_t)v153, v10);
    v11 = *(uint64_t ***)a1;
    if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*(_QWORD *)a1 + 8), v154)|| (v149 = v154, v12 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v154, (uint64_t)&std::piecewise_construct, (__int128 **)&v149), *((_DWORD *)v12 + 16) == v156))
    {
      v13 = *(_QWORD *)(a1 + 8);
      v149 = (void **)v10;
      v14 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (unsigned __int8 *)v10, (__int128 **)&v149);
      v15 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v14 + 40), v156, &v156);
      std::string::operator=(v15 + 1, (const std::string *)v10);
      v16 = *v6;
      v17 = *(uint64_t ***)a1;
      v149 = (void **)v10;
      v18 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (_QWORD *)v10, (uint64_t)&std::piecewise_construct, (__int128 **)&v149);
      v19 = (char *)(v16 + 40 * v9);
      *(_OWORD *)(v18 + 56) = *(_OWORD *)v19;
      if (v18 + 56 != v19)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v18 + 72, *(char **)(v16 + 40 * v9 + 16), *(_QWORD *)(v16 + 40 * v9 + 24), (uint64_t)(*(_QWORD *)(v16 + 40 * v9 + 24) - *(_QWORD *)(v16 + 40 * v9 + 16)) >> 2);
      goto LABEL_151;
    }
    v20 = *(uint64_t ***)a1;
    v149 = v154;
    v152 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v154, (uint64_t)&std::piecewise_construct, (__int128 **)&v149)+ 16);
    v21 = *(_QWORD **)(a1 + 8);
    v22 = std::__string_hash<char>::operator()[abi:ne180100](v10);
    v23 = (int8x8_t)v21[1];
    if (!*(_QWORD *)&v23)
      goto LABEL_23;
    v24 = v22;
    v25 = (uint8x8_t)vcnt_s8(v23);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.u32[0];
    if (v25.u32[0] > 1uLL)
    {
      v27 = v22;
      if (v22 >= *(_QWORD *)&v23)
        v27 = v22 % *(_QWORD *)&v23;
    }
    else
    {
      v27 = (*(_QWORD *)&v23 - 1) & v22;
    }
    v28 = *(unsigned __int8 ***)(*v21 + 8 * v27);
    if (!v28)
      goto LABEL_23;
    v29 = *v28;
    if (!*v28)
      goto LABEL_23;
    while (1)
    {
      v30 = *((_QWORD *)v29 + 1);
      if (v24 == v30)
        break;
      if (v26 > 1)
      {
        if (v30 >= *(_QWORD *)&v23)
          v30 %= *(_QWORD *)&v23;
      }
      else
      {
        v30 &= *(_QWORD *)&v23 - 1;
      }
      if (v30 != v27)
        goto LABEL_23;
LABEL_22:
      v29 = *(unsigned __int8 **)v29;
      if (!v29)
        goto LABEL_23;
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100](v29 + 16, (unsigned __int8 *)v10))
      goto LABEL_22;
    v123 = *(_QWORD *)(a1 + 8);
    v149 = (void **)v10;
    v124 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v123, (unsigned __int8 *)v10, (__int128 **)&v149);
    v125 = *((_QWORD *)v124 + 6);
    if (v125)
    {
      v126 = (uint8x8_t)vcnt_s8((int8x8_t)v125);
      v126.i16[0] = vaddlv_u8(v126);
      if (v126.u32[0] > 1uLL)
      {
        v127 = v156;
        if (v125 <= v156)
          v127 = v156 % v125;
      }
      else
      {
        v127 = (v125 - 1) & v156;
      }
      v128 = *(uint64_t ***)(*((_QWORD *)v124 + 5) + 8 * v127);
      if (v128)
      {
        for (i = *v128; i; i = (uint64_t *)*i)
        {
          v130 = i[1];
          if (v130 == v156)
          {
            if (*((_DWORD *)i + 4) == v156)
              goto LABEL_150;
          }
          else
          {
            if (v126.u32[0] > 1uLL)
            {
              if (v130 >= v125)
                v130 %= v125;
            }
            else
            {
              v130 &= v125 - 1;
            }
            if (v130 != v127)
              break;
          }
        }
      }
    }
LABEL_23:
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 16 * a2;
    LODWORD(v149) = 0;
    v150 = 0u;
    memset(v151, 0, sizeof(v151));
    if (a5)
    {
      if (*(char *)(v10 + 23) >= 0)
        v32 = *(unsigned __int8 *)(v10 + 23);
      else
        v32 = *(_QWORD *)(v10 + 8);
      std::string::basic_string[abi:ne180100]((uint64_t)&v144, v32 + 18);
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v144;
      else
        v33 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if (v32)
      {
        if (*(char *)(v10 + 23) >= 0)
          v34 = (const std::string::value_type *)v10;
        else
          v34 = *(const std::string::value_type **)v10;
        memmove(v33, v34, v32);
      }
      strcpy((char *)v33 + v32, "__@generated_as__@");
      std::to_string(&v147, *(_DWORD *)(*a4 + 40 * v9 + 8));
      if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v147;
      else
        v35 = (std::string *)v147.__r_.__value_.__r.__words[0];
      if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v147.__r_.__value_.__r.__words[2]);
      else
        size = v147.__r_.__value_.__l.__size_;
      v37 = std::string::append(&v144, (const std::string::value_type *)v35, size);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      v39 = *(_QWORD *)v31;
      v40 = *(_QWORD *)(*(_QWORD *)v31 + 64);
      v42 = *(_QWORD *)(v40 + 8);
      v41 = *(std::__shared_weak_count **)(v40 + 16);
      v142 = v42;
      v143 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v44 = __ldxr(p_shared_owners);
        while (__stxr(v44 + 1, p_shared_owners));
        v39 = *(_QWORD *)v31;
      }
      v45 = *(_DWORD *)(v39 + 8);
      v46 = *(_DWORD *)(v39 + 12);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v141, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v141 = __str;
      if (*(char *)(v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
      }
      else
      {
        v58 = *(_OWORD *)v10;
        v140.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
        *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v58;
      }
      LODWORD(v149) = v144.__r_.__value_.__l.__data_;
      v59 = *(_OWORD *)&v144.__r_.__value_.__r.__words[1];
      *(_OWORD *)&v144.__r_.__value_.__r.__words[1] = 0uLL;
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
      v150 = v59;
      if (v60)
      {
        v61 = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      std::vector<std::string>::__vdeallocate(v151);
      v151[0] = v145;
      memset(&v145, 0, sizeof(v145));
      std::vector<std::string>::__vdeallocate(&v151[1]);
      v151[1] = v146;
      memset(&v146, 0, sizeof(v146));
      v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
      v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
      v63 = (std::__shared_weak_count *)v144.__r_.__value_.__r.__words[2];
      if (v144.__r_.__value_.__r.__words[2])
      {
        v64 = (unint64_t *)(v144.__r_.__value_.__r.__words[2] + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v141.__r_.__value_.__l.__data_);
      v66 = v143;
      if (v143)
      {
        v67 = (unint64_t *)&v143->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      LODWORD(v149) = a2;
      v69 = *(_QWORD *)(a1 + 8);
      v144.__r_.__value_.__r.__words[0] = v10;
      v70 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v69, (unsigned __int8 *)v10, (__int128 **)&v144);
      v71 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v70 + 40), v156, &v156);
      std::string::operator=(v71 + 1, &__str);
      v72 = *(_QWORD *)(a1 + 8);
      v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      v73 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v72, (unsigned __int8 *)&__str, (__int128 **)&v144);
      v74 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v73 + 40), v152, &v152);
      std::string::operator=(v74 + 1, (const std::string *)v10);
      v75 = *a4;
      v76 = *(uint64_t ***)a1;
      v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      v77 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v76, &__str, (uint64_t)&std::piecewise_construct, (__int128 **)&v144);
      v78 = (char *)(v75 + 40 * v9);
      *(_OWORD *)(v77 + 56) = *(_OWORD *)v78;
      if (v77 + 56 != v78)
        goto LABEL_139;
      goto LABEL_140;
    }
    if (*(char *)(v10 + 23) >= 0)
      v47 = *(unsigned __int8 *)(v10 + 23);
    else
      v47 = *(_QWORD *)(v10 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v144, v47 + 15);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v144;
    else
      v48 = (std::string *)v144.__r_.__value_.__r.__words[0];
    if (v47)
    {
      if (*(char *)(v10 + 23) >= 0)
        v49 = (const std::string::value_type *)v10;
      else
        v49 = *(const std::string::value_type **)v10;
      memmove(v48, v49, v47);
    }
    strcpy((char *)v48 + v47, "__@casted_to__@");
    v50 = v156;
    std::to_string(&v147, v156);
    if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v147;
    else
      v51 = (std::string *)v147.__r_.__value_.__r.__words[0];
    if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v147.__r_.__value_.__r.__words[2]);
    else
      v52 = v147.__r_.__value_.__l.__size_;
    v53 = std::string::append(&v144, (const std::string::value_type *)v51, v52);
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v147.__r_.__value_.__l.__data_);
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    v55 = *(_QWORD *)(*(_QWORD *)v31 + 64);
    std::string::basic_string[abi:ne180100]<0>(&v144, "basic_block_head");
    if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v55 + 240), (unsigned __int8 *)&v144))
    {
      v56 = *(_QWORD *)(*(_QWORD *)v31 + 64);
      std::string::basic_string[abi:ne180100]<0>(&v147, "basic_block_head");
      v157 = &v147;
      v57 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v56 + 240, (unsigned __int8 *)&v147, (uint64_t)&std::piecewise_construct, (__int128 **)&v157)+ 10) != 0;
      if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v147.__r_.__value_.__l.__data_);
    }
    else
    {
      v57 = 0;
    }
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v144.__r_.__value_.__l.__data_);
      if (!v57)
        goto LABEL_108;
LABEL_103:
      v79 = *(_QWORD *)(*(_QWORD *)v31 + 64);
      std::string::basic_string[abi:ne180100]<0>(&v144, "basic_block_head");
      v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
      v80 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v79 + 240, (unsigned __int8 *)&v144, (uint64_t)&std::piecewise_construct, (__int128 **)&v147)+ 10);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      v81 = *(_QWORD *)(*(_QWORD *)v31 + 64);
      std::string::basic_string[abi:ne180100]<0>(&v144, "basic_block_head");
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((_QWORD *)(v81 + 240), (unsigned __int8 *)&v144);
      v82 = a4;
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
    }
    else
    {
      if (v57)
        goto LABEL_103;
LABEL_108:
      v80 = 0;
      v82 = a4;
    }
    v83 = *(_QWORD *)v31;
    v84 = *(_QWORD *)(*(_QWORD *)v31 + 64);
    v86 = *(_QWORD *)(v84 + 8);
    v85 = *(std::__shared_weak_count **)(v84 + 16);
    v138 = v86;
    v139 = v85;
    if (v85)
    {
      v87 = (unint64_t *)&v85->__shared_owners_;
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
      v83 = *(_QWORD *)v31;
    }
    v89 = *(_DWORD *)(v83 + 8);
    v90 = *(_DWORD *)(v83 + 12);
    if (*(char *)(v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
    }
    else
    {
      v91 = *(_OWORD *)v10;
      v137.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v91;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v136, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    else
      v136 = __str;
    LODWORD(v149) = v144.__r_.__value_.__l.__data_;
    v92 = *(_OWORD *)&v144.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v144.__r_.__value_.__r.__words[1] = 0uLL;
    v93 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
    v150 = v92;
    if (v93)
    {
      v94 = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    std::vector<std::string>::__vdeallocate(v151);
    v151[0] = v145;
    memset(&v145, 0, sizeof(v145));
    std::vector<std::string>::__vdeallocate(&v151[1]);
    v151[1] = v146;
    memset(&v146, 0, sizeof(v146));
    v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&v146;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
    v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&v145;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
    v96 = (std::__shared_weak_count *)v144.__r_.__value_.__r.__words[2];
    if (v144.__r_.__value_.__r.__words[2])
    {
      v97 = (unint64_t *)(v144.__r_.__value_.__r.__words[2] + 8);
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v136.__r_.__value_.__l.__data_);
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v137.__r_.__value_.__l.__data_);
    v99 = v139;
    if (v139)
    {
      v100 = (unint64_t *)&v139->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    LODWORD(v149) = v131;
    begin = v151[1].__begin_;
    v103 = *(_QWORD *)(a1 + 8);
    v144.__r_.__value_.__r.__words[0] = v10;
    v104 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v103, (unsigned __int8 *)v10, (__int128 **)&v144);
    v105 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v104 + 40), v156, &v156);
    std::string::operator=(v105 + 1, begin);
    v106 = v150;
    v107 = *(_QWORD *)(a1 + 24);
    v144.__r_.__value_.__r.__words[0] = *(_QWORD *)v31 + 16;
    v108 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v107, (uint64_t)v144.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v144);
    std::string::operator=((std::string *)(v108 + 5), (const std::string *)(v106 + 16));
    v109 = *(_QWORD *)(a1 + 8);
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v110 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v109, (unsigned __int8 *)&__str, (__int128 **)&v144);
    v111 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v110 + 40), v152, &v152);
    std::string::operator=(v111 + 1, (const std::string *)v10);
    v75 = *v82;
    v112 = *(uint64_t ***)a1;
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v77 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v112, &__str, (uint64_t)&std::piecewise_construct, (__int128 **)&v144);
    v113 = (char *)(v75 + 40 * v9);
    *(_OWORD *)(v77 + 56) = *(_OWORD *)v113;
    if (v77 + 56 != v113)
LABEL_139:
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v77 + 72, *(char **)(v75 + 40 * v9 + 16), *(_QWORD *)(v75 + 40 * v9 + 24), (uint64_t)(*(_QWORD *)(v75 + 40 * v9 + 24) - *(_QWORD *)(v75 + 40 * v9 + 16)) >> 2);
LABEL_140:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v114 = *(_QWORD *)(a1 + 32);
    v115 = *(_QWORD *)(v114 + 8);
    if (v115 >= *(_QWORD *)(v114 + 16))
    {
      v116 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(*(int64x2_t **)(a1 + 32), (uint64_t)&v149);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(*(_QWORD *)(v114 + 8), (uint64_t)&v149);
      v116 = v115 + 72;
      *(_QWORD *)(v114 + 8) = v115 + 72;
    }
    *(_QWORD *)(v114 + 8) = v116;
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v151;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v144);
    v117 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
    if (*((_QWORD *)&v150 + 1))
    {
      v118 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
LABEL_150:
    v120 = *(_QWORD *)(a1 + 8);
    v149 = (void **)v10;
    v121 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v120, (unsigned __int8 *)v10, (__int128 **)&v149);
    v6 = a4;
    v122 = (const std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v121 + 40), v156, &v156);
    std::string::operator=((std::string *)v10, v122 + 1);
    v7 = a3;
LABEL_151:
    if (v155 < 0)
      operator delete(v154[0]);
    ++v9;
    v5 = *v7;
  }
  while (v9 < 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 3));
}

void sub_1916CDFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (a30 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (*(char *)(v32 - 233) < 0)
    operator delete(*(void **)(v32 - 256));
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v32 - 232));
  if (*(char *)(v32 - 121) < 0)
    operator delete(*(void **)(v32 - 144));
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned __int8 **v37;
  unint64_t v38;
  void *v40;
  _QWORD v41[2];
  char v42;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v16 = (char *)operator new(0x50uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  v42 = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  v17 = (std::string *)(v16 + 16);
  v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
  }
  else
  {
    v19 = *v18;
    *((_QWORD *)v16 + 4) = *((_QWORD *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 18) = 1065353216;
  v42 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)a1;
          *(_QWORD *)a1 = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v15;
          if (*v15)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v15;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v37 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(_QWORD *)v41[0] = *v37;
LABEL_75:
    *v37 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v38 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_1916CE588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1916CE7A0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::update_layer_labels(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  BOOL v3;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::string *v16;
  uint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  if (a3[3])
    v3 = a1 == a2;
  else
    v3 = 1;
  if (!v3)
  {
    v6 = a1;
    do
    {
      v8 = *v6;
      v7 = (std::__shared_weak_count *)v6[1];
      v31 = *v6;
      v32 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v11 = *(const void **)(v8 + 64);
      if (v11)
      {
        if (v12)
        {
          v13 = *(std::__shared_weak_count **)(v8 + 72);
          if (v13)
          {
            v14 = (unint64_t *)&v13->__shared_owners_;
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }
          v16 = (std::string *)(v12 + 8);
          if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a3, (uint64_t)(v12 + 8)))
          {
            v17 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a3, (uint64_t)v16);
            if (!v17)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            std::string::operator=(v16, (const std::string *)(v17 + 5));
          }
          if (v13)
          {
            v18 = (unint64_t *)&v13->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
        }
      }
      v20 = *(const void **)(v31 + 64);
      if (v20)
      {
        if (v21)
        {
          v22 = *(std::__shared_weak_count **)(v31 + 72);
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v25 = (std::string *)(v21 + 328);
          if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a3, (uint64_t)(v21 + 328)))
          {
            v26 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a3, (uint64_t)v25);
            if (!v26)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            std::string::operator=(v25, (const std::string *)(v26 + 5));
          }
          if (v22)
          {
            v27 = (unint64_t *)&v22->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
      }
      if (v32)
      {
        v29 = (unint64_t *)&v32->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v6 += 2;
    }
    while (v6 != a2);
  }
}

void sub_1916CE9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,std::string>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,std::string>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void `anonymous namespace'::create_casted_value(uint64_t a1, uint64_t a2, int a3, int a4, __int128 *a5, const std::string *a6, int a7, int a8)
{
  uint64_t v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  uint64_t *v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  char **v39;
  std::string *v40;
  std::string *v41;
  char **v42;
  __int128 *v43;
  std::string *v44;
  std::string *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *__p[2];
  char v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  void *lpsrc;
  std::__shared_weak_count *v54;
  void *v55;
  std::__shared_weak_count *v56;
  _DWORD v57[2];
  int v58;
  int v59;

  v58 = a4;
  v59 = a3;
  v57[0] = a7;
  v57[1] = 0;
  Espresso::abstract_engine_factory::shared(&v51);
  v13 = v51;
  std::string::basic_string[abi:ne180100]<0>(__p, "cast");
  Espresso::abstract_engine_factory::make_kernel_priv(v13, a2, (uint64_t)__p, (uint64_t)v57, &v59);
  if (lpsrc
  {
    v55 = v14;
    v56 = v54;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  else
  {
    v55 = 0;
    v56 = 0;
  }
  v17 = v54;
  if (v54)
  {
    v18 = (unint64_t *)&v54->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v50 < 0)
    operator delete(__p[0]);
  v20 = v52;
  if (!v52)
    goto LABEL_19;
  v21 = (unint64_t *)&v52->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (!a8)
      goto LABEL_23;
  }
  else
  {
LABEL_19:
    if (!a8)
      goto LABEL_23;
  }
  v23 = v55;
  std::string::basic_string[abi:ne180100]<0>(__p, "basic_block_head");
  lpsrc = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v23 + 240, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&lpsrc)+ 10) = a8;
  if (v50 < 0)
    operator delete(__p[0]);
LABEL_23:
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v24 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v25 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v25 + 1) = 0;
  *((_QWORD *)v25 + 2) = 0;
  *(_QWORD *)v25 = &off_1E2DBF0D0;
  *((_QWORD *)v25 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 56) = 0u;
  *(_OWORD *)(v25 + 72) = 0u;
  *(_OWORD *)(v25 + 88) = 0u;
  *(_OWORD *)(v25 + 104) = 0u;
  *(_OWORD *)(v25 + 120) = 0u;
  *(_OWORD *)(v25 + 136) = 0u;
  *(_OWORD *)(v25 + 152) = 0u;
  *(_OWORD *)(v25 + 161) = 0u;
  *((_OWORD *)v25 + 13) = 0u;
  *((_OWORD *)v25 + 14) = 0u;
  *((_QWORD *)v25 + 30) = 0;
  __p[0] = v25 + 24;
  __p[1] = v25;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 8, (__int128 *)__p);
  v26 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v27 = (unint64_t *)((char *)__p[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  MEMORY[0x19401C808](*v24 + 40, "cast");
  v29 = *v24;
  v31 = v55;
  v30 = v56;
  if (v56)
  {
    v32 = (unint64_t *)&v56->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *(std::__shared_weak_count **)(v29 + 72);
  *(_QWORD *)(v29 + 64) = v31;
  *(_QWORD *)(v29 + 72) = v30;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  std::string::operator=((std::string *)(*v24 + 16), a6);
  v37 = v58;
  v38 = *v24;
  *(_DWORD *)(v38 + 8) = v59;
  *(_DWORD *)(v38 + 12) = v37;
  std::string::operator=((std::string *)(v38 + 200), (const std::string *)(v38 + 16));
  v39 = (char **)(a1 + 24);
  v40 = *(std::string **)(a1 + 32);
  if ((unint64_t)v40 >= *(_QWORD *)(a1 + 40))
  {
    v41 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v39, (uint64_t)a5);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v39, a5);
    v41 = v40 + 1;
  }
  *(_QWORD *)(a1 + 32) = v41;
  v42 = (char **)(a1 + 48);
  v43 = (__int128 *)(*(_QWORD *)(a1 + 8) + 16);
  v44 = *(std::string **)(a1 + 56);
  if ((unint64_t)v44 >= *(_QWORD *)(a1 + 64))
  {
    v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v42, (uint64_t)v43);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v42, v43);
    v45 = v44 + 1;
  }
  *(_QWORD *)(a1 + 56) = v45;
  v46 = v56;
  if (v56)
  {
    v47 = (unint64_t *)&v56->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1916CEF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<Espresso::blob_numerical_properties>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 40;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v6 = *result;
  *result = v5;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Espresso::blob_numerical_properties>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL Espresso::analysis_pass_insert_casts::has_platform(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t *i;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v2 <= a2)
        v4 = a2 % v2;
    }
    else
    {
      v4 = ((_DWORD)v2 - 1) & a2;
    }
    i = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8 * v4);
    if (i)
    {
      for (i = (uint64_t *)*i; i; i = (uint64_t *)*i)
      {
        v6 = i[1];
        if (v6 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i != 0;
        }
        else
        {
          if (v3.u32[0] > 1uLL)
          {
            if (v6 >= v2)
              v6 %= v2;
          }
          else
          {
            v6 &= v2 - 1;
          }
          if (v6 != v4)
            goto LABEL_18;
        }
      }
    }
  }
  else
  {
LABEL_18:
    i = 0;
  }
  return i != 0;
}

void Espresso::convolution_grad_kernel::~convolution_grad_kernel(void ***this)
{
  Espresso::convolution_grad_kernel::~convolution_grad_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;
  void **v3;
  void **v4;

  *this = (void **)&off_1E2D8F4F8;
  v2 = (void **)(this + 103);
  Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters(this + 103);
  v3 = (void **)*v2;
  if (*v2)
  {
    this[104] = v3;
    operator delete(v3);
  }
  *this = (void **)off_1E2D9DD68;
  v4 = (void **)(this + 35);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v4);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::convolution_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int i;
  __int128 v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int j;
  __int128 v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _OWORD *v85;
  __int128 v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  uint64_t v106;
  size_t v107;
  BNNSNDArrayDescriptor *v108;
  const BNNSNDArrayDescriptor *out_delta;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  size_t batch_size;
  _QWORD *__p;
  _QWORD *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD v156[2];
  __int128 v157;
  __int128 v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  __int128 v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  __int128 v167;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    v8 = v6[20];
    v7 = v6[21];
    *(_QWORD *)&v167 = v8;
    *((_QWORD *)&v167 + 1) = v7;
    if (v7)
    {
      v9 = (unint64_t *)(v7 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    v8 = 0;
    v167 = 0uLL;
  }
  v11 = *a4;
  v12 = a4[1];
  v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v12, 0);
  if (v13)
  {
    v15 = v13[20];
    v14 = (std::__shared_weak_count *)v13[21];
    v165 = v15;
    v166 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      v11 = *a4;
      v12 = a4[1];
    }
  }
  else
  {
    v15 = 0;
    v165 = 0;
    v166 = 0;
  }
  v18 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v11, v12, 2);
  if (v18)
  {
    v20 = *((_QWORD *)v18 + 20);
    v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 21);
    *(_QWORD *)&v164 = v20;
    *((_QWORD *)&v164 + 1) = v19;
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v11 = *a4;
      v12 = a4[1];
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v164 = 0uLL;
  }
  v23 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v11, v12, 3);
  if (v23)
  {
    v24 = (std::__shared_weak_count *)v23[21];
    v162 = v23[20];
    v163 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    v162 = 0;
    v163 = 0;
  }
  v27 = *(_DWORD *)(a1 + 420);
  if (v27 <= 1)
    v28 = 1;
  else
    v28 = v27;
  v30 = *(_DWORD *)(v8 + 8);
  v29 = *(_DWORD *)(v8 + 12);
  v32 = *(_DWORD *)(v15 + 8);
  v31 = *(_DWORD *)(v15 + 12);
  v33 = *(__int16 *)(a1 + 396);
  v34 = *(__int16 *)(a1 + 398);
  v35 = *(_DWORD *)(a1 + 352);
  v36 = *(_DWORD *)(a1 + 356);
  v37 = *(__int16 *)(a1 + 384);
  v38 = *(__int16 *)(a1 + 386);
  v159 = __PAIR64__(v38, v37);
  v39 = *(__int16 *)(a1 + 388);
  v40 = *(__int16 *)(a1 + 390);
  v160 = __PAIR64__(v40, v39);
  v41 = *(__int16 *)(a1 + 392);
  v42 = *(__int16 *)(a1 + 394);
  v161 = __PAIR64__(v41, v42);
  v43 = *(__int16 *)(a1 + 376);
  switch(v43)
  {
    case 4:
      goto LABEL_31;
    case 2:
      v159 = 0;
      v160 = 0;
      v161 = 0;
LABEL_101:
      v158 = 0uLL;
      goto LABEL_102;
    case 1:
LABEL_31:
      v41 = 0;
      v42 = 0;
      v44 = ((v31 - 1) * v34 - v29 + v36) & ~(((v31 - 1) * v34 - v29 + v36) >> 31);
      v45 = ((v32 - 1) * v33 - v30 + v35) & ~(((v32 - 1) * v33 - v30 + v35) >> 31);
      v46 = v45 >> 1;
      v47 = v45 - (v45 >> 1);
      v48 = v44 >> 1;
      v49 = v44 - (v44 >> 1);
      if (*(_WORD *)(a1 + 376) == 1)
        v37 = v46;
      else
        v37 = v47;
      if (*(_WORD *)(a1 + 376) == 1)
        v38 = v47;
      else
        v38 = v46;
      v50 = 12;
      if (*(_WORD *)(a1 + 376) == 1)
        v51 = 8;
      else
        v51 = 12;
      if (*(_WORD *)(a1 + 376) != 1)
        v50 = 8;
      *(_DWORD *)((char *)&v159 + v51) = v48;
      *(_DWORD *)((char *)&v159 + v50) = v49;
      if ((unsigned __int16)v43 == 1)
        v52 = 20;
      else
        v52 = 16;
      if ((unsigned __int16)v43 == 1)
        v53 = 16;
      else
        v53 = 20;
      if ((unsigned __int16)v43 == 1)
        v40 = v49;
      else
        v40 = v48;
      if ((unsigned __int16)v43 == 1)
        v39 = v48;
      else
        v39 = v49;
      v159 = __PAIR64__(v38, v37);
      *(_DWORD *)((char *)&v159 + v52) = 0;
      *(_DWORD *)((char *)&v159 + v53) = 0;
      break;
  }
  if (v37 == v38 && v39 == v40 && v42 == v41)
    goto LABEL_101;
  v154 = v28;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v158, v38 + v37 + *(_DWORD *)(v20 + 8), v39 + *(_DWORD *)(v20 + 12) + v40, *(_DWORD *)(v20 + 16), *(_DWORD *)(v20 + 20));
  if (*(int *)(v20 + 20) >= 1)
  {
    v56 = 0;
    v57 = v158;
    v58 = v160;
    v59 = (int)v159;
    do
    {
      if (*(int *)(v20 + 16) >= 1)
      {
        v60 = 0;
        do
        {
          v61 = *(_DWORD *)(v20 + 12);
          if (v61 >= 1)
          {
            for (i = 0; i < v61; ++i)
            {
              memcpy((void *)(*(_QWORD *)(v57 + 24)+ 4 * *(_DWORD *)(v57 + 12) * *(_DWORD *)(v57 + 8) * v56 * *(_DWORD *)(v57 + 16)+ 4 * *(_DWORD *)(v57 + 12) * *(_DWORD *)(v57 + 8) * v60+ 4 * (v58 + i) * *(_DWORD *)(v57 + 8)+ 4 * v59), (const void *)(*(_QWORD *)(v20 + 24)+ 4 * *(_DWORD *)(v20 + 8) * v61 * v56 * *(_DWORD *)(v20 + 16)+ 4 * *(_DWORD *)(v20 + 8) * v61 * v60+ 4 * *(_DWORD *)(v20 + 8) * i), 4 * *(int *)(v20 + 8));
              v61 = *(_DWORD *)(v20 + 12);
            }
          }
          ++v60;
        }
        while (v60 < *(_DWORD *)(v20 + 16));
      }
      ++v56;
    }
    while (v56 < *(_DWORD *)(v20 + 20));
  }
  v63 = v158;
  v158 = 0uLL;
  v164 = v63;
  if (v19)
  {
    v64 = (unint64_t *)&v19->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v158 = 0uLL;
  v69 = v167;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v158, v167, *((uint64_t *)&v167 + 1));
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v157, v159 + HIDWORD(v159) + *(_DWORD *)(v69 + 8), v160 + HIDWORD(v160) + *(_DWORD *)(v69 + 12), *(_DWORD *)(v69 + 16), *(_DWORD *)(v69 + 20));
  if (*(int *)(v69 + 20) >= 1)
  {
    v70 = 0;
    v71 = v157;
    do
    {
      if (*(int *)(v69 + 16) >= 1)
      {
        v72 = 0;
        do
        {
          v73 = *(_DWORD *)(v69 + 12);
          if (v73 >= 1)
          {
            for (j = 0; j < v73; ++j)
            {
              memcpy((void *)(*(_QWORD *)(v71 + 24)+ 4 * *(_DWORD *)(v71 + 12) * *(_DWORD *)(v71 + 8) * v70 * *(_DWORD *)(v71 + 16)+ 4 * *(_DWORD *)(v71 + 12) * *(_DWORD *)(v71 + 8) * v72+ 4 * (j + (int)v160) * *(_DWORD *)(v71 + 8)+ 4 * (int)v159), (const void *)(*(_QWORD *)(v69 + 24)+ 4 * *(_DWORD *)(v69 + 8) * v73 * v70 * *(_DWORD *)(v69 + 16)+ 4 * *(_DWORD *)(v69 + 8) * v73 * v72+ 4 * *(_DWORD *)(v69 + 8) * j), 4 * *(int *)(v69 + 8));
              v73 = *(_DWORD *)(v69 + 12);
            }
          }
          ++v72;
        }
        while (v72 < *(_DWORD *)(v69 + 16));
      }
      ++v70;
    }
    while (v70 < *(_DWORD *)(v69 + 20));
  }
  v75 = v157;
  v157 = 0uLL;
  v167 = v75;
  v28 = v154;
  if (*((_QWORD *)&v69 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v69 + 1) + 16))(*((_QWORD *)&v69 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v69 + 1));
    }
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
  if (*((_QWORD *)&v157 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
LABEL_102:
  v81 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  if (v81)
  {
    v82 = (std::__shared_weak_count *)*((_QWORD *)v81 + 21);
    *(_QWORD *)&v157 = *((_QWORD *)v81 + 20);
    *((_QWORD *)&v157 + 1) = v82;
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
  }
  else
  {
    v82 = 0;
    v157 = 0uLL;
  }
  if (v28 > (uint64_t)(*(_QWORD *)(a1 + 832) - *(_QWORD *)(a1 + 824)) >> 3)
  {
    std::vector<void *>::resize((char **)(a1 + 824), v28);
    v85 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
    if (v85)
    {
      v86 = v85[10];
      v87 = *((_QWORD *)v85 + 21);
      if (v87)
      {
        v88 = (unint64_t *)(v87 + 8);
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
      }
    }
    else
    {
      v86 = 0uLL;
    }
    v157 = v86;
    if (v82)
    {
      v90 = (unint64_t *)&v82->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v156[0] = 0;
    v156[1] = 0;
    create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(a1 + 304, (uint64_t)&v164, (uint64_t)&v162, (uint64_t)&v157, (uint64_t)v156, &v159, a1 + 824, 0, 0);
  }
  v92 = *(int *)(a1 + 344);
  v93 = *(int *)(a1 + 348);
  v94 = v167;
  v95 = *(int *)(v167 + 8);
  v96 = *(int *)(v167 + 12);
  v97 = *(int *)(v165 + 8);
  v98 = *(int *)(v165 + 12);
  v155 = v165;
  v152 = operator new(0x18uLL);
  v153 = a1;
  *v152 = v95;
  v152[1] = v96;
  v146 = v93 / v28;
  v152[2] = v93 / v28;
  v99 = operator new(0x18uLL);
  v100 = v28;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  __p = v99;
  *v99 = v97;
  v99[1] = v98;
  v99[2] = v92 / v100;
  batch_size = *(int *)(v155 + 20);
  v104 = (int)v96 * (uint64_t)(int)v95;
  v105 = v104 * v93;
  v106 = (int)v98 * (uint64_t)(int)v97;
  v107 = v106 * v92;
  v108 = (BNNSNDArrayDescriptor *)(v153 + 472);
  out_delta = (const BNNSNDArrayDescriptor *)(v153 + 648);
  v148 = 4 * v106 * (v92 / v100);
  v149 = 8 * v100;
  v147 = 4 * v104 * v146;
  do
  {
    v110 = *(_QWORD *)(v94 + 24) + v101;
    *(_OWORD *)(v153 + 616) = 0u;
    *(_OWORD *)(v153 + 632) = 0u;
    *(_OWORD *)(v153 + 584) = 0u;
    *(_OWORD *)(v153 + 600) = 0u;
    *(_OWORD *)(v153 + 552) = 0u;
    *(_OWORD *)(v153 + 568) = 0u;
    *(_OWORD *)(v153 + 520) = 0u;
    *(_OWORD *)(v153 + 536) = 0u;
    *(_OWORD *)(v153 + 488) = 0u;
    *(_OWORD *)(v153 + 504) = 0u;
    *(_OWORD *)&v108->flags = 0u;
    *(_DWORD *)(v153 + 476) = 196608;
    *(_QWORD *)(v153 + 496) = v152[2];
    *(_OWORD *)(v153 + 480) = *(_OWORD *)v152;
    *(_QWORD *)(v153 + 608) = v110;
    *(_DWORD *)(v153 + 616) = 65568;
    *(_QWORD *)(v153 + 636) = 1065353216;
    v111 = *(_QWORD *)(v155 + 24) + v102;
    *(_OWORD *)(v153 + 792) = 0u;
    *(_OWORD *)(v153 + 808) = 0u;
    *(_OWORD *)(v153 + 760) = 0u;
    *(_OWORD *)(v153 + 776) = 0u;
    *(_OWORD *)(v153 + 728) = 0u;
    *(_OWORD *)(v153 + 744) = 0u;
    *(_OWORD *)(v153 + 696) = 0u;
    *(_OWORD *)(v153 + 712) = 0u;
    *(_OWORD *)(v153 + 664) = 0u;
    *(_OWORD *)(v153 + 680) = 0u;
    *(_OWORD *)&out_delta->flags = 0u;
    *(_DWORD *)(v153 + 652) = 196608;
    *(_OWORD *)(v153 + 656) = *(_OWORD *)__p;
    *(_QWORD *)(v153 + 672) = __p[2];
    *(_QWORD *)(v153 + 784) = v111;
    *(_DWORD *)(v153 + 792) = 65568;
    *(_QWORD *)(v153 + 812) = 1065353216;
    v112 = BNNSFilterApplyBackwardBatch(*(void **)(*(_QWORD *)(v153 + 824) + v103), batch_size, (const void *)(*(_QWORD *)(v164 + 24) + v101), v105, v108, v105, (const void *)(*(_QWORD *)(v162 + 24) + v102), v107, out_delta, v107, 0, 0);
    if ((_DWORD)v112)
      Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v112);
    v103 += 8;
    v102 += v148;
    v101 += v147;
  }
  while (v149 != v103);
  v113 = v158;
  if ((_QWORD)v158)
  {
    v114 = *(_DWORD *)(v158 + 20);
    if (v114 >= 1)
    {
      v115 = 0;
      LODWORD(v116) = 0;
      v117 = *(_DWORD *)(v158 + 16);
      do
      {
        if (v117 >= 1)
        {
          v118 = 0;
          v119 = *(_DWORD *)(v113 + 12);
          do
          {
            if (v119 >= 1)
            {
              v120 = 0;
              v121 = *(unsigned int *)(v113 + 8);
              v122 = v160;
              v123 = v159;
              do
              {
                if ((int)v121 >= 1)
                {
                  v124 = *(_QWORD *)(v94 + 24);
                  v125 = *(_QWORD *)(v113 + 24);
                  v116 = (int)v116;
                  v126 = v123
                       + *(_DWORD *)(v94 + 8) * (v122 + *(_DWORD *)(v94 + 12) * (v118 + v115 * *(_DWORD *)(v94 + 16)));
                  v127 = v121;
                  do
                  {
                    *(_DWORD *)(v125 + 4 * v116++) = *(_DWORD *)(v124 + 4 * v126++);
                    --v127;
                  }
                  while (v127);
                }
                ++v120;
                ++v122;
              }
              while (v120 != v119);
            }
            ++v118;
          }
          while (v118 != v117);
        }
        ++v115;
      }
      while (v115 != v114);
    }
  }
  operator delete(__p);
  operator delete(v152);
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v157 + 1);
  if (*((_QWORD *)&v157 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v158 + 1);
  if (*((_QWORD *)&v158 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v158 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = v163;
  if (v163)
  {
    v135 = (unint64_t *)&v163->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = v166;
  if (v166)
  {
    v141 = (unint64_t *)&v166->__shared_owners_;
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1))
  {
    v144 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
}

void sub_1916CFBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 128);
  _Unwind_Resume(a1);
}

void std::vector<void *>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10);
  v12 = &v11[8 * v5];
  v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  v15 = &v12[8 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

void Espresso::convolution_weights_grad_kernel::~convolution_weights_grad_kernel(void ***this)
{
  Espresso::convolution_weights_grad_kernel::~convolution_weights_grad_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;
  void **v3;
  void **v4;

  *this = (void **)&off_1E2D9B548;
  v2 = (void **)(this + 103);
  Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters(this + 103);
  v3 = (void **)*v2;
  if (*v2)
  {
    this[104] = v3;
    operator delete(v3);
  }
  *this = (void **)off_1E2D9DD68;
  v4 = (void **)(this + 35);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v4);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::convolution_weights_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int i;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  size_t v90;
  uint64_t v91;
  size_t v92;
  BNNSNDArrayDescriptor *weights_delta;
  const BNNSNDArrayDescriptor *out_delta;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  size_t batch_size;
  uint64_t v123;
  _QWORD *__p;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD v129[2];
  uint64_t v130;
  std::__shared_weak_count *v131;
  __int128 v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  __int128 v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    v7 = (std::__shared_weak_count *)v6[21];
    v139 = v6[20];
    v140 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v139 = 0;
    v140 = 0;
  }
  v10 = *a4;
  v11 = a4[1];
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v11, 0);
  if (v12)
  {
    v14 = v12[20];
    v13 = (std::__shared_weak_count *)v12[21];
    v137 = v14;
    v138 = v13;
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v10 = *a4;
      v11 = a4[1];
    }
  }
  else
  {
    v14 = 0;
    v137 = 0;
    v138 = 0;
  }
  v17 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v10, v11, 1);
  if (v17)
  {
    v19 = *((_QWORD *)v17 + 20);
    v18 = (std::__shared_weak_count *)*((_QWORD *)v17 + 21);
    *(_QWORD *)&v136 = v19;
    *((_QWORD *)&v136 + 1) = v18;
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v136 = 0uLL;
  }
  v22 = *(_DWORD *)(a1 + 420);
  if (v22 <= 1)
    v23 = 1;
  else
    v23 = v22;
  v25 = *(_DWORD *)(v19 + 8);
  v24 = *(_DWORD *)(v19 + 12);
  v27 = *(_DWORD *)(v14 + 8);
  v26 = *(_DWORD *)(v14 + 12);
  v28 = *(__int16 *)(a1 + 396);
  v29 = *(__int16 *)(a1 + 398);
  v30 = *(_DWORD *)(a1 + 352);
  v31 = *(_DWORD *)(a1 + 356);
  v32 = *(__int16 *)(a1 + 384);
  v33 = *(__int16 *)(a1 + 386);
  v133 = __PAIR64__(v33, v32);
  v34 = *(__int16 *)(a1 + 388);
  v35 = *(__int16 *)(a1 + 390);
  v134 = __PAIR64__(v35, v34);
  v36 = *(__int16 *)(a1 + 392);
  v37 = *(__int16 *)(a1 + 394);
  v135 = __PAIR64__(v36, v37);
  v38 = *(__int16 *)(a1 + 376);
  switch(v38)
  {
    case 4:
      goto LABEL_25;
    case 2:
      v133 = 0;
      v134 = 0;
      v135 = 0;
      goto LABEL_76;
    case 1:
LABEL_25:
      v36 = 0;
      v37 = 0;
      v39 = ((v26 - 1) * v29 - v24 + v31) & ~(((v26 - 1) * v29 - v24 + v31) >> 31);
      v40 = ((v27 - 1) * v28 - v25 + v30) & ~(((v27 - 1) * v28 - v25 + v30) >> 31);
      v41 = v40 >> 1;
      v42 = v40 - (v40 >> 1);
      v43 = v39 >> 1;
      v44 = v39 - (v39 >> 1);
      if (*(_WORD *)(a1 + 376) == 1)
        v32 = v41;
      else
        v32 = v42;
      if (*(_WORD *)(a1 + 376) == 1)
        v33 = v42;
      else
        v33 = v41;
      v45 = 12;
      if (*(_WORD *)(a1 + 376) == 1)
        v46 = 8;
      else
        v46 = 12;
      if (*(_WORD *)(a1 + 376) != 1)
        v45 = 8;
      *(_DWORD *)((char *)&v133 + v46) = v43;
      *(_DWORD *)((char *)&v133 + v45) = v44;
      if ((unsigned __int16)v38 == 1)
        v47 = 20;
      else
        v47 = 16;
      if ((unsigned __int16)v38 == 1)
        v48 = 16;
      else
        v48 = 20;
      if ((unsigned __int16)v38 == 1)
        v35 = v44;
      else
        v35 = v43;
      if ((unsigned __int16)v38 == 1)
        v34 = v43;
      else
        v34 = v44;
      v133 = __PAIR64__(v33, v32);
      *(_DWORD *)((char *)&v133 + v47) = 0;
      *(_DWORD *)((char *)&v133 + v48) = 0;
      break;
  }
  if (v32 != v33 || v34 != v35 || v37 != v36)
  {
    v127 = v23;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v132, v33 + v32 + *(_DWORD *)(v19 + 8), v34 + *(_DWORD *)(v19 + 12) + v35, *(_DWORD *)(v19 + 16), *(_DWORD *)(v19 + 20));
    if (*(int *)(v19 + 20) >= 1)
    {
      v51 = 0;
      v52 = v132;
      v53 = v134;
      v54 = (int)v133;
      do
      {
        if (*(int *)(v19 + 16) >= 1)
        {
          v55 = 0;
          do
          {
            v56 = *(_DWORD *)(v19 + 12);
            if (v56 >= 1)
            {
              for (i = 0; i < v56; ++i)
              {
                memcpy((void *)(*(_QWORD *)(v52 + 24)+ 4 * *(_DWORD *)(v52 + 12) * *(_DWORD *)(v52 + 8) * v51 * *(_DWORD *)(v52 + 16)+ 4 * *(_DWORD *)(v52 + 12) * *(_DWORD *)(v52 + 8) * v55+ 4 * (v53 + i) * *(_DWORD *)(v52 + 8)+ 4 * v54), (const void *)(*(_QWORD *)(v19 + 24)+ 4 * *(_DWORD *)(v19 + 8) * v56 * v51 * *(_DWORD *)(v19 + 16)+ 4 * *(_DWORD *)(v19 + 8) * v56 * v55+ 4 * *(_DWORD *)(v19 + 8) * i), 4 * *(int *)(v19 + 8));
                v56 = *(_DWORD *)(v19 + 12);
              }
            }
            ++v55;
          }
          while (v55 < *(_DWORD *)(v19 + 16));
        }
        ++v51;
      }
      while (v51 < *(_DWORD *)(v19 + 20));
    }
    v58 = v132;
    v132 = 0uLL;
    v136 = v58;
    v23 = v127;
    if (v18)
    {
      v59 = (unint64_t *)&v18->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v61 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
    if (*((_QWORD *)&v132 + 1))
    {
      v62 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
LABEL_76:
  v64 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  if (v64)
  {
    v65 = v64[21];
    *(_QWORD *)&v132 = v64[20];
    *((_QWORD *)&v132 + 1) = v65;
    if (v65)
    {
      v66 = (unint64_t *)(v65 + 8);
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
  }
  else
  {
    v132 = 0uLL;
  }
  if (v23 > (uint64_t)(*(_QWORD *)(a1 + 832) - *(_QWORD *)(a1 + 824)) >> 3)
  {
    std::vector<void *>::resize((char **)(a1 + 824), v23);
    v68 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
    if (v68)
    {
      v69 = (std::__shared_weak_count *)*((_QWORD *)v68 + 21);
      v130 = *((_QWORD *)v68 + 20);
      v131 = v69;
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
    }
    else
    {
      v69 = 0;
      v130 = 0;
      v131 = 0;
    }
    v129[0] = 0;
    v129[1] = 0;
    create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(a1 + 304, (uint64_t)&v136, (uint64_t)&v132, (uint64_t)&v130, (uint64_t)v129, &v133, a1 + 824, 0, 0);
    if (v69)
    {
      v72 = (unint64_t *)&v69->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
  }
  v74 = *(int *)(a1 + 344);
  v75 = *(int *)(a1 + 348);
  v76 = *(_DWORD *)(v136 + 12);
  v120 = *(_DWORD *)(v136 + 8);
  v123 = v136;
  v77 = *(int *)(v137 + 8);
  v78 = *(int *)(v137 + 12);
  v125 = v137;
  v79 = *(int *)(a1 + 352);
  v80 = *(int *)(a1 + 356);
  v126 = operator new(0x20uLL);
  v128 = a1;
  v113 = v80;
  v114 = v79;
  *v126 = v79;
  v126[1] = v80;
  v118 = v75 / v23;
  v126[2] = v75 / v23;
  v126[3] = v74 / v23;
  v81 = v74 / v23;
  v82 = operator new(0x18uLL);
  v83 = v23;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  *v82 = v77;
  v82[1] = v78;
  __p = v82;
  v88 = v81;
  v82[2] = v81;
  batch_size = *(int *)(v125 + 20);
  v89 = v76 * (uint64_t)v120;
  v90 = v89 * v75;
  v91 = (int)v78 * (uint64_t)(int)v77;
  v92 = v91 * v74;
  weights_delta = (BNNSNDArrayDescriptor *)(v128 + 472);
  out_delta = (const BNNSNDArrayDescriptor *)(v128 + 648);
  v95 = v89 * v118;
  v96 = v118 * v88;
  v119 = 8 * v83;
  v121 = v139;
  v116 = 4 * v91 * v88;
  v117 = 4 * v95;
  v115 = 4 * v96 * v114 * v113;
  do
  {
    v97 = *(_QWORD *)(v121 + 24) + v84;
    *(_OWORD *)(v128 + 616) = 0u;
    *(_OWORD *)(v128 + 632) = 0u;
    *(_OWORD *)(v128 + 584) = 0u;
    *(_OWORD *)(v128 + 600) = 0u;
    *(_OWORD *)(v128 + 552) = 0u;
    *(_OWORD *)(v128 + 568) = 0u;
    *(_OWORD *)(v128 + 520) = 0u;
    *(_OWORD *)(v128 + 536) = 0u;
    *(_OWORD *)(v128 + 488) = 0u;
    *(_OWORD *)(v128 + 504) = 0u;
    *(_OWORD *)&weights_delta->flags = 0u;
    *(_DWORD *)(v128 + 476) = 0x40000;
    v98 = *((_OWORD *)v126 + 1);
    *(_OWORD *)(v128 + 480) = *(_OWORD *)v126;
    *(_OWORD *)(v128 + 496) = v98;
    *(_QWORD *)(v128 + 608) = v97;
    *(_DWORD *)(v128 + 616) = 65568;
    *(_QWORD *)(v128 + 636) = 1065353216;
    v99 = *(_QWORD *)(v125 + 24) + v85;
    *(_OWORD *)(v128 + 792) = 0u;
    *(_OWORD *)(v128 + 808) = 0u;
    *(_OWORD *)(v128 + 760) = 0u;
    *(_OWORD *)(v128 + 776) = 0u;
    *(_OWORD *)(v128 + 728) = 0u;
    *(_OWORD *)(v128 + 744) = 0u;
    *(_OWORD *)(v128 + 696) = 0u;
    *(_OWORD *)(v128 + 712) = 0u;
    *(_OWORD *)(v128 + 664) = 0u;
    *(_OWORD *)(v128 + 680) = 0u;
    *(_OWORD *)&out_delta->flags = 0u;
    *(_DWORD *)(v128 + 652) = 196608;
    *(_OWORD *)(v128 + 656) = *(_OWORD *)__p;
    *(_QWORD *)(v128 + 672) = __p[2];
    *(_QWORD *)(v128 + 784) = v99;
    *(_DWORD *)(v128 + 792) = 65568;
    *(_QWORD *)(v128 + 812) = 1065353216;
    v100 = BNNSFilterApplyBackwardBatch(*(void **)(*(_QWORD *)(v128 + 824) + v87), batch_size, (const void *)(*(_QWORD *)(v123 + 24) + v86), v90, 0, v90, (const void *)(*(_QWORD *)(v132 + 24) + v85), v92, out_delta, v92, weights_delta, 0);
    if ((_DWORD)v100)
      Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v100);
    v87 += 8;
    v86 += v117;
    v85 += v116;
    v84 += v115;
  }
  while (v119 != v87);
  operator delete(__p);
  operator delete(v126);
  v101 = (std::__shared_weak_count *)*((_QWORD *)&v132 + 1);
  if (*((_QWORD *)&v132 + 1))
  {
    v102 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
  if (*((_QWORD *)&v136 + 1))
  {
    v105 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = v138;
  if (v138)
  {
    v108 = (unint64_t *)&v138->__shared_owners_;
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  v110 = v140;
  if (v140)
  {
    v111 = (unint64_t *)&v140->__shared_owners_;
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
}

void sub_1916D057C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *__p,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 120);
  _Unwind_Resume(a1);
}

void Espresso::pool_grad_kernel::~pool_grad_kernel(void **this)
{
  Espresso::pool_grad_kernel::~pool_grad_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D732F8;
  BNNSFilterDestroy(this[49]);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::pool_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  std::__shared_weak_count *v8;
  int32x2_t *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  BNNSImageStackDescriptor *v21;
  int8x16_t v22;
  int8x16_t v23;
  std::__shared_weak_count *v24;
  int32x2_t *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  int32x2_t v29;
  int32x2_t v30;
  __int32 v31;
  int32x4_t v32;
  uint64_t v33;
  BNNSImageStackDescriptor *v34;
  uint64_t bnns_filter;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int32x2_t *v42;
  uint64_t v43;
  uint64_t v44;
  int32x2_t *v45;
  _QWORD *v46;
  _QWORD *v47;
  size_t v48;
  int32x2_t v49;
  int32x2_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  void *filter;
  int32x4_t v62;
  uint64_t v63;
  _OWORD v64[3];
  uint64_t v65;
  _OWORD v66[3];
  uint64_t v67;
  _OWORD v68[7];
  _OWORD v69[3];
  uint64_t v70;
  _OWORD v71[3];
  uint64_t v72;
  int32x2_t *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  int32x2_t *v77;
  std::__shared_weak_count *v78;

  v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v7)
  {
    v9 = (int32x2_t *)*((_QWORD *)v7 + 20);
    v8 = (std::__shared_weak_count *)*((_QWORD *)v7 + 21);
    v77 = v9;
    v78 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v77 = 0;
    v78 = 0;
  }
  v12 = *a4;
  v13 = a4[1];
  v14 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v13, 1);
  if (v14)
  {
    v16 = v14[20];
    v15 = (std::__shared_weak_count *)v14[21];
    v75 = v16;
    v76 = v15;
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v12 = *a4;
      v13 = a4[1];
    }
  }
  else
  {
    v16 = 0;
    v75 = 0;
    v76 = 0;
  }
  v19 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v12, v13, 0);
  if (v19)
  {
    v25 = (int32x2_t *)*((_QWORD *)v19 + 20);
    v24 = (std::__shared_weak_count *)*((_QWORD *)v19 + 21);
    v73 = v25;
    v74 = v24;
    if (v24)
    {
      v26 = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v73 = 0;
    v74 = 0;
  }
  v28 = *(__int16 *)(a1 + 316);
  if (v28 == 4)
    goto LABEL_22;
  if (v28 == 2)
  {
    v32 = 0uLL;
LABEL_28:
    v62 = v32;
    goto LABEL_29;
  }
  if (v28 != 1)
  {
    v32 = vmovl_s16(*(int16x4_t *)(a1 + 324));
    goto LABEL_28;
  }
LABEL_22:
  v29 = vmax_s32(vadd_s32(vmla_s32(vneg_s32(v9[1]), *(int32x2_t *)(a1 + 296), vadd_s32(v25[1], (int32x2_t)-1)), *(int32x2_t *)(a1 + 284)), 0);
  v30.i32[1] = 1;
  v30.i32[0] = (unsigned __int32)v29.i32[0] >> 1;
  v23.i32[0] = vsub_s32(v29, v30).u32[0];
  *(uint32x2_t *)v22.i8 = vshl_u32((uint32x2_t)v29, (uint32x2_t)vneg_s32(v30));
  v31 = vsub_s32(v29, *(int32x2_t *)&v22).i32[1];
  if (*(_WORD *)(a1 + 316) == 1)
  {
    v23.i32[1] = v22.i32[1];
    v23 = vextq_s8(v22, v23, 0xCuLL);
    v23.i32[0] = (unsigned __int32)v29.i32[0] >> 1;
    v23.i32[3] = v31;
  }
  else
  {
    v23.i32[1] = (unsigned __int32)v29.i32[0] >> 1;
    v23.i64[1] = __PAIR64__(v22.u32[1], v31);
  }
  v62 = (int32x4_t)v23;
LABEL_29:
  Espresso::BNNSEngine::bnns_descriptor_for_layer_data((Espresso::BNNSEngine *)a4, (Espresso::layer_data *)v69, v20, v21);
  Espresso::BNNSEngine::bnns_descriptor_for_layer_data((Espresso::BNNSEngine *)a3, (Espresso::layer_data *)v71, v33, v34);
  bnns_filter = *(_QWORD *)(a1 + 392);
  if (!bnns_filter)
  {
    v36 = *(_OWORD *)(a1 + 360);
    v68[4] = *(_OWORD *)(a1 + 344);
    v68[5] = v36;
    v68[6] = *(_OWORD *)(a1 + 376);
    v37 = *(_OWORD *)(a1 + 296);
    v68[0] = *(_OWORD *)(a1 + 280);
    v68[1] = v37;
    v38 = *(_OWORD *)(a1 + 328);
    v68[2] = *(_OWORD *)(a1 + 312);
    v68[3] = v38;
    v67 = v72;
    v66[1] = v71[1];
    v66[2] = v71[2];
    v66[0] = v71[0];
    v65 = v70;
    v64[1] = v69[1];
    v64[2] = v69[2];
    v64[0] = v69[0];
    bnns_filter = Espresso::BNNSEngine::pool_kernel::create_bnns_filter((uint64_t)v68, (uint64_t)v66, (uint64_t)v64, v62.i32[0], v62.i32[2], 0);
    *(_QWORD *)(a1 + 392) = bnns_filter;
  }
  filter = (void *)bnns_filter;
  v60 = v24;
  v63 = v16;
  v39 = v9[1].i32[1];
  v40 = v9[2].i32[0];
  v41 = v9[1].i32[0];
  v42 = v9;
  v43 = v25[1].i32[0];
  v44 = v25[1].i32[1];
  v45 = v25;
  v46 = operator new(0x18uLL);
  *v46 = v41;
  v46[1] = v39;
  v46[2] = v40;
  v47 = operator new(0x18uLL);
  *v47 = v43;
  v47[1] = v44;
  v47[2] = v40;
  v48 = v45[2].i32[1];
  v49 = v42[3];
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 404) = 196608;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)v46;
  *(_QWORD *)(a1 + 424) = v46[2];
  *(int32x2_t *)(a1 + 536) = v49;
  *(_DWORD *)(a1 + 544) = 65568;
  *(_QWORD *)(a1 + 564) = 1065353216;
  v50 = v45[3];
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 580) = 196608;
  *(_OWORD *)(a1 + 584) = *(_OWORD *)v47;
  *(_QWORD *)(a1 + 600) = v47[2];
  *(int32x2_t *)(a1 + 712) = v50;
  *(_DWORD *)(a1 + 720) = 65568;
  *(_QWORD *)(a1 + 740) = 1065353216;
  v51 = BNNSFilterApplyBackwardBatch(filter, v48, *(const void **)(v63 + 24), (int)v41 * (uint64_t)(int)v40 * v39, (BNNSNDArrayDescriptor *)(a1 + 400), (int)v41 * (uint64_t)(int)v40 * v39, 0, (int)v43 * (uint64_t)(int)v40 * v44, (const BNNSNDArrayDescriptor *)(a1 + 576), (int)v43 * (uint64_t)(int)v40 * v44, 0, 0);
  if ((_DWORD)v51)
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v51);
  operator delete(v47);
  operator delete(v46);
  if (v60)
  {
    v52 = (unint64_t *)&v60->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v54 = v76;
  if (v76)
  {
    v55 = (unint64_t *)&v76->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v78;
  if (v78)
  {
    v58 = (unint64_t *)&v78->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_1916D0AD8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 112);
  _Unwind_Resume(a1);
}

void Espresso::nonlinearity_grad::~nonlinearity_grad(void **this)
{
  Espresso::nonlinearity_grad::~nonlinearity_grad(this);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D823E0;
  BNNSFilterDestroy(this[42]);
  *this = &off_1E2D8C088;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 40));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::nonlinearity_grad::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const BNNSActivation *v29;
  const BNNSFilterParameters *v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  int v34;
  size_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  const void *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  BNNSVectorDescriptor v52[2];
  BNNSVectorDescriptor v53;
  size_t v54;
  int v55;
  int v56;
  uint64_t v57;
  _DWORD v58[10];
  void *__p;
  void *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;

  v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v7)
  {
    v9 = v7[20];
    v8 = (std::__shared_weak_count *)v7[21];
    v67 = v9;
    v68 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v67 = 0;
    v68 = 0;
  }
  v12 = *a4;
  v13 = a4[1];
  v14 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v13, 0);
  if (v14)
  {
    v16 = v14[20];
    v15 = (std::__shared_weak_count *)v14[21];
    v65 = v16;
    v66 = v15;
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v12 = *a4;
      v13 = a4[1];
    }
  }
  else
  {
    v16 = 0;
    v65 = 0;
    v66 = 0;
  }
  v19 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v12, v13, 1);
  if (v19)
  {
    v21 = v19[20];
    v20 = (std::__shared_weak_count *)v19[21];
    v63 = v21;
    v64 = v20;
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v12 = *a4;
      v13 = a4[1];
    }
  }
  else
  {
    v21 = 0;
    v63 = 0;
    v64 = 0;
  }
  v24 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v12, v13, 2);
  if (v24)
  {
    v26 = *((_QWORD *)v24 + 20);
    v25 = (std::__shared_weak_count *)*((_QWORD *)v24 + 21);
    v61 = v26;
    v62 = v25;
    if (v25)
    {
      v27 = (unint64_t *)&v25->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    v25 = 0;
    v26 = 0;
    v61 = 0;
    v62 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)v58, *(_QWORD *)*a3);
  v31 = 0;
  v32 = *(int *)(v16 + 8);
  do
  {
    v32 *= *(int *)(v16 + 12 + v31);
    v31 += 4;
  }
  while (v31 != 12);
  if (!*(_QWORD *)(a1 + 336))
  {
    v57 = 0;
    *(_QWORD *)&v53.data_bias = 0;
    v54 = v32;
    v55 = 65568;
    v56 = 1065353216;
    v53.size = v32;
    v53.data_type = BNNSDataTypeFloat32;
    v53.data_scale = 1.0;
    memset(v52, 0, sizeof(v52));
    v33 = *(unsigned int *)(a1 + 280);
    switch((int)v33)
    {
      case 0:
        LODWORD(v52[0].size) = 1;
        goto LABEL_35;
      case 1:
        v34 = 4;
        goto LABEL_34;
      case 2:
      case 4:
      case 5:
        goto LABEL_64;
      case 3:
        v34 = 3;
        goto LABEL_34;
      case 6:
        goto LABEL_35;
      default:
        if ((_DWORD)v33 != 14)
LABEL_64:
          Espresso::throw_exception_selector<Espresso::generic_error,int &>("activation_grad for activation mode %d is not implemented", v33);
        v34 = 8;
LABEL_34:
        LODWORD(v52[0].size) = v34;
        *(size_t *)((char *)&v52[0].size + 4) = *(_QWORD *)(a1 + 284);
LABEL_35:
        *(_QWORD *)(a1 + 336) = Espresso::BNNSEngine::create_bnns_activation((Espresso::BNNSEngine *)&v54, &v53, v52, v29, v30);
        break;
    }
  }
  v35 = v58[3];
  v36 = v58[1] * (uint64_t)v58[2] * v58[0];
  v37 = *(_QWORD *)(v9 + 24);
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 488) = v37;
  *(_DWORD *)(a1 + 356) = 0x10000;
  *(_QWORD *)(a1 + 360) = v36;
  *(_DWORD *)(a1 + 496) = 65568;
  *(_QWORD *)(a1 + 516) = 1065353216;
  v38 = *(_QWORD *)(v16 + 24);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 532) = 0x10000;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_QWORD *)(a1 + 536) = v36;
  *(_QWORD *)(a1 + 664) = v38;
  *(_DWORD *)(a1 + 672) = 65568;
  *(_QWORD *)(a1 + 692) = 1065353216;
  if (v21)
  {
    v39 = *(const void **)(v21 + 24);
    if (v26)
    {
LABEL_38:
      v40 = *(const void **)(v26 + 24);
      goto LABEL_41;
    }
  }
  else
  {
    v39 = 0;
    if (v26)
      goto LABEL_38;
  }
  v40 = 0;
LABEL_41:
  BNNSFilterApplyBackwardBatch(*(void **)(a1 + 336), v35, v39, v36, (BNNSNDArrayDescriptor *)(a1 + 352), v36, v40, v36, (const BNNSNDArrayDescriptor *)(a1 + 528), v36, 0, 0);
  if (__p)
  {
    v60 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    v41 = (unint64_t *)&v25->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v43 = v64;
  if (v64)
  {
    v44 = (unint64_t *)&v64->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v66;
  if (v66)
  {
    v47 = (unint64_t *)&v66->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v68;
  if (v68)
  {
    v50 = (unint64_t *)&v68->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1916D0F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;

  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 96);
  _Unwind_Resume(a1);
}

uint64_t Espresso::BNNSEngine::create_bnns_activation(Espresso::BNNSEngine *this, const BNNSVectorDescriptor *a2, const BNNSVectorDescriptor *a3, const BNNSActivation *a4, const BNNSFilterParameters *a5)
{
  Espresso::BNNSEngine *v7;
  unsigned __int8 v8;
  NSObject *v9;
  uint8_t v11[16];

  v7 = this;
  if ((v8 & 1) == 0)
  {
    if ((_DWORD)this)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      Espresso::BNNSEngine::create_bnns_activation(BNNSVectorDescriptor const*,BNNSVectorDescriptor const*,BNNSActivation const*,BNNSFilterParameters const*)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
    }
  }
  if (Espresso::BNNSEngine::create_bnns_activation(BNNSVectorDescriptor const*,BNNSVectorDescriptor const*,BNNSActivation const*,BNNSFilterParameters const*)::log_requested)
  {
    Espresso::espresso_os_log_subsystem(this, (const char *)a2);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v11 = 0;
      _os_log_debug_impl(&dword_190DAF000, v9, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateVectorActivationLayer", v11, 2u);
    }

  }
  return MEMORY[0x19401AA38](v7, a2, a3, 0, a5);
}

void Espresso::inner_product_grad_kernel::~inner_product_grad_kernel(void **this)
{
  Espresso::inner_product_grad_kernel::~inner_product_grad_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;

  *this = &off_1E2D92D58;
  BNNSFilterDestroy(this[55]);
  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::inner_product_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  size_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const void *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  const void *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char v53[40];
  void *__p;
  void *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    v7 = (std::__shared_weak_count *)v6[21];
    v63 = v6[20];
    v64 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v63 = 0;
    v64 = 0;
  }
  v10 = *a4;
  v11 = a4[1];
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v11, 0);
  if (v12)
  {
    v13 = (std::__shared_weak_count *)v12[21];
    v61 = v12[20];
    v62 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v10 = *a4;
      v11 = a4[1];
    }
  }
  else
  {
    v61 = 0;
    v62 = 0;
  }
  v16 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v10, v11, 1);
  v17 = *((_QWORD *)v16 + 20);
  v18 = (std::__shared_weak_count *)*((_QWORD *)v16 + 21);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v21 = *(void **)(v17 + 24);
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  else
  {
    v21 = *(void **)(v17 + 24);
  }
  Espresso::abstract_blob_container::shape(v53, *(_QWORD *)*a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v56, (const Espresso::layer_shape *)v53, 0);
  if (__p)
  {
    v55 = __p;
    operator delete(__p);
  }
  if (*(_BYTE *)(a1 + 344) || v60 <= 3)
  {
    switch(v60)
    {
      case 1u:
        v24 = 1;
        break;
      case 2u:
        goto LABEL_31;
      case 3u:
        goto LABEL_30;
      case 4u:
        v24 = v57 * (uint64_t)v56 * v58;
        break;
      case 5u:
        v24 = v57 * (uint64_t)v56 * v58 * v59;
        break;
      default:
        goto LABEL_32;
    }
  }
  else if (v60 == 5)
  {
LABEL_30:
    v24 = v57 * (uint64_t)v56;
  }
  else if (v60 == 4)
  {
LABEL_31:
    v24 = v56;
  }
  else
  {
LABEL_32:
    v24 = 0;
  }
  v25 = *(void **)(a1 + 440);
  if (v25)
  {
    if (v21 == *(void **)(a1 + 448))
      goto LABEL_39;
    BNNSFilterDestroy(v25);
    *(_QWORD *)(a1 + 440) = 0;
  }
  *(_QWORD *)(a1 + 448) = v21;
  *(_QWORD *)(a1 + 440) = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(*(unsigned int *)(a1 + 308), *(unsigned int *)(a1 + 304), *(_DWORD *)(a1 + 420), *(_DWORD *)(a1 + 432), v21, 0, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, 0);
LABEL_39:
  v26 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
  v27 = *((_QWORD *)v26 + 20);
  v28 = (std::__shared_weak_count *)*((_QWORD *)v26 + 21);
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    v31 = *(const void **)(v27 + 24);
    v32 = (unint64_t *)&v28->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  else
  {
    v31 = *(const void **)(v27 + 24);
  }
  v34 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  v35 = *((_QWORD *)v34 + 20);
  v36 = (std::__shared_weak_count *)*((_QWORD *)v34 + 21);
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v39 = *(const void **)(v35 + 24);
    v40 = (unint64_t *)&v36->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  else
  {
    v39 = *(const void **)(v35 + 24);
  }
  v42 = *(unsigned int *)(a1 + 308);
  v43 = *(_QWORD *)(v63 + 24);
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 460) = 0x10000;
  *(_QWORD *)(a1 + 464) = v42;
  *(_QWORD *)(a1 + 592) = v43;
  *(_DWORD *)(a1 + 600) = 65568;
  *(_QWORD *)(a1 + 620) = 1065353216;
  v44 = *(unsigned int *)(a1 + 304);
  v45 = *(_QWORD *)(v61 + 24);
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 636) = 0x10000;
  *(_QWORD *)(a1 + 640) = v44;
  *(_QWORD *)(a1 + 768) = v45;
  *(_DWORD *)(a1 + 776) = 65568;
  *(_QWORD *)(a1 + 796) = 1065353216;
  v46 = BNNSFilterApplyBackwardBatch(*(void **)(a1 + 440), v24, v31, *(unsigned int *)(a1 + 308), (BNNSNDArrayDescriptor *)(a1 + 456), *(unsigned int *)(a1 + 308), v39, *(unsigned int *)(a1 + 304), (const BNNSNDArrayDescriptor *)(a1 + 632), *(unsigned int *)(a1 + 304), 0, 0);
  if ((_DWORD)v46)
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v46);
  v47 = v62;
  if (v62)
  {
    v48 = (unint64_t *)&v62->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v64;
  if (v64)
  {
    v51 = (unint64_t *)&v64->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
}

void sub_1916D1574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  uint64_t v20;

  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 64);
  _Unwind_Resume(a1);
}

uint64_t Espresso::inner_product_grad_kernel::clear_weights(uint64_t this)
{
  *(_QWORD *)(this + 448) = 0;
  return this;
}

void Espresso::inner_product_weights_grad_kernel::~inner_product_weights_grad_kernel(void **this)
{
  Espresso::inner_product_weights_grad_kernel::~inner_product_weights_grad_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;

  *this = &off_1E2D9DBD8;
  BNNSFilterDestroy(this[55]);
  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::inner_product_weights_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  const void *v34;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  const void *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void *__p;
  void *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    v7 = (std::__shared_weak_count *)v6[21];
    v75 = v6[20];
    v76 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v75 = 0;
    v76 = 0;
  }
  v10 = (uint64_t *)*a4;
  v11 = a4[1];
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v11, 0);
  if (v12)
  {
    v13 = (std::__shared_weak_count *)v12[21];
    v73 = v12[20];
    v74 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v10 = (uint64_t *)*a4;
      v11 = a4[1];
    }
  }
  else
  {
    v73 = 0;
    v74 = 0;
  }
  v16 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v10, v11, 1);
  if (v16)
  {
    v17 = (std::__shared_weak_count *)v16[21];
    v71 = v16[20];
    v72 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = (uint64_t *)*a4;
    }
  }
  else
  {
    v71 = 0;
    v72 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v62, *v10);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v66, (const Espresso::layer_shape *)&v62, 0);
  if (__p)
  {
    v65 = __p;
    operator delete(__p);
  }
  if (*(_BYTE *)(a1 + 344) || v70 <= 3)
  {
    switch(v70)
    {
      case 1u:
        v20 = 1;
        break;
      case 2u:
        goto LABEL_29;
      case 3u:
        goto LABEL_28;
      case 4u:
        v20 = v67 * (uint64_t)v66 * v68;
        break;
      case 5u:
        v20 = v67 * (uint64_t)v66 * v68 * v69;
        break;
      default:
        goto LABEL_30;
    }
  }
  else if (v70 == 5)
  {
LABEL_28:
    v20 = v67 * (uint64_t)v66;
  }
  else if (v70 == 4)
  {
LABEL_29:
    v20 = v66;
  }
  else
  {
LABEL_30:
    v20 = 0;
  }
  v21 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 1);
  v22 = *((_QWORD *)v21 + 20);
  v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 21);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v26 = *(void **)(v22 + 24);
    v27 = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    v26 = *(void **)(v22 + 24);
  }
  v29 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  if (v29)
  {
    v30 = (std::__shared_weak_count *)v29[21];
    v62 = v29[20];
    v63 = v30;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
  }
  else
  {
    v62 = 0;
    v63 = 0;
  }
  v33 = *(void **)(a1 + 440);
  if (v33)
  {
    if (v26 == *(void **)(a1 + 448))
      goto LABEL_51;
    BNNSFilterDestroy(v33);
    *(_QWORD *)(a1 + 440) = 0;
  }
  *(_QWORD *)(a1 + 448) = v26;
  *(_QWORD *)(a1 + 440) = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(*(unsigned int *)(a1 + 308), *(unsigned int *)(a1 + 304), *(_DWORD *)(a1 + 420), *(_DWORD *)(a1 + 432), v26, 0, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, 0);
LABEL_51:
  v34 = *(const void **)(v71 + 24);
  v35 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  v36 = *((_QWORD *)v35 + 20);
  v37 = (std::__shared_weak_count *)*((_QWORD *)v35 + 21);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    v40 = *(const void **)(v36 + 24);
    v41 = (unint64_t *)&v37->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  else
  {
    v40 = *(const void **)(v36 + 24);
  }
  v43 = *(_QWORD *)(v75 + 24);
  v44 = *(unsigned int *)(a1 + 308);
  v45 = *(unsigned int *)(a1 + 304);
  v46 = operator new(0x10uLL);
  *v46 = v44;
  v46[1] = v45;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 460) = 0x20000;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)v46;
  *(_QWORD *)(a1 + 592) = v43;
  *(_DWORD *)(a1 + 600) = 65568;
  *(_QWORD *)(a1 + 620) = 1065353216;
  operator delete(v46);
  v47 = *(_QWORD *)(v73 + 24);
  v48 = *(unsigned int *)(a1 + 304);
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_DWORD *)(a1 + 636) = 0x10000;
  *(_QWORD *)(a1 + 640) = v48;
  *(_QWORD *)(a1 + 768) = v47;
  *(_DWORD *)(a1 + 776) = 65568;
  *(_QWORD *)(a1 + 796) = 1065353216;
  v49 = BNNSFilterApplyBackwardBatch(*(void **)(a1 + 440), v20, v34, *(unsigned int *)(a1 + 308), 0, *(unsigned int *)(a1 + 308), v40, *(unsigned int *)(a1 + 304), (const BNNSNDArrayDescriptor *)(a1 + 632), *(unsigned int *)(a1 + 304), (BNNSNDArrayDescriptor *)(a1 + 456), 0);
  if ((_DWORD)v49)
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v49);
  v50 = v63;
  if (v63)
  {
    v51 = (unint64_t *)&v63->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v72;
  if (v72)
  {
    v54 = (unint64_t *)&v72->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v74;
  if (v74)
  {
    v57 = (unint64_t *)&v74->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v76;
  if (v76)
  {
    v60 = (unint64_t *)&v76->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1916D1B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 112);
  _Unwind_Resume(a1);
}

uint64_t Espresso::inner_product_weights_grad_kernel::clear_weights(uint64_t this)
{
  *(_QWORD *)(this + 448) = 0;
  return this;
}

void Espresso::fused_convolution_grad_kernel::~fused_convolution_grad_kernel(void ***this)
{
  Espresso::fused_convolution_grad_kernel::~fused_convolution_grad_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;
  void **v3;

  *this = (void **)&off_1E2D996A8;
  v2 = (void **)(this + 145);
  Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters(this + 145);
  v3 = (void **)*v2;
  if (*v2)
  {
    this[146] = v3;
    operator delete(v3);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::fused_convolution_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  int32x2_t *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int v24;
  int v25;
  int32x2_t v26;
  unsigned int v27;
  int32x2_t v28;
  unsigned __int32 v29;
  int32x2_t v30;
  int32x2_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  _OWORD *v43;
  __int128 v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  _OWORD *v49;
  __int128 v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  void *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int32x2_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  __int128 v73;
  _QWORD *v74;
  size_t v75;
  int32x2_t v76;
  BNNSNDArrayDescriptor *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  int v80;
  BNNSNDArrayDescriptor *weights_delta;
  uint64_t v82;
  __int128 v83;
  BNNSNDArrayDescriptor *v84;
  const void *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int32x2_t *v113;
  std::__shared_weak_count *v114;
  std::__shared_weak_count *v115;
  __int128 v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  int32x4_t v124;
  uint64_t v125;
  int32x2_t *v126;
  std::__shared_weak_count *v127;
  int32x2_t *v128;
  std::__shared_weak_count *v129;

  v7 = *a4;
  v8 = a4[1];
  v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v8, 0);
  if (v9)
  {
    v11 = (int32x2_t *)v9[20];
    v10 = (std::__shared_weak_count *)v9[21];
    v128 = v11;
    v129 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v7 = *a4;
      v8 = a4[1];
    }
  }
  else
  {
    v11 = 0;
    v128 = 0;
    v129 = 0;
  }
  v14 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v7, v8, 1);
  v17 = (int32x2_t *)v14[20];
  v18 = (std::__shared_weak_count *)v14[21];
  v126 = v17;
  v127 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v15.i16[0] = *(_WORD *)(a1 + 376);
  v15.i16[2] = *(_WORD *)(a1 + 378);
  v21 = *(int32x2_t *)(a1 + 328);
  v22 = v17[1];
  v23 = v11[1];
  v16.i16[0] = *(_WORD *)(a1 + 372);
  v16.i16[2] = *(_WORD *)(a1 + 374);
  v124 = vmovl_s16(*(int16x4_t *)(a1 + 360));
  v24 = *(__int16 *)(a1 + 368);
  LODWORD(v125) = *(__int16 *)(a1 + 370);
  HIDWORD(v125) = v24;
  v25 = *(__int16 *)(a1 + 352);
  if (v25 == 4)
  {
LABEL_13:
    v26 = vmax_s32(vsub_s32(vmul_s32(vadd_s32(v23, (int32x2_t)-1), vshr_n_s32(vshl_n_s32(v16, 0x10uLL), 0x10uLL)), (int32x2_t)vmvn_s8((int8x8_t)vmla_s32(vneg_s32(v22), vadd_s32(v21, (int32x2_t)-1), vshr_n_s32(vshl_n_s32(v15, 0x10uLL), 0x10uLL)))), 0);
    v27 = (unsigned __int32)v26.i32[0] >> 1;
    v28.i32[1] = 1;
    v28.i32[0] = (unsigned __int32)v26.i32[0] >> 1;
    v29 = vsub_s32(v26, v28).u32[0];
    v30 = (int32x2_t)vshl_u32((uint32x2_t)v26, (uint32x2_t)vneg_s32(v28));
    v31 = vsub_s32(v26, (int32x2_t)__PAIR64__(v30.u32[1], v29));
    if (*(_WORD *)(a1 + 352) == 1)
    {
      v124.i32[0] = v27;
      *(uint64_t *)((char *)v124.i64 + 4) = __PAIR64__(v30.u32[1], v29);
      *(_DWORD *)((unint64_t)&v124 | 0xC) = v31.i32[1];
    }
    else
    {
      v124.i64[0] = __PAIR64__(v27, v29);
      v124.u64[1] = (unint64_t)vzip2_s32(v31, v30);
    }
    goto LABEL_17;
  }
  if (v25 != 2)
  {
    if (v25 != 1)
      goto LABEL_18;
    goto LABEL_13;
  }
  v124 = 0uLL;
LABEL_17:
  v125 = 0;
LABEL_18:
  v32 = *a4;
  v33 = a4[1];
  v34 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v33, 2);
  if (v34)
  {
    v35 = (std::__shared_weak_count *)v34[21];
    v122 = v34[20];
    v123 = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      v32 = *a4;
      v33 = a4[1];
    }
  }
  else
  {
    v122 = 0;
    v123 = 0;
  }
  v38 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v32, v33, 3);
  if (v38)
  {
    v39 = (std::__shared_weak_count *)v38[21];
    v120 = v38[20];
    v121 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
  }
  else
  {
    v120 = 0;
    v121 = 0;
  }
  v119 = 0uLL;
  v117 = 0;
  v118 = 0;
  if (*(_BYTE *)(a1 + 448))
  {
    v42 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)(a1 + 280), 0, *(unsigned __int8 *)(a1 + 448));
    v43 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v42);
    if (v43)
    {
      v44 = v43[10];
      v45 = *((_QWORD *)v43 + 21);
      if (v45)
      {
        v46 = (unint64_t *)(v45 + 8);
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
    }
    else
    {
      v44 = 0uLL;
    }
    v119 = v44;
  }
  v116 = 0uLL;
  if (*(_BYTE *)(a1 + 449))
  {
    v48 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)(a1 + 280), 1, *(unsigned __int8 *)(a1 + 449));
    v49 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v48);
    if (v49)
    {
      v50 = v49[10];
      v51 = *((_QWORD *)v49 + 21);
      if (v51)
      {
        v52 = (unint64_t *)(v51 + 8);
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
    }
    else
    {
      v50 = 0uLL;
    }
    v116 = v50;
  }
  if (*(_BYTE *)(a1 + 450))
  {
    v54 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_convolution_grad_params_t>((unsigned __int8 *)(a1 + 280), 2, *(unsigned __int8 *)(a1 + 450));
    v55 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v54);
    v56 = *((_QWORD *)v55 + 20);
    v57 = (std::__shared_weak_count *)*((_QWORD *)v55 + 21);
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      v60 = *(_QWORD *)(v56 + 24);
      v61 = (unint64_t *)&v57->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    else
    {
      v60 = *(_QWORD *)(v56 + 24);
    }
  }
  else
  {
    v60 = 0;
  }
  if (*(_QWORD *)(a1 + 1168) == *(_QWORD *)(a1 + 1160))
  {
    v114 = 0;
    v115 = 0;
    if (*(_BYTE *)(a1 + 450))
    {
      v79 = (std::__shared_weak_count *)operator new(0x58uLL);
      v79->__shared_owners_ = 0;
      v79->__shared_weak_owners_ = 0;
      v79->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEC00;
      v80 = *(_DWORD *)(a1 + 320);
      v79[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1190;
      *(_OWORD *)&v79[2].__shared_owners_ = 0u;
      v79[3].std::__shared_count = 0u;
      LODWORD(v79[1].__shared_owners_) = v80;
      v79[1].__shared_weak_owners_ = v60;
      LOBYTE(v79[2].__vftable) = 0;
      v114 = v79 + 1;
      v115 = v79;
    }
    else
    {
      v79 = 0;
    }
    std::vector<void *>::resize((char **)(a1 + 1160), 1uLL);
    v108 = v120 ? &v120 : (uint64_t *)&v128;
    create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(a1 + 280, (uint64_t)&v126, (uint64_t)v108, (uint64_t)&v122, (uint64_t)&v114, &v124, a1 + 1160, 0, 0);
    if (v79)
    {
      v109 = (unint64_t *)&v79->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
  }
  v63 = *(int *)(a1 + 320);
  v64 = *(int *)(a1 + 324);
  v66 = v126[1].i32[0];
  v65 = v126[1].i32[1];
  v113 = v126;
  v67 = v128;
  v69 = v128[1].i32[0];
  v68 = v128[1].i32[1];
  v70 = operator new(0x18uLL);
  v111 = v60;
  v112 = v65;
  *v70 = v66;
  v70[1] = v65;
  v70[2] = v64;
  v71 = *(_QWORD *)(a1 + 328);
  v72 = operator new(0x20uLL);
  *(_QWORD *)&v73 = (int)v71;
  *((_QWORD *)&v73 + 1) = SHIDWORD(v71);
  *(_OWORD *)v72 = v73;
  v72[2] = v64;
  v72[3] = v63;
  v74 = operator new(0x18uLL);
  *v74 = v69;
  v74[1] = v68;
  v74[2] = v63;
  v75 = v67[2].i32[1];
  v76 = v67[3];
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_DWORD *)(a1 + 988) = 196608;
  *(_QWORD *)(a1 + 1008) = v63;
  *(_OWORD *)(a1 + 992) = *(_OWORD *)v74;
  *(int32x2_t *)(a1 + 1120) = v76;
  *(_DWORD *)(a1 + 1128) = 65568;
  *(_QWORD *)(a1 + 1148) = 1065353216;
  if (*(_BYTE *)(a1 + 448))
  {
    v77 = (BNNSNDArrayDescriptor *)(a1 + 456);
    v78 = *(_QWORD *)(v119 + 24);
    *(_OWORD *)(a1 + 456) = 0uLL;
    *(_OWORD *)(a1 + 472) = 0uLL;
    *(_OWORD *)(a1 + 488) = 0uLL;
    *(_OWORD *)(a1 + 504) = 0uLL;
    *(_OWORD *)(a1 + 520) = 0uLL;
    *(_OWORD *)(a1 + 536) = 0uLL;
    *(_OWORD *)(a1 + 552) = 0uLL;
    *(_OWORD *)(a1 + 568) = 0uLL;
    *(_OWORD *)(a1 + 584) = 0uLL;
    *(_OWORD *)(a1 + 600) = 0uLL;
    *(_OWORD *)(a1 + 616) = 0uLL;
    *(_DWORD *)(a1 + 460) = 196608;
    *(_QWORD *)(a1 + 480) = v70[2];
    *(_OWORD *)(a1 + 464) = *(_OWORD *)v70;
    *(_QWORD *)(a1 + 592) = v78;
    *(_DWORD *)(a1 + 600) = 65568;
    *(_QWORD *)(a1 + 620) = 1065353216;
  }
  else
  {
    v77 = 0;
  }
  if (*(_BYTE *)(a1 + 449))
  {
    weights_delta = (BNNSNDArrayDescriptor *)(a1 + 632);
    v82 = *(_QWORD *)(v116 + 24);
    *(_OWORD *)(a1 + 632) = 0u;
    *(_OWORD *)(a1 + 648) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 680) = 0u;
    *(_OWORD *)(a1 + 696) = 0u;
    *(_OWORD *)(a1 + 712) = 0u;
    *(_OWORD *)(a1 + 728) = 0u;
    *(_OWORD *)(a1 + 744) = 0u;
    *(_OWORD *)(a1 + 760) = 0u;
    *(_OWORD *)(a1 + 776) = 0u;
    *(_OWORD *)(a1 + 792) = 0u;
    *(_DWORD *)(a1 + 636) = 0x40000;
    v83 = *((_OWORD *)v72 + 1);
    *(_OWORD *)(a1 + 640) = *(_OWORD *)v72;
    *(_OWORD *)(a1 + 656) = v83;
    *(_QWORD *)(a1 + 768) = v82;
    *(_DWORD *)(a1 + 776) = 65568;
    *(_QWORD *)(a1 + 796) = 1065353216;
  }
  else
  {
    weights_delta = 0;
  }
  if (*(_BYTE *)(a1 + 450))
  {
    v84 = (BNNSNDArrayDescriptor *)(a1 + 808);
    *(_OWORD *)(a1 + 936) = 0u;
    *(_OWORD *)(a1 + 952) = 0u;
    *(_OWORD *)(a1 + 968) = 0u;
    *(_OWORD *)(a1 + 904) = 0u;
    *(_OWORD *)(a1 + 920) = 0u;
    *(_OWORD *)(a1 + 872) = 0u;
    *(_OWORD *)(a1 + 888) = 0u;
    *(_OWORD *)(a1 + 840) = 0u;
    *(_OWORD *)(a1 + 856) = 0u;
    *(_OWORD *)(a1 + 808) = 0u;
    *(_OWORD *)(a1 + 824) = 0u;
    *(_DWORD *)(a1 + 812) = 0x10000;
    *(_QWORD *)(a1 + 816) = v63;
    *(_QWORD *)(a1 + 944) = v111;
    *(_DWORD *)(a1 + 952) = 65568;
    *(_QWORD *)(a1 + 972) = 1065353216;
  }
  else
  {
    v84 = 0;
  }
  if (v120)
    v85 = *(const void **)(v120 + 24);
  else
    v85 = 0;
  v86 = BNNSFilterApplyBackwardBatch(**(void ***)(a1 + 1160), v75, *(const void **)&v113[3], (int)v66 * (uint64_t)(int)v64 * v112, v77, (int)v66 * (uint64_t)(int)v64 * v112, v85, (int)v69 * (uint64_t)(int)v63 * v68, (const BNNSNDArrayDescriptor *)(a1 + 984), (int)v69 * (uint64_t)(int)v63 * v68, weights_delta, v84);
  if ((_DWORD)v86)
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v86);
  operator delete(v74);
  operator delete(v72);
  operator delete(v70);
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  if (*((_QWORD *)&v116 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v118;
  if (v118)
  {
    v91 = (unint64_t *)&v118->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (*((_QWORD *)&v119 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v121;
  if (v121)
  {
    v97 = (unint64_t *)&v121->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v123;
  if (v123)
  {
    v100 = (unint64_t *)&v123->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v127;
  if (v127)
  {
    v103 = (unint64_t *)&v127->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v129;
  if (v129)
  {
    v106 = (unint64_t *)&v129->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
}

void sub_1916D2454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 120);
  _Unwind_Resume(a1);
}

uint64_t Espresso::fused_convolution_grad_kernel::should_unpack()
{
  return 0;
}

void Espresso::fused_inner_product_grad_kernel::~fused_inner_product_grad_kernel(void **this)
{
  Espresso::fused_inner_product_grad_kernel::~fused_inner_product_grad_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;

  *this = &off_1E2D9B6A8;
  BNNSFilterDestroy(this[52]);
  v2 = this[142];
  if (v2)
  {
    this[143] = v2;
    operator delete(v2);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::fused_inner_product_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  const void *v34;
  __n128 v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  void *bnns;
  unsigned __int8 *v40;
  _QWORD *v41;
  int v42;
  void *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  void *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  size_t v58;
  const void *v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  BNNSNDArrayDescriptor *weights_delta;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  void *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  BNNSNDArrayDescriptor *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unsigned __int8 *v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  void *v93;
  void *v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v7 = *a4;
  v8 = a4[1];
  v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v8, 0);
  if (v9)
  {
    v10 = (std::__shared_weak_count *)v9[21];
    v102 = v9[20];
    v103 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v7 = *a4;
      v8 = a4[1];
    }
  }
  else
  {
    v102 = 0;
    v103 = 0;
  }
  v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v7, v8, 1);
  v14 = *((_QWORD *)v13 + 20);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v13 + 21);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = *(const void **)(v14 + 24);
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    v18 = *(const void **)(v14 + 24);
  }
  v21 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 2);
  v22 = *((_QWORD *)v21 + 20);
  v23 = (std::__shared_weak_count *)*((_QWORD *)v21 + 21);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v26 = *(void **)(v22 + 24);
    v27 = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  else
  {
    v26 = *(void **)(v22 + 24);
  }
  v29 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 3);
  if (v29)
  {
    v30 = v29[20];
    v31 = (std::__shared_weak_count *)v29[21];
    v100 = v30;
    v101 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    if (v30)
      v34 = *(const void **)(v30 + 24);
    else
      v34 = 0;
  }
  else
  {
    v34 = 0;
    v100 = 0;
    v101 = 0;
  }
  Espresso::abstract_blob_container::shape((char *)&v91, *(_QWORD *)*a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v95, (const Espresso::layer_shape *)&v91, 0);
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (*(_BYTE *)(a1 + 320) || v99 <= 3)
  {
    switch(v99)
    {
      case 1u:
        v36 = 1;
        break;
      case 2u:
        goto LABEL_41;
      case 3u:
        goto LABEL_40;
      case 4u:
        v36 = v96 * (uint64_t)v95 * v97;
        break;
      case 5u:
        v36 = v96 * (uint64_t)v95 * v97 * v98;
        break;
      default:
        goto LABEL_42;
    }
  }
  else if (v99 == 5)
  {
LABEL_40:
    v36 = v96 * (uint64_t)v95;
  }
  else if (v99 == 4)
  {
LABEL_41:
    v36 = v95;
  }
  else
  {
LABEL_42:
    v36 = 0;
  }
  v37 = *(void **)(a1 + 416);
  if (v37)
  {
    if (v26 == *(void **)(a1 + 424))
      goto LABEL_52;
    BNNSFilterDestroy(v37);
    *(_QWORD *)(a1 + 416) = 0;
  }
  *(_QWORD *)(a1 + 424) = v26;
  if (*(_BYTE *)(a1 + 414))
  {
    MEMORY[0x1E0C80A78](v35);
    *(_DWORD *)(a1 + 408) = 0;
    bnns = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(*(unsigned int *)(a1 + 284), *(unsigned int *)(a1 + 280), *(_DWORD *)(a1 + 396), 0, v26, (char *)&v88 - ((v38 + 15) & 0x7FFFFFFF0), BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, 0);
  }
  else
  {
    *(_DWORD *)(a1 + 408) = 0;
    bnns = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(*(unsigned int *)(a1 + 284), *(unsigned int *)(a1 + 280), *(_DWORD *)(a1 + 396), 0, v26, 0, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, 0);
  }
  *(_QWORD *)(a1 + 416) = bnns;
  if (!bnns)
    Espresso::throw_exception_selector<Espresso::generic_error>("BNNS Error");
LABEL_52:
  v40 = (unsigned __int8 *)(a1 + 280);
  v41 = (_QWORD *)(a1 + 596);
  if (*(_BYTE *)(a1 + 412))
  {
    v42 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>((unsigned __int8 *)(a1 + 280), 0, *(unsigned __int8 *)(a1 + 412));
    v43 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v42);
    v44 = *((_QWORD *)v43 + 20);
    v45 = (std::__shared_weak_count *)*((_QWORD *)v43 + 21);
    v91 = v44;
    v92 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = *(unsigned int *)(a1 + 284);
    v49 = *(_QWORD *)(v44 + 24);
    *(_OWORD *)(a1 + 560) = 0u;
    *(_OWORD *)(a1 + 576) = 0u;
    *(_OWORD *)(a1 + 592) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    *(_OWORD *)(a1 + 528) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
    *(_DWORD *)(a1 + 436) = 0x10000;
    *(_QWORD *)(a1 + 440) = v48;
    *(_QWORD *)(a1 + 568) = v49;
    *(_DWORD *)(a1 + 576) = 65568;
    *v41 = 1065353216;
    if (v45)
    {
      v50 = (unint64_t *)&v45->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  if (*(_BYTE *)(a1 + 413))
  {
    v52 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>((unsigned __int8 *)(a1 + 280), 1, *(unsigned __int8 *)(a1 + 413));
    v90 = (_QWORD *)(a1 + 596);
    v53 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v52);
    v54 = *((_QWORD *)v53 + 20);
    v55 = (std::__shared_weak_count *)*((_QWORD *)v53 + 21);
    v91 = v54;
    v92 = v55;
    v88 = (unsigned __int8 *)(a1 + 280);
    v89 = a3;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    v58 = v36;
    v59 = v34;
    v60 = v18;
    v61 = *(_QWORD *)(v54 + 24);
    v62 = *(unsigned int *)(a1 + 284);
    v63 = *(unsigned int *)(a1 + 280);
    v64 = operator new(0x10uLL);
    weights_delta = (BNNSNDArrayDescriptor *)(a1 + 608);
    *v64 = v62;
    v64[1] = v63;
    *(_OWORD *)(a1 + 752) = 0u;
    *(_OWORD *)(a1 + 768) = 0u;
    *(_OWORD *)(a1 + 720) = 0u;
    *(_OWORD *)(a1 + 736) = 0u;
    *(_OWORD *)(a1 + 688) = 0u;
    *(_OWORD *)(a1 + 704) = 0u;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 624) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
    *(_OWORD *)(a1 + 608) = 0u;
    *(_DWORD *)(a1 + 612) = 0x20000;
    *(_OWORD *)(a1 + 616) = *(_OWORD *)v64;
    *(_QWORD *)(a1 + 744) = v61;
    *(_DWORD *)(a1 + 752) = 65568;
    v90[22] = 1065353216;
    operator delete(v64);
    v18 = v60;
    v34 = v59;
    v36 = v58;
    v40 = v88;
    a3 = v89;
    if (v55)
    {
      v66 = (unint64_t *)&v55->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v41 = v90;
  }
  else
  {
    weights_delta = 0;
  }
  if (*(_BYTE *)(a1 + 414))
  {
    v68 = Espresso::fused_weighted_grad_output_idx<Espresso::fused_inner_product_grad_params_t>(v40, 2, *(unsigned __int8 *)(a1 + 414));
    v69 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v68);
    v70 = *((_QWORD *)v69 + 20);
    v71 = (std::__shared_weak_count *)*((_QWORD *)v69 + 21);
    v91 = v70;
    v92 = v71;
    if (v71)
    {
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    v74 = (BNNSNDArrayDescriptor *)(a1 + 784);
    v75 = *(unsigned int *)(a1 + 280);
    v76 = *(_QWORD *)(v70 + 24);
    *(_OWORD *)(a1 + 912) = 0u;
    *(_OWORD *)(a1 + 928) = 0u;
    *(_OWORD *)(a1 + 944) = 0u;
    *(_OWORD *)(a1 + 784) = 0u;
    *(_OWORD *)(a1 + 800) = 0u;
    *(_OWORD *)(a1 + 816) = 0u;
    *(_OWORD *)(a1 + 832) = 0u;
    *(_OWORD *)(a1 + 848) = 0u;
    *(_OWORD *)(a1 + 864) = 0u;
    *(_OWORD *)(a1 + 880) = 0u;
    *(_OWORD *)(a1 + 896) = 0u;
    *(_DWORD *)(a1 + 788) = 0x10000;
    *(_QWORD *)(a1 + 792) = v75;
    *(_QWORD *)(a1 + 920) = v76;
    *(_DWORD *)(a1 + 928) = 65568;
    v41[44] = 1065353216;
    if (v71)
    {
      v77 = (unint64_t *)&v71->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
  }
  else
  {
    v74 = 0;
  }
  v79 = *(unsigned int *)(a1 + 280);
  v80 = *(_QWORD *)(v102 + 24);
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_DWORD *)(a1 + 964) = 0x10000;
  *(_QWORD *)(a1 + 968) = v79;
  *(_QWORD *)(a1 + 1096) = v80;
  *(_DWORD *)(a1 + 1104) = 65568;
  v41[66] = 1065353216;
  v81 = BNNSFilterApplyBackwardBatch(*(void **)(a1 + 416), v36, v18, *(unsigned int *)(a1 + 284), (BNNSNDArrayDescriptor *)(a1 + 432), *(unsigned int *)(a1 + 284), v34, *(unsigned int *)(a1 + 280), (const BNNSNDArrayDescriptor *)(a1 + 960), *(unsigned int *)(a1 + 280), weights_delta, v74);
  if ((_DWORD)v81)
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Error %d", v81);
  v82 = v101;
  if (v101)
  {
    v83 = (unint64_t *)&v101->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v103;
  if (v103)
  {
    v86 = (unint64_t *)&v103->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_1916D2CB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t Espresso::fused_inner_product_grad_kernel::should_unpack()
{
  return 0;
}

void sub_1916D2DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v5;
  uint64_t v6;
  char matched;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v5 = 0;
    while (1)
    {
      v6 = *((_QWORD *)v3 + 2);
      v11[0] = &off_1E2DB0B60;
      v11[1] = v3 + 16;
      v11[2] = this;
      v12 = v11;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v6, (uint64_t)v11);
      v8 = v12;
      if (v12 == v11)
        break;
      if (v12)
      {
        v9 = 5;
LABEL_7:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v5 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v5 & 1;
    }
    v8 = v11;
    v9 = 4;
    goto LABEL_7;
  }
  v5 = 0;
  return v5 & 1;
}

void sub_1916D2ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB0B60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB0B60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  Espresso *v10;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  Espresso *v14;
  const char *v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD **constant;
  _QWORD **v24;
  int *v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  int v51;
  NSObject *v52;
  const char *v53;
  uint8_t *v54;
  NSObject *v55;
  uint32_t v56;
  Espresso::zephyr::ordered_block_t *v57;
  const char *v58;
  Espresso *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v63;
  uint64_t v64;
  _QWORD v65[2];
  _OWORD v66[2];
  uint64_t v67;
  int v68;
  _OWORD v69[2];
  int v70;
  _OWORD v71[2];
  int v72;
  uint64_t v73;
  uint8_t buf[4];
  const char *v75;
  __int16 v76;
  int v77;
  _BYTE v78[32];
  _QWORD v79[3];
  _QWORD *v80;
  _QWORD v81[3];
  _QWORD *v82;
  _QWORD v83[3];
  Espresso *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v73 = *a2;
  v3 = v73;
  v67 = 0;
  memset(v66, 0, sizeof(v66));
  v68 = 1065353216;
  memset(v69, 0, sizeof(v69));
  v70 = 1065353216;
  memset(v71, 0, sizeof(v71));
  v72 = 1065353216;
  v83[0] = &off_1E2DAD148;
  v83[1] = Espresso::zephyr::match_transpose_to_nhwc;
  v84 = (Espresso *)v83;
  v81[0] = &off_1E2DAD148;
  v81[1] = Espresso::zephyr::match_transpose_to_nchw;
  v82 = v81;
  v79[0] = &off_1E2DB3BD8;
  v80 = v79;
  v5 = Espresso::zephyr::transposed_subgraph_matcher::match((uint64_t)v66, v73, (uint64_t)v83, (uint64_t)v81, (uint64_t)v79);
  v6 = v80;
  if (v80 == v79)
  {
    v7 = 4;
    v6 = v79;
  }
  else
  {
    if (!v80)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v82;
  if (v82 == v81)
  {
    v9 = 4;
    v8 = v81;
  }
  else
  {
    if (!v82)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v84;
  if (v84 == (Espresso *)v83)
  {
    v11 = 4;
    v10 = (Espresso *)v83;
  }
  else
  {
    if (!v84)
      goto LABEL_16;
    v11 = 5;
  }
  v10 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_16:
  if ((v5 & 1) == 0)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_74;
    Espresso::espresso_os_log_subsystem(v10, v4);
    v52 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      goto LABEL_73;
    *(_DWORD *)v78 = 136315650;
    *(_QWORD *)&v78[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
    *(_WORD *)&v78[12] = 1024;
    *(_DWORD *)&v78[14] = 294;
    *(_WORD *)&v78[18] = 2080;
    *(_QWORD *)&v78[20] = "sm.match(root_node, zephyr::match_transpose_to_nhwc, zephyr::match_transpose_to_nchw, match_co"
                          "variant_kernels)";
    v53 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
    v54 = v78;
    v55 = v52;
    v56 = 28;
    goto LABEL_72;
  }
  v12 = *(_QWORD **)&v66[0];
  Espresso::espresso_os_log_subsystem(v10, v4);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v78 = 0;
    _os_log_debug_impl(&dword_190DAF000, v13, OS_LOG_TYPE_DEBUG, "\tremove_nhwc_nchw_transposes: matched graph", v78, 2u);
  }

  Espresso::espresso_os_log_subsystem(v14, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v63 = (_QWORD *)(v3 + 144);
    if (*(char *)(v3 + 167) < 0)
      v63 = (_QWORD *)*v63;
    v64 = v12[13];
    *(_DWORD *)v78 = 136315394;
    *(_QWORD *)&v78[4] = v63;
    *(_WORD *)&v78[12] = 2048;
    *(_QWORD *)&v78[14] = v64;
    _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "remove_nhwc_nchw_transposes: match subgraph at %s size=%zu", v78, 0x16u);
  }

  v17 = (_QWORD *)v12[11];
  v18 = v12 + 12;
  if (v17 != v12 + 12)
  {
    do
    {
      v19 = v17[4];
      if (!std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>((_QWORD *)v66 + 1, v19)&& !std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(v69, v19))
      {
        constant = (_QWORD **)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v19);
        v24 = constant;
        if (constant)
        {
          v25 = (int *)((uint64_t (*)(_QWORD **))(*constant)[48])(constant);
          v25[5] = 4;
          v27 = *v25;
          v26 = v25[1];
          v25[2] = *v25;
          *v25 = 1;
          v28 = v25[4];
          if (v28 <= 1)
            v28 = 1;
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(v78, 1, v26, v27, v28 * v25[3]);
          v29 = *(_QWORD *)v78;
          v30 = *(void **)(*(_QWORD *)v78 + 24);
          (*(void (**)(_QWORD *))(*v24[43] + 32))(v24[43]);
          v31 = v24[43];
          v32 = v31[20];
          v33 = (std::__shared_weak_count *)v31[21];
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldxr(p_shared_owners);
            while (__stxr(v35 + 1, p_shared_owners));
          }
          v36 = 0;
          v37 = *(const void **)(v32 + 24);
          v38 = *(int *)(v29 + 8);
          do
          {
            v38 *= *(int *)(v29 + 12 + v36);
            v36 += 4;
          }
          while (v36 != 12);
          memcpy(v30, v37, 4 * v38);
          if (v33)
          {
            v39 = (unint64_t *)&v33->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v41 = *(std::__shared_weak_count **)&v78[8];
          v65[0] = *(_QWORD *)v78;
          v65[1] = *(_QWORD *)&v78[8];
          if (*(_QWORD *)&v78[8])
          {
            v42 = (unint64_t *)(*(_QWORD *)&v78[8] + 8);
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          Espresso::generic_load_constant_kernel::set_constant_blob(v24, (uint64_t)v65);
          if (v41)
          {
            v44 = (unint64_t *)&v41->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v46 = *(std::__shared_weak_count **)&v78[8];
          if (*(_QWORD *)&v78[8])
          {
            v47 = (unint64_t *)(*(_QWORD *)&v78[8] + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
        }
        else
        {
          v49 = Espresso::zephyr::cast_kernel<Espresso::generic_general_concat_kernel>(v19);
          if (v49)
          {
            v50 = (*(uint64_t (**)(void *))(*(_QWORD *)v49 + 320))(v49);
            if (*(_BYTE *)(v50 + 4))
              v51 = 1;
            else
              v51 = 2;
            *(_DWORD *)v50 = v51;
          }
        }
      }
      v20 = (_QWORD *)v17[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v17[2];
          v22 = *v21 == (_QWORD)v17;
          v17 = v21;
        }
        while (!v22);
      }
      v17 = v21;
    }
    while (v21 != v18);
    v3 = v73;
  }
  v57 = **(Espresso::zephyr::ordered_block_t ***)(a1 + 8);
  *(_QWORD *)v78 = &off_1E2DB3C30;
  *(_QWORD *)&v78[8] = &v73;
  *(_QWORD *)&v78[24] = v78;
  Espresso::zephyr::transposed_subgraph_matcher::transform(v66, v3, v57, (uint64_t)v78);
  v59 = *(Espresso **)&v78[24];
  if (*(_BYTE **)&v78[24] == v78)
  {
    v60 = 4;
    v59 = (Espresso *)v78;
  }
  else
  {
    if (!*(_QWORD *)&v78[24])
      goto LABEL_69;
    v60 = 5;
  }
  v59 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v59 + 8 * v60))();
LABEL_69:
  if (!Espresso::zephyr::match_verbose)
    goto LABEL_74;
  Espresso::espresso_os_log_subsystem(v59, v58);
  v52 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v75 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
    v76 = 1024;
    v77 = 348;
    v53 = "ZEPHYR_MATCH_PASS %s:%d\n";
    v54 = buf;
    v55 = v52;
    v56 = 18;
LABEL_72:
    _os_log_impl(&dword_190DAF000, v55, OS_LOG_TYPE_INFO, v53, v54, v56);
  }
LABEL_73:

LABEL_74:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v71);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v69);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v66 + 8);
  v61 = *(_QWORD *)&v66[0];
  *(_QWORD *)&v66[0] = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  return v5;
}

void sub_1916D35B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v6);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 8))(a6);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes27remove_nhwc_nchw_transposesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t Espresso::zephyr::transposed_subgraph_matcher::match(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  Espresso::zephyr::graph_t *v13;
  uint64_t *v14;
  uint64_t v15;
  Espresso *v16;
  const char *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  Espresso *v26;
  const char *v27;
  NSObject *v28;
  Espresso *v29;
  const char *v30;
  _QWORD *v31;
  uint64_t v32;
  NSObject *v33;
  _QWORD *v34;
  _BYTE *v35;
  BOOL v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  NSObject *v49;
  _QWORD *v50;
  _QWORD **v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  NSObject *v58;
  unint64_t *v59;
  unint64_t *i;
  unint64_t v61;
  uint64_t v62;
  Espresso *v63;
  const char *v64;
  NSObject *v65;
  Espresso::zephyr::graph_t *v66;
  const char *v67;
  NSObject *v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  _QWORD **v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  NSObject *v76;
  NSObject *v77;
  Espresso *v78;
  const char *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t **v82;
  unint64_t **v83;
  uint64_t v84;
  unint64_t *v85;
  _QWORD *v86;
  _BYTE *v87;
  NSObject *v88;
  Espresso *v89;
  const char *v90;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD **v98;
  _QWORD *v99;
  uint64_t v100;
  _BYTE v101[12];
  __int16 v102;
  _QWORD *v103;
  _BYTE v104[24];
  _BYTE *v105;
  _BYTE v106[24];
  _BYTE *v107;
  _BYTE buf[28];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v9 = (_QWORD *)operator new();
  v95 = a2;
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(unint64_t **)(v10 + 24);
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v11;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *v9 = &off_1E2DA4188;
  v9[1] = v12;
  v9[6] = 0;
  v9[4] = v10;
  v9[5] = v9 + 6;
  v9[9] = 0;
  v9[7] = 0;
  v9[8] = v9 + 9;
  v9[13] = 0;
  v9[12] = 0;
  v9[10] = 0;
  v9[11] = v9 + 12;
  v13 = *(Espresso::zephyr::graph_t **)a1;
  *(_QWORD *)a1 = v9;
  if (v13)
    (*(void (**)(Espresso::zephyr::graph_t *))(*(_QWORD *)v13 + 8))(v13);
  v96 = (_QWORD *)(a1 + 8);
  std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__assign_unique<Espresso::zephyr::node_t * const*>(a1 + 8, 0, 0);
  *(_QWORD *)buf = a2;
  v14 = (uint64_t *)(a1 + 48);
  std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__assign_unique<Espresso::zephyr::node_t * const*>(a1 + 48, (unint64_t *)buf, (unint64_t *)&buf[8]);
  *(_QWORD *)buf = a2;
  v15 = *(_QWORD *)(a4 + 24);
  if (!v15)
    std::__throw_bad_function_call[abi:ne180100]();
  v16 = (Espresso *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 48))(v15, buf);
  if ((v16 & 1) == 0)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_trans"
                             "posed_subgraphs.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 32;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "match_proj_out(root_node)";
        _os_log_impl(&dword_190DAF000, v21, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    return 0;
  }
  v18 = operator new(0x30uLL);
  *v18 = &off_1E2DB32E8;
  v18[1] = a1;
  v18[2] = a2;
  v18[3] = a4;
  v18[4] = a3;
  v18[5] = a5;
  v107 = v18;
  v105 = 0;
  Espresso::zephyr::node_def_dfs(a2, (uint64_t)v106, (uint64_t)v104);
  v19 = v105;
  if (v105 == v104)
  {
    v20 = 4;
    v19 = v104;
  }
  else
  {
    if (!v105)
      goto LABEL_17;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_17:
  v23 = v107;
  if (v107 == v106)
  {
    v24 = 4;
    v23 = v106;
    goto LABEL_21;
  }
  if (v107)
  {
    v24 = 5;
LABEL_21:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = 0;
  v94 = (_QWORD *)(a2 + 144);
  *(_QWORD *)buf = &buf[8];
  v99 = 0;
  v100 = 0;
  v98 = &v99;
  do
  {
    v25 = Espresso::zephyr::graph_t::live_inputs(*(Espresso::zephyr::graph_t **)a1);
    if (buf != v25)
      std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__assign_multi<std::__tree_const_iterator<Espresso::zephyr::value_t *,std::__tree_node<Espresso::zephyr::value_t *,void *> *,long>>((uint64_t)buf, *(_QWORD **)v25, (_QWORD *)v25 + 1);
    v26 = (Espresso *)Espresso::zephyr::graph_t::live_outputs(*(Espresso::zephyr::graph_t **)a1);
    if (&v98 != (_QWORD ***)v26)
      std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__assign_multi<std::__tree_const_iterator<Espresso::zephyr::value_t *,std::__tree_node<Espresso::zephyr::value_t *,void *> *,long>>((uint64_t)&v98, *(_QWORD **)v26, (_QWORD *)v26 + 1);
    if (!*(_QWORD *)&buf[16] || !v100 || !*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 72))
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_135;
      Espresso::espresso_os_log_subsystem(v26, v27);
      v76 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v101 = 136315394;
        *(_QWORD *)&v101[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_tran"
                              "sposed_subgraphs.mm";
        v102 = 1024;
        LODWORD(v103) = 65;
        goto LABEL_132;
      }
LABEL_133:
      v22 = 0;
      goto LABEL_134;
    }
    Espresso::espresso_os_log_subsystem(v26, v27);
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      v74 = v94;
      if (*(char *)(v95 + 167) < 0)
        v74 = (_QWORD *)*v94;
      v75 = *(_QWORD **)(*(_QWORD *)a1 + 104);
      *(_DWORD *)v101 = 136315394;
      *(_QWORD *)&v101[4] = v74;
      v102 = 2048;
      v103 = v75;
      _os_log_debug_impl(&dword_190DAF000, v28, OS_LOG_TYPE_DEBUG, "match_transposed_subspace_subgraph: begin subgraph at %s size=%zu", v101, 0x16u);
    }

    v31 = *(_QWORD **)buf;
    if (*(_BYTE **)buf != &buf[8])
    {
      do
      {
        v32 = v31[4];
        Espresso::espresso_os_log_subsystem(v29, v30);
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          v37 = (_QWORD *)(v32 + 32);
          if (*(char *)(v32 + 55) < 0)
            v37 = (_QWORD *)*v37;
          v38 = *(_QWORD *)(v32 + 80);
          v39 = (_QWORD *)(v38 + 144);
          if (*(char *)(v38 + 167) < 0)
            v39 = (_QWORD *)*v39;
          *(_DWORD *)v101 = 136315394;
          *(_QWORD *)&v101[4] = v37;
          v102 = 2080;
          v103 = v39;
          _os_log_debug_impl(&dword_190DAF000, v33, OS_LOG_TYPE_DEBUG, "\tmatch_transposed_subspace_subgraph: in_var=%s def_node=%s", v101, 0x16u);
        }

        v34 = (_QWORD *)v31[1];
        if (v34)
        {
          do
          {
            v35 = v34;
            v34 = (_QWORD *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            v35 = (_BYTE *)v31[2];
            v36 = *(_QWORD *)v35 == (_QWORD)v31;
            v31 = v35;
          }
          while (!v36);
        }
        v31 = v35;
      }
      while (v35 != &buf[8]);
    }
    v40 = *(_QWORD **)(*(_QWORD *)a1 + 88);
    v41 = *(_QWORD *)a1 + 96;
    if (v40 != (_QWORD *)v41)
    {
      do
      {
        v42 = v40[4];
        Espresso::espresso_os_log_subsystem(v29, v30);
        v43 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        {
          v46 = (_QWORD *)(v42 + 144);
          if (*(char *)(v42 + 167) < 0)
            v46 = (_QWORD *)*v46;
          *(_DWORD *)v101 = 136315138;
          *(_QWORD *)&v101[4] = v46;
          _os_log_debug_impl(&dword_190DAF000, v43, OS_LOG_TYPE_DEBUG, "\tmatch_transposed_subspace_subgraph: node=%s", v101, 0xCu);
        }

        v44 = (_QWORD *)v40[1];
        if (v44)
        {
          do
          {
            v45 = v44;
            v44 = (_QWORD *)*v44;
          }
          while (v44);
        }
        else
        {
          do
          {
            v45 = (_QWORD *)v40[2];
            v36 = *v45 == (_QWORD)v40;
            v40 = v45;
          }
          while (!v36);
        }
        v40 = v45;
      }
      while (v45 != (_QWORD *)v41);
    }
    v47 = v98;
    if (v98 == &v99)
      break;
    do
    {
      v48 = v47[4];
      Espresso::espresso_os_log_subsystem(v29, v30);
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        v52 = *(_QWORD *)(v48 + 80);
        v53 = (_QWORD *)(v52 + 144);
        if (*(char *)(v52 + 167) < 0)
          v53 = (_QWORD *)*v53;
        *(_DWORD *)v101 = 136315138;
        *(_QWORD *)&v101[4] = v53;
        _os_log_debug_impl(&dword_190DAF000, v49, OS_LOG_TYPE_DEBUG, "\tmatch_transposed_subspace_subgraph: out_def: %s", v101, 0xCu);
      }

      v50 = (_QWORD *)v47[1];
      if (v50)
      {
        do
        {
          v51 = (_QWORD **)v50;
          v50 = (_QWORD *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          v51 = (_QWORD **)v47[2];
          v36 = *v51 == v47;
          v47 = v51;
        }
        while (!v36);
      }
      v47 = v51;
    }
    while (v51 != &v99);
    v54 = v98;
    if (v98 == &v99)
      break;
    v55 = 0;
    do
    {
      v56 = v54[4];
      v57 = *(_QWORD *)(v56 + 80);
      v29 = (Espresso *)std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(v14, v57);
      if (!v29)
      {
        Espresso::espresso_os_log_subsystem(0, v30);
        v58 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
        {
          v73 = (_QWORD *)(v56 + 32);
          if (*(char *)(v56 + 55) < 0)
            v73 = (_QWORD *)*v73;
          *(_DWORD *)v101 = 136315138;
          *(_QWORD *)&v101[4] = v73;
          _os_log_debug_impl(&dword_190DAF000, v58, OS_LOG_TYPE_DEBUG, "\tmatch_transposed_subspace_subgraph: output_not_in_frontier=%s", v101, 0xCu);
        }

        v59 = *(unint64_t **)(v56 + 56);
        for (i = *(unint64_t **)(v56 + 64); v59 != i; v59 += 2)
        {
          v61 = *v59;
          *(_QWORD *)v101 = *v59;
          v62 = *(_QWORD *)(a4 + 24);
          if (!v62)
            std::__throw_bad_function_call[abi:ne180100]();
          v63 = (Espresso *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 48))(v62, v101);
          if ((_DWORD)v63)
          {
            Espresso::espresso_os_log_subsystem(v63, v64);
            v65 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
            {
              v69 = (_QWORD *)(v61 + 144);
              if (*(char *)(v61 + 167) < 0)
                v69 = (_QWORD *)*v69;
              *(_DWORD *)v101 = 136315138;
              *(_QWORD *)&v101[4] = v69;
              _os_log_debug_impl(&dword_190DAF000, v65, OS_LOG_TYPE_DEBUG, "\tmatch_transposed_subspace_subgraph: insert_transpose_out_node=%s", v101, 0xCu);
            }

            v66 = *(Espresso::zephyr::graph_t **)a1;
            if (!std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*(_QWORD *)(*(_QWORD *)a1 + 96), (unint64_t *)v61)|| !std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(v14, v61))
            {
              (*(void (**)(Espresso::zephyr::graph_t *, unint64_t))(*(_QWORD *)v66 + 16))(v66, v61);
              std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)v14, v61, v61);
              v55 = 1;
            }
          }
          else if (!std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(v96, v57))
          {
            Espresso::espresso_os_log_subsystem(0, v67);
            v68 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
            {
              v70 = v56 + 32;
              if (*(char *)(v56 + 55) < 0)
                v70 = *(_QWORD *)(v56 + 32);
              *(_DWORD *)v101 = 136315138;
              *(_QWORD *)&v101[4] = v70;
              _os_log_debug_impl(&dword_190DAF000, v68, OS_LOG_TYPE_DEBUG, "\tmatch_transposed_subspace_subgraph: leaked=%s", v101, 0xCu);
            }

            std::__hash_table<Espresso::zephyr::value_t *,std::hash<Espresso::zephyr::value_t *>,std::equal_to<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>((float *)(a1 + 88), v56, v56);
          }
        }
        std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__erase_unique<Espresso::zephyr::node_t *>(v14, v57);
      }
      v71 = (_QWORD *)v54[1];
      if (v71)
      {
        do
        {
          v72 = (_QWORD **)v71;
          v71 = (_QWORD *)*v71;
        }
        while (v71);
      }
      else
      {
        do
        {
          v72 = (_QWORD **)v54[2];
          v36 = *v72 == v54;
          v54 = v72;
        }
        while (!v36);
      }
      v54 = v72;
    }
    while (v72 != &v99);
  }
  while ((v55 & 1) != 0);
  Espresso::espresso_os_log_subsystem(v29, v30);
  v77 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v101 = 67109120;
    *(_DWORD *)&v101[4] = 130;
    _os_log_debug_impl(&dword_190DAF000, v77, OS_LOG_TYPE_DEBUG, "\tremove_nhwc_nchw_transposes: l%d", v101, 8u);
  }

  v80 = *(_QWORD **)buf;
  if (*(_BYTE **)buf == &buf[8])
  {
LABEL_125:
    if (!Espresso::zephyr::match_verbose)
    {
      v22 = 1;
      goto LABEL_137;
    }
    Espresso::espresso_os_log_subsystem(v78, v79);
    v76 = objc_claimAutoreleasedReturnValue();
    v22 = 1;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v101 = 136315394;
      *(_QWORD *)&v101[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transp"
                            "osed_subgraphs.mm";
      v102 = 1024;
      LODWORD(v103) = 150;
      _os_log_impl(&dword_190DAF000, v76, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", v101, 0x12u);
    }
LABEL_134:

    goto LABEL_137;
  }
  while (1)
  {
    v81 = v80[4];
    v82 = *(unint64_t ***)(v81 + 56);
    v83 = *(unint64_t ***)(v81 + 64);
    if (v82 != v83)
      break;
LABEL_119:
    v86 = (_QWORD *)v80[1];
    if (v86)
    {
      do
      {
        v87 = v86;
        v86 = (_QWORD *)*v86;
      }
      while (v86);
    }
    else
    {
      do
      {
        v87 = (_BYTE *)v80[2];
        v36 = *(_QWORD *)v87 == (_QWORD)v80;
        v80 = v87;
      }
      while (!v36);
    }
    v80 = v87;
    if (v87 == &buf[8])
      goto LABEL_125;
  }
  v84 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  while (1)
  {
    v85 = *v82;
    v78 = (Espresso *)std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(v84, *v82);
    if (v78)
    {
      v78 = (Espresso *)std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::find<Espresso::zephyr::node_t *>(v96, (unint64_t)v85);
      if (!v78)
        break;
    }
    v82 += 2;
    if (v82 == v83)
      goto LABEL_119;
  }
  Espresso::espresso_os_log_subsystem(0, v79);
  v88 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
  {
    v92 = (_QWORD *)(v81 + 32);
    if (*(char *)(v81 + 55) < 0)
      v92 = (_QWORD *)*v92;
    v93 = v85 + 18;
    if (*((char *)v85 + 167) < 0)
      v93 = (_QWORD *)*v93;
    *(_DWORD *)v101 = 136315394;
    *(_QWORD *)&v101[4] = v92;
    v102 = 2080;
    v103 = v93;
    _os_log_debug_impl(&dword_190DAF000, v88, OS_LOG_TYPE_DEBUG, "match_transposed_subspace_subgraph: user of input %s is not a transpose but %s", v101, 0x16u);
  }

  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v89, v90);
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v101 = 136315394;
      *(_QWORD *)&v101[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transp"
                            "osed_subgraphs.mm";
      v102 = 1024;
      LODWORD(v103) = 144;
LABEL_132:
      _os_log_impl(&dword_190DAF000, v76, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", v101, 0x12u);
    }
    goto LABEL_133;
  }
LABEL_135:
  v22 = 0;
LABEL_137:
  std::__tree<int>::destroy(v99);
  std::__tree<int>::destroy(*(_QWORD **)&buf[8]);
  return v22;
}

void sub_1916D42F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char *a32)
{
  char *v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v35 = a32;
  if (a32 == v32)
  {
    v36 = 4;
    v35 = &a29;
  }
  else
  {
    if (!a32)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_6:
  v37 = *(_QWORD **)(v33 - 152);
  if (v37 == (_QWORD *)(v33 - 176))
  {
    v38 = 4;
    v37 = (_QWORD *)(v33 - 176);
  }
  else
  {
    if (!v37)
      goto LABEL_11;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_general_concat_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void Espresso::zephyr::transposed_subgraph_matcher::transform(_QWORD *a1, uint64_t a2, Espresso::zephyr::ordered_block_t *a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  Espresso::zephyr::node_t *v19;
  uint64_t *v20;
  Espresso::zephyr::value_t **v21;
  uint64_t v22;
  Espresso::zephyr::value_t *v23;
  const char *v24;
  Espresso *v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  Espresso::zephyr::node_t *v33;
  Espresso::zephyr::value_t **v34;
  Espresso::zephyr::value_t **v35;
  unint64_t *v36;
  unint64_t *v37;
  Espresso::zephyr::value_t **v38;
  Espresso *v39;
  const char *v40;
  NSObject *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  Espresso::zephyr::node_t *v48;
  uint64_t v49;
  size_t v50;
  _QWORD *v51;
  _BYTE *v52;
  const void *v53;
  Espresso *v54;
  const char *v55;
  Espresso *v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  NSObject *v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  _BYTE *v75;
  const void *v76;
  char *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  uint64_t v83;
  std::__shared_weak_count *v84;
  __int128 v85;
  _QWORD **v86;
  _QWORD *v87;
  uint64_t v88;
  _BYTE v89[24];
  _BYTE *v90;
  _BYTE v91[22];
  char v92;
  _BYTE buf[24];
  _QWORD v94[3];
  Espresso *v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(*a1 + 88);
  v7 = *a1 + 96;
  if (v6 != (_QWORD *)v7)
  {
    do
    {
      v8 = v6[4];
      v9 = *(uint64_t **)(v8 + 96);
      v10 = *(uint64_t **)(v8 + 104);
      while (v9 != v10)
      {
        v11 = *v9;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(v11 + 8) + 8, (__int128 *)buf);
        v12 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        ++v9;
      }
      v15 = (_QWORD *)v6[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v6[2];
          v17 = *v16 == (_QWORD)v6;
          v6 = v16;
        }
        while (!v17);
      }
      v6 = v16;
    }
    while (v16 != (_QWORD *)v7);
  }
  v18 = (_QWORD *)a1[3];
  if (v18)
  {
    while (1)
    {
      v19 = (Espresso::zephyr::node_t *)v18[2];
      v20 = (uint64_t *)*((_QWORD *)v19 + 12);
      if (*((uint64_t **)v19 + 13) == v20)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v21 = (Espresso::zephyr::value_t **)*((_QWORD *)v19 + 15);
      if (*((Espresso::zephyr::value_t ***)v19 + 16) == v21)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v22 = *v20;
      v23 = *v21;
      v94[0] = &off_1E2DB3398;
      v94[1] = a1;
      v95 = (Espresso *)v94;
      Espresso::zephyr::value_t::replace_uses_if (v22, v23, (uint64_t)v94);
      v25 = v95;
      if (v95 == (Espresso *)v94)
        break;
      if (v95)
      {
        v26 = 5;
LABEL_23:
        v25 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v25 + 8 * v26))();
      }
      Espresso::espresso_os_log_subsystem(v25, v24);
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        v28 = (_QWORD *)*((_QWORD *)v19 + 12);
        if (*((_QWORD **)v19 + 13) == v28)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v29 = *v28;
        v30 = (_QWORD *)(*v28 + 32);
        if (*(char *)(v29 + 55) < 0)
          v30 = (_QWORD *)*v30;
        v31 = (uint64_t)(*(_QWORD *)(v29 + 64) - *(_QWORD *)(v29 + 56)) >> 4;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v30;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v31;
        _os_log_debug_impl(&dword_190DAF000, v27, OS_LOG_TYPE_DEBUG, "ichecking %s %zu\n", buf, 0x16u);
      }

      Espresso::zephyr::node_t::remove_if_unused(v19);
      v18 = (_QWORD *)*v18;
      if (!v18)
        goto LABEL_31;
    }
    v25 = (Espresso *)v94;
    v26 = 4;
    goto LABEL_23;
  }
LABEL_31:
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)&buf[16] = 0;
  *(_QWORD *)buf = &buf[8];
  v32 = a1 + 8;
  while (1)
  {
    v32 = (_QWORD *)*v32;
    if (!v32)
      break;
    v33 = (Espresso::zephyr::node_t *)v32[2];
    v34 = (Espresso::zephyr::value_t **)*((_QWORD *)v33 + 12);
    v35 = (Espresso::zephyr::value_t **)*((_QWORD *)v33 + 13);
    if (v35 == v34)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v36 = (unint64_t *)*((_QWORD *)*v34 + 7);
    v37 = (unint64_t *)*((_QWORD *)*v34 + 8);
    if (v36 != v37)
    {
      do
      {
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)buf, *v36, *v36);
        v36 += 2;
      }
      while (v36 != v37);
      v34 = (Espresso::zephyr::value_t **)*((_QWORD *)v33 + 12);
      v35 = (Espresso::zephyr::value_t **)*((_QWORD *)v33 + 13);
    }
    if (v35 == v34
      || (v38 = (Espresso::zephyr::value_t **)*((_QWORD *)v33 + 15), *((Espresso::zephyr::value_t ***)v33 + 16) == v38))
    {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    Espresso::zephyr::value_t::replace_uses(*v34, *v38);
    Espresso::espresso_os_log_subsystem(v39, v40);
    v41 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      v42 = (_QWORD *)*((_QWORD *)v33 + 12);
      if (*((_QWORD **)v33 + 13) == v42)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v43 = *v42;
      v44 = (_QWORD *)(*v42 + 32);
      if (*(char *)(v43 + 55) < 0)
        v44 = (_QWORD *)*v44;
      v45 = (uint64_t)(*(_QWORD *)(v43 + 64) - *(_QWORD *)(v43 + 56)) >> 4;
      *(_DWORD *)v91 = 136315394;
      *(_QWORD *)&v91[4] = v44;
      *(_WORD *)&v91[12] = 2048;
      *(_QWORD *)&v91[14] = v45;
      _os_log_debug_impl(&dword_190DAF000, v41, OS_LOG_TYPE_DEBUG, "checking %s %zu\n", v91, 0x16u);
    }

    Espresso::zephyr::node_t::remove_if_unused(v33);
  }
  v46 = (_QWORD *)a1[13];
  if (v46)
  {
    while (1)
    {
      v47 = v46[2];
      v48 = *(Espresso::zephyr::node_t **)(v47 + 80);
      v49 = *(_QWORD *)(v47 + 24);
      if (*(char *)(v47 + 55) >= 0)
        v50 = *(unsigned __int8 *)(v47 + 55);
      else
        v50 = *(_QWORD *)(v47 + 40);
      std::string::basic_string[abi:ne180100]((uint64_t)v91, v50 + 4);
      v51 = (_QWORD *)(v47 + 32);
      if (v92 >= 0)
        v52 = v91;
      else
        v52 = *(_BYTE **)v91;
      if (v50)
      {
        if (*(char *)(v47 + 55) >= 0)
          v53 = (const void *)(v47 + 32);
        else
          v53 = *(const void **)(v47 + 32);
        memmove(v52, v53, v50);
      }
      strcpy(&v52[v50], "leak");
      v54 = (Espresso *)Espresso::zephyr::function_t::new_value(v49, (uint64_t)v91);
      v56 = v54;
      if (v92 < 0)
        operator delete(*(void **)v91);
      if (*(_QWORD *)(*(_QWORD *)(v47 + 8) + 8))
      {
        v57 = (char *)operator new(0x58uLL);
        *((_QWORD *)v57 + 1) = 0;
        *((_QWORD *)v57 + 2) = 0;
        *(_QWORD *)v57 = &off_1E2DB6B60;
        *((_OWORD *)v57 + 3) = 0u;
        *((_OWORD *)v57 + 4) = 0u;
        *(_OWORD *)(v57 + 24) = xmmword_191A8AA80;
        *((_QWORD *)v57 + 10) = 0;
        *((_QWORD *)v57 + 5) = 0xFFFFFFFF00000001;
        *(_QWORD *)v91 = v57 + 24;
        *(_QWORD *)&v91[8] = v57;
        v54 = (Espresso *)std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*((_QWORD *)v56 + 1) + 8, (__int128 *)v91);
        v58 = *(std::__shared_weak_count **)&v91[8];
        if (*(_QWORD *)&v91[8])
        {
          v59 = (unint64_t *)(*(_QWORD *)&v91[8] + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = *(__int128 **)(*(_QWORD *)(v47 + 8) + 8);
        v62 = *(_QWORD *)(*((_QWORD *)v56 + 1) + 8);
        v63 = *v61;
        v64 = v61[1];
        *(_QWORD *)(v62 + 32) = *((_QWORD *)v61 + 4);
        *(_OWORD *)v62 = v63;
        *(_OWORD *)(v62 + 16) = v64;
        if ((__int128 *)v62 != v61)
          v54 = (Espresso *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v62 + 40), *((char **)v61 + 5), *((_QWORD *)v61 + 6), (uint64_t)(*((_QWORD *)v61 + 6) - *((_QWORD *)v61 + 5)) >> 2);
      }
      Espresso::espresso_os_log_subsystem(v54, v55);
      v65 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(v47 + 55) < 0)
          v51 = (_QWORD *)*v51;
        *(_DWORD *)v91 = 136315138;
        *(_QWORD *)&v91[4] = v51;
        _os_log_debug_impl(&dword_190DAF000, v65, OS_LOG_TYPE_DEBUG, "leaked %s\n", v91, 0xCu);
      }

      *(_QWORD *)&v85 = a1;
      *((_QWORD *)&v85 + 1) = v47;
      std::set<Espresso::zephyr::node_t *>::set[abi:ne180100]((uint64_t)&v86, buf);
      v90 = 0;
      v66 = (char *)operator new(0x30uLL);
      *(_QWORD *)v66 = &off_1E2DB3340;
      *(_OWORD *)(v66 + 8) = v85;
      v67 = v87;
      *((_QWORD *)v66 + 3) = v86;
      *((_QWORD *)v66 + 4) = v67;
      v68 = v66 + 32;
      v69 = v88;
      *((_QWORD *)v66 + 5) = v88;
      if (v69)
      {
        v67[2] = v68;
        v86 = &v87;
        v87 = 0;
        v88 = 0;
      }
      else
      {
        *((_QWORD *)v66 + 3) = v68;
      }
      v90 = v66;
      Espresso::zephyr::value_t::replace_uses_if (v47, v56, (uint64_t)v89);
      v70 = v90;
      if (v90 == v89)
        break;
      if (v90)
      {
        v71 = 5;
LABEL_75:
        (*(void (**)(void))(*v70 + 8 * v71))();
      }
      std::__tree<int>::destroy(v87);
      v72 = *(_QWORD *)(a4 + 24);
      if (!v72)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v72 + 48))(&v83);
      v73 = *(_QWORD *)(a2 + 24);
      if (*(char *)(a2 + 167) >= 0)
        v74 = *(unsigned __int8 *)(a2 + 167);
      else
        v74 = *(_QWORD *)(a2 + 152);
      std::string::basic_string[abi:ne180100]((uint64_t)v91, v74 + 5);
      if (v92 >= 0)
        v75 = v91;
      else
        v75 = *(_BYTE **)v91;
      if (v74)
      {
        if (*(char *)(a2 + 167) >= 0)
          v76 = (const void *)(a2 + 144);
        else
          v76 = *(const void **)(a2 + 144);
        memmove(v75, v76, v74);
      }
      strcpy(&v75[v74], "_leak");
      v77 = Espresso::zephyr::function_t::new_detached_node(v73, (uint64_t)v91);
      if (v92 < 0)
        operator delete(*(void **)v91);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v77 + 1) + 8), v83, (uint64_t)v84);
      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v77, (Espresso::zephyr::value_t *)v47);
      Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v77, v56);
      Espresso::zephyr::ordered_block_t::insert_node_after(a3, (Espresso::zephyr::node_t *)v77, v48);
      v78 = v84;
      if (v84)
      {
        p_shared_owners = (unint64_t *)&v84->__shared_owners_;
        do
          v80 = __ldaxr(p_shared_owners);
        while (__stlxr(v80 - 1, p_shared_owners));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v46 = (_QWORD *)*v46;
      if (!v46)
        goto LABEL_100;
    }
    v70 = v89;
    v71 = 4;
    goto LABEL_75;
  }
LABEL_100:
  std::__tree<int>::destroy(*(_QWORD **)&buf[8]);
}

void sub_1916D4BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  std::__tree<int>::destroy(*(_QWORD **)(v36 - 168));
  _Unwind_Resume(a1);
}

uint64_t std::set<Espresso::zephyr::node_t *>::set[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(uint64_t **)(a1 + 8);
      v7 = v3;
      if (*(_QWORD **)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      v11 = v5[4];
      if (v7[4] < v11)
      {
LABEL_8:
        if (v6)
          v12 = (uint64_t **)v7;
        else
          v12 = (uint64_t **)v3;
        if (v6)
          v13 = (uint64_t **)(v7 + 1);
        else
          v13 = (uint64_t **)v3;
      }
      else
      {
        v12 = (uint64_t **)v3;
        v13 = (uint64_t **)v3;
        if (v6)
        {
          v13 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              v12 = (uint64_t **)v6;
              v17 = v6[4];
              if (v11 >= v17)
                break;
              v6 = *v12;
              v13 = v12;
              if (!*v12)
                goto LABEL_15;
            }
            if (v17 >= v11)
              break;
            v13 = v12 + 1;
            v6 = v12[1];
            if (!v6)
              goto LABEL_15;
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        v14 = (uint64_t *)operator new(0x28uLL);
        v14[4] = v5[4];
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v10 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v10);
      }
      v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_1916D4E30(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<int>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E2DB3340;
  std::__tree<int>::destroy(*(_QWORD **)(a1 + 32));
  return a1;
}

void std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E2DB3340;
  std::__tree<int>::destroy(*(_QWORD **)(a1 + 32));
  JUMPOUT(0x19401CD90);
}

char *std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DB3340;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  std::set<Espresso::zephyr::node_t *>::set[abi:ne180100]((uint64_t)(v2 + 24), (_QWORD *)(a1 + 24));
  return v2;
}

void sub_1916D4F08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E2DB3340;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return std::set<Espresso::zephyr::node_t *>::set[abi:ne180100](a2 + 24, (_QWORD *)(a1 + 24));
}

void std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::destroy(uint64_t a1)
{
  std::__tree<int>::destroy(*(_QWORD **)(a1 + 32));
}

void std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::destroy_deallocate(_QWORD **a1)
{
  std::__tree<int>::destroy(a1[4]);
  operator delete(a1);
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::operator()(uint64_t a1, unint64_t **a2)
{
  unint64_t *v3;
  _QWORD *i;
  unint64_t v6;

  v3 = *a2;
  if (std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 96), *a2))
  {
    return 0;
  }
  for (i = *(_QWORD **)(a1 + 32); i; i = (_QWORD *)*i)
  {
    v6 = i[4];
    if (v6 <= (unint64_t)v3)
    {
      if (v6 >= (unint64_t)v3)
        return 0;
      ++i;
    }
  }
  return 1;
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr27transposed_subgraph_matcher9transformEPNS0_6node_tEPNS0_15ordered_block_tENSt3__18functionIFNS6_10shared_ptrINS_11base_kernelEEEvEEEEUlNS0_5use_tEE0_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#2}>,BOOL ()(Espresso::zephyr::use_t)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3398;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3398;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::operator()(uint64_t a1, unint64_t **a2)
{
  return std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 96), *a2) != 0;
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr27transposed_subgraph_matcher9transformEPNS0_6node_tEPNS0_15ordered_block_tENSt3__18functionIFNS6_10shared_ptrINS_11base_kernelEEEvEEEEUlNS0_5use_tEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::transform(Espresso::zephyr::node_t *,Espresso::zephyr::ordered_block_t *,std::function<std::shared_ptr<Espresso::base_kernel> ()(void)>)::{lambda(Espresso::zephyr::use_t)#1}>,BOOL ()(Espresso::zephyr::use_t)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3C30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3C30;
  a2[1] = v2;
  return result;
}

double std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::operator()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;
  __int128 v5;
  int v6;

  v5 = xmmword_191A93600;
  v6 = 4;
  Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v4, *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) + 8), (uint64_t)&v5);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes27remove_nhwc_nchw_transposesERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target_type()
{
}

void std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__assign_unique<Espresso::zephyr::node_t * const*>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *j;
  unint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  _BOOL8 v24;
  size_t v25;
  unint64_t v26;
  size_t v27;
  uint8x8_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    v8 = *(_QWORD **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (!v9)
    {
      while (1)
      {
        v11 = *v4;
        v10 = (_QWORD *)*v8;
        v12 = 0x9DDFEA08EB382D69 * ((8 * *v4 + 8) ^ HIDWORD(*v4));
        v13 = 0x9DDFEA08EB382D69 * (HIDWORD(*v4) ^ (v12 >> 47) ^ v12);
        v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
        v8[1] = v14;
        v8[2] = v11;
        v15 = *(_QWORD *)(a1 + 8);
        if (v15)
        {
          v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
          v16.i16[0] = vaddlv_u8(v16);
          if (v16.u32[0] > 1uLL)
          {
            v17 = v14;
            if (v15 <= v14)
              v17 = v14 % v15;
          }
          else
          {
            v17 = (v15 - 1) & v14;
          }
          v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v17);
          if (v18)
          {
            for (j = (_QWORD *)*v18; j; j = (_QWORD *)*j)
            {
              v20 = j[1];
              if (v20 == v14)
              {
                if (j[2] == v11)
                  goto LABEL_49;
              }
              else
              {
                if (v16.u32[0] > 1uLL)
                {
                  if (v20 >= v15)
                    v20 %= v15;
                }
                else
                {
                  v20 &= v15 - 1;
                }
                if (v20 != v17)
                  break;
              }
            }
          }
        }
        v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
        v22 = *(float *)(a1 + 32);
        if (!v15 || (float)(v22 * (float)v15) < v21)
        {
          v23 = 2 * v15;
          v24 = v15 < 3 || (v15 & (v15 - 1)) != 0;
          v25 = v24 | v23;
          v26 = vcvtps_u32_f32(v21 / v22);
          if (v25 <= v26)
            v27 = v26;
          else
            v27 = v25;
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v27);
          v15 = *(_QWORD *)(a1 + 8);
          v14 = v8[1];
        }
        v28 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
        v28.i16[0] = vaddlv_u8(v28);
        if (v28.u32[0] > 1uLL)
        {
          if (v14 >= v15)
            v14 %= v15;
        }
        else
        {
          v14 &= v15 - 1;
        }
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
        if (v29)
        {
          *v8 = *v29;
        }
        else
        {
          *v8 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v8;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
          if (!*v8)
            goto LABEL_48;
          v30 = *(_QWORD *)(*v8 + 8);
          if (v28.u32[0] > 1uLL)
          {
            if (v30 >= v15)
              v30 %= v15;
          }
          else
          {
            v30 &= v15 - 1;
          }
          v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
        }
        *v29 = v8;
LABEL_48:
        ++*(_QWORD *)(a1 + 24);
LABEL_49:
        ++v4;
        if (v10)
        {
          v8 = v10;
          if (v4 != a3)
            continue;
        }
        goto LABEL_51;
      }
    }
    v10 = v8;
LABEL_51:
    if (v10)
    {
      do
      {
        v31 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v31;
      }
      while (v31);
    }
  }
  while (v4 != a3)
  {
    v32 = *v4++;
    std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>(a1, v32, v32);
  }
}

void sub_1916D54B4(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1916D54D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__assign_multi<std::__tree_const_iterator<Espresso::zephyr::value_t *,std::__tree_node<Espresso::zephyr::value_t *,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t **leaf_high;
  _QWORD *v14;
  BOOL v15;
  uint64_t *i;
  uint64_t *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t **v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    if (!v8)
    {
      v17 = 0;
LABEL_22:
      std::__tree<int>::destroy(v17);
      goto LABEL_23;
    }
    v9 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
    if (a2 != a3)
    {
      v10 = a2;
      do
      {
        v11 = v8;
        v8 = v9;
        v12 = (_QWORD *)v10[4];
        v11[4] = (uint64_t)v12;
        leaf_high = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_leaf_high(a1, &v23, v12);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, v23, leaf_high, v11);
        if (v9)
          v9 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
        v14 = (_QWORD *)v10[1];
        if (v14)
        {
          do
          {
            a2 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            a2 = (_QWORD *)v10[2];
            v15 = *a2 == (_QWORD)v10;
            v10 = a2;
          }
          while (!v15);
        }
        if (!v8)
          break;
        v10 = a2;
      }
      while (a2 != a3);
    }
    std::__tree<int>::destroy(v8);
    if (v9)
    {
      for (i = (uint64_t *)v9[2]; i; i = (uint64_t *)i[2])
        v9 = i;
      v17 = v9;
      goto LABEL_22;
    }
  }
LABEL_23:
  if (a2 != a3)
  {
    do
    {
      v18 = (uint64_t *)operator new(0x28uLL);
      v19 = (_QWORD *)a2[4];
      v18[4] = (uint64_t)v19;
      v20 = (uint64_t **)std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_leaf_high(a1, &v23, v19);
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, v23, v20, v18);
      v21 = (_QWORD *)a2[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)a2[2];
          v15 = *v22 == (_QWORD)a2;
          a2 = v22;
        }
        while (!v15);
      }
      a2 = v22;
    }
    while (v22 != a3);
  }
}

void std::__hash_table<Espresso::zephyr::value_t *,std::hash<Espresso::zephyr::value_t *>,std::equal_to<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__emplace_unique_key_args<Espresso::zephyr::value_t *,Espresso::zephyr::value_t * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v8;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_55:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v14 = *v33;
LABEL_72:
    *v33 = v14;
    goto LABEL_73;
  }
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    v34 = *(_QWORD *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void sub_1916D5A90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<Espresso::zephyr::value_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::value_t *>,std::allocator<Espresso::zephyr::value_t *>>::__find_leaf_high(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v5 = *(_QWORD **)(a1 + 8);
  v3 = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        v3 = v4;
        v6 = a3 ? *a3 : 0;
        v7 = (_QWORD *)v4[4];
        if (v7)
          v7 = (_QWORD *)*v7;
        if (v6 >= (unint64_t)v7)
          break;
        v4 = (_QWORD *)*v3;
        v8 = v3;
        if (!*v3)
          goto LABEL_13;
      }
      v4 = (_QWORD *)v3[1];
    }
    while (v4);
    v8 = v3 + 1;
  }
  else
  {
    v8 = v3;
  }
LABEL_13:
  *a2 = v3;
  return v8;
}

void std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E2DB32E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E2DB32E8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(_QWORD *a1, unint64_t *a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  v3 = *a2;
  v4 = (_QWORD *)a1[1];
  v5 = a1[4];
  v13 = *a2;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_13;
  if (!(*(unsigned int (**)(uint64_t, unint64_t *))(*(_QWORD *)v6 + 48))(v6, &v13) || a1[2] == v3)
  {
    v8 = a1[3];
    v13 = v3;
    v9 = *(_QWORD *)(v8 + 24);
    if (v9)
    {
      if (((*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v9 + 48))(v9, &v13) & 1) != 0)
      {
LABEL_9:
        v7 = 1;
        goto LABEL_10;
      }
      v10 = a1[5];
      v13 = v3;
      v11 = *(_QWORD *)(v10 + 24);
      if (v11)
      {
        if (!(*(unsigned int (**)(uint64_t, unint64_t *))(*(_QWORD *)v11 + 48))(v11, &v13))
          return 0;
        goto LABEL_9;
      }
    }
LABEL_13:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  std::__hash_table<Espresso::zephyr::node_t *,std::hash<Espresso::zephyr::node_t *>,std::equal_to<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__emplace_unique_key_args<Espresso::zephyr::node_t *,Espresso::zephyr::node_t * const&>((uint64_t)(v4 + 1), v3, v3);
  v7 = 0;
LABEL_10:
  (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v4 + 16))(*v4, v3);
  return v7;
}

uint64_t std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr27transposed_subgraph_matcher5matchEPNS0_6node_tENSt3__18functionIFbS3_EEES7_S7_EUlS3_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr::transposed_subgraph_matcher::match(Espresso::zephyr::node_t *,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *)>)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB3BD8;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB3BD8;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *constant;
  Espresso *v6;
  const char *v7;
  NSObject *v8;
  Espresso *v9;
  const char *v10;
  uint64_t v11;
  Espresso::zephyr::value_t **v12;
  Espresso *v13;
  Espresso *v14;
  const char *v15;
  int v16;
  Espresso *v17;
  const char *v18;
  NSObject *v19;
  Espresso *v20;
  const char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(*a2)
    || Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v2))
  {
    return 1;
  }
  constant = Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v2);
  if (constant)
  {
    v6 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)constant + 384))(constant);
    if (*((_DWORD *)v6 + 5) == 1)
      return 1;
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
        v30 = 1024;
        v31 = 261;
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", buf, 0x12u);
      }
LABEL_28:

      return 0;
    }
    return 0;
  }
  v9 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_general_concat_kernel>(v2);
  if (!v9)
  {
    Espresso::espresso_os_log_subsystem(0, v10);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v25 = (const char *)(v2 + 144);
      if (*(char *)(v2 + 167) < 0)
        v25 = *(const char **)v25;
      *(_DWORD *)buf = 136315138;
      v29 = v25;
      _os_log_debug_impl(&dword_190DAF000, v8, OS_LOG_TYPE_DEBUG, "remove_nhwc_nchw_transposes: non-covariant node %s", buf, 0xCu);
    }
    goto LABEL_28;
  }
  v11 = *(_QWORD *)(v2 + 96);
  if (*(_QWORD *)(v2 + 104) == v11)
    goto LABEL_54;
  if (!*(_QWORD *)(*(_QWORD *)v11 + 8))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v9, v10);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
        v30 = 1024;
        v31 = 268;
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", buf, 0x12u);
      }
      goto LABEL_28;
    }
    return 0;
  }
  v12 = *(Espresso::zephyr::value_t ***)(v2 + 120);
  if (*(Espresso::zephyr::value_t ***)(v2 + 128) == v12)
LABEL_54:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v13 = v9;
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v26, *v12);
  if (!v26)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_45;
    Espresso::espresso_os_log_subsystem(v14, v15);
    v19 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      goto LABEL_44;
    *(_DWORD *)buf = 136315394;
    v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
    v30 = 1024;
    v31 = 271;
LABEL_43:
    _os_log_impl(&dword_190DAF000, v19, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d\n", buf, 0x12u);
    goto LABEL_44;
  }
  v16 = *(_DWORD *)(v26 + 20);
  if (v16 != 4 && (v16 != -1 || *(_DWORD *)(v26 + 16) != 1))
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_45;
    Espresso::espresso_os_log_subsystem(v14, v15);
    v19 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      goto LABEL_44;
    *(_DWORD *)buf = 136315394;
    v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
    v30 = 1024;
    v31 = 273;
    goto LABEL_43;
  }
  if (*(_BYTE *)((*(uint64_t (**)(Espresso *))(*(_QWORD *)v13 + 320))(v13) + 4))
  {
    v17 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v13 + 320))(v13);
    if (*(_DWORD *)v17 != 3)
    {
      if (!Espresso::zephyr::match_verbose)
        goto LABEL_45;
      Espresso::espresso_os_log_subsystem(v17, v18);
      v19 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        goto LABEL_44;
      *(_DWORD *)buf = 136315394;
      v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
      v30 = 1024;
      v31 = 276;
      goto LABEL_43;
    }
  }
  if (!*(_BYTE *)((*(uint64_t (**)(Espresso *))(*(_QWORD *)v13 + 320))(v13) + 4))
  {
    v20 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v13 + 320))(v13);
    if (*(_DWORD *)v20)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v20, v21);
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          v29 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
          v30 = 1024;
          v31 = 279;
          goto LABEL_43;
        }
LABEL_44:

      }
LABEL_45:
      v3 = 0;
      goto LABEL_46;
    }
  }
  v3 = 1;
LABEL_46:
  v22 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v3;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes27remove_nhwc_nchw_transposesERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_nhwc_nchw_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAD148;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAD148;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), 0x8000000191AB43BFLL))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::node_t *),std::allocator<BOOL (*)(Espresso::zephyr::node_t *)>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void sub_1916D6374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v5;
  uint64_t v6;
  char matched;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v5 = 0;
    while (1)
    {
      v6 = *((_QWORD *)v3 + 2);
      v11[0] = &off_1E2DB0BB8;
      v11[1] = v3 + 16;
      v11[2] = this;
      v12 = v11;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v6, (uint64_t)v11);
      v8 = v12;
      if (v12 == v11)
        break;
      if (v12)
      {
        v9 = 5;
LABEL_7:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v5 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v5 & 1;
    }
    v8 = v11;
    v9 = 4;
    goto LABEL_7;
  }
  v5 = 0;
  return v5 & 1;
}

void sub_1916D6478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB0BB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB0BB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  Espresso *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  Espresso *v14;
  const char *v15;
  NSObject *v16;
  Espresso::zephyr::ordered_block_t *v17;
  const char *v18;
  Espresso *v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  NSObject *v24;
  uint32_t v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  int v32;
  _OWORD v33[2];
  int v34;
  _OWORD v35[2];
  int v36;
  uint64_t v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  _BYTE v42[32];
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  Espresso *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v37 = *a2;
  v3 = v37;
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  v32 = 1065353216;
  memset(v33, 0, sizeof(v33));
  v34 = 1065353216;
  memset(v35, 0, sizeof(v35));
  v36 = 1065353216;
  v47[0] = &off_1E2DAD148;
  v47[1] = Espresso::zephyr::match_transpose_to_seqw;
  v48 = (Espresso *)v47;
  v45[0] = &off_1E2DAD148;
  v45[1] = Espresso::zephyr::match_transpose_to_seqw;
  v46 = v45;
  v43[0] = &off_1E2DB3C88;
  v44 = v43;
  v5 = Espresso::zephyr::transposed_subgraph_matcher::match((uint64_t)v30, v37, (uint64_t)v47, (uint64_t)v45, (uint64_t)v43);
  v6 = v44;
  if (v44 == v43)
  {
    v7 = 4;
    v6 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v46;
  if (v46 == v45)
  {
    v9 = 4;
    v8 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v48;
  if (v48 == (Espresso *)v47)
  {
    v11 = 4;
    v10 = (Espresso *)v47;
  }
  else
  {
    if (!v48)
      goto LABEL_16;
    v11 = 5;
  }
  v10 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_16:
  if ((v5 & 1) == 0)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_33;
    Espresso::espresso_os_log_subsystem(v10, v4);
    v21 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      goto LABEL_32;
    *(_DWORD *)v42 = 136315650;
    *(_QWORD *)&v42[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
    *(_WORD *)&v42[12] = 1024;
    *(_DWORD *)&v42[14] = 387;
    *(_WORD *)&v42[18] = 2080;
    *(_QWORD *)&v42[20] = "sm.match(root_node, zephyr::match_transpose_to_seqw, zephyr::match_transpose_to_seqw, match_co"
                          "variant_kernels)";
    v22 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
    v23 = v42;
    v24 = v21;
    v25 = 28;
    goto LABEL_31;
  }
  v12 = *(_QWORD *)&v30[0];
  Espresso::espresso_os_log_subsystem(v10, v4);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v42 = 0;
    _os_log_debug_impl(&dword_190DAF000, v13, OS_LOG_TYPE_DEBUG, "\tremove_seqw_wseq_transposes: matched graph", v42, 2u);
  }

  Espresso::espresso_os_log_subsystem(v14, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v28 = (_QWORD *)(v3 + 144);
    if (*(char *)(v3 + 167) < 0)
      v28 = (_QWORD *)*v28;
    v29 = *(_QWORD *)(v12 + 104);
    *(_DWORD *)v42 = 136315394;
    *(_QWORD *)&v42[4] = v28;
    *(_WORD *)&v42[12] = 2048;
    *(_QWORD *)&v42[14] = v29;
    _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "remove_seqw_wseq_transposes: match subgraph at %s size=%zu", v42, 0x16u);
  }

  v17 = **(Espresso::zephyr::ordered_block_t ***)(a1 + 8);
  *(_QWORD *)v42 = &off_1E2DB3CE0;
  *(_QWORD *)&v42[8] = &v37;
  *(_QWORD *)&v42[24] = v42;
  Espresso::zephyr::transposed_subgraph_matcher::transform(v30, v3, v17, (uint64_t)v42);
  v19 = *(Espresso **)&v42[24];
  if (*(_BYTE **)&v42[24] == v42)
  {
    v20 = 4;
    v19 = (Espresso *)v42;
  }
  else
  {
    if (!*(_QWORD *)&v42[24])
      goto LABEL_28;
    v20 = 5;
  }
  v19 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_28:
  if (!Espresso::zephyr::match_verbose)
    goto LABEL_33;
  Espresso::espresso_os_log_subsystem(v19, v18);
  v21 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v39 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
    v40 = 1024;
    v41 = 411;
    v22 = "ZEPHYR_MATCH_PASS %s:%d\n";
    v23 = buf;
    v24 = v21;
    v25 = 18;
LABEL_31:
    _os_log_impl(&dword_190DAF000, v24, OS_LOG_TYPE_INFO, v22, v23, v25);
  }
LABEL_32:

LABEL_33:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v35);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v33);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v30 + 8);
  v26 = *(_QWORD *)&v30[0];
  *(_QWORD *)&v30[0] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  return v5;
}

void sub_1916D6908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v38;
  uint64_t v39;

  v38 = a34;
  if (a34 == v36)
  {
    v39 = 4;
    v38 = &a31;
  }
  else
  {
    if (!a34)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_6:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v35);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v34);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes27remove_seqw_wseq_transposesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3CE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3CE0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::operator()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;
  __int128 v5;
  int v6;

  v5 = xmmword_191A93540;
  v6 = 0;
  Espresso::zephyr::make_kernel<Espresso::generic_transpose_kernel,Espresso::zephyr::node_t,Espresso::transpose_params_t>(&v4, *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) + 8), (uint64_t)&v5);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes27remove_seqw_wseq_transposesERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB3C88;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB3C88;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  const char *v3;
  NSObject *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(*a2)
    || Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v2)
    || Espresso::zephyr::cast_kernel<Espresso::generic_batchnorm_kernel>(v2))
  {
    return 1;
  }
  Espresso::espresso_os_log_subsystem(0, v3);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(v2 + 144);
    if (*(char *)(v2 + 167) < 0)
      v6 = (_QWORD *)*v6;
    v7 = 136315138;
    v8 = v6;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "remove_seqw_wseq_transposes: non-covariant node %s", (uint8_t *)&v7, 0xCu);
  }

  return 0;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes27remove_seqw_wseq_transposesERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_seqw_wseq_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_batchnorm_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void sub_1916D6DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v5;
  uint64_t v6;
  Espresso::zephyr::function_t *v7;
  char matched;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 == (char *)this + 64)
    return 0;
  v5 = 0;
  do
  {
    v6 = *((_QWORD *)v3 + 2);
    v12[0] = &off_1E2DB0D70;
    v12[1] = v3 + 16;
    v12[2] = this;
    v13 = v12;
    matched = Espresso::zephyr::ordered_block_t::match_transform(v6, (uint64_t)v12);
    v9 = v13;
    if (v13 == v12)
    {
      v9 = v12;
      v10 = 4;
    }
    else
    {
      if (!v13)
        goto LABEL_8;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_8:
    v5 |= matched;
    v3 = (char *)*((_QWORD *)v3 + 1);
  }
  while (v3 != v2);
  if ((v5 & 1) != 0)
  {
    Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(this, v7);
    return 1;
  }
  return 0;
}

void sub_1916D6EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB0D70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB0D70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  Espresso *v10;
  uint64_t v11;
  NSObject *v12;
  Espresso::zephyr::ordered_block_t *v13;
  const char *v14;
  Espresso *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  uint32_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  int v28;
  _OWORD v29[2];
  int v30;
  _OWORD v31[2];
  int v32;
  uint64_t v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  _BYTE v38[32];
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  Espresso *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v33 = *a2;
  v3 = v33;
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v28 = 1065353216;
  memset(v29, 0, sizeof(v29));
  v30 = 1065353216;
  memset(v31, 0, sizeof(v31));
  v32 = 1065353216;
  v43[0] = &off_1E2DAD148;
  v43[1] = Espresso::zephyr::match_squeeze_4d_to_3d;
  v44 = (Espresso *)v43;
  v41[0] = &off_1E2DAD148;
  v41[1] = Espresso::zephyr::match_expanddims_3d_to_4d;
  v42 = v41;
  v39[0] = &off_1E2DB3D38;
  v40 = v39;
  v5 = Espresso::zephyr::transposed_subgraph_matcher::match((uint64_t)v26, v33, (uint64_t)v43, (uint64_t)v41, (uint64_t)v39);
  v6 = v40;
  if (v40 == v39)
  {
    v7 = 4;
    v6 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v42;
  if (v42 == v41)
  {
    v9 = 4;
    v8 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v44;
  if (v44 == (Espresso *)v43)
  {
    v11 = 4;
    v10 = (Espresso *)v43;
  }
  else
  {
    if (!v44)
      goto LABEL_16;
    v11 = 5;
  }
  v10 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_16:
  if ((v5 & 1) == 0)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_31;
    Espresso::espresso_os_log_subsystem(v10, v4);
    v17 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      goto LABEL_30;
    *(_DWORD *)v38 = 136315650;
    *(_QWORD *)&v38[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
    *(_WORD *)&v38[12] = 1024;
    *(_DWORD *)&v38[14] = 448;
    *(_WORD *)&v38[18] = 2080;
    *(_QWORD *)&v38[20] = "sm.match(root_node, zephyr::match_squeeze_4d_to_3d, zephyr::match_expanddims_3d_to_4d, match_c"
                          "ovariant_kernels)";
    v18 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
    v19 = v38;
    v20 = v17;
    v21 = 28;
    goto LABEL_29;
  }
  Espresso::espresso_os_log_subsystem(v10, v4);
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v24 = (_QWORD *)(v3 + 144);
    if (*(char *)(v3 + 167) < 0)
      v24 = (_QWORD *)*v24;
    v25 = *(_QWORD *)(*(_QWORD *)&v26[0] + 104);
    *(_DWORD *)v38 = 136315394;
    *(_QWORD *)&v38[4] = v24;
    *(_WORD *)&v38[12] = 2048;
    *(_QWORD *)&v38[14] = v25;
    _os_log_debug_impl(&dword_190DAF000, v12, OS_LOG_TYPE_DEBUG, "remove_squeeze_expanddims_1d_ops: match subgraph at %s size=%zu", v38, 0x16u);
  }

  v13 = **(Espresso::zephyr::ordered_block_t ***)(a1 + 8);
  *(_QWORD *)v38 = &off_1E2DB3D90;
  *(_QWORD *)&v38[8] = &v33;
  *(_QWORD *)&v38[24] = v38;
  Espresso::zephyr::transposed_subgraph_matcher::transform(v26, v3, v13, (uint64_t)v38);
  v15 = *(Espresso **)&v38[24];
  if (*(_BYTE **)&v38[24] == v38)
  {
    v16 = 4;
    v15 = (Espresso *)v38;
  }
  else
  {
    if (!*(_QWORD *)&v38[24])
      goto LABEL_26;
    v16 = 5;
  }
  v15 = (Espresso *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_26:
  if (!Espresso::zephyr::match_verbose)
    goto LABEL_31;
  Espresso::espresso_os_log_subsystem(v15, v14);
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v35 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_transposed_subgraphs.mm";
    v36 = 1024;
    v37 = 463;
    v18 = "ZEPHYR_MATCH_PASS %s:%d\n";
    v19 = buf;
    v20 = v17;
    v21 = 18;
LABEL_29:
    _os_log_impl(&dword_190DAF000, v20, OS_LOG_TYPE_INFO, v18, v19, v21);
  }
LABEL_30:

LABEL_31:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v31);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v29);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v26 + 8);
  v22 = *(_QWORD *)&v26[0];
  *(_QWORD *)&v26[0] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  return v5;
}

void sub_1916D732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char *a34)
{
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v38;
  uint64_t v39;

  v38 = a34;
  if (a34 == v36)
  {
    v39 = 4;
    v38 = &a31;
  }
  else
  {
    if (!a34)
      goto LABEL_6;
    v39 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v38 + 8 * v39))();
LABEL_6:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v35);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v34);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes32remove_squeeze_expanddims_1d_opsERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3D90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3D90;
  a2[1] = v2;
  return result;
}

double std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::operator()@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[21];
  int v14;

  memset(v13, 0, sizeof(v13));
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  v9 = 0u;
  v8 = 0u;
  v7 = 0u;
  v6 = 0u;
  v14 = 2;
  v5 = 2;
  Espresso::zephyr::make_kernel<Espresso::generic_squeeze_kernel,Espresso::zephyr::node_t,Espresso::squeeze_params_t>(&v4, *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 8) + 8), (uint64_t)&v5);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes32remove_squeeze_expanddims_1d_opsERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(void)#1}>,std::shared_ptr<Espresso::base_kernel> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB3D38;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB3D38;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  const char *v3;
  NSObject *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(*a2)
    || Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(v2))
  {
    return 1;
  }
  Espresso::espresso_os_log_subsystem(0, v3);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(v2 + 144);
    if (*(char *)(v2 + 167) < 0)
      v6 = (_QWORD *)*v6;
    v7 = 136315138;
    v8 = v6;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "remove_squeeze_expanddims_1d_ops: non-covariant node %s", (uint8_t *)&v7, 0xCu);
  }

  return 0;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes32remove_squeeze_expanddims_1d_opsERNS_6zephyr10function_tEENK3$_0clEPNS1_6node_tEEUlS6_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_squeeze_expanddims_1d_ops(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::node_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void Espresso::pass_multi_head_program_gen::~pass_multi_head_program_gen(Espresso::pass_multi_head_program_gen *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_multi_head_program_gen::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

void Espresso::pass_multi_head_program_gen::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  _QWORD *v7;
  char **v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t i;
  std::string *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void **v34;
  uint64_t v35;
  int v36;
  char *v37;
  int64_t v38;
  void **v39;
  int v40;
  void **v41;
  uint64_t v42;
  void **v43;
  void **v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  std::string::size_type v52;
  const char *v53;
  std::string::size_type size;
  std::string::size_type v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  std::string::size_type v62;
  std::string::size_type v63;
  std::string::size_type v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  std::string::size_type v70;
  unint64_t v71;
  std::string::size_type v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  NSObject *v95;
  _QWORD *v96;
  _QWORD *v97;
  std::string::size_type v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  const char *v110;
  std::string *v111;
  uint64_t v112;
  uint64_t j;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  unint64_t v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  std::string *v123;
  char *v124;
  int v125;
  int v126;
  size_t v127;
  _BYTE *v128;
  std::string *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  Espresso *v133;
  const char *v134;
  NSObject *v135;
  Espresso *v136;
  const char *v137;
  NSObject *v138;
  uint64_t v139;
  uint64_t (***v140)(_QWORD);
  int v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  void *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  _QWORD *v165;
  BOOL v166;
  NSObject *v167;
  char *v169;
  std::string *v170;
  uint64_t v171;
  BOOL v172;
  int v173;
  size_t v174;
  std::string *p_str;
  std::string *p_lpsrc;
  char *v177;
  _QWORD *v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  const std::string::value_type *v182;
  std::string::size_type v183;
  char *v184;
  int v185;
  uint64_t v186;
  int v187;
  void **v188;
  __int128 v189;
  void *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  char *v210;
  int v211;
  size_t v212;
  _BYTE *v213;
  std::string *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  int v220;
  void *v221;
  __int128 v222;
  void *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  void *v251;
  unint64_t v252;
  unsigned __int8 *v253;
  _QWORD *v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  char *v257;
  BOOL v258;
  uint64_t v259;
  int v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  Espresso::net *v266;
  std::string v267;
  _OWORD v268[2];
  int v269;
  __int128 v270;
  __int128 v271;
  int v272;
  std::string v273;
  char *v274[3];
  void *v275[5];
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  uint64_t v280;
  char *v281;
  int v282;
  std::string __str;
  std::string lpsrc;
  void **v285;
  std::__shared_weak_count *v286;
  std::string v287;
  __int128 v288;
  uint64_t v289;
  _QWORD v290[3];
  uint64_t v291;
  _BYTE __p[40];
  __int128 v293;
  __int128 v294;
  uint64_t v295;
  _BYTE buf[80];
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  uint64_t v301;
  uint64_t v302;

  v302 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE260;
  v256 = v5;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D9B4F8;
  v7 = &v5[1].__vftable;
  Espresso::net::_tag_inputs_and_outputs(a1);
  v276 = 0;
  v277 = 0;
  v278 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v276, *((_QWORD *)a1 + 83), *((_QWORD *)a1 + 84), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 84) - *((_QWORD *)a1 + 83)) >> 3));
  Espresso::net::get_producers_of_blobs(a1, (uint64_t)v275);
  v254 = v7;
  v255 = a2;
  v266 = a1;
  v262 = *((_QWORD *)a1 + 4);
  v263 = *((_QWORD *)a1 + 5);
  v264 = (v263 - v262) >> 4;
  v8 = std::vector<std::unordered_set<unsigned long>>::vector(v274, v264);
  *(_QWORD *)&v270 = 0;
  v10 = v276;
  if (v277 != v276)
  {
    v11 = 0;
    v12 = *MEMORY[0x1E0CB2B58];
    do
    {
      v13 = v10 + 24 * v11;
      Espresso::espresso_os_log_subsystem((Espresso *)v8, v9);
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v26 = v13;
        if (*(char *)(v13 + 23) < 0)
          v26 = *(_QWORD *)v13;
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v270;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v26;
        _os_log_debug_impl(&dword_190DAF000, v14, OS_LOG_TYPE_DEBUG, "pass_multi_head_program_gen ioutput=%zu name=%s", buf, 0x16u);
      }

      v15 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v275, v13);
      if (!v15)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v16 = v15[5];
      v17 = operator new(8uLL);
      *(_QWORD *)buf = v17;
      *v17 = v16;
      *(_QWORD *)&buf[8] = v17 + 1;
      *(_QWORD *)&buf[16] = v17 + 1;
      memset(__p, 0, 24);
      Espresso::net::recurse_layer_producers((uint64_t)a1, v275, v16, (uint64_t)buf, (uint64_t)__p, 0);
      v18 = *(_QWORD **)buf;
      v19 = *(_QWORD **)&buf[8];
      while (v18 != v19)
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v274[0][40 * *v18++], (unint64_t *)&v270, &v270);
      objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "persistentDomainForName:", v12);
      v21 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v21, "objectForKeyedSubscript:", CFSTR("espresso.no_mh"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "BOOLValue");

      if (v23 && *((_QWORD *)a1 + 5) != *((_QWORD *)a1 + 4))
      {
        v24 = 0;
        v25 = 0;
        do
        {
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v274[0][v24], (unint64_t *)&v270, &v270);
          ++v25;
          v24 += 40;
        }
        while (v25 < (uint64_t)(*((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4)) >> 4);
      }

      v287.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v287);
      v8 = *(char ***)buf;
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      v11 = v270 + 1;
      *(_QWORD *)&v270 = v11;
      v10 = v276;
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v277 - v276) >> 3));
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "multi_head_merge_group_prefixes");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v257 = (char *)a1 + 472;
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)a1 + 472, (uint64_t)buf, (uint64_t)__p, &v273);
  i = (v263 - v262) >> 4;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &v273;
  else
    v28 = (std::string *)v273.__r_.__value_.__r.__words[0];
  Espresso::string_split((Espresso *)__p, (char *)v28);
  v29 = *(char **)__p;
  v261 = *(char **)&__p[8];
  if (*(_QWORD *)__p != *(_QWORD *)&__p[8])
  {
    if (v264 <= 1)
      v30 = 1;
    else
      v30 = (v263 - v262) >> 4;
    v259 = v30;
    do
    {
      memset(buf, 0, 32);
      *(_DWORD *)&buf[32] = 1065353216;
      v287.__r_.__value_.__r.__words[0] = 0;
      v32 = v276;
      v31 = v277;
      if (v277 != v276)
      {
        v33 = 0;
        do
        {
          v34 = (void **)(v32 + 24 * v33);
          if (*((char *)v34 + 23) < 0)
          {
            v34 = (void **)*v34;
            v35 = *(_QWORD *)(v32 + 24 * v33 + 8);
          }
          else
          {
            v35 = *((unsigned __int8 *)v34 + 23);
          }
          v36 = v29[23];
          if (v36 >= 0)
            v37 = v29;
          else
            v37 = *(char **)v29;
          if (v36 >= 0)
            v38 = v29[23];
          else
            v38 = *((_QWORD *)v29 + 1);
          if (!v38)
            goto LABEL_52;
          if (v35 >= v38)
          {
            v265 = v31;
            v39 = (void **)((char *)v34 + v35);
            v40 = *v37;
            v41 = v34;
            while (1)
            {
              v42 = v35 - v38;
              if (v42 == -1 || (v43 = (void **)memchr(v41, v40, v42 + 1)) == 0)
              {
LABEL_49:
                v31 = v265;
                goto LABEL_53;
              }
              v44 = v43;
              if (!memcmp(v43, v37, v38))
                break;
              v41 = (void **)((char *)v44 + 1);
              v35 = (char *)v39 - ((char *)v44 + 1);
              if (v35 < v38)
                goto LABEL_49;
            }
            v31 = v265;
            if (v44 != v39 && v44 == v34)
            {
LABEL_52:
              std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)buf, (unint64_t *)&v287, &v287);
              v33 = v287.__r_.__value_.__r.__words[0];
              v32 = v276;
              v31 = v277;
            }
          }
LABEL_53:
          v287.__r_.__value_.__r.__words[0] = ++v33;
        }
        while (v33 < 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 3));
      }
      i = (v263 - v262) >> 4;
      if (v263 != v262)
      {
        v45 = 0;
        do
        {
          v46 = &v274[0][40 * v45];
          v47 = v46 + 16;
          while (1)
          {
            v47 = (_QWORD *)*v47;
            if (!v47)
              break;
            if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(buf, v47[2]))
            {
              v48 = *(_QWORD **)&buf[16];
              if (*(_QWORD *)&buf[16])
              {
                do
                {
                  v287.__r_.__value_.__r.__words[0] = v48[2];
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v46, (unint64_t *)&v287, &v287);
                  v48 = (_QWORD *)*v48;
                }
                while (v48);
              }
              break;
            }
          }
          ++v45;
        }
        while (v45 != v259);
      }
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)buf);
      v29 += 24;
    }
    while (v29 != v261);
  }
  *(_QWORD *)buf = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  memset(&v287, 0, sizeof(v287));
  memset(__p, 0, 32);
  *(_DWORD *)&__p[32] = 1065353216;
  if (v263 == v262)
  {
    v52 = 0;
    v63 = 0;
    v62 = 0;
  }
  else
  {
    v49 = 0;
    if (i <= 1)
      v50 = 1;
    else
      v50 = i;
    do
    {
      v51 = &v274[0][40 * v49];
      v52 = std::operator==[abi:ne180100]<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>((uint64_t)__p, v51);
      if ((v52 & 1) == 0)
      {
        size = v287.__r_.__value_.__l.__size_;
        if (v287.__r_.__value_.__l.__size_ >= v287.__r_.__value_.__r.__words[2])
        {
          v52 = v287.__r_.__value_.__r.__words[0];
          v56 = (uint64_t)(v287.__r_.__value_.__l.__size_ - v287.__r_.__value_.__r.__words[0]) >> 3;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v58 = v287.__r_.__value_.__r.__words[2] - v287.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v287.__r_.__value_.__r.__words[2] - v287.__r_.__value_.__r.__words[0]) >> 2 > v57)
            v57 = v58 >> 2;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v59);
            size = v287.__r_.__value_.__l.__size_;
            v52 = v287.__r_.__value_.__r.__words[0];
          }
          else
          {
            v53 = 0;
          }
          v60 = (_QWORD *)(v59 + 8 * v56);
          *v60 = v49;
          v55 = (std::string::size_type)(v60 + 1);
          while (size != v52)
          {
            v61 = *(_QWORD *)(size - 8);
            size -= 8;
            *--v60 = v61;
          }
          v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
          v287.__r_.__value_.__l.__size_ = v55;
          v287.__r_.__value_.__r.__words[2] = v59 + 8 * (_QWORD)v53;
          if (v52)
            operator delete((void *)v52);
        }
        else
        {
          *(_QWORD *)v287.__r_.__value_.__l.__size_ = v49;
          v55 = size + 8;
        }
        v287.__r_.__value_.__l.__size_ = v55;
        if (__p != v51)
        {
          *(_DWORD *)&__p[32] = *((_DWORD *)v51 + 8);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long,void *> *>>(__p, *((_QWORD **)v51 + 2));
        }
      }
      ++v49;
    }
    while (v49 != v50);
    v62 = v287.__r_.__value_.__r.__words[2];
    v63 = v287.__r_.__value_.__l.__size_;
    if (v287.__r_.__value_.__l.__size_ < v287.__r_.__value_.__r.__words[2])
    {
      *(_QWORD *)v287.__r_.__value_.__l.__size_ = i;
      v64 = v63 + 8;
      goto LABEL_106;
    }
    v52 = v287.__r_.__value_.__r.__words[0];
  }
  v65 = (uint64_t)(v63 - v52) >> 3;
  v66 = v65 + 1;
  if ((unint64_t)(v65 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v67 = v62 - v52;
  if (v67 >> 2 > v66)
    v66 = v67 >> 2;
  v166 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8;
  v68 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v166)
    v68 = v66;
  if (v68)
  {
    v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v68);
    v63 = v287.__r_.__value_.__l.__size_;
    v52 = v287.__r_.__value_.__r.__words[0];
  }
  else
  {
    v53 = 0;
  }
  v69 = (unint64_t *)(v68 + 8 * v65);
  v70 = v68 + 8 * (_QWORD)v53;
  *v69 = i;
  v64 = (std::string::size_type)(v69 + 1);
  while (v63 != v52)
  {
    v71 = *(_QWORD *)(v63 - 8);
    v63 -= 8;
    *--v69 = v71;
  }
  v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  v287.__r_.__value_.__l.__size_ = v64;
  v287.__r_.__value_.__r.__words[2] = v70;
  if (v52)
    operator delete((void *)v52);
LABEL_106:
  v287.__r_.__value_.__l.__size_ = v64;
  v270 = 0uLL;
  *(_QWORD *)&v271 = 0;
  v72 = v287.__r_.__value_.__r.__words[0];
  if (v64 - v287.__r_.__value_.__r.__words[0] != 8)
  {
    v73 = 0;
    v74 = 0;
    do
    {
      v75 = v74 + 1;
      v76 = *(_QWORD *)(v72 + 8 * (v74 + 1)) - *(_QWORD *)(v72 + 8 * v74);
      v77 = *((_QWORD *)&v270 + 1);
      if (!v74 || (v76 | v73) >= 2)
      {
        if (*((_QWORD *)&v270 + 1) >= (unint64_t)v271)
        {
          v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v270 + 1) - v270) >> 3);
          v79 = v78 + 1;
          if (v78 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v271 - v270) >> 3) > v79)
            v79 = 0x5555555555555556 * ((uint64_t)(v271 - v270) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v271 - v270) >> 3) >= 0x555555555555555)
            v80 = 0xAAAAAAAAAAAAAAALL;
          else
            v80 = v79;
          *(_QWORD *)&buf[32] = &v271;
          v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v80);
          v82 = &v81[24 * v78];
          *(_QWORD *)buf = v81;
          *(_QWORD *)&buf[8] = v82;
          *(_QWORD *)&buf[24] = &v81[24 * v83];
          *(_QWORD *)v82 = 0;
          *((_QWORD *)v82 + 1) = 0;
          *((_QWORD *)v82 + 2) = 0;
          *(_QWORD *)&buf[16] = v82 + 24;
          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v270, buf);
          v77 = *((_QWORD *)&v270 + 1);
          v52 = std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          **((_QWORD **)&v270 + 1) = 0;
          *(_QWORD *)(v77 + 8) = 0;
          *(_QWORD *)(v77 + 16) = 0;
          v77 += 24;
        }
        *((_QWORD *)&v270 + 1) = v77;
      }
      v84 = *(_QWORD **)(v77 - 16);
      v85 = *(_QWORD *)(v77 - 8);
      if ((unint64_t)v84 >= v85)
      {
        v52 = *(_QWORD *)(v77 - 24);
        v87 = (uint64_t)((uint64_t)v84 - v52) >> 3;
        if ((unint64_t)(v87 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v88 = v85 - v52;
        v89 = (uint64_t)(v85 - v52) >> 2;
        if (v89 <= v87 + 1)
          v89 = v87 + 1;
        if (v88 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v89;
        if (v90)
        {
          v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v90);
          v52 = *(_QWORD *)(v77 - 24);
          v84 = *(_QWORD **)(v77 - 16);
        }
        else
        {
          v53 = 0;
        }
        v91 = (_QWORD *)(v90 + 8 * v87);
        *v91 = v74;
        v86 = v91 + 1;
        while (v84 != (_QWORD *)v52)
        {
          v92 = *--v84;
          *--v91 = v92;
        }
        *(_QWORD *)(v77 - 24) = v91;
        *(_QWORD *)(v77 - 16) = v86;
        *(_QWORD *)(v77 - 8) = v90 + 8 * (_QWORD)v53;
        if (v52)
          operator delete((void *)v52);
      }
      else
      {
        *v84 = v74;
        v86 = v84 + 1;
      }
      *(_QWORD *)(v77 - 16) = v86;
      v72 = v287.__r_.__value_.__r.__words[0];
      v73 = v76;
      ++v74;
    }
    while (v75 < ((uint64_t)(v287.__r_.__value_.__l.__size_ - v287.__r_.__value_.__r.__words[0]) >> 3) - 1);
    v94 = (_QWORD *)*((_QWORD *)&v270 + 1);
    v93 = (_QWORD *)v270;
    for (i = (v263 - v262) >> 4; v93 != v94; v93 += 3)
    {
      if (v93[1] - *v93 >= 0x10uLL)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)v52, v53);
        v95 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
        {
          v108 = (uint64_t)(v93[1] - *v93) >> 3;
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v108;
          _os_log_debug_impl(&dword_190DAF000, v95, OS_LOG_TYPE_DEBUG, "pass_multi_head_program_gen: merge_group.size()=%zu", buf, 0xCu);
        }

        memset(buf, 0, 32);
        *(_DWORD *)&buf[32] = 1065353216;
        v96 = (_QWORD *)*v93;
        v97 = (_QWORD *)v93[1];
        if ((_QWORD *)*v93 != v97)
        {
          v98 = v287.__r_.__value_.__r.__words[0];
          do
          {
            v99 = *(_QWORD *)(v98 + 8 * *v96);
            v100 = *v96 + 1;
            while (v99 < *(_QWORD *)(v98 + 8 * v100))
            {
              v101 = *(_QWORD **)&v274[0][40 * v99 + 16];
              if (v101)
              {
                do
                {
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)buf, v101 + 2, v101 + 2);
                  v101 = (_QWORD *)*v101;
                }
                while (v101);
                v98 = v287.__r_.__value_.__r.__words[0];
              }
              ++v99;
            }
            ++v96;
          }
          while (v96 != v97);
          v102 = (_QWORD *)*v93;
          v103 = (_QWORD *)v93[1];
          while (v102 != v103)
          {
            v104 = *(_QWORD *)(v98 + 8 * *v102);
            v105 = *v102 + 1;
            if (v104 < *(_QWORD *)(v98 + 8 * v105))
            {
              v106 = 40 * v104;
              do
              {
                v107 = &v274[0][v106];
                if (&v274[0][v106] != buf)
                {
                  *((_DWORD *)v107 + 8) = *(_DWORD *)&buf[32];
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long,void *> *>>(v107, *(_QWORD **)&buf[16]);
                  v98 = v287.__r_.__value_.__r.__words[0];
                }
                ++v104;
                v106 += 40;
              }
              while (v104 < *(_QWORD *)(v98 + 8 * v105));
            }
            ++v102;
          }
        }
        v52 = std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)buf);
        i = (v263 - v262) >> 4;
      }
    }
  }
  *(_QWORD *)buf = &v270;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__p);
  if (v287.__r_.__value_.__r.__words[0])
  {
    v287.__r_.__value_.__l.__size_ = v287.__r_.__value_.__r.__words[0];
    operator delete(v287.__r_.__value_.__l.__data_);
  }
  v270 = 0u;
  v271 = 0u;
  v272 = 1065353216;
  memset(v268, 0, sizeof(v268));
  v269 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(buf, "multi_head_always_compute_outputs");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v257, (uint64_t)buf, (uint64_t)__p, &v267);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v267.__r_.__value_.__l.__size_)
    {
      v111 = (std::string *)v267.__r_.__value_.__r.__words[0];
      goto LABEL_171;
    }
  }
  else if (*((_BYTE *)&v267.__r_.__value_.__s + 23))
  {
    v111 = &v267;
LABEL_171:
    Espresso::string_split((Espresso *)buf, (char *)v111);
    v112 = *(_QWORD *)buf;
    for (j = *(_QWORD *)&buf[8]; v112 != j; v112 += 24)
    {
      *(_QWORD *)__p = 0;
      v114 = v276;
      v115 = v277;
      v116 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v276, v277, (unsigned __int8 **)v112);
      if (v116 == v115)
      {
        if (*(char *)(v112 + 23) >= 0)
          v253 = (unsigned __int8 *)v112;
        else
          v253 = *(unsigned __int8 **)v112;
        v287.__r_.__value_.__r.__words[0] = (std::string::size_type)v253;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find output %s", &v287);
      }
      *(_QWORD *)__p = 0xAAAAAAAAAAAAAAABLL * ((v116 - v114) >> 3);
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v268, (unint64_t *)__p, __p);
    }
    *(_QWORD *)__p = buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v120 = i;
  do
  {
    v121 = i - 1;
    if (i - 1 >= v118)
      v121 = v118;
    v122 = &v274[0][40 * v121];
    if (v118 < v120)
    {
      v109 = std::operator==[abi:ne180100]<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>((uint64_t)&v270, &v274[0][40 * v121]);
      if ((v109 & 1) != 0)
        goto LABEL_395;
      if (&v270 != (__int128 *)v122)
      {
        v272 = *((_DWORD *)v122 + 8);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long,void *> *>>(&v270, *((_QWORD **)v122 + 2));
      }
    }
    if ((v117 & 1) != 0)
    {
      std::to_string((std::string *)buf, v118);
      v123 = std::string::insert((std::string *)buf, 0, "mh_control@");
      v287 = *v123;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      *(_DWORD *)buf = 0;
      memset(&buf[8], 0, 64);
      v124 = (char *)operator new(0xF8uLL);
      v125 = v119;
      *((_QWORD *)v124 + 1) = 0;
      *((_QWORD *)v124 + 2) = 0;
      *(_QWORD *)v124 = &off_1E2DBF0D0;
      v126 = SHIBYTE(v287.__r_.__value_.__r.__words[2]);
      if ((v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v127 = HIBYTE(v287.__r_.__value_.__r.__words[2]);
      else
        v127 = v287.__r_.__value_.__l.__size_;
      *((_QWORD *)v124 + 3) = &off_1E2DA1A38;
      *(_OWORD *)(v124 + 40) = 0u;
      *(_OWORD *)(v124 + 56) = 0u;
      *(_OWORD *)(v124 + 72) = 0u;
      *(_OWORD *)(v124 + 88) = 0u;
      *(_OWORD *)(v124 + 104) = 0u;
      *(_OWORD *)(v124 + 120) = 0u;
      *(_OWORD *)(v124 + 136) = 0u;
      *(_OWORD *)(v124 + 152) = 0u;
      *(_OWORD *)(v124 + 161) = 0u;
      *((_OWORD *)v124 + 13) = 0u;
      *((_OWORD *)v124 + 14) = 0u;
      *((_QWORD *)v124 + 30) = 0;
      *(_QWORD *)&buf[8] = v124 + 24;
      *(_QWORD *)&buf[16] = v124;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v127 + 4);
      if (__p[23] >= 0)
        v128 = __p;
      else
        v128 = *(_BYTE **)__p;
      if (v127)
      {
        if (v126 >= 0)
          v129 = &v287;
        else
          v129 = (std::string *)v287.__r_.__value_.__r.__words[0];
        memmove(v128, v129, v127);
      }
      strcpy(&v128[v127], "_end");
      v130 = *(_QWORD *)&buf[8];
      v131 = *(_QWORD *)&buf[8] + 16;
      if (*(char *)(*(_QWORD *)&buf[8] + 39) < 0)
      {
        operator delete(*(void **)v131);
        v130 = *(_QWORD *)&buf[8];
      }
      v132 = *(_QWORD *)&__p[16];
      *(_OWORD *)v131 = *(_OWORD *)__p;
      *(_QWORD *)(v131 + 16) = v132;
      v133 = (Espresso *)MEMORY[0x19401C808](v130 + 40, "cf_end");
      *(_DWORD *)buf = v125 + v118 - 1;
      Espresso::espresso_os_log_subsystem(v133, v134);
      v135 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
      {
        v243 = *(_QWORD *)(*((_QWORD *)v266 + 4) + 16 * *(int *)buf);
        v244 = (_QWORD *)(v243 + 40);
        if (*(char *)(v243 + 63) < 0)
          v244 = (_QWORD *)*v244;
        *(_DWORD *)__p = 134218242;
        *(_QWORD *)&__p[4] = v118;
        *(_WORD *)&__p[12] = 2080;
        *(_QWORD *)&__p[14] = v244;
        _os_log_debug_impl(&dword_190DAF000, v135, OS_LOG_TYPE_DEBUG, "pass_multi_head_program_gen: cf_end ilayer=%zu type=%s", __p, 0x16u);
      }

      Espresso::espresso_os_log_subsystem(v136, v137);
      v138 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v138, OS_LOG_TYPE_DEBUG))
      {
        v245 = *(_QWORD *)(*((_QWORD *)v266 + 4) + 16 * *(int *)buf);
        v246 = (_QWORD *)(v245 + 40);
        if (*(char *)(v245 + 63) < 0)
          v246 = (_QWORD *)*v246;
        *(_DWORD *)__p = 67109378;
        *(_DWORD *)&__p[4] = *(_DWORD *)buf;
        *(_WORD *)&__p[8] = 2080;
        *(_QWORD *)&__p[10] = v246;
        _os_log_debug_impl(&dword_190DAF000, v138, OS_LOG_TYPE_DEBUG, "pass_multi_head_program_gen: cf_end after_ilayer=%d type=%s", __p, 0x12u);
      }

      v139 = *(_QWORD *)(*((_QWORD *)v266 + 4) + 16 * *(int *)buf);
      *(_DWORD *)(*(_QWORD *)&buf[8] + 12) = *(_DWORD *)(v139 + 12);
      v140 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v139 + 64) + 8) + 8);
      v141 = (**v140)(v140);
      *(_DWORD *)(*(_QWORD *)&buf[8] + 8) = v141;
      Espresso::abstract_engine_factory::shared(&__str);
      v142 = __str.__r_.__value_.__r.__words[0];
      v143 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v266 + 4) + 16 * *(int *)buf) + 64);
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
      LODWORD(v279) = 0;
      Espresso::abstract_engine_factory::make_kernel_priv(v142, v143 + 8, (uint64_t)__p, (uint64_t)&v285, (int *)&v279);
      v144 = 0uLL;
      if (lpsrc.__r_.__value_.__r.__words[0])
      {
        v144 = 0uLL;
        if (v145)
        {
          *(_QWORD *)&v144 = v145;
          *((_QWORD *)&v144 + 1) = lpsrc.__r_.__value_.__l.__size_;
          if (lpsrc.__r_.__value_.__l.__size_)
          {
            v146 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
            do
              v147 = __ldxr(v146);
            while (__stxr(v147 + 1, v146));
          }
        }
      }
      v148 = *(std::__shared_weak_count **)(*(_QWORD *)&buf[8] + 72);
      *(_OWORD *)(*(_QWORD *)&buf[8] + 64) = v144;
      if (v148)
      {
        v149 = (unint64_t *)&v148->__shared_owners_;
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
      v151 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v152 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v154 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v155 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&buf[48], 0, 0, 0);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&buf[24], 0, 0, 0);
      *(_DWORD *)__p = *(_DWORD *)buf;
      *(_OWORD *)&__p[8] = *(_OWORD *)&buf[8];
      if (*(_QWORD *)&buf[16])
      {
        v157 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
        do
          v158 = __ldxr(v157);
        while (__stxr(v158 + 1, v157));
      }
      *(_QWORD *)&__p[24] = 0;
      *(_QWORD *)&__p[32] = 0;
      *(_QWORD *)&v293 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[24], *(uint64_t *)&buf[24], *(uint64_t *)&buf[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[32] - *(_QWORD *)&buf[24]) >> 3));
      *((_QWORD *)&v293 + 1) = 0;
      v294 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v293 + 1, *(uint64_t *)&buf[48], *(uint64_t *)&buf[56], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[56] - *(_QWORD *)&buf[48]) >> 3));
      memset(&lpsrc, 0, sizeof(lpsrc));
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
      __str.__r_.__value_.__s.__data_[8] = 0;
      lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      lpsrc.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__r.__words[0];
      lpsrc.__r_.__value_.__r.__words[2] = lpsrc.__r_.__value_.__r.__words[0] + 72;
      lpsrc.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&lpsrc.__r_.__value_.__r.__words[2], (uint64_t)__p, (uint64_t)&v295, (uint64_t)lpsrc.__r_.__value_.__l.__data_);
      Espresso::net::insert_layers((uint64_t)v266, (uint64_t *)&lpsrc);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v293 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      v159 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v160 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }
      *(_QWORD *)__p = &buf[48];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      *(_QWORD *)__p = &buf[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v162 = *(std::__shared_weak_count **)&buf[16];
      if (*(_QWORD *)&buf[16])
      {
        v163 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v287.__r_.__value_.__l.__data_);
      v119 = v125 + 1;
    }
    if (v118 == v264)
      goto LABEL_247;
    v165 = v122 + 16;
    do
    {
      v165 = (_QWORD *)*v165;
      if (!v165)
        break;
      v109 = (unint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v268, v165[2]);
    }
    while (!v109);
    v166 = v165 || *((_QWORD *)v122 + 3) >= 0xAAAAAAAAAAAAAAABLL * ((v277 - v276) >> 3);
    if (v166)
    {
LABEL_247:
      v117 = 0;
    }
    else
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v109, v110);
      v167 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
      {
        v247 = *(_QWORD *)&v274[0][40 * v118 + 24];
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v118;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v247;
        _os_log_debug_impl(&dword_190DAF000, v167, OS_LOG_TYPE_DEBUG, "pass_multi_head_program_gen: cf_if ilayer=%zu outputs_per_layer[ilayer].size()=%zu", buf, 0x16u);
      }

      v169 = v274[0];
      std::to_string((std::string *)buf, v118);
      v170 = std::string::insert((std::string *)buf, 0, "mh_control@");
      lpsrc = *v170;
      v170->__r_.__value_.__l.__size_ = 0;
      v170->__r_.__value_.__r.__words[2] = 0;
      v170->__r_.__value_.__r.__words[0] = 0;
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (*((_QWORD *)v266 + 157))
        v171 = (uint64_t)v266 + 1256;
      else
        v171 = (uint64_t)v266 + 16;
      v172 = (***(unsigned int (****)(_QWORD))(*(_QWORD *)v171 + 8))(*(_QWORD *)(*(_QWORD *)v171 + 8)) == 101
          || (***(unsigned int (****)(_QWORD))(*(_QWORD *)v171 + 8))(*(_QWORD *)(*(_QWORD *)v171 + 8)) != 100
          || (***(unsigned int (****)(_QWORD))(*(_QWORD *)v171 + 8))(*(_QWORD *)(*(_QWORD *)v171 + 8)) != 0;
      v258 = v172;
      v260 = v119;
      v173 = SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
      if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v174 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
      else
        v174 = lpsrc.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v174 + 8);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v174)
      {
        if (v173 >= 0)
          p_lpsrc = &lpsrc;
        else
          p_lpsrc = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
        memmove(p_str, p_lpsrc, v174);
      }
      strcpy((char *)p_str + v174, "_builtin");
      v301 = 0;
      v299 = 0u;
      v300 = 0u;
      v297 = 0u;
      v298 = 0u;
      memset(buf, 0, sizeof(buf));
      MEMORY[0x19401C808](buf, "bound_output");
      v177 = &v169[40 * v118];
      v178 = (_QWORD *)*((_QWORD *)v177 + 2);
      if (v178)
      {
        v179 = 0;
        do
        {
          v180 = v276 + 24 * v178[2];
          v181 = *(char *)(v180 + 23);
          if (v181 >= 0)
            v182 = (const std::string::value_type *)(v276 + 24 * v178[2]);
          else
            v182 = *(const std::string::value_type **)v180;
          if (v181 >= 0)
            v183 = *(unsigned __int8 *)(v180 + 23);
          else
            v183 = *(_QWORD *)(v180 + 8);
          std::string::append((std::string *)&buf[24], v182, v183);
          if (v179 < *((_QWORD *)v177 + 3) - 1)
            std::string::append((std::string *)&buf[24], ",");
          v178 = (_QWORD *)*v178;
          ++v179;
        }
        while (v178);
      }
      *(_DWORD *)__p = 0;
      memset(&__p[8], 0, 32);
      v293 = 0u;
      v294 = 0u;
      v184 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v184 + 1) = 0;
      *((_QWORD *)v184 + 2) = 0;
      *(_QWORD *)v184 = &off_1E2DBF0D0;
      *((_QWORD *)v184 + 3) = &off_1E2DA1A38;
      *(_OWORD *)(v184 + 56) = 0u;
      *(_OWORD *)(v184 + 72) = 0u;
      *(_OWORD *)(v184 + 88) = 0u;
      *(_OWORD *)(v184 + 104) = 0u;
      *(_OWORD *)(v184 + 120) = 0u;
      *(_OWORD *)(v184 + 136) = 0u;
      *(_OWORD *)(v184 + 152) = 0u;
      *(_OWORD *)(v184 + 40) = 0u;
      *(_OWORD *)(v184 + 161) = 0u;
      *((_OWORD *)v184 + 13) = 0u;
      *((_OWORD *)v184 + 14) = 0u;
      *((_QWORD *)v184 + 30) = 0;
      *(_QWORD *)&__p[8] = v184 + 24;
      *(_QWORD *)&__p[16] = v184;
      std::string::operator=((std::string *)(v184 + 40), &__str);
      MEMORY[0x19401C808](*(_QWORD *)&__p[8] + 40, "builtin");
      v185 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)v171 + 8))(*(_QWORD *)(*(_QWORD *)v171 + 8));
      v186 = *(_QWORD *)&__p[8];
      *(_DWORD *)(*(_QWORD *)&__p[8] + 8) = v185;
      if (v258)
        v187 = 0;
      else
        v187 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v266 + 4) + 16 * v118) + 12);
      *(_DWORD *)(v186 + 12) = v187;
      Espresso::abstract_engine_factory::shared(&v285);
      v188 = v285;
      std::string::basic_string[abi:ne180100]<0>(&v287, "builtin");
      v282 = 0;
      Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v188, v171, (uint64_t)&v287, (uint64_t)buf, &v282);
      v189 = 0uLL;
      if (v279)
      {
        v189 = 0uLL;
        if (v190)
        {
          *(_QWORD *)&v189 = v190;
          *((_QWORD *)&v189 + 1) = v280;
          if (v280)
          {
            v191 = (unint64_t *)(v280 + 8);
            do
              v192 = __ldxr(v191);
            while (__stxr(v192 + 1, v191));
          }
        }
      }
      v193 = *(std::__shared_weak_count **)(*(_QWORD *)&__p[8] + 72);
      *(_OWORD *)(*(_QWORD *)&__p[8] + 64) = v189;
      if (v193)
      {
        v194 = (unint64_t *)&v193->__shared_owners_;
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
      }
      v196 = (std::__shared_weak_count *)v280;
      if (v280)
      {
        v197 = (unint64_t *)(v280 + 8);
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
        }
      }
      if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v287.__r_.__value_.__l.__data_);
      v199 = v286;
      if (v286)
      {
        v200 = (unint64_t *)&v286->__shared_owners_;
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v287, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v287 = __str;
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&v293 + 8), &v287, &v288, 1uLL);
      if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v287.__r_.__value_.__l.__data_);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&__p[24], 0, 0, 0);
      *(_DWORD *)__p = v118 + v260 - 1;
      LODWORD(v287.__r_.__value_.__l.__data_) = *(_DWORD *)__p;
      *(_OWORD *)&v287.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      if (*(_QWORD *)&__p[16])
      {
        v202 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v203 = __ldxr(v202);
        while (__stxr(v203 + 1, v202));
      }
      v288 = 0uLL;
      v289 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v288, *(uint64_t *)&__p[24], *(uint64_t *)&__p[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[32] - *(_QWORD *)&__p[24]) >> 3));
      memset(v290, 0, sizeof(v290));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v290, *((uint64_t *)&v293 + 1), v294, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v294 - *((_QWORD *)&v293 + 1)) >> 3));
      v279 = 0;
      v280 = 0;
      v281 = 0;
      v285 = &v279;
      LOBYTE(v286) = 0;
      v279 = operator new(0x48uLL);
      v280 = (uint64_t)v279;
      v281 = (char *)v279 + 72;
      v280 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v281, (uint64_t)&v287, (uint64_t)&v291, (uint64_t)v279);
      Espresso::net::insert_layers((uint64_t)v266, (uint64_t *)&v279);
      v285 = &v279;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v285);
      v285 = (void **)v290;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v285);
      v285 = (void **)&v288;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v285);
      v204 = (std::__shared_weak_count *)v287.__r_.__value_.__r.__words[2];
      if (v287.__r_.__value_.__r.__words[2])
      {
        v205 = (unint64_t *)(v287.__r_.__value_.__r.__words[2] + 8);
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
        }
      }
      v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&v293 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v287);
      v287.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v287);
      v207 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v208 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v209 = __ldaxr(v208);
        while (__stlxr(v209 - 1, v208));
        if (!v209)
        {
          ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
          std::__shared_weak_count::__release_weak(v207);
        }
      }
      if (SBYTE7(v299) < 0)
        operator delete((void *)v298);
      if (SHIBYTE(v297) < 0)
        operator delete(*(void **)&buf[72]);
      if ((buf[71] & 0x80000000) != 0)
        operator delete(*(void **)&buf[48]);
      if ((buf[47] & 0x80000000) != 0)
        operator delete(*(void **)&buf[24]);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      *(_DWORD *)buf = 0;
      memset(&buf[8], 0, 64);
      v210 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v210 + 1) = 0;
      *((_QWORD *)v210 + 2) = 0;
      *(_QWORD *)v210 = &off_1E2DBF0D0;
      v211 = SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
      if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v212 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
      else
        v212 = lpsrc.__r_.__value_.__l.__size_;
      *((_QWORD *)v210 + 3) = &off_1E2DA1A38;
      *(_OWORD *)(v210 + 40) = 0u;
      *(_OWORD *)(v210 + 56) = 0u;
      *(_OWORD *)(v210 + 72) = 0u;
      *(_OWORD *)(v210 + 88) = 0u;
      *(_OWORD *)(v210 + 104) = 0u;
      *(_OWORD *)(v210 + 120) = 0u;
      *(_OWORD *)(v210 + 136) = 0u;
      *(_OWORD *)(v210 + 152) = 0u;
      *(_OWORD *)(v210 + 161) = 0u;
      *((_OWORD *)v210 + 13) = 0u;
      *((_OWORD *)v210 + 14) = 0u;
      *((_QWORD *)v210 + 30) = 0;
      *(_QWORD *)&buf[8] = v210 + 24;
      *(_QWORD *)&buf[16] = v210;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v212 + 3);
      if (__p[23] >= 0)
        v213 = __p;
      else
        v213 = *(_BYTE **)__p;
      if (v212)
      {
        if (v211 >= 0)
          v214 = &lpsrc;
        else
          v214 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
        memmove(v213, v214, v212);
      }
      *(_DWORD *)&v213[v212] = 6711647;
      v215 = *(_QWORD *)&buf[8];
      v216 = *(_QWORD *)&buf[8] + 16;
      if (*(char *)(*(_QWORD *)&buf[8] + 39) < 0)
      {
        operator delete(*(void **)v216);
        v215 = *(_QWORD *)&buf[8];
      }
      v217 = *(_QWORD *)&__p[16];
      *(_OWORD *)v216 = *(_OWORD *)__p;
      *(_QWORD *)(v216 + 16) = v217;
      MEMORY[0x19401C808](v215 + 40, "cf_if");
      v218 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)v171 + 8))(*(_QWORD *)(*(_QWORD *)v171 + 8));
      v219 = *(_QWORD *)&buf[8];
      *(_DWORD *)(*(_QWORD *)&buf[8] + 8) = v218;
      if (v258)
        v220 = 0;
      else
        v220 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v266 + 4) + 16 * v118) + 12);
      *(_DWORD *)(v219 + 12) = v220;
      Espresso::abstract_engine_factory::shared(&v279);
      v221 = v279;
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
      LODWORD(v285) = 0;
      Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v221, v171, (uint64_t)__p, (uint64_t)&v282, (int *)&v285);
      v222 = 0uLL;
      if (v287.__r_.__value_.__r.__words[0])
      {
        v222 = 0uLL;
        if (v223)
        {
          *(_QWORD *)&v222 = v223;
          *((_QWORD *)&v222 + 1) = v287.__r_.__value_.__l.__size_;
          if (v287.__r_.__value_.__l.__size_)
          {
            v224 = (unint64_t *)(v287.__r_.__value_.__l.__size_ + 8);
            do
              v225 = __ldxr(v224);
            while (__stxr(v225 + 1, v224));
          }
        }
      }
      v226 = *(std::__shared_weak_count **)(*(_QWORD *)&buf[8] + 72);
      *(_OWORD *)(*(_QWORD *)&buf[8] + 64) = v222;
      if (v226)
      {
        v227 = (unint64_t *)&v226->__shared_owners_;
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v228 - 1, v227));
        if (!v228)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
      }
      v229 = (std::__shared_weak_count *)v287.__r_.__value_.__l.__size_;
      if (v287.__r_.__value_.__l.__size_)
      {
        v230 = (unint64_t *)(v287.__r_.__value_.__l.__size_ + 8);
        do
          v231 = __ldaxr(v230);
        while (__stlxr(v231 - 1, v230));
        if (!v231)
        {
          ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
          std::__shared_weak_count::__release_weak(v229);
        }
      }
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v232 = (std::__shared_weak_count *)v280;
      if (v280)
      {
        v233 = (unint64_t *)(v280 + 8);
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
          std::__shared_weak_count::__release_weak(v232);
        }
      }
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&buf[48], 0, 0, 0);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        *(std::string *)__p = __str;
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&buf[24], (std::string *)__p, (__int128 *)&__p[24], 1uLL);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      *(_DWORD *)buf = v260 + v118;
      *(_DWORD *)__p = v260 + v118;
      *(_OWORD *)&__p[8] = *(_OWORD *)&buf[8];
      if (*(_QWORD *)&buf[16])
      {
        v235 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
        do
          v236 = __ldxr(v235);
        while (__stxr(v236 + 1, v235));
      }
      *(_QWORD *)&__p[24] = 0;
      *(_QWORD *)&__p[32] = 0;
      *(_QWORD *)&v293 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[24], *(uint64_t *)&buf[24], *(uint64_t *)&buf[32], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[32] - *(_QWORD *)&buf[24]) >> 3));
      *((_QWORD *)&v293 + 1) = 0;
      v294 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v293 + 1, *(uint64_t *)&buf[48], *(uint64_t *)&buf[56], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[56] - *(_QWORD *)&buf[48]) >> 3));
      memset(&v287, 0, sizeof(v287));
      v279 = &v287;
      LOBYTE(v280) = 0;
      v287.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      v287.__r_.__value_.__l.__size_ = v287.__r_.__value_.__r.__words[0];
      v287.__r_.__value_.__r.__words[2] = v287.__r_.__value_.__r.__words[0] + 72;
      v287.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v287.__r_.__value_.__r.__words[2], (uint64_t)__p, (uint64_t)&v295, (uint64_t)v287.__r_.__value_.__l.__data_);
      Espresso::net::insert_layers((uint64_t)v266, (uint64_t *)&v287);
      v279 = &v287;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v279);
      v279 = (char *)&v293 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v279);
      v279 = &__p[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v279);
      v237 = *(std::__shared_weak_count **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        v238 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v239 = __ldaxr(v238);
        while (__stlxr(v239 - 1, v238));
        if (!v239)
        {
          ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
          std::__shared_weak_count::__release_weak(v237);
        }
      }
      *(_QWORD *)__p = &buf[48];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      *(_QWORD *)__p = &buf[24];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v240 = *(std::__shared_weak_count **)&buf[16];
      if (*(_QWORD *)&buf[16])
      {
        v241 = (unint64_t *)(*(_QWORD *)&buf[16] + 8);
        do
          v242 = __ldaxr(v241);
        while (__stlxr(v242 - 1, v241));
        if (!v242)
        {
          ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
          std::__shared_weak_count::__release_weak(v240);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
        operator delete(lpsrc.__r_.__value_.__l.__data_);
      v119 = v260 + 2;
      v117 = 1;
    }
LABEL_395:
    ++v118;
    v120 = (v263 - v262) >> 4;
  }
  while (v118 <= v264);
  do
    v248 = __ldxr(p_shared_owners);
  while (__stxr(v248 + 1, p_shared_owners));
  *(_BYTE *)v255 = 1;
  *(_QWORD *)(v255 + 8) = v254;
  *(_QWORD *)(v255 + 16) = v256;
  do
    v249 = __ldxr(p_shared_owners);
  while (__stxr(v249 + 1, p_shared_owners));
  do
    v250 = __ldaxr(p_shared_owners);
  while (__stlxr(v250 - 1, p_shared_owners));
  if (!v250)
  {
    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
    std::__shared_weak_count::__release_weak(v256);
  }
  if (SHIBYTE(v267.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v267.__r_.__value_.__l.__data_);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v268);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&v270);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v273.__r_.__value_.__l.__data_);
  *(_QWORD *)buf = v274;
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v275[2]);
  v251 = v275[0];
  v275[0] = 0;
  if (v251)
    operator delete(v251);
  *(_QWORD *)buf = &v276;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  do
    v252 = __ldaxr(p_shared_owners);
  while (__stlxr(v252 - 1, p_shared_owners));
  if (!v252)
  {
    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
    std::__shared_weak_count::__release_weak(v256);
  }
}

void sub_1916D97B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a66;
  char a69;
  unint64_t *v69;
  void *v71;
  unint64_t v72;

  if (a43 < 0)
    operator delete(__p);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a44);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a50);
  if (a60 < 0)
    operator delete(a55);
  a50 = (uint64_t)&a61;
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)a66);
  v71 = a64;
  a64 = 0;
  if (v71)
    operator delete(v71);
  a64 = &a69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  do
    v72 = __ldaxr(v69);
  while (__stlxr(v72 - 1, v69));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
    std::__shared_weak_count::__release_weak(a19);
  }
  _Unwind_Resume(a1);
}

char **std::vector<std::unordered_set<unsigned long>>::vector(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(40 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[40 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_DWORD *)v4 + 8) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1916D9CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unordered_set<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

unint64_t std::operator==[abi:ne180100]<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t result;
  unint64_t v5;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (_QWORD *)(a1 + 16);
  while (1)
  {
    v3 = (_QWORD *)*v3;
    result = v3 == 0;
    if (!v3)
      break;
    v5 = v3[2];
    result = (unint64_t)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(a2, v5);
    if (!result)
      break;
    if (v5 != *(_QWORD *)(result + 16))
      return 0;
  }
  return result;
}

void Espresso::builtin_params_t::~builtin_params_t(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void Espresso::analysis_multi_head_program_gen::~analysis_multi_head_program_gen(Espresso::analysis_multi_head_program_gen *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::analysis_multi_head_program_gen::deserialize()
{
  return 1;
}

void Espresso::analysis_multi_head_program_gen::serialize(_QWORD *a1@<X8>)
{
  void *v3;
  void *__p[2];
  char v5;

  v3 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a1, (uint64_t)v3, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1916D9E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::~deconvolution_kernel(void **this)
{
  *this = &off_1E2D66058;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

{
  *this = &off_1E2D66058;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::share_weights(uint64_t a1, uint64_t a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  std::__shared_weak_count *v32;

  if (*(_QWORD *)a2
  {
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    v31 = v4;
    v32 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 456))(&v29);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 400))(a1, &v29);
    v8 = v30;
    if (v30)
    {
      v9 = (unint64_t *)&v30->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v31 + 448))(&v27);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 392))(a1, &v27);
    v11 = v28;
    if (v28)
    {
      v12 = (unint64_t *)&v28->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v31 + 552))(&v25);
    v23 = 0;
    v24 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 544))(a1, &v25, &v23);
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v26;
    if (v26)
    {
      v18 = (unint64_t *)&v26->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    v31 = 0;
    v32 = 0;
  }
  v20 = v32;
  if (v32)
  {
    v21 = (unint64_t *)&v32->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1916DA120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 32);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::clear_weights(Espresso::MPSGraphEngine::Kernels::deconvolution_kernel *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v11 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 560, &v11);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v11 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 576, &v11);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v11 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 592, &v11);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 59);
}

void Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  _QWORD *v11;
  double v12;
  double v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[2];
  __int128 v23[2];
  void *__p;
  void *v25;

  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  v11 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *))(*a1 + 464))(v23, a1);
  v15 = (uint64_t)(a1 + 59);
  v16 = a1[1];
  v17 = (std::__shared_weak_count *)a1[2];
  v22[0] = v16;
  v22[1] = (uint64_t)v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  Espresso::set_conv_quantized_weight_helper(v12, v13, v14, (uint64_t)v11, (unsigned __int8 **)a3, (char *)a4, a5, a6, v15, v23, v22, 1, 1);
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
}

void sub_1916DA358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::string *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  int64x2_t *v46;
  unint64_t *v47;
  unint64_t v48;
  int64x2_t *v49[2];
  int64x2_t *v50;
  std::__shared_weak_count *v51;
  int64x2_t *v52;
  std::__shared_weak_count *v53;
  int64x2_t *v54;
  std::__shared_weak_count *v55;
  int64x2_t *v56;
  std::__shared_weak_count *v57;
  std::string v58;
  std::string v59;
  std::string __p;
  _BYTE v61[24];
  _BYTE v62[32];
  std::__shared_weak_count *v63;
  int64x2_t *v64;
  std::__shared_weak_count *v65;
  void **v66;

  v4 = a3[1] - *a3;
  if (v4 != 64)
  {
    v15 = (std::__shared_weak_count *)a2[1];
    v64 = *a2;
    v65 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      v4 = a3[1] - *a3;
    }
    std::to_string(&v58, v4 >> 6);
    v18 = std::string::insert(&v58, 0, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: number of inputs must be 1, received ");
    v59 = *v18;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v59, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v64, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v19 = v63;
    if (v63)
    {
      v20 = (unint64_t *)&v63->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v66 = (void **)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v66);
    v66 = (void **)v61;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v66);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v12 = v65;
    if (!v65)
      return 0;
    v22 = (unint64_t *)&v65->__shared_owners_;
    do
      v14 = __ldaxr(v22);
    while (__stlxr(v14 - 1, v22));
LABEL_57:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return 0;
  }
  v5 = a3[4] - a3[3];
  if (v5 != 64)
  {
    v23 = (std::__shared_weak_count *)a2[1];
    v56 = *a2;
    v57 = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v5 = a3[4] - a3[3];
    }
    std::to_string(&v58, v5 >> 6);
    v26 = std::string::insert(&v58, 0, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: number of outputs must be 1, received ");
    v59 = *v26;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v59, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v56, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v27 = v63;
    if (v63)
    {
      v28 = (unint64_t *)&v63->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v66 = (void **)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v66);
    v66 = (void **)v61;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v66);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    v12 = v57;
    if (!v57)
      return 0;
    v30 = (unint64_t *)&v57->__shared_owners_;
    do
      v14 = __ldaxr(v30);
    while (__stlxr(v14 - 1, v30));
    goto LABEL_57;
  }
  if (*(_DWORD *)(a1 + 448))
  {
    v6 = (std::__shared_weak_count *)a2[1];
    v54 = *a2;
    v55 = v6;
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    std::string::basic_string[abi:ne180100]<0>(&v59, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: low_precision_accumulation");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v59, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v54, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v9 = v63;
    if (v63)
    {
      v10 = (unint64_t *)&v63->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    v12 = v55;
    if (!v55)
      return 0;
    v13 = (unint64_t *)&v55->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    goto LABEL_57;
  }
  if (*(unsigned __int16 *)(a1 + 376) >= 2u)
  {
    v39 = (std::__shared_weak_count *)a2[1];
    v52 = *a2;
    v53 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    std::string::basic_string[abi:ne180100]<0>(&v59, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: padding configuration");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v59, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v52, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v42 = v63;
    if (v63)
    {
      v43 = (unint64_t *)&v63->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    v12 = v53;
    if (!v53)
      return 0;
    v45 = (unint64_t *)&v53->__shared_owners_;
    do
      v14 = __ldaxr(v45);
    while (__stlxr(v14 - 1, v45));
    goto LABEL_57;
  }
  if (*(_DWORD *)(a1 + 364) != -1)
  {
    v32 = (std::__shared_weak_count *)a2[1];
    v50 = *a2;
    v51 = v32;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    std::string::basic_string[abi:ne180100]<0>(&v59, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: fused_activation_mode");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v59, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v35 = v63;
    if (v63)
    {
      v36 = (unint64_t *)&v63->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    v12 = v51;
    if (!v51)
      return 0;
    v38 = (unint64_t *)&v51->__shared_owners_;
    do
      v14 = __ldaxr(v38);
    while (__stlxr(v14 - 1, v38));
    goto LABEL_57;
  }
  if (*(int *)(a1 + 328) < 1 || *(int *)(a1 + 332) < 1)
    return 1;
  v46 = a2[1];
  v49[0] = *a2;
  v49[1] = v46;
  if (v46)
  {
    v47 = &v46->u64[1];
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  std::string::basic_string[abi:ne180100]<0>(&v59, "[Dispatch::MPSGraph::deconvolution_kernel] unsupported: fused_relu > 0 and fused_tanh > 0");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v59, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v49, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v49);
  return 0;
}

void sub_1916DA9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a32);
  if (a31 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 576), *a2, a2[1]);
}

_QWORD *Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), *a2, a2[1]);
}

uint64_t Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 584);
  *a2 = *(_QWORD *)(this + 576);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 568);
  *a2 = *(_QWORD *)(this + 560);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 592), *a2, a2[1]);
}

uint64_t Espresso::MPSGraphEngine::Kernels::deconvolution_kernel::get_f16_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 600);
  *a2 = *(_QWORD *)(this + 592);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::async_data_source::get_data_for_sample(Espresso::async_data_source *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  std::runtime_error *exception;
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t (*v17)(uint64_t);
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v2 = *((_QWORD *)this + 11);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Ready not called!");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v13 = 0;
  v14 = &v13;
  v15 = 0x5812000000;
  v16 = __Block_byref_object_copy__10991;
  v17 = __Block_byref_object_dispose__10992;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v21 = 1065353216;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v4 = MEMORY[0x1E0C809B0];
  do
  {
    v5 = *(NSObject **)(v2 + 8);
    v8[0] = v4;
    v8[1] = 3221225472;
    v8[2] = ___ZN8Espresso17async_data_source6priv_t9get_frontEm_block_invoke;
    v8[3] = &unk_1E2DD58E8;
    v8[5] = &v9;
    v8[6] = v2;
    v8[4] = &v13;
    dispatch_sync(v5, v8);
  }
  while (!*((_BYTE *)v10 + 24));
  std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map(a2, (uint64_t)(v14 + 6));
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(*((_QWORD **)&v19 + 1));
  v6 = (void *)*((_QWORD *)&v18 + 1);
  *((_QWORD *)&v18 + 1) = 0;
  if (v6)
    operator delete(v6);
}

void sub_1916DAD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;

  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void Espresso::abstract_data_source::get_data_for_batch(Espresso::abstract_data_source *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 *v24;
  void *v25;
  std::runtime_error *exception;
  __int128 v27;
  std::string __p;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  __int128 *v32;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  if (a3)
  {
    v7 = 0;
    v8 = a3 * a2;
    do
    {
      (**(void (***)(void **__return_ptr, Espresso::abstract_data_source *, uint64_t))this)(&v31, this, v7 + v8);
      v9 = v32;
      if (v32)
      {
        do
        {
          std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v9 + 1);
          *(_QWORD *)&v27 = &__p;
          v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (unsigned __int8 *)&__p, (__int128 **)&v27)+ 40;
          v10 = *(_QWORD *)v11;
          if (!*(_QWORD *)v11)
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v27, *(_DWORD *)(v29 + 8), *(_DWORD *)(v29 + 12), *(_DWORD *)(v29 + 16), a3);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v11, &v27);
            v12 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
            if (*((_QWORD *)&v27 + 1))
            {
              v13 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
              do
                v14 = __ldaxr(v13);
              while (__stlxr(v14 - 1, v13));
              if (!v14)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
            v10 = *(_QWORD *)v11;
          }
          v15 = *(int *)(v10 + 8);
          if ((_DWORD)v15 != *(_DWORD *)(v29 + 8)
            || (v16 = *(_DWORD *)(v10 + 12), v16 != *(_DWORD *)(v29 + 12))
            || (v17 = *(_DWORD *)(v10 + 16), v17 != *(_DWORD *)(v29 + 16)))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Data Inconsistency");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v18 = 0;
          v19 = *(_QWORD *)(v10 + 24);
          v20 = v15;
          do
          {
            v20 *= *(int *)(v29 + 12 + v18);
            v18 += 4;
          }
          while (v18 != 12);
          memcpy((void *)(v19 + 4 * v7 * v16 * (int)v15 * v17), *(const void **)(v29 + 24), 4 * v20);
          v21 = v30;
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v9 = *(__int128 **)v9;
        }
        while (v9);
        v24 = v32;
      }
      else
      {
        v24 = 0;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v24);
      v25 = v31;
      v31 = 0;
      if (v25)
        operator delete(v25);
      ++v7;
    }
    while (v7 != a3);
  }
}

void sub_1916DAFFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__10991(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__10992(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a1 + 48);
}

void ___ZN8Espresso17async_data_source6priv_t9get_frontEm_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  int64x2_t v4;
  void *v5;
  void *__p[2];
  uint64_t *v7;
  int v8;

  v1 = a1[6];
  if (*(_QWORD *)(v1 + 72))
  {
    std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map((uint64_t)__p, *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * (*(_QWORD *)(v1 + 64) / 0x55uLL))+ 48 * (*(_QWORD *)(v1 + 64) % 0x55uLL)+ 8);
    v3 = *(_QWORD *)(a1[4] + 8);
    if ((void **)(v3 + 48) != __p)
    {
      *(_DWORD *)(v3 + 80) = v8;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,void *> *>>((_QWORD *)(v3 + 48), v7);
    }
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * (*(_QWORD *)(v1 + 64) / 0x55uLL))+ 48 * (*(_QWORD *)(v1 + 64) % 0x55uLL)+ 8);
    v4 = vaddq_s64(*(int64x2_t *)(v1 + 64), (int64x2_t)xmmword_191A82A90);
    *(int64x2_t *)(v1 + 64) = v4;
    if (v4.i64[0] >= 0xAAuLL)
    {
      operator delete(**(void ***)(v1 + 40));
      *(_QWORD *)(v1 + 40) += 8;
      *(_QWORD *)(v1 + 64) -= 85;
    }
    --*(_DWORD *)(v1 + 80);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v7);
    v5 = __p[0];
    __p[0] = 0;
    if (v5)
      operator delete(v5);
  }
  Espresso::async_data_source::priv_t::__fill_cache((Espresso::async_data_source::priv_t *)v1);
}

void sub_1916DB1BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Espresso::async_data_source::priv_t::__fill_cache(Espresso::async_data_source::priv_t *this)
{
  int v1;
  int v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  v1 = *(_DWORD *)(*(_QWORD *)this + 16);
  v2 = v1 - *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = v1;
  if (v2 >= 1)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = *((_QWORD *)this + 3);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = ___ZN8Espresso17async_data_source6priv_t12__fill_cacheEv_block_invoke;
    v5[3] = &__block_descriptor_44_e5_v8__0l;
    v5[4] = this;
    v6 = v2;
    dispatch_group_async(v4, v3, v5);
  }
}

void ___ZN8Espresso17async_data_source6priv_t12__fill_cacheEv_block_invoke(uint64_t a1)
{
  int v1;
  int v3;
  float *v4;
  uint64_t v5;
  float v6;
  float v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  _QWORD block[6];
  void *v13[5];
  void *__p[2];
  _QWORD *v15;
  void *v16[5];
  __int128 *v17[2];

  v1 = *(_DWORD *)(a1 + 40);
  if (v1 >= 1)
  {
    v3 = 0;
    v4 = *(float **)(a1 + 32);
    v5 = *((_QWORD *)v4 + 11);
    do
    {
      if (!*((_BYTE *)v4 + 96))
      {
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)v4 + 40))(v16, *(_QWORD *)v4, v5);
        if (*(_BYTE *)(*(_QWORD *)v4 + 8))
        {
          while (1)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "labels");
            v17[0] = (__int128 *)__p;
            v6 = **(float **)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)__p, v17)+ 5)+ 24);
            v7 = v4[25];
            if (SHIBYTE(v15) < 0)
              operator delete(__p[0]);
            if (v6 != v7)
              break;
            (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)v4 + 40))(__p, *(_QWORD *)v4, v5);
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__move_assign((uint64_t)v16, (uint64_t *)__p);
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v15);
            v8 = __p[0];
            __p[0] = 0;
            if (v8)
              operator delete(v8);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "labels");
          v17[0] = (__int128 *)__p;
          v4[25] = **(float **)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)__p, v17)+ 5)+ 24);
          if (SHIBYTE(v15) < 0)
            operator delete(__p[0]);
        }
        v9 = *((_QWORD *)v4 + 1);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3321888768;
        block[2] = ___ZN8Espresso17async_data_source6priv_t8load_oneEm_block_invoke;
        block[3] = &__block_descriptor_88_ea8_48c185_ZTSNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIN8Espresso4blobIfLi4EEEEENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_SB_EEEEEE_e5_v8__0l;
        block[4] = v4;
        block[5] = v5;
        std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map((uint64_t)v13, (uint64_t)v16);
        dispatch_async(v9, block);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((_QWORD *)v13[2]);
        v10 = v13[0];
        v13[0] = 0;
        if (v10)
          operator delete(v10);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((_QWORD *)v16[2]);
        v11 = v16[0];
        v16[0] = 0;
        if (v11)
          operator delete(v11);
        v5 = *((_QWORD *)v4 + 11);
        v1 = *(_DWORD *)(a1 + 40);
      }
      *((_QWORD *)v4 + 11) = ++v5;
      ++v3;
    }
    while (v3 < v1);
  }
}

void sub_1916DB454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,_QWORD *a31)
{
  if (a26 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(a31);
  if (a29)
    operator delete(a29);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  v16 = *a3;
  v17 = **a3;
  *((_QWORD *)i + 4) = *((_QWORD *)*a3 + 2);
  *((_OWORD *)i + 1) = v17;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)i + 5) = 0;
  *((_QWORD *)i + 6) = 0;
  v29 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v15;
  *v15 = i;
  *(_QWORD *)(v24 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_1916DB6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17async_data_source6priv_t8load_oneEm_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  _QWORD *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  void *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  void *__p[5];

  v1 = *(_QWORD **)(a1 + 32);
  v117 = *(_QWORD *)(a1 + 40);
  std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::unordered_map((uint64_t)__p, a1 + 48);
  v2 = (char *)v1[6];
  v3 = (char *)v1[5];
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 85 * ((v2 - v3) >> 3) - 1;
  v6 = v1[8];
  v7 = v1[9] + v6;
  if (v5 != v7)
    goto LABEL_84;
  if (v6 < 0x55)
  {
    v22 = v4 >> 3;
    v23 = (char *)v1[7];
    v24 = (char *)v1[4];
    v25 = v23 - v24;
    if (v4 >> 3 < (unint64_t)((v23 - v24) >> 3))
    {
      if (v23 == v2)
      {
        v51 = operator new(0xFF0uLL);
        if (v24 == v3)
        {
          if (v2 == v3)
            v52 = 1;
          else
            v52 = v25 >> 2;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v52);
          v3 = &v53[(2 * v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          v55 = (uint64_t *)v1[5];
          v56 = v3;
          v57 = v1[6] - (_QWORD)v55;
          if (v57)
          {
            v56 = &v3[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = v3;
            do
            {
              v60 = *v55++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (void *)v1[4];
          v1[4] = v53;
          v1[5] = v3;
          v1[6] = v56;
          v1[7] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v3 = (char *)v1[5];
          }
        }
        *((_QWORD *)v3 - 1) = v51;
        v62 = (char *)v1[5];
        v63 = (char *)v1[6];
        v1[5] = v62 - 8;
        v64 = *((_QWORD *)v62 - 1);
        v1[5] = v62;
        if (v63 == (char *)v1[7])
        {
          v65 = v1[4];
          v66 = (uint64_t)&v62[-v65];
          if ((unint64_t)v62 <= v65)
          {
            v99 = (uint64_t)&v63[-v65];
            v38 = v99 == 0;
            v100 = v99 >> 2;
            if (v38)
              v101 = 1;
            else
              v101 = v100;
            v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v101);
            v104 = &v102[8 * (v101 >> 2)];
            v105 = (uint64_t *)v1[5];
            v63 = v104;
            v106 = v1[6] - (_QWORD)v105;
            if (v106)
            {
              v63 = &v104[v106 & 0xFFFFFFFFFFFFFFF8];
              v107 = 8 * (v106 >> 3);
              v108 = &v102[8 * (v101 >> 2)];
              do
              {
                v109 = *v105++;
                *(_QWORD *)v108 = v109;
                v108 += 8;
                v107 -= 8;
              }
              while (v107);
            }
            v110 = (void *)v1[4];
            v1[4] = v102;
            v1[5] = v104;
            v1[6] = v63;
            v1[7] = &v102[8 * v103];
            if (v110)
            {
              operator delete(v110);
              v63 = (char *)v1[6];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v14 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v14)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v62[-8 * v71];
            v73 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v71], v62, v63 - v62);
              v62 = (char *)v1[5];
            }
            v63 = &v72[v73];
            v1[5] = &v62[8 * v70];
            v1[6] = &v72[v73];
          }
        }
        *(_QWORD *)v63 = v64;
      }
      else
      {
        *(_QWORD *)v2 = operator new(0xFF0uLL);
      }
      goto LABEL_82;
    }
    if (v23 == v24)
      v26 = 1;
    else
      v26 = v25 >> 2;
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v26);
    v29 = v28;
    v30 = &v27[8 * v22];
    *(_QWORD *)&v31 = v27;
    *((_QWORD *)&v31 + 1) = v30;
    v114 = v31;
    v32 = operator new(0xFF0uLL);
    *(_QWORD *)&v33 = v30;
    *((_QWORD *)&v33 + 1) = &v27[8 * v29];
    if (v22 == v29)
    {
      v34 = 8 * v22;
      *(_QWORD *)&v35 = v114;
      if (v4 >= 1)
      {
        v36 = v34 >> 3;
        if (v36 >= -1)
          v37 = v36 + 1;
        else
          v37 = v36 + 2;
        v30 -= 8 * (v37 >> 1);
        *(_QWORD *)&v33 = v30;
        *((_QWORD *)&v35 + 1) = v30;
        goto LABEL_56;
      }
      v74 = v34 >> 2;
      if (v2 == v3)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v75);
      v30 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v35 = v76;
      *((_QWORD *)&v35 + 1) = v30;
      *(_QWORD *)&v33 = v30;
      *((_QWORD *)&v33 + 1) = &v76[8 * v77];
      if (!v27)
        goto LABEL_56;
      v111 = v33;
      v114 = v35;
      operator delete(v27);
      v33 = v111;
    }
    v35 = v114;
LABEL_56:
    *(_QWORD *)v30 = v32;
    *(_QWORD *)&v33 = v33 + 8;
    for (i = v1[6]; i != v1[5]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1) == (_QWORD)v35)
      {
        v81 = (_BYTE *)v33;
        if ((unint64_t)v33 >= *((_QWORD *)&v33 + 1))
        {
          if (*((_QWORD *)&v33 + 1) == *((_QWORD *)&v35 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v33 + 1) - *((_QWORD *)&v35 + 1)) >> 2;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v35 = v87;
          *((_QWORD *)&v35 + 1) = v80;
          *(_QWORD *)&v33 = v89;
          *((_QWORD *)&v33 + 1) = &v87[8 * v88];
          if (v79)
          {
            v112 = v33;
            v116 = v35;
            operator delete(v79);
            v33 = v112;
            v35 = v116;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v33 + 1) - v33) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v33 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v33 - *((_QWORD *)&v35 + 1)));
          if ((_QWORD)v33 == *((_QWORD *)&v35 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v35 + 1);
          }
          else
          {
            v113 = *((_QWORD *)&v33 + 1);
            v115 = v35;
            memmove((void *)(v85 - (v33 - *((_QWORD *)&v35 + 1))), *((const void **)&v35 + 1), v33 - *((_QWORD *)&v35 + 1));
            *((_QWORD *)&v33 + 1) = v113;
            *(_QWORD *)&v35 = v115;
          }
          *((_QWORD *)&v35 + 1) = v80;
          *(_QWORD *)&v33 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v35 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v35 + 1) -= 8;
    }
    v96 = (void *)v1[4];
    *((_OWORD *)v1 + 2) = v35;
    *((_OWORD *)v1 + 3) = v33;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
  v1[8] = v6 - 85;
  v10 = *(_QWORD *)v3;
  v8 = v3 + 8;
  v9 = v10;
  v1[5] = v8;
  if ((char *)v1[7] == v2)
  {
    v11 = v1[4];
    v12 = (uint64_t)&v8[-v11];
    if ((unint64_t)v8 <= v11)
    {
      v39 = (uint64_t)&v2[-v11];
      v38 = v39 == 0;
      v40 = v39 >> 2;
      if (v38)
        v41 = 1;
      else
        v41 = v40;
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v41);
      v44 = &v42[8 * (v41 >> 2)];
      v45 = (uint64_t *)v1[5];
      v2 = v44;
      v46 = v1[6] - (_QWORD)v45;
      if (v46)
      {
        v2 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
        v47 = 8 * (v46 >> 3);
        v48 = &v42[8 * (v41 >> 2)];
        do
        {
          v49 = *v45++;
          *(_QWORD *)v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      v50 = (void *)v1[4];
      v1[4] = v42;
      v1[5] = v44;
      v1[6] = v2;
      v1[7] = &v42[8 * v43];
      if (v50)
      {
        operator delete(v50);
        v2 = (char *)v1[6];
      }
    }
    else
    {
      v13 = v12 >> 3;
      v14 = v12 >> 3 < -1;
      v15 = (v12 >> 3) + 2;
      if (v14)
        v16 = v15;
      else
        v16 = v13 + 1;
      v17 = -(v16 >> 1);
      v18 = v16 >> 1;
      v19 = &v8[-8 * v18];
      v20 = v2 - v8;
      if (v2 == v8)
      {
        v21 = v2;
      }
      else
      {
        memmove(&v8[-8 * v18], v8, v2 - v8);
        v21 = (char *)v1[5];
      }
      v2 = &v19[v20];
      v1[5] = &v21[8 * v17];
      v1[6] = &v19[v20];
    }
  }
  *(_QWORD *)v2 = v9;
LABEL_82:
  v1[6] += 8;
LABEL_83:
  v3 = (char *)v1[5];
  v7 = v1[9] + v1[8];
LABEL_84:
  v97 = (_QWORD *)(*(_QWORD *)&v3[8 * (v7 / 0x55)] + 48 * (v7 % 0x55));
  *v97 = v117;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table((uint64_t)(v97 + 1), (uint64_t *)__p);
  ++v1[9];
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((_QWORD *)__p[2]);
  v98 = __p[0];
  __p[0] = 0;
  if (v98)
    operator delete(v98);
}

void sub_1916DBCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  uint64_t v11;
  void *v12;

  operator delete(v12);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v11);
  _Unwind_Resume(a1);
}

void Espresso::simple_blobs_data_source::get_data_for_sample(Espresso::simple_blobs_data_source *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  char *v7;
  int *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 *v26;
  __int128 *v27;
  BOOL v28;
  __int128 v29;
  int *v30;
  std::__shared_weak_count *v31;
  std::string __p;
  int *v33;
  std::__shared_weak_count *v34;
  std::string *p_p;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v4 + 1;
  v5 = *((_QWORD *)this + 7);
  if (v5)
    v4 = (int)std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v5, *((_DWORD **)this + 9));
  v6 = (__int128 *)*((_QWORD *)this + 4);
  v7 = (char *)this + 40;
  if (v6 != (__int128 *)((char *)this + 40))
  {
    do
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v6 + 2);
      v8 = v33;
      v30 = v33;
      v31 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v29, v8[2], v8[3], v8[4], 1);
      p_p = &__p;
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (__int128 **)&p_p);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v11 + 40), &v29);
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
      if (*((_QWORD *)&v29 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = v30;
      v16 = v30[2];
      v17 = v30[3];
      v18 = v30[4];
      *(_QWORD *)&v29 = &__p;
      v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&__p, (__int128 **)&v29);
      memcpy(*(void **)(*((_QWORD *)v19 + 5) + 24), (const void *)(*((_QWORD *)v15 + 3) + 4 * v4 * v17 * (uint64_t)v16 * v18), 4 * v17 * (uint64_t)v16 * v18);
      v20 = v31;
      if (v31)
      {
        v21 = (unint64_t *)&v31->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = v34;
      if (v34)
      {
        v24 = (unint64_t *)&v34->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v26 = (__int128 *)*((_QWORD *)v6 + 1);
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = *(__int128 **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (__int128 *)*((_QWORD *)v6 + 2);
          v28 = *(_QWORD *)v27 == (_QWORD)v6;
          v6 = v27;
        }
        while (!v28);
      }
      v6 = v27;
    }
    while (v27 != (__int128 *)v7);
  }
}

void sub_1916DBF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)va1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v3);
  _Unwind_Resume(a1);
}

void Espresso::simple_blobs_data_source::~simple_blobs_data_source(Espresso::simple_blobs_data_source *this)
{
  *(_QWORD *)this = &off_1E2D922B8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 5));
}

{
  *(_QWORD *)this = &off_1E2D922B8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 5));
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::simple_blobs_data_source::get_num_samples(Espresso::simple_blobs_data_source *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t std::uniform_int_distribution<int>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  __int128 v18;
  int64x2_t v19;
  __int128 v20;

  v2 = a2[1];
  v3 = v2 - *a2;
  if ((_DWORD)v2 == *a2)
    return v2;
  v4 = v3 + 1;
  if (v3 == -1)
  {
    v17 = a1;
    v18 = xmmword_191A93800;
    v19 = vdupq_n_s64(2uLL);
    v20 = xmmword_191A93810;
    return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)&v17);
  }
  v6 = __clz(v4);
  v7 = 31;
  if (((v4 << v6) & 0x7FFFFFFF) != 0)
    v7 = 32;
  v8 = v7 - v6;
  v17 = a1;
  *(_QWORD *)&v18 = v8;
  if (v8 % 0x1E)
    v9 = v8 / 0x1E + 1;
  else
    v9 = v8 / 0x1E;
  v10 = v8 / v9;
  *((_QWORD *)&v18 + 1) = v8 / v9;
  v19.i64[0] = v9;
  LODWORD(v11) = (-1 << (v8 / v9)) & 0x7FFFFFFE;
  if (v8 / v9 >= 0x20)
    v11 = 0;
  else
    v11 = v11;
  LODWORD(v20) = v11;
  if (v11 / v9 < (v11 ^ 0x7FFFFFFE))
  {
    ++v9;
    v10 = v8 / v9;
    *((_QWORD *)&v18 + 1) = v8 / v9;
    v19.i64[0] = v9;
    if (v8 / v9 > 0x1F)
    {
      LODWORD(v20) = 0;
      v19.i64[1] = v9 - v8 + 32 * v9;
      v10 = 32;
      goto LABEL_18;
    }
    LODWORD(v20) = (-1 << v10) & 0x7FFFFFFE;
  }
  v19.i64[1] = v9 + v8 / v9 * v9 - v8;
  if (v10 > 0x1E)
  {
LABEL_18:
    v12 = 0;
    DWORD1(v20) = 0;
    goto LABEL_19;
  }
  DWORD1(v20) = (-2 << v10) & 0x7FFFFFFE;
  v12 = 1;
LABEL_19:
  v13 = 0xFFFFFFFF >> -(char)v10;
  if (!v10)
    v13 = 0;
  v14 = 0xFFFFFFFF >> ~(_BYTE)v10;
  if (!v12)
    v14 = -1;
  *((_QWORD *)&v20 + 1) = __PAIR64__(v14, v13);
  do
    v15 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval((uint64_t)&v17);
  while (v15 >= v4);
  return *a2 + v15;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned int>::__eval(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    LODWORD(result) = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        v7 = v6 / 0xADC8;
        v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (v9)
          v11 = 0;
        else
          v11 = 0x7FFFFFFF;
        v6 = v11 + v10;
      }
      while (v6 - 1 >= *(_DWORD *)(a1 + 40));
      v12 = (_DWORD)result << v5;
      if (v5 >= 0x20)
        v12 = 0;
      result = v12 + (*(_DWORD *)(a1 + 48) & (v6 - 1));
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    result = 0;
  }
  v13 = *(_QWORD *)(a1 + 24);
  if (v2 < v13)
  {
    v14 = *(unsigned int **)a1;
    v15 = *(_DWORD *)(a1 + 44);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(a1 + 52);
    v18 = *v14;
    while (1)
    {
      v19 = v18 / 0xADC8;
      v20 = 48271 * (v18 % 0xADC8);
      v19 *= 3399;
      v9 = v20 >= v19;
      v21 = v20 - v19;
      if (v9)
        v22 = 0;
      else
        v22 = 0x7FFFFFFF;
      v18 = v22 + v21;
      if (v18 - 1 < v15)
      {
        v23 = (_DWORD)result << (v16 + 1);
        if (v16 >= 0x1F)
          v23 = 0;
        result = v23 + (v17 & (v18 - 1));
        if (++v2 == v13)
          break;
      }
    }
    *v14 = v18;
  }
  return result;
}

void Espresso::f4_blob_async_data_source::~f4_blob_async_data_source(Espresso::f4_blob_async_data_source *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D92450;
  v2 = (void *)*((_QWORD *)this + 31);
  if (v2)
  {
    *((_QWORD *)this + 32) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 28);
  if (v3)
  {
    *((_QWORD *)this + 29) = v3;
    operator delete(v3);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 23));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 128, *((char **)this + 17));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  Espresso::async_data_source::~async_data_source(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D92450;
  v2 = (void *)*((_QWORD *)this + 31);
  if (v2)
  {
    *((_QWORD *)this + 32) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 28);
  if (v3)
  {
    *((_QWORD *)this + 29) = v3;
    operator delete(v3);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 23));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 128, *((char **)this + 17));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  Espresso::async_data_source::~async_data_source(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::f4_blob_async_data_source::get_num_samples(Espresso::f4_blob_async_data_source *this)
{
  return *((_QWORD *)this + 19);
}

void Espresso::f4_blob_async_data_source::background_load_sample(Espresso::f4_blob_async_data_source *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  char *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  __int128 *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  std::runtime_error *exception;
  std::string *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string v35;
  std::string *v36;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v4 = (_QWORD *)*((_QWORD *)this + 22);
  v5 = (char *)this + 184;
  if (v4 != (_QWORD *)((char *)this + 184))
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
        std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v4[4], v4[5]);
      else
        v35 = *(std::string *)(v4 + 4);
      v7 = v4[7];
      v6 = (std::__shared_weak_count *)v4[8];
      v33 = v7;
      v34 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *((_QWORD *)this + 21);
      v11 = *(int *)(v7 + 20);
      if (v10 >= v11)
      {
        v10 = 0;
        *((_QWORD *)this + 21) = 0;
      }
      if (v10 >= v11)
      {
        Espresso::f4_blob_async_data_source::load_chunk(this, *((_QWORD *)this + 20));
        v12 = *((_QWORD *)this + 20) + 1;
        *((_QWORD *)this + 20) = v12;
        v31 = &v35;
        v13 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 16, (const void **)&v35.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v31);
        if (v12 >= 0xAAAAAAAAAAAAAAABLL * (v13[8] - v13[7]))
        {
          *((_QWORD *)this + 20) = 0;
          if ((*((_DWORD *)this + 50) & 0x80000000) == 0)
          {
            NSLog(CFSTR("Xshuffle! %d"), *((unsigned int *)this + 50));
            std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &>(*((_QWORD *)this + 31), *((_QWORD *)this + 32), *((_QWORD *)this + 26));
          }
        }
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v31, *(_DWORD *)(v7 + 8), *(_DWORD *)(v7 + 12), *(_DWORD *)(v7 + 16), 1);
      v14 = (__int128 *)v31;
      v15 = v31->__r_.__value_.__r.__words[1];
      if (v15 != *(_DWORD *)(v7 + 8)
        || (v16 = HIDWORD(v31->__r_.__value_.__r.__words[1]), v16 != *(_DWORD *)(v7 + 12))
        || (v17 = v31->__r_.__value_.__r.__words[2], v17 != *(_DWORD *)(v7 + 16)))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "size mismatch");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v18 = 0;
      v19 = SLODWORD(v31->__r_.__value_.__r.__words[1]);
      do
      {
        v19 *= *(int *)((char *)&v31->__r_.__value_.__r.__words[1] + v18 + 4);
        v18 += 4;
      }
      while (v18 != 12);
      memcpy(v31[1].__r_.__value_.__l.__data_, (const void *)(*(_QWORD *)(v7 + 24)+ 4 * *(int *)(*((_QWORD *)this + 28) + 4 * *((_QWORD *)this + 21)) * (uint64_t)(v16 * v15 * v17)), 4 * v19);
      v36 = &v35;
      v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)&v35, (__int128 **)&v36);
      v21 = v32;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v20 + 5, (uint64_t)v14, (uint64_t)v32);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = v34;
      if (v34)
      {
        v25 = (unint64_t *)&v34->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      v27 = (char *)v4[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = *(char **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (char *)v4[2];
          v29 = *(_QWORD *)v28 == (_QWORD)v4;
          v4 = v28;
        }
        while (!v29);
      }
      v4 = v28;
    }
    while (v28 != v5);
  }
  ++*((_QWORD *)this + 21);
}

void sub_1916DC6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

void Espresso::f4_blob_async_data_source::load_chunk(Espresso::f4_blob_async_data_source *this, uint64_t a2)
{
  uint64_t v2;
  Espresso::f4_blob_async_data_source *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t **v6;
  const void **v7;
  uint64_t **v8;
  const void **v9;
  std::vector<int> *v10;
  uint64_t **v11;
  void **v12;
  uint64_t **v13;
  void **v14;
  FILE *v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::vector<int>::pointer begin;
  const void **v27;
  const void ***v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  int *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  Espresso::f4_blob_async_data_source *v38;
  uint64_t v39;
  const void ***v40;
  __int128 v41;
  void *__p[2];
  char v43;
  __int128 *v44;

  v2 = a2;
  v3 = this;
  v4 = *(_QWORD *)(*((_QWORD *)this + 31) + 8 * a2);
  v5 = (_QWORD *)((char *)this + 184);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 23));
  v6 = (uint64_t **)((char *)v3 + 128);
  v7 = (const void **)*((_QWORD *)v3 + 16);
  *((_QWORD *)v3 + 22) = v5;
  v8 = (uint64_t **)((char *)v3 + 176);
  *v5 = 0;
  *((_QWORD *)v3 + 24) = 0;
  *((_QWORD *)v3 + 21) = 0;
  v40 = (const void ***)((char *)v3 + 136);
  if (v7 == (const void **)((char *)v3 + 136))
  {
    v30 = 0;
  }
  else
  {
    v38 = v3;
    v39 = v2;
    v9 = (const void **)((char *)v3 + 104);
    v10 = (std::vector<int> *)((char *)v3 + 224);
    do
    {
      __p[0] = v7 + 4;
      v11 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v7 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (const void **)&v11[7][3 * v4], (uint64_t)__p);
      if (v43 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      printf("path=%s\n", (const char *)v12);
      if (v43 < 0)
        operator delete(__p[0]);
      v44 = (__int128 *)(v7 + 4);
      v13 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v7 + 4, (uint64_t)&std::piecewise_construct, &v44);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (const void **)&v13[7][3 * v4], (uint64_t)__p);
      if (v43 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      v15 = fopen((const char *)v14, "rb");
      Espresso::debug::read_blob_f4((Espresso::debug *)&v41, v15);
      fclose(v15);
      v44 = (__int128 *)(v7 + 4);
      v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, v7 + 4, &v44);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v16 + 7), &v41);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v43 < 0)
        operator delete(__p[0]);
      __p[0] = v7 + 4;
      v20 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v7 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      v21 = v20[7];
      v22 = v20[8];
      __p[0] = v7 + 4;
      v23 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, v7 + 4, (__int128 **)__p);
      std::vector<int>::resize(v10, *(int *)(v23[7] + 20));
      v24 = v23[7];
      if (*(int *)(v24 + 20) >= 1)
      {
        v25 = 0;
        begin = v10->__begin_;
        do
        {
          begin[v25] = v25;
          ++v25;
        }
        while (v25 < *(int *)(v24 + 20));
      }
      v27 = (const void **)v7[1];
      if (v27)
      {
        do
        {
          v28 = (const void ***)v27;
          v27 = (const void **)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (const void ***)v7[2];
          v29 = *v28 == v7;
          v7 = (const void **)v28;
        }
        while (!v29);
      }
      v7 = (const void **)v28;
    }
    while (v28 != v40);
    v30 = 0xAAAAAAAAAAAAAAABLL * (v22 - v21);
    v3 = v38;
    v2 = v39;
  }
  if ((*((_DWORD *)v3 + 50) & 0x80000000) == 0)
  {
    NSLog(CFSTR("shuffle %d!"), *((unsigned int *)v3 + 50));
    v32 = (int *)*((_QWORD *)v3 + 28);
    v31 = *((_QWORD *)v3 + 29);
    if (v31 - (uint64_t)v32 >= 5)
    {
      v33 = v31 - 4;
      if (v31 - 4 > (unint64_t)v32)
      {
        v34 = *((_QWORD *)v3 + 26);
        v35 = (char *)(((unint64_t)(v31 - (_QWORD)v32) >> 2) - 1);
        do
        {
          __p[0] = 0;
          __p[1] = v35;
          v36 = std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v34, __p);
          if (v36)
          {
            v37 = *v32;
            *v32 = v32[v36];
            v32[v36] = v37;
          }
          ++v32;
          --v35;
        }
        while ((unint64_t)v32 < v33);
      }
    }
  }
  NSLog(CFSTR("[loaded chunk] id=%zu/%zu (perm=%zu chunks=%zu)\n"), v2, v4, (uint64_t)(*((_QWORD *)v3 + 32) - *((_QWORD *)v3 + 31)) >> 3, v30);
}

void sub_1916DCA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &>(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  if ((uint64_t)(a2 - a1) >= 9)
  {
    v4 = (uint64_t *)a1;
    v5 = a2 - 8;
    if (a2 - 8 > a1)
    {
      v7 = ((a2 - a1) >> 3) - 1;
      do
      {
        v11[0] = 0;
        v11[1] = v7;
        v8 = std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a3, v11);
        if (v8)
        {
          v9 = *v4;
          *v4 = v4[v8];
          v4[v8] = v9;
        }
        ++v4;
        --v7;
      }
      while ((unint64_t)v4 < v5);
    }
  }
  return a2;
}

void Espresso::async_data_source::~async_data_source(Espresso::async_data_source *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;

  *(_QWORD *)this = &off_1E2D81618;
  v8 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 88, &v8);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
}

void Espresso::image_async_data_source::~image_async_data_source(Espresso::image_async_data_source *this)
{
  char *v2;
  void **v3;

  *(_QWORD *)this = &off_1E2D90210;
  v2 = (char *)this + 104;
  v3 = (void **)((char *)this + 144);
  std::vector<std::pair<std::string,int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  Espresso::async_data_source::~async_data_source(this);
}

{
  char *v2;
  void **v3;

  *(_QWORD *)this = &off_1E2D90210;
  v2 = (char *)this + 104;
  v3 = (void **)((char *)this + 144);
  std::vector<std::pair<std::string,int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  Espresso::async_data_source::~async_data_source(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::image_async_data_source::get_num_samples(Espresso::image_async_data_source *this)
{
  return (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 5;
}

void Espresso::image_async_data_source::background_load_sample(Espresso::image_async_data_source *this)
{
  unint64_t v2;
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  int v6;
  void *v7;
  std::string *v8;
  id v9;
  std::runtime_error *exception;
  uint64_t v11;
  std::string v12;

  v2 = *((_QWORD *)this + 21);
  v3 = *((_QWORD *)this + 18);
  if (v2 >= (*((_QWORD *)this + 19) - v3) >> 5)
  {
    Espresso::image_async_data_source::reset(this);
    v2 = *((_QWORD *)this + 21);
    v3 = *((_QWORD *)this + 18);
  }
  v4 = (__int128 *)(v3 + 32 * v2);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    v2 = *((_QWORD *)this + 21);
    v3 = *((_QWORD *)this + 18);
  }
  else
  {
    v5 = *v4;
    v12.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_DWORD *)(v3 + 32 * v2 + 24);
  *((_QWORD *)this + 21) = v2 + 1;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v11, 1, 1, 1, 1);
  **(float **)(v11 + 24) = (float)v6;
  v7 = (void *)MEMORY[0x1E0C99D50];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v12;
  else
    v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  objc_msgSend(v7, "dataWithContentsOfFile:", objc_claimAutoreleasedReturnValue());
  v9 = (id)objc_claimAutoreleasedReturnValue();
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Functionality disabled in production mode");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1916DCDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::image_async_data_source::reset(Espresso::image_async_data_source *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[6];

  *((_QWORD *)this + 21) = 0;
  if (*((_QWORD *)this + 13))
  {
    NSLog(CFSTR("[image_async_data_source] shuffling"));
    v3 = *((_QWORD *)this + 18);
    v2 = *((_QWORD *)this + 19);
    if ((uint64_t)(v2 - v3) >= 33)
    {
      v4 = v2 - 32;
      if (v2 - 32 > v3)
      {
        v5 = *((_QWORD *)this + 13);
        v6 = ((v2 - v3) >> 5) - 1;
        do
        {
          v12[0] = 0;
          v12[1] = v6;
          v7 = std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v5, v12);
          if (v7)
          {
            v8 = *(_QWORD *)(v3 + 16);
            v9 = *(_OWORD *)v3;
            v10 = v3 + 32 * v7;
            v11 = *(_QWORD *)(v10 + 16);
            *(_OWORD *)v3 = *(_OWORD *)v10;
            *(_QWORD *)(v3 + 16) = v11;
            *(_OWORD *)v10 = v9;
            *(_QWORD *)(v10 + 16) = v8;
            LODWORD(v8) = *(_DWORD *)(v3 + 24);
            *(_DWORD *)(v3 + 24) = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v10 + 24) = v8;
          }
          v3 += 32;
          --v6;
        }
        while (v3 < v4);
      }
    }
  }
}

void std::vector<std::pair<std::string,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::multikey_data_source::get_data_for_sample(Espresso::multikey_data_source *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t i;
  void (***v7)(void **__return_ptr, _QWORD, uint64_t);
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string __p;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  __int128 *v24;
  void (***v25)(void **__return_ptr, _QWORD, uint64_t);
  std::__shared_weak_count *v26;
  std::string *p_p;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v4 = *((_QWORD *)this + 2);
  for (i = *((_QWORD *)this + 3); v4 != i; v4 += 16)
  {
    v7 = *(void (****)(void **__return_ptr, _QWORD, uint64_t))v4;
    v8 = *(std::__shared_weak_count **)(v4 + 8);
    v25 = *(void (****)(void **__return_ptr, _QWORD, uint64_t))v4;
    v26 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (**v7)(&v23, v7, a2);
    v11 = v24;
    if (v24)
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v11 + 1);
        p_p = &__p;
        v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)&__p, (__int128 **)&p_p);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 5, v21, (uint64_t)v22);
        v13 = v22;
        if (v22)
        {
          v14 = (unint64_t *)&v22->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v11 = *(__int128 **)v11;
      }
      while (v11);
      v8 = v26;
      v16 = v24;
    }
    else
    {
      v16 = 0;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v16);
    v17 = v23;
    v23 = 0;
    if (v17)
      operator delete(v17);
    if (v8)
    {
      v18 = (unint64_t *)&v8->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1916DD138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v12);
  _Unwind_Resume(a1);
}

void Espresso::multikey_data_source::get_data_for_batch(Espresso::multikey_data_source *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t *i;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 *v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string __p;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  __int128 *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::string *p_p;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  for (i = (uint64_t *)*((_QWORD *)this + 3); v5 != i; v5 += 2)
  {
    v9 = *v5;
    v10 = (std::__shared_weak_count *)v5[1];
    v27 = *v5;
    v28 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(&v25, v9, a2, a3);
    v13 = v26;
    if (v26)
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v13 + 1);
        p_p = &__p;
        v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (unsigned __int8 *)&__p, (__int128 **)&p_p);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v14 + 5, v23, (uint64_t)v24);
        v15 = v24;
        if (v24)
        {
          v16 = (unint64_t *)&v24->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v13 = *(__int128 **)v13;
      }
      while (v13);
      v10 = v28;
      v18 = v26;
    }
    else
    {
      v18 = 0;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v18);
    v19 = v25;
    v25 = 0;
    if (v19)
      operator delete(v19);
    if (v10)
    {
      v20 = (unint64_t *)&v10->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1916DD2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v12);
  _Unwind_Resume(a1);
}

void Espresso::multikey_data_source::~multikey_data_source(Espresso::multikey_data_source *this)
{
  void **v1;

  *(_QWORD *)this = &off_1E2D87738;
  v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_1E2D87738;
  v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x19401CD90);
}

{
  void **v1;

  *(_QWORD *)this = &off_1E2D87738;
  v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t Espresso::multikey_data_source::get_num_samples(Espresso::multikey_data_source *this)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = (uint64_t *)*((_QWORD *)this + 2);
  if (v1 == *((uint64_t **)this + 3))
    return 0;
  v2 = *v1;
  v3 = (std::__shared_weak_count *)v1[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_1916DD468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::mxnet_imagebinary_reader::~mxnet_imagebinary_reader(Espresso::mxnet_imagebinary_reader *this)
{
  Espresso::async_data_source::~async_data_source(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::mxnet_imagebinary_reader::get_num_samples(Espresso::mxnet_imagebinary_reader *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "MXNet Image Binary Reader not found at load time");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1916DD4E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::mxnet_imagebinary_reader::background_load_sample(Espresso::mxnet_imagebinary_reader *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "MXNet Image Binary Reader not found at load time");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1916DD530(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::async_data_source::async_data_source(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E2D81618;
  v4 = *a2;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 4);
  *(_OWORD *)(a1 + 16) = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 40) = v5;
  }
  v6 = (std::string *)(a1 + 64);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v7 = a2[3];
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_1916DD5F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void Espresso::async_data_source::ready(Espresso::async_data_source *this)
{
  char *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 block;
  void (*v8)(uint64_t);
  void *v9;
  char *v10;

  v2 = (char *)operator new(0x80uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DBB438;
  *((_QWORD *)v2 + 3) = this;
  *((_QWORD *)v2 + 14) = 0;
  v2[120] = 0;
  *((_DWORD *)v2 + 31) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((_DWORD *)v2 + 26) = 0;
  v3 = dispatch_queue_create("com.apple.espresso.async_data_source.queued_samples_lock", 0);
  *((_QWORD *)v2 + 4) = v3;
  *((_QWORD *)v2 + 5) = dispatch_queue_create("com.apple.espresso.async_data_source.loading_queue", 0);
  *((_QWORD *)v2 + 6) = dispatch_group_create();
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 3221225472;
  v8 = ___ZN8Espresso17async_data_source6priv_tC2EPS0__block_invoke;
  v9 = &__block_descriptor_40_e5_v8__0l;
  v10 = v2 + 24;
  dispatch_sync(v3, &block);
  *(_QWORD *)&block = v2 + 24;
  *((_QWORD *)&block + 1) = v2;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 88, &block);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (*((_QWORD *)&block + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZN8Espresso17async_data_source6priv_tC2EPS0__block_invoke(uint64_t a1)
{
  Espresso::async_data_source::priv_t::__fill_cache(*(Espresso::async_data_source::priv_t **)(a1 + 32));
}

void std::__shared_ptr_emplace<Espresso::async_data_source::priv_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::async_data_source::priv_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::async_data_source::priv_t>::__on_zero_shared(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  *(_BYTE *)(a1 + 120) = 1;
  dispatch_sync(*(dispatch_queue_t *)(a1 + 40), &__block_literal_global_11018);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 32), &__block_literal_global_75_11019);
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 48), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 40), &__block_literal_global_76_11020);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 32), &__block_literal_global_77_11021);
  v2 = *(void ***)(a1 + 64);
  v3 = *(void ***)(a1 + 72);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 96);
    v3 = *(void ***)(a1 + 64);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 96);
    v5 = *(_QWORD *)(a1 + 88);
    v6 = &v2[v5 / 0x55];
    v7 = (unint64_t)*v6 + 48 * (v5 % 0x55);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 96) + v5) / 0x55] + 48 * ((*(_QWORD *)(a1 + 96) + v5) % 0x55);
    if (v7 != v8)
    {
      do
      {
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v7 + 8);
        v7 += 48;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 64);
      v3 = *(void ***)(a1 + 72);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 72);
      v2 = (void **)(*(_QWORD *)(a1 + 64) + 8);
      *(_QWORD *)(a1 + 64) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 85;
LABEL_14:
    *(_QWORD *)(a1 + 88) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 64);
    v14 = *(_QWORD *)(a1 + 72);
    if (v14 != v15)
      *(_QWORD *)(a1 + 72) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v16 = *(void **)(a1 + 56);
  if (v16)
    operator delete(v16);

}

uint64_t Espresso::simple_blobs_data_source::simple_blobs_data_source(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  __int128 *v14;
  __int128 *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  unsigned int v25;
  int v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::runtime_error *v37;
  std::runtime_error *exception;
  std::string __p;
  uint64_t v40;
  std::__shared_weak_count *v41;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  v4 = (uint64_t **)(a1 + 32);
  *(_QWORD *)a1 = &off_1E2D922B8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 72) = 0u;
  if ((_QWORD *)(a1 + 32) == a2)
    goto LABEL_53;
  v7 = (__int128 *)(a2 + 1);
  v6 = (__int128 *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    goto LABEL_53;
  do
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>> const&>((uint64_t)&__p, (uint64_t)v4, v6 + 2);
    v10 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
    v11 = (uint64_t *)*v3;
    v12 = (uint64_t **)v3;
    v13 = (uint64_t **)v3;
    if (*v3)
    {
      do
      {
        while (1)
        {
          v12 = (uint64_t **)v11;
          if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 4, v11 + 4))
            break;
          v11 = *v12;
          v13 = v12;
          if (!*v12)
            goto LABEL_9;
        }
        v11 = v12[1];
      }
      while (v11);
      v13 = v12 + 1;
    }
LABEL_9:
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v4, (uint64_t)v12, v13, v10);
    __p.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
    v14 = (__int128 *)*((_QWORD *)v6 + 1);
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = *(__int128 **)v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (__int128 *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
    }
    v6 = v15;
  }
  while (v15 != v7);
  if (!*(_QWORD *)(a1 + 48))
  {
LABEL_53:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Empty blobs");
    goto LABEL_55;
  }
  v17 = *v4;
  v18 = (*v4)[7];
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid parameter");
LABEL_55:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)(a1 + 24) = *(int *)(v18 + 20);
  if (v17 != v3)
  {
    while (1)
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, (__int128 *)v17 + 2);
      if (!v40)
        break;
      if (*(_QWORD *)(a1 + 24) != *(_DWORD *)(v40 + 20))
      {
        v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v37, "Inconsistent dimensions");
LABEL_52:
        __cxa_throw(v37, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v19 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v22 = (uint64_t *)v17[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (uint64_t *)v17[2];
          v16 = *v23 == (_QWORD)v17;
          v17 = v23;
        }
        while (!v16);
      }
      v17 = v23;
      if (v23 == v3)
        goto LABEL_33;
    }
    v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Invalid parameter");
    goto LABEL_52;
  }
LABEL_33:
  if ((a3 & 0x80000000) == 0)
  {
    v24 = operator new(0x20uLL);
    v24[1] = 0;
    v24[2] = 0;
    *v24 = &off_1E2DC27F0;
    v25 = a3 - 0x7FFFFFFF;
    if (a3 < 0x7FFFFFFF)
      v25 = a3;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    *((_DWORD *)v24 + 6) = v26;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 3);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v5, (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    **(_DWORD **)(a1 + 56) = v26;
    v30 = *(_QWORD *)(a1 + 24);
    v31 = operator new(0x20uLL);
    v31[1] = 0;
    v31[2] = 0;
    *v31 = &off_1E2DC27B8;
    *((_DWORD *)v31 + 6) = 0;
    *((_DWORD *)v31 + 7) = v30 - 1;
    *(_QWORD *)&v32 = v31 + 3;
    *((_QWORD *)&v32 + 1) = v31;
    v33 = *(std::__shared_weak_count **)(a1 + 80);
    *(_OWORD *)(a1 + 72) = v32;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  return a1;
}

void sub_1916DDD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v11;
  _QWORD **v12;

  __cxa_free_exception(v11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v10);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::uniform_int_distribution<int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC27B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::uniform_int_distribution<int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC27B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::f4_blob_async_data_source::f4_blob_async_data_source(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  _QWORD *v7;
  std::string *v8;
  unsigned int v9;
  std::__shared_weak_count *begin;
  unint64_t *p_size;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  void *v15;
  id v16;
  uint64_t *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  void *v34;
  uint64_t **v35;
  id v36;
  uint64_t *v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::string *v46;
  __int128 v47;
  uint64_t *v48;
  int v49;
  const char *v50;
  const char *v51;
  size_t v52;
  size_t v53;
  char *p_v;
  const void *v55;
  char *v56;
  const char *first;
  FILE *v58;
  std::runtime_error *v60;
  std::runtime_error *v61;
  std::runtime_error *exception;
  std::runtime_error *v63;
  const std::string::value_type *v64;
  std::string *v65;
  __int128 v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t i;
  id obj;
  std::string *v75;
  _QWORD *v76;
  void *v78[2];
  std::string::size_type v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  id v88;
  __int128 v89;
  int v90;
  std::string v91;
  std::string __p;
  std::__split_buffer<std::string> __v;
  _BYTE v94[128];
  _BYTE v95[128];
  std::string __ptr;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v89 = *(_OWORD *)a2;
  v90 = *(_DWORD *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v91 = *(std::string *)(a2 + 24);
  if (*(char *)(a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  else
    __p = *(std::string *)(a2 + 48);
  Espresso::async_data_source::async_data_source(a1, &v89);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E2D92450;
  *(_QWORD *)(a1 + 104) = 0;
  v75 = (std::string *)(a1 + 104);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v7 = (_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  v76 = (_QWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 200) = a4;
  v8 = (std::string *)operator new(0x20uLL);
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DC27F0;
  v9 = a4 + ((a4 / 0x7FFFFFFF) | ((a4 / 0x7FFFFFFF) << 31));
  if (v9 <= 1)
    v9 = 1;
  LODWORD(v8[1].__r_.__value_.__l.__data_) = v9;
  __v.__first_ = v8 + 1;
  __v.__begin_ = v8;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 208, (__int128 *)&__v);
  begin = (std::__shared_weak_count *)__v.__begin_;
  if (__v.__begin_)
  {
    p_size = &__v.__begin_->__r_.__value_.__l.__size_;
    do
      v12 = __ldaxr(p_size);
    while (__stlxr(v12 - 1, p_size));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
      std::__shared_weak_count::__release_weak(begin);
    }
  }
  v13 = *(_DWORD *)(a1 + 200) + ((*(_DWORD *)(a1 + 200) / 0x7FFFFFFFu) | ((*(_DWORD *)(a1 + 200) / 0x7FFFFFFFu) << 31));
  if (v13 <= 1)
    v13 = 1;
  **(_DWORD **)(a1 + 208) = v13;
  v14 = a3;
  if (*((char *)a3 + 23) < 0)
    v14 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "stringByDeletingLastPathComponent");
  v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  MEMORY[0x19401C808](v75, objc_msgSend(v16, "UTF8String"));

  std::string::append(v75, "/");
  v17 = a3;
  if (*((char *)a3 + 23) < 0)
    v17 = (uint64_t *)*a3;
  v18 = (void *)MEMORY[0x1E0C99D50];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "dataWithContentsOfFile:", v19);
  v68 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v68)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, (const std::string *)&__v);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v88 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v68, 0, &v88);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v67 = v88;
  v72 = v20;
  if (!v20)
  {
    v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__ptr, "Can't load JSON ");
    objc_msgSend(v67, "localizedDescription");
    v64 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    v65 = std::string::append(&__ptr, v64);
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    __v.__end_ = (std::__split_buffer<std::string>::pointer)v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__v.__first_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v63, (const std::string *)&__v);
    __cxa_throw(v63, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  objc_msgSend(v20, "allKeys");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v70 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v84, v95, 16);
  if (v70)
  {
    v69 = *(_QWORD *)v85;
    v71 = v21;
    do
    {
      for (i = 0; i != v70; ++i)
      {
        if (*(_QWORD *)v85 != v69)
          objc_enumerationMutation(v21);
        v22 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * i);
        *v7 = 0;
        v23 = v22;
        objc_msgSend(v20, "objectForKeyedSubscript:");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("chunks"));
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_msgSend(v25, "count");

        v28 = *(_QWORD *)(a1 + 248);
        v27 = *(_QWORD *)(a1 + 256);
        if (v27 == v28)
        {
          std::vector<unsigned long>::resize(v76, v26);
          v28 = *(_QWORD *)(a1 + 248);
          v27 = *(_QWORD *)(a1 + 256);
        }
        if (v26 != (v27 - v28) >> 3)
        {
          v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v61, "chunk size mismatch");
          __cxa_throw(v61, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        objc_msgSend(v72, "objectForKeyedSubscript:", v23);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "objectForKeyedSubscript:", CFSTR("chunks"));
        obj = (id)objc_claimAutoreleasedReturnValue();

        v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v80, v94, 16);
        if (v30)
        {
          v31 = 0;
          v32 = *(_QWORD *)v81;
          do
          {
            for (j = 0; j != v30; ++j)
            {
              if (*(_QWORD *)v81 != v32)
                objc_enumerationMutation(obj);
              v34 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * j);
              std::string::basic_string[abi:ne180100]<0>(&__ptr, (char *)objc_msgSend(objc_retainAutorelease(v23), "UTF8String"));
              __v.__first_ = &__ptr;
              v35 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 128), (const void **)&__ptr.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__v);
              v36 = objc_retainAutorelease(v34);
              std::string::basic_string[abi:ne180100]<0>(v78, (char *)objc_msgSend(v36, "UTF8String"));
              v37 = v35[9];
              v38 = v35[8];
              if (v38 >= v37)
              {
                v40 = v35[7];
                v41 = 0xAAAAAAAAAAAAAAABLL * (v38 - v40);
                v42 = v41 + 1;
                if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v43 = 0xAAAAAAAAAAAAAAABLL * (v37 - v40);
                if (2 * v43 > v42)
                  v42 = 2 * v43;
                if (v43 >= 0x555555555555555)
                  v44 = 0xAAAAAAAAAAAAAAALL;
                else
                  v44 = v42;
                __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v35 + 9);
                if (v44)
                  v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v44);
                else
                  v45 = 0;
                v46 = (std::string *)(v44 + 24 * v41);
                __v.__first_ = (std::__split_buffer<std::string>::pointer)v44;
                __v.__begin_ = v46;
                __v.__end_cap_.__value_ = (std::string *)(v44 + 24 * v45);
                v47 = *(_OWORD *)v78;
                v46->__r_.__value_.__r.__words[2] = v79;
                *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
                v78[1] = 0;
                v79 = 0;
                v78[0] = 0;
                __v.__end_ = v46 + 1;
                std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v35 + 7), &__v);
                v48 = v35[8];
                std::__split_buffer<std::string>::~__split_buffer(&__v);
                v49 = SHIBYTE(v79);
                v35[8] = v48;
                if (v49 < 0)
                  operator delete(v78[0]);
              }
              else
              {
                v39 = *(_OWORD *)v78;
                v38[2] = v79;
                *(_OWORD *)v38 = v39;
                v35[8] = v38 + 3;
              }
              if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__ptr.__r_.__value_.__l.__data_);
              *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = 0uLL;
              v50 = (const char *)objc_msgSend(objc_retainAutorelease(v36), "UTF8String");
              v51 = v50;
              if (*(char *)(a1 + 127) >= 0)
                v52 = *(unsigned __int8 *)(a1 + 127);
              else
                v52 = *(_QWORD *)(a1 + 112);
              v53 = strlen(v50);
              std::string::basic_string[abi:ne180100]((uint64_t)&__v, v52 + v53);
              if (SHIBYTE(__v.__end_) >= 0)
                p_v = (char *)&__v;
              else
                p_v = (char *)__v.__first_;
              if (v52)
              {
                if (*(char *)(a1 + 127) >= 0)
                  v55 = (const void *)(a1 + 104);
                else
                  v55 = *(const void **)(a1 + 104);
                memmove(p_v, v55, v52);
              }
              v56 = &p_v[v52];
              if (v53)
                memmove(v56, v51, v53);
              v56[v53] = 0;
              if (SHIBYTE(__v.__end_) >= 0)
                first = (const char *)&__v;
              else
                first = (const char *)__v.__first_;
              v58 = fopen(first, "rb");
              if (!v58)
              {
                v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v60, "Null file pointer");
                __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              fread(&__ptr, 4uLL, 4uLL, v58);
              fclose(v58);
              if (SHIBYTE(__v.__end_) < 0)
                operator delete(__v.__first_);
              *v7 += SHIDWORD(__ptr.__r_.__value_.__r.__words[1]);
              *(_QWORD *)(*v76 + 8 * v31) = v31;
              ++v31;
            }
            v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v80, v94, 16);
          }
          while (v30);
        }

        v20 = v72;
        v21 = v71;
      }
      v70 = objc_msgSend(v71, "countByEnumeratingWithState:objects:count:", &v84, v95, 16);
    }
    while (v70);
  }

  if ((*(_DWORD *)(a1 + 200) & 0x80000000) == 0)
  {
    NSLog(CFSTR("shuffle chunks! %d"), *(unsigned int *)(a1 + 200));
    std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u> &>(*(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 208));
  }
  *(_QWORD *)(a1 + 160) = 0;
  Espresso::f4_blob_async_data_source::load_chunk((Espresso::f4_blob_async_data_source *)a1, 0);
  Espresso::async_data_source::ready((Espresso::async_data_source *)a1);

  return a1;
}

void sub_1916DE70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,void **a22,Espresso::async_data_source *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void *v60;
  int v61;
  void *v62;
  uint64_t v63;
  void *v65;
  void *v66;

  if (a60 < 0)
    operator delete(__p);

  if (*(char *)(v63 - 105) < 0)
  {
    operator delete(*(void **)(v63 - 128));
    if ((v61 & 1) == 0)
    {
LABEL_8:

      v65 = *a22;
      if (*a22)
      {
        *((_QWORD *)a23 + 32) = v65;
        operator delete(v65);
      }
      v66 = (void *)*((_QWORD *)a23 + 28);
      if (v66)
      {
        *((_QWORD *)a23 + 29) = v66;
        operator delete(v66);
      }
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a11);
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)a23 + 23));
      std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a21, *((char **)a23 + 17));
      if (*((char *)a23 + 127) < 0)
        operator delete(*a20);
      Espresso::async_data_source::~async_data_source(a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v61)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v62);
  goto LABEL_8;
}

uint64_t Espresso::image_async_data_source::image_async_data_source(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t *v7;
  id v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  void *v38;
  void *v39;
  int v40;
  id v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  void **v48;
  __int128 v49;
  void **v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  void **v60;
  int end_high;
  std::string *v62;
  unsigned int v63;
  int v64;
  std::__shared_weak_count *begin;
  unint64_t *p_size;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  void *v71;
  int **v72;
  std::allocator<std::string> *v74;
  std::vector<std::string> *v75;
  id v76;
  id obj;
  int v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void ***v82;
  void *v83;
  _QWORD *v84;
  uint64_t i;
  void *v86;
  id v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  id v92;
  void *v93[2];
  std::string::size_type v94;
  char v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  std::string v103;
  std::string __p;
  std::__split_buffer<std::string> __v;
  _BYTE v106[128];
  _BYTE v107[128];
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v101 = *(_OWORD *)a2;
  v102 = *(_DWORD *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v103 = *(std::string *)(a2 + 24);
  if (*(char *)(a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  else
    __p = *(std::string *)(a2 + 48);
  Espresso::async_data_source::async_data_source(a1, &v101);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E2D90210;
  *(_OWORD *)(a1 + 104) = 0u;
  v72 = (int **)(a1 + 104);
  *(_OWORD *)(a1 + 120) = 0u;
  v75 = (std::vector<std::string> *)(a1 + 120);
  v82 = (void ***)(a1 + 144);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = a3;
  if (*((char *)a3 + 23) < 0)
    v7 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v100 = 0;
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v83, "contentsOfDirectoryAtPath:error:");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  if (*((char *)a3 + 23) < 0)
    a3 = (uint64_t *)*a3;
  NSLog(CFSTR("[image_async_data_source] %s (%d %d %d)"), a3, *(unsigned int *)(a2 + 8), *(unsigned int *)(a2 + 12), *(unsigned int *)(a2 + 16));
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  obj = v71;
  v81 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v96, v107, 16);
  if (v81)
  {
    v74 = (std::allocator<std::string> *)(a1 + 136);
    v79 = *(_QWORD *)v97;
    v84 = (_QWORD *)a1;
    do
    {
      for (i = 0; i != v81; ++i)
      {
        if (*(_QWORD *)v97 != v79)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v96 + 1) + 8 * i);
        v95 = 0;
        objc_msgSend(v80, "stringByAppendingPathComponent:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v83, "fileExistsAtPath:isDirectory:", v10, &v95);
        if ((objc_msgSend(v9, "hasPrefix:", CFSTR("__")) & 1) == 0)
        {
          v12 = v95 ? v11 : 0;
          if (v12 == 1)
          {
            objc_msgSend(v9, "lastPathComponent");
            v86 = v10;
            v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            std::string::basic_string[abi:ne180100]<0>(v93, (char *)objc_msgSend(v13, "UTF8String"));
            v14 = *(_QWORD *)(a1 + 128);
            v15 = *(_QWORD *)(a1 + 136);
            if (v14 >= v15)
            {
              v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (unint64_t)v75->__begin_) >> 3);
              v18 = v17 + 1;
              if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (unint64_t)v75->__begin_) >> 3);
              if (2 * v19 > v18)
                v18 = 2 * v19;
              if (v19 >= 0x555555555555555)
                v20 = 0xAAAAAAAAAAAAAAALL;
              else
                v20 = v18;
              __v.__end_cap_.__value_ = v74;
              if (v20)
                v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v20);
              else
                v21 = 0;
              v22 = (std::string *)(v20 + 24 * v17);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v20;
              __v.__begin_ = v22;
              __v.__end_cap_.__value_ = (std::string *)(v20 + 24 * v21);
              v23 = *(_OWORD *)v93;
              v22->__r_.__value_.__r.__words[2] = v94;
              *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
              v93[1] = 0;
              v94 = 0;
              v93[0] = 0;
              __v.__end_ = v22 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(v75, &__v);
              v24 = v84[16];
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v25 = SHIBYTE(v94);
              v84[16] = v24;
              a1 = (uint64_t)v84;
              if (v25 < 0)
                operator delete(v93[0]);
            }
            else
            {
              v16 = *(_OWORD *)v93;
              *(_QWORD *)(v14 + 16) = v94;
              *(_OWORD *)v14 = v16;
              v93[1] = 0;
              v94 = 0;
              v93[0] = 0;
              *(_QWORD *)(a1 + 128) = v14 + 24;
            }

            v26 = *(_QWORD *)(a1 + 128);
            v27 = (_QWORD *)(v26 - 24);
            if (*(char *)(v26 - 1) < 0)
              v27 = (_QWORD *)*v27;
            NSLog(CFSTR("category: %s"), v27);
            v92 = v8;
            objc_msgSend(v83, "contentsOfDirectoryAtPath:error:", v10, &v92);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v76 = v92;

            v90 = 0u;
            v91 = 0u;
            v88 = 0u;
            v89 = 0u;
            v87 = v28;
            v29 = objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", &v88, v106, 16);
            if (v29)
            {
              v78 = 0;
              v30 = *(_QWORD *)v89;
LABEL_42:
              v31 = 0;
              if (v78 <= 3000)
                v32 = 3000;
              else
                v32 = v78;
              v33 = (v32 - v78);
              v78 += v29;
              while (1)
              {
                if (*(_QWORD *)v89 != v30)
                  objc_enumerationMutation(v87);
                v34 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * v31);
                objc_msgSend(v34, "pathExtension");
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v35, "lowercaseString");
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                v37 = objc_msgSend(v36, "isEqualToString:", CFSTR("jpeg"));

                objc_msgSend(v34, "pathExtension");
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v38, "lowercaseString");
                v39 = (void *)objc_claimAutoreleasedReturnValue();
                v40 = objc_msgSend(v39, "isEqualToString:", CFSTR("jpg"));

                if (v37 | v40)
                {
                  objc_msgSend(v86, "stringByAppendingPathComponent:", v34);
                  v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                  v42 = (char *)objc_msgSend(v41, "UTF8String");
                  v43 = (_QWORD *)a1;
                  v44 = *(_QWORD *)(a1 + 128);
                  v45 = v43[15];
                  std::string::basic_string[abi:ne180100]<0>(&__v, v42);
                  v46 = -1 - 1431655765 * ((unint64_t)(v44 - v45) >> 3);
                  LODWORD(__v.__end_cap_.__value_) = v46;
                  v48 = (void **)v43[19];
                  v47 = v43[20];
                  a1 = (uint64_t)v43;
                  if ((unint64_t)v48 >= v47)
                  {
                    v50 = *v82;
                    v51 = ((char *)v48 - (char *)*v82) >> 5;
                    v52 = v51 + 1;
                    if ((unint64_t)(v51 + 1) >> 59)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v53 = v47 - (_QWORD)v50;
                    if (v53 >> 4 > v52)
                      v52 = v53 >> 4;
                    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFE0)
                      v54 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v54 = v52;
                    if (v54 >> 59)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v55 = (char *)operator new(32 * v54);
                    v56 = &v55[32 * v51];
                    *(_OWORD *)v56 = *(_OWORD *)&__v.__first_;
                    *((_QWORD *)v56 + 2) = __v.__end_;
                    v57 = &v55[32 * v54];
                    memset(&__v, 0, 24);
                    *((_DWORD *)v56 + 6) = v46;
                    v58 = v56 + 32;
                    if (v48 == v50)
                    {
                      a1 = (uint64_t)v84;
                      v84[18] = v56;
                      v84[19] = v58;
                      v84[20] = v57;
                    }
                    else
                    {
                      a1 = (uint64_t)v84;
                      do
                      {
                        v59 = *((_OWORD *)v48 - 2);
                        *((_QWORD *)v56 - 2) = *(v48 - 2);
                        *((_OWORD *)v56 - 2) = v59;
                        *(v48 - 3) = 0;
                        *(v48 - 2) = 0;
                        *(v48 - 4) = 0;
                        *((_DWORD *)v56 - 2) = *((_DWORD *)v48 - 2);
                        v56 -= 32;
                        v48 -= 4;
                      }
                      while (v48 != v50);
                      v48 = (void **)v84[18];
                      v60 = (void **)v84[19];
                      v84[18] = v56;
                      v84[19] = v58;
                      v84[20] = v57;
                      while (v60 != v48)
                      {
                        if (*((char *)v60 - 9) < 0)
                          operator delete(*(v60 - 4));
                        v60 -= 4;
                      }
                    }
                    if (v48)
                      operator delete(v48);
                    end_high = SHIBYTE(__v.__end_);
                    *(_QWORD *)(a1 + 152) = v58;
                    if (end_high < 0)
                      operator delete(__v.__first_);
                  }
                  else
                  {
                    v49 = *(_OWORD *)&__v.__first_;
                    v48[2] = __v.__end_;
                    *(_OWORD *)v48 = v49;
                    memset(&__v, 0, 24);
                    *((_DWORD *)v48 + 6) = __v.__end_cap_.__value_;
                    v43[19] = v48 + 4;
                  }

                }
                if (v31 == v33)
                  break;
                if (++v31 == v29)
                {
                  v29 = objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", &v88, v106, 16);
                  if (v29)
                    goto LABEL_42;
                  break;
                }
              }
            }

            v8 = v76;
            v10 = v86;
          }
        }

      }
      v81 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v96, v107, 16);
    }
    while (v81);
  }

  if (a4 >= 1)
  {
    v62 = (std::string *)operator new(0x20uLL);
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DC27F0;
    v63 = a4 - 0x7FFFFFFF;
    if (a4 < 0x7FFFFFFF)
      v63 = a4;
    if (v63 <= 1)
      v64 = 1;
    else
      v64 = v63;
    LODWORD(v62[1].__r_.__value_.__l.__data_) = v64;
    __v.__first_ = v62 + 1;
    __v.__begin_ = v62;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v72, (__int128 *)&__v);
    begin = (std::__shared_weak_count *)__v.__begin_;
    if (__v.__begin_)
    {
      p_size = &__v.__begin_->__r_.__value_.__l.__size_;
      do
        v67 = __ldaxr(p_size);
      while (__stlxr(v67 - 1, p_size));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
        std::__shared_weak_count::__release_weak(begin);
      }
    }
    **v72 = v64;
  }
  v68 = *(uint64_t **)(a1 + 144);
  v69 = (uint64_t)(*(_QWORD *)(a1 + 152) - (_QWORD)v68) >> 5;
  if (*((char *)v68 + 23) < 0)
    v68 = (uint64_t *)*v68;
  NSLog(CFSTR("[image_async_data_source] images=%zu 0=%s"), v69, v68);
  Espresso::image_async_data_source::reset((Espresso::image_async_data_source *)a1);
  Espresso::async_data_source::ready((Espresso::async_data_source *)a1);

  return a1;
}

void sub_1916DF1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a63 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::multikey_data_source::multikey_data_source(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t i;
  id v16;
  void *v17;
  void *v18;
  BOOL v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  int v38;
  void *v39;
  const char *v40;
  const char *v41;
  size_t size;
  size_t v43;
  std::string *v44;
  std::string *v45;
  char *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  int v50;
  const char *v51;
  const char *v52;
  size_t v53;
  size_t v54;
  std::string *v55;
  std::string *v56;
  char *v57;
  _QWORD *v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  unint64_t *v63;
  std::runtime_error *v65;
  const std::string::value_type *v66;
  std::string *v67;
  __int128 v68;
  std::runtime_error *exception;
  std::runtime_error *v70;
  const std::string::value_type *v71;
  std::string *v72;
  __int128 v73;
  id v74;
  void *v75;
  _OWORD *v76;
  _OWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unsigned int v82;
  __int128 v83;
  std::string v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  id v89;
  std::string v90;
  std::string __p;
  std::string v92;
  std::string v93;
  std::string v94;
  _BYTE v95[128];
  uint64_t v96;

  v3 = a3;
  v5 = (_QWORD *)a1;
  v96 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E2D87738;
  *(_QWORD *)(a1 + 16) = 0;
  v80 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (*((char *)a3 + 23) < 0)
    a3 = (uint64_t *)*a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringByDeletingLastPathComponent");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(&v90, (char *)objc_msgSend(v7, "UTF8String"));

  std::string::append(&v90, "/");
  v8 = v3;
  if (*((char *)v3 + 23) < 0)
    v8 = (uint64_t *)*v3;
  NSLog(CFSTR("[multikey_data_source] loading '%s'"), v8);
  v9 = v3;
  if (*((char *)v3 + 23) < 0)
    v9 = (uint64_t *)*v3;
  v10 = (void *)MEMORY[0x1E0C99D50];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "dataWithContentsOfFile:", v11);
  v75 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v75)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v92);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v89 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v75, 0, &v89);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v74 = v89;
  if (!v12)
  {
    v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Can't load JSON ");
    objc_msgSend(v74, "localizedDescription");
    v71 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    v72 = std::string::append(&__p, v71);
    v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v70, &v92);
    __cxa_throw(v70, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v13 = v12;
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v85, v95, 16);
  if (v14)
  {
    v79 = *(_QWORD *)v86;
    v76 = (_OWORD *)(a2 + 48);
    v77 = (_OWORD *)(a2 + 24);
    v78 = v5;
    do
    {
      v81 = v14;
      for (i = 0; i != v81; ++i)
      {
        if (*(_QWORD *)v86 != v79)
          objc_enumerationMutation(v13);
        v16 = *(id *)(*((_QWORD *)&v85 + 1) + 8 * i);
        objc_msgSend(v13, "objectForKeyedSubscript:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("shuffle_seed"));
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v18 == 0;

        if (v19)
        {
          v82 = -1;
        }
        else
        {
          objc_msgSend(v13, "objectForKeyedSubscript:", v16);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("shuffle_seed"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v82 = objc_msgSend(v21, "intValue");

        }
        objc_msgSend(v13, "objectForKeyedSubscript:", v16);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "objectForKeyedSubscript:", CFSTR("path"));
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v13, "objectForKeyedSubscript:", v16);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("type"));
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        NSLog(CFSTR("type %@ %@"), v25, v13);

        objc_msgSend(v13, "objectForKeyedSubscript:", v16);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("width"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)(a2 + 8) = objc_msgSend(v27, "intValue");

        objc_msgSend(v13, "objectForKeyedSubscript:", v16);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "objectForKeyedSubscript:", CFSTR("height"));
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)(a2 + 12) = objc_msgSend(v29, "intValue");

        objc_msgSend(v13, "objectForKeyedSubscript:", v16);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("channels"));
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)(a2 + 16) = objc_msgSend(v31, "intValue");

        v32 = (_QWORD *)v5[2];
        v33 = (_QWORD *)v5[3];
        if (v33 == v32)
        {
          if (v5[4] == (_QWORD)v33)
          {
            v35 = operator new(0x10uLL);
            *v35 = 0;
            v35[1] = 0;
            v5[2] = v35;
            v5[3] = v35 + 2;
            v5[4] = v35 + 2;
            if (v33)
              operator delete(v33);
          }
          else
          {
            *v33 = 0;
            v33[1] = 0;
            v5[3] = v33 + 2;
          }
        }
        else if ((unint64_t)((char *)v33 - (char *)v32) >= 0x11)
        {
          v34 = v32 + 2;
          while (v33 != v34)
          {
            v33 -= 2;
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v33);
          }
          v5[3] = v34;
        }
        objc_msgSend(v13, "objectForKeyedSubscript:", v16);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("type"));
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = objc_msgSend(v37, "isEqualToString:", CFSTR("f4"));

        if (v38)
        {
          v39 = v23;
          v40 = (const char *)objc_msgSend(objc_retainAutorelease(v23), "UTF8String");
          v41 = v40;
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
          else
            size = v90.__r_.__value_.__l.__size_;
          v43 = strlen(v40);
          std::string::basic_string[abi:ne180100]((uint64_t)&v84, size + v43);
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v44 = &v84;
          else
            v44 = (std::string *)v84.__r_.__value_.__r.__words[0];
          if (size)
          {
            if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v45 = &v90;
            else
              v45 = (std::string *)v90.__r_.__value_.__r.__words[0];
            memmove(v44, v45, size);
          }
          v46 = (char *)v44 + size;
          if (v43)
            memmove(v46, v41, v43);
          v46[v43] = 0;
          v47 = operator new(0x128uLL);
          v47[1] = 0;
          v47[2] = 0;
          *v47 = &off_1E2DBD578;
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          LODWORD(v92.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 16);
          if (*(char *)(a2 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
          }
          else
          {
            *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *v77;
            v93.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
          }
          if (*(char *)(a2 + 71) < 0)
          {
            std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
          }
          else
          {
            *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v76;
            v94.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
          }
          __p = v84;
          memset(&v84, 0, sizeof(v84));
          Espresso::f4_blob_async_data_source::f4_blob_async_data_source((uint64_t)(v47 + 3), (uint64_t)&v92, (uint64_t *)&__p, v82);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v94.__r_.__value_.__l.__data_);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
          *(_QWORD *)&v59 = v47 + 3;
          *((_QWORD *)&v59 + 1) = v47;
          v60 = *(std::__shared_weak_count **)(*v80 + 8);
          *(_OWORD *)*v80 = v59;
          v5 = v78;
          if (v60)
          {
            p_shared_owners = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldaxr(p_shared_owners);
            while (__stlxr(v62 - 1, p_shared_owners));
            goto LABEL_86;
          }
        }
        else
        {
          objc_msgSend(v13, "objectForKeyedSubscript:", v16);
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "objectForKeyedSubscript:", CFSTR("type"));
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          v50 = objc_msgSend(v49, "isEqualToString:", CFSTR("img"));

          if (!v50)
          {
            v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&__p, "type not supported ");
            objc_msgSend(v13, "objectForKeyedSubscript:", v16);
            objc_msgSend((id)objc_claimAutoreleasedReturnValue(), "objectForKeyedSubscript:", CFSTR("type"));
            v66 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
            v67 = std::string::append(&__p, v66);
            v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
            v92.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v68;
            v67->__r_.__value_.__l.__size_ = 0;
            v67->__r_.__value_.__r.__words[2] = 0;
            v67->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v65, &v92);
            __cxa_throw(v65, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v39 = v23;
          v51 = (const char *)objc_msgSend(objc_retainAutorelease(v23), "UTF8String");
          v52 = v51;
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
          else
            v53 = v90.__r_.__value_.__l.__size_;
          v54 = strlen(v51);
          std::string::basic_string[abi:ne180100]((uint64_t)&v84, v53 + v54);
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = &v84;
          else
            v55 = (std::string *)v84.__r_.__value_.__r.__words[0];
          if (v53)
          {
            if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v56 = &v90;
            else
              v56 = (std::string *)v90.__r_.__value_.__r.__words[0];
            memmove(v55, v56, v53);
          }
          v57 = (char *)v55 + v53;
          if (v54)
            memmove(v57, v52, v54);
          v57[v54] = 0;
          v58 = operator new(0xC8uLL);
          v58[1] = 0;
          v58[2] = 0;
          *v58 = &off_1E2DBCE78;
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          LODWORD(v92.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 16);
          if (*(char *)(a2 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
          }
          else
          {
            *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *v77;
            v93.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
          }
          if (*(char *)(a2 + 71) < 0)
          {
            std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
          }
          else
          {
            *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v76;
            v94.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
          }
          __p = v84;
          memset(&v84, 0, sizeof(v84));
          Espresso::image_async_data_source::image_async_data_source((uint64_t)(v58 + 3), (uint64_t)&v92, (uint64_t *)&__p, v82);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v94.__r_.__value_.__l.__data_);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
          *(_QWORD *)&v83 = v58 + 3;
          *((_QWORD *)&v83 + 1) = v58;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*v80, &v83);
          v60 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
          v5 = v78;
          if (*((_QWORD *)&v83 + 1))
          {
            v63 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
            do
              v62 = __ldaxr(v63);
            while (__stlxr(v62 - 1, v63));
LABEL_86:
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);

      }
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v85, v95, 16);
    }
    while (v14);
  }

  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1916DFDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  void *v57;
  int v58;

  if (a56 < 0)
    operator delete(__p);

  if (a49 < 0)
  {
    operator delete(a44);
    if ((v58 & 1) == 0)
    {
LABEL_8:

      if (a43 < 0)
        operator delete(a38);
      a38 = a21;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
      _Unwind_Resume(a1);
    }
  }
  else if (!v58)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v57);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<Espresso::image_async_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCE78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::image_async_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCE78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::image_async_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::f4_blob_async_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD578;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::f4_blob_async_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD578;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::f4_blob_async_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void Espresso::mxnet_imagebinary_reader::mxnet_imagebinary_reader(_QWORD *a1, uint64_t a2)
{
  std::runtime_error *exception;
  __int128 v5;
  int v6;
  std::string v7;
  std::string __p;

  v5 = *(_OWORD *)a2;
  v6 = *(_DWORD *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v7 = *(std::string *)(a2 + 24);
  if (*(char *)(a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  else
    __p = *(std::string *)(a2 + 48);
  Espresso::async_data_source::async_data_source((uint64_t)a1, &v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  *a1 = &off_1E2D91FA0;
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "MXNet Image Binary Reader not found at load time");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

{
  Espresso::mxnet_imagebinary_reader::mxnet_imagebinary_reader(a1, a2);
}

void sub_1916E0290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  Espresso::async_data_source *v23;

  Espresso::async_data_source::~async_data_source(v23);
  _Unwind_Resume(a1);
}

void Espresso::load_data_source(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  const std::string::value_type *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  _QWORD *v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const char *v23;
  FILE *v24;
  uint64_t *v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int16 *v38;
  std::runtime_error *v40;
  int v41;
  int v42;
  _QWORD *v44;
  std::runtime_error *exception;
  __int128 v46;
  char v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  __int128 v50;
  int v51;
  std::string v52;
  std::string __p;
  std::string __str;
  void *v55;
  uint64_t v56;
  char v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;

  *a3 = 0;
  a3[1] = 0;
  if (*(char *)(a1 + 23) >= 0)
    v6 = (const std::string::value_type *)a1;
  else
    v6 = *(const std::string::value_type **)a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "pathExtension");
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(&v55, (char *)objc_msgSend(v8, "UTF8String"));

  memset(&__str, 0, sizeof(__str));
  v50 = 0x100uLL;
  v51 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v52, "data");
  std::string::basic_string[abi:ne180100]<0>(&__p, "labels");
  v9 = *a2 + 56;
  v59.__r_.__value_.__r.__words[0] = 0;
  v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, 0, &v59);
  std::string::operator=(&__str, (const std::string *)v10[3]);
  v11 = *a2 + 136;
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)&__str, (__int128 **)&v59);
  v13 = *((_QWORD *)v12 + 5);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  v48 = v13;
  v49 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  *((_QWORD *)&v50 + 1) = *(_QWORD *)(v13 + 8);
  v51 = *(_DWORD *)(v13 + 16);
  std::string::operator=(&v52, &__str);
  v47 = 0;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "fileExistsAtPath:isDirectory:", v7, &v47);

  if (v47)
  {
    v18 = operator new(0xC8uLL);
    v18[1] = 0;
    v18[2] = 0;
    *v18 = &off_1E2DBCE78;
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v50;
    LODWORD(v59.__r_.__value_.__r.__words[2]) = v51;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v60, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
    else
      v60 = v52;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v61, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v61 = __p;
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v58 = *(std::string *)a1;
    Espresso::image_async_data_source::image_async_data_source((uint64_t)(v18 + 3), (uint64_t)&v59, (uint64_t *)&v58, -1);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    *(_QWORD *)&v46 = v18 + 3;
    *((_QWORD *)&v46 + 1) = v18;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, &v46);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
    if (*((_QWORD *)&v46 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    goto LABEL_48;
  }
  if ((v57 & 0x80000000) == 0)
  {
    if (v57 == 2)
    {
      v19 = (unsigned __int16)v55;
      goto LABEL_33;
    }
    if (v57 != 3)
    {
LABEL_81:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v59);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if ((unsigned __int16)v55 != 28778 || BYTE2(v55) != 103)
    {
      v38 = (unsigned __int16 *)&v55;
LABEL_75:
      v41 = *v38;
      v42 = *((unsigned __int8 *)v38 + 2);
      if (v41 == 25970 && v42 == 99)
      {
        v44 = operator new(0x80uLL);
        v44[1] = 0;
        v44[2] = 0;
        *v44 = &off_1E2DBD2D8;
        std::allocator<Espresso::mxnet_imagebinary_reader>::construct[abi:ne180100]<Espresso::mxnet_imagebinary_reader,Espresso::async_data_source::options &,std::string const&,int>(v44 + 3, &v50, a1);
      }
      goto LABEL_81;
    }
LABEL_74:
    v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, "load_data_source: Loading single image not implemented");
    __cxa_throw(v40, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v56 != 2)
  {
    if (v56 != 3)
      goto LABEL_81;
    v38 = (unsigned __int16 *)v55;
    if (*(_WORD *)v55 != 28778 || *((_BYTE *)v55 + 2) != 103)
      goto LABEL_75;
    goto LABEL_74;
  }
  v19 = *(unsigned __int16 *)v55;
LABEL_33:
  if (v19 != 13414)
    goto LABEL_81;
  *(_OWORD *)&v58.__r_.__value_.__r.__words[1] = 0uLL;
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58.__r_.__value_.__l.__size_;
  if (*(char *)(a1 + 23) >= 0)
    v23 = (const char *)a1;
  else
    v23 = *(const char **)a1;
  v24 = fopen(v23, "rb");
  Espresso::debug::read_blob_f4((Espresso::debug *)&v59, v24);
  fclose(v24);
  *(_QWORD *)&v46 = &v52;
  v25 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v58, &v52, (__int128 **)&v46);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v25 + 7), (__int128 *)&v59);
  size = (std::__shared_weak_count *)v59.__r_.__value_.__l.__size_;
  if (v59.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(v59.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v29 = operator new(0x70uLL);
  v29[1] = 0;
  v29[2] = 0;
  *v29 = &off_1E2DBD4D0;
  std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)&v59, &v58);
  Espresso::simple_blobs_data_source::simple_blobs_data_source((uint64_t)(v29 + 3), &v59, 0xFFFFFFFF);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy((_QWORD *)v59.__r_.__value_.__l.__size_);
  *(_QWORD *)&v30 = v29 + 3;
  *((_QWORD *)&v30 + 1) = v29;
  v31 = (std::__shared_weak_count *)a3[1];
  *(_OWORD *)a3 = v30;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy((_QWORD *)v58.__r_.__value_.__l.__size_);
LABEL_48:
  v34 = v49;
  if (v49)
  {
    v35 = (unint64_t *)&v49->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v57 < 0)
    operator delete(v55);

}

void sub_1916E08F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  void *v47;

  std::__shared_weak_count::~__shared_weak_count(v45);
  operator delete(v47);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  Espresso::async_data_source::options::~options(&a14);
  if (a31 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v44);
  _Unwind_Resume(a1);
}

void std::allocator<Espresso::mxnet_imagebinary_reader>::construct[abi:ne180100]<Espresso::mxnet_imagebinary_reader,Espresso::async_data_source::options &,std::string const&,int>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  std::string v6;
  __int128 v7;
  int v8;
  std::string v9;
  std::string v10;

  v7 = *a2;
  v8 = *((_DWORD *)a2 + 4);
  if (*((char *)a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  else
    v9 = *(std::string *)((_BYTE *)a2 + 1);
  if (*((char *)a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  else
    v10 = *(std::string *)((_BYTE *)a2 + 2);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v6 = *(std::string *)a3;
  Espresso::mxnet_imagebinary_reader::mxnet_imagebinary_reader(a1, (uint64_t)&v7);
}

void sub_1916E0B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::mxnet_imagebinary_reader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD2D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::mxnet_imagebinary_reader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD2D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::mxnet_imagebinary_reader>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::simple_blobs_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD4D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::simple_blobs_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD4D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::simple_blobs_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void Espresso::pass_bind_labels::~pass_bind_labels(Espresso::pass_bind_labels *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_bind_labels::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  char v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  char *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  const void *v72;
  char *v73;
  char *v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  const void *v79;
  char *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  const void *v99;
  char *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  const void *v115;
  char *v116;
  const void *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  void *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  const void *v136;
  __int128 v137;
  void *v138;
  uint64_t v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  char v150;
  char *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;
  std::__shared_weak_count *v155;
  std::string v156;
  std::string __str;
  const void *v158;
  std::__shared_weak_count *v159;
  uint64_t *v160;
  uint64_t *v161;
  unint64_t v162;

  v4 = 0;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v5 = 1;
  do
  {
    v150 = v5;
    if (v160 != v161)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Stack not empty after end of pass head=%zu size=%zu", *v160, v161 - v160);
    v6 = *((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 5) != v6)
    {
      v7 = 0;
      while (1)
      {
        v8 = *(_QWORD *)(v6 + 16 * v7);
        v9 = *(const void **)(v8 + 64);
        v10 = *(std::__shared_weak_count **)(v8 + 72);
        v158 = v9;
        v159 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
          v6 = *((_QWORD *)a1 + 4);
          v8 = *(_QWORD *)(v6 + 16 * v7);
        }
        if (*(char *)(v8 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v8 + 16), *(_QWORD *)(v8 + 24));
          v6 = *((_QWORD *)a1 + 4);
        }
        else
        {
          __str = *(std::string *)(v8 + 16);
        }
        if (v7 >= ((*((_QWORD *)a1 + 5) - v6) >> 4) - 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v156, "");
        }
        else
        {
          v13 = *(_QWORD *)(v6 + 16 * v7 + 16);
          if (*(char *)(v13 + 39) < 0)
            std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)(v13 + 16), *(_QWORD *)(v13 + 24));
          else
            v156 = *(std::string *)(v13 + 16);
        }
        if (!v9)
          break;
        if (!v14)
        {
          if (v23)
          {
            if (v10)
            {
              v24 = (unint64_t *)&v10->__shared_owners_;
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
            }
            std::string::operator=((std::string *)(v23 + 328), &__str);
            v26 = v161;
            if ((unint64_t)v161 >= v162)
            {
              v39 = v160;
              v40 = v161 - v160;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v42 = v162 - (_QWORD)v160;
              if ((uint64_t)(v162 - (_QWORD)v160) >> 2 > v41)
                v41 = v42 >> 2;
              v32 = (unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8;
              v43 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v32)
                v43 = v41;
              if (v43)
              {
                v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v43);
                v39 = v160;
                v26 = v161;
              }
              else
              {
                v44 = 0;
              }
              v66 = (uint64_t *)(v43 + 8 * v40);
              *v66 = v7;
              v27 = v66 + 1;
              while (v26 != v39)
              {
                v67 = *--v26;
                *--v66 = v67;
              }
              v160 = v66;
              v161 = v27;
              v162 = v43 + 8 * v44;
              if (v39)
                operator delete(v39);
            }
            else
            {
              *v161 = v7;
              v27 = v26 + 1;
            }
            v161 = v27;
            if (v10)
            {
              v68 = (unint64_t *)&v10->__shared_owners_;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            goto LABEL_109;
          }
          {
            if (v10)
            {
              v35 = (unint64_t *)&v10->__shared_owners_;
              do
                v36 = __ldxr(v35);
              while (__stxr(v36 + 1, v35));
            }
            v37 = v161;
            if ((unint64_t)v161 >= v162)
            {
              v60 = v160;
              v61 = v161 - v160;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v63 = v162 - (_QWORD)v160;
              if ((uint64_t)(v162 - (_QWORD)v160) >> 2 > v62)
                v62 = v63 >> 2;
              v32 = (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8;
              v64 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v32)
                v64 = v62;
              if (v64)
              {
                v64 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v64);
                v60 = v160;
                v37 = v161;
              }
              else
              {
                v65 = 0;
              }
              v121 = (uint64_t *)(v64 + 8 * v61);
              *v121 = v7;
              v38 = v121 + 1;
              while (v37 != v60)
              {
                v122 = *--v37;
                *--v121 = v122;
              }
              v160 = v121;
              v161 = v38;
              v162 = v64 + 8 * v65;
              if (v60)
                operator delete(v60);
            }
            else
            {
              *v161 = v7;
              v38 = v37 + 1;
            }
            v161 = v38;
            if (v10)
            {
              v21 = (unint64_t *)&v10->__shared_owners_;
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            goto LABEL_109;
          }
          {
            v153 = v10;
            if (v10)
            {
              v47 = (unint64_t *)&v10->__shared_owners_;
              do
                v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }
            v49 = *((_QWORD *)a1 + 4);
            if (v7 >= (*((_QWORD *)a1 + 5) - v49) >> 4)
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Else at end of program");
            v50 = *(_QWORD *)(v49 + 16 * *(v161 - 1));
            v51 = *(const void **)(v50 + 64);
            if (!v51
            {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the label to bind");
            }
            v53 = *(std::__shared_weak_count **)(v50 + 72);
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldxr(v54);
              while (__stxr(v55 + 1, v54));
            }
            std::string::operator=((std::string *)(v52 + 8), &v156);
            if (v53)
            {
              v56 = (unint64_t *)&v53->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            v58 = v161;
            v59 = (unint64_t *)(v161 - 1);
            v161 = (uint64_t *)v59;
            if ((unint64_t)v59 >= v162)
            {
              v123 = v160;
              v124 = ((char *)v59 - (char *)v160) >> 3;
              v125 = v124 + 1;
              if ((unint64_t)(v124 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v126 = v162 - (_QWORD)v160;
              if ((uint64_t)(v162 - (_QWORD)v160) >> 2 > v125)
                v125 = v126 >> 2;
              v32 = (unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8;
              v127 = 0x1FFFFFFFFFFFFFFFLL;
              if (!v32)
                v127 = v125;
              if (v127)
              {
                v127 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v127);
                v123 = v160;
                v59 = (unint64_t *)v161;
              }
              else
              {
                v128 = 0;
              }
              v129 = (uint64_t *)(v127 + 8 * v124);
              *v129 = v7;
              v58 = v129 + 1;
              while (v59 != (unint64_t *)v123)
              {
                v130 = *--v59;
                *--v129 = v130;
              }
              v160 = v129;
              v161 = v58;
              v162 = v127 + 8 * v128;
              if (v123)
                operator delete(v123);
            }
            else
            {
              *v59 = v7;
            }
            v161 = v58;
            goto LABEL_25;
          }
          v153 = 0;
          if (v108)
          {
            v109 = v108;
            v151 = v108;
            v152 = v10;
            if (v10)
            {
              v110 = (unint64_t *)&v10->__shared_owners_;
              do
                v111 = __ldxr(v110);
              while (__stxr(v111 + 1, v110));
            }
            v112 = v161;
            v113 = 16 * *(v161 - 1);
            v114 = *(_QWORD *)(*((_QWORD *)a1 + 4) + v113);
            v115 = *(const void **)(v114 + 64);
            if (!v115
            {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the label to bind");
            }
            v117 = v116;
            v118 = *(std::__shared_weak_count **)(v114 + 72);
            if (v118)
            {
              v119 = (unint64_t *)&v118->__shared_owners_;
              do
                v120 = __ldxr(v119);
              while (__stxr(v120 + 1, v119));
              v112 = v161;
            }
            v161 = v112 - 1;
            if (v116[31] < 0)
            {
              if (!*((_QWORD *)v116 + 2))
              {
LABEL_204:
                std::string::operator=((std::string *)(v116 + 8), &__str);
                if (v131 && v118)
                {
                  v132 = (unint64_t *)&v118->__shared_owners_;
                  do
                    v133 = __ldxr(v132);
                  while (__stxr(v133 + 1, v132));
                  v109[281] = 1;
                  do
                    v134 = __ldaxr(v132);
                  while (__stlxr(v134 - 1, v132));
                  if (!v134)
                  {
                    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                    std::__shared_weak_count::__release_weak(v118);
                  }
                }
                else
                {
                  v109[281] = v131 != 0;
                }
                if (v151[281])
                {
                  std::string::operator=((std::string *)v151 + 12, (const std::string *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + v113) + 16));
                  v135 = *(_QWORD *)(*((_QWORD *)a1 + 4) + v113);
                  v136 = *(const void **)(v135 + 64);
                  v137 = 0uLL;
                  if (v136)
                  {
                    v137 = 0uLL;
                    if (v138)
                    {
                      v139 = *(_QWORD *)(v135 + 72);
                      *(_QWORD *)&v137 = v138;
                      *((_QWORD *)&v137 + 1) = v139;
                      if (v139)
                      {
                        v140 = (unint64_t *)(v139 + 8);
                        do
                          v141 = __ldxr(v140);
                        while (__stxr(v141 + 1, v140));
                      }
                    }
                  }
                  v142 = (std::__shared_weak_count *)*((_QWORD *)v151 + 40);
                  *(_OWORD *)(v151 + 312) = v137;
                  if (v142)
                  {
                    v143 = (unint64_t *)&v142->__shared_owners_;
                    do
                      v144 = __ldaxr(v143);
                    while (__stlxr(v144 - 1, v143));
                    if (!v144)
                    {
                      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                      std::__shared_weak_count::__release_weak(v142);
                    }
                  }
                }
              }
            }
            else if (!v116[31])
            {
              goto LABEL_204;
            }
            if (v118)
            {
              v145 = (unint64_t *)&v118->__shared_owners_;
              do
                v146 = __ldaxr(v145);
              while (__stlxr(v146 - 1, v145));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            if (v152)
            {
              v147 = (unint64_t *)&v152->__shared_owners_;
              do
                v148 = __ldaxr(v147);
              while (__stlxr(v148 - 1, v147));
              if (!v148)
              {
                ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                std::__shared_weak_count::__release_weak(v152);
              }
            }
          }
LABEL_25:
          if (v153)
          {
            v19 = (unint64_t *)&v153->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
LABEL_109:
          if ((v4 & 1) != 0)
            goto LABEL_110;
          goto LABEL_134;
        }
        if (v10)
        {
          v15 = (unint64_t *)&v10->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        std::string::operator=((std::string *)(v14 + 296), &__str);
        v17 = v161;
        if ((unint64_t)v161 >= v162)
        {
          v28 = v160;
          v29 = v161 - v160;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v31 = v162 - (_QWORD)v160;
          if ((uint64_t)(v162 - (_QWORD)v160) >> 2 > v30)
            v30 = v31 >> 2;
          v32 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8;
          v33 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v32)
            v33 = v30;
          if (v33)
          {
            v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v33);
            v28 = v160;
            v17 = v161;
          }
          else
          {
            v34 = 0;
          }
          v45 = (uint64_t *)(v33 + 8 * v29);
          *v45 = v7;
          v18 = v45 + 1;
          while (v17 != v28)
          {
            v46 = *--v17;
            *--v45 = v46;
          }
          v160 = v45;
          v161 = v18;
          v162 = v33 + 8 * v34;
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v161 = v7;
          v18 = v17 + 1;
        }
        v161 = v18;
        if (!v10)
          goto LABEL_109;
        v70 = (unint64_t *)&v10->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (v71)
          goto LABEL_109;
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if ((v4 & 1) != 0)
        {
LABEL_110:
          v72 = v158;
          if (v158)
          {
            if (v73)
            {
              v74 = v73;
              v155 = v159;
              if (v159)
              {
                v75 = (unint64_t *)&v159->__shared_owners_;
                do
                  v76 = __ldxr(v75);
                while (__stxr(v76 + 1, v75));
              }
              v77 = *(_DWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v73 + 320))(v73);
              if ((v77 & 0x80000000) == 0)
              {
                v78 = *(_QWORD *)(*((_QWORD *)a1 + 4)
                                + 16 * v160[((unint64_t)((char *)v161 - (char *)v160) >> 3) + ~v77]);
                v79 = *(const void **)(v78 + 64);
                if (!v79
                {
                  Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the label to bind");
                }
                v81 = *(std::__shared_weak_count **)(v78 + 72);
                if (v81)
                {
                  v82 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v83 = __ldxr(v82);
                  while (__stxr(v83 + 1, v82));
                }
                std::string::operator=((std::string *)(v74 + 296), (const std::string *)(v80 + 8));
                if (v81)
                {
                  v84 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v85 = __ldaxr(v84);
                  while (__stlxr(v85 - 1, v84));
                  if (!v85)
                  {
                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                    v86 = v81;
                    goto LABEL_167;
                  }
                }
              }
            }
            else
            {
              v155 = 0;
              if (v92)
              {
                v93 = v159;
                v154 = v159;
                if (v159)
                {
                  v94 = (unint64_t *)&v159->__shared_owners_;
                  do
                    v95 = __ldxr(v94);
                  while (__stxr(v95 + 1, v94));
                }
                v96 = (*(uint64_t (**)(void *))(*(_QWORD *)v92 + 320))(v92);
                v97 = *(_DWORD *)(v96 + 48);
                if ((v97 & 0x80000000) == 0)
                {
                  v98 = *(_QWORD *)(*((_QWORD *)a1 + 4)
                                  + 16 * v160[((unint64_t)((char *)v161 - (char *)v160) >> 3) + ~v97]);
                  v99 = *(const void **)(v98 + 64);
                  if (!v99
                  {
                    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the label to bind");
                  }
                  v101 = *(std::__shared_weak_count **)(v98 + 72);
                  if (v101)
                  {
                    v102 = (unint64_t *)&v101->__shared_owners_;
                    do
                      v103 = __ldxr(v102);
                    while (__stxr(v103 + 1, v102));
                  }
                  std::string::operator=((std::string *)v96, (const std::string *)(v100 + 8));
                  if (v101)
                  {
                    v104 = (unint64_t *)&v101->__shared_owners_;
                    do
                      v105 = __ldaxr(v104);
                    while (__stlxr(v105 - 1, v104));
                    if (!v105)
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                  }
                  if (v7 >= (uint64_t)(*((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4)) >> 4)
                    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unbound branch at end of program");
                  std::string::operator=((std::string *)(v96 + 24), &v156);
                  v93 = v154;
                }
                if (v93)
                {
                  v106 = (unint64_t *)&v93->__shared_owners_;
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                    v86 = v93;
LABEL_167:
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
              }
            }
          }
          else
          {
            v155 = 0;
          }
          if (v155)
          {
            v87 = (unint64_t *)&v155->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }
        }
LABEL_134:
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v89 = v159;
        if (v159)
        {
          v90 = (unint64_t *)&v159->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        ++v7;
        v6 = *((_QWORD *)a1 + 4);
        if (v7 >= (*((_QWORD *)a1 + 5) - v6) >> 4)
          goto LABEL_234;
      }
      v153 = 0;
      goto LABEL_25;
    }
LABEL_234:
    v5 = 0;
    v4 = 1;
  }
  while ((v150 & 1) != 0);
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (v160)
  {
    v161 = v160;
    operator delete(v160);
  }
}

void sub_1916E197C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 128);
  v37 = *(void **)(v35 - 112);
  if (v37)
  {
    *(_QWORD *)(v35 - 104) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::general_padding_kernel::~general_padding_kernel(Espresso::MPSGraphEngine::Kernels::general_padding_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::general_padding_kernel::is_valid_for_engine(unsigned __int16 *a1, int64x2_t **a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unsigned int v21;
  int64x2_t *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  std::string v26;
  int64x2_t *v27[2];
  int64x2_t *v28;
  std::__shared_weak_count *v29;
  std::string v30;
  std::string __p;
  _BYTE v32[24];
  _BYTE v33[32];
  std::__shared_weak_count *v34;
  int64x2_t *v35;
  std::__shared_weak_count *v36;

  if (a3[1] - *a3 != 64 || a3[4] - a3[3] != 64)
  {
    v13 = (std::__shared_weak_count *)a2[1];
    v35 = *a2;
    v36 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "[Dispatch::MPSGraph::general_padding_kernel] unsupported: invalid number of inputs or outputs.  Only 1 & 1 supported.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v30, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v35, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v16 = v34;
    if (v34)
    {
      v17 = (unint64_t *)&v34->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v10 = v36;
    if (!v36)
      return 0;
    v19 = (unint64_t *)&v36->__shared_owners_;
    do
      v12 = __ldaxr(v19);
    while (__stlxr(v12 - 1, v19));
LABEL_36:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return 0;
  }
  if (a1[148] || a1[149])
  {
    v4 = (std::__shared_weak_count *)a2[1];
    v28 = *a2;
    v29 = v4;
    if (v4)
    {
      v5 = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "[Dispatch::MPSGraph::general_padding_kernel] unsupported: front, back padding specified.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v30, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v28, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v7 = v34;
    if (v34)
    {
      v8 = (unint64_t *)&v34->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v10 = v29;
    if (!v29)
      return 0;
    v11 = (unint64_t *)&v29->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    goto LABEL_36;
  }
  v21 = a1[141];
  if (v21 < 3)
    return 1;
  v22 = a2[1];
  v27[0] = *a2;
  v27[1] = v22;
  if (v22)
  {
    v23 = &v22->u64[1];
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    LOWORD(v21) = a1[141];
  }
  std::to_string(&v26, (__int16)v21);
  v25 = std::string::insert(&v26, 0, "[Dispatch::MPSGraph::general_padding_kernel] unsupported: fill_mode ");
  v30 = *v25;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v30, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v27, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v27);
  return 0;
}

void sub_1916E1DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a27);
  if (a25 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::blob_storage_root::~blob_storage_root(Espresso::blob_storage_root *this)
{
  JUMPOUT(0x19401CD90);
}

void Espresso::blob_rtti_root::~blob_rtti_root(Espresso::blob_rtti_root *this)
{
  JUMPOUT(0x19401CD90);
}

void Espresso::kern_alloc(Espresso *this)
{
  void *v2;

  v2 = Espresso::kern_alloc_uninitialized(this);
  bzero(v2, (size_t)this);
}

void Espresso::throw_exception_selector<Espresso::memory_error,int &,unsigned long &>(int a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::memory_error>("Memory allocation error %d: %zu bytes", a1, a2);
}

uint64_t Espresso::getSizesPerPointer(Espresso *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    v3[2] = 0;
    v3[1] = 0;
    *v3 = v3 + 1;
    Espresso::getSizesPerPointer(void)::leaked_sizes_per_ptr = (uint64_t)v3;
  }
  return Espresso::getSizesPerPointer(void)::leaked_sizes_per_ptr;
}

void sub_1916E1FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void Espresso::kern_dealloc(Espresso *this, void *a2)
{
  Espresso::on_dealloc(this, a2);
  free(this);
}

void ___ZN8Espresso10on_deallocEPv_block_invoke_2(uint64_t **a1)
{
  uint64_t **SizesPerPointer;
  uint64_t **v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;

  SizesPerPointer = (uint64_t **)Espresso::getSizesPerPointer((Espresso *)a1);
  v4 = (unint64_t)a1[4];
  v3 = a1 + 4;
  v5 = std::__tree<std::__value_type<void *,unsigned long>,std::__map_value_compare<void *,std::__value_type<void *,unsigned long>,std::less<void *>,true>,std::allocator<std::__value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(SizesPerPointer, v4, v3);
  Espresso::allocated_memory -= (uint64_t)v5[5];
  v6 = (uint64_t **)Espresso::getSizesPerPointer((Espresso *)v5);
  v7 = v6[1];
  if (v7)
  {
    v8 = *v3;
    v9 = (uint64_t *)(v6 + 1);
    v10 = v6[1];
    do
    {
      v11 = v10[4];
      v12 = v11 >= (unint64_t)v8;
      if (v11 >= (unint64_t)v8)
        v13 = (uint64_t **)v10;
      else
        v13 = (uint64_t **)(v10 + 1);
      if (v12)
        v9 = v10;
      v10 = *v13;
    }
    while (*v13);
    if (v9 != (uint64_t *)(v6 + 1) && (unint64_t)v8 >= v9[4])
    {
      v14 = (uint64_t *)v9[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        v16 = v9;
        do
        {
          v15 = (uint64_t *)v16[2];
          v17 = *v15 == (_QWORD)v16;
          v16 = v15;
        }
        while (!v17);
      }
      if (*v6 == v9)
        *v6 = v15;
      v6[2] = (uint64_t *)((char *)v6[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, v9);
      operator delete(v9);
    }
  }
}

void ___ZN8Espresso10on_deallocEPv_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.espresso.memdbgq", 0);
  v1 = (void *)Espresso::alloc_dbg_queue;
  Espresso::alloc_dbg_queue = (uint64_t)v0;

}

uint64_t Espresso::print_mem_stats(Espresso *this)
{
  uint64_t v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (Espresso::onceToken != -1)
    dispatch_once(&Espresso::onceToken, &__block_literal_global_5_11109);
  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  if (Espresso::debug_allocated_mem)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN8Espresso15print_mem_statsEv_block_invoke_2;
    block[3] = &unk_1E2DCAE30;
    block[4] = &v4;
    dispatch_sync((dispatch_queue_t)Espresso::alloc_dbg_queue, block);
    v1 = v5[3];
  }
  else
  {
    v1 = 0;
  }
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t ___ZN8Espresso15print_mem_statsEv_block_invoke_2(uint64_t a1)
{
  float v1;

  v1 = (float)(unint64_t)Espresso::allocated_memory * 0.00000095367;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = Espresso::allocated_memory;
  return printf("[mem] tot=%.3fM max=%.3f\n", v1, (float)((float)(unint64_t)Espresso::max_allocated_memory * 0.00000095367));
}

void ___ZN8Espresso15print_mem_statsEv_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.espresso.memdbgq", 0);
  v1 = (void *)Espresso::alloc_dbg_queue;
  Espresso::alloc_dbg_queue = (uint64_t)v0;

}

uint64_t Espresso::get_max_allocated_memory(Espresso *this)
{
  return Espresso::max_allocated_memory;
}

long double Espresso::statdist_psnr(Espresso *this, float *a2, float *a3)
{
  uint64_t v3;
  double v4;
  float v5;
  float v6;
  float v7;
  double v9;

  if ((int)a3 < 1)
  {
    v4 = 0.0;
    v9 = 0.0;
  }
  else
  {
    v3 = 0;
    v4 = 0.0;
    v5 = 0.0;
    do
    {
      v6 = a2[v3];
      v4 = v4
         + (float)((float)(*(float *)((char *)this + v3 * 4) - v6) * (float)(*(float *)((char *)this + v3 * 4) - v6));
      v7 = fabsf(v6);
      if (v7 > v5 || v3 == 0)
        v5 = v7;
      ++v3;
    }
    while (a3 != v3);
    v9 = v5;
  }
  return log10(v9 / sqrt(v4 / (double)(int)a3)) * 20.0;
}

double Espresso::statdist_kullback_leibler(Espresso *this, float *a2, float *a3)
{
  uint64_t v5;
  double v6;
  float v7;
  float v8;
  float v9;

  if ((int)a3 < 1)
    return 0.0;
  v5 = a3;
  v6 = 0.0;
  do
  {
    v7 = *(float *)this;
    this = (Espresso *)((char *)this + 4);
    v8 = v7;
    v9 = *a2++;
    v6 = v6 + (float)(v8 * logf(v8 / (float)(v9 + 0.00000001)));
    --v5;
  }
  while (v5);
  return v6;
}

double Espresso::statdist_cosine(Espresso *this, float *a2, float *a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  if ((int)a3 < 1)
  {
    v6 = 0.0;
    v10 = 0.0;
  }
  else
  {
    v3 = a3;
    v4 = 0.0;
    v5 = 0.0;
    v6 = 0.0;
    do
    {
      v7 = *(float *)this;
      this = (Espresso *)((char *)this + 4);
      v8 = v7;
      v9 = *a2++;
      v6 = v6 + (float)(v8 * v9);
      v5 = v5 + (float)(v8 * v8);
      v4 = v4 + (float)(v9 * v9);
      --v3;
    }
    while (v3);
    v10 = v5 * v4;
  }
  return (float)(v6 / sqrtf(v10));
}

void Espresso::statdist_cosine_topn(Espresso *this, float *a2, float *a3, int a4)
{
  int v5;
  size_t v8;
  float *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  float *v14;
  float *v15;
  int v16;
  uint64_t v17;
  float *v18;
  unint64_t v19;
  unint64_t v20;
  float *v21;
  float *v22;
  float v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  float *v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  float v35;
  int v36;
  float *v37;
  uint64_t v39;
  float *v40;
  float v41;
  float v42;

  v5 = (int)a3;
  if ((_DWORD)a3)
  {
    if ((a3 & 0x80000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = 2 * (int)a3;
    v9 = (float *)operator new(v8 * 4);
    bzero(v9, 8 * v5);
    v10 = 0;
    do
    {
      v11 = *(_DWORD *)this;
      this = (Espresso *)((char *)this + 4);
      v12 = v11;
      v13 = *(_DWORD *)a2++;
      v14 = &v9[v10];
      *(_DWORD *)v14 = v12;
      *((_DWORD *)v14 + 1) = v13;
      v10 += 2;
    }
    while (2 * v5 != v10);
    v15 = &v9[v8];
  }
  else
  {
    v9 = 0;
    v15 = 0;
  }
  if (v5 >= a4)
    v16 = a4;
  else
    v16 = v5;
  if (v16)
  {
    v17 = v16;
    v18 = &v9[2 * v16];
    if (v16 >= 2)
    {
      v19 = (unint64_t)(v16 - 2) >> 1;
      v20 = v19 + 1;
      v21 = &v9[2 * v19];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::statdist_cosine_topn(float *,float *,int,int)::$_0 &,std::__wrap_iter<std::pair<float,float> *>>((uint64_t)v9, v17, v21);
        v21 -= 2;
        --v20;
      }
      while (v20);
    }
    if (v18 != v15)
    {
      v22 = v18;
      do
      {
        if (v22[1] > v9[1])
        {
          v23 = *v22;
          *v22 = *v9;
          *v9 = v23;
          v24 = *((_DWORD *)v22 + 1);
          v22[1] = v9[1];
          *((_DWORD *)v9 + 1) = v24;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::statdist_cosine_topn(float *,float *,int,int)::$_0 &,std::__wrap_iter<std::pair<float,float> *>>((uint64_t)v9, v17, v9);
        }
        v22 += 2;
      }
      while (v22 != v15);
    }
    if ((int)v17 > 1)
    {
      v25 = v17;
      do
      {
        v26 = 0;
        v28 = *(_DWORD *)v9;
        v27 = *((_DWORD *)v9 + 1);
        v29 = v9;
        do
        {
          v30 = v29;
          v29 += 2 * v26 + 2;
          v31 = 2 * v26;
          v26 = (2 * v26) | 1;
          v32 = v31 + 2;
          if (v32 < v25 && v29[1] > v29[3])
          {
            v29 += 2;
            v26 = v32;
          }
          *v30 = *v29;
          v30[1] = v29[1];
        }
        while (v26 <= (uint64_t)((unint64_t)(v25 - 2) >> 1));
        if (v29 == v18 - 2)
        {
          *(_DWORD *)v29 = v28;
          *((_DWORD *)v29 + 1) = v27;
        }
        else
        {
          *v29 = *(v18 - 2);
          v29[1] = *(v18 - 1);
          *((_DWORD *)v18 - 2) = v28;
          *((_DWORD *)v18 - 1) = v27;
          v33 = (char *)v29 - (char *)v9 + 8;
          if (v33 >= 9)
          {
            v34 = (((unint64_t)v33 >> 3) - 2) >> 1;
            v35 = v29[1];
            if (v9[2 * v34 + 1] > v35)
            {
              v36 = *(_DWORD *)v29;
              do
              {
                v37 = v29;
                v29 = &v9[2 * v34];
                *v37 = *v29;
                v37[1] = v29[1];
                if (!v34)
                  break;
                v34 = (v34 - 1) >> 1;
              }
              while (v9[2 * v34 + 1] > v35);
              *(_DWORD *)v29 = v36;
              v29[1] = v35;
            }
          }
        }
        v18 -= 2;
      }
      while (v25-- > 2);
    }
    if ((int)v17 >= 1)
    {
      v39 = v17;
      v40 = v9 + 1;
      v41 = 0.0;
      v42 = 0.0;
      do
      {
        v41 = v41 + (float)(*(v40 - 1) * *v40);
        v42 = v42 + (float)(*v40 * *v40);
        v40 += 2;
        --v39;
      }
      while (v39);
      goto LABEL_41;
    }
  }
  if (v9)
LABEL_41:
    operator delete(v9);
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::statdist_cosine_topn(float *,float *,int,int)::$_0 &,std::__wrap_iter<std::pair<float,float> *>>(uint64_t result, uint64_t a2, float *a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float v9;
  float v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 >= 2)
  {
    v3 = (uint64_t)a3 - result;
    v4 = (unint64_t)(a2 - 2) >> 1;
    if (v4 >= ((uint64_t)a3 - result) >> 3)
    {
      v5 = v3 >> 2;
      v6 = (v3 >> 2) | 1;
      v7 = (float *)(result + 8 * v6);
      v8 = v5 + 2;
      if (v8 < a2 && v7[1] > v7[3])
      {
        v7 += 2;
        v6 = v8;
      }
      v9 = a3[1];
      if (v7[1] <= v9)
      {
        v10 = *a3;
        do
        {
          v11 = a3;
          a3 = v7;
          *v11 = *v7;
          v11[1] = v7[1];
          if (v4 < v6)
            break;
          v12 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (float *)(result + 8 * v6);
          v13 = v12 + 2;
          if (v13 < a2 && v7[1] > v7[3])
          {
            v7 += 2;
            v6 = v13;
          }
        }
        while (v7[1] <= v9);
        *a3 = v10;
        a3[1] = v9;
      }
    }
  }
  return result;
}

void Espresso::load_network_no_dispatch_internal(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t **a4, uint64_t a5, unsigned int *a6)
{
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38[2];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  char *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v44 = 0;
  v45 = 0;
  v12 = (char *)operator new(0x70uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DB7030;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *((_QWORD *)v12 + 6) = v12 + 56;
  *((_QWORD *)v12 + 10) = 0;
  *((_QWORD *)v12 + 9) = v12 + 80;
  *((_QWORD *)v12 + 12) = 0;
  *((_QWORD *)v12 + 13) = 0;
  *((_QWORD *)v12 + 11) = 0;
  *a1 = (uint64_t)(v12 + 24);
  a1[1] = (uint64_t)v12;
  v13 = *a3;
  v14 = a3[1];
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = (std::__shared_weak_count *)*((_QWORD *)v12 + 13);
    *((_QWORD *)v12 + 12) = v13;
    *((_QWORD *)v12 + 13) = v14;
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
  }
  else
  {
    *((_QWORD *)v12 + 12) = v13;
    *((_QWORD *)v12 + 13) = 0;
  }
  v18 = (char *)operator new(0xB0uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_1E2DBDC08;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 136) = 0u;
  *(_OWORD *)(v18 + 120) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 24) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *((_QWORD *)v18 + 12) = v18 + 104;
  *((_QWORD *)v18 + 17) = 0;
  *((_QWORD *)v18 + 16) = 0;
  *((_QWORD *)v18 + 15) = v18 + 128;
  *((_QWORD *)v18 + 20) = 0;
  *((_QWORD *)v18 + 21) = 0;
  *((_QWORD *)v18 + 19) = v18 + 160;
  v42 = v18 + 24;
  v43 = (std::__shared_weak_count *)v18;
  v41 = 0;
  v19 = Espresso::check_3d_layer_from_serdes(a4);
  v20 = *a3;
  *(_BYTE *)(*a3 + 1281) = v19;
  v21 = a2[1];
  v39 = *a2;
  v40 = (std::__shared_weak_count *)v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v20 = *a3;
  }
  v24 = (std::__shared_weak_count *)a3[1];
  v38[0] = v20;
  v38[1] = (uint64_t)v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  Espresso::get_net_info_ir(&v39, v38, (Espresso ***)a4, a5, a6, (int *)&v41 + 1, (int *)&v41, &v44, a1, (uint64_t *)&v42);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v29 = v40;
  if (v40)
  {
    v30 = (unint64_t *)&v40->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v43;
  if (v43)
  {
    v33 = (unint64_t *)&v43->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v45;
  if (v45)
  {
    v36 = (unint64_t *)&v45->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1916E2B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v5 - 64);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD v14[2];

  v14[0] = 0;
  v14[1] = a4;
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "degamma");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E2C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "degamma");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E2D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;

  v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::degamma_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "degamma");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E2E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "degamma");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E2FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(uint64_t *a1, char *a2)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v5;

  v2 = a1 + 2;
  v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)v3 + 232))(v3, v2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1916E3058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_degamma_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  int v16;

  v16 = a4;
  v14 = 2;
  v15 = -2;
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "furthest_point_sampling");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E31D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "furthest_point_sampling");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E32F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;

  v13 = 2;
  v14 = -2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "furthest_point_sampling");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E3404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "furthest_point_sampling");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E3550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0E58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_furthest_point_sampling_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[5];
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  int v38;
  char v39;
  int v40;

  v40 = a4;
  v23 = 1;
  v25 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v24 = 0;
  v26 = 0;
  v27 = 0x1000100010001;
  v28 = 0;
  v30 = 1;
  v38 = 0;
  v39 = 0;
  v34 = 0;
  v35 = 0;
  v20 = xmmword_191A93300;
  memset(v19, 0, 32);
  v19[4] = 1;
  v29 = xmmword_191A93310;
  v31 = 0;
  v33 = 1;
  v21 = 0xFFFFFFFF00000000;
  v22 = _D0;
  v32 = 0;
  v36 = 0;
  v37 = 1;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, (uint64_t)v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "meta_convolution");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1916E373C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "meta_convolution");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E385C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  _QWORD v18[5];
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  int v37;
  char v38;

  v22 = 1;
  v24 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v23 = 0;
  v25 = 0;
  v26 = 0x1000100010001;
  v27 = 0;
  v29 = 1;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v19 = xmmword_191A93300;
  memset(v18, 0, 32);
  v18[4] = 1;
  v28 = xmmword_191A93310;
  v30 = 0;
  v32 = 1;
  v20 = 0xFFFFFFFF00000000;
  v21 = _D0;
  v31 = 0;
  v35 = 0;
  v36 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*a2, (uint64_t)v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "meta_convolution");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1916E39DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "meta_convolution");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E3B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC09F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC09F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_meta_convolution_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v18 = a4;
  v14 = xmmword_191A93820;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_out");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E3CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "wg_tx_out");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E3DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v13 = xmmword_191A93820;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "wg_tx_out");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E3EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_out");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E4030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_out_kernel_>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v18 = a4;
  v14 = xmmword_191A93820;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_in");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E41B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "wg_tx_in");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E42D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v13 = xmmword_191A93820;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::wg_transform_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "wg_tx_in");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E43EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "wg_tx_in");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E4538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0C98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0C98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_wg_transform_4_in_kernel_>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;

  v15 = a4;
  v14 = -1;
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_dequantize");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E46B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "linear_dequantize");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E47D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = -1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "linear_dequantize");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E48DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_dequantize");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E4A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_dequantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;

  v15 = a4;
  v14 = -1;
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_quantize");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E4BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "linear_quantize");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E4CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = -1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "linear_quantize");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E4DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "linear_quantize");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E4F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_linear_quantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;

  v15 = a4;
  v14 = 875704422;
  Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(a2, (int *)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "plane_rw");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E5098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  int *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (int *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "plane_rw");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E51B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = 875704422;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(*a2, (int *)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "plane_rw");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E52C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "plane_rw");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E5410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFBC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFBC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_plane_rw_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  _OWORD v17[3];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21[5];
  int v22;

  v22 = a4;
  v20 = 0u;
  memset(v21, 0, 28);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)v15 = 0u;
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_unit");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v21[2]) < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(*((void **)&v19 + 1));
  if (SBYTE7(v19) < 0)
    operator delete((void *)v18);
  __p[0] = (char *)&v17[1] + 8;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v17;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v15[1])
  {
    *(void **)&v16 = v15[1];
    operator delete(v15[1]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
}

void sub_1916E5620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "tunneled_ane_unit");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E5750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  void **v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  void *v13[2];
  void *v14[2];
  __int128 v15;
  _OWORD v16[3];
  void *v17[2];
  void *v18[2];
  __int128 v19;
  void *v20[4];

  v19 = 0u;
  memset(v20, 0, 28);
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v18 = 0u;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)v14 = 0u;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<((uint64_t *)&v9, "tunneled_ane_unit");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v20[2]) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  if (SHIBYTE(v18[0]) < 0)
    operator delete(v17[0]);
  v9 = (void **)&v16[1] + 1;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)v16;
  std::vector<Espresso::tunneled_unit_top_layout_t>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (v14[1])
  {
    *(void **)&v15 = v14[1];
    operator delete(v14[1]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_1916E58E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v20;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20);
  Espresso::tunneled_ane_unit_params_t::~tunneled_ane_unit_params_t(&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_unit");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E5A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_unit_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _OWORD v14[3];
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;

  v31 = a4;
  memset(v14, 0, sizeof(v14));
  v16 = 0;
  v15 = 0;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_op");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)v14);
}

void sub_1916E5BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "tunneled_ane_op");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E5D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _OWORD v13[3];
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  memset(v13, 0, sizeof(v13));
  v15 = 0;
  v14 = 0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "tunneled_ane_op");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)v13);
}

void sub_1916E5E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20);
  Espresso::tunneled_ane_op_params_t::~tunneled_ane_op_params_t((Espresso::tunneled_ane_op_params_t *)&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "tunneled_ane_op");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E5FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC08A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC08A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tunneled_ane_op_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  void *v17[2];
  void *v18[2];
  __int128 v19;
  int v20;

  v20 = a4;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)v15 = 0u;
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "einsum");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v18[1])
  {
    *(void **)&v19 = v18[1];
    operator delete(v18[1]);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (v15[1])
  {
    *(void **)&v16 = v15[1];
    operator delete(v15[1]);
  }
  if (SHIBYTE(v15[0]) < 0)
    operator delete(v14[0]);
}

void sub_1916E618C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  Espresso::einsum_params_t::~einsum_params_t((Espresso::einsum_params_t *)&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "einsum");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E62BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  void *v13[2];
  void *v14[2];
  __int128 v15;
  void *v16[2];
  void *v17[2];
  __int128 v18;

  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)v14 = 0u;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::einsum_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "einsum");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (v17[1])
  {
    *(void **)&v18 = v17[1];
    operator delete(v17[1]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v14[1])
  {
    *(void **)&v15 = v14[1];
    operator delete(v14[1]);
  }
  if (SHIBYTE(v14[0]) < 0)
    operator delete(v13[0]);
}

void sub_1916E640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20);
  Espresso::einsum_params_t::~einsum_params_t((Espresso::einsum_params_t *)&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "einsum");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E6568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::einsum_params_t::~einsum_params_t(Espresso::einsum_params_t *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF6F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF6F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_einsum_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  int v15;

  v15 = a4;
  v14[0] = 0;
  v14[1] = 0;
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "resize_nearest_neighbor");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E6740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "resize_nearest_neighbor");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E6860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(*a2, v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "resize_nearest_neighbor");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E6964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "resize_nearest_neighbor");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E6AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0F00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resize_nearest_neighbor_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  int v15;
  __int128 v16;
  int v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  int v24;

  v24 = a4;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v17 = 1;
  v16 = xmmword_191AD0DEC;
  v19 = 1;
  v18 = xmmword_191AD0DEC;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  v23 = 0xFFFFFFFFLL;
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice_update");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E6C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "general_slice_update");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E6D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];
  int v14;
  __int128 v15;
  int v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;

  v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v16 = 1;
  v15 = xmmword_191AD0DEC;
  v18 = 1;
  v17 = xmmword_191AD0DEC;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  v22 = 0xFFFFFFFFLL;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "general_slice_update");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E6EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice_update");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E7010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_update_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v5;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v34 = a4;
  v20 = 1;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v21 = v5;
  __asm { FMOV            V1.2S, #1.0 }
  v22 = 0xFFFFFFFF00000001;
  v23 = _D1;
  v24 = 0;
  v25 = 1;
  v27 = 0;
  v26 = 0;
  v28 = 0;
  WORD1(v5) = 1;
  WORD3(v5) = 1;
  v29 = v5;
  v30 = 65537;
  v31 = 0x100000000;
  v33 = 0;
  v32 = 0;
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a2, (uint64_t)&v20, 0);
  Espresso::abstract_engine_factory::shared(&v18);
  v11 = v18;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconv3d");
  v15 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v11, a3, (uint64_t)__p, (uint64_t)&v20, &v15);
  if (v17 < 0)
    operator delete(__p[0]);
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1916E71E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "deconv3d");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E7300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int128 v3;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p;
  char v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v19 = 1;
  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  v20 = v3;
  __asm { FMOV            V1.2S, #1.0 }
  v21 = 0xFFFFFFFF00000001;
  v22 = _D1;
  v23 = 0;
  v24 = 1;
  v26 = 0;
  v25 = 0;
  v27 = 0;
  WORD1(v3) = 1;
  WORD3(v3) = 1;
  v28 = v3;
  v29 = 65537;
  v30 = 0x100000000;
  v32 = 0;
  v31 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v9 = *a2;
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(*a2, (uint64_t)&v19, 1);
  std::string::basic_string[abi:ne180100]<0>(v13, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v9, (uint64_t)v13, &v15);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v15, "deconv3d");
  if (v18 < 0)
    operator delete(__p);
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_1916E7460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconv3d");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E75AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFB88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFB88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconv3d_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  int v35;

  v35 = a4;
  v24 = 0;
  v26 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v27 = _D0;
  v32 = 0;
  v19 = xmmword_191A93320;
  v20 = 0;
  v21 = _D0;
  v28 = 0;
  v22 = 0;
  v25 = 0;
  v23 = 0;
  v29 = 0;
  v31 = 0;
  v30 = 0;
  v33 = 257;
  v34 = 1;
  Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(a2, &v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_inner_product_grad");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1916E7780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "fused_inner_product_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E78A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  char v33;

  v23 = 0;
  v25 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v26 = _D0;
  v31 = 0;
  v18 = xmmword_191A93320;
  v19 = 0;
  v20 = _D0;
  v27 = 0;
  v21 = 0;
  v24 = 0;
  v22 = 0;
  v28 = 0;
  v30 = 0;
  v29 = 0;
  v32 = 257;
  v33 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(*a2, &v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "fused_inner_product_grad");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1916E7A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_inner_product_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E7B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_inner_product_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[5];
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  int v38;
  char v39;
  int v40;
  int v41;

  v41 = a4;
  v23 = 1;
  v25 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v24 = 0;
  v26 = 0;
  v27 = 0x1000100010001;
  v28 = 0;
  v30 = 1;
  v38 = 0;
  v39 = 0;
  v34 = 0;
  v35 = 0;
  v20 = xmmword_191A93300;
  memset(v19, 0, 32);
  v19[4] = 1;
  v29 = xmmword_191A93310;
  v31 = 0;
  v33 = 1;
  v21 = 0xFFFFFFFF00000000;
  v22 = _D0;
  v32 = 0;
  v36 = 0;
  v37 = 1;
  v40 = 65793;
  Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(a2, v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_convolution_grad");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1916E7D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "fused_convolution_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E7E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  _QWORD v18[5];
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;

  v22 = 1;
  v24 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v23 = 0;
  v25 = 0;
  v26 = 0x1000100010001;
  v27 = 0;
  v29 = 1;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v19 = xmmword_191A93300;
  memset(v18, 0, 32);
  v18[4] = 1;
  v28 = xmmword_191A93310;
  v30 = 0;
  v32 = 1;
  v20 = 0xFFFFFFFF00000000;
  v21 = _D0;
  v31 = 0;
  v35 = 0;
  v36 = 1;
  v39 = 65793;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(*a2, v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "fused_convolution_grad");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1916E7FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "fused_convolution_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E813C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fused_convolution_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v19 = a4;
  v14 = -1;
  v15 = 1065353216;
  v16 = 0;
  v17 = 1065353216;
  v18 = 0;
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "static_dequantize");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E82D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "static_dequantize");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E83F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v13 = -1;
  v14 = 1065353216;
  v15 = 0;
  v16 = 1065353216;
  v17 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "static_dequantize");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E8510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "static_dequantize");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E865C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_dequantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t v15;
  int v16;

  v16 = a4;
  v14 = -1;
  v15 = 1065353216;
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "static_quantize");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E87E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "static_quantize");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E8904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  uint64_t v14;

  v13 = -1;
  v14 = 1065353216;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "static_quantize");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E8A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "static_quantize");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E8B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_static_quantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  int v17;

  v17 = a4;
  v14 = xmmword_191A93790;
  v15 = 0x100000000;
  v16 = 0;
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice_update");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E8CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "slice_update");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E8E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v13 = xmmword_191A93790;
  v14 = 0x100000000;
  v15 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::slice_update_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "slice_update");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E8F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice_update");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E907C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0330;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_update_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _BYTE v14[8];
  int v15;

  v15 = a4;
  v14[4] = 1;
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "argsort");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916E91F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "argsort");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E9318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _BYTE v13[8];

  v13[4] = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::argsort_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "argsort");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916E9420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "argsort");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E956C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_argsort_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v5;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  void *__p[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v34 = a4;
  v20 = 1;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v21 = v5;
  __asm { FMOV            V1.2S, #1.0 }
  v22 = 0xFFFFFFFF00000001;
  v23 = _D1;
  v24 = 0;
  v25 = 1;
  v27 = 0;
  v26 = 0;
  v28 = 0;
  WORD1(v5) = 1;
  WORD3(v5) = 1;
  v29 = v5;
  v30 = 65537;
  v31 = 0x100000000;
  v33 = 0;
  v32 = 0;
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a2, (uint64_t)&v20, 0);
  Espresso::abstract_engine_factory::shared(&v18);
  v11 = v18;
  std::string::basic_string[abi:ne180100]<0>(__p, "conv3d");
  v15 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v11, a3, (uint64_t)__p, (uint64_t)&v20, &v15);
  if (v17 < 0)
    operator delete(__p[0]);
  v12 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1916E973C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "conv3d");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E985C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int128 v3;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p;
  char v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v19 = 1;
  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  v20 = v3;
  __asm { FMOV            V1.2S, #1.0 }
  v21 = 0xFFFFFFFF00000001;
  v22 = _D1;
  v23 = 0;
  v24 = 1;
  v26 = 0;
  v25 = 0;
  v27 = 0;
  WORD1(v3) = 1;
  WORD3(v3) = 1;
  v28 = v3;
  v29 = 65537;
  v30 = 0x100000000;
  v32 = 0;
  v31 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v9 = *a2;
  Espresso::SerDes::params_io<Espresso::conv3d_params_t>(*a2, (uint64_t)&v19, 1);
  std::string::basic_string[abi:ne180100]<0>(v13, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v9, (uint64_t)v13, &v15);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v15, "conv3d");
  if (v18 < 0)
    operator delete(__p);
  v10 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_1916E99BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "conv3d");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916E9B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_conv3d_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  v33 = a4;
  v24 = 0;
  v26 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v27 = _D0;
  v32 = 0;
  v19 = xmmword_191A93320;
  v20 = 0;
  v21 = _D0;
  v28 = 0;
  v22 = 0;
  v25 = 0;
  v23 = 0;
  v29 = 0;
  v31 = 0;
  v30 = 0;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, (uint64_t)&v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "hierarchical_inner_product");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1916E9CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "hierarchical_inner_product");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916E9DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v23 = 0;
  v25 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v26 = _D0;
  v31 = 0;
  v18 = xmmword_191A93320;
  v19 = 0;
  v20 = _D0;
  v27 = 0;
  v21 = 0;
  v24 = 0;
  v22 = 0;
  v28 = 0;
  v30 = 0;
  v29 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*a2, (uint64_t)&v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "hierarchical_inner_product");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1916E9F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "hierarchical_inner_product");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EA088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0FA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0FA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_hierarchical_inner_product_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _OWORD v14[2];
  int v15;
  __int16 v16;
  uint64_t v17;
  _BYTE v18[14];
  int v19;

  v19 = a4;
  v14[0] = xmmword_191A8AA80;
  v14[1] = xmmword_191A93320;
  v15 = 0;
  v16 = 1;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool3d");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EA228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "pool3d");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EA348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _OWORD v13[2];
  int v14;
  __int16 v15;
  uint64_t v16;
  _QWORD v17[2];

  v13[0] = xmmword_191A8AA80;
  v13[1] = xmmword_191A93320;
  v14 = 0;
  v15 = 1;
  v17[0] = 0;
  v16 = 0;
  *(_QWORD *)((char *)v17 + 6) = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::pool3d_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "pool3d");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EA474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool3d");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EA5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool3d_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  void *v17[2];
  void *v18[2];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  int v23;

  v23 = a4;
  v21 = 0;
  v20 = 0u;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)v15 = 0u;
  v22 = 1;
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "loopkit");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if ((_QWORD)v20)
  {
    *((_QWORD *)&v20 + 1) = v20;
    operator delete((void *)v20);
  }
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  if (SHIBYTE(v18[0]) < 0)
    operator delete(v17[0]);
  if (v15[1])
  {
    *(void **)&v16 = v15[1];
    operator delete(v15[1]);
  }
  if (SHIBYTE(v15[0]) < 0)
    operator delete(v14[0]);
}

void sub_1916EA7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  Espresso::loopkit_params_t::~loopkit_params_t((Espresso::loopkit_params_t *)&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "loopkit");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EA8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  void *v13[2];
  void *v14[2];
  __int128 v15;
  void *v16[2];
  void *v17[2];
  __int128 v18;
  void *v19[2];
  uint64_t v20;
  int v21;

  v20 = 0;
  v18 = 0u;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  *(_OWORD *)v13 = 0u;
  v21 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::loopkit_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "loopkit");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(v17[1]);
  if (SHIBYTE(v17[0]) < 0)
    operator delete(v16[0]);
  if (v14[1])
  {
    *(void **)&v15 = v14[1];
    operator delete(v14[1]);
  }
  if (SHIBYTE(v14[0]) < 0)
    operator delete(v13[0]);
}

void sub_1916EAA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20);
  Espresso::loopkit_params_t::~loopkit_params_t((Espresso::loopkit_params_t *)&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "loopkit");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EABA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::loopkit_params_t::~loopkit_params_t(Espresso::loopkit_params_t *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFA00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFA00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_loopkit_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15;
  int v16;

  v16 = a4;
  v15 = 0;
  v14 = 0;
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "self_attention");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EAD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "self_attention");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EAEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  char v14;

  v14 = 0;
  v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::self_attention_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "self_attention");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EAFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "self_attention");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EB104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_self_attention_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  int v16;

  v16 = a4;
  v14 = 0;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "bahdanau_attention");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EB280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "bahdanau_attention");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EB3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;

  v13 = 0;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "bahdanau_attention");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EB4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "bahdanau_attention");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EB5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bahdanau_attention_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  int v15;

  v15 = a4;
  v14 = xmmword_191A93830;
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "local_correlation");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EB774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "local_correlation");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EB894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;

  v13 = xmmword_191A93830;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "local_correlation");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EB9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "local_correlation");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EBAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_local_correlation_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;

  v19 = a4;
  v14 = 1;
  v16 = 0;
  v15 = 0;
  v17 = 0;
  v18 = 1;
  Espresso::SerDes::params_io<Espresso::resample_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "resample");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EBC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::resample_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "resample");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EBD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;

  v13 = 1;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::resample_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "resample");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EBEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "resample");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EBFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFBF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFBF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_resample_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  __int16 v15;
  int v16;

  v16 = a4;
  v14 = 0;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "grid_sampling");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EC174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "grid_sampling");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EC294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  __int16 v14;

  v13 = 0;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "grid_sampling");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EC39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "grid_sampling");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EC4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_grid_sampling_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  int v16;

  v16 = a4;
  v14 = 0x100000001;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "sparse_inner_product");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EC668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "sparse_inner_product");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EC788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;

  v13 = 0x100000001;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "sparse_inner_product");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EC894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "sparse_inner_product");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EC9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sparse_inner_product_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>::write(int a1, void *a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "dev_op");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916ECB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  void **v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;
  void *v15[2];
  void *v16[2];
  __int128 v17;
  void *v18[2];
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21;

  v13 = 0;
  v14 = 0;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)v16 = 0u;
  v17 = 0u;
  *(_OWORD *)v18 = 0u;
  memset(v19, 0, sizeof(v19));
  v20 = 0u;
  v21 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>((void *)*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<((uint64_t *)&v9, "dev_op");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  v9 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)v19 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (SBYTE7(v19[0]) < 0)
    operator delete(v18[0]);
  if (v16[1])
  {
    *(void **)&v17 = v16[1];
    operator delete(v16[1]);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
}

void sub_1916ECCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  uint64_t v21;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21);
  Espresso::dev_op_params_t::~dev_op_params_t(&a21);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "dev_op");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916ECE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF6B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF6B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dev_op_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int16 v14;
  int v15;

  v15 = a4;
  v14 = 0;
  Espresso::SerDes::params_io<Espresso::cumsum_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cumsum");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916ECFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cumsum_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "cumsum");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916ED0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int16 v13;

  v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cumsum_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cumsum");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916ED1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cumsum");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916ED32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cumsum_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v14 = 0;
  v15 = 1065353216;
  v16 = -1;
  v17 = a4;
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "one_hot");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916ED4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "one_hot");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916ED5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  uint64_t v14;
  int v15;

  v13 = 0;
  v14 = 1065353216;
  v15 = -1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::one_hot_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "one_hot");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916ED6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "one_hot");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916ED838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_one_hot_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;
  int v15;

  v15 = a4;
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "precompiled_segment");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916ED99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  (*(void (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "precompiled_segment");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1916EDAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "precompiled_segment");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EDB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "precompiled_segment");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EDCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_precompiled_segment_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;
  int v15;

  v15 = a4;
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "nonzero");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EDE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  (*(void (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "nonzero");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1916EDF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "nonzero");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EE048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "nonzero");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EE190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFA38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFA38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_nonzero_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  int v17;

  v17 = a4;
  v14 = 0;
  v15 = 0;
  v16 = 257;
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EE314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "scatter_nd");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EE434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;
  __int16 v15;

  v13 = 0;
  v14 = 0;
  v15 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "scatter_nd");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EE544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter_nd");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EE690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFF78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFF78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_nd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  int v17;

  v17 = a4;
  v14 = 0;
  v15 = 0;
  v16 = 257;
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EE814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "gather_nd");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EE934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;
  __int16 v15;

  v13 = 0;
  v14 = 0;
  v15 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "gather_nd");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EEA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather_nd");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EEB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFE28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  int v15;

  v15 = a4;
  v14[0] = 0x3F7FBE773F666666;
  v14[1] = 0x1322BCC77;
  Espresso::SerDes::params_io<Espresso::adam_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "adam");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EED20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::adam_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "adam");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EEE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];

  v13[0] = 0x3F7FBE773F666666;
  v13[1] = 0x1322BCC77;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::adam_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "adam");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EEF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "adam");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EF0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_adam_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _BYTE v14[4];
  uint64_t v15;
  int v16;

  v16 = a4;
  v14[0] = 0;
  v15 = 0x100000000;
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "sgd");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EF228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "sgd");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EF348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _BYTE v13[4];
  uint64_t v14;

  v13[0] = 0;
  v14 = 0x100000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::sgd_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "sgd");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EF454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "sgd");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EF5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sgd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  int v22;

  v22 = a4;
  v14 = 1;
  v15 = 1056964608;
  v16 = 0;
  v17 = 0x300000000;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v18 = 0;
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "non_maximum_suppression");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
}

void sub_1916EF754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "non_maximum_suppression");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EF88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *v19;
  uint64_t v20;

  v13 = 1;
  v14 = 1056964608;
  v15 = 0;
  v16 = 0x300000000;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v17 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "non_maximum_suppression");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
}

void sub_1916EF9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26);
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "non_maximum_suppression");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916EFB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_non_maximum_suppression_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _BYTE v14[4];
  int v15;
  char v16;
  int v17;

  v17 = a4;
  v14[0] = 0;
  v15 = 1;
  v16 = 1;
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cross_entropy");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916EFCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "cross_entropy");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916EFDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _BYTE v13[4];
  int v14;
  char v15;

  v13[0] = 0;
  v14 = 1;
  v15 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cross_entropy");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916EFEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cross_entropy");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F0028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC03D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC03D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cross_entropy_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;

  v15 = a4;
  v14 = 0x100000000;
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "reverse_seq");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F01A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "reverse_seq");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F02C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = 0x100000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "reverse_seq");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F03D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "reverse_seq");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F0520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC01E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC01E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reverse_seq_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  int v16;

  v16 = a4;
  v14 = 0x100000000;
  v15 = 1;
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "sliding_windows");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F06A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "sliding_windows");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F07C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;

  v13 = 0x100000000;
  v14 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "sliding_windows");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F08DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "sliding_windows");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F0A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sliding_windows_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "softmax_nd");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F0BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;

  v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::softmax_nd_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "softmax_nd");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F0CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_nd");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F0E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFFB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFFB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_nd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "split_nd");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F0F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v13 = 0x200000000;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::split_nd_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "split_nd");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F1100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "split_nd");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F124C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFC68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFC68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_nd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD v14[2];

  v14[0] = 0;
  v14[1] = a4;
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "stack_nd");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F13C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "stack_nd");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F14E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;

  v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "stack_nd");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F15E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "stack_nd");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F1730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFCA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFCA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_stack_nd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  int v15;
  __int128 v16;
  int v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  int v23;

  v23 = a4;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v17 = 1;
  v16 = xmmword_191AD0DEC;
  v19 = 1;
  v18 = xmmword_191AD0DEC;
  v20 = 0u;
  v21 = 0u;
  v22 = 0xFFFFFFFF00000000;
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F18E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "general_slice");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F1A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];
  int v14;
  __int128 v15;
  int v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;

  v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v16 = 1;
  v15 = xmmword_191AD0DEC;
  v18 = 1;
  v17 = xmmword_191AD0DEC;
  v19 = 0u;
  v20 = 0u;
  v21 = 0xFFFFFFFF00000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "general_slice");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F1B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F1C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  int v15;
  int v16;

  v16 = a4;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "transplant");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F1E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "transplant");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F1F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];
  int v14;

  v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::transplant_params_t>(*a2, v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "transplant");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F2030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "transplant");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F217C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFFE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFFE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transplant_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  void *v17[2];
  void *v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v24 = a4;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)v15 = 0u;
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "builtin");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SBYTE7(v21) < 0)
    operator delete((void *)v20);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  if (SHIBYTE(v18[0]) < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  if (SHIBYTE(v15[0]) < 0)
    operator delete(v14[0]);
}

void sub_1916F2368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  Espresso::builtin_params_t::~builtin_params_t(&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "builtin");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F2498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  void *v13[2];
  void *v14[2];
  __int128 v15;
  void *v16[2];
  void *v17[2];
  __int128 v18;
  void *v19[2];
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  *(_OWORD *)v13 = 0u;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::builtin_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "builtin");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (SBYTE7(v20) < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[1]);
  if (SHIBYTE(v17[0]) < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[1]);
  if (SHIBYTE(v14[0]) < 0)
    operator delete(v13[0]);
}

void sub_1916F260C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v20;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20);
  Espresso::builtin_params_t::~builtin_params_t(&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "builtin");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F2768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_builtin_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t v14;
  __int16 v15;
  __int128 v16;
  char v17;
  int v18;
  int v19;

  v19 = a4;
  v14 = 0xFFFFFFFF00000001;
  v15 = 0;
  v16 = xmmword_191A93340;
  v17 = 0;
  v18 = 0;
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "gumbel_max");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F2900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "gumbel_max");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F2A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  unint64_t v13;
  __int16 v14;
  __int128 v15;
  char v16;
  int v17;

  v13 = 0xFFFFFFFF00000001;
  v14 = 0;
  v15 = xmmword_191A93340;
  v16 = 0;
  v17 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "gumbel_max");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F2B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "gumbel_max");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F2C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFF40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFF40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gumbel_max_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;
  int v15;

  v15 = a4;
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "phi_virtual");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F2DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  (*(void (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "phi_virtual");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1916F2F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "phi_virtual");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F2FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "phi_virtual");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F313C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC01A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC01A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_phi_virtual_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  int v15;
  int v16;

  v16 = a4;
  v14[0] = 0x358637BD00000000;
  v14[1] = 0;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "instancenorm_1d");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F32C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "instancenorm_1d");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F33E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];
  int v14;

  v13[0] = 0x358637BD00000000;
  v13[1] = 0;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "instancenorm_1d");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F34F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "instancenorm_1d");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F3640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC06E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC06E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_instancenorm_1d_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t v14;
  int v15;

  v15 = a4;
  v14 = 0xFFFFFFFF00000001;
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "multinomial");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F37C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "multinomial");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F38E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  unint64_t v13;

  v13 = 0xFFFFFFFF00000001;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::multinomial_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "multinomial");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F39EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "multinomial");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F3B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_multinomial_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  int v18;

  v18 = a4;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v15 = v5;
  v16 = 4294967294;
  v17 = 0;
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(a2, (uint64_t)&v15, 0);
  Espresso::abstract_engine_factory::shared(&v13);
  v6 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "array_gather");
  v10 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a3, (uint64_t)__p, (uint64_t)&v15, &v10);
  if (v12 < 0)
    operator delete(__p[0]);
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1916F3CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "array_gather");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F3DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  v14 = v3;
  v15 = 4294967294;
  v16 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v4 = *a2;
  Espresso::SerDes::params_io<Espresso::array_gather_params_t>(*a2, (uint64_t)&v14, 1);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "array_gather");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1916F3EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "array_gather");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F4048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_array_gather_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "expand_dims");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F41D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _OWORD v13[8];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(*a2, v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "expand_dims");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F42E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F4434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC00C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC00C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "squeeze");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F45BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _BYTE v13[137];
  int v14;

  memset(v13, 0, sizeof(v13));
  v14 = 2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "squeeze");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F46DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F4828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFB50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFB50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _BYTE v14[4];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[21];
  int v31;

  v31 = a4;
  v14[0] = 0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_zero_pad");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F49F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "tensor_zero_pad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F4B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _BYTE v13[4];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[21];

  v13[0] = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  memset(v29, 0, sizeof(v29));
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "tensor_zero_pad");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F4C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "tensor_zero_pad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F4DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tensor_zero_pad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  int v15;
  unint64_t v16;
  int v17;
  char v18;
  int v19;

  v19 = a4;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16 = 0xFFFFFFFF00000001;
  v17 = 0;
  v18 = 1;
  Espresso::SerDes::params_io<Espresso::fill_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F4F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::fill_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "fill");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F506C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];
  int v14;
  unint64_t v15;
  int v16;
  char v17;

  v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v15 = 0xFFFFFFFF00000001;
  v16 = 0;
  v17 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::fill_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "fill");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F518C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "fill");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F52D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_fill_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  int v15;
  int v16;

  v16 = a4;
  v15 = 0;
  memset(v14, 0, 13);
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F5458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "matrix_band_part");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F5578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];
  int v14;

  v14 = 0;
  v13[0] = 0;
  *(_QWORD *)((char *)v13 + 5) = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "matrix_band_part");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F5684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "matrix_band_part");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F57D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC09C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC09C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_matrix_band_part_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "batch_matmul");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F5958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int16 v13;
  char v14;

  v13 = 1;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "batch_matmul");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F5A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "batch_matmul");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F5BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0250;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0250;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batch_matmul_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_range_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_range_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  int v16;

  v16 = a4;
  v14 = 1065353216;
  v15 = 1065353216;
  Espresso::SerDes::params_io<Espresso::range_params_t>(a2, (float *)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "range");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F5D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_range_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  float *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (float *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::range_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "range");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F5E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_range_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;

  v13 = 1065353216;
  v14 = 1065353216;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::range_params_t>(*a2, (float *)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "range");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F5F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_range_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "range");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F60B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_range_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF4F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_range_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF4F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_range_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  int v19;

  v19 = a4;
  v14 = 0;
  v15 = 1065353216;
  v16 = xmmword_191A935B0;
  v17 = xmmword_191A8D8A0;
  v18 = 0;
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F6258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "load_random");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F6378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int16 v17;

  v13 = 0;
  v14 = 1065353216;
  v15 = xmmword_191A935B0;
  v16 = xmmword_191A8D8A0;
  v17 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::load_random_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "load_random");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F64A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_random");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F65F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_random_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  int v16;
  __int16 v17;
  char v18;
  int v19;

  v19 = a4;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v15 = v5;
  v16 = -2;
  v17 = 0;
  v18 = 0;
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(a2, (uint64_t)&v15, 0);
  Espresso::abstract_engine_factory::shared(&v13);
  v6 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter");
  v10 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a3, (uint64_t)__p, (uint64_t)&v15, &v10);
  if (v12 < 0)
    operator delete(__p[0]);
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1916F677C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "scatter");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F689C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;
  __int128 v14;
  int v15;
  __int16 v16;
  char v17;

  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  v14 = v3;
  v15 = -2;
  v16 = 0;
  v17 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v4 = *a2;
  Espresso::SerDes::params_io<Espresso::scatter_params_t>(*a2, (uint64_t)&v14, 1);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "scatter");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1916F69B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "scatter");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F6B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFAE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFAE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_scatter_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::copy_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "copy");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F6C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;

  v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::copy_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "copy");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F6D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F6ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;
  int v15;

  v15 = a4;
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_else");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F703C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  (*(void (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "cf_else");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1916F714C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cf_else");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F723C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_else");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F7384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF8B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF8B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_else_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;
  int v15;

  v15 = a4;
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F74E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  (*(void (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "cf_end");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1916F75F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cf_end");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F76E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F7830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF5A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF5A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_end_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;

  v15 = a4;
  v14 = 0x100000001;
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_for");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F79AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "cf_for");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F7ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = 0x100000001;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cf_for_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cf_for");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F7BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_for");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F7D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF5D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF5D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_for_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD v14[2];

  v14[0] = 0;
  v14[1] = a4;
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_loop");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F7E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "cf_loop");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F7FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;

  v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cf_loop");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F80B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_loop");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F8200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_loop_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;
  int v15;

  v15 = a4;
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F8350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  (*(void (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "cf_if");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1916F8460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cf_if");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F8550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F8698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF4C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_if_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF4C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  int v20;

  v20 = a4;
  v14[0] = 0;
  v14[1] = 0;
  v16 = 0;
  v15 = 0;
  v17 = xmmword_191A8AA80;
  v18 = 0x100000001;
  v19 = 0;
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "store_global");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_1916F882C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "store_global");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F8964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v15 = 0;
  v13[1] = 0;
  v14 = 0;
  v13[0] = 0;
  v16 = xmmword_191A8AA80;
  v17 = 0x100000001;
  v18 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::store_global_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "store_global");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

void sub_1916F8A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "store_global");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F8BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_store_global_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0368;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  unint64_t v18;
  int v19;
  int v20;

  v20 = a4;
  v14[0] = 0;
  v14[1] = 0;
  v16 = 0;
  v15 = 0;
  v17 = xmmword_191A935B0;
  v18 = 0xFFFFFFFF00000001;
  v19 = 7;
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_global");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_1916F8D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "load_global");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F8EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  unint64_t v17;
  int v18;

  v15 = 0;
  v13[1] = 0;
  v14 = 0;
  v13[0] = 0;
  v16 = xmmword_191A935B0;
  v17 = 0xFFFFFFFF00000001;
  v18 = 7;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::load_global_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "load_global");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

void sub_1916F9004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_global");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F9160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_global_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0100;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  char v15;
  int v16;

  v16 = a4;
  v14 = 0;
  v15 = 1;
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "alloc");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916F92CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "alloc");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F93EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  char v14;

  v13 = 0;
  v14 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::alloc_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "alloc");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F94F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "alloc");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F9644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_alloc_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "general_concat");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F97BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  __int16 v14;

  v13 = 2;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "general_concat");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916F98C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_concat");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F9A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  int v16;
  int v17;

  v17 = a4;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v15 = v5;
  v16 = -2;
  Espresso::SerDes::params_io<Espresso::gather_params_t>(a2, &v15, 0);
  Espresso::abstract_engine_factory::shared(&v13);
  v6 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather");
  v10 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a3, (uint64_t)__p, (uint64_t)&v15, &v10);
  if (v12 < 0)
    operator delete(__p[0]);
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1916F9B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::gather_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "gather");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916F9CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;
  __int128 v14;
  int v15;

  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  v14 = v3;
  v15 = -2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v4 = *a2;
  Espresso::SerDes::params_io<Espresso::gather_params_t>(*a2, &v14, 1);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "gather");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1916F9DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "gather");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916F9F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_gather_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  char v18;
  int v19;

  v19 = a4;
  v14 = 5;
  v15 = 0;
  v16 = -1;
  v17 = 256;
  v18 = 1;
  Espresso::SerDes::params_io<Espresso::topk_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "topk");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FA0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::topk_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "topk");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FA1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  char v17;

  v13 = 5;
  v14 = 0;
  v15 = -1;
  v16 = 256;
  v17 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::topk_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "topk");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FA2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "topk");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FA43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_topk_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;

  v15 = a4;
  v14 = 0xFFFFFFFFLL;
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "get_shape");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FA5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "get_shape");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FA6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = 0xFFFFFFFFLL;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::get_shape_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "get_shape");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FA7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "get_shape");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FA92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFE60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFE60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_get_shape_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;
  int v15;

  v15 = a4;
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_return");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FAA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  (*(void (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "cf_return");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1916FABA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cf_return");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FAC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_return");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FADD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFDF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFDF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_return_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  uint64_t v15;
  int v16;

  v16 = a4;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_call");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_1916FAF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "cf_call");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FB09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  void *v13[2];
  uint64_t v14;

  v13[1] = 0;
  v14 = 0;
  v13[0] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cf_call_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cf_call");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

void sub_1916FB1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;
  uint64_t v17;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  if (*(char *)(v17 - 17) < 0)
    operator delete(*(void **)(v17 - 40));
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_call");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FB310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_call_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD v14[2];

  v14[0] = -1;
  v14[1] = a4;
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_jump");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FB488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "cf_jump");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FB5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;

  v13 = -1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cf_jump");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FB6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_jump");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FB7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF8E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF8E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_jump_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  int v17;
  int v18;

  v18 = a4;
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v14 = 0u;
  v17 = -1;
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_branch");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  if (SHIBYTE(v15[0]) < 0)
    operator delete(v14[0]);
}

void sub_1916FB9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  Espresso::cf_branch_params_t::~cf_branch_params_t(&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "cf_branch");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FBAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  void *v13[2];
  void *v14[2];
  __int128 v15;
  int v16;

  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  *(_OWORD *)v13 = 0u;
  v16 = -1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cf_branch");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[1]);
  if (SHIBYTE(v14[0]) < 0)
    operator delete(v13[0]);
}

void sub_1916FBC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v20;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20);
  Espresso::cf_branch_params_t::~cf_branch_params_t(&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cf_branch");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FBD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFDB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFDB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cf_branch_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  char v15;
  int v16;
  int v17;

  v17 = a4;
  v14 = xmmword_191A93680;
  v15 = 0;
  v16 = 0;
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "spatial_transformer");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FBEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "spatial_transformer");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FC00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;
  char v14;
  int v15;

  v13 = xmmword_191A93680;
  v14 = 0;
  v15 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "spatial_transformer");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FC120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "spatial_transformer");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FC26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_spatial_transformer_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  int v15;

  v15 = a4;
  v14 = xmmword_191A93840;
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "quantized_gather");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FC3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "quantized_gather");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FC50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;

  v13 = xmmword_191A93840;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "quantized_gather");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FC618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "quantized_gather");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FC764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_quantized_gather_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v20 = a4;
  v14 = 0xFFFFFFFFLL;
  v15 = 0;
  v16 = 1065353216;
  v17 = 0;
  v18 = 0;
  v19 = 1065353216;
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_dequantize");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FC8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "dynamic_dequantize");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FCA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v13 = 0xFFFFFFFFLL;
  v14 = 0;
  v15 = 1065353216;
  v16 = 0;
  v17 = 1065353216;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "dynamic_dequantize");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FCB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_dequantize");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FCC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_dequantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;

  v15 = a4;
  v14 = 0xFFFFFFFFLL;
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_quantize");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FCE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "dynamic_quantize");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FCF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = 0xFFFFFFFFLL;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "dynamic_quantize");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FD030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamic_quantize");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FD17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dynamic_quantize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  char v15;
  int v16;
  int v17;
  int v18;
  char v19;
  int v20;
  __int128 v21;
  __int128 v22;
  int v23;
  char v24;
  int v25;

  v25 = a4;
  v16 = 0;
  v17 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v18 = 1065353216;
  v19 = 0;
  v20 = 2;
  v21 = 0u;
  v22 = 0u;
  v23 = 1;
  v24 = 0;
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "crop_and_resize");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FD324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "crop_and_resize");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FD444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];
  char v14;
  int v15;
  int v16;
  int v17;
  char v18;
  int v19;
  __int128 v20;
  __int128 v21;
  int v22;
  char v23;

  v15 = 0;
  v16 = 0;
  v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v17 = 1065353216;
  v18 = 0;
  v19 = 2;
  v20 = 0u;
  v21 = 0u;
  v22 = 1;
  v23 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "crop_and_resize");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FD57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "crop_and_resize");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FD6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0678;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0678;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_and_resize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;

  v19 = a4;
  v14 = xmmword_191A93680;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v18 = 0;
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "patch_extractor");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FD854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "patch_extractor");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FD974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v13 = xmmword_191A93680;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v17 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "patch_extractor");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FDA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "patch_extractor");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FDBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_patch_extractor_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  int v17;

  v17 = a4;
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v14 = 0u;
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "lambda");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  if (SHIBYTE(v15[0]) < 0)
    operator delete(v14[0]);
}

void sub_1916FDD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  Espresso::cf_branch_params_t::~cf_branch_params_t(&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "lambda");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FDEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  void *v13[2];
  void *v14[2];
  __int128 v15;

  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  *(_OWORD *)v13 = 0u;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::lambda_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "lambda");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[1]);
  if (SHIBYTE(v14[0]) < 0)
    operator delete(v13[0]);
}

void sub_1916FDFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v20;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20);
  Espresso::cf_branch_params_t::~cf_branch_params_t(&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "lambda");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FE130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lambda_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;
  int v15;

  v15 = a4;
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "compute_stats");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FE294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  (*(void (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "compute_stats");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1916FE3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "compute_stats");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FE494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "compute_stats");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FE5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC03A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC03A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_compute_stats_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;

  v15 = a4;
  v14 = 0;
  Espresso::SerDes::params_io<Espresso::cast_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "cast");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FE754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cast_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "cast");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FE874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::cast_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "cast");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FE978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "cast");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FEAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF2C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF2C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[3];
  char v15;
  int v16;
  char v17;
  int v18;

  v18 = a4;
  v14[0] = -1;
  v14[1] = -1;
  v14[2] = 0xFFFFFFFF00000001;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FEC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "broadcast");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FED78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[3];
  char v14;
  int v15;
  char v16;

  v13[0] = -1;
  v13[1] = -1;
  v13[2] = 0xFFFFFFFF00000001;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::broadcast_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "broadcast");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FEE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FEFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFD80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFD80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_broadcast_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::slice_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "slice");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FF16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;
  uint64_t v14;

  v13 = xmmword_191A93790;
  v14 = 0x100000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::slice_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "slice");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FF284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FF3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _BYTE v14[37];
  int v15;

  v15 = a4;
  memset(v14, 0, sizeof(v14));
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_batch");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FF550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "space_to_batch");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FF670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _OWORD v13[3];

  memset(v13, 0, 37);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::space_to_batch_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "space_to_batch");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FF77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_batch");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FF8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC05D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC05D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_batch_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  int v16;

  v16 = a4;
  v14 = 2;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_depth");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FFA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "space_to_depth");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1916FFB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;

  v13 = 2;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::space_to_depth_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "space_to_depth");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1916FFC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "space_to_depth");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1916FFDC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_space_to_depth_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;

  v15 = a4;
  v14 = 0x3F4CCCCD00000000;
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "prediction_smoothing");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1916FFF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "prediction_smoothing");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191700068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = 0x3F4CCCCD00000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::prediction_smoothing_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "prediction_smoothing");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191700174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "prediction_smoothing");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1917002C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_prediction_smoothing_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  int v15;

  v15 = a4;
  v14[0] = 0;
  v14[1] = 0;
  Espresso::SerDes::params_io<Espresso::crop_params>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "crop");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191700438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::crop_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "crop");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191700558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::crop_params>(*a2, v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "crop");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_19170065C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "crop");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1917007A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_crop_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD v14[2];

  v14[0] = 1;
  v14[1] = a4;
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_repeat");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191700920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "sequence_repeat");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191700A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;

  v13 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::sequence_repeat_params>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "sequence_repeat");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191700B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_repeat");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191700C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC07C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC07C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_repeat_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;
  int v15;

  v15 = a4;
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_reverse");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191700DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  (*(void (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "sequence_reverse");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_191700F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "sequence_reverse");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191700FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_reverse");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191701140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_reverse_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD v14[2];

  v14[0] = 0;
  v14[1] = a4;
  Espresso::SerDes::params_io<Espresso::sequence_concat_params>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_concat");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1917012B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::sequence_concat_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "sequence_concat");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917013D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;

  v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::sequence_concat_params>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "sequence_concat");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1917014D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence_concat");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191701624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_sequence_concat_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;

  v15 = a4;
  v14 = 0;
  Espresso::SerDes::params_io<Espresso::flatten_params>(a2, &v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "flatten");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19170179C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::flatten_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "flatten");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917018BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;

  v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::flatten_params>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "flatten");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1917019C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "flatten");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191701B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_flatten_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "transpose");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191701C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;
  int v14;

  v13 = xmmword_191A761E0;
  v14 = 4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "transpose");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191701DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191701EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFED0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _BYTE v14[76];
  int v15;

  v15 = a4;
  memset(v14, 0, sizeof(v14));
  Espresso::SerDes::params_io<Espresso::general_padding_params>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_padding");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191702078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::general_padding_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "general_padding");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191702198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _OWORD v13[5];

  memset(v13, 0, 76);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::general_padding_params>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "general_padding");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1917022A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_padding");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1917023F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC06B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC06B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_general_padding_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[2];
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  int v41;

  v41 = a4;
  __asm { FMOV            V0.2S, #1.0 }
  v19[1] = _D0;
  v19[0] = 0;
  v21 = _D0;
  v20 = 2;
  v23 = _D0;
  v22 = 0;
  v25 = _D0;
  v24 = 0;
  v27 = _D0;
  v26 = 2;
  v29 = _D0;
  v28 = 0;
  v30 = 512;
  v32 = xmmword_191A82A80;
  v31 = 1065353216;
  v33 = 1112014848;
  v34 = 0x100000000;
  v35 = 1065353216;
  v36 = 1065353216;
  v37 = 0;
  v38 = 0;
  v40 = 0;
  v39 = 0;
  Espresso::SerDes::params_io<Espresso::rnn_arch_params>(a2, (uint64_t)v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn_arch");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1917025F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::rnn_arch_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "rnn_arch");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191702714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  _QWORD v18[2];
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;

  __asm { FMOV            V0.2S, #1.0 }
  v18[1] = _D0;
  v18[0] = 0;
  v20 = _D0;
  v19 = 2;
  v22 = _D0;
  v21 = 0;
  v24 = _D0;
  v23 = 0;
  v26 = _D0;
  v25 = 2;
  v28 = _D0;
  v29 = 512;
  v27 = 0;
  v30 = 1065353216;
  v31 = xmmword_191A82A80;
  v33 = 0x100000000;
  v34 = 1065353216;
  v32 = 1112014848;
  v35 = 1065353216;
  v36 = 0;
  v37 = 0;
  v39 = 0;
  v38 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::rnn_arch_params>(*a2, (uint64_t)v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "rnn_arch");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1917028A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn_arch");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1917029F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFC30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFC30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_arch_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;

  v18 = a4;
  v14[0] = 0;
  v14[1] = 0x3F80000000000200;
  v15 = xmmword_191A93850;
  v16 = xmmword_191A93860;
  v17 = xmmword_191A93870;
  Espresso::SerDes::params_io<Espresso::rnn_params>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191702B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::rnn_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "rnn");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191702CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v13[0] = 0;
  v13[1] = 0x3F80000000000200;
  v14 = xmmword_191A93850;
  v15 = xmmword_191A93860;
  v16 = xmmword_191A93870;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::rnn_params>(*a2, v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "rnn");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191702DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "rnn");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191702F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF1E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF1E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_rnn_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "reduce");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917030B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[5];
  char v14;

  v13[0] = 0x358637BD00000000;
  v13[1] = 0x100000007;
  v13[3] = 0;
  v13[2] = 0;
  v13[4] = 0xFFFFFFFF00000000;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "reduce");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1917031E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "reduce");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191703330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF7D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF7D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  int v16;
  int v17;

  v17 = a4;
  *(_QWORD *)&v5 = 0x100000001;
  *((_QWORD *)&v5 + 1) = 0x100000001;
  v15 = v5;
  v16 = 1;
  Espresso::SerDes::params_io<Espresso::tile_params_t>(a2, &v15, 0);
  Espresso::abstract_engine_factory::shared(&v13);
  v6 = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "tile");
  v10 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v6, a3, (uint64_t)__p, (uint64_t)&v15, &v10);
  if (v12 < 0)
    operator delete(__p[0]);
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1917034B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::tile_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "tile");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917035D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;
  __int128 v14;
  int v15;

  *(_QWORD *)&v3 = 0x100000001;
  *((_QWORD *)&v3 + 1) = 0x100000001;
  v14 = v3;
  v15 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v4 = *a2;
  Espresso::SerDes::params_io<Espresso::tile_params_t>(*a2, &v14, 1);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v4, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "tile");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1917036E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "tile");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191703830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_tile_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _OWORD v14[3];
  int v15;

  v15 = a4;
  memset(v14, 0, 45);
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape_like");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1917039B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "reshape_like");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191703AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _OWORD v13[3];

  memset(v13, 0, 45);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::reshape_like_params>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "reshape_like");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191703BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape_like");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191703D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC02F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC02F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_like_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::reshape_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "reshape");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191703EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[2];
  __int128 v14;
  __int16 v15;
  int v16;

  v13[0] = 0;
  v13[1] = 0;
  v14 = xmmword_191A93460;
  v15 = 1;
  v16 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::reshape_params>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "reshape");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191703FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191704118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFAA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFAA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _OWORD v14[2];
  int v15;

  v15 = a4;
  memset(v14, 0, sizeof(v14));
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(a2, v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "context_transfer");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191704294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "context_transfer");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917043B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _OWORD v13[2];

  memset(v13, 0, sizeof(v13));
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::context_transfer_params>(*a2, v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "context_transfer");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1917044BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "context_transfer");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191704608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC08E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC08E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_context_transfer_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::load_constant_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "load_constant");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191704790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;
  unint64_t v14;

  v13 = xmmword_191A8AA80;
  v14 = 0xFFFFFFFF00000001;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::load_constant_params>(*a2, &v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "load_constant");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1917048A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_constant");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1917049F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC04F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC04F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  __int128 v20;
  _BYTE v21[28];
  int v22;

  v22 = a4;
  __asm { FMOV            V0.2S, #1.0 }
  v19 = _D0;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  Espresso::SerDes::params_io<Espresso::axpby_params>(a2, (uint64_t)&v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "axpby");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_191704B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::axpby_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "axpby");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191704CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  uint64_t v18;
  __int128 v19;
  _BYTE v20[28];

  __asm { FMOV            V0.2S, #1.0 }
  v18 = _D0;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::axpby_params>(*a2, (uint64_t)&v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "axpby");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_191704DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "axpby");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191704F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_axpby_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v16 = 0;
  v17 = a4;
  v14 = 1056964608;
  v15 = 1993;
  Espresso::SerDes::params_io<Espresso::dropout_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout_grad");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191705088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::dropout_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "dropout_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917051A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  uint64_t v14;
  int v15;

  v13 = 1056964608;
  v14 = 1993;
  v15 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::dropout_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "dropout_grad");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1917052C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170540C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v16 = 0;
  v17 = a4;
  v14 = 1056964608;
  v15 = 1993;
  Espresso::SerDes::params_io<Espresso::dropout_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191705594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::dropout_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "dropout");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917056B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  uint64_t v14;
  int v15;

  v13 = 1056964608;
  v14 = 1993;
  v15 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::dropout_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "dropout");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1917057CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "dropout");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191705918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_dropout_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _QWORD v14[3];
  char v15;
  uint64_t v16;
  int v17;

  v17 = a4;
  v14[0] = 0;
  v14[1] = 1065353216;
  v14[2] = 897988541;
  v15 = 0;
  v16 = 0;
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise_grad");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191705AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "elementwise_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191705BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[3];
  char v14;
  uint64_t v15;

  v13[0] = 0;
  v13[1] = 1065353216;
  v13[2] = 897988541;
  v14 = 0;
  v15 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::elementwise_params>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "elementwise_grad");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191705CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191705E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  v33 = a4;
  v24 = 0;
  v26 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v27 = _D0;
  v32 = 0;
  v19 = xmmword_191A93320;
  v20 = 0;
  v21 = _D0;
  v28 = 0;
  v22 = 0;
  v25 = 0;
  v23 = 0;
  v29 = 0;
  v31 = 0;
  v30 = 0;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, (uint64_t)&v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_weights_grad");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_191706004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "inner_product_weights_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191706124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v23 = 0;
  v25 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v26 = _D0;
  v31 = 0;
  v18 = xmmword_191A93320;
  v19 = 0;
  v20 = _D0;
  v27 = 0;
  v21 = 0;
  v24 = 0;
  v22 = 0;
  v28 = 0;
  v30 = 0;
  v29 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*a2, (uint64_t)&v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "inner_product_weights_grad");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_191706274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_weights_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1917063C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_weights_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  v33 = a4;
  v24 = 0;
  v26 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v27 = _D0;
  v32 = 0;
  v19 = xmmword_191A93320;
  v20 = 0;
  v21 = _D0;
  v28 = 0;
  v22 = 0;
  v25 = 0;
  v23 = 0;
  v29 = 0;
  v31 = 0;
  v30 = 0;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, (uint64_t)&v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_grad");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_191706584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "inner_product_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917066A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v23 = 0;
  v25 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v26 = _D0;
  v31 = 0;
  v18 = xmmword_191A93320;
  v19 = 0;
  v20 = _D0;
  v27 = 0;
  v21 = 0;
  v24 = 0;
  v22 = 0;
  v28 = 0;
  v30 = 0;
  v29 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*a2, (uint64_t)&v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "inner_product_grad");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1917067F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191706940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t v15;
  int v16;

  v16 = a4;
  v14 = 897988541;
  v15 = 0x200000003;
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize_grad");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191706ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "l2_normalize_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191706BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  uint64_t v14;

  v13 = 897988541;
  v14 = 0x200000003;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "l2_normalize_grad");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191706D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191706E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  uint64_t v15;
  int v16;

  v16 = a4;
  v14 = 897988541;
  v15 = 0x200000003;
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191706FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "l2_normalize");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917070FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  uint64_t v14;

  v13 = 897988541;
  v14 = 0x200000003;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::l2_norm_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "l2_normalize");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191707214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "l2_normalize");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191707360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC02C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC02C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_l2_normalize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v23 = a4;
  v14 = 0;
  v15 = 0;
  v16 = 0x3F6666663727C5ACLL;
  v17 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 1065353216;
  v21 = 0;
  v22 = 0x200000000;
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm_grad");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19170750C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "batchnorm_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170762C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v13 = 0;
  v14 = 0;
  v15 = 0x3F6666663727C5ACLL;
  v16 = 0;
  v17 = 0u;
  v18 = 0u;
  v19 = 1065353216;
  v20 = 0;
  v21 = 0x200000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "batchnorm_grad");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191707764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1917078B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "batchnorm");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191707A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v13 = 0;
  v14 = 0;
  v15 = 0x3F6666663727C5ACLL;
  v16 = 0;
  v17 = 0u;
  v18 = 0u;
  v19 = 1065353216;
  v20 = 0;
  v21 = 0x200000000;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "batchnorm");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191707B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191707CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFD10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFD10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  char v15;
  int v16;

  v16 = a4;
  v14 = 0;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::bias_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "bias_grad");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191707E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::bias_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "bias_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191707F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  char v14;

  v13 = 0;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::bias_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "bias_grad");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191708060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "bias_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1917081AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFD48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFD48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  int v14;
  char v15;
  int v16;

  v16 = a4;
  v14 = 0;
  v15 = 0;
  Espresso::SerDes::params_io<Espresso::bias_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191708328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::bias_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "bias");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191708448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  int v13;
  char v14;

  v13 = 0;
  v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::bias_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "bias");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191708550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170869C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_bias_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v24 = a4;
  v19 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v20 = _D0;
  v21 = 0;
  v23 = 0;
  v22 = 0;
  Espresso::SerDes::params_io<Espresso::activation_params>(a2, (uint64_t)&v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation_grad");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_191708828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::activation_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "activation_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191708948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v18 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v19 = _D0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::activation_params>(*a2, (uint64_t)&v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "activation_grad");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_191708A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191708BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0640;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0640;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  void *v15;
  char v16;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::activation_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v11, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v11, &v13);
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v13 + 232))(v13, &v15, __p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15);
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v12 < 0)
    operator delete(v11[0]);
}

void sub_191708D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a15 < 0)
    operator delete(__p);
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a22);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v21 = _D0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::activation_params>(*a2, (uint64_t)&v20, 1);
  std::string::basic_string[abi:ne180100]<0>(v14, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v14, &v16);
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v16 + 232))(v16, &v18, __p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18);
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v15 < 0)
    operator delete(v14[0]);
}

void sub_191708EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a21);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "activation");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191709018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFF08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFF08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_activation_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  int v17;

  v17 = a4;
  v16 = 256;
  v14 = xmmword_191A93370;
  v15 = 1;
  Espresso::SerDes::params_io<Espresso::softmax_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_loss_grad");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1917091AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::softmax_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "softmax_loss_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917092CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v15 = 256;
  v13 = xmmword_191A93370;
  v14 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::softmax_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "softmax_loss_grad");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1917093EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax_loss_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191709538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_loss_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _DWORD v14[10];
  __int16 v15;
  char v16;
  int v17;

  v17 = a4;
  v16 = 0;
  v15 = 0;
  v14[0] = 0;
  v14[8] = 0;
  Espresso::SerDes::params_io<Espresso::concat_params>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "concat_grad");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1917096BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::concat_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "concat_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1917097DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _DWORD v13[10];
  __int16 v14;
  char v15;

  v15 = 0;
  v14 = 0;
  v13[0] = 0;
  v13[8] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::concat_params>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "concat_grad");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1917098EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "concat_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191709A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  _OWORD v14[2];
  int v15;
  __int16 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v24 = a4;
  v14[0] = xmmword_191A934F0;
  v14[1] = xmmword_191A93320;
  v15 = 2;
  v16 = 1;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  v20 = 0;
  v21 = 0x100000001;
  v22 = 0;
  v23 = 0;
  Espresso::SerDes::params_io<Espresso::pool_params>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool_grad");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191709BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::pool_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "pool_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191709D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _OWORD v13[2];
  int v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v13[0] = xmmword_191A934F0;
  v13[1] = xmmword_191A93320;
  v14 = 2;
  v15 = 1;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 0;
  v20 = 0x100000001;
  v21 = 0;
  v22 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::pool_params>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "pool_grad");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_191709E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191709F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFE98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[5];
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  int v38;
  char v39;
  int v40;

  v40 = a4;
  v23 = 1;
  v25 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v24 = 0;
  v26 = 0;
  v27 = 0x1000100010001;
  v28 = 0;
  v30 = 1;
  v38 = 0;
  v39 = 0;
  v34 = 0;
  v35 = 0;
  v20 = xmmword_191A93300;
  memset(v19, 0, 32);
  v19[4] = 1;
  v29 = xmmword_191A93310;
  v31 = 0;
  v33 = 1;
  v21 = 0xFFFFFFFF00000000;
  v22 = _D0;
  v32 = 0;
  v36 = 0;
  v37 = 1;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, (uint64_t)v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_weights_grad");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19170A188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "convolution_weights_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170A2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  _QWORD v18[5];
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  int v37;
  char v38;

  v22 = 1;
  v24 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v23 = 0;
  v25 = 0;
  v26 = 0x1000100010001;
  v27 = 0;
  v29 = 1;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v19 = xmmword_191A93300;
  memset(v18, 0, 32);
  v18[4] = 1;
  v28 = xmmword_191A93310;
  v30 = 0;
  v32 = 1;
  v20 = 0xFFFFFFFF00000000;
  v21 = _D0;
  v31 = 0;
  v35 = 0;
  v36 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*a2, (uint64_t)v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "convolution_weights_grad");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_19170A428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_weights_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170A574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0F38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_weights_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[5];
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  int v38;
  char v39;
  int v40;

  v40 = a4;
  v23 = 1;
  v25 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v24 = 0;
  v26 = 0;
  v27 = 0x1000100010001;
  v28 = 0;
  v30 = 1;
  v38 = 0;
  v39 = 0;
  v34 = 0;
  v35 = 0;
  v20 = xmmword_191A93300;
  memset(v19, 0, 32);
  v19[4] = 1;
  v29 = xmmword_191A93310;
  v31 = 0;
  v33 = 1;
  v21 = 0xFFFFFFFF00000000;
  v22 = _D0;
  v32 = 0;
  v36 = 0;
  v37 = 1;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, (uint64_t)v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_grad");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19170A760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 328))(v4);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "convolution_grad");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170A880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  _QWORD v18[5];
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  int v37;
  char v38;

  v22 = 1;
  v24 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v23 = 0;
  v25 = 0;
  v26 = 0x1000100010001;
  v27 = 0;
  v29 = 1;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v19 = xmmword_191A93300;
  memset(v18, 0, 32);
  v18[4] = 1;
  v28 = xmmword_191A93310;
  v30 = 0;
  v32 = 1;
  v20 = 0xFFFFFFFF00000000;
  v21 = _D0;
  v31 = 0;
  v35 = 0;
  v36 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*a2, (uint64_t)v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "convolution_grad");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_19170AA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 328))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution_grad");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170AB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_grad_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "deconvolution");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170ACD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  _QWORD v18[5];
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  int v37;
  char v38;

  v22 = 1;
  v24 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v23 = 0;
  v25 = 0;
  v26 = 0x1000100010001;
  v27 = 0;
  v29 = 1;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v19 = xmmword_191A93300;
  memset(v18, 0, 32);
  v18[4] = 1;
  v28 = xmmword_191A93310;
  v30 = 0;
  v32 = 1;
  v20 = 0xFFFFFFFF00000000;
  v21 = _D0;
  v31 = 0;
  v35 = 0;
  v36 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*a2, (uint64_t)v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "deconvolution");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_19170AE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "deconvolution");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170AFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0410;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_deconvolution_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::split_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "split");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170B128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v14 = 0;
  v16 = 0;
  v15 = 0;
  v13 = 0x200000002;
  v17 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::split_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "split");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_19170B240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "split");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170B38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_split_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "elementwise");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170B514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _QWORD v13[3];
  char v14;
  uint64_t v15;

  v13[0] = 0;
  v13[1] = 1065353216;
  v13[2] = 897988541;
  v14 = 0;
  v15 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::elementwise_params>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "elementwise");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_19170B638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170B784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "upsample");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170B90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v18 = xmmword_191A93470;
  v19 = 0x100000000;
  v20 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v21 = _D0;
  v22 = 1;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v26 = _D0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::upsample_kernel_params>(*a2, (uint64_t)&v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "upsample");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_19170BA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "upsample");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170BB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFCD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFCD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_upsample_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::concat_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "concat");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170BD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _DWORD v13[10];
  __int16 v14;
  char v15;

  v15 = 0;
  v14 = 0;
  v13[0] = 0;
  v13[8] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::concat_params>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "concat");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_19170BE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "concat");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170BF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  void *__p[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  v33 = a4;
  v24 = 0;
  v26 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v27 = _D0;
  v32 = 0;
  v19 = xmmword_191A93320;
  v20 = 0;
  v21 = _D0;
  v28 = 0;
  v22 = 0;
  v25 = 0;
  v23 = 0;
  v29 = 0;
  v31 = 0;
  v30 = 0;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, (uint64_t)&v19, 0);
  Espresso::abstract_engine_factory::shared(&v17);
  v10 = v17;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_quantized");
  v14 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v19, &v14);
  if (v16 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_19170C138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "inner_product_quantized");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170C258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v23 = 0;
  v25 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v26 = _D0;
  v31 = 0;
  v18 = xmmword_191A93320;
  v19 = 0;
  v20 = _D0;
  v27 = 0;
  v21 = 0;
  v24 = 0;
  v22 = 0;
  v28 = 0;
  v30 = 0;
  v29 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*a2, (uint64_t)&v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "inner_product_quantized");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_19170C3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product_quantized");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170C4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0E90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0E90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_quantized_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "inner_product");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170C67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v23 = 0;
  v25 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  v26 = _D0;
  v31 = 0;
  v18 = xmmword_191A93320;
  v19 = 0;
  v20 = _D0;
  v27 = 0;
  v21 = 0;
  v24 = 0;
  v22 = 0;
  v28 = 0;
  v30 = 0;
  v29 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(*a2, (uint64_t)&v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "inner_product");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_19170C7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170C918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC04B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC04B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::softmax_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "softmax");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170CAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v15 = 256;
  v13 = xmmword_191A93370;
  v14 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::softmax_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "softmax");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_19170CBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170CD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFB18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBFB18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::pool_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "pool");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170CE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  _OWORD v13[2];
  int v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v13[0] = xmmword_191A934F0;
  v13[1] = xmmword_191A93320;
  v14 = 2;
  v15 = 1;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 0;
  v20 = 0x100000001;
  v21 = 0;
  v22 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::pool_params>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "pool");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_19170CFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170D120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF3A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF3A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v18 = a4;
  v14 = 0x3F40000038D1B717;
  v15 = 3;
  v17 = 0;
  v16 = 0;
  Espresso::SerDes::params_io<Espresso::lrn_params>(a2, (uint64_t)&v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "lrn");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19170D2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::lrn_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "lrn");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170D3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v13 = 0x3F40000038D1B717;
  v14 = 3;
  v16 = 0;
  v15 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::lrn_params>(*a2, (uint64_t)&v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "lrn");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_19170D4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "lrn");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170D638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF1B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF1B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_lrn_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "convolution");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19170D7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  char v17;
  _QWORD v18[5];
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  int v37;
  char v38;

  v22 = 1;
  v24 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v23 = 0;
  v25 = 0;
  v26 = 0x1000100010001;
  v27 = 0;
  v29 = 1;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v19 = xmmword_191A93300;
  memset(v18, 0, 32);
  v18[4] = 1;
  v28 = xmmword_191A93310;
  v30 = 0;
  v32 = 1;
  v20 = 0xFFFFFFFF00000000;
  v21 = _D0;
  v31 = 0;
  v35 = 0;
  v36 = 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v8 = *a2;
  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(*a2, (uint64_t)v18, 1);
  std::string::basic_string[abi:ne180100]<0>(v12, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v8, (uint64_t)v12, &v14);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v14, "convolution");
  if (v17 < 0)
    operator delete(__p);
  v9 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_19170D940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a16);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170DA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC0058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::generic_convolution_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io<Espresso::no_op_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::no_op_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;
  int v15;

  v15 = a4;
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "no_op");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_19170DBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::no_op_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p;
  char v13;

  if (!v4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  (*(void (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  std::string::basic_string[abi:ne180100]<0>(v8, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v8, &v10);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v10, "no_op");
  if (v13 < 0)
    operator delete(__p);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_19170DD00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::no_op_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "no_op");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_19170DDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::no_op_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "no_op");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_19170DF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::no_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF178;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::no_op_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF178;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::no_op_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::SerDes::layer_io_base::throw_inconstistent_state(Espresso::SerDes::layer_io_base *this)
{
  Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::~meta_convolution_kernel(id *this)
{
  Espresso::MetalLowmemEngine::meta_convolution_kernel::~meta_convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  id v2;
  id v3;

  *this = &off_1E2D7F5C0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 103));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 101));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 99));

  v2 = this[94];
  if (v2)
  {
    this[95] = v2;
    operator delete(v2);
  }
  v3 = this[91];
  if (v3)
  {
    this[92] = v3;
    operator delete(v3);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 87));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 85));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 83));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 81));

  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::__launch(int32x2_t *a1, uint64_t a2, const void ***a3, uint64_t *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  int32x2_t *v19;
  int32x2_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void **v24;
  const void *v25;
  _DWORD *v26;
  _DWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int32 v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int32 v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  int *v42;
  int *v43;
  unsigned int *v44;
  unsigned int v45;
  double v46;
  double v47;
  int v48;
  float v49;
  int v50;
  float v51;
  const void *v52;
  id *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int32x2_t *v64;
  __int32 v65;
  __int32 v66;
  __int32 v67;
  int32x2_t v68;
  int v69;
  int32x2_t v70;
  int32x2_t *v71;
  int32x2_t v72;
  int32x2_t v73;
  int32x2_t v74;
  int8x8_t v75;
  int8x8_t v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  id v85;
  int v86;
  BOOL v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  int32x2_t *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int32x2_t *v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  id *v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  __int32 v127;
  __int32 v128;
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  float v135;
  int v136;
  float v137;
  unsigned int v138;
  int v139;
  void *v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BOOL8 v148;
  uint64_t v149;
  std::string *v150;
  __int128 v151;
  const std::string::value_type *v152;
  std::string::size_type v153;
  std::string *v154;
  __int128 v155;
  const std::string::value_type *v156;
  std::string::size_type v157;
  std::string *v158;
  __int128 v159;
  const std::string::value_type *v160;
  std::string::size_type v161;
  std::string *v162;
  __int128 v163;
  const std::string::value_type *v164;
  std::string::size_type v165;
  std::string *v166;
  __int128 v167;
  const std::string::value_type *v168;
  std::string::size_type v169;
  std::string *v170;
  __int128 v171;
  const std::string::value_type *v172;
  std::string::size_type v173;
  std::string *v174;
  __int128 v175;
  const std::string::value_type *v176;
  std::string::size_type v177;
  std::string *v178;
  __int128 v179;
  const std::string::value_type *v180;
  std::string::size_type v181;
  std::string *v182;
  __int128 v183;
  const std::string::value_type *v184;
  std::string::size_type v185;
  int v186;
  std::string::size_type v187;
  id v188;
  uint64_t v189;
  std::string *v190;
  uint64_t v191;
  void *v192;
  __int128 v193;
  unint64_t *v194;
  unint64_t v195;
  const char *v196;
  void *v197;
  int v198;
  id v199;
  void *v200;
  int v201;
  int v202;
  __int32 v203;
  __int32 v204;
  __int32 v205;
  int v206;
  int v207;
  int v208;
  unint64_t *v209;
  unint64_t v210;
  void *v211;
  int32x2_t v212;
  uint64_t v213;
  uint64_t v214;
  std::string::size_type v215;
  int32x2_t v216;
  __int128 v217;
  uint64_t v218;
  uint64_t v219;
  std::string::size_type v220;
  int32x2_t v221;
  __int128 v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::runtime_error *v234;
  std::runtime_error *v235;
  std::runtime_error *v236;
  std::runtime_error *v237;
  std::runtime_error *exception;
  __int32 v239;
  id *v240;
  int v241;
  __int32 v242;
  __int32 v243;
  std::__shared_weak_count *v244;
  uint64_t v245;
  int v246;
  _DWORD *v247;
  unsigned int v248;
  int32x2_t *v249;
  int v250;
  uint64_t v251;
  unsigned int v252;
  const void ***v253;
  id v254;
  uint64_t v255;
  id v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  void *v262;
  int32x2_t *v263;
  id v264[2];
  void *v265;
  std::__shared_weak_count *v266;
  int32x2_t *v267;
  std::__shared_weak_count *v268;
  void *v269;
  std::__shared_weak_count *v270;
  __int128 v271;
  std::string v272;
  void *v273;
  void *v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  std::string v278;
  _BYTE v279[24];

  if (*(_QWORD *)a2
  {
    v9 = (uint64_t)v8;
    v10 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v271 = v8;
    *((_QWORD *)&v271 + 1) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
    v9 = 0;
    v271 = 0uLL;
  }
  v13 = (const void *)a1[1];
  if (v13
  {
    v15 = (std::__shared_weak_count *)a1[2];
    v269 = v14;
    v270 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
  }
  else
  {
    v269 = 0;
    v270 = 0;
  }
  v251 = (uint64_t)a4;
  v18 = *a4;
  if (*(_QWORD *)v18
  {
    v20 = v19;
    v21 = *(std::__shared_weak_count **)(v18 + 8);
    v267 = v19;
    v268 = v21;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
  }
  else
  {
    v20 = 0;
    v267 = 0;
    v268 = 0;
  }
  v24 = *a3;
  v25 = **a3;
  if (v25
  {
    v27 = v26;
    v28 = (std::__shared_weak_count *)v24[1];
    v265 = v26;
    v266 = v28;
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
  }
  else
  {
    v28 = 0;
    v27 = 0;
    v265 = 0;
    v266 = 0;
  }
  v263 = a1;
  v244 = v28;
  if (*(_QWORD *)&a1[103] && *(_QWORD *)&a1[101] && *(_QWORD *)&a1[99] && !*(_QWORD *)&a1[78])
  {
    v245 = v9;
    v247 = v27;
    v253 = a3;
    v249 = v20;
    v31 = v20[14].i32[1];
    v32 = v27[29];
    v33 = a1[53].i32[0];
    if (v33 <= 1)
      v34 = 1;
    else
      v34 = v33;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v279, 2 * v34 * a1[43].i32[0], 1, 1, 1);
    v35 = 0;
    v36 = 0;
    v37 = a1[43].i32[0];
    if (v31)
      v38 = 128.0;
    else
      v38 = 256.0;
    v39 = v37 * (int)v34;
    v259 = v34;
    v261 = a1[43].u32[0];
    v255 = *(_QWORD *)v279;
    v257 = 4 * v37;
    do
    {
      if ((int)v261 >= 1)
      {
        v40 = v261;
        v41 = (float *)(*(_QWORD *)(v255 + 16) + v35);
        v42 = (int *)(*(_QWORD *)(*(_QWORD *)&v263[99] + 16) + v35);
        v43 = (int *)(*(_QWORD *)(*(_QWORD *)&v263[101] + 16) + v35);
        v44 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)&v263[103] + 16) + v35);
        do
        {
          v45 = *v44++;
          v46 = exp2(-(double)v45);
          v47 = v46 + v46;
          if (!v32)
            v47 = v46;
          if (!v31)
            v46 = v47;
          if (!v32)
            v46 = v46 * 0.5;
          if (!v31)
            v46 = v47;
          v48 = *v43++;
          v49 = v46 * (double)v48;
          *v41 = v49;
          v50 = *v42++;
          v51 = v46 * (double)v50 / v38;
          v41[v39] = v51;
          ++v41;
          --v40;
        }
        while (v40);
      }
      ++v36;
      v35 += v257;
    }
    while (v36 != v259);
    a1 = v263;
    v52 = (const void *)v263[1];
    if (!v52
    {
      *(_OWORD *)&v278.__r_.__value_.__l.__data_ = 0uLL;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v54 = (std::__shared_weak_count *)v263[2];
    v278.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    v278.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
    a3 = v253;
    v27 = v247;
    v20 = v249;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v57 = objc_msgSend(v53[18], "newBufferWithBytes:length:options:", *(_QWORD *)(v255 + 16), 4 * *(int *)(v255 + 8), 0);
    v58 = (void *)v263[78];
    v263[78] = (int32x2_t)v57;

    if (v54)
    {
      v59 = (unint64_t *)&v54->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    objc_storeStrong((id *)&v263[79], *(id *)&v263[78]);
    v61 = *(std::__shared_weak_count **)&v279[8];
    if (*(_QWORD *)&v279[8])
    {
      v62 = (unint64_t *)(*(_QWORD *)&v279[8] + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v9 = v245;
  }
  v64 = a1 + 38;
  v65 = v20[2].i32[1];
  v66 = v27[2];
  if (v65 != a1[54].i16[3] || v66 != v64->i32[0] || v27[3] != v263[38].i32[1])
  {
    v263[38].i32[0] = v66;
    v67 = v27[3];
    v263[38].i32[1] = v67;
    v68 = v20[1];
    v263[39] = v68;
    v263[54].i16[3] = v65;
    v263[40].i32[1] = v27[51];
    v69 = v263[47].i16[0];
    if (v69 != 4)
    {
      if (v69 == 2)
      {
        v76.i16[0] = 0;
        v76.i16[2] = 0;
        v71 = v263;
        goto LABEL_77;
      }
      if (v69 != 1)
      {
        v71 = v263;
        v76.i16[0] = v263[48].i16[0];
        v76.i16[2] = v263[48].i16[2];
        goto LABEL_77;
      }
    }
    v70 = vadd_s32((int32x2_t)__PAIR64__(v67, v66), (int32x2_t)-1);
    v71 = v263;
    v73.i32[0] = v263[50].i16[0];
    v73.i32[1] = v263[50].i16[1];
    v72.i32[1] = v263[49].i16[3];
    v72.i32[0] = v263[49].i16[2];
    v74 = vmax_s32(vsub_s32(vmul_s32(vadd_s32(v263[44], (int32x2_t)-1), vmax_s32(v73, (int32x2_t)0x100000001)), (int32x2_t)vmvn_s8((int8x8_t)vmla_s32(vneg_s32(v68), v70, v72))), 0);
    v75 = (int8x8_t)vshr_n_u32((uint32x2_t)v74, 1uLL);
    v76 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v263[47].u16[0] == 1), 0x1FuLL)), v75, (int8x8_t)vsub_s32(v74, (int32x2_t)v75));
LABEL_77:
    v71[50].i16[2] = v76.i16[0];
    v71[50].i16[3] = v76.i16[2];
    v77 = (void *)v71[76];
    v71[76] = 0;

  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v264, v9);
  v78 = (void *)*((_QWORD *)v27 + 21);
  v79 = (void *)v20[21];
  v80 = (void *)v263[77];
  v81 = (void *)v263[79];
  v82 = v264[0];
  v256 = v78;
  v254 = v79;
  v83 = v80;
  v84 = v81;
  v85 = v84;
  v86 = v263[43].i32[1];
  v88 = v86 - 1;
  v87 = v86 < 1;
  v89 = v86 + 2;
  if (!v87)
    v89 = v88;
  v90 = v89 >> 2;
  v91 = v263[52].i32[1];
  if (v91 >= 2)
    v90 /= v91;
  v92 = (v90 + 1);
  v93 = v263;
  v260 = v84;
  v262 = v83;
  if (!*(_QWORD *)&v263[76])
  {
    v94 = v263[80].i32[0];
    if ((int)v94 > 1)
    {
      v278.__r_.__value_.__s.__data_[0] = 0;
      std::vector<unsigned char>::vector(v279, 192 * v94, &v278);
      v97 = v263[80].i32[0];
      v98 = *(_QWORD *)v279;
      if (v97 >= 1)
      {
        v99 = 0;
        v100 = 0;
        v101 = *(_QWORD *)v279;
        v102 = (int)v92 / v97;
        do
        {
          v103 = *(_OWORD *)v64->i8;
          v104 = *(_OWORD *)v64[4].i8;
          *(_OWORD *)(v101 + 16) = *(_OWORD *)v64[2].i8;
          *(_OWORD *)(v101 + 32) = v104;
          *(_OWORD *)v101 = v103;
          v105 = *(_OWORD *)v64[6].i8;
          v106 = *(_OWORD *)v64[8].i8;
          v107 = *(_OWORD *)v64[12].i8;
          *(_OWORD *)(v101 + 80) = *(_OWORD *)v64[10].i8;
          *(_OWORD *)(v101 + 96) = v107;
          *(_OWORD *)(v101 + 48) = v105;
          *(_OWORD *)(v101 + 64) = v106;
          v108 = *(_OWORD *)v64[14].i8;
          v109 = *(_OWORD *)v64[16].i8;
          v110 = *(_OWORD *)v64[18].i8;
          *(int32x2_t *)(v101 + 157) = *(int32x2_t *)((char *)v64 + 157);
          *(_OWORD *)(v101 + 128) = v109;
          *(_OWORD *)(v101 + 144) = v110;
          *(_OWORD *)(v101 + 112) = v108;
          v111 = v263[80].i32[0];
          *(_WORD *)(v101 + 132) = v111;
          *(_DWORD *)(v101 + 16) = v100;
          v100 += v102;
          ++v99;
          v101 += 192;
        }
        while (v99 < v111);
      }
      v112 = objc_msgSend(*((id *)v269 + 18), "newBufferWithBytes:length:options:", v98, *(_QWORD *)&v279[8] - v98, 0);
      v113 = (void *)v263[76];
      v263[76] = (int32x2_t)v112;

      if (*(_QWORD *)v279)
      {
        *(_QWORD *)&v279[8] = *(_QWORD *)v279;
        operator delete(*(void **)v279);
      }
      v93 = v263;
    }
    else
    {
      v95 = objc_msgSend(*((id *)v269 + 18), "newBufferWithBytes:length:options:", v64, 168, 0);
      v93 = v263;
      v96 = (void *)v263[76];
      v263[76] = (int32x2_t)v95;

    }
  }
  v114 = v93[43].i32[0];
  v115 = v114 - 1;
  v87 = v114 < 1;
  v116 = v114 + 2;
  if (v87)
    v117 = v116;
  else
    v117 = v115;
  if (!v83)
  {
    v234 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v234, "weights not set!");
    goto LABEL_304;
  }
  if (!v85)
  {
    v234 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v234, "biases not set!");
LABEL_304:
    __cxa_throw(v234, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v118 = v93;
  v119 = (uint64_t)a3;
  v120 = v93[38].i32[0];
  v121 = v93[38].i32[1];
  v122 = v93[54].i16[3];
  v276 = 0uLL;
  v277 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v276, *(const void **)&v118[94], *(_QWORD *)&v118[95], (uint64_t)(*(_QWORD *)&v118[95] - *(_QWORD *)&v118[94]) >> 2);
  v123 = (id *)v269;
  v124 = *((_QWORD *)v269 + 3);
  if (v124 && !v263[97].i8[0])
  {
    if (*(_BYTE *)(v124 + 12))
    {
      Espresso::wisdom_trainer2::get_tune(*((_QWORD *)v269 + 3), (uint64_t)v263, v119, v251, v279);
      if ((_QWORD)v276)
      {
        *((_QWORD *)&v276 + 1) = v276;
        operator delete((void *)v276);
      }
      v276 = *(_OWORD *)v279;
      v277 = *(_QWORD *)&v279[16];
    }
    if (!*(_BYTE *)(v124 + 80))
    {
      if (&v263[94] != (int32x2_t *)&v276)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v263[94], (char *)v276, *((uint64_t *)&v276 + 1), (uint64_t)(*((_QWORD *)&v276 + 1) - v276) >> 2);
      v263[97].i8[0] = 1;
    }
  }
  v273 = 0;
  v274 = 0;
  v275 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v273, (const void *)v276, *((uint64_t *)&v276 + 1), (uint64_t)(*((_QWORD *)&v276 + 1) - v276) >> 2);
  Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_for_tune((uint64_t)v263, (uint64_t)&v273);
  if (v273)
  {
    v274 = v273;
    operator delete(v273);
  }
  v258 = v120;
  v125 = v122 + v122 * (v117 >> 2);
  v126 = v263[89].u32[0];
  if (v126)
  {
    v127 = v263[71].i32[0];
    v128 = v263[70].i32[1];
    v129 = v263[89].u32[1];
    v130 = v263[90].i32[0];
    v131 = v263[70].i32[0] / 4;
    goto LABEL_145;
  }
  v263[89] = (int32x2_t)0x400000004;
  v126 = 4;
  v263[90].i32[0] = 4;
  v127 = v263[71].i32[0];
  v128 = v263[70].i32[1];
  v132 = v263[70].i32[0];
  v133 = v132 + 3;
  if (v132 >= 0)
    v133 = v263[70].i32[0];
  v134 = v258 % (4 * v127);
  if (v134)
  {
    v135 = (float)v258;
    if ((float)((float)v134 / (float)v258) > 0.02)
    {
      v126 = 2;
      v263[89].i32[0] = 2;
      v134 = v258 % (2 * v127);
    }
    if (v134)
    {
      if ((float)((float)v134 / v135) > 0.02)
      {
        v126 >>= 1;
        v263[89].i32[0] = v126;
        v134 = v258 % (int)(v126 * v127);
      }
      if (v134 && v126 >= 2 && (float)((float)v134 / v135) > 0.02)
      {
        v126 >>= 1;
        v263[89].i32[0] = v126;
      }
    }
  }
  v131 = v133 >> 2;
  v136 = v121 % (4 * v128);
  if (!v136)
  {
    v129 = 4;
    goto LABEL_134;
  }
  v137 = (float)v121;
  if ((float)((float)v136 / (float)v121) <= 0.02)
  {
    v129 = 4;
    goto LABEL_128;
  }
  v129 = 2;
  v263[89].i32[1] = 2;
  v136 = v121 % (2 * v128);
  if (v136)
  {
LABEL_128:
    if ((float)((float)v136 / v137) > 0.02)
    {
      v129 >>= 1;
      v263[89].i32[1] = v129;
      v136 = v121 % (int)(v129 * v128);
    }
    if (v136 && v129 >= 2 && (float)((float)v136 / v137) > 0.02)
    {
      v129 >>= 1;
      v263[89].i32[1] = v129;
    }
  }
LABEL_134:
  v138 = v126 * v129;
  if (v126 * v129 > 8)
  {
    v130 = 4;
  }
  else
  {
    if (v125 % v131)
    {
      v130 = 4;
    }
    else
    {
      v130 = 1;
      v263[90].i32[0] = 1;
    }
    if (v138 <= 4)
    {
      if (!(v125 % (2 * v131)))
      {
        v130 = 2;
        v263[90].i32[0] = 2;
      }
      if (v138 <= 2 && !(v125 % (4 * v131)))
      {
        v130 = 4;
        v263[90].i32[0] = 4;
      }
    }
  }
LABEL_145:
  v246 = v130;
  v248 = v129;
  v250 = v131;
  v252 = v126;
  if (!*(_QWORD *)&v263[75])
  {
    v240 = v123;
    v242 = v128;
    v139 = v121;
    v140 = (void *)objc_opt_new();
    v141 = (void *)objc_opt_new();
    *(_WORD *)v279 = v92;
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 0, v92);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 0);
    v142 = v263[44].u32[0];
    *(_WORD *)v279 = v263[44].i32[0];
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 1, v142);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 1);
    v143 = v263[44].u32[1];
    *(_WORD *)v279 = v263[44].i32[1];
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 2, v143);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 2);
    v144 = v263[52].u32[1];
    *(_WORD *)v279 = v263[52].i32[1];
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 3, v144);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 3);
    v145 = v263[53].u16[2] >> 2;
    *(_WORD *)v279 = (unsigned __int16)v263[53].i16[2] >> 2;
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 4, v145);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 4);
    v146 = v263[53].u16[3] >> 2;
    *(_WORD *)v279 = (unsigned __int16)v263[53].i16[3] >> 2;
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 5, v146);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 5);
    LODWORD(v147) = v263[53].i32[0];
    if ((int)v147 <= 1)
      v147 = 1;
    else
      v147 = v147;
    *(_WORD *)v279 = v147;
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 6, v147);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 6);
    v148 = v263[41].i32[0] > 0;
    *(_WORD *)v279 = v263[41].i32[0] > 0;
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 7, v148);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 7);
    *(_WORD *)v279 = v263[49].i16[2];
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 8, *(__int16 *)v279);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 8);
    *(_WORD *)v279 = v263[49].i16[3];
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 9, *(__int16 *)v279);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 9);
    *(_WORD *)v279 = v263[50].i16[0];
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 10, *(__int16 *)v279);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 10);
    *(_WORD *)v279 = v263[50].i16[1];
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 11, *(__int16 *)v279);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 11);
    v149 = v263[80].u32[0];
    *(_WORD *)v279 = v263[80].i32[0];
    objc_msgSend(v141, "appendFormat:", CFSTR("%d:%d_"), 12, v149);
    objc_msgSend(v140, "setConstantValue:type:atIndex:", v279, 41, 12);
    std::string::basic_string[abi:ne180100]<0>(&v272, "conv_1x1");
    std::to_string(&v278, v263[70].i32[0]);
    v150 = std::string::insert(&v278, 0, "_oc");
    v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
    *(_QWORD *)&v279[16] = *((_QWORD *)&v150->__r_.__value_.__l + 2);
    *(_OWORD *)v279 = v151;
    v150->__r_.__value_.__l.__size_ = 0;
    v150->__r_.__value_.__r.__words[2] = 0;
    v150->__r_.__value_.__r.__words[0] = 0;
    if (v279[23] >= 0)
      v152 = v279;
    else
      v152 = *(const std::string::value_type **)v279;
    if (v279[23] >= 0)
      v153 = v279[23];
    else
      v153 = *(_QWORD *)&v279[8];
    std::string::append(&v272, v152, v153);
    if ((v279[23] & 0x80000000) != 0)
      operator delete(*(void **)v279);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    std::to_string(&v278, v263[70].i32[1]);
    v154 = std::string::insert(&v278, 0, "_oy");
    v155 = *(_OWORD *)&v154->__r_.__value_.__l.__data_;
    *(_QWORD *)&v279[16] = *((_QWORD *)&v154->__r_.__value_.__l + 2);
    *(_OWORD *)v279 = v155;
    v154->__r_.__value_.__l.__size_ = 0;
    v154->__r_.__value_.__r.__words[2] = 0;
    v154->__r_.__value_.__r.__words[0] = 0;
    if (v279[23] >= 0)
      v156 = v279;
    else
      v156 = *(const std::string::value_type **)v279;
    if (v279[23] >= 0)
      v157 = v279[23];
    else
      v157 = *(_QWORD *)&v279[8];
    std::string::append(&v272, v156, v157);
    if ((v279[23] & 0x80000000) != 0)
      operator delete(*(void **)v279);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    std::to_string(&v278, v263[71].i32[0]);
    v158 = std::string::insert(&v278, 0, "_ox");
    v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
    *(_QWORD *)&v279[16] = *((_QWORD *)&v158->__r_.__value_.__l + 2);
    *(_OWORD *)v279 = v159;
    v158->__r_.__value_.__l.__size_ = 0;
    v158->__r_.__value_.__r.__words[2] = 0;
    v158->__r_.__value_.__r.__words[0] = 0;
    if (v279[23] >= 0)
      v160 = v279;
    else
      v160 = *(const std::string::value_type **)v279;
    if (v279[23] >= 0)
      v161 = v279[23];
    else
      v161 = *(_QWORD *)&v279[8];
    std::string::append(&v272, v160, v161);
    if ((v279[23] & 0x80000000) != 0)
      operator delete(*(void **)v279);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    std::to_string(&v278, v263[71].i32[1]);
    v162 = std::string::insert(&v278, 0, "_kx");
    v163 = *(_OWORD *)&v162->__r_.__value_.__l.__data_;
    *(_QWORD *)&v279[16] = *((_QWORD *)&v162->__r_.__value_.__l + 2);
    *(_OWORD *)v279 = v163;
    v162->__r_.__value_.__l.__size_ = 0;
    v162->__r_.__value_.__r.__words[2] = 0;
    v162->__r_.__value_.__r.__words[0] = 0;
    if (v279[23] >= 0)
      v164 = v279;
    else
      v164 = *(const std::string::value_type **)v279;
    if (v279[23] >= 0)
      v165 = v279[23];
    else
      v165 = *(_QWORD *)&v279[8];
    std::string::append(&v272, v164, v165);
    if ((v279[23] & 0x80000000) != 0)
      operator delete(*(void **)v279);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    std::to_string(&v278, v263[72].i32[0]);
    v166 = std::string::insert(&v278, 0, "_ky");
    v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
    *(_QWORD *)&v279[16] = *((_QWORD *)&v166->__r_.__value_.__l + 2);
    *(_OWORD *)v279 = v167;
    v166->__r_.__value_.__l.__size_ = 0;
    v166->__r_.__value_.__r.__words[2] = 0;
    v166->__r_.__value_.__r.__words[0] = 0;
    if (v279[23] >= 0)
      v168 = v279;
    else
      v168 = *(const std::string::value_type **)v279;
    if (v279[23] >= 0)
      v169 = v279[23];
    else
      v169 = *(_QWORD *)&v279[8];
    std::string::append(&v272, v168, v169);
    if ((v279[23] & 0x80000000) != 0)
      operator delete(*(void **)v279);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    std::to_string(&v278, v263[72].i32[1]);
    v170 = std::string::insert(&v278, 0, "_weights_type");
    v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
    *(_QWORD *)&v279[16] = *((_QWORD *)&v170->__r_.__value_.__l + 2);
    *(_OWORD *)v279 = v171;
    v170->__r_.__value_.__l.__size_ = 0;
    v170->__r_.__value_.__r.__words[2] = 0;
    v170->__r_.__value_.__r.__words[0] = 0;
    if (v279[23] >= 0)
      v172 = v279;
    else
      v172 = *(const std::string::value_type **)v279;
    if (v279[23] >= 0)
      v173 = v279[23];
    else
      v173 = *(_QWORD *)&v279[8];
    std::string::append(&v272, v172, v173);
    if ((v279[23] & 0x80000000) != 0)
      operator delete(*(void **)v279);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    std::to_string(&v278, v263[73].i32[0]);
    v174 = std::string::insert(&v278, 0, "_image_type");
    v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
    *(_QWORD *)&v279[16] = *((_QWORD *)&v174->__r_.__value_.__l + 2);
    *(_OWORD *)v279 = v175;
    v174->__r_.__value_.__l.__size_ = 0;
    v174->__r_.__value_.__r.__words[2] = 0;
    v174->__r_.__value_.__r.__words[0] = 0;
    if (v279[23] >= 0)
      v176 = v279;
    else
      v176 = *(const std::string::value_type **)v279;
    if (v279[23] >= 0)
      v177 = v279[23];
    else
      v177 = *(_QWORD *)&v279[8];
    std::string::append(&v272, v176, v177);
    if ((v279[23] & 0x80000000) != 0)
      operator delete(*(void **)v279);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    std::to_string(&v278, v263[73].i32[1]);
    v178 = std::string::insert(&v278, 0, "_tex_mode");
    v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
    *(_QWORD *)&v279[16] = *((_QWORD *)&v178->__r_.__value_.__l + 2);
    *(_OWORD *)v279 = v179;
    v178->__r_.__value_.__l.__size_ = 0;
    v178->__r_.__value_.__r.__words[2] = 0;
    v178->__r_.__value_.__r.__words[0] = 0;
    if (v279[23] >= 0)
      v180 = v279;
    else
      v180 = *(const std::string::value_type **)v279;
    if (v279[23] >= 0)
      v181 = v279[23];
    else
      v181 = *(_QWORD *)&v279[8];
    std::string::append(&v272, v180, v181);
    if ((v279[23] & 0x80000000) != 0)
      operator delete(*(void **)v279);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    std::to_string(&v278, v263[74].i32[0]);
    v182 = std::string::insert(&v278, 0, "_nk");
    v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
    *(_QWORD *)&v279[16] = *((_QWORD *)&v182->__r_.__value_.__l + 2);
    *(_OWORD *)v279 = v183;
    v182->__r_.__value_.__l.__size_ = 0;
    v182->__r_.__value_.__r.__words[2] = 0;
    v182->__r_.__value_.__r.__words[0] = 0;
    if (v279[23] >= 0)
      v184 = v279;
    else
      v184 = *(const std::string::value_type **)v279;
    if (v279[23] >= 0)
      v185 = v279[23];
    else
      v185 = *(_QWORD *)&v279[8];
    std::string::append(&v272, v184, v185);
    if ((v279[23] & 0x80000000) != 0)
      operator delete(*(void **)v279);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v278.__r_.__value_.__l.__data_);
    v186 = SHIBYTE(v272.__r_.__value_.__r.__words[2]);
    v187 = v272.__r_.__value_.__r.__words[0];
    v188 = objc_retainAutorelease(v141);
    v189 = objc_msgSend(v188, "UTF8String");
    if (v186 >= 0)
      v190 = &v272;
    else
      v190 = (std::string *)v187;
    objc_msgSend(v240[20], "kernelForFunction:cacheString:withConstants:", v190, v189, v140);
    v191 = objc_claimAutoreleasedReturnValue();
    v192 = (void *)v263[75];
    v263[75] = (int32x2_t)v191;

    if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v272.__r_.__value_.__l.__data_);

    v121 = v139;
    v128 = v242;
  }
  v193 = v271;
  *(_OWORD *)&v272.__r_.__value_.__l.__data_ = v271;
  if (*((_QWORD *)&v271 + 1))
  {
    v194 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
    do
      v195 = __ldxr(v194);
    while (__stxr(v195 + 1, v194));
  }
  if (*(_QWORD *)&v263[77] && *(_QWORD *)&v263[78])
  {
    v239 = v127;
    v241 = v121;
    if (v263[80].i32[1])
      v196 = "dequantize_range_f16";
    else
      v196 = "dequantize_range_f32";
    objc_msgSend(*(id *)(*(_QWORD *)&v263[1] + 160), "kernelForFunction:cacheString:withConstants:", v196, 0, 0);
    v197 = (void *)objc_claimAutoreleasedReturnValue();
    v243 = v128;
    v198 = v125;
    v199 = *(id *)(v193 + 152);
    v200 = v199;
    if (!v197)
    {
      v236 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v236, "Kernel not found");
      __cxa_throw(v236, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v199, "setComputePipelineState:", v197);
    if (v263[43].i32[1] <= 4)
      v201 = 4;
    else
      v201 = v263[43].i32[1];
    if (v263[52].i32[1] <= 1)
      v202 = 1;
    else
      v202 = v263[52].i32[1];
    if (!*(_QWORD *)&v263[98])
    {
      v237 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v237, "Inconsistent state");
      __cxa_throw(v237, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v203 = v263[44].i32[0];
    v204 = v263[44].i32[1];
    v205 = v263[43].i32[0];
    objc_msgSend(v200, "setBuffer:offset:atIndex:", *(_QWORD *)&v263[77], 0, 0);
    objc_msgSend(v200, "setBuffer:offset:atIndex:", *(_QWORD *)&v263[78], 0, 1);
    objc_msgSend(v200, "setBuffer:offset:atIndex:", *(_QWORD *)&v263[98], 0, 2);
    objc_msgSend(v200, "setBuffer:offset:atIndex:", *(_QWORD *)&v263[76], 0, 3);
    v206 = v205 * (v201 * v203 * v204 / v202) / 4;
    v207 = v206 - 1;
    v87 = v206 < 1;
    v208 = v206 + 62;
    if (!v87)
      v208 = v207;
    *(_QWORD *)v279 = (v208 >> 6) + 1;
    *(int64x2_t *)&v279[8] = vdupq_n_s64(1uLL);
    *(_OWORD *)&v278.__r_.__value_.__l.__data_ = xmmword_191A93520;
    v278.__r_.__value_.__r.__words[2] = 1;
    objc_msgSend(v200, "dispatchThreadgroups:threadsPerThreadgroup:", v279, &v278);

    v125 = v198;
    v127 = v239;
    v121 = v241;
    v128 = v243;
  }
  if (*((_QWORD *)&v193 + 1))
  {
    v209 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v193 + 1) + 16))(*((_QWORD *)&v193 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v193 + 1));
    }
  }
  if (!*(_QWORD *)&v263[75])
  {
    v235 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v235, "Kernel not found");
    __cxa_throw(v235, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v82, "setComputePipelineState:");
  objc_msgSend(v82, "setTexture:atIndex:", v256, 0);
  objc_msgSend(v82, "setTexture:atIndex:", v254, 1);
  objc_msgSend(v82, "setTexture:atIndex:", v256, 2);
  objc_msgSend(v82, "setBuffer:offset:atIndex:", *(_QWORD *)&v263[76], 0, 0);
  if (v263[98])
    v211 = (void *)v263[98];
  else
    v211 = v262;
  objc_msgSend(v82, "setBuffer:offset:atIndex:", v211, 0, 1);
  objc_msgSend(v82, "setBuffer:offset:atIndex:", v260, 0, 2);
  v212 = v263[78];
  if (v212)
    objc_msgSend(v82, "setBuffer:offset:atIndex:", *(_QWORD *)&v212, 0, 3);
  v213 = (v121 - 1) / (int)(v248 * v128) + 1;
  v214 = (v125 - 1) / (v246 * v250) + 1;
  if (v263[80].i32[0] >= 2)
  {
    v218 = 0;
    v219 = 0;
    do
    {
      objc_msgSend(v82, "setBuffer:offset:atIndex:", *(_QWORD *)&v263[76], v218, 0);
      *(_QWORD *)v279 = (v258 - 1) / (int)(v252 * v127) + 1;
      *(_QWORD *)&v279[8] = v213;
      *(_QWORD *)&v279[16] = v214;
      v220 = v263[90].i32[0];
      v221 = v263[89];
      *(_QWORD *)&v222 = v221.i32[0];
      *((_QWORD *)&v222 + 1) = v221.i32[1];
      *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v222;
      v278.__r_.__value_.__r.__words[2] = v220;
      objc_msgSend(v82, "dispatchThreadgroups:threadsPerThreadgroup:", v279, &v278);
      ++v219;
      v218 += 192;
    }
    while (v219 < v263[80].i32[0]);
  }
  else
  {
    *(_QWORD *)v279 = (v258 - 1) / (int)(v252 * v127) + 1;
    *(_QWORD *)&v279[8] = v213;
    *(_QWORD *)&v279[16] = (v125 - 1) / (v246 * v250) + 1;
    v215 = v263[90].i32[0];
    v216 = v263[89];
    *(_QWORD *)&v217 = v216.i32[0];
    *((_QWORD *)&v217 + 1) = v216.i32[1];
    *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v217;
    v278.__r_.__value_.__r.__words[2] = v215;
    objc_msgSend(v82, "dispatchThreadgroups:threadsPerThreadgroup:", v279, &v278);
  }
  if ((_QWORD)v276)
  {
    *((_QWORD *)&v276 + 1) = v276;
    operator delete((void *)v276);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v264);
  if (v244)
  {
    v223 = (unint64_t *)&v244->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  v225 = v268;
  if (v268)
  {
    v226 = (unint64_t *)&v268->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v228 = v270;
  if (v270)
  {
    v229 = (unint64_t *)&v270->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
  v231 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
  if (*((_QWORD *)&v271 + 1))
  {
    v232 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
}

void sub_19170F7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23,uint64_t a24,id a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  uint64_t v41;
  void *v43;

  v43 = *(void **)(v41 - 192);
  if (v43)
  {
    *(_QWORD *)(v41 - 184) = v43;
    operator delete(v43);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::share_weights(uint64_t a1, const void **a2)
{
  id *v3;
  id *v4;
  void *v5;

  if (*a2)
  {
    if (v3)
    {
      v4 = v3;
      objc_storeStrong((id *)(a1 + 632), v3[79]);
      objc_storeStrong((id *)(a1 + 616), v4[77]);
      objc_storeStrong((id *)(a1 + 624), v4[78]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 792), (uint64_t)v4[99], (uint64_t)v4[100]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 808), (uint64_t)v4[101], (uint64_t)v4[102]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 824), (uint64_t)v4[103], (uint64_t)v4[104]);
      v5 = *(void **)(a1 + 608);
      *(_QWORD *)(a1 + 608) = 0;

    }
  }
}

void *Espresso::MetalLowmemEngine::meta_convolution_kernel::tmp_aux_buffer_size(Espresso::MetalLowmemEngine::meta_convolution_kernel *this)
{
  void *result;
  unsigned int v3;
  uint64_t v4;

  result = (void *)*((_QWORD *)this + 77);
  if (result)
  {
    if (*((_QWORD *)this + 78))
    {
      v3 = *((_DWORD *)this + 161) - 1;
      v4 = objc_msgSend(result, "length");
      if (v3 <= 1)
        return (void *)(2 * v4);
      else
        return (void *)(4 * v4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::tmp_aux_buffer_create(Espresso::MetalLowmemEngine::meta_convolution_kernel *this, uint64_t a2)
{
  const void *v3;
  id *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  std::runtime_error *exception;
  std::__shared_weak_count *v14;

  if (*((_QWORD *)this + 77) && *((_QWORD *)this + 78))
  {
    v3 = (const void *)*((_QWORD *)this + 1);
    if (!v3
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v14 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = objc_msgSend(v5[18], "newBufferWithLength:options:", a2, 0, v5);
    if (v14)
    {
      v10 = (unint64_t *)&v14->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v12 = (void *)*((_QWORD *)this + 98);
    *((_QWORD *)this + 98) = v9;

  }
}

void sub_19170FC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::tmp_aux_buffer_share(uint64_t a1, uint64_t a2)
{
  id *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::runtime_error *exception;

  if (*(_QWORD *)(a1 + 616) && *(_QWORD *)(a1 + 624))
  {
    if (!*(_QWORD *)a2
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      objc_storeStrong((id *)(a1 + 784), v4[98]);
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      objc_storeStrong((id *)(a1 + 784), v4[98]);
    }
  }
}

void sub_19170FD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::meta_convolution_kernel::wisdom_key(Espresso::MetalLowmemEngine::meta_convolution_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"C", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"K", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"X", 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Y", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"G", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"W", 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"H", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"S", 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"V", 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"_", 1);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v17);
}

void sub_191710014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::wisdom_tunables(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  int v17;
  _DWORD *v18;
  char *v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *__p;
  char v30;
  __int128 v31;
  _QWORD v32[5];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = operator new(0x18uLL);
  *v4 = xmmword_191A937F0;
  v27 = v4;
  *((_QWORD *)v4 + 2) = 0x300000001;
  __p = operator new(8uLL);
  *__p = 0x800000004;
  v5 = operator new(8uLL);
  v6 = 0;
  *v5 = 0x800000004;
  v7 = a2 + 2;
  v8 = v27;
  do
  {
    v9 = 0;
    v10 = 0;
    v28 = v8;
    v11 = *v8;
    do
    {
      v12 = 0;
      v13 = 0;
      v30 = v9;
      v14 = *((_DWORD *)__p + v10);
      do
      {
        v15 = v12;
        v16 = *((_DWORD *)v5 + v13);
        v17 = *(_DWORD *)(a1 + 420);
        if (v17 <= 1)
          v17 = 1;
        if (v16 == 4 || !(*(_DWORD *)(a1 + 348) / v17 % v16))
        {
          v18 = operator new(0x1CuLL);
          v19 = (char *)(v18 + 7);
          *(_QWORD *)v18 = v11;
          v18[2] = v14;
          v18[3] = v16;
          *((_QWORD *)v18 + 2) = 0;
          v18[6] = 0;
          *(_QWORD *)&v20 = v18;
          *((_QWORD *)&v20 + 1) = v18 + 7;
          if (v6 >= *v7)
          {
            v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a2) >> 3);
            v22 = v21 + 1;
            if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v31 = v20;
            if (0x5555555555555556 * ((uint64_t)(*v7 - *a2) >> 3) > v22)
              v22 = 0x5555555555555556 * ((uint64_t)(*v7 - *a2) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v7 - *a2) >> 3) >= 0x555555555555555)
              v23 = 0xAAAAAAAAAAAAAAALL;
            else
              v23 = v22;
            v32[4] = a2 + 2;
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v23);
            v25 = &v24[24 * v21];
            v32[0] = v24;
            v32[1] = v25;
            v32[3] = &v24[24 * v26];
            *(_OWORD *)v25 = v31;
            *((_QWORD *)v25 + 2) = v19;
            v32[2] = v25 + 24;
            std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a2, v32);
            v6 = a2[1];
            std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v32);
          }
          else
          {
            *(_OWORD *)v6 = v20;
            *(_QWORD *)(v6 + 16) = v19;
            v6 += 24;
            a2[1] = v6;
          }
          a2[1] = v6;
        }
        v12 = 1;
        v13 = 1;
      }
      while ((v15 & 1) == 0);
      v9 = 1;
      v10 = 1;
    }
    while ((v30 & 1) == 0);
    v8 = v28 + 1;
  }
  while (v28 + 1 != v27 + 3);
  operator delete(v5);
  operator delete(__p);
  operator delete(v27);
}

void sub_191710270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  operator delete(__p);
  operator delete(a10);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, std::__shared_weak_count_vtbl *a4, unint64_t a5, uint64_t *a6)
{
  unsigned __int8 *v8;
  int v11;
  int v12;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type size;
  std::string *v33;
  __int128 v34;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::string::size_type v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  uint64_t j;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t k;
  uint64_t m;
  uint64_t v68;
  uint64_t v69;
  uint64_t n;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::runtime_error *v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  std::string *v102;
  std::string::size_type v103;
  std::string *v104;
  __int128 v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::runtime_error *v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  uint64_t v119;
  __int128 v120;
  unint64_t v121;
  std::string *v122;
  std::string::size_type v123;
  std::string *v124;
  __int128 v125;
  std::runtime_error *v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  std::string::size_type v132;
  std::string *v133;
  __int128 v134;
  int v135;
  uint64_t v136;
  int v137;
  int v138;
  std::__shared_weak_count *v139;
  std::string v140;
  std::string v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  _BYTE v144[32];
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  _BYTE v150[32];
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  _BYTE v155[32];
  __int128 v156;

  v8 = a3;
  Espresso::generic_convolution_kernel::__set_weight_raw_blob(a1, a2, a3, a4, a5, a6);
  v11 = *(_DWORD *)(a1 + 424);
  if (v11 <= 1)
    v11 = 1;
  if ((char)v8[23] < 0)
  {
    v15 = *((_QWORD *)v8 + 1);
    if (v15 != 7)
    {
      if (v15 != 9)
      {
        if (v15 != 11)
          goto LABEL_153;
        v16 = *(uint64_t **)v8;
        if (**(_QWORD **)v8 == 0x74666968735F7868 && *(_QWORD *)(*(_QWORD *)v8 + 3) == 0x74756F7466696873)
          goto LABEL_146;
        v18 = *v16;
        v19 = *(uint64_t *)((char *)v16 + 3);
        if (v18 == 0x656C6163735F7868 && v19 == 0x74756F656C616373)
        {
LABEL_29:
          std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(v144, *(_DWORD *)(a1 + 344) * v11, 1, 1, 1);
          v21 = a1 + 808;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 808, (__int128 *)v144);
          v22 = *(std::__shared_weak_count **)&v144[8];
          if (*(_QWORD *)&v144[8])
          {
            v23 = (unint64_t *)(*(_QWORD *)&v144[8] + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = *(_QWORD *)v21;
          if (a5 != 4 * *(int *)(*(_QWORD *)v21 + 8))
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v141, a5);
            v27 = std::string::insert(&v141, 0, "Unexpected size ");
            v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
            *(_QWORD *)&v155[16] = *((_QWORD *)&v27->__r_.__value_.__l + 2);
            *(_OWORD *)v155 = v28;
            v27->__r_.__value_.__l.__size_ = 0;
            v27->__r_.__value_.__r.__words[2] = 0;
            v27->__r_.__value_.__r.__words[0] = 0;
            v29 = std::string::append((std::string *)v155, "/");
            v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            *(_QWORD *)&v150[16] = *((_QWORD *)&v29->__r_.__value_.__l + 2);
            *(_OWORD *)v150 = v30;
            v29->__r_.__value_.__l.__size_ = 0;
            v29->__r_.__value_.__r.__words[2] = 0;
            v29->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v140, 4 * *(int *)(*(_QWORD *)v21 + 8));
            if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v31 = &v140;
            else
              v31 = (std::string *)v140.__r_.__value_.__r.__words[0];
            if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
            else
              size = v140.__r_.__value_.__l.__size_;
            v33 = std::string::append((std::string *)v150, (const std::string::value_type *)v31, size);
            v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
            *(_QWORD *)&v144[16] = *((_QWORD *)&v33->__r_.__value_.__l + 2);
            *(_OWORD *)v144 = v34;
            v33->__r_.__value_.__l.__size_ = 0;
            v33->__r_.__value_.__r.__words[2] = 0;
            v33->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, (const std::string *)v144);
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
LABEL_152:
          memcpy(*(void **)(v25 + 16), a4, a5);
          goto LABEL_153;
        }
        goto LABEL_153;
      }
      if (**(_QWORD **)v8 != 0x656E72656B5F7868 || *(_BYTE *)(*(_QWORD *)v8 + 8) != 108)
        goto LABEL_153;
LABEL_53:
      v37 = *(_DWORD *)(a1 + 420);
      if (v37 <= 1)
        v37 = 1;
      v38 = *(unsigned int *)(a1 + 352);
      v39 = *(unsigned int *)(a1 + 356);
      v40 = *(_DWORD *)(a1 + 344) * v11;
      v41 = *(_DWORD *)(a1 + 348) / v37;
      v42 = (std::__shared_weak_count *)operator new(0x60uLL);
      v43 = (uint64_t)v42;
      v42->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      v42->__shared_weak_owners_ = 0;
      v42->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEDF8;
      v42[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA12B0;
      *(_OWORD *)&v42[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v42[3].__shared_owners_ = 0u;
      LODWORD(v42[1].__shared_owners_) = v41;
      HIDWORD(v42[1].__shared_owners_) = v38;
      LODWORD(v42[1].__shared_weak_owners_) = v39;
      HIDWORD(v42[1].__shared_weak_owners_) = v40;
      v138 = v40;
      v42[2].__vftable = a4;
      LOBYTE(v42[2].__shared_owners_) = 0;
      v45 = 36;
      v46 = v41;
      v142 = v42 + 1;
      v143 = v42;
      do
      {
        v46 *= *(int *)((char *)&v42->__vftable + v45);
        v45 += 4;
      }
      while (v45 != 48);
      if (v46 != a5)
      {
        v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v141, a5);
        v116 = std::string::insert(&v141, 0, "Unexpected size ");
        v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
        *(_QWORD *)&v155[16] = *((_QWORD *)&v116->__r_.__value_.__l + 2);
        *(_OWORD *)v155 = v117;
        v116->__r_.__value_.__l.__size_ = 0;
        v116->__r_.__value_.__r.__words[2] = 0;
        v116->__r_.__value_.__r.__words[0] = 0;
        v118 = std::string::append((std::string *)v155, "/");
        v119 = 0;
        v120 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
        *(_QWORD *)&v150[16] = *((_QWORD *)&v118->__r_.__value_.__l + 2);
        *(_OWORD *)v150 = v120;
        v118->__r_.__value_.__l.__size_ = 0;
        v118->__r_.__value_.__r.__words[2] = 0;
        v118->__r_.__value_.__r.__words[0] = 0;
        v121 = *(int *)(v43 + 32);
        do
        {
          v121 *= *(int *)(v43 + 36 + v119);
          v119 += 4;
        }
        while (v119 != 12);
        std::to_string(&v140, v121);
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v122 = &v140;
        else
          v122 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v123 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v123 = v140.__r_.__value_.__l.__size_;
        v124 = std::string::append((std::string *)v150, (const std::string::value_type *)v122, v123);
        v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
        *(_QWORD *)&v144[16] = *((_QWORD *)&v124->__r_.__value_.__l + 2);
        *(_OWORD *)v144 = v125;
        v124->__r_.__value_.__l.__size_ = 0;
        v124->__r_.__value_.__r.__words[2] = 0;
        v124->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v115, (const std::string *)v144);
        __cxa_throw(v115, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      *(_OWORD *)&v141.__r_.__value_.__l.__data_ = 0uLL;
      v136 = (uint64_t)&v42[1];
      v139 = v42;
      do
        v47 = __ldxr(p_shared_owners);
      while (__stxr(v47 + 1, p_shared_owners));
      v48 = *(_DWORD *)(a1 + 560);
      v49 = *(_DWORD *)(a1 + 592);
      v135 = v41;
      v50 = (v41 - 1) / v49;
      v137 = (v138 - 1) / v48;
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(&v140, v49, v48, v38, v39, v50 + 1, v137 + 1);
      v51 = 0;
      v152 = 0;
      v153 = 0;
      v52 = 1;
      do
      {
        *(_QWORD *)&v144[8 * v51] = (int)v52;
        v52 *= *(int *)(v43 + 32 + 4 * v51++);
      }
      while (v51 != 4);
      *(_OWORD *)v150 = *(_OWORD *)v144;
      *(_OWORD *)&v150[16] = *(_OWORD *)&v144[16];
      v151 = v52;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v152, v136, v43);
      v53 = 0;
      v154 = *(_QWORD *)(v43 + 48);
      v147 = 0;
      v148 = 0;
      v54 = v140.__r_.__value_.__r.__words[0];
      v55 = v140.__r_.__value_.__r.__words[0] + 8;
      v56 = 1;
      do
      {
        *(_QWORD *)&v155[8 * v53] = (int)v56;
        v56 *= *(int *)(v55 + 4 * v53++);
      }
      while (v53 != 6);
      *(_OWORD *)v144 = *(_OWORD *)v155;
      *(_OWORD *)&v144[16] = *(_OWORD *)&v155[16];
      v145 = v156;
      v146 = v56;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v147, v54, v140.__r_.__value_.__l.__size_);
      v149 = *(_QWORD *)(v54 + 32);
      v57 = *(int *)(v54 + 8);
      for (i = 12; i != 32; i += 4)
        v57 *= *(int *)(v54 + i);
      if (v57)
      {
        for (j = 0; j != v57; ++j)
          *(_BYTE *)(*(_QWORD *)(v54 + 32) + j) = 0;
      }
      if ((v137 & 0x80000000) == 0)
      {
        v60 = 0;
        v61 = 0;
        if (v138 >= v48)
          v62 = v48;
        else
          v62 = v138;
        if (v135 >= v49)
          v63 = v49;
        else
          v63 = v135;
        do
        {
          if ((v50 & 0x80000000) == 0)
          {
            v64 = 0;
            v65 = 0;
            do
            {
              if ((int)v39 >= 1)
              {
                for (k = 0; k != v39; ++k)
                {
                  if ((int)v38 >= 1)
                  {
                    for (m = 0; m != v38; ++m)
                    {
                      if ((int)v62 >= 1)
                      {
                        v68 = 0;
                        v69 = v60;
                        do
                        {
                          if ((int)v63 >= 1)
                          {
                            for (n = 0; n != v63; ++n)
                              *(_BYTE *)(v149
                                       + v65 * v145
                                       + v61 * *((_QWORD *)&v145 + 1)
                                       + k * *(_QWORD *)&v144[24]
                                       + m * *(_QWORD *)&v144[16]
                                       + v68 * *(_QWORD *)&v144[8]
                                       + n) = *(_BYTE *)(v154
                                                       + v64
                                                       + m * *(_QWORD *)&v150[8]
                                                       + k * *(_QWORD *)&v150[16]
                                                       + v69 * *(_QWORD *)&v150[24]
                                                       + n);
                          }
                          ++v68;
                          ++v69;
                        }
                        while (v68 != v62);
                      }
                    }
                  }
                }
              }
              ++v65;
              v64 += v49;
            }
            while (v65 != v50 + 1);
          }
          ++v61;
          v60 += v48;
        }
        while (v61 != v137 + 1);
      }
      v71 = v148;
      if (v148)
      {
        v72 = (unint64_t *)&v148->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v74 = v153;
      if (v153)
      {
        v75 = (unint64_t *)&v153->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = *(_OWORD *)&v140.__r_.__value_.__l.__data_;
      *(_OWORD *)&v140.__r_.__value_.__l.__data_ = 0uLL;
      v78 = (std::__shared_weak_count *)v141.__r_.__value_.__l.__size_;
      *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v77;
      if (v78)
      {
        v79 = (unint64_t *)&v78->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = (std::__shared_weak_count *)v140.__r_.__value_.__l.__size_;
      if (v140.__r_.__value_.__l.__size_)
      {
        v82 = (unint64_t *)(v140.__r_.__value_.__l.__size_ + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      if (v139)
      {
        v84 = (unint64_t *)&v139->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v86 = (std::__shared_weak_count *)v141.__r_.__value_.__l.__size_;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 680), (uint64_t)v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
      if (v86)
      {
        v87 = (unint64_t *)&v86->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v89 = v143;
      if (v143)
      {
        v90 = (unint64_t *)&v143->__shared_owners_;
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
      }
      goto LABEL_153;
    }
    v8 = *(unsigned __int8 **)v8;
LABEL_128:
    if (*(_DWORD *)v8 == 1650423912 && *(_DWORD *)(v8 + 3) == 1935763810)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(v144, *(_DWORD *)(a1 + 344) * v11, 1, 1, 1);
      v93 = a1 + 792;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 792, (__int128 *)v144);
      v94 = *(std::__shared_weak_count **)&v144[8];
      if (*(_QWORD *)&v144[8])
      {
        v95 = (unint64_t *)(*(_QWORD *)&v144[8] + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v25 = *(_QWORD *)v93;
      if (a5 != 4 * *(int *)(*(_QWORD *)v93 + 8))
      {
        v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v141, a5);
        v98 = std::string::insert(&v141, 0, "Unexpected size ");
        v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        *(_QWORD *)&v155[16] = *((_QWORD *)&v98->__r_.__value_.__l + 2);
        *(_OWORD *)v155 = v99;
        v98->__r_.__value_.__l.__size_ = 0;
        v98->__r_.__value_.__r.__words[2] = 0;
        v98->__r_.__value_.__r.__words[0] = 0;
        v100 = std::string::append((std::string *)v155, "/");
        v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
        *(_QWORD *)&v150[16] = *((_QWORD *)&v100->__r_.__value_.__l + 2);
        *(_OWORD *)v150 = v101;
        v100->__r_.__value_.__l.__size_ = 0;
        v100->__r_.__value_.__r.__words[2] = 0;
        v100->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v140, 4 * *(int *)(*(_QWORD *)v93 + 8));
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v102 = &v140;
        else
          v102 = (std::string *)v140.__r_.__value_.__r.__words[0];
        if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v103 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
        else
          v103 = v140.__r_.__value_.__l.__size_;
        v104 = std::string::append((std::string *)v150, (const std::string::value_type *)v102, v103);
        v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
        *(_QWORD *)&v144[16] = *((_QWORD *)&v104->__r_.__value_.__l + 2);
        *(_OWORD *)v144 = v105;
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v97, (const std::string *)v144);
        __cxa_throw(v97, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      goto LABEL_152;
    }
    goto LABEL_153;
  }
  v12 = v8[23];
  if (v12 == 7)
    goto LABEL_128;
  if (v12 != 9)
  {
    if (v12 != 11)
      goto LABEL_153;
    if (*(_QWORD *)v8 != 0x74666968735F7868 || *(_QWORD *)(v8 + 3) != 0x74756F7466696873)
    {
      if (*(_QWORD *)v8 != 0x656C6163735F7868 || *(_QWORD *)(v8 + 3) != 0x74756F656C616373)
        goto LABEL_153;
      goto LABEL_29;
    }
LABEL_146:
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned int,1>,std::allocator<Espresso::blob<unsigned int,1>>,int &,int &,int &,int &,void>(v144, *(_DWORD *)(a1 + 344) * v11, 1, 1, 1);
    v106 = a1 + 824;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 824, (__int128 *)v144);
    v107 = *(std::__shared_weak_count **)&v144[8];
    if (*(_QWORD *)&v144[8])
    {
      v108 = (unint64_t *)(*(_QWORD *)&v144[8] + 8);
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v25 = *(_QWORD *)v106;
    if (a5 != 4 * *(int *)(*(_QWORD *)v106 + 8))
    {
      v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v141, a5);
      v127 = std::string::insert(&v141, 0, "Unexpected size ");
      v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
      *(_QWORD *)&v155[16] = *((_QWORD *)&v127->__r_.__value_.__l + 2);
      *(_OWORD *)v155 = v128;
      v127->__r_.__value_.__l.__size_ = 0;
      v127->__r_.__value_.__r.__words[2] = 0;
      v127->__r_.__value_.__r.__words[0] = 0;
      v129 = std::string::append((std::string *)v155, "/");
      v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
      *(_QWORD *)&v150[16] = *((_QWORD *)&v129->__r_.__value_.__l + 2);
      *(_OWORD *)v150 = v130;
      v129->__r_.__value_.__l.__size_ = 0;
      v129->__r_.__value_.__r.__words[2] = 0;
      v129->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v140, 4 * *(int *)(*(_QWORD *)v106 + 8));
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v131 = &v140;
      else
        v131 = (std::string *)v140.__r_.__value_.__r.__words[0];
      if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v132 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
      else
        v132 = v140.__r_.__value_.__l.__size_;
      v133 = std::string::append((std::string *)v150, (const std::string::value_type *)v131, v132);
      v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
      *(_QWORD *)&v144[16] = *((_QWORD *)&v133->__r_.__value_.__l + 2);
      *(_OWORD *)v144 = v134;
      v133->__r_.__value_.__l.__size_ = 0;
      v133->__r_.__value_.__r.__words[2] = 0;
      v133->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v126, (const std::string *)v144);
      __cxa_throw(v126, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    goto LABEL_152;
  }
  if (*(_QWORD *)v8 == 0x656E72656B5F7868 && v8[8] == 108)
    goto LABEL_53;
LABEL_153:
  v110 = (std::__shared_weak_count *)a2[1];
  if (v110)
  {
    v111 = (unint64_t *)&v110->__shared_owners_;
    do
      v112 = __ldxr(v111);
    while (__stxr(v112 + 1, v111));
  }
  Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_weights_bias_if_ready(a1);
  if (v110)
  {
    v113 = (unint64_t *)&v110->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
}

void sub_191710F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  int v39;
  uint64_t v40;

  if (a38 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v40 - 185) < 0)
    operator delete(*(void **)(v40 - 208));
  if (*(char *)(v40 - 121) < 0)
    operator delete(*(void **)(v40 - 144));
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v39 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
  }
  else if (!v39)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v38);
  goto LABEL_14;
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v11 = 0;
  v12 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 416))(a1, &v13, &v11);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191711194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v11 = 0;
  v12 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 424))(a1, &v13, &v11);
  v5 = v12;
  if (v12)
  {
    v6 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_191711278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Invalid call");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1917112D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_biases(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 664), *a2, a2[1]);
  v5 = *(std::__shared_weak_count **)(a3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_weights_bias_if_ready(a1);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_191711384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_weights(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 648), *a2, a2[1]);
  v5 = *(std::__shared_weak_count **)(a3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_weights_bias_if_ready(a1);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_191711438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::meta_convolution_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 672);
  *a2 = *(_QWORD *)(this + 664);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::MetalLowmemEngine::meta_convolution_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 656);
  *a2 = *(_QWORD *)(this + 648);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  _OWORD v67[4];

  v53 = 0uLL;
  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = *(unsigned int *)(v2 + 8);
  v7 = *(unsigned int *)(v2 + 12);
  v8 = *(_DWORD *)(v2 + 16);
  v9 = *(_DWORD *)(v2 + 20);
  v10 = v8 - 1;
  if (v8 < 1)
    v10 = v8 + 2;
  v11 = v10 >> 2;
  v12 = (v10 >> 2) + 1;
  v13 = v9 - 1;
  if (v9 < 1)
    v13 = v9 + 2;
  v14 = v13 >> 2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,6>,std::allocator<Espresso::blob<unsigned char,6>>,int &,int &,int &,int &,int &,int &,void>(&v52, 4, 4, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 12), v12, (v13 >> 2) + 1);
  v15 = 0;
  v64 = 0;
  v65 = 0;
  v16 = 1;
  do
  {
    *((_QWORD *)&v54 + v15) = (int)v16;
    v16 *= *(int *)(v2 + 8 + 4 * v15++);
  }
  while (v15 != 4);
  v61 = v54;
  v62 = v55;
  v63 = v16;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v64, v2, (uint64_t)v3);
  v17 = 0;
  v66 = *(_QWORD *)(v2 + 24);
  v58 = 0;
  v59 = 0;
  v18 = v52;
  v19 = v52 + 8;
  v20 = 1;
  do
  {
    *((_QWORD *)v67 + v17) = (int)v20;
    v20 *= *(int *)(v19 + 4 * v17++);
  }
  while (v17 != 6);
  v54 = v67[0];
  v55 = v67[1];
  v56 = v67[2];
  v57 = v20;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v58, v18, *((uint64_t *)&v52 + 1));
  v60 = *(_QWORD *)(v18 + 32);
  v21 = *(int *)(v18 + 8);
  for (i = 12; i != 32; i += 4)
    v21 *= *(int *)(v18 + i);
  if (v21)
  {
    for (j = 0; j != v21; ++j)
      *(_BYTE *)(*(_QWORD *)(v18 + 32) + j) = 0;
  }
  if (v9 >= -2)
  {
    v24 = 0;
    if (v9 >= 4)
      LODWORD(v25) = 4;
    else
      LODWORD(v25) = v9;
    if (v8 >= 4)
      LODWORD(v26) = 4;
    else
      LODWORD(v26) = v8;
    if ((int)v26 <= 1)
      v26 = 1;
    else
      v26 = v26;
    if ((int)v25 <= 1)
      v25 = 1;
    else
      v25 = v25;
    do
    {
      if (v8 >= -2)
      {
        v27 = 0;
        v28 = 0;
        do
        {
          if ((int)v7 >= 1)
          {
            for (k = 0; k != v7; ++k)
            {
              if ((int)v6 >= 1)
              {
                for (m = 0; m != v6; ++m)
                {
                  if (v9 >= 1)
                  {
                    for (n = 0; n != v25; ++n)
                    {
                      if (v8 >= 1)
                      {
                        for (ii = 0; ii != v26; ++ii)
                          *(_BYTE *)(v60
                                   + v28 * v56
                                   + v24 * *((_QWORD *)&v56 + 1)
                                   + k * *((_QWORD *)&v55 + 1)
                                   + m * v55
                                   + n * *((_QWORD *)&v54 + 1)
                                   + ii) = *(_BYTE *)(v66
                                                    + m
                                                    + *((_QWORD *)&v61 + 1) * k
                                                    + v62 * (v27 + ii)
                                                    + *((_QWORD *)&v62 + 1) * (n + 4 * v24));
                      }
                    }
                  }
                }
              }
            }
          }
          ++v28;
          v27 += 4;
        }
        while (v28 != (v11 & ~(v11 >> 31)) + 1);
      }
      ++v24;
    }
    while (v24 != (v14 & ~(v14 >> 31)) + 1);
  }
  v33 = v59;
  if (v59)
  {
    v34 = (unint64_t *)&v59->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v65;
  if (v65)
  {
    v37 = (unint64_t *)&v65->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v52;
  v52 = 0uLL;
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  v53 = v39;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v3)
  {
    v46 = (unint64_t *)&v3->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 680), v53, *((uint64_t *)&v53 + 1));
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1917118D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::set_quantization_lut_blob()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented/deprecated");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191711928(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::MetalLowmemEngine::meta_convolution_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 696), *a2, a2[1]);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_weights_bias_if_ready(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unint64_t *v41;
  unint64_t v42;
  const void *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  uint64_t v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  const void *v56;
  id *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  unint64_t *v63;
  unint64_t v64;
  const void *v65;
  uint64_t v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  int *v77;
  _WORD *v78;
  int v79;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  __int128 v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  float *v103;
  __int128 v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t j;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t k;
  uint64_t m;
  uint64_t v139;
  char *v140;
  _DWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  char *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t n;
  const void *v159;
  _QWORD *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  unint64_t *v168;
  unint64_t v169;
  int *v170;
  _WORD *ii;
  int v172;
  void *v174;
  int *v175;
  const void *v176;
  uint64_t v177;
  _QWORD *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  unint64_t *v186;
  unint64_t v187;
  int *v188;
  _WORD *v189;
  int v190;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t *v198;
  std::runtime_error *v199;
  std::runtime_error *v200;
  std::runtime_error *exception;
  std::runtime_error *v202;
  std::runtime_error *v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  char *v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  uint64_t v222;
  _OWORD v223[4];

  v2 = *(_QWORD *)(a1 + 696);
  if (v2 && *(_QWORD *)(a1 + 680) && *(_QWORD *)(a1 + 664))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 672);
    *(_QWORD *)&v210 = *(_QWORD *)(a1 + 664);
    *((_QWORD *)&v210 + 1) = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
      v2 = *(_QWORD *)(a1 + 696);
    }
    v6 = *(_QWORD *)(a1 + 704);
    *(_QWORD *)&v217 = v2;
    *((_QWORD *)&v217 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if (*(_DWORD *)(a1 + 416))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v223, *(_DWORD *)(a1 + 344), 1, 1, 1);
      v9 = v223[0];
      v223[0] = 0uLL;
      v210 = v9;
      if (v3)
      {
        v10 = (unint64_t *)&v3->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v223[0] + 1);
      if (*((_QWORD *)&v223[0] + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v223[0] + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v223, 2 * *(_DWORD *)(a1 + 344), 1, 1, 1);
      v15 = v223[0];
      v223[0] = 0uLL;
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v217 + 1);
      v217 = v15;
      if (v16)
      {
        v17 = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v223[0] + 1);
      if (*((_QWORD *)&v223[0] + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v223[0] + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(_QWORD *)(a1 + 664);
      v23 = *(std::__shared_weak_count **)(a1 + 672);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = *(unsigned int *)(a1 + 344);
      if ((int)v26 >= 1)
      {
        v27 = 0;
        v28 = *(_QWORD *)(v22 + 16);
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 696) + 16);
        v30 = *(_QWORD *)(v217 + 16);
        v31 = 4 * v26;
        v32 = *(_QWORD *)(v210 + 16);
        v33 = v30 + 4 * v26;
        v34 = v29 + 4 * v26;
        v35 = (float *)(v28 + 8);
        do
        {
          v36 = *(v35 - 2);
          v37 = *(v35 - 1);
          v38 = *v35;
          v39 = v35[1];
          v35 += 4;
          v40 = 1.0 / v39;
          *(float *)(v30 + v27) = (float)(v36 * v40) * *(float *)(v29 + v27);
          *(float *)(v33 + v27) = (float)(v36 * v40) * *(float *)(v34 + v27);
          *(float *)(v32 + v27) = v37 + (float)((float)-(float)(v38 * v40) * v36);
          v27 += 4;
        }
        while (v31 != v27);
      }
      if (v23)
      {
        v41 = (unint64_t *)&v23->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    v43 = *(const void **)(a1 + 8);
    if (!v43
    {
      v223[0] = 0uLL;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v45 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)&v223[0] = v44;
    *((_QWORD *)&v223[0] + 1) = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = (void *)v44[18];
    v49 = *(_QWORD *)(a1 + 680);
    v50 = *(int *)(v49 + 8);
    for (i = 12; i != 32; i += 4)
      v50 *= *(int *)(v49 + i);
    v52 = objc_msgSend(v48, "newBufferWithBytes:length:options:", *(_QWORD *)(v49 + 32), v50, 0);
    v53 = *(void **)(a1 + 616);
    *(_QWORD *)(a1 + 616) = v52;

    if (v45)
    {
      v54 = (unint64_t *)&v45->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v56 = *(const void **)(a1 + 8);
    if (!v56
    {
      v223[0] = 0uLL;
      v202 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v202, "Espresso: wrong_context_type");
      v202->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v58 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)&v223[0] = v57;
    *((_QWORD *)&v223[0] + 1) = v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    v61 = objc_msgSend(v57[18], "newBufferWithBytes:length:options:", *(_QWORD *)(v217 + 16), 4 * *(int *)(v217 + 8), 0);
    v62 = *(void **)(a1 + 624);
    *(_QWORD *)(a1 + 624) = v61;

    if (v58)
    {
      v63 = (unint64_t *)&v58->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v65 = *(const void **)(a1 + 8);
    if (!v65
      || (v66 = *(int *)(v210 + 8),
    {
      v223[0] = 0uLL;
      v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v203, "Espresso: wrong_context_type");
      v203->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v68 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)&v223[0] = v67;
    *((_QWORD *)&v223[0] + 1) = v68;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
    }
    v71 = (void *)v67[18];
    if ((unint64_t)(2 * v66) <= 0x10)
      v72 = 16;
    else
      v72 = 2 * v66;
    v73 = objc_msgSend(v71, "newBufferWithLength:options:", v72, 0);
    v74 = *(void **)(a1 + 632);
    *(_QWORD *)(a1 + 632) = v73;

    if (v68)
    {
      v75 = (unint64_t *)&v68->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v77 = *(int **)(v210 + 16);
    v78 = (_WORD *)objc_msgSend(*(id *)(a1 + 632), "contents");
    if ((_DWORD)v66)
    {
      do
      {
        v79 = *v77++;
        _S0 = v79;
        __asm { FCVT            H0, S0 }
        *v78++ = _S0;
        --v66;
      }
      while (v66);
    }
    if (!*(_QWORD *)(a1 + 616))
      *(_DWORD *)(a1 + 580) = 1;
    if (*((_QWORD *)&v217 + 1))
    {
      v85 = (unint64_t *)(*((_QWORD *)&v217 + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v217 + 1) + 16))(*((_QWORD *)&v217 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v217 + 1));
      }
    }
    v87 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
    if (*((_QWORD *)&v210 + 1))
    {
      v88 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
LABEL_233:
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
  }
  else if (*(_QWORD *)(a1 + 664) || !*(_DWORD *)(a1 + 336) && !*(_DWORD *)(a1 + 416))
  {
    v90 = *(_QWORD *)(a1 + 648);
    if (v90)
    {
      v91 = *(std::__shared_weak_count **)(a1 + 672);
      *(_QWORD *)&v209 = *(_QWORD *)(a1 + 664);
      *((_QWORD *)&v209 + 1) = v91;
      if (v91)
      {
        v92 = (unint64_t *)&v91->__shared_owners_;
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
        v90 = *(_QWORD *)(a1 + 648);
      }
      v94 = *(_QWORD *)(a1 + 656);
      *(_QWORD *)&v208 = v90;
      *((_QWORD *)&v208 + 1) = v94;
      if (v94)
      {
        v95 = (unint64_t *)(v94 + 8);
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      if (*(_DWORD *)(a1 + 416))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v210, *(_DWORD *)(a1 + 344), 1, 1, 1);
        v97 = v210;
        v210 = 0uLL;
        v209 = v97;
        if (v91)
        {
          v98 = (unint64_t *)&v91->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v100 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
        if (*((_QWORD *)&v210 + 1))
        {
          v101 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&v210, *(_QWORD *)(a1 + 648) + 8);
        v104 = v210;
        v210 = 0uLL;
        v105 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
        v208 = v104;
        if (v105)
        {
          v106 = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        v108 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
        if (*((_QWORD *)&v210 + 1))
        {
          v109 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        v90 = v208;
        Espresso::util_bake_batchnorm_generic(*(unsigned int *)(a1 + 344), *(_DWORD *)(*(_QWORD *)(a1 + 648) + 12)* *(_DWORD *)(*(_QWORD *)(a1 + 648) + 8)* *(_DWORD *)(*(_QWORD *)(a1 + 648) + 16), 1, *(_QWORD *)(*(_QWORD *)(a1 + 648) + 24), *(const float **)(v208 + 24), *(float **)(*(_QWORD *)(a1 + 664) + 16), *(const float **)(v209 + 16), v103);
        v94 = *((_QWORD *)&v208 + 1);
      }
      v204 = v90;
      v205 = (std::__shared_weak_count *)v94;
      if (v94)
      {
        v111 = (unint64_t *)(v94 + 8);
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      v113 = *(unsigned int *)(v90 + 8);
      v114 = *(unsigned int *)(v90 + 12);
      v115 = *(_DWORD *)(v90 + 16);
      v116 = *(_DWORD *)(v90 + 20);
      v117 = v115 - 1;
      if (v115 < 1)
        v117 = v115 + 2;
      v118 = v117 >> 2;
      v119 = (v117 >> 2) + 1;
      v120 = v116 - 1;
      if (v116 < 1)
        v120 = v116 + 2;
      v121 = v120 >> 2;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,6>,std::allocator<Espresso::blob<float,6>>,int &,int &,int &,int &,int &,int &,void>(&v206, 4, 4, *(_DWORD *)(v90 + 8), *(_DWORD *)(v90 + 12), v119, (v120 >> 2) + 1);
      v122 = 0;
      v220 = 0;
      v221 = 0;
      v123 = 1;
      do
      {
        *((_QWORD *)&v210 + v122) = (int)v123;
        v123 *= *(int *)(v90 + 8 + 4 * v122++);
      }
      while (v122 != 4);
      v217 = v210;
      v218 = v211;
      v219 = v123;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v220, v90, v94);
      v124 = 0;
      v222 = *(_QWORD *)(v90 + 24);
      v214 = 0;
      v215 = 0;
      v125 = v206;
      v126 = v206 + 8;
      v127 = 1;
      do
      {
        *((_QWORD *)v223 + v124) = (int)v127;
        v127 *= *(int *)(v126 + 4 * v124++);
      }
      while (v124 != 6);
      v210 = v223[0];
      v211 = v223[1];
      v212 = v223[2];
      v213 = v127;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v214, v125, (uint64_t)v207);
      v128 = *(char **)(v125 + 32);
      v216 = v128;
      v129 = *(int *)(v125 + 8);
      for (j = 12; j != 32; j += 4)
        v129 *= *(int *)(v125 + j);
      if (v129)
        bzero(v128, 4 * v129);
      if (v116 >= -2)
      {
        v131 = 0;
        v132 = 0;
        if (v116 >= 4)
          LODWORD(v133) = 4;
        else
          LODWORD(v133) = v116;
        if (v115 >= 4)
          LODWORD(v134) = 4;
        else
          LODWORD(v134) = v115;
        if ((int)v134 <= 1)
          v134 = 1;
        else
          v134 = v134;
        if ((int)v133 <= 1)
          v133 = 1;
        else
          v133 = v133;
        do
        {
          if (v115 >= -2)
          {
            v135 = 0;
            v136 = 0;
            do
            {
              if ((int)v114 >= 1)
              {
                for (k = 0; k != v114; ++k)
                {
                  if ((int)v113 >= 1)
                  {
                    for (m = 0; m != v113; ++m)
                    {
                      if (v116 >= 1)
                      {
                        v139 = 0;
                        v140 = &v128[4 * v136 * v212
                                   + 4 * v132 * *((_QWORD *)&v212 + 1)
                                   + 4 * k * *((_QWORD *)&v211 + 1)
                                   + 4 * v211 * m];
                        v141 = (_DWORD *)(v222
                                        + 4
                                        * (m + v131 * *((_QWORD *)&v218 + 1) + v135 * v218 + k * *((_QWORD *)&v217 + 1)));
                        v142 = 4 * *((_QWORD *)&v210 + 1);
                        v143 = 4 * *((_QWORD *)&v218 + 1);
                        v144 = 4 * v218;
                        do
                        {
                          v145 = v141;
                          v146 = v140;
                          v147 = v134;
                          if (v115 >= 1)
                          {
                            do
                            {
                              *(_DWORD *)v146 = *v145;
                              v146 += 4;
                              v145 = (_DWORD *)((char *)v145 + v144);
                              --v147;
                            }
                            while (v147);
                          }
                          ++v139;
                          v140 += v142;
                          v141 = (_DWORD *)((char *)v141 + v143);
                        }
                        while (v139 != v133);
                      }
                    }
                  }
                }
              }
              ++v136;
              v135 += 4;
            }
            while (v136 != (v118 & ~(v118 >> 31)) + 1);
          }
          ++v132;
          v131 += 4;
        }
        while (v132 != (v121 & ~(v121 >> 31)) + 1);
      }
      v148 = v215;
      if (v215)
      {
        v149 = (unint64_t *)&v215->__shared_owners_;
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
      v151 = v221;
      if (v221)
      {
        v152 = (unint64_t *)&v221->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      if (v205)
      {
        v154 = (unint64_t *)&v205->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      v156 = *(void **)(a1 + 616);
      *(_QWORD *)(a1 + 616) = 0;

      v157 = *(int *)(v206 + 8);
      for (n = 12; n != 32; n += 4)
        v157 *= *(int *)(v206 + n);
      v159 = *(const void **)(a1 + 8);
      if (!v159
      {
        v210 = 0uLL;
        v199 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v199, "Espresso: wrong_context_type");
        v199->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v161 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)&v210 = v160;
      *((_QWORD *)&v210 + 1) = v161;
      if (v161)
      {
        v162 = (unint64_t *)&v161->__shared_owners_;
        do
          v163 = __ldxr(v162);
        while (__stxr(v163 + 1, v162));
      }
      v164 = (void *)v160[18];
      if ((unint64_t)(2 * v157) <= 0x10)
        v165 = 16;
      else
        v165 = 2 * v157;
      v166 = objc_msgSend(v164, "newBufferWithLength:options:", v165, 0, v204);
      v167 = *(void **)(a1 + 616);
      *(_QWORD *)(a1 + 616) = v166;

      if (v161)
      {
        v168 = (unint64_t *)&v161->__shared_owners_;
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
          std::__shared_weak_count::__release_weak(v161);
        }
      }
      v170 = *(int **)(v206 + 32);
      for (ii = (_WORD *)objc_msgSend(*(id *)(a1 + 616), "contents"); v157; --v157)
      {
        v172 = *v170++;
        _S0 = v172;
        __asm { FCVT            H0, S0 }
        *ii++ = _S0;
      }
      v174 = *(void **)(a1 + 632);
      *(_QWORD *)(a1 + 632) = 0;

      v175 = (int *)(a1 + 344);
      if ((_QWORD)v209)
        v175 = (int *)(v209 + 8);
      v176 = *(const void **)(a1 + 8);
      if (!v176
        || (v177 = *v175,
      {
        v210 = 0uLL;
        v200 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v200, "Espresso: wrong_context_type");
        v200->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v179 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)&v210 = v178;
      *((_QWORD *)&v210 + 1) = v179;
      if (v179)
      {
        v180 = (unint64_t *)&v179->__shared_owners_;
        do
          v181 = __ldxr(v180);
        while (__stxr(v181 + 1, v180));
      }
      v182 = (void *)v178[18];
      if ((unint64_t)(2 * v177) <= 0x10)
        v183 = 16;
      else
        v183 = 2 * v177;
      v184 = objc_msgSend(v182, "newBufferWithLength:options:", v183, 0);
      v185 = *(void **)(a1 + 632);
      *(_QWORD *)(a1 + 632) = v184;

      if (v179)
      {
        v186 = (unint64_t *)&v179->__shared_owners_;
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
          std::__shared_weak_count::__release_weak(v179);
        }
      }
      if ((_QWORD)v209)
      {
        v188 = *(int **)(v209 + 16);
        v189 = (_WORD *)objc_msgSend(*(id *)(a1 + 632), "contents");
        if ((_DWORD)v177)
        {
          do
          {
            v190 = *v188++;
            _S0 = v190;
            __asm { FCVT            H0, S0 }
            *v189++ = _S0;
            --v177;
          }
          while (v177);
        }
      }
      else
      {
        bzero((void *)objc_msgSend(*(id *)(a1 + 632), "contents"), objc_msgSend(*(id *)(a1 + 632), "length"));
      }
      v192 = v207;
      if (v207)
      {
        v193 = (unint64_t *)&v207->__shared_owners_;
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 - 1, v193));
        if (!v194)
        {
          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
          std::__shared_weak_count::__release_weak(v192);
        }
      }
      v195 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
      if (*((_QWORD *)&v208 + 1))
      {
        v196 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
        do
          v197 = __ldaxr(v196);
        while (__stlxr(v197 - 1, v196));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }
      v87 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
      if (*((_QWORD *)&v209 + 1))
      {
        v198 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
        do
          v89 = __ldaxr(v198);
        while (__stlxr(v89 - 1, v198));
        goto LABEL_233;
      }
    }
  }
}

void sub_191712778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_for_tune(uint64_t a1, uint64_t a2)
{
  const void *v4;
  id *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  size_t v14;
  const void *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  id *v19;
  std::__shared_weak_count *v20;

  v4 = *(const void **)(a1 + 8);
  if (v4
  {
    v6 = *(std::__shared_weak_count **)(a1 + 16);
    v19 = v5;
    v20 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v19 = 0;
    v20 = 0;
  }
  *(_QWORD *)(a1 + 564) = 0x100000002;
  if (*(int *)(a1 + 344) <= 4)
    v9 = 4;
  else
    v9 = 8;
  *(_DWORD *)(a1 + 560) = v9;
  v10 = *(_DWORD *)(a1 + 348);
  v11 = *(_DWORD *)(a1 + 420);
  if (v11 < 2)
  {
    if ((v10 & 0xF) == 0)
    {
LABEL_18:
      v12 = 8;
      goto LABEL_19;
    }
    v11 = 1;
  }
  else if (((v10 / v11) & 0xF) == 0)
  {
    goto LABEL_18;
  }
  if (((v10 / v11) & 7) == 0)
    goto LABEL_18;
  v12 = 4;
LABEL_19:
  *(_DWORD *)(a1 + 592) = v12;
  if (!v5 || (objc_msgSend(v5[18], "supportsFeatureSet:", 7, v19, v20) & 1) == 0)
  {
    *(_DWORD *)(a1 + 568) = 2;
    *(_QWORD *)(a1 + 560) = 0x200000004;
  }
  *(_DWORD *)(a1 + 640) = 1;
  *(_QWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 720) = 0;
  v13 = *(char **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14 == 28)
  {
    *(_DWORD *)(a1 + 568) = *(_DWORD *)v13;
    *(_DWORD *)(a1 + 564) = *((_DWORD *)v13 + 1);
    *(_DWORD *)(a1 + 560) = *((_DWORD *)v13 + 2);
    *(_DWORD *)(a1 + 592) = *((_DWORD *)v13 + 3);
    *(_DWORD *)(a1 + 712) = *((_DWORD *)v13 + 4);
    *(_DWORD *)(a1 + 716) = *((_DWORD *)v13 + 5);
    *(_DWORD *)(a1 + 720) = *((_DWORD *)v13 + 6);
  }
  v15 = *(const void **)(a1 + 728);
  if (v14 != *(_QWORD *)(a1 + 736) - (_QWORD)v15 || memcmp(v13, v15, v14))
  {
    v16 = *(void **)(a1 + 600);
    *(_QWORD *)(a1 + 600) = 0;

    if (a1 + 728 != a2)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 728), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  }
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_191712A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::squeeze_kernel::~squeeze_kernel(Espresso::MPSGraphEngine::Kernels::squeeze_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::squeeze_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  int64x2_t *v21;
  std::__shared_weak_count *v22;
  void *v23[2];
  char v24;
  std::string __p;
  _BYTE v26[24];
  _BYTE v27[32];
  std::__shared_weak_count *v28;
  int64x2_t *v29;
  std::__shared_weak_count *v30;
  void **v31;

  if (*(_DWORD *)(a1 + 420) != 1)
  {
    v13 = *(std::__shared_weak_count **)(a2 + 8);
    v29 = *(int64x2_t **)a2;
    v30 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "[Dispatch::MPSGraph::squeeze_kernel] unsupported: version != 1");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v23, a3, 0);
    Espresso::emit_kernel_validation_warning(&v29, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v16 = v28;
    if (v28)
    {
      v17 = (unint64_t *)&v28->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v31 = (void **)v27;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v31);
    v31 = (void **)v26;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v31);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v24 < 0)
      operator delete(v23[0]);
    v10 = v30;
    if (!v30)
      return 0;
    v19 = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldaxr(v19);
    while (__stlxr(v12 - 1, v19));
    goto LABEL_34;
  }
  if (!*(_DWORD *)(a1 + 280))
    return 1;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v21 = *(int64x2_t **)a2;
  v22 = v4;
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "[Dispatch::MPSGraph::squeeze_kernel] unsupported: nd_axis != 0");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v23, a3, 0);
  Espresso::emit_kernel_validation_warning(&v21, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v7 = v28;
  if (v28)
  {
    v8 = (unint64_t *)&v28->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v31 = (void **)v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v31);
  v31 = (void **)v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v24 < 0)
    operator delete(v23[0]);
  v10 = v22;
  if (v22)
  {
    v11 = (unint64_t *)&v22->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_34:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return 0;
}

void sub_191712DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a17);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,unsigned long &,int const&>(uint64_t a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_blob_shape_error>("Integer multiplication overflow between size %lu and size %d", a1, a2);
}

void Espresso::pass_allocation::~pass_allocation(Espresso::pass_allocation *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_allocation::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_allocation::run_on_network(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

void sub_19171302C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_fastspeech::~pass_fastspeech(Espresso::pass_fastspeech *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_fastspeech::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_fastspeech::run_on_network(Espresso::net *a1@<X1>, Espresso::pass_fastspeech *a2@<X8>)
{
  Espresso::pass_fastspeech::run_v1(a2, a1);
}

void Espresso::pass_fastspeech::run_v1(Espresso::pass_fastspeech *this, Espresso::net *a2)
{
  Espresso::net *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  const void *v46;
  void *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  const void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  const void *v61;
  __int128 *v62;
  __int128 *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  const void *v68;
  void *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  const void *v75;
  void *v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  const void *v82;
  void *v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  char v93;
  BOOL v94;
  char v100;
  NSObject *v101;
  char *v102;
  int v103;
  unsigned __int8 *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  const std::string *v123;
  _QWORD *v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  __int128 *v130;
  const char *v131;
  NSObject *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t j;
  uint64_t v177;
  uint64_t v178;
  const void *v179;
  _QWORD **v180;
  _QWORD **v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  const void *v186;
  void *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  char *v195;
  int v196;
  uint64_t v197;
  void *v198;
  _QWORD *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  const void *v214;
  __int128 *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  const std::string *v219;
  _QWORD *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  __int128 v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  const void *v257;
  void *v258;
  uint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  int v264;
  int v265;
  uint64_t **v266;
  int v267;
  int v268;
  uint64_t **v269;
  const char *v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  const void *v275;
  void *v276;
  void *v277;
  uint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  const void *v282;
  void *v283;
  void *v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  const void *v289;
  _QWORD **v290;
  _QWORD **v291;
  uint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  uint64_t v295;
  const void *v296;
  void *v297;
  void *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  void *v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  char v307;
  NSObject *v308;
  char *v309;
  int v310;
  uint64_t v311;
  void *v312;
  _QWORD *v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  unint64_t *v318;
  unint64_t v319;
  uint64_t v320;
  unint64_t *v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  const std::string *v329;
  _QWORD *v330;
  unint64_t v331;
  _DWORD *v332;
  _DWORD *v333;
  _DWORD *v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  BOOL v338;
  unint64_t v339;
  uint64_t v340;
  _DWORD *v341;
  int v342;
  _DWORD *v343;
  _DWORD *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  _DWORD *v350;
  int v351;
  _DWORD *v352;
  _DWORD *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  _DWORD *v359;
  int v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  int *v384;
  int *v385;
  unint64_t v386;
  uint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  Espresso *v391;
  const char *v392;
  unint64_t *v393;
  unint64_t v394;
  int *v395;
  int *v396;
  int v397;
  NSObject *v398;
  __int128 v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  int *v406;
  uint64_t v407;
  uint64_t v408;
  __int128 v409;
  unint64_t *v410;
  unint64_t v411;
  uint64_t v412;
  const void *v413;
  void *v414;
  uint64_t v415;
  unint64_t *v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t **v419;
  int v420;
  int v421;
  uint64_t **v422;
  int v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  const void *v427;
  void *v428;
  void *v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  uint64_t v433;
  const void *v434;
  void *v435;
  void *v436;
  uint64_t v437;
  unint64_t *v438;
  unint64_t v439;
  uint64_t v440;
  const void *v441;
  __int128 *v442;
  __int128 *v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  uint64_t v447;
  const void *v448;
  void *v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  uint64_t v453;
  char *v454;
  uint64_t v455;
  Espresso *v456;
  void *v457;
  Espresso *v458;
  const char *v459;
  NSObject *v460;
  char *v461;
  int v462;
  uint64_t v463;
  void *v464;
  uint64_t v465;
  uint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  unint64_t *v470;
  unint64_t v471;
  uint64_t v472;
  unint64_t *v473;
  unint64_t v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  const std::string *v478;
  _QWORD *v479;
  unint64_t v480;
  _DWORD *v481;
  _DWORD *v482;
  _DWORD *v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  _DWORD *v489;
  int v490;
  _DWORD *v491;
  _DWORD *v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  unint64_t v496;
  uint64_t v497;
  _DWORD *v498;
  int v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t *v503;
  unint64_t v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  std::__shared_weak_count *v511;
  unint64_t *v512;
  unint64_t v513;
  std::__shared_weak_count *v514;
  unint64_t *v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  int *v520;
  unint64_t v521;
  uint64_t v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  Espresso *v526;
  const char *v527;
  unint64_t *v528;
  unint64_t v529;
  int *v530;
  int *v531;
  int v532;
  NSObject *v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  std::__shared_weak_count *v537;
  unint64_t *v538;
  unint64_t v539;
  std::__shared_weak_count *v540;
  unint64_t *v541;
  unint64_t v542;
  std::__shared_weak_count *v543;
  unint64_t *v544;
  unint64_t v545;
  std::__shared_weak_count *v546;
  unint64_t *v547;
  unint64_t v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  std::__shared_weak_count *v552;
  unint64_t *v553;
  unint64_t v554;
  std::__shared_weak_count *v555;
  unint64_t *v556;
  unint64_t v557;
  std::__shared_weak_count *v558;
  unint64_t *v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  __int128 v564;
  unint64_t *v565;
  unint64_t v566;
  uint64_t v567;
  const void *v568;
  void *v569;
  uint64_t v570;
  unint64_t *v571;
  unint64_t v572;
  uint64_t **v573;
  void *v574;
  const char *v575;
  _DWORD *v576;
  _DWORD *v577;
  int v578;
  int v579;
  int v580;
  int v581;
  __int128 v582;
  unint64_t *v583;
  unint64_t v584;
  uint64_t v585;
  const void *v586;
  std::__shared_weak_count *v587;
  unint64_t *v588;
  unint64_t v589;
  uint64_t **v590;
  int *v591;
  int *v592;
  uint64_t *v593;
  uint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  unint64_t v601;
  int v602;
  unint64_t *v603;
  unint64_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  unint64_t v608;
  int v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  NSObject *v616;
  uint64_t **v617;
  _DWORD *v618;
  int v619;
  __int128 v620;
  unint64_t *v621;
  unint64_t v622;
  uint64_t v623;
  const void *v624;
  void *v625;
  std::__shared_weak_count *v626;
  unint64_t *v627;
  unint64_t v628;
  unint64_t v629;
  _QWORD *v630;
  uint64_t **v631;
  unint64_t v632;
  _QWORD *v633;
  _DWORD *v634;
  unint64_t v635;
  _DWORD *v636;
  _DWORD *v637;
  uint64_t v638;
  unint64_t v639;
  unint64_t v640;
  uint64_t v641;
  int *v642;
  int v643;
  _DWORD *v644;
  _DWORD *v645;
  uint64_t v646;
  unint64_t v647;
  unint64_t v648;
  uint64_t v649;
  _DWORD *v650;
  int v651;
  unint64_t *v652;
  unint64_t v653;
  std::__shared_weak_count *v654;
  unint64_t *v655;
  unint64_t v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  std::__shared_weak_count *v660;
  unint64_t *v661;
  unint64_t v662;
  int *v663;
  int *v664;
  unint64_t v665;
  uint64_t v666;
  std::__shared_weak_count *v667;
  unint64_t *v668;
  unint64_t v669;
  Espresso *v670;
  const char *v671;
  unint64_t *v672;
  unint64_t v673;
  int *v674;
  int *v675;
  int v676;
  NSObject *v677;
  std::__shared_weak_count *v678;
  unint64_t *v679;
  unint64_t v680;
  std::__shared_weak_count *v681;
  unint64_t *v682;
  unint64_t v683;
  std::__shared_weak_count *v684;
  unint64_t *v685;
  unint64_t v686;
  std::__shared_weak_count *v687;
  unint64_t *v688;
  unint64_t v689;
  std::__shared_weak_count *v690;
  unint64_t *v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  __int128 v696;
  unint64_t *v697;
  unint64_t v698;
  uint64_t v699;
  const void *v700;
  void *v701;
  void *v702;
  uint64_t v703;
  unint64_t *v704;
  unint64_t v705;
  uint64_t v706;
  uint64_t v707;
  int v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  const void *v712;
  void *v713;
  void *v714;
  uint64_t v715;
  unint64_t *v716;
  unint64_t v717;
  uint64_t v718;
  const void *v719;
  void *v720;
  std::__shared_weak_count *v721;
  unint64_t *v722;
  unint64_t v723;
  Espresso *v724;
  const char *v725;
  NSObject *v726;
  const std::string *v727;
  _QWORD *v728;
  _DWORD *v729;
  unint64_t v730;
  _DWORD *v731;
  _DWORD *v732;
  uint64_t v733;
  unint64_t v734;
  unint64_t v735;
  uint64_t v736;
  _DWORD *v737;
  int v738;
  _DWORD *v739;
  _DWORD *v740;
  uint64_t v741;
  unint64_t v742;
  unint64_t v743;
  uint64_t v744;
  _DWORD *v745;
  int v746;
  unint64_t *v747;
  unint64_t v748;
  std::__shared_weak_count *v749;
  unint64_t *v750;
  unint64_t v751;
  std::__shared_weak_count *v752;
  unint64_t *v753;
  unint64_t v754;
  std::__shared_weak_count *v755;
  unint64_t *v756;
  unint64_t v757;
  int *v758;
  int *v759;
  unint64_t v760;
  uint64_t v761;
  std::__shared_weak_count *v762;
  unint64_t *v763;
  unint64_t v764;
  Espresso *v765;
  const char *v766;
  unint64_t *v767;
  unint64_t v768;
  int *v769;
  int *v770;
  int v771;
  NSObject *v772;
  std::__shared_weak_count *v773;
  unint64_t *v774;
  unint64_t v775;
  std::__shared_weak_count *v776;
  unint64_t *v777;
  unint64_t v778;
  std::__shared_weak_count *v779;
  unint64_t *v780;
  unint64_t v781;
  Espresso::net *v782;
  std::__shared_weak_count *v783;
  unint64_t *v784;
  unint64_t v785;
  std::__shared_weak_count *v786;
  unint64_t *v787;
  unint64_t v788;
  uint64_t v790;
  char *v791;
  uint64_t v792;
  int v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  int v798;
  unint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  void *v804;
  char v805;
  unsigned __int8 *v806;
  std::__shared_weak_count *v807;
  unsigned __int8 *v808;
  std::__shared_weak_count *v809;
  unint64_t v810;
  void *v811;
  std::__shared_weak_count *v812;
  void *v813;
  std::__shared_weak_count *v814;
  uint64_t v815;
  std::__shared_weak_count *v816;
  int v817[2];
  std::__shared_weak_count *v818;
  int v819;
  int v820;
  int v821;
  int v822;
  int v823;
  int v824;
  uint64_t v825;
  __int128 v826;
  void *v827;
  std::__shared_weak_count *v828;
  unsigned __int8 *v829;
  std::__shared_weak_count *v830;
  __int128 v831;
  __int128 v832;
  unint64_t v833;
  std::__shared_weak_count *v834;
  __int128 v835;
  __int128 v836;
  unint64_t v837;
  __int128 v838;
  __int128 v839;
  _BYTE v840[24];
  _BYTE *v841;
  __int128 v842;
  __int128 v843;
  int v844;
  __int128 buf;
  __int128 v846;
  _BYTE v847[6];
  __int16 v848;
  void *v849;
  void *v850;
  void *v851;
  char v852;
  std::__shared_weak_count *v853;
  std::__shared_weak_count *v854;
  std::__shared_weak_count *v855;
  uint64_t v856;
  __int128 v857;
  __int128 __p;
  uint64_t v859;
  _QWORD *v860;
  void *v861;
  void *v862;
  void *v863;
  char v864;
  std::__shared_weak_count *v865;
  std::__shared_weak_count *v866;
  std::__shared_weak_count *v867;
  _QWORD v868[11];

  v868[8] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v804, "/tmp/");
  std::string::basic_string[abi:ne180100]<0>(&__p, "original");
  v841 = 0;
  v2 = a2;
  Espresso::net::pprint((uint64_t)a2, (uint64_t)&__p, (uint64_t)v840);
  v3 = v841;
  if (v841 == v840)
  {
    v4 = 4;
    v3 = v840;
  }
  else
  {
    if (!v841)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (SHIBYTE(v859) < 0)
    operator delete((void *)__p);
  std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)&v842, a2);
  v5 = getenv("FASTSPEECH_ENCODER");
  v6 = ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4) - 1;
  v825 = v6;
  if (v6)
  {
    v7 = v5 != 0;
    v8 = (char *)a2 + 96;
    v791 = (char *)a2 + 136;
    do
    {
      v9 = *(_OWORD *)(*((_QWORD *)v2 + 4) + 16 * v6);
      v836 = v9;
      if (*((_QWORD *)&v9 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = v9;
      v13 = *(const void **)(v9 + 64);
      if (v13
      {
        v15 = *(_QWORD *)(v12 + 72);
        *(_QWORD *)&v839 = v14;
        *((_QWORD *)&v839 + 1) = v15;
        if (v15)
        {
          v16 = (unint64_t *)(v15 + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        if (v7)
        {
          v18 = (std::__shared_weak_count *)*((_QWORD *)v2 + 3);
          v827 = (void *)*((_QWORD *)v2 + 2);
          v828 = v18;
          if (v18)
          {
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldxr(p_shared_owners);
            while (__stxr(v20 + 1, p_shared_owners));
          }
          v826 = 0uLL;
          Espresso::sequential_builder::sequential_builder((uint64_t)&__p, (uint64_t *)&v827, 0, (uint64_t *)&v826);
          if (v18)
          {
            v21 = (unint64_t *)&v18->__shared_owners_;
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          v790 = v7;
          v23 = v825;
          v25 = *((_QWORD *)v2 + 4);
          for (i = *((_QWORD *)v2 + 5); ; i = *((_QWORD *)a2 + 5))
          {
            v799 = v23;
            if (v23 >= ((i - v25) >> 4) - 7)
            {
LABEL_182:
              std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v868);
              v159 = v867;
              if (v867)
              {
                v160 = (unint64_t *)&v867->__shared_owners_;
                do
                  v161 = __ldaxr(v160);
                while (__stlxr(v161 - 1, v160));
                if (!v161)
                {
                  ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                  std::__shared_weak_count::__release_weak(v159);
                }
              }
              v162 = v866;
              v7 = v790;
              if (v866)
              {
                v163 = (unint64_t *)&v866->__shared_owners_;
                do
                  v164 = __ldaxr(v163);
                while (__stlxr(v164 - 1, v163));
                if (!v164)
                {
                  ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                  std::__shared_weak_count::__release_weak(v162);
                }
              }
              v165 = v865;
              v2 = a2;
              if (v865)
              {
                v166 = (unint64_t *)&v865->__shared_owners_;
                do
                  v167 = __ldaxr(v166);
                while (__stlxr(v167 - 1, v166));
                if (!v167)
                {
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                }
              }
              if (v864 < 0)
                operator delete(v863);
              std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v859, v860);
              v168 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
              if (*((_QWORD *)&__p + 1))
              {
                v169 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
                do
                  v170 = __ldaxr(v169);
                while (__stlxr(v170 - 1, v169));
LABEL_301:
                if (!v170)
                {
                  ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                  std::__shared_weak_count::__release_weak(v168);
                }
              }
              goto LABEL_303;
            }
            v26 = v842;
            v27 = (uint64_t **)(v842 + 16);
            LODWORD(buf) = v825;
            v824 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v842 + 16), v825, &buf)[5];
            v28 = v824;
            v823 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v27, v824, &v824)[5];
            v29 = v823;
            v822 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v27, v823, &v823)[5];
            v30 = v822;
            v31 = v822;
            v32 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v26 + 40), v822, &v822)[5]+ 1);
            v821 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v27, v30, &v822)[5];
            v33 = v821;
            v820 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v27, v821, &v821)[5];
            v34 = v820;
            v819 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v27, v820, &v820)[5];
            v35 = v819;
            v795 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v27, v819, &v819)[5];
            v37 = *((_QWORD *)a2 + 4);
            v38 = *(_QWORD *)(v37 + 16 * v28);
            v39 = *(const void **)(v38 + 64);
            if (!v39)
              goto LABEL_35;
            if (v40)
            {
              v41 = v40;
              v42 = *(_QWORD *)(v38 + 72);
              *(_QWORD *)&v835 = v40;
              *((_QWORD *)&v835 + 1) = v42;
              if (v42)
              {
                v43 = (unint64_t *)(v42 + 8);
                do
                  v44 = __ldxr(v43);
                while (__stxr(v44 + 1, v43));
                v37 = *((_QWORD *)a2 + 4);
              }
            }
            else
            {
LABEL_35:
              v41 = 0;
              v835 = 0uLL;
            }
            v45 = *(_QWORD *)(v37 + 16 * v29);
            v46 = *(const void **)(v45 + 64);
            if (v46
            {
              v48 = v47;
              v49 = *(std::__shared_weak_count **)(v45 + 72);
              v833 = (unint64_t)v47;
              v834 = v49;
              if (v49)
              {
                v50 = (unint64_t *)&v49->__shared_owners_;
                do
                  v51 = __ldxr(v50);
                while (__stxr(v51 + 1, v50));
                v37 = *((_QWORD *)a2 + 4);
              }
            }
            else
            {
              v48 = 0;
              v833 = 0;
              v834 = 0;
            }
            v52 = *(_QWORD *)(v37 + 16 * v31);
            v53 = *(const void **)(v52 + 64);
            if (v53
            {
              v55 = v54;
              v56 = *(_QWORD *)(v52 + 72);
              *(_QWORD *)&v832 = v54;
              *((_QWORD *)&v832 + 1) = v56;
              if (v56)
              {
                v57 = (unint64_t *)(v56 + 8);
                do
                  v58 = __ldxr(v57);
                while (__stxr(v58 + 1, v57));
                v37 = *((_QWORD *)a2 + 4);
              }
            }
            else
            {
              v55 = 0;
              v832 = 0uLL;
            }
            v793 = v32;
            v59 = v32;
            v60 = *(_QWORD *)(v37 + 16 * v32);
            v61 = *(const void **)(v60 + 64);
            if (v61
            {
              v63 = v62;
              v64 = *(std::__shared_weak_count **)(v60 + 72);
              v829 = (unsigned __int8 *)v62;
              v830 = v64;
              if (v64)
              {
                v65 = (unint64_t *)&v64->__shared_owners_;
                do
                  v66 = __ldxr(v65);
                while (__stxr(v66 + 1, v65));
                v37 = *((_QWORD *)a2 + 4);
              }
            }
            else
            {
              v63 = 0;
              v829 = 0;
              v830 = 0;
            }
            v67 = *(_QWORD *)(v37 + 16 * v33);
            v68 = *(const void **)(v67 + 64);
            if (v68
            {
              v70 = v69;
              v71 = *(std::__shared_weak_count **)(v67 + 72);
              *(_QWORD *)v817 = v69;
              v818 = v71;
              if (v71)
              {
                v72 = (unint64_t *)&v71->__shared_owners_;
                do
                  v73 = __ldxr(v72);
                while (__stxr(v73 + 1, v72));
                v37 = *((_QWORD *)a2 + 4);
              }
            }
            else
            {
              v70 = 0;
              *(_QWORD *)v817 = 0;
              v818 = 0;
            }
            v74 = *(_QWORD *)(v37 + 16 * v34);
            v75 = *(const void **)(v74 + 64);
            if (v75
            {
              v77 = v76;
              v78 = *(std::__shared_weak_count **)(v74 + 72);
              v815 = (uint64_t)v76;
              v816 = v78;
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldxr(v79);
                while (__stxr(v80 + 1, v79));
                v37 = *((_QWORD *)a2 + 4);
              }
            }
            else
            {
              v77 = 0;
              v815 = 0;
              v816 = 0;
            }
            v81 = *(_QWORD *)(v37 + 16 * v35);
            v82 = *(const void **)(v81 + 64);
            if (!v82)
              break;
            if (!v83)
              break;
            v84 = v83;
            v85 = *(std::__shared_weak_count **)(v81 + 72);
            v813 = v83;
            v814 = v85;
            if (!v85)
              goto LABEL_78;
            v86 = (unint64_t *)&v85->__shared_owners_;
            v8 = (char *)a2 + 96;
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
            v37 = *((_QWORD *)a2 + 4);
LABEL_79:
            v88 = *(_QWORD *)(v37 + 16 * v795);
            v89 = *(void **)(v88 + 64);
            if (v89
            {
              v90 = *(std::__shared_weak_count **)(v88 + 72);
              v811 = v89;
              v812 = v90;
              if (v90)
              {
                v91 = (unint64_t *)&v90->__shared_owners_;
                do
                  v92 = __ldxr(v91);
                while (__stxr(v92 + 1, v91));
              }
              v93 = 1;
            }
            else
            {
              v90 = 0;
              v93 = 0;
              v811 = 0;
              v812 = 0;
            }
            if (v63)
              v94 = v41 == 0;
            else
              v94 = 1;
            if (v94 || v48 == 0 || v55 == 0 || v70 == 0 || v77 == 0 || v84 == 0)
              v100 = 0;
            else
              v100 = v93;
            if ((v100 & 1) != 0)
            {
              Espresso::espresso_os_log_subsystem((Espresso *)v89, v36);
              v101 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
              {
                LODWORD(buf) = 134217984;
                *(_QWORD *)((char *)&buf + 4) = v799;
                _os_log_impl(&dword_190DAF000, v101, OS_LOG_TYPE_INFO, "[Extra operations in-between dilated convolutions] Found the pattern on layer: %lu\n", (uint8_t *)&buf, 0xCu);
              }

              v810 = v59;
              v808 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v8, v59, &v810)[3];
              v102 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v791, v808, (__int128 **)&v808);
              Espresso::abstract_blob_container::shape((char *)&buf, *((_QWORD *)v102 + 5));
              v103 = buf;
              if (v849)
              {
                v850 = v849;
                operator delete(v849);
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v808, v103, 1, 1, 1);
              v104 = v808;
              v105 = (void *)*((_QWORD *)v808 + 2);
              (*(void (**)(_QWORD))(**((_QWORD **)v63 + 43) + 32))(*((_QWORD *)v63 + 43));
              v106 = *((_QWORD *)v63 + 43);
              v107 = *(_QWORD *)(v106 + 160);
              v108 = *(std::__shared_weak_count **)(v106 + 168);
              if (v108)
              {
                v109 = (unint64_t *)&v108->__shared_owners_;
                do
                  v110 = __ldxr(v109);
                while (__stxr(v110 + 1, v109));
                memcpy(v105, *(const void **)(v107 + 24), 4 * *((int *)v104 + 2));
                v111 = (unint64_t *)&v108->__shared_owners_;
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                  std::__shared_weak_count::__release_weak(v108);
                }
              }
              else
              {
                memcpy(v105, *(const void **)(v107 + 24), 4 * *((int *)v104 + 2));
              }
              v113 = v839;
              v806 = v808;
              v807 = v809;
              if (v809)
              {
                v114 = (unint64_t *)&v809->__shared_owners_;
                do
                  v115 = __ldxr(v114);
                while (__stxr(v115 + 1, v114));
              }
              (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v113 + 392))(v113, &v806);
              v116 = v807;
              if (v807)
              {
                v117 = (unint64_t *)&v807->__shared_owners_;
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
              v119 = v839;
              *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v839 + 384))(v839) + 32) = 1;
              v120 = *(_QWORD *)v817;
              if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v817 + 384))(*(_QWORD *)v817) == 1)
              {
                *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 384))(v119) + 24) = 1;
              }
              else
              {
                v121 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 384))(v120);
                *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 384))(v119) + 60) = v121;
              }
              v122 = v819;
              v810 = v819;
              v123 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v8, v819, &v810)[3];
              *(_QWORD *)&buf = &v825;
              v124 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v8, (unint64_t *)&v825, (uint64_t)&std::piecewise_construct, (uint64_t **)&buf);
              std::string::operator=((std::string *)v124[3], v123);
              Espresso::net::remove_layer(a2, v122);
              v125 = v820;
              Espresso::net::remove_layer(a2, v820);
              v126 = v821;
              Espresso::net::remove_layer(a2, v821);
              v127 = v822;
              Espresso::net::remove_layer(a2, v822);
              Espresso::net::remove_layer(a2, v793);
              v128 = v823;
              Espresso::net::remove_layer(a2, v823);
              v129 = v824;
              v130 = Espresso::net::remove_layer(a2, v824);
              Espresso::espresso_os_log_subsystem((Espresso *)v130, v131);
              v132 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v132, OS_LOG_TYPE_INFO))
              {
                LODWORD(buf) = 67110656;
                DWORD1(buf) = v122;
                WORD4(buf) = 1024;
                *(_DWORD *)((char *)&buf + 10) = v125;
                HIWORD(buf) = 1024;
                LODWORD(v846) = v126;
                WORD2(v846) = 1024;
                *(_DWORD *)((char *)&v846 + 6) = v793;
                WORD5(v846) = 1024;
                HIDWORD(v846) = v127;
                *(_WORD *)v847 = 1024;
                *(_DWORD *)&v847[2] = v128;
                v848 = 1024;
                LODWORD(v849) = v129;
                _os_log_impl(&dword_190DAF000, v132, OS_LOG_TYPE_INFO, "[Extra operations in-between dilated convolutions]                                         Removing layers: %d %d %d %d %d %d %d\n", (uint8_t *)&buf, 0x2Cu);
              }

              buf = 0u;
              v846 = 0u;
              *(_DWORD *)v847 = 1065353216;
              Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&__p, (__int128 **)a2, v799, (uint64_t)&buf);
              std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
              v133 = v809;
              if (v809)
              {
                v134 = (unint64_t *)&v809->__shared_owners_;
                do
                  v135 = __ldaxr(v134);
                while (__stlxr(v135 - 1, v134));
                if (!v135)
                {
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v133);
                }
              }
              v90 = v812;
            }
            if (v90)
            {
              v136 = (unint64_t *)&v90->__shared_owners_;
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
            v138 = v814;
            if (v814)
            {
              v139 = (unint64_t *)&v814->__shared_owners_;
              do
                v140 = __ldaxr(v139);
              while (__stlxr(v140 - 1, v139));
              if (!v140)
              {
                ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                std::__shared_weak_count::__release_weak(v138);
              }
            }
            v141 = v816;
            if (v816)
            {
              v142 = (unint64_t *)&v816->__shared_owners_;
              do
                v143 = __ldaxr(v142);
              while (__stlxr(v143 - 1, v142));
              if (!v143)
              {
                ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                std::__shared_weak_count::__release_weak(v141);
              }
            }
            v144 = v818;
            if (v818)
            {
              v145 = (unint64_t *)&v818->__shared_owners_;
              do
                v146 = __ldaxr(v145);
              while (__stlxr(v146 - 1, v145));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
            v147 = v830;
            if (v830)
            {
              v148 = (unint64_t *)&v830->__shared_owners_;
              do
                v149 = __ldaxr(v148);
              while (__stlxr(v149 - 1, v148));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            v150 = (std::__shared_weak_count *)*((_QWORD *)&v832 + 1);
            if (*((_QWORD *)&v832 + 1))
            {
              v151 = (unint64_t *)(*((_QWORD *)&v832 + 1) + 8);
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
            v153 = v834;
            if (v834)
            {
              v154 = (unint64_t *)&v834->__shared_owners_;
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
            v156 = (std::__shared_weak_count *)*((_QWORD *)&v835 + 1);
            if (*((_QWORD *)&v835 + 1))
            {
              v157 = (unint64_t *)(*((_QWORD *)&v835 + 1) + 8);
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
            if ((v100 & 1) != 0)
              goto LABEL_182;
            v23 = v799 + 1;
            v25 = *((_QWORD *)a2 + 4);
          }
          v84 = 0;
          v813 = 0;
          v814 = 0;
LABEL_78:
          v8 = (char *)a2 + 96;
          goto LABEL_79;
        }
        v171 = (std::__shared_weak_count *)*((_QWORD *)v2 + 3);
        *(_QWORD *)&v838 = *((_QWORD *)v2 + 2);
        *((_QWORD *)&v838 + 1) = v171;
        if (v171)
        {
          v172 = (unint64_t *)&v171->__shared_owners_;
          do
            v173 = __ldxr(v172);
          while (__stxr(v173 + 1, v172));
        }
        v857 = 0uLL;
        Espresso::sequential_builder::sequential_builder((uint64_t)&__p, (uint64_t *)&v838, 0, (uint64_t *)&v857);
        if (v171)
        {
          v174 = (unint64_t *)&v171->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        for (j = v825; ; j = *(_QWORD *)v817 + 1)
        {
          *(_QWORD *)v817 = j;
          v177 = *((_QWORD *)v2 + 4);
          if (j >= (*((_QWORD *)v2 + 5) - v177) >> 4)
            break;
          v178 = *(_QWORD *)(v177 + 16 * j);
          v179 = *(const void **)(v178 + 64);
          if (v179
          {
            v181 = v180;
            v182 = *(_QWORD *)(v178 + 72);
            *(_QWORD *)&v835 = v180;
            *((_QWORD *)&v835 + 1) = v182;
            if (v182)
            {
              v183 = (unint64_t *)(v182 + 8);
              do
                v184 = __ldxr(v183);
              while (__stxr(v184 + 1, v183));
              v177 = *((_QWORD *)v2 + 4);
            }
          }
          else
          {
            v181 = 0;
            v835 = 0uLL;
          }
          v185 = *(_QWORD *)(v177 + 16 * j + 16);
          v186 = *(const void **)(v185 + 64);
          if (v186)
          {
            if (v187)
            {
              v188 = *(std::__shared_weak_count **)(v185 + 72);
              v833 = (unint64_t)v187;
              v834 = v188;
              if (v188)
              {
                v189 = (unint64_t *)&v188->__shared_owners_;
                do
                  v190 = __ldxr(v189);
                while (__stxr(v190 + 1, v189));
                if (v181)
                {
LABEL_236:
                  *(_QWORD *)&v832 = v817;
                  *(_QWORD *)&v832 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v8, (unint64_t *)v817, (uint64_t)&std::piecewise_construct, (uint64_t **)&v832)[3];
                  v195 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v791, (unsigned __int8 *)v832, (__int128 **)&v832);
                  Espresso::abstract_blob_container::shape((char *)&buf, *((_QWORD *)v195 + 5));
                  v196 = buf;
                  if (v849)
                  {
                    v850 = v849;
                    operator delete(v849);
                  }
                  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v832, v196, 1, 1, 1);
                  v197 = v832;
                  v198 = *(void **)(v832 + 16);
                  (*(void (**)(_QWORD *))(*v181[43] + 32))(v181[43]);
                  v199 = v181[43];
                  v200 = v199[20];
                  v201 = (std::__shared_weak_count *)v199[21];
                  if (v201)
                  {
                    v202 = (unint64_t *)&v201->__shared_owners_;
                    do
                      v203 = __ldxr(v202);
                    while (__stxr(v203 + 1, v202));
                    memcpy(v198, *(const void **)(v200 + 24), 4 * *(int *)(v197 + 8));
                    v204 = (unint64_t *)&v201->__shared_owners_;
                    do
                      v205 = __ldaxr(v204);
                    while (__stlxr(v205 - 1, v204));
                    if (!v205)
                    {
                      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                      std::__shared_weak_count::__release_weak(v201);
                    }
                  }
                  else
                  {
                    memcpy(v198, *(const void **)(v200 + 24), 4 * *(int *)(v197 + 8));
                  }
                  v206 = v839;
                  v831 = v832;
                  if (*((_QWORD *)&v832 + 1))
                  {
                    v207 = (unint64_t *)(*((_QWORD *)&v832 + 1) + 8);
                    do
                      v208 = __ldxr(v207);
                    while (__stxr(v208 + 1, v207));
                  }
                  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v206 + 392))(v206, &v831);
                  v209 = (std::__shared_weak_count *)*((_QWORD *)&v831 + 1);
                  if (*((_QWORD *)&v831 + 1))
                  {
                    v210 = (unint64_t *)(*((_QWORD *)&v831 + 1) + 8);
                    do
                      v211 = __ldaxr(v210);
                    while (__stlxr(v211 - 1, v210));
                    if (!v211)
                    {
                      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                      std::__shared_weak_count::__release_weak(v209);
                    }
                  }
                  *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v839 + 384))(v839) + 32) = 1;
                  v212 = *(_QWORD *)v817;
                  v213 = *(_QWORD *)(*((_QWORD *)v2 + 4) + 16 * *(_QWORD *)v817 - 16);
                  v214 = *(const void **)(v213 + 64);
                  if (v214
                  {
                    v216 = *(std::__shared_weak_count **)(v213 + 72);
                    v829 = (unsigned __int8 *)v215;
                    v830 = v216;
                    if (v216)
                    {
                      v217 = (unint64_t *)&v216->__shared_owners_;
                      do
                        v218 = __ldxr(v217);
                      while (__stxr(v218 + 1, v217));
                    }
                  }
                  else
                  {
                    v216 = 0;
                    v829 = 0;
                    v830 = 0;
                  }
                  *(_QWORD *)&buf = v212 + 1;
                  v219 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v8, v212 + 1, &buf)[3];
                  v815 = *(_QWORD *)v817 - 1;
                  v220 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v8, *(_QWORD *)v817 - 1, &v815);
                  std::string::operator=((std::string *)v220[3], v219);
                  Espresso::net::remove_layer(v2, v817[0] + 1);
                  Espresso::net::remove_layer(v2, v817[0]);
                  buf = 0u;
                  v846 = 0u;
                  *(_DWORD *)v847 = 1065353216;
                  Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&__p, (__int128 **)v2, v817[0], (uint64_t)&buf);
                  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
                  if (v216)
                  {
                    v221 = (unint64_t *)&v216->__shared_owners_;
                    do
                      v222 = __ldaxr(v221);
                    while (__stlxr(v222 - 1, v221));
                    if (!v222)
                    {
                      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                      std::__shared_weak_count::__release_weak(v216);
                    }
                  }
                  v223 = (std::__shared_weak_count *)*((_QWORD *)&v832 + 1);
                  if (*((_QWORD *)&v832 + 1))
                  {
                    v224 = (unint64_t *)(*((_QWORD *)&v832 + 1) + 8);
                    do
                      v225 = __ldaxr(v224);
                    while (__stlxr(v225 - 1, v224));
                    if (!v225)
                    {
                      ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                      std::__shared_weak_count::__release_weak(v223);
                    }
                  }
                  v226 = v834;
                  if (v834)
                  {
                    v227 = (unint64_t *)&v834->__shared_owners_;
                    do
                      v228 = __ldaxr(v227);
                    while (__stlxr(v228 - 1, v227));
                    if (!v228)
                    {
                      ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                      std::__shared_weak_count::__release_weak(v226);
                    }
                  }
                  v229 = (std::__shared_weak_count *)*((_QWORD *)&v835 + 1);
                  if (*((_QWORD *)&v835 + 1))
                  {
                    v230 = (unint64_t *)(*((_QWORD *)&v835 + 1) + 8);
                    do
                      v231 = __ldaxr(v230);
                    while (__stlxr(v231 - 1, v230));
                    if (!v231)
                    {
                      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                      std::__shared_weak_count::__release_weak(v229);
                    }
                  }
                  break;
                }
                do
                  v191 = __ldaxr(v189);
                while (__stlxr(v191 - 1, v189));
                if (!v191)
                {
                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                  std::__shared_weak_count::__release_weak(v188);
                }
              }
              else if (v181)
              {
                goto LABEL_236;
              }
            }
          }
          v192 = (std::__shared_weak_count *)*((_QWORD *)&v835 + 1);
          if (*((_QWORD *)&v835 + 1))
          {
            v193 = (unint64_t *)(*((_QWORD *)&v835 + 1) + 8);
            do
              v194 = __ldaxr(v193);
            while (__stlxr(v194 - 1, v193));
            if (!v194)
            {
              ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
              std::__shared_weak_count::__release_weak(v192);
            }
          }
        }
        std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v868);
        v232 = v867;
        if (v867)
        {
          v233 = (unint64_t *)&v867->__shared_owners_;
          do
            v234 = __ldaxr(v233);
          while (__stlxr(v234 - 1, v233));
          if (!v234)
          {
            ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
            std::__shared_weak_count::__release_weak(v232);
          }
        }
        v235 = v866;
        if (v866)
        {
          v236 = (unint64_t *)&v866->__shared_owners_;
          do
            v237 = __ldaxr(v236);
          while (__stlxr(v237 - 1, v236));
          if (!v237)
          {
            ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
            std::__shared_weak_count::__release_weak(v235);
          }
        }
        v238 = v865;
        if (v865)
        {
          v239 = (unint64_t *)&v865->__shared_owners_;
          do
            v240 = __ldaxr(v239);
          while (__stlxr(v240 - 1, v239));
          if (!v240)
          {
            ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
            std::__shared_weak_count::__release_weak(v238);
          }
        }
        if (v864 < 0)
          operator delete(v863);
        std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v859, v860);
        v168 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v241 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v170 = __ldaxr(v241);
          while (__stlxr(v170 - 1, v241));
          goto LABEL_301;
        }
LABEL_303:
        ++v7;
        v242 = (std::__shared_weak_count *)*((_QWORD *)&v839 + 1);
        if (*((_QWORD *)&v839 + 1))
        {
          v243 = (unint64_t *)(*((_QWORD *)&v839 + 1) + 8);
          do
            v244 = __ldaxr(v243);
          while (__stlxr(v244 - 1, v243));
          if (!v244)
          {
            ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
            std::__shared_weak_count::__release_weak(v242);
          }
        }
      }
      else
      {
        v839 = 0uLL;
      }
      v245 = (std::__shared_weak_count *)*((_QWORD *)&v836 + 1);
      if (*((_QWORD *)&v836 + 1))
      {
        v246 = (unint64_t *)(*((_QWORD *)&v836 + 1) + 8);
        do
          v247 = __ldaxr(v246);
        while (__stlxr(v247 - 1, v246));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
          std::__shared_weak_count::__release_weak(v245);
        }
      }
      v6 = --v825;
    }
    while (v825);
  }
  v248 = (std::__shared_weak_count *)*((_QWORD *)&v842 + 1);
  if (*((_QWORD *)&v842 + 1))
  {
    v249 = (unint64_t *)(*((_QWORD *)&v842 + 1) + 8);
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  if (getenv("FASTSPEECH_ENCODER"))
  {
    std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)&v839, v2);
    v836 = 0uLL;
    v837 = 0;
    v251 = (uint64_t)(*((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4)) >> 4;
    v252 = v251 - 1;
    if (v251 != 1)
    {
      v796 = (uint64_t)v2 + 136;
      v800 = (uint64_t)v2 + 96;
      while (1)
      {
        v253 = *(_OWORD *)(*((_QWORD *)v2 + 4) + 16 * v252);
        buf = v253;
        if (*((_QWORD *)&v253 + 1))
        {
          v254 = (unint64_t *)(*((_QWORD *)&v253 + 1) + 8);
          do
            v255 = __ldxr(v254);
          while (__stxr(v255 + 1, v254));
        }
        v256 = v253;
        v257 = *(const void **)(v253 + 64);
        if (!v257)
          goto LABEL_475;
        if (!v258)
          goto LABEL_475;
        v259 = *(_QWORD *)(v256 + 72);
        *(_QWORD *)&v842 = v258;
        *((_QWORD *)&v842 + 1) = v259;
        if (v259)
        {
          v260 = (unint64_t *)(v259 + 8);
          do
            v261 = __ldxr(v260);
          while (__stxr(v261 + 1, v260));
        }
        v262 = v839;
        v263 = (uint64_t **)(v839 + 16);
        LODWORD(__p) = v252;
        LODWORD(v826) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v839 + 16), v252, &__p)[5];
        v264 = v826;
        v817[0] = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v263, v826, &v826)[5];
        v265 = v817[0];
        v266 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v263, v817[0], v817);
        v267 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v262 + 40), *(_DWORD *)v266[5], v266[5])[5]+ 1);
        LODWORD(v815) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v263, v265, v817)[5];
        v268 = v815;
        v269 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v263, v815, &v815);
        v271 = v264;
        v272 = *(_DWORD *)v269[5];
        v273 = *((_QWORD *)v2 + 4);
        v274 = *(_QWORD *)(v273 + 16 * v271);
        v275 = *(const void **)(v274 + 64);
        if (v275
        {
          v277 = v276;
          v278 = *(_QWORD *)(v274 + 72);
          *(_QWORD *)&v838 = v276;
          *((_QWORD *)&v838 + 1) = v278;
          if (v278)
          {
            v279 = (unint64_t *)(v278 + 8);
            do
              v280 = __ldxr(v279);
            while (__stxr(v280 + 1, v279));
            v273 = *((_QWORD *)v2 + 4);
          }
        }
        else
        {
          v277 = 0;
          v838 = 0uLL;
        }
        v281 = *(_QWORD *)(v273 + 16 * v265);
        v282 = *(const void **)(v281 + 64);
        if (v282
        {
          v284 = v283;
          v285 = *(_QWORD *)(v281 + 72);
          *(_QWORD *)&v857 = v283;
          *((_QWORD *)&v857 + 1) = v285;
          if (v285)
          {
            v286 = (unint64_t *)(v285 + 8);
            do
              v287 = __ldxr(v286);
            while (__stxr(v287 + 1, v286));
            v273 = *((_QWORD *)a2 + 4);
          }
        }
        else
        {
          v284 = 0;
          v857 = 0uLL;
        }
        v288 = *(_QWORD *)(v273 + 16 * v267);
        v289 = *(const void **)(v288 + 64);
        if (v289
        {
          v291 = v290;
          v292 = *(_QWORD *)(v288 + 72);
          *(_QWORD *)&v835 = v290;
          *((_QWORD *)&v835 + 1) = v292;
          if (v292)
          {
            v293 = (unint64_t *)(v292 + 8);
            do
              v294 = __ldxr(v293);
            while (__stxr(v294 + 1, v293));
            v273 = *((_QWORD *)a2 + 4);
          }
        }
        else
        {
          v291 = 0;
          v835 = 0uLL;
        }
        v295 = *(_QWORD *)(v273 + 16 * v268);
        v296 = *(const void **)(v295 + 64);
        if (v296
        {
          v298 = v297;
          v299 = *(std::__shared_weak_count **)(v295 + 72);
          v833 = (unint64_t)v297;
          v834 = v299;
          if (v299)
          {
            v300 = (unint64_t *)&v299->__shared_owners_;
            do
              v301 = __ldxr(v300);
            while (__stxr(v301 + 1, v300));
            v273 = *((_QWORD *)a2 + 4);
          }
        }
        else
        {
          v298 = 0;
          v833 = 0;
          v834 = 0;
        }
        v302 = *(_QWORD *)(v273 + 16 * v272);
        v303 = *(void **)(v302 + 64);
        if (v303
        {
          v304 = *(std::__shared_weak_count **)(v302 + 72);
          *(_QWORD *)&v832 = v303;
          *((_QWORD *)&v832 + 1) = v304;
          if (v304)
          {
            v305 = (unint64_t *)&v304->__shared_owners_;
            do
              v306 = __ldxr(v305);
            while (__stxr(v306 + 1, v305));
          }
          v307 = 1;
          if (!v291)
            goto LABEL_381;
        }
        else
        {
          v304 = 0;
          v307 = 0;
          v832 = 0uLL;
          if (!v291)
            goto LABEL_381;
        }
        if (v277 && v284 && v298)
        {
          v2 = a2;
          if ((v307 & 1) != 0)
          {
            Espresso::espresso_os_log_subsystem((Espresso *)v303, v270);
            v308 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v308, OS_LOG_TYPE_INFO))
            {
              LODWORD(__p) = 134217984;
              *(_QWORD *)((char *)&__p + 4) = v252;
              _os_log_impl(&dword_190DAF000, v308, OS_LOG_TYPE_INFO, "[Convolution fuse bias and activation] Found pattern on layer: %lu\n", (uint8_t *)&__p, 0xCu);
            }

            v827 = (void *)v267;
            v829 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v800, v267, &v827)[3];
            v309 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v796, v829, (__int128 **)&v829);
            Espresso::abstract_blob_container::shape((char *)&__p, *((_QWORD *)v309 + 5));
            v310 = __p;
            v2 = a2;
            if (v861)
            {
              v862 = v861;
              operator delete(v861);
            }
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__p, v310, 1, 1, 1);
            v311 = __p;
            v312 = *(void **)(__p + 16);
            (*(void (**)(_QWORD *))(*v291[43] + 32))(v291[43]);
            v313 = v291[43];
            v314 = v313[20];
            v315 = (std::__shared_weak_count *)v313[21];
            if (v315)
            {
              v316 = (unint64_t *)&v315->__shared_owners_;
              do
                v317 = __ldxr(v316);
              while (__stxr(v317 + 1, v316));
              memcpy(v312, *(const void **)(v314 + 24), 4 * *(int *)(v311 + 8));
              v318 = (unint64_t *)&v315->__shared_owners_;
              do
                v319 = __ldaxr(v318);
              while (__stlxr(v319 - 1, v318));
              if (!v319)
              {
                ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
                std::__shared_weak_count::__release_weak(v315);
              }
            }
            else
            {
              memcpy(v312, *(const void **)(v314 + 24), 4 * *(int *)(v311 + 8));
            }
            v320 = v842;
            v831 = __p;
            if (*((_QWORD *)&__p + 1))
            {
              v321 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
              do
                v322 = __ldxr(v321);
              while (__stxr(v322 + 1, v321));
            }
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v320 + 392))(v320, &v831);
            v323 = (std::__shared_weak_count *)*((_QWORD *)&v831 + 1);
            if (*((_QWORD *)&v831 + 1))
            {
              v324 = (unint64_t *)(*((_QWORD *)&v831 + 1) + 8);
              do
                v325 = __ldaxr(v324);
              while (__stlxr(v325 - 1, v324));
              if (!v325)
              {
                ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
                std::__shared_weak_count::__release_weak(v323);
              }
            }
            v326 = v842;
            *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v842 + 384))(v842) + 32) = 1;
            v327 = v832;
            if (*(_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v832 + 384))(v832) == 1)
            {
              *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v326 + 384))(v326) + 24) = 1;
            }
            else
            {
              v328 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v327 + 384))(v327);
              *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v326 + 384))(v326) + 60) = v328;
            }
            v829 = (unsigned __int8 *)v272;
            v329 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v800, v272, &v829)[3];
            v827 = (void *)v817[0];
            v330 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v800, v817[0], &v827);
            std::string::operator=((std::string *)v330[3], v329);
            v332 = (_DWORD *)*((_QWORD *)&v836 + 1);
            v331 = v837;
            if (*((_QWORD *)&v836 + 1) >= v837)
            {
              v334 = (_DWORD *)v836;
              v335 = (uint64_t)(*((_QWORD *)&v836 + 1) - v836) >> 2;
              v336 = v335 + 1;
              if ((unint64_t)(v335 + 1) >> 62)
                goto LABEL_1048;
              v337 = v837 - v836;
              if ((uint64_t)(v837 - v836) >> 1 > v336)
                v336 = v337 >> 1;
              v338 = (unint64_t)v337 >= 0x7FFFFFFFFFFFFFFCLL;
              v339 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v338)
                v339 = v336;
              if (v339)
              {
                v339 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v339);
                v332 = (_DWORD *)*((_QWORD *)&v836 + 1);
                v334 = (_DWORD *)v836;
              }
              else
              {
                v340 = 0;
              }
              v341 = (_DWORD *)(v339 + 4 * v335);
              *v341 = v267;
              v333 = v341 + 1;
              while (v332 != v334)
              {
                v342 = *--v332;
                *--v341 = v342;
              }
              v331 = v339 + 4 * v340;
              *(_QWORD *)&v836 = v341;
              *((_QWORD *)&v836 + 1) = v333;
              v837 = v331;
              if (v334)
              {
                operator delete(v334);
                v331 = v837;
              }
            }
            else
            {
              **((_DWORD **)&v836 + 1) = v267;
              v333 = v332 + 1;
            }
            *((_QWORD *)&v836 + 1) = v333;
            if ((unint64_t)v333 >= v331)
            {
              v344 = (_DWORD *)v836;
              v345 = (uint64_t)((uint64_t)v333 - v836) >> 2;
              v346 = v345 + 1;
              if ((unint64_t)(v345 + 1) >> 62)
                goto LABEL_1048;
              v347 = v331 - v836;
              if (v347 >> 1 > v346)
                v346 = v347 >> 1;
              v338 = (unint64_t)v347 >= 0x7FFFFFFFFFFFFFFCLL;
              v348 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v338)
                v348 = v346;
              if (v348)
              {
                v348 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v348);
                v333 = (_DWORD *)*((_QWORD *)&v836 + 1);
                v344 = (_DWORD *)v836;
              }
              else
              {
                v349 = 0;
              }
              v350 = (_DWORD *)(v348 + 4 * v345);
              *v350 = v815;
              v343 = v350 + 1;
              while (v333 != v344)
              {
                v351 = *--v333;
                *--v350 = v351;
              }
              v331 = v348 + 4 * v349;
              *(_QWORD *)&v836 = v350;
              *((_QWORD *)&v836 + 1) = v343;
              v837 = v331;
              if (v344)
              {
                operator delete(v344);
                v331 = v837;
              }
            }
            else
            {
              *v333 = v815;
              v343 = v333 + 1;
            }
            *((_QWORD *)&v836 + 1) = v343;
            if ((unint64_t)v343 >= v331)
            {
              v353 = (_DWORD *)v836;
              v354 = (uint64_t)((uint64_t)v343 - v836) >> 2;
              v355 = v354 + 1;
              if ((unint64_t)(v354 + 1) >> 62)
LABEL_1048:
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v356 = v331 - v836;
              if (v356 >> 1 > v355)
                v355 = v356 >> 1;
              v338 = (unint64_t)v356 >= 0x7FFFFFFFFFFFFFFCLL;
              v357 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v338)
                v357 = v355;
              if (v357)
              {
                v357 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v357);
                v343 = (_DWORD *)*((_QWORD *)&v836 + 1);
                v353 = (_DWORD *)v836;
              }
              else
              {
                v358 = 0;
              }
              v359 = (_DWORD *)(v357 + 4 * v354);
              *v359 = v272;
              v352 = v359 + 1;
              while (v343 != v353)
              {
                v360 = *--v343;
                *--v359 = v360;
              }
              *(_QWORD *)&v836 = v359;
              *((_QWORD *)&v836 + 1) = v352;
              v837 = v357 + 4 * v358;
              if (v353)
                operator delete(v353);
            }
            else
            {
              *v343 = v272;
              v352 = v343 + 1;
            }
            *((_QWORD *)&v836 + 1) = v352;
            v361 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1))
            {
              v362 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
              do
                v363 = __ldaxr(v362);
              while (__stlxr(v363 - 1, v362));
              if (!v363)
              {
                ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                std::__shared_weak_count::__release_weak(v361);
              }
            }
            v304 = (std::__shared_weak_count *)*((_QWORD *)&v832 + 1);
          }
          goto LABEL_445;
        }
LABEL_381:
        v2 = a2;
LABEL_445:
        if (v304)
        {
          v364 = (unint64_t *)&v304->__shared_owners_;
          do
            v365 = __ldaxr(v364);
          while (__stlxr(v365 - 1, v364));
          if (!v365)
          {
            ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
            std::__shared_weak_count::__release_weak(v304);
          }
        }
        v366 = v834;
        if (v834)
        {
          v367 = (unint64_t *)&v834->__shared_owners_;
          do
            v368 = __ldaxr(v367);
          while (__stlxr(v368 - 1, v367));
          if (!v368)
          {
            ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
            std::__shared_weak_count::__release_weak(v366);
          }
        }
        v369 = (std::__shared_weak_count *)*((_QWORD *)&v835 + 1);
        if (*((_QWORD *)&v835 + 1))
        {
          v370 = (unint64_t *)(*((_QWORD *)&v835 + 1) + 8);
          do
            v371 = __ldaxr(v370);
          while (__stlxr(v371 - 1, v370));
          if (!v371)
          {
            ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
            std::__shared_weak_count::__release_weak(v369);
          }
        }
        v372 = (std::__shared_weak_count *)*((_QWORD *)&v857 + 1);
        if (*((_QWORD *)&v857 + 1))
        {
          v373 = (unint64_t *)(*((_QWORD *)&v857 + 1) + 8);
          do
            v374 = __ldaxr(v373);
          while (__stlxr(v374 - 1, v373));
          if (!v374)
          {
            ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
            std::__shared_weak_count::__release_weak(v372);
          }
        }
        v375 = (std::__shared_weak_count *)*((_QWORD *)&v838 + 1);
        if (*((_QWORD *)&v838 + 1))
        {
          v376 = (unint64_t *)(*((_QWORD *)&v838 + 1) + 8);
          do
            v377 = __ldaxr(v376);
          while (__stlxr(v377 - 1, v376));
          if (!v377)
          {
            ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
            std::__shared_weak_count::__release_weak(v375);
          }
        }
        v378 = (std::__shared_weak_count *)*((_QWORD *)&v842 + 1);
        if (*((_QWORD *)&v842 + 1))
        {
          v379 = (unint64_t *)(*((_QWORD *)&v842 + 1) + 8);
          do
            v380 = __ldaxr(v379);
          while (__stlxr(v380 - 1, v379));
          if (!v380)
          {
            ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
            std::__shared_weak_count::__release_weak(v378);
          }
        }
LABEL_475:
        v381 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1))
        {
          v382 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
          do
            v383 = __ldaxr(v382);
          while (__stlxr(v383 - 1, v382));
          if (!v383)
          {
            ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
            std::__shared_weak_count::__release_weak(v381);
          }
        }
        if (!--v252)
        {
          v385 = (int *)*((_QWORD *)&v836 + 1);
          v384 = (int *)v836;
          goto LABEL_483;
        }
      }
    }
    v385 = 0;
    v384 = 0;
LABEL_483:
    v386 = 126 - 2 * __clz(v385 - v384);
    if (v385 == v384)
      v387 = 0;
    else
      v387 = v386;
    std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v384, v385, v387, 1);
    v388 = (std::__shared_weak_count *)*((_QWORD *)v2 + 3);
    *(_QWORD *)&v838 = *((_QWORD *)v2 + 2);
    *((_QWORD *)&v838 + 1) = v388;
    if (v388)
    {
      v389 = (unint64_t *)&v388->__shared_owners_;
      do
        v390 = __ldxr(v389);
      while (__stxr(v390 + 1, v389));
    }
    v857 = 0uLL;
    v391 = (Espresso *)Espresso::sequential_builder::sequential_builder((uint64_t)&__p, (uint64_t *)&v838, 0, (uint64_t *)&v857);
    if (v388)
    {
      v393 = (unint64_t *)&v388->__shared_owners_;
      do
        v394 = __ldaxr(v393);
      while (__stlxr(v394 - 1, v393));
      if (!v394)
      {
        ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
        std::__shared_weak_count::__release_weak(v388);
      }
    }
    v396 = (int *)*((_QWORD *)&v836 + 1);
    v395 = (int *)v836;
    if ((_QWORD)v836 != *((_QWORD *)&v836 + 1))
    {
      v2 = a2;
      do
      {
        v397 = *v395;
        Espresso::espresso_os_log_subsystem(v391, v392);
        v398 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v398, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v397;
          _os_log_impl(&dword_190DAF000, v398, OS_LOG_TYPE_INFO, "[Convolution fuse bias and activation] Removing layer: %d\n", (uint8_t *)&buf, 8u);
        }

        v391 = (Espresso *)Espresso::net::remove_layer(a2, v397);
        ++v395;
      }
      while (v395 != v396);
    }
    buf = 0u;
    v846 = 0u;
    *(_DWORD *)v847 = 1065353216;
    Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&__p, (__int128 **)v2, 0, (uint64_t)&buf);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
    recompile_fs2(v2);
    std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)&buf, v2);
    v399 = buf;
    buf = 0uLL;
    v400 = (std::__shared_weak_count *)*((_QWORD *)&v839 + 1);
    v839 = v399;
    if (v400)
    {
      v401 = (unint64_t *)&v400->__shared_owners_;
      do
        v402 = __ldaxr(v401);
      while (__stlxr(v402 - 1, v401));
      if (!v402)
      {
        ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
        std::__shared_weak_count::__release_weak(v400);
      }
    }
    v403 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v404 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v405 = __ldaxr(v404);
      while (__stlxr(v405 - 1, v404));
      if (!v405)
      {
        ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
        std::__shared_weak_count::__release_weak(v403);
      }
    }
    v406 = (int *)v836;
    *((_QWORD *)&v836 + 1) = v836;
    v407 = (uint64_t)(*((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4)) >> 4;
    v408 = v407 - 1;
    if (v407 == 1)
    {
      v520 = (int *)v836;
    }
    else
    {
      v797 = (uint64_t)v2 + 136;
      v801 = (uint64_t)v2 + 96;
      do
      {
        v409 = *(_OWORD *)(*((_QWORD *)v2 + 4) + 16 * v408);
        v842 = v409;
        if (*((_QWORD *)&v409 + 1))
        {
          v410 = (unint64_t *)(*((_QWORD *)&v409 + 1) + 8);
          do
            v411 = __ldxr(v410);
          while (__stxr(v411 + 1, v410));
        }
        v412 = v409;
        v413 = *(const void **)(v409 + 64);
        if (v413)
        {
          if (v414)
          {
            v415 = *(_QWORD *)(v412 + 72);
            *(_QWORD *)&v835 = v414;
            *((_QWORD *)&v835 + 1) = v415;
            if (v415)
            {
              v416 = (unint64_t *)(v415 + 8);
              do
                v417 = __ldxr(v416);
              while (__stxr(v417 + 1, v416));
            }
            v418 = v839;
            v419 = (uint64_t **)(v839 + 16);
            LODWORD(buf) = v408;
            LODWORD(v813) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v839 + 16), v408, &buf)[5];
            v420 = (int)v813;
            LODWORD(v811) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v419, (int)v813, &v813)[5];
            v421 = (int)v811;
            v422 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v419, (int)v811, &v811);
            v423 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v418 + 40), *(_DWORD *)v422[5], v422[5])[5]+ 1);
            v424 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v419, v421, &v811)[5];
            v425 = *((_QWORD *)a2 + 4);
            v426 = *(_QWORD *)(v425 + 16 * v420);
            v427 = *(const void **)(v426 + 64);
            if (v427
            {
              v429 = v428;
              v430 = *(std::__shared_weak_count **)(v426 + 72);
              v833 = (unint64_t)v428;
              v834 = v430;
              if (v430)
              {
                v431 = (unint64_t *)&v430->__shared_owners_;
                do
                  v432 = __ldxr(v431);
                while (__stxr(v432 + 1, v431));
                v425 = *((_QWORD *)a2 + 4);
              }
            }
            else
            {
              v429 = 0;
              v833 = 0;
              v834 = 0;
            }
            v433 = *(_QWORD *)(v425 + 16 * v421);
            v434 = *(const void **)(v433 + 64);
            if (v434
            {
              v436 = v435;
              v437 = *(_QWORD *)(v433 + 72);
              *(_QWORD *)&v832 = v435;
              *((_QWORD *)&v832 + 1) = v437;
              if (v437)
              {
                v438 = (unint64_t *)(v437 + 8);
                do
                  v439 = __ldxr(v438);
                while (__stxr(v439 + 1, v438));
                v425 = *((_QWORD *)a2 + 4);
              }
            }
            else
            {
              v436 = 0;
              v832 = 0uLL;
            }
            v440 = *(_QWORD *)(v425 + 16 * v423);
            v441 = *(const void **)(v440 + 64);
            if (v441
            {
              v443 = v442;
              v444 = *(std::__shared_weak_count **)(v440 + 72);
              v829 = (unsigned __int8 *)v442;
              v830 = v444;
              if (v444)
              {
                v445 = (unint64_t *)&v444->__shared_owners_;
                do
                  v446 = __ldxr(v445);
                while (__stxr(v446 + 1, v445));
                v425 = *((_QWORD *)a2 + 4);
              }
            }
            else
            {
              v443 = 0;
              v829 = 0;
              v830 = 0;
            }
            v447 = *(_QWORD *)(v425 + 16 * v424);
            v448 = *(const void **)(v447 + 64);
            if (v448)
            {
              if (v449)
              {
                v450 = *(std::__shared_weak_count **)(v447 + 72);
                v827 = v449;
                v828 = v450;
                if (v450)
                {
                  v451 = (unint64_t *)&v450->__shared_owners_;
                  do
                    v452 = __ldxr(v451);
                  while (__stxr(v452 + 1, v451));
                }
                if (v443 && v429 && v436)
                {
                  v453 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v423);
                  if (*(char *)(v453 + 39) < 0)
                  {
                    v454 = *(char **)(v453 + 16);
                    v455 = *(_QWORD *)(v453 + 24);
                  }
                  else
                  {
                    v454 = (char *)(v453 + 16);
                    v455 = *(unsigned __int8 *)(v453 + 39);
                  }
                  if (v455 >= 4)
                  {
                    v456 = (Espresso *)&v454[v455];
                    v457 = v454;
                    while (1)
                    {
                      v458 = (Espresso *)memchr(v457, 66, v455 - 3);
                      if (!v458)
                        goto LABEL_615;
                      if (*(_DWORD *)v458 == 1935763778)
                        break;
                      v457 = (char *)v458 + 1;
                      v455 = v456 - (Espresso *)v457;
                      if (v456 - (Espresso *)v457 < 4)
                        goto LABEL_615;
                    }
                    if (v458 != v456 && v458 - (Espresso *)v454 != -1)
                    {
                      Espresso::espresso_os_log_subsystem(v458, v459);
                      v460 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v460, OS_LOG_TYPE_INFO))
                      {
                        LODWORD(buf) = 134217984;
                        *(_QWORD *)((char *)&buf + 4) = v408;
                        _os_log_impl(&dword_190DAF000, v460, OS_LOG_TYPE_INFO, "[Convolution fuse bias only] Found pattern on layer: %lu\n", (uint8_t *)&buf, 0xCu);
                      }

                      v815 = v423;
                      *(_QWORD *)v817 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v801, v423, &v815)[3];
                      v461 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v797, *(unsigned __int8 **)v817, (__int128 **)v817);
                      Espresso::abstract_blob_container::shape((char *)&buf, *((_QWORD *)v461 + 5));
                      v462 = buf;
                      if (v849)
                      {
                        v850 = v849;
                        operator delete(v849);
                      }
                      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&buf, v462, 1, 1, 1);
                      v463 = buf;
                      v464 = *(void **)(buf + 16);
                      (*(void (**)(_QWORD))(**((_QWORD **)v443 + 43) + 32))(*((_QWORD *)v443 + 43));
                      v465 = *((_QWORD *)v443 + 43);
                      v466 = *(_QWORD *)(v465 + 160);
                      v467 = *(std::__shared_weak_count **)(v465 + 168);
                      if (v467)
                      {
                        v468 = (unint64_t *)&v467->__shared_owners_;
                        do
                          v469 = __ldxr(v468);
                        while (__stxr(v469 + 1, v468));
                        memcpy(v464, *(const void **)(v466 + 24), 4 * *(int *)(v463 + 8));
                        v470 = (unint64_t *)&v467->__shared_owners_;
                        do
                          v471 = __ldaxr(v470);
                        while (__stlxr(v471 - 1, v470));
                        if (!v471)
                        {
                          ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
                          std::__shared_weak_count::__release_weak(v467);
                        }
                      }
                      else
                      {
                        memcpy(v464, *(const void **)(v466 + 24), 4 * *(int *)(v463 + 8));
                      }
                      v472 = v835;
                      v826 = buf;
                      if (*((_QWORD *)&buf + 1))
                      {
                        v473 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
                        do
                          v474 = __ldxr(v473);
                        while (__stxr(v474 + 1, v473));
                      }
                      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v472 + 392))(v472, &v826);
                      v475 = (std::__shared_weak_count *)*((_QWORD *)&v826 + 1);
                      if (*((_QWORD *)&v826 + 1))
                      {
                        v476 = (unint64_t *)(*((_QWORD *)&v826 + 1) + 8);
                        do
                          v477 = __ldaxr(v476);
                        while (__stlxr(v477 - 1, v476));
                        if (!v477)
                        {
                          ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
                          std::__shared_weak_count::__release_weak(v475);
                        }
                      }
                      *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v835 + 384))(v835) + 32) = 1;
                      *(_QWORD *)v817 = v424;
                      v478 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v801, v424, v817)[3];
                      v815 = (int)v811;
                      v479 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v801, (int)v811, &v815);
                      std::string::operator=((std::string *)v479[3], v478);
                      v481 = (_DWORD *)*((_QWORD *)&v836 + 1);
                      v480 = v837;
                      if (*((_QWORD *)&v836 + 1) >= v837)
                      {
                        v483 = (_DWORD *)v836;
                        v484 = (uint64_t)(*((_QWORD *)&v836 + 1) - v836) >> 2;
                        v485 = v484 + 1;
                        if ((unint64_t)(v484 + 1) >> 62)
                          goto LABEL_1050;
                        v486 = v837 - v836;
                        if ((uint64_t)(v837 - v836) >> 1 > v485)
                          v485 = v486 >> 1;
                        v338 = (unint64_t)v486 >= 0x7FFFFFFFFFFFFFFCLL;
                        v487 = 0x3FFFFFFFFFFFFFFFLL;
                        if (!v338)
                          v487 = v485;
                        if (v487)
                        {
                          v487 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v487);
                          v481 = (_DWORD *)*((_QWORD *)&v836 + 1);
                          v483 = (_DWORD *)v836;
                        }
                        else
                        {
                          v488 = 0;
                        }
                        v489 = (_DWORD *)(v487 + 4 * v484);
                        *v489 = v423;
                        v482 = v489 + 1;
                        while (v481 != v483)
                        {
                          v490 = *--v481;
                          *--v489 = v490;
                        }
                        v480 = v487 + 4 * v488;
                        *(_QWORD *)&v836 = v489;
                        *((_QWORD *)&v836 + 1) = v482;
                        v837 = v480;
                        if (v483)
                        {
                          operator delete(v483);
                          v480 = v837;
                        }
                      }
                      else
                      {
                        **((_DWORD **)&v836 + 1) = v423;
                        v482 = v481 + 1;
                      }
                      *((_QWORD *)&v836 + 1) = v482;
                      if ((unint64_t)v482 >= v480)
                      {
                        v492 = (_DWORD *)v836;
                        v493 = (uint64_t)((uint64_t)v482 - v836) >> 2;
                        v494 = v493 + 1;
                        if ((unint64_t)(v493 + 1) >> 62)
LABEL_1050:
                          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                        v495 = v480 - v836;
                        if (v495 >> 1 > v494)
                          v494 = v495 >> 1;
                        v338 = (unint64_t)v495 >= 0x7FFFFFFFFFFFFFFCLL;
                        v496 = 0x3FFFFFFFFFFFFFFFLL;
                        if (!v338)
                          v496 = v494;
                        if (v496)
                        {
                          v496 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v496);
                          v482 = (_DWORD *)*((_QWORD *)&v836 + 1);
                          v492 = (_DWORD *)v836;
                        }
                        else
                        {
                          v497 = 0;
                        }
                        v498 = (_DWORD *)(v496 + 4 * v493);
                        *v498 = v424;
                        v491 = v498 + 1;
                        while (v482 != v492)
                        {
                          v499 = *--v482;
                          *--v498 = v499;
                        }
                        *(_QWORD *)&v836 = v498;
                        *((_QWORD *)&v836 + 1) = v491;
                        v837 = v496 + 4 * v497;
                        if (v492)
                          operator delete(v492);
                      }
                      else
                      {
                        *v482 = v424;
                        v491 = v482 + 1;
                      }
                      *((_QWORD *)&v836 + 1) = v491;
                      v500 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                      {
                        v501 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
                        do
                          v502 = __ldaxr(v501);
                        while (__stlxr(v502 - 1, v501));
                        if (!v502)
                        {
                          ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
                          std::__shared_weak_count::__release_weak(v500);
                        }
                      }
                      v450 = v828;
                    }
                  }
                }
LABEL_615:
                if (v450)
                {
                  v503 = (unint64_t *)&v450->__shared_owners_;
                  do
                    v504 = __ldaxr(v503);
                  while (__stlxr(v504 - 1, v503));
                  if (!v504)
                  {
                    ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
                    std::__shared_weak_count::__release_weak(v450);
                  }
                }
              }
            }
            v505 = v830;
            v2 = a2;
            if (v830)
            {
              v506 = (unint64_t *)&v830->__shared_owners_;
              do
                v507 = __ldaxr(v506);
              while (__stlxr(v507 - 1, v506));
              if (!v507)
              {
                ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
                std::__shared_weak_count::__release_weak(v505);
              }
            }
            v508 = (std::__shared_weak_count *)*((_QWORD *)&v832 + 1);
            if (*((_QWORD *)&v832 + 1))
            {
              v509 = (unint64_t *)(*((_QWORD *)&v832 + 1) + 8);
              do
                v510 = __ldaxr(v509);
              while (__stlxr(v510 - 1, v509));
              if (!v510)
              {
                ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
                std::__shared_weak_count::__release_weak(v508);
              }
            }
            v511 = v834;
            if (v834)
            {
              v512 = (unint64_t *)&v834->__shared_owners_;
              do
                v513 = __ldaxr(v512);
              while (__stlxr(v513 - 1, v512));
              if (!v513)
              {
                ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
                std::__shared_weak_count::__release_weak(v511);
              }
            }
            v514 = (std::__shared_weak_count *)*((_QWORD *)&v835 + 1);
            if (*((_QWORD *)&v835 + 1))
            {
              v515 = (unint64_t *)(*((_QWORD *)&v835 + 1) + 8);
              do
                v516 = __ldaxr(v515);
              while (__stlxr(v516 - 1, v515));
              if (!v516)
              {
                ((void (*)(std::__shared_weak_count *))v514->__on_zero_shared)(v514);
                std::__shared_weak_count::__release_weak(v514);
              }
            }
          }
        }
        v517 = (std::__shared_weak_count *)*((_QWORD *)&v842 + 1);
        if (*((_QWORD *)&v842 + 1))
        {
          v518 = (unint64_t *)(*((_QWORD *)&v842 + 1) + 8);
          do
            v519 = __ldaxr(v518);
          while (__stlxr(v519 - 1, v518));
          if (!v519)
          {
            ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
            std::__shared_weak_count::__release_weak(v517);
          }
        }
        --v408;
      }
      while (v408);
      v406 = (int *)*((_QWORD *)&v836 + 1);
      v520 = (int *)v836;
    }
    v521 = 126 - 2 * __clz(v406 - v520);
    if (v406 == v520)
      v522 = 0;
    else
      v522 = v521;
    std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v520, v406, v522, 1);
    v523 = (std::__shared_weak_count *)*((_QWORD *)v2 + 3);
    *(_QWORD *)&v835 = *((_QWORD *)v2 + 2);
    *((_QWORD *)&v835 + 1) = v523;
    if (v523)
    {
      v524 = (unint64_t *)&v523->__shared_owners_;
      do
        v525 = __ldxr(v524);
      while (__stxr(v525 + 1, v524));
    }
    v833 = 0;
    v834 = 0;
    v526 = (Espresso *)Espresso::sequential_builder::sequential_builder((uint64_t)&buf, (uint64_t *)&v835, 0, (uint64_t *)&v833);
    if (v523)
    {
      v528 = (unint64_t *)&v523->__shared_owners_;
      do
        v529 = __ldaxr(v528);
      while (__stlxr(v529 - 1, v528));
      if (!v529)
      {
        ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
        std::__shared_weak_count::__release_weak(v523);
      }
    }
    v531 = (int *)*((_QWORD *)&v836 + 1);
    v530 = (int *)v836;
    if ((_QWORD)v836 != *((_QWORD *)&v836 + 1))
    {
      v2 = a2;
      do
      {
        v532 = *v530;
        Espresso::espresso_os_log_subsystem(v526, v527);
        v533 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v533, OS_LOG_TYPE_INFO))
        {
          LODWORD(v842) = 67109120;
          DWORD1(v842) = v532;
          _os_log_impl(&dword_190DAF000, v533, OS_LOG_TYPE_INFO, "[Convolution fuse bias only] Removing layer: %d\n", (uint8_t *)&v842, 8u);
        }

        v526 = (Espresso *)Espresso::net::remove_layer(a2, v532);
        ++v530;
      }
      while (v530 != v531);
    }
    v842 = 0u;
    v843 = 0u;
    v844 = 1065353216;
    Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&buf, (__int128 **)v2, 0, (uint64_t)&v842);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
    recompile_fs2(v2);
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v856);
    v534 = v855;
    if (v855)
    {
      v535 = (unint64_t *)&v855->__shared_owners_;
      do
        v536 = __ldaxr(v535);
      while (__stlxr(v536 - 1, v535));
      if (!v536)
      {
        ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
        std::__shared_weak_count::__release_weak(v534);
      }
    }
    v537 = v854;
    if (v854)
    {
      v538 = (unint64_t *)&v854->__shared_owners_;
      do
        v539 = __ldaxr(v538);
      while (__stlxr(v539 - 1, v538));
      if (!v539)
      {
        ((void (*)(std::__shared_weak_count *))v537->__on_zero_shared)(v537);
        std::__shared_weak_count::__release_weak(v537);
      }
    }
    v540 = v853;
    if (v853)
    {
      v541 = (unint64_t *)&v853->__shared_owners_;
      do
        v542 = __ldaxr(v541);
      while (__stlxr(v542 - 1, v541));
      if (!v542)
      {
        ((void (*)(std::__shared_weak_count *))v540->__on_zero_shared)(v540);
        std::__shared_weak_count::__release_weak(v540);
      }
    }
    if (v852 < 0)
      operator delete(v851);
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v846, *((_QWORD **)&v846 + 1));
    v543 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v544 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v545 = __ldaxr(v544);
      while (__stlxr(v545 - 1, v544));
      if (!v545)
      {
        ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
        std::__shared_weak_count::__release_weak(v543);
      }
    }
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v868);
    v546 = v867;
    if (v867)
    {
      v547 = (unint64_t *)&v867->__shared_owners_;
      do
        v548 = __ldaxr(v547);
      while (__stlxr(v548 - 1, v547));
      if (!v548)
      {
        ((void (*)(std::__shared_weak_count *))v546->__on_zero_shared)(v546);
        std::__shared_weak_count::__release_weak(v546);
      }
    }
    v549 = v866;
    if (v866)
    {
      v550 = (unint64_t *)&v866->__shared_owners_;
      do
        v551 = __ldaxr(v550);
      while (__stlxr(v551 - 1, v550));
      if (!v551)
      {
        ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
        std::__shared_weak_count::__release_weak(v549);
      }
    }
    v552 = v865;
    if (v865)
    {
      v553 = (unint64_t *)&v865->__shared_owners_;
      do
        v554 = __ldaxr(v553);
      while (__stlxr(v554 - 1, v553));
      if (!v554)
      {
        ((void (*)(std::__shared_weak_count *))v552->__on_zero_shared)(v552);
        std::__shared_weak_count::__release_weak(v552);
      }
    }
    if (v864 < 0)
      operator delete(v863);
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v859, v860);
    v555 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v556 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v557 = __ldaxr(v556);
      while (__stlxr(v557 - 1, v556));
      if (!v557)
      {
        ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
        std::__shared_weak_count::__release_weak(v555);
      }
    }
    if ((_QWORD)v836)
    {
      *((_QWORD *)&v836 + 1) = v836;
      operator delete((void *)v836);
    }
    v558 = (std::__shared_weak_count *)*((_QWORD *)&v839 + 1);
    if (*((_QWORD *)&v839 + 1))
    {
      v559 = (unint64_t *)(*((_QWORD *)&v839 + 1) + 8);
      do
        v560 = __ldaxr(v559);
      while (__stlxr(v560 - 1, v559));
      if (!v560)
      {
        ((void (*)(std::__shared_weak_count *))v558->__on_zero_shared)(v558);
        std::__shared_weak_count::__release_weak(v558);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)&v839, v2);
    v842 = 0uLL;
    *(_QWORD *)&v843 = 0;
    v836 = 0uLL;
    v837 = 0;
    v561 = (uint64_t)(*((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4)) >> 4;
    v562 = v561 - 1;
    if (v561 != 1)
    {
      v792 = (uint64_t)v2 + 56;
      v794 = (uint64_t)v2 + 96;
      v563 = 1;
      while (1)
      {
        v564 = *(_OWORD *)(*((_QWORD *)v2 + 4) + 16 * v562);
        v838 = v564;
        if (*((_QWORD *)&v564 + 1))
        {
          v565 = (unint64_t *)(*((_QWORD *)&v564 + 1) + 8);
          do
            v566 = __ldxr(v565);
          while (__stxr(v566 + 1, v565));
        }
        v567 = v564;
        v568 = *(const void **)(v564 + 64);
        if (!v568)
          goto LABEL_854;
        if (!v569)
          goto LABEL_854;
        v570 = *(_QWORD *)(v567 + 72);
        *(_QWORD *)&v857 = v569;
        *((_QWORD *)&v857 + 1) = v570;
        if (v570)
        {
          v571 = (unint64_t *)(v570 + 8);
          do
            v572 = __ldxr(v571);
          while (__stxr(v572 + 1, v571));
        }
        v798 = v563;
        LODWORD(buf) = v562;
        v802 = v562;
        v573 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v839 + 16), v562, &buf);
        __p = 0uLL;
        v859 = 0;
        v574 = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v573[5], (uint64_t)v573[6], ((char *)v573[6] - (char *)v573[5]) >> 2);
        v576 = (_DWORD *)*((_QWORD *)&__p + 1);
        v577 = (_DWORD *)__p;
        if ((_QWORD)__p == *((_QWORD *)&__p + 1))
        {
          v2 = a2;
          goto LABEL_846;
        }
        v578 = 0;
        v579 = 0;
        v580 = 0;
        do
        {
          LODWORD(v832) = *v577;
          v581 = v832;
          v582 = *(_OWORD *)(*((_QWORD *)a2 + 4) + 16 * (int)v832);
          v835 = v582;
          if (*((_QWORD *)&v582 + 1))
          {
            v583 = (unint64_t *)(*((_QWORD *)&v582 + 1) + 8);
            do
              v584 = __ldxr(v583);
            while (__stxr(v584 + 1, v583));
          }
          v585 = v582;
          v586 = *(const void **)(v582 + 64);
          if (v586
          {
            v587 = *(std::__shared_weak_count **)(v585 + 72);
            v833 = (unint64_t)v574;
            v834 = v587;
            if (v587)
            {
              v588 = (unint64_t *)&v587->__shared_owners_;
              do
                v589 = __ldxr(v588);
              while (__stxr(v589 + 1, v588));
            }
            v590 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v839 + 16), v581, &v832);
            buf = 0uLL;
            *(_QWORD *)&v846 = 0;
            v574 = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&buf, v590[5], (uint64_t)v590[6], ((char *)v590[6] - (char *)v590[5]) >> 2);
            v591 = (int *)*((_QWORD *)&buf + 1);
            v592 = (int *)buf;
            if ((_QWORD)buf != *((_QWORD *)&buf + 1))
            {
              while (1)
              {
                v593 = (uint64_t *)(*((_QWORD *)a2 + 4) + 16 * *v592);
                v594 = *v593;
                v595 = (std::__shared_weak_count *)v593[1];
                if (v595)
                {
                  v596 = (unint64_t *)&v595->__shared_owners_;
                  do
                    v597 = __ldxr(v596);
                  while (__stxr(v597 + 1, v596));
                }
                v574 = *(void **)(v594 + 64);
                if (v574)
                {
                  if (v574)
                    break;
                }
                v602 = 0;
                if (v595)
                  goto LABEL_750;
LABEL_754:
                v579 += v602;
                if (++v592 == v591)
                {
                  v592 = (int *)buf;
                  goto LABEL_756;
                }
              }
              v598 = *(std::__shared_weak_count **)(v594 + 72);
              if (v598)
              {
                v599 = (unint64_t *)&v598->__shared_owners_;
                do
                  v600 = __ldxr(v599);
                while (__stxr(v600 + 1, v599));
                do
                  v601 = __ldaxr(v599);
                while (__stlxr(v601 - 1, v599));
                if (!v601)
                {
                  ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
                  std::__shared_weak_count::__release_weak(v598);
                }
              }
              v602 = 1;
              if (!v595)
                goto LABEL_754;
LABEL_750:
              v603 = (unint64_t *)&v595->__shared_owners_;
              do
                v604 = __ldaxr(v603);
              while (__stlxr(v604 - 1, v603));
              if (!v604)
              {
                ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
                std::__shared_weak_count::__release_weak(v595);
              }
              goto LABEL_754;
            }
LABEL_756:
            if (v592)
            {
              *((_QWORD *)&buf + 1) = v592;
              operator delete(v592);
            }
            ++v578;
            v585 = v835;
            v586 = *(const void **)(v835 + 64);
            if (!v586)
            {
LABEL_769:
              v609 = 0;
              goto LABEL_770;
            }
          }
          else
          {
            v833 = 0;
            v834 = 0;
            if (!v586)
              goto LABEL_769;
          }
          if (!v574)
            goto LABEL_769;
          v605 = *(std::__shared_weak_count **)(v585 + 72);
          if (v605)
          {
            v606 = (unint64_t *)&v605->__shared_owners_;
            do
              v607 = __ldxr(v606);
            while (__stxr(v607 + 1, v606));
            do
              v608 = __ldaxr(v606);
            while (__stlxr(v608 - 1, v606));
            if (!v608)
            {
              ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
              std::__shared_weak_count::__release_weak(v605);
            }
          }
          v609 = 1;
LABEL_770:
          v610 = v834;
          if (v834)
          {
            v611 = (unint64_t *)&v834->__shared_owners_;
            do
              v612 = __ldaxr(v611);
            while (__stlxr(v612 - 1, v611));
            if (!v612)
            {
              ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
              std::__shared_weak_count::__release_weak(v610);
            }
          }
          v613 = (std::__shared_weak_count *)*((_QWORD *)&v835 + 1);
          if (*((_QWORD *)&v835 + 1))
          {
            v614 = (unint64_t *)(*((_QWORD *)&v835 + 1) + 8);
            do
              v615 = __ldaxr(v614);
            while (__stlxr(v615 - 1, v614));
            if (!v615)
            {
              ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
              std::__shared_weak_count::__release_weak(v613);
            }
          }
          v580 += v609;
          ++v577;
        }
        while (v577 != v576);
        if (v578 != 3 || v579 != 3)
        {
          v2 = a2;
LABEL_862:
          v563 = v798;
LABEL_863:
          v577 = (_DWORD *)__p;
          if ((_QWORD)__p)
            goto LABEL_847;
          goto LABEL_848;
        }
        v2 = a2;
        if (v580 != 1)
          goto LABEL_862;
        Espresso::espresso_os_log_subsystem((Espresso *)v574, v575);
        v616 = objc_claimAutoreleasedReturnValue();
        v563 = v798;
        if (os_log_type_enabled(v616, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 134217984;
          *(_QWORD *)((char *)&buf + 4) = v802;
          _os_log_impl(&dword_190DAF000, v616, OS_LOG_TYPE_INFO, "[Extra transpose operations] Found the pattern on layer: %lu\n", (uint8_t *)&buf, 0xCu);
        }

        LODWORD(buf) = v802;
        v617 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v839 + 16), v802, &buf);
        if (&__p != (__int128 *)(v617 + 5))
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, (char *)v617[5], (uint64_t)v617[6], ((char *)v617[6] - (char *)v617[5]) >> 2);
        v618 = (_DWORD *)*((_QWORD *)&__p + 1);
        v577 = (_DWORD *)__p;
        v2 = a2;
        if ((_QWORD)__p != *((_QWORD *)&__p + 1))
        {
          while (2)
          {
            LODWORD(v832) = *v577;
            v619 = v832;
            v620 = *(_OWORD *)(*((_QWORD *)v2 + 4) + 16 * (int)v832);
            buf = v620;
            if (*((_QWORD *)&v620 + 1))
            {
              v621 = (unint64_t *)(*((_QWORD *)&v620 + 1) + 8);
              do
                v622 = __ldxr(v621);
              while (__stxr(v622 + 1, v621));
            }
            v623 = v620;
            v624 = *(const void **)(v620 + 64);
            if (!v624)
              goto LABEL_838;
            if (!v625)
              goto LABEL_838;
            v626 = *(std::__shared_weak_count **)(v623 + 72);
            *(_QWORD *)&v835 = v625;
            *((_QWORD *)&v835 + 1) = v626;
            if (v626)
            {
              v627 = (unint64_t *)&v626->__shared_owners_;
              do
                v628 = __ldxr(v627);
              while (__stxr(v628 + 1, v627));
            }
            if ((v563 & 1) != 0)
            {
              v629 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v839 + 16), v619, &v832)[5];
              v833 = v629;
              v630 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v794, v629, &v833);
              std::string::operator=((std::string *)&v842, (const std::string *)v630[3]);
              if (!v626)
                goto LABEL_837;
LABEL_833:
              v652 = (unint64_t *)&v626->__shared_owners_;
              do
                v653 = __ldaxr(v652);
              while (__stlxr(v653 - 1, v652));
              if (!v653)
              {
                ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
                std::__shared_weak_count::__release_weak(v626);
              }
            }
            else
            {
              v631 = (uint64_t **)(v839 + 16);
              LODWORD(v831) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v839 + 16), v619, &v832)[5];
              v632 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v631, v831, &v831)[5];
              v833 = v632;
              v633 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v792, v632, &v833);
              std::string::operator=((std::string *)v633[3], (const std::string *)&v842);
              v634 = (_DWORD *)*((_QWORD *)&v836 + 1);
              v635 = v837;
              if (*((_QWORD *)&v836 + 1) >= v837)
              {
                v637 = (_DWORD *)v836;
                v638 = (uint64_t)(*((_QWORD *)&v836 + 1) - v836) >> 2;
                v639 = v638 + 1;
                if ((unint64_t)(v638 + 1) >> 62)
                  goto LABEL_1047;
                if ((uint64_t)(v837 - v836) >> 1 > v639)
                  v639 = (uint64_t)(v837 - v836) >> 1;
                if (v837 - (unint64_t)v836 >= 0x7FFFFFFFFFFFFFFCLL)
                  v640 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v640 = v639;
                if (v640)
                  v640 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v640);
                else
                  v641 = 0;
                v642 = (int *)(v640 + 4 * v638);
                *v642 = v619;
                v636 = v642 + 1;
                while (v634 != v637)
                {
                  v643 = *--v634;
                  *--v642 = v643;
                }
                v635 = v640 + 4 * v641;
                *(_QWORD *)&v836 = v642;
                v837 = v635;
                if (v637)
                  operator delete(v637);
              }
              else
              {
                **((_DWORD **)&v836 + 1) = v619;
                v636 = v634 + 1;
              }
              *((_QWORD *)&v836 + 1) = v636;
              if ((unint64_t)v636 >= v635)
              {
                v645 = (_DWORD *)v836;
                v646 = (uint64_t)((uint64_t)v636 - v836) >> 2;
                v647 = v646 + 1;
                if ((unint64_t)(v646 + 1) >> 62)
LABEL_1047:
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v635 - v836) >> 1 > v647)
                  v647 = (uint64_t)(v635 - v836) >> 1;
                if (v635 - (unint64_t)v836 >= 0x7FFFFFFFFFFFFFFCLL)
                  v648 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v648 = v647;
                if (v648)
                  v648 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v648);
                else
                  v649 = 0;
                v2 = a2;
                v650 = (_DWORD *)(v648 + 4 * v646);
                *v650 = v831;
                v644 = v650 + 1;
                while (v636 != v645)
                {
                  v651 = *--v636;
                  *--v650 = v651;
                }
                *(_QWORD *)&v836 = v650;
                v837 = v648 + 4 * v649;
                if (v645)
                  operator delete(v645);
              }
              else
              {
                *v636 = v831;
                v644 = v636 + 1;
                v2 = a2;
              }
              *((_QWORD *)&v836 + 1) = v644;
              if (v626)
                goto LABEL_833;
            }
LABEL_837:
            v563 = 0;
LABEL_838:
            v654 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
            if (*((_QWORD *)&buf + 1))
            {
              v655 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
              do
                v656 = __ldaxr(v655);
              while (__stlxr(v656 - 1, v655));
              if (!v656)
              {
                ((void (*)(std::__shared_weak_count *))v654->__on_zero_shared)(v654);
                std::__shared_weak_count::__release_weak(v654);
              }
            }
            if (++v577 == v618)
              goto LABEL_863;
            continue;
          }
        }
LABEL_846:
        if (v577)
        {
LABEL_847:
          *((_QWORD *)&__p + 1) = v577;
          operator delete(v577);
        }
LABEL_848:
        v657 = (std::__shared_weak_count *)*((_QWORD *)&v857 + 1);
        if (*((_QWORD *)&v857 + 1))
        {
          v658 = (unint64_t *)(*((_QWORD *)&v857 + 1) + 8);
          v562 = v802;
          do
            v659 = __ldaxr(v658);
          while (__stlxr(v659 - 1, v658));
          if (!v659)
          {
            ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
            std::__shared_weak_count::__release_weak(v657);
          }
        }
        else
        {
          v562 = v802;
        }
LABEL_854:
        v660 = (std::__shared_weak_count *)*((_QWORD *)&v838 + 1);
        if (*((_QWORD *)&v838 + 1))
        {
          v661 = (unint64_t *)(*((_QWORD *)&v838 + 1) + 8);
          do
            v662 = __ldaxr(v661);
          while (__stlxr(v662 - 1, v661));
          if (!v662)
          {
            ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
            std::__shared_weak_count::__release_weak(v660);
          }
        }
        if (!--v562)
        {
          v663 = (int *)*((_QWORD *)&v836 + 1);
          v664 = (int *)v836;
          goto LABEL_866;
        }
      }
    }
    v663 = 0;
    v664 = 0;
LABEL_866:
    v665 = 126 - 2 * __clz(v663 - v664);
    if (v663 == v664)
      v666 = 0;
    else
      v666 = v665;
    std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v664, v663, v666, 1);
    v667 = (std::__shared_weak_count *)*((_QWORD *)v2 + 3);
    *(_QWORD *)&v838 = *((_QWORD *)v2 + 2);
    *((_QWORD *)&v838 + 1) = v667;
    if (v667)
    {
      v668 = (unint64_t *)&v667->__shared_owners_;
      do
        v669 = __ldxr(v668);
      while (__stxr(v669 + 1, v668));
    }
    v857 = 0uLL;
    v670 = (Espresso *)Espresso::sequential_builder::sequential_builder((uint64_t)&__p, (uint64_t *)&v838, 0, (uint64_t *)&v857);
    if (v667)
    {
      v672 = (unint64_t *)&v667->__shared_owners_;
      do
        v673 = __ldaxr(v672);
      while (__stlxr(v673 - 1, v672));
      if (!v673)
      {
        ((void (*)(std::__shared_weak_count *))v667->__on_zero_shared)(v667);
        std::__shared_weak_count::__release_weak(v667);
      }
    }
    v674 = (int *)*((_QWORD *)&v836 + 1);
    if ((_QWORD)v836 != *((_QWORD *)&v836 + 1))
    {
      v675 = (int *)v836;
      v2 = a2;
      do
      {
        v676 = *v675;
        Espresso::espresso_os_log_subsystem(v670, v671);
        v677 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v677, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v676;
          _os_log_impl(&dword_190DAF000, v677, OS_LOG_TYPE_INFO, "[Extra transpose operations] Removing layer: %d\n", (uint8_t *)&buf, 8u);
        }

        v670 = (Espresso *)Espresso::net::remove_layer(a2, v676);
        ++v675;
      }
      while (v675 != v674);
    }
    buf = 0u;
    v846 = 0u;
    *(_DWORD *)v847 = 1065353216;
    Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&__p, (__int128 **)v2, 0, (uint64_t)&buf);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
    recompile_fs2(v2);
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v868);
    v678 = v867;
    if (v867)
    {
      v679 = (unint64_t *)&v867->__shared_owners_;
      do
        v680 = __ldaxr(v679);
      while (__stlxr(v680 - 1, v679));
      if (!v680)
      {
        ((void (*)(std::__shared_weak_count *))v678->__on_zero_shared)(v678);
        std::__shared_weak_count::__release_weak(v678);
      }
    }
    v681 = v866;
    if (v866)
    {
      v682 = (unint64_t *)&v866->__shared_owners_;
      do
        v683 = __ldaxr(v682);
      while (__stlxr(v683 - 1, v682));
      if (!v683)
      {
        ((void (*)(std::__shared_weak_count *))v681->__on_zero_shared)(v681);
        std::__shared_weak_count::__release_weak(v681);
      }
    }
    v684 = v865;
    if (v865)
    {
      v685 = (unint64_t *)&v865->__shared_owners_;
      do
        v686 = __ldaxr(v685);
      while (__stlxr(v686 - 1, v685));
      if (!v686)
      {
        ((void (*)(std::__shared_weak_count *))v684->__on_zero_shared)(v684);
        std::__shared_weak_count::__release_weak(v684);
      }
    }
    if (v864 < 0)
      operator delete(v863);
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v859, v860);
    v687 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v688 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v689 = __ldaxr(v688);
      while (__stlxr(v689 - 1, v688));
      if (!v689)
      {
        ((void (*)(std::__shared_weak_count *))v687->__on_zero_shared)(v687);
        std::__shared_weak_count::__release_weak(v687);
      }
    }
    if ((_QWORD)v836)
      operator delete((void *)v836);
    if (SBYTE7(v843) < 0)
      operator delete((void *)v842);
    v690 = (std::__shared_weak_count *)*((_QWORD *)&v839 + 1);
    if (*((_QWORD *)&v839 + 1))
    {
      v691 = (unint64_t *)(*((_QWORD *)&v839 + 1) + 8);
      do
        v692 = __ldaxr(v691);
      while (__stlxr(v692 - 1, v691));
      if (!v692)
      {
        ((void (*)(std::__shared_weak_count *))v690->__on_zero_shared)(v690);
        std::__shared_weak_count::__release_weak(v690);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)&v836, v2);
    v842 = 0uLL;
    *(_QWORD *)&v843 = 0;
    v693 = (uint64_t)(*((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4)) >> 4;
    v694 = v693 - 1;
    if (v693 != 1)
    {
      v695 = (uint64_t)v2 + 96;
      while (1)
      {
        v696 = *(_OWORD *)(*((_QWORD *)v2 + 4) + 16 * v694);
        __p = v696;
        if (*((_QWORD *)&v696 + 1))
        {
          v697 = (unint64_t *)(*((_QWORD *)&v696 + 1) + 8);
          do
            v698 = __ldxr(v697);
          while (__stxr(v698 + 1, v697));
        }
        v699 = v696;
        v700 = *(const void **)(v696 + 64);
        if (v700)
        {
          if (v701)
            break;
        }
LABEL_990:
        v755 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v756 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v757 = __ldaxr(v756);
          while (__stlxr(v757 - 1, v756));
          if (!v757)
          {
            ((void (*)(std::__shared_weak_count *))v755->__on_zero_shared)(v755);
            std::__shared_weak_count::__release_weak(v755);
          }
        }
        if (!--v694)
        {
          v758 = (int *)*((_QWORD *)&v842 + 1);
          v759 = (int *)v842;
          goto LABEL_998;
        }
      }
      v702 = v701;
      v703 = *(_QWORD *)(v699 + 72);
      *(_QWORD *)&buf = v701;
      *((_QWORD *)&buf + 1) = v703;
      if (v703)
      {
        v704 = (unint64_t *)(v703 + 8);
        do
          v705 = __ldxr(v704);
        while (__stxr(v705 + 1, v704));
      }
      v706 = v836;
      LODWORD(v839) = v694;
      v707 = v695;
      LODWORD(v833) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v836 + 16), v694, &v839)[5];
      v708 = v833;
      v709 = *((_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v706 + 40), v833, &v833)[5]+ 1);
      v710 = *((_QWORD *)a2 + 4);
      v711 = *(_QWORD *)(v710 + 16 * v708);
      v712 = *(const void **)(v711 + 64);
      if (v712
      {
        v714 = v713;
        v715 = *(_QWORD *)(v711 + 72);
        *(_QWORD *)&v839 = v713;
        *((_QWORD *)&v839 + 1) = v715;
        if (v715)
        {
          v716 = (unint64_t *)(v715 + 8);
          do
            v717 = __ldxr(v716);
          while (__stxr(v717 + 1, v716));
          v710 = *((_QWORD *)a2 + 4);
        }
      }
      else
      {
        v714 = 0;
        v839 = 0uLL;
      }
      v718 = *(_QWORD *)(v710 + 16 * v709);
      v719 = *(const void **)(v718 + 64);
      if (v719
      {
        v721 = *(std::__shared_weak_count **)(v718 + 72);
        *(_QWORD *)&v838 = v720;
        *((_QWORD *)&v838 + 1) = v721;
        if (v721)
        {
          v722 = (unint64_t *)&v721->__shared_owners_;
          v695 = v707;
          do
            v723 = __ldxr(v722);
          while (__stxr(v723 + 1, v722));
          goto LABEL_938;
        }
      }
      else
      {
        v721 = 0;
        v838 = 0uLL;
      }
      v695 = v707;
LABEL_938:
      if (!*(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v702 + 320))(v702))
      {
        v724 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v714 + 320))(v714);
        if (*(_DWORD *)v724 == 102)
        {
          Espresso::espresso_os_log_subsystem(v724, v725);
          v726 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v726, OS_LOG_TYPE_INFO))
          {
            LODWORD(v857) = 134217984;
            *(_QWORD *)((char *)&v857 + 4) = v694;
            _os_log_impl(&dword_190DAF000, v726, OS_LOG_TYPE_INFO, "[Layernormalization extra elementwise] Found the pattern on layer: %lu\n", (uint8_t *)&v857, 0xCu);
          }

          *(_QWORD *)&v857 = v708;
          v727 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v695, v708, &v857)[3];
          *(_QWORD *)&v835 = (int)v694;
          v728 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v695, (int)v694, &v835);
          std::string::operator=((std::string *)v728[3], v727);
          *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v702 + 320))(v702) = 1;
          v729 = (_DWORD *)*((_QWORD *)&v842 + 1);
          v730 = v843;
          if (*((_QWORD *)&v842 + 1) >= (unint64_t)v843)
          {
            v732 = (_DWORD *)v842;
            v733 = (uint64_t)(*((_QWORD *)&v842 + 1) - v842) >> 2;
            v734 = v733 + 1;
            if ((unint64_t)(v733 + 1) >> 62)
              goto LABEL_1049;
            if ((uint64_t)(v843 - v842) >> 1 > v734)
              v734 = (uint64_t)(v843 - v842) >> 1;
            if ((_QWORD)v843 - (_QWORD)v842 >= 0x7FFFFFFFFFFFFFFCuLL)
              v735 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v735 = v734;
            if (v735)
              v735 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v735);
            else
              v736 = 0;
            v737 = (_DWORD *)(v735 + 4 * v733);
            *v737 = v708;
            v731 = v737 + 1;
            while (v729 != v732)
            {
              v738 = *--v729;
              *--v737 = v738;
            }
            v730 = v735 + 4 * v736;
            *(_QWORD *)&v842 = v737;
            *(_QWORD *)&v843 = v730;
            if (v732)
              operator delete(v732);
          }
          else
          {
            **((_DWORD **)&v842 + 1) = v708;
            v731 = v729 + 1;
          }
          *((_QWORD *)&v842 + 1) = v731;
          if ((unint64_t)v731 >= v730)
          {
            v740 = (_DWORD *)v842;
            v741 = (uint64_t)((uint64_t)v731 - v842) >> 2;
            v742 = v741 + 1;
            if ((unint64_t)(v741 + 1) >> 62)
LABEL_1049:
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v730 - v842) >> 1 > v742)
              v742 = (uint64_t)(v730 - v842) >> 1;
            if (v730 - (unint64_t)v842 >= 0x7FFFFFFFFFFFFFFCLL)
              v743 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v743 = v742;
            if (v743)
              v743 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v743);
            else
              v744 = 0;
            v745 = (_DWORD *)(v743 + 4 * v741);
            *v745 = v709;
            v739 = v745 + 1;
            while (v731 != v740)
            {
              v746 = *--v731;
              *--v745 = v746;
            }
            *(_QWORD *)&v842 = v745;
            *(_QWORD *)&v843 = v743 + 4 * v744;
            if (v740)
              operator delete(v740);
          }
          else
          {
            *v731 = v709;
            v739 = v731 + 1;
          }
          *((_QWORD *)&v842 + 1) = v739;
          v695 = v707;
        }
      }
      v2 = a2;
      if (v721)
      {
        v747 = (unint64_t *)&v721->__shared_owners_;
        do
          v748 = __ldaxr(v747);
        while (__stlxr(v748 - 1, v747));
        if (!v748)
        {
          ((void (*)(std::__shared_weak_count *))v721->__on_zero_shared)(v721);
          std::__shared_weak_count::__release_weak(v721);
        }
      }
      v749 = (std::__shared_weak_count *)*((_QWORD *)&v839 + 1);
      if (*((_QWORD *)&v839 + 1))
      {
        v750 = (unint64_t *)(*((_QWORD *)&v839 + 1) + 8);
        do
          v751 = __ldaxr(v750);
        while (__stlxr(v751 - 1, v750));
        if (!v751)
        {
          ((void (*)(std::__shared_weak_count *))v749->__on_zero_shared)(v749);
          std::__shared_weak_count::__release_weak(v749);
        }
      }
      v752 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v753 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v754 = __ldaxr(v753);
        while (__stlxr(v754 - 1, v753));
        if (!v754)
        {
          ((void (*)(std::__shared_weak_count *))v752->__on_zero_shared)(v752);
          std::__shared_weak_count::__release_weak(v752);
        }
      }
      goto LABEL_990;
    }
    v758 = 0;
    v759 = 0;
LABEL_998:
    v760 = 126 - 2 * __clz(v758 - v759);
    if (v758 == v759)
      v761 = 0;
    else
      v761 = v760;
    std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v759, v758, v761, 1);
    v762 = (std::__shared_weak_count *)*((_QWORD *)v2 + 3);
    *(_QWORD *)&v839 = *((_QWORD *)v2 + 2);
    *((_QWORD *)&v839 + 1) = v762;
    if (v762)
    {
      v763 = (unint64_t *)&v762->__shared_owners_;
      do
        v764 = __ldxr(v763);
      while (__stxr(v764 + 1, v763));
    }
    v838 = 0uLL;
    v765 = (Espresso *)Espresso::sequential_builder::sequential_builder((uint64_t)&__p, (uint64_t *)&v839, 0, (uint64_t *)&v838);
    if (v762)
    {
      v767 = (unint64_t *)&v762->__shared_owners_;
      do
        v768 = __ldaxr(v767);
      while (__stlxr(v768 - 1, v767));
      if (!v768)
      {
        ((void (*)(std::__shared_weak_count *))v762->__on_zero_shared)(v762);
        std::__shared_weak_count::__release_weak(v762);
      }
    }
    v769 = (int *)*((_QWORD *)&v842 + 1);
    if ((_QWORD)v842 != *((_QWORD *)&v842 + 1))
    {
      v770 = (int *)v842;
      v2 = a2;
      do
      {
        v771 = *v770;
        Espresso::espresso_os_log_subsystem(v765, v766);
        v772 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v772, OS_LOG_TYPE_INFO))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v771;
          _os_log_impl(&dword_190DAF000, v772, OS_LOG_TYPE_INFO, "[Layernormalization extra elementwise] Removing layer: %d\n", (uint8_t *)&buf, 8u);
        }

        v765 = (Espresso *)Espresso::net::remove_layer(a2, v771);
        ++v770;
      }
      while (v770 != v769);
    }
    buf = 0u;
    v846 = 0u;
    *(_DWORD *)v847 = 1065353216;
    Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)&__p, (__int128 **)v2, 0, (uint64_t)&buf);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
    recompile_fs2(v2);
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v868);
    v773 = v867;
    if (v867)
    {
      v774 = (unint64_t *)&v867->__shared_owners_;
      do
        v775 = __ldaxr(v774);
      while (__stlxr(v775 - 1, v774));
      if (!v775)
      {
        ((void (*)(std::__shared_weak_count *))v773->__on_zero_shared)(v773);
        std::__shared_weak_count::__release_weak(v773);
      }
    }
    v776 = v866;
    if (v866)
    {
      v777 = (unint64_t *)&v866->__shared_owners_;
      do
        v778 = __ldaxr(v777);
      while (__stlxr(v778 - 1, v777));
      if (!v778)
      {
        ((void (*)(std::__shared_weak_count *))v776->__on_zero_shared)(v776);
        std::__shared_weak_count::__release_weak(v776);
      }
    }
    v779 = v865;
    if (v865)
    {
      v780 = (unint64_t *)&v865->__shared_owners_;
      do
        v781 = __ldaxr(v780);
      while (__stlxr(v781 - 1, v780));
      if (!v781)
      {
        ((void (*)(std::__shared_weak_count *))v779->__on_zero_shared)(v779);
        std::__shared_weak_count::__release_weak(v779);
      }
    }
    if (v864 < 0)
      operator delete(v863);
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v859, v860);
    v783 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v784 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v785 = __ldaxr(v784);
      while (__stlxr(v785 - 1, v784));
      if (!v785)
      {
        ((void (*)(std::__shared_weak_count *))v783->__on_zero_shared)(v783);
        std::__shared_weak_count::__release_weak(v783);
      }
    }
    if ((_QWORD)v842)
      operator delete((void *)v842);
    v786 = (std::__shared_weak_count *)*((_QWORD *)&v836 + 1);
    if (*((_QWORD *)&v836 + 1))
    {
      v787 = (unint64_t *)(*((_QWORD *)&v836 + 1) + 8);
      do
        v788 = __ldaxr(v787);
      while (__stlxr(v788 - 1, v787));
      if (!v788)
      {
        ((void (*)(std::__shared_weak_count *))v786->__on_zero_shared)(v786);
        std::__shared_weak_count::__release_weak(v786);
      }
    }
    Espresso::pass_fastspeech::replace_sequence_with_instance_norm(v2, v782);
  }
  *(_BYTE *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (v805 < 0)
    operator delete(v804);
}

void sub_191716FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  char a64;
  void *__p;
  uint64_t a67;
  char a72;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x320]);
  if (__p)
  {
    a67 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(a1);
}

void Espresso::pass_fastspeech::replace_sequence_with_instance_norm(Espresso::pass_fastspeech *this, Espresso::net *a2)
{
  Espresso::pass_fastspeech *v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t **v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t **v23;
  char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  const void *v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  const void *v42;
  void *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  const void *v49;
  void *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  const void *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  const void *v62;
  void *v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  const void *v70;
  void *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  const void *v77;
  void *v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  const void *v85;
  char *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  Espresso *v92;
  Espresso *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  std::__shared_weak_count *v96;
  unint64_t v97;
  NSObject *v98;
  char *v99;
  int v100;
  char *v101;
  __n128 v102;
  int v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __n128 v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  const void *v116;
  unint64_t *v117;
  unint64_t v118;
  const void *v119;
  uint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  const void *v125;
  unint64_t *v126;
  unint64_t v127;
  const void *v128;
  __int128 *v129;
  __int128 v130;
  int v131;
  __int128 *v132;
  __int128 v133;
  const void **v134;
  size_t v135;
  _BYTE *v136;
  const void *v137;
  _QWORD *v138;
  uint64_t v139;
  __int128 v140;
  Espresso::net *v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  __int128 *v149;
  const char *v150;
  NSObject *v151;
  std::__shared_weak_count *v152;
  char *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  void *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  void *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  void *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  __int128 v231;
  __int128 v232;
  _BYTE *v233;
  _QWORD *v234;
  _BYTE *v235;
  uint64_t *v236;
  uint64_t *v237;
  __int128 *v238;
  std::string **v239;
  __int128 *v240;
  std::string **v241;
  uint64_t v242;
  __int128 *v243;
  char *v244;
  uint64_t v245;
  size_t v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  Espresso::pass_fastspeech *v253;
  __int128 v254;
  __int128 v255;
  int v256;
  std::string *v257;
  std::string *v258;
  std::string *v259;
  std::string *v260;
  std::string *v261;
  std::string *v262;
  void *v263[2];
  char v264;
  void *v265[2];
  char v266;
  const void *v267;
  std::__shared_weak_count *v268;
  void *v269;
  std::__shared_weak_count *v270;
  uint64_t v271[2];
  uint64_t v272[2];
  std::string v273;
  std::string v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  Espresso *v278;
  std::__shared_weak_count *v279;
  void *v280;
  std::__shared_weak_count *v281;
  void *v282;
  std::__shared_weak_count *v283;
  void *v284;
  std::__shared_weak_count *v285;
  void *v286;
  std::__shared_weak_count *v287;
  void *v288;
  std::__shared_weak_count *v289;
  void *v290;
  std::__shared_weak_count *v291;
  void *v292;
  std::__shared_weak_count *v293;
  void *v294;
  std::__shared_weak_count *v295;
  std::__shared_weak_count *v296;
  std::__shared_weak_count *v297;
  int v298;
  int v299;
  int v300;
  int v301;
  int v302;
  int v303;
  int v304;
  int v305;
  void *v306;
  std::__shared_weak_count *v307;
  __int128 v308;
  uint64_t v309;
  uint64_t **v310;
  std::__shared_weak_count *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 *v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  uint64_t v320;
  const void *v321;
  std::__shared_weak_count *v322;
  std::string **v323;
  std::string v324;
  uint64_t v325;
  std::string v326;
  uint64_t v327;
  _BYTE v328[24];
  _QWORD *v329;
  int v330;
  __int16 v331;
  _BYTE v332[10];
  uint64_t v333;
  _BYTE v334[10];
  __int16 v335;
  int v336;
  char v337;
  std::__shared_weak_count *v338;
  uint64_t v339;
  std::__shared_weak_count *v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  uint64_t v343;
  _QWORD v344[11];

  v2 = this;
  v344[8] = *MEMORY[0x1E0C80C00];
  std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>((Espresso::network_optimization_graph **)&v310, this);
  v4 = ((uint64_t)(*((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4)) >> 4) - 1;
  v309 = v4;
  if (v4)
  {
    v245 = (uint64_t)v2 + 136;
    v252 = (uint64_t)v2 + 96;
    v241 = &v262;
    v242 = (uint64_t)v2 + 56;
    v239 = &v259;
    v240 = (__int128 *)&v327;
    v235 = v334;
    v237 = &v341;
    v238 = (__int128 *)&v325;
    v236 = &v343;
    v233 = &v328[16];
    v234 = v344;
    *(_QWORD *)&v3 = 134217984;
    v232 = v3;
    *(_QWORD *)&v3 = 134220544;
    v231 = v3;
    v253 = v2;
    while (1)
    {
      v5 = *(_OWORD *)(*((_QWORD *)v2 + 4) + 16 * v4);
      v308 = v5;
      if (*((_QWORD *)&v5 + 1))
      {
        v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v8 = v5;
      v9 = *(const void **)(v5 + 64);
      if (!v9)
        goto LABEL_283;
      if (!v10)
        goto LABEL_283;
      v11 = v10;
      v12 = *(std::__shared_weak_count **)(v8 + 72);
      v306 = v10;
      v307 = v12;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      if (*(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v10 + 320))(v10) == 1
        && *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v11 + 320))(v11) + 8) == 1)
      {
        break;
      }
LABEL_278:
      if (v12)
      {
        v223 = (unint64_t *)&v12->__shared_owners_;
        do
          v224 = __ldaxr(v223);
        while (__stlxr(v224 - 1, v223));
        if (!v224)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
LABEL_283:
      v225 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
      if (*((_QWORD *)&v308 + 1))
      {
        v226 = (unint64_t *)(*((_QWORD *)&v308 + 1) + 8);
        do
          v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (!v227)
        {
          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
          std::__shared_weak_count::__release_weak(v225);
        }
      }
      v4 = v309 - 1;
      v309 = v4;
      if (!v4)
        goto LABEL_289;
    }
    v15 = v310;
    *(_DWORD *)v328 = v309;
    v16 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v310 + 2, v309, v328)[5];
    v305 = v16;
    v17 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v15 + 2, v16, &v305)[5];
    v304 = v17;
    v18 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v15 + 2, v17, &v304)[5];
    v303 = v18;
    v19 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v15 + 2, v18, &v303)[5];
    v302 = v19;
    v20 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v15 + 2, v19, &v302)[5];
    v301 = v20;
    v21 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v15 + 2, v20, &v301)[5];
    v300 = v21;
    v22 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v15 + 2, v21, &v300)[5];
    v299 = v22;
    v23 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v15 + 2, v22, &v299);
    v24 = (char *)v22;
    v298 = *(_DWORD *)v23[5];
    v25 = v298;
    v249 = v24;
    v251 = *((unsigned int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v15 + 5, (int)v24, &v299)[5]+ 1);
    v250 = *((unsigned int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v15 + 5, v25, &v298)[5]+ 1);
    v27 = *((_QWORD *)v253 + 4);
    v28 = *(_QWORD *)(v27 + 16 * v16);
    v29 = *(const void **)(v28 + 64);
    if (v29
    {
      v31 = *(std::__shared_weak_count **)(v28 + 72);
      v296 = v30;
      v297 = v31;
      v248 = v30;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        v27 = *((_QWORD *)v253 + 4);
      }
    }
    else
    {
      v248 = 0;
      v297 = 0;
      v296 = 0;
    }
    v34 = *(_QWORD *)(v27 + 16 * v17);
    v35 = *(const void **)(v34 + 64);
    if (v35
    {
      v37 = (uint64_t)v36;
      v38 = *(std::__shared_weak_count **)(v34 + 72);
      v294 = v36;
      v295 = v38;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
        v27 = *((_QWORD *)v253 + 4);
      }
    }
    else
    {
      v37 = 0;
      v295 = 0;
      v294 = 0;
    }
    v41 = *(_QWORD *)(v27 + 16 * v18);
    v42 = *(const void **)(v41 + 64);
    if (v42
    {
      v44 = v43;
      v45 = *(std::__shared_weak_count **)(v41 + 72);
      v292 = v43;
      v293 = v45;
      if (v45)
      {
        v46 = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
        v27 = *((_QWORD *)v253 + 4);
      }
    }
    else
    {
      v44 = 0;
      v293 = 0;
      v292 = 0;
    }
    v48 = *(_QWORD *)(v27 + 16 * v19);
    v49 = *(const void **)(v48 + 64);
    if (v49
    {
      v51 = v50;
      v52 = *(std::__shared_weak_count **)(v48 + 72);
      v290 = v50;
      v291 = v52;
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
        v27 = *((_QWORD *)v253 + 4);
      }
    }
    else
    {
      v51 = 0;
      v291 = 0;
      v290 = 0;
    }
    v55 = *(_QWORD *)(v27 + 16 * v20);
    v56 = *(const void **)(v55 + 64);
    if (v56
    {
      v58 = *(std::__shared_weak_count **)(v55 + 72);
      v288 = v57;
      v289 = v58;
      v246 = (size_t)v57;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
        v27 = *((_QWORD *)v253 + 4);
      }
    }
    else
    {
      v246 = 0;
      v289 = 0;
      v288 = 0;
    }
    v61 = *(_QWORD *)(v27 + 16 * v21);
    v62 = *(const void **)(v61 + 64);
    v247 = v37;
    if (v62
    {
      v64 = v63;
      v65 = *(std::__shared_weak_count **)(v61 + 72);
      v286 = v63;
      v287 = v65;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        v67 = v249;
        do
          v68 = __ldxr(v66);
        while (__stxr(v68 + 1, v66));
        v27 = *((_QWORD *)v253 + 4);
LABEL_56:
        v69 = *(_QWORD *)(v27 + 16 * (_QWORD)v67);
        v70 = *(const void **)(v69 + 64);
        if (v70
        {
          v72 = v71;
          v73 = *(std::__shared_weak_count **)(v69 + 72);
          v284 = v71;
          v285 = v73;
          if (v73)
          {
            v74 = (unint64_t *)&v73->__shared_owners_;
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
            v27 = *((_QWORD *)v253 + 4);
          }
        }
        else
        {
          v72 = 0;
          v285 = 0;
          v284 = 0;
        }
        v76 = *(_QWORD *)(v27 + 16 * v25);
        v77 = *(const void **)(v76 + 64);
        if (v77
        {
          v79 = v78;
          v80 = *(std::__shared_weak_count **)(v76 + 72);
          v282 = v78;
          v283 = v80;
          if (v80)
          {
            v81 = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldxr(v81);
            while (__stxr(v82 + 1, v81));
            v27 = *((_QWORD *)v253 + 4);
          }
        }
        else
        {
          v79 = 0;
          v283 = 0;
          v282 = 0;
        }
        v83 = (int)v251;
        v84 = *(_QWORD *)(v27 + 16 * (int)v251);
        v85 = *(const void **)(v84 + 64);
        if (v85
        {
          v87 = *(std::__shared_weak_count **)(v84 + 72);
          v280 = v86;
          v281 = v87;
          v249 = v86;
          if (v87)
          {
            v88 = (unint64_t *)&v87->__shared_owners_;
            do
              v89 = __ldxr(v88);
            while (__stxr(v89 + 1, v88));
            v27 = *((_QWORD *)v253 + 4);
          }
        }
        else
        {
          v249 = 0;
          v281 = 0;
          v280 = 0;
        }
        v90 = (int)v250;
        v91 = *(_QWORD *)(v27 + 16 * (int)v250);
        v92 = *(Espresso **)(v91 + 64);
        if (v92
        {
          v93 = v92;
          v94 = *(std::__shared_weak_count **)(v91 + 72);
          v278 = v92;
          v279 = v94;
          if (v94)
          {
            v95 = (unint64_t *)&v94->__shared_owners_;
            v2 = v253;
            v96 = v248;
            do
              v97 = __ldxr(v95);
            while (__stxr(v97 + 1, v95));
LABEL_85:
            if (!v96 || !v247 || !v44 || !v51 || !v246 || !v64 || !v72 || !v79 || !v249 || !v93)
            {
LABEL_227:
              if (v94)
              {
                v193 = (unint64_t *)&v94->__shared_owners_;
                do
                  v194 = __ldaxr(v193);
                while (__stlxr(v194 - 1, v193));
                if (!v194)
                {
                  v195 = v94;
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v195);
                }
              }
              v196 = v281;
              if (v281)
              {
                v197 = (unint64_t *)&v281->__shared_owners_;
                do
                  v198 = __ldaxr(v197);
                while (__stlxr(v198 - 1, v197));
                if (!v198)
                {
                  ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                  std::__shared_weak_count::__release_weak(v196);
                }
              }
              v199 = v283;
              if (v283)
              {
                v200 = (unint64_t *)&v283->__shared_owners_;
                do
                  v201 = __ldaxr(v200);
                while (__stlxr(v201 - 1, v200));
                if (!v201)
                {
                  ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                  std::__shared_weak_count::__release_weak(v199);
                }
              }
              v202 = v285;
              if (v285)
              {
                v203 = (unint64_t *)&v285->__shared_owners_;
                do
                  v204 = __ldaxr(v203);
                while (__stlxr(v204 - 1, v203));
                if (!v204)
                {
                  ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                  std::__shared_weak_count::__release_weak(v202);
                }
              }
              v205 = v287;
              if (v287)
              {
                v206 = (unint64_t *)&v287->__shared_owners_;
                do
                  v207 = __ldaxr(v206);
                while (__stlxr(v207 - 1, v206));
                if (!v207)
                {
                  ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                  std::__shared_weak_count::__release_weak(v205);
                }
              }
              v208 = v289;
              if (v289)
              {
                v209 = (unint64_t *)&v289->__shared_owners_;
                do
                  v210 = __ldaxr(v209);
                while (__stlxr(v210 - 1, v209));
                if (!v210)
                {
                  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                  std::__shared_weak_count::__release_weak(v208);
                }
              }
              v211 = v291;
              if (v291)
              {
                v212 = (unint64_t *)&v291->__shared_owners_;
                do
                  v213 = __ldaxr(v212);
                while (__stlxr(v213 - 1, v212));
                if (!v213)
                {
                  ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                  std::__shared_weak_count::__release_weak(v211);
                }
              }
              v214 = v293;
              if (v293)
              {
                v215 = (unint64_t *)&v293->__shared_owners_;
                do
                  v216 = __ldaxr(v215);
                while (__stlxr(v216 - 1, v215));
                if (!v216)
                {
                  ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                  std::__shared_weak_count::__release_weak(v214);
                }
              }
              v217 = v295;
              if (v295)
              {
                v218 = (unint64_t *)&v295->__shared_owners_;
                do
                  v219 = __ldaxr(v218);
                while (__stlxr(v219 - 1, v218));
                if (!v219)
                {
                  ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                  std::__shared_weak_count::__release_weak(v217);
                }
              }
              v220 = v297;
              if (v297)
              {
                v221 = (unint64_t *)&v297->__shared_owners_;
                do
                  v222 = __ldaxr(v221);
                while (__stlxr(v222 - 1, v221));
                if (!v222)
                {
                  ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                  std::__shared_weak_count::__release_weak(v220);
                }
              }
              v12 = v307;
              goto LABEL_278;
            }
            v248 = v94;
            Espresso::espresso_os_log_subsystem(v92, v26);
            v98 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v328 = v232;
              *(_QWORD *)&v328[4] = v309;
              _os_log_impl(&dword_190DAF000, v98, OS_LOG_TYPE_INFO, "[Replace seq with instancenorm] Found the pattern on layer: %lu\n", v328, 0xCu);
            }

            v277 = 0;
            v276 = 0;
            v275 = 0x358637BD00000001;
            HIDWORD(v275) = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v51 + 320))(v51) + 8);
            v318 = v83;
            *(_QWORD *)&v254 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v252, v83, &v318)[3];
            v99 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v245, (unsigned __int8 *)v254, (__int128 **)&v254);
            Espresso::abstract_blob_container::shape(v328, *((_QWORD *)v99 + 5));
            v100 = *(_DWORD *)v328;
            if (*(_QWORD *)&v332[2])
            {
              v333 = *(_QWORD *)&v332[2];
              operator delete(*(void **)&v332[2]);
            }
            v318 = v90;
            *(_QWORD *)&v254 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v252, v90, &v318)[3];
            v101 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v245, (unsigned __int8 *)v254, (__int128 **)&v254);
            Espresso::abstract_blob_container::shape(v328, *((_QWORD *)v101 + 5));
            v103 = *(_DWORD *)v328;
            v104 = v249;
            if (*(_QWORD *)&v332[2])
            {
              v333 = *(_QWORD *)&v332[2];
              operator delete(*(void **)&v332[2]);
            }
            v243 = &v231;
            MEMORY[0x1E0C80A78](v102);
            v106 = (char *)&v231 - ((v105 + 15) & 0x7FFFFFFF0);
            MEMORY[0x1E0C80A78](v107);
            v109 = (char *)&v231 - ((v108 + 15) & 0x7FFFFFFF0);
            (*(void (**)(_QWORD))(**((_QWORD **)v93 + 43) + 32))(*((_QWORD *)v93 + 43));
            v110 = v103;
            v111 = *((_QWORD *)v93 + 43);
            v112 = *(_QWORD *)(v111 + 160);
            v113 = *(std::__shared_weak_count **)(v111 + 168);
            if (v113)
            {
              v114 = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldxr(v114);
              while (__stxr(v115 + 1, v114));
              v116 = *(const void **)(v112 + 24);
              v247 = 4 * v110;
              memcpy(v109, v116, 4 * v110);
              v117 = (unint64_t *)&v113->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            else
            {
              v119 = *(const void **)(v112 + 24);
              v247 = 4 * v110;
              memcpy(v109, v119, 4 * v110);
            }
            (*(void (**)(_QWORD))(**((_QWORD **)v104 + 43) + 32))(*((_QWORD *)v104 + 43));
            v120 = *((_QWORD *)v104 + 43);
            v121 = *(_QWORD *)(v120 + 160);
            v122 = *(std::__shared_weak_count **)(v120 + 168);
            if (v122)
            {
              v123 = (unint64_t *)&v122->__shared_owners_;
              do
                v124 = __ldxr(v123);
              while (__stxr(v124 + 1, v123));
              v125 = *(const void **)(v121 + 24);
              v246 = 4 * v100;
              memcpy(v106, v125, v246);
              v126 = (unint64_t *)&v122->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            else
            {
              v128 = *(const void **)(v121 + 24);
              v246 = 4 * v100;
              memcpy(v106, v128, v246);
            }
            *(_QWORD *)v328 = &v309;
            v129 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v242, (unint64_t *)&v309, (uint64_t)&std::piecewise_construct, (uint64_t **)v328)[3];
            if (*((char *)v129 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v274, *(const std::string::value_type **)v129, *((_QWORD *)v129 + 1));
            }
            else
            {
              v130 = *v129;
              v274.__r_.__value_.__r.__words[2] = *((_QWORD *)v129 + 2);
              *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v130;
            }
            v131 = v298;
            *(_QWORD *)v328 = v298;
            v132 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v252, v298, v328)[3];
            if (*((char *)v132 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v273, *(const std::string::value_type **)v132, *((_QWORD *)v132 + 1));
            }
            else
            {
              v133 = *v132;
              v273.__r_.__value_.__r.__words[2] = *((_QWORD *)v132 + 2);
              *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v133;
            }
            v244 = v109;
            *(_QWORD *)&v254 = v131;
            v134 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v252, v131, &v254)[3];
            if (*((char *)v134 + 23) >= 0)
              v135 = *((unsigned __int8 *)v134 + 23);
            else
              v135 = (size_t)v134[1];
            std::string::basic_string[abi:ne180100]((uint64_t)v328, v135 + 4);
            if (v328[23] >= 0)
              v136 = v328;
            else
              v136 = *(_BYTE **)v328;
            if (v135)
            {
              if (*((char *)v134 + 23) >= 0)
                v137 = v134;
              else
                v137 = *v134;
              memmove(v136, v137, v135);
            }
            strcpy(&v136[v135], "_old");
            v318 = v131;
            v138 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v252, v131, &v318);
            v249 = v106;
            v139 = v138[3];
            if (*(char *)(v139 + 23) < 0)
              operator delete(*(void **)v139);
            v140 = *(_OWORD *)v328;
            *(_QWORD *)(v139 + 16) = *(_QWORD *)&v328[16];
            *(_OWORD *)v139 = v140;
            Espresso::net::remove_layer(v2, v131);
            v141 = v2;
            v142 = v299;
            Espresso::net::remove_layer(v2, v299);
            Espresso::net::remove_layer(v2, v250);
            Espresso::net::remove_layer(v2, v251);
            v143 = v300;
            Espresso::net::remove_layer(v2, v300);
            v144 = v301;
            Espresso::net::remove_layer(v141, v301);
            v145 = v302;
            Espresso::net::remove_layer(v141, v302);
            v146 = v303;
            Espresso::net::remove_layer(v141, v303);
            v147 = v304;
            Espresso::net::remove_layer(v141, v304);
            v148 = v305;
            Espresso::net::remove_layer(v141, v305);
            v149 = Espresso::net::remove_layer(v141, v309);
            Espresso::espresso_os_log_subsystem((Espresso *)v149, v150);
            v151 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v151, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)v328 = v231;
              *(_QWORD *)&v328[4] = v309;
              *(_WORD *)&v328[12] = 1024;
              *(_DWORD *)&v328[14] = v148;
              *(_WORD *)&v328[18] = 1024;
              *(_DWORD *)&v328[20] = v147;
              LOWORD(v329) = 1024;
              *(_DWORD *)((char *)&v329 + 2) = v146;
              HIWORD(v329) = 1024;
              v330 = v145;
              v331 = 1024;
              *(_DWORD *)v332 = v144;
              *(_WORD *)&v332[4] = 1024;
              *(_DWORD *)&v332[6] = v143;
              LOWORD(v333) = 1024;
              *(_DWORD *)((char *)&v333 + 2) = v251;
              HIWORD(v333) = 1024;
              *(_DWORD *)v334 = v250;
              *(_WORD *)&v334[4] = 1024;
              *(_DWORD *)&v334[6] = v142;
              v335 = 1024;
              v336 = v131;
              _os_log_impl(&dword_190DAF000, v151, OS_LOG_TYPE_INFO, "[Replace seq with instancenorm] Removing layers:                         %lu %d %d %d %d %d %d %d %d %d %d\n", v328, 0x48u);
            }

            v2 = v253;
            v152 = (std::__shared_weak_count *)*((_QWORD *)v253 + 3);
            v272[0] = *((_QWORD *)v253 + 2);
            v272[1] = (uint64_t)v152;
            v153 = v249;
            if (v152)
            {
              v154 = (unint64_t *)&v152->__shared_owners_;
              do
                v155 = __ldxr(v154);
              while (__stxr(v155 + 1, v154));
            }
            v271[0] = 0;
            v271[1] = 0;
            Espresso::sequential_builder::sequential_builder((uint64_t)v328, v272, 0, v271);
            if (v152)
            {
              v156 = (unint64_t *)&v152->__shared_owners_;
              do
                v157 = __ldaxr(v156);
              while (__stlxr(v157 - 1, v156));
              if (!v157)
              {
                ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                std::__shared_weak_count::__release_weak(v152);
              }
            }
            std::string::basic_string[abi:ne180100]<0>(v265, "instancenorm_1d");
            std::string::basic_string[abi:ne180100]<0>(v263, "instancenorm_test");
            if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v326, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
            else
              v326 = v274;
            v260 = 0;
            v261 = 0;
            v262 = 0;
            *(_QWORD *)&v254 = &v260;
            BYTE8(v254) = 0;
            v260 = (std::string *)operator new(0x18uLL);
            v261 = v260;
            v262 = v260 + 1;
            v261 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v241, (__int128 *)&v326, v240, v260);
            if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v324, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
            else
              v324 = v273;
            v257 = 0;
            v258 = 0;
            v259 = 0;
            *(_QWORD *)&v254 = &v257;
            BYTE8(v254) = 0;
            v257 = (std::string *)operator new(0x18uLL);
            v258 = v257;
            v259 = v257 + 1;
            v258 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v239, (__int128 *)&v324, v238, v257);
            v317 = 0;
            v315 = 0;
            v316 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v315, (uint64_t)v260, (uint64_t)v261, 0xAAAAAAAAAAAAAAABLL * (((char *)v261 - (char *)v260) >> 3));
            v313 = 0;
            v312 = 0;
            v314 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v312, (uint64_t)v257, (uint64_t)v258, 0xAAAAAAAAAAAAAAABLL * (((char *)v258 - (char *)v257) >> 3));
            v158 = v339;
            LODWORD(v254) = (***(uint64_t (****)(_QWORD))(v341 + 8))(*(_QWORD *)(v341 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v158, (uint64_t)v237, (uint64_t)v265, (uint64_t)&v275, (int *)&v254);
            v321 = v267;
            v322 = v268;
            if (v268)
            {
              v159 = (unint64_t *)&v268->__shared_owners_;
              do
                v160 = __ldxr(v159);
              while (__stxr(v160 + 1, v159));
            }
            v254 = 0uLL;
            *(_QWORD *)&v255 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v254, (uint64_t)v315, v316, 0xAAAAAAAAAAAAAAABLL * ((v316 - (uint64_t)v315) >> 3));
            v319 = 0;
            v318 = 0;
            v320 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v318, v312, v313, 0xAAAAAAAAAAAAAAABLL * ((v313 - v312) >> 3));
            Espresso::sequential_builder::add_kernel_dbg((uint64_t)v328, (uint64_t *)&v321, (uint64_t)v265, (uint64_t)v263, (uint64_t)v235, (std::string **)&v254, (std::string **)&v318);
            v323 = (std::string **)&v318;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
            v323 = (std::string **)&v254;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v323);
            v161 = v322;
            if (v322)
            {
              v162 = (unint64_t *)&v322->__shared_owners_;
              do
                v163 = __ldaxr(v162);
              while (__stlxr(v163 - 1, v162));
              if (!v163)
              {
                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                std::__shared_weak_count::__release_weak(v161);
              }
            }
            if (*(_QWORD *)v328)
              Espresso::sequential_builder::add_shape_from_kernel((uint64_t *)v328, (uint64_t)v267, &v315, &v312);
            *(_QWORD *)&v254 = &v312;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
            *(_QWORD *)&v254 = &v315;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
            if (v267
            {
              v269 = v164;
              v270 = v268;
              if (!v268)
              {
LABEL_174:
                *(_QWORD *)&v254 = &v257;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
                if (SHIBYTE(v324.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v324.__r_.__value_.__l.__data_);
                *(_QWORD *)&v254 = &v260;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
                if (SHIBYTE(v326.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v326.__r_.__value_.__l.__data_);
                if (v264 < 0)
                  operator delete(v263[0]);
                if (v266 < 0)
                  operator delete(v265[0]);
                v170 = v269;
                v319 = 0;
                v318 = 0;
                std::string::basic_string[abi:ne180100]<0>(&v254, "wBeta");
                (*(void (**)(void *, unint64_t *, __int128 *, char *, uint64_t, _QWORD))(*(_QWORD *)v170 + 168))(v170, &v318, &v254, v244, v247, 0);
                if (SBYTE7(v255) < 0)
                  operator delete((void *)v254);
                v171 = v319;
                if (v319)
                {
                  v172 = (unint64_t *)&v319->__shared_owners_;
                  do
                    v173 = __ldaxr(v172);
                  while (__stlxr(v173 - 1, v172));
                  if (!v173)
                  {
                    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                    std::__shared_weak_count::__release_weak(v171);
                  }
                }
                v174 = v269;
                v319 = 0;
                v318 = 0;
                std::string::basic_string[abi:ne180100]<0>(&v254, "wGamma");
                (*(void (**)(void *, unint64_t *, __int128 *, char *, size_t, _QWORD))(*(_QWORD *)v174 + 168))(v174, &v318, &v254, v153, v246, 0);
                if (SBYTE7(v255) < 0)
                  operator delete((void *)v254);
                v175 = v319;
                if (v319)
                {
                  v176 = (unint64_t *)&v319->__shared_owners_;
                  do
                    v177 = __ldaxr(v176);
                  while (__stlxr(v177 - 1, v176));
                  if (!v177)
                  {
                    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                    std::__shared_weak_count::__release_weak(v175);
                  }
                }
                v254 = 0u;
                v255 = 0u;
                v256 = 1065353216;
                Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)v328, (__int128 **)v2, v309, (uint64_t)&v254);
                std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(0);
                recompile_fs2(v2);
                v178 = v270;
                if (v270)
                {
                  v179 = (unint64_t *)&v270->__shared_owners_;
                  do
                    v180 = __ldaxr(v179);
                  while (__stlxr(v180 - 1, v179));
                  if (!v180)
                  {
                    ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                    std::__shared_weak_count::__release_weak(v178);
                  }
                }
                std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)v234);
                v181 = v342;
                if (v342)
                {
                  v182 = (unint64_t *)&v342->__shared_owners_;
                  do
                    v183 = __ldaxr(v182);
                  while (__stlxr(v183 - 1, v182));
                  if (!v183)
                  {
                    ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                    std::__shared_weak_count::__release_weak(v181);
                  }
                }
                v184 = v340;
                if (v340)
                {
                  v185 = (unint64_t *)&v340->__shared_owners_;
                  do
                    v186 = __ldaxr(v185);
                  while (__stlxr(v186 - 1, v185));
                  if (!v186)
                  {
                    ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                    std::__shared_weak_count::__release_weak(v184);
                  }
                }
                v187 = v338;
                if (v338)
                {
                  v188 = (unint64_t *)&v338->__shared_owners_;
                  do
                    v189 = __ldaxr(v188);
                  while (__stlxr(v189 - 1, v188));
                  if (!v189)
                  {
                    ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                    std::__shared_weak_count::__release_weak(v187);
                  }
                }
                if (v337 < 0)
                  operator delete(*(void **)v334);
                std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v233, v329);
                v190 = *(std::__shared_weak_count **)&v328[8];
                v94 = v248;
                if (*(_QWORD *)&v328[8])
                {
                  v191 = (unint64_t *)(*(_QWORD *)&v328[8] + 8);
                  do
                    v192 = __ldaxr(v191);
                  while (__stlxr(v192 - 1, v191));
                  if (!v192)
                  {
                    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                    std::__shared_weak_count::__release_weak(v190);
                    v94 = v248;
                  }
                }
                if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v273.__r_.__value_.__l.__data_);
                  v94 = v248;
                }
                if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v274.__r_.__value_.__l.__data_);
                  v94 = v248;
                }
                goto LABEL_227;
              }
              v165 = (unint64_t *)&v268->__shared_owners_;
              do
                v166 = __ldxr(v165);
              while (__stxr(v166 + 1, v165));
            }
            else
            {
              v269 = 0;
              v270 = 0;
            }
            v167 = v268;
            if (v268)
            {
              v168 = (unint64_t *)&v268->__shared_owners_;
              do
                v169 = __ldaxr(v168);
              while (__stlxr(v169 - 1, v168));
              if (!v169)
              {
                ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                std::__shared_weak_count::__release_weak(v167);
              }
            }
            goto LABEL_174;
          }
        }
        else
        {
          v94 = 0;
          v93 = 0;
          v278 = 0;
          v279 = 0;
        }
        v2 = v253;
        v96 = v248;
        goto LABEL_85;
      }
    }
    else
    {
      v64 = 0;
      v287 = 0;
      v286 = 0;
    }
    v67 = v249;
    goto LABEL_56;
  }
LABEL_289:
  v228 = v311;
  if (v311)
  {
    v229 = (unint64_t *)&v311->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
      std::__shared_weak_count::__release_weak(v228);
    }
  }
}

void sub_191718AF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 848) = v1 + 280;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 848));
  if (*(char *)(v1 + 903) < 0)
    operator delete(*(void **)(v1 + 880));
  if (*(char *)(v1 + 327) < 0)
    operator delete(*(void **)(v1 + 304));
  if (*(char *)(v1 + 351) < 0)
    operator delete(*(void **)(v1 + 328));
  Espresso::sequential_builder::~sequential_builder((void **)(v1 + 912));
  if (*(char *)(v1 + 439) < 0)
    operator delete(*(void **)(v1 + 416));
  if (*(char *)(v1 + 471) < 0)
    operator delete(*(void **)(v1 + 448));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 496);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 512);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 528);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 544);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 560);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 576);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 592);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 608);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 624);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 640);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 688);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 704);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 736);
  _Unwind_Resume(a1);
}

Espresso::network_optimization_graph *std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,Espresso::net *,void>(Espresso::network_optimization_graph **a1, Espresso::net *a2)
{
  _QWORD *v4;
  Espresso::network_optimization_graph *result;

  v4 = operator new(0x58uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBD8C0;
  result = Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (Espresso::network_optimization_graph *)v4;
  return result;
}

void sub_191718DF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void recompile_fs2(Espresso::net *a1)
{
  __int128 *v2;
  __int128 *v3;
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  __int128 *v13[3];
  char *v14[3];
  char **i;
  char *v16[2];
  uint64_t v17[2];

  Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)a1);
  v17[0] = 0;
  v17[1] = 0;
  Espresso::net::setup_script((uint64_t)a1, v17, 0);
  v2 = (__int128 *)*((_QWORD *)a1 + 80);
  v3 = (__int128 *)*((_QWORD *)a1 + 81);
  v16[0] = 0;
  v16[1] = 0;
  for (i = v16; v2 != v3; v2 = (__int128 *)((char *)v2 + 24))
  {
    v13[0] = v2;
    v4 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 23, v2, v13);
    v13[0] = v2;
    v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&i, v2, v13);
    v6 = *(_OWORD *)(v4 + 56);
    v7 = *(_OWORD *)(v4 + 72);
    *((_QWORD *)v5 + 11) = *((_QWORD *)v4 + 11);
    *(_OWORD *)(v5 + 72) = v7;
    *(_OWORD *)(v5 + 56) = v6;
    if (v5 != v4)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v5 + 96, *((char **)v4 + 12), *((_QWORD *)v4 + 13), (uint64_t)(*((_QWORD *)v4 + 13) - *((_QWORD *)v4 + 12)) >> 2);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)a1 + 184, *((char **)a1 + 24));
  *((_QWORD *)a1 + 23) = (char *)a1 + 192;
  *((_QWORD *)a1 + 25) = 0;
  *((_QWORD *)a1 + 24) = 0;
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v11, *(_QWORD *)a1, *((std::__shared_weak_count **)a1 + 1));
  Espresso::compute_network_shape_starting_from_data_shapes(&v11, (uint64_t)&i, (uint64_t)v13);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *((_BYTE *)a1 + 180) = 0;
  Espresso::shape_network_recursive(a1, (Espresso::net *)v13, 0, 0);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v14, v14[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v13, (char *)v13[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&i, v16[0]);
}

void sub_191718F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
  Espresso::network_shape::~network_shape(&a12);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

int *std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int *v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int *v75;
  BOOL v77;
  uint64_t v78;
  int *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  int *v89;
  int v90;
  BOOL v91;
  int *v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int *v99;
  int *v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  int *v106;
  int v107;
  int v108;
  int v109;
  int v110;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *v9;
        if (*v8 > *v9)
        {
          *v9 = *v8;
          *v8 = v38;
        }
        return result;
      case 3uLL:
        v39 = v9[1];
        if (v39 <= *v8)
          v40 = *v8;
        else
          v40 = v9[1];
        if (v39 >= *v8)
          v39 = *v8;
        *v8 = v39;
        v9[1] = v40;
        v41 = *v8;
        if (*v8 <= *v9)
          v42 = *v9;
        else
          v42 = *v8;
        if (v41 >= *v9)
          v41 = *v9;
        *v8 = v41;
        v44 = *v9;
        v43 = v9[1];
        if (v42 <= v43)
          v44 = v9[1];
        if (v42 < v43)
          v43 = v42;
        *v9 = v44;
        v9[1] = v43;
        return result;
      case 4uLL:
        v46 = v9[1];
        v45 = v9[2];
        if (*v9 <= v45)
          v47 = v9[2];
        else
          v47 = *v9;
        if (*v9 < v45)
          v45 = *v9;
        v9[2] = v45;
        *v9 = v47;
        v48 = *v8;
        if (v46 <= *v8)
          v49 = *v8;
        else
          v49 = v46;
        if (v46 < v48)
          v48 = v46;
        *v8 = v48;
        v50 = *v9;
        if (*v9 <= v49)
          v51 = v49;
        else
          v51 = *v9;
        if (v50 >= v49)
          v50 = v49;
        *v9 = v51;
        v9[1] = v50;
        v52 = v9[2];
        if (v52 <= *v8)
          v53 = *v8;
        else
          v53 = v9[2];
        if (v52 >= *v8)
          v52 = *v8;
        *v8 = v52;
        v54 = v9[1];
        if (v54 <= v53)
          v55 = v53;
        else
          v55 = v9[1];
        if (v54 >= v53)
          v54 = v53;
        v9[1] = v55;
        v9[2] = v54;
        return result;
      case 5uLL:
        v56 = *v9;
        v57 = v9[1];
        if (*v9 <= v57)
          v58 = v9[1];
        else
          v58 = *v9;
        if (v56 >= v57)
          v56 = v9[1];
        *v9 = v58;
        v9[1] = v56;
        v59 = v9[3];
        if (v59 <= *v8)
          v60 = *v8;
        else
          v60 = v9[3];
        if (v59 >= *v8)
          v59 = *v8;
        *v8 = v59;
        v9[3] = v60;
        v61 = *v8;
        v62 = v9[2];
        if (*v8 <= v62)
          v63 = v9[2];
        else
          v63 = *v8;
        if (v61 >= v62)
          v61 = v9[2];
        *v8 = v61;
        v65 = v9[2];
        v64 = v9[3];
        v66 = v9[1];
        if (v63 <= v64)
          v65 = v9[3];
        if (v63 < v64)
          v64 = v63;
        v9[2] = v65;
        v9[3] = v64;
        v67 = *v8;
        if (v66 <= *v8)
          v68 = *v8;
        else
          v68 = v66;
        if (v66 < v67)
          v67 = v66;
        *v8 = v67;
        v69 = *v9;
        v71 = v9[2];
        v70 = v9[3];
        if (v70 <= *v9)
          v72 = *v9;
        else
          v72 = v9[3];
        if (v70 >= v69)
          v70 = *v9;
        if (v72 <= v71)
          v69 = v9[2];
        if (v72 < v71)
          v71 = v72;
        if (v70 <= v68)
          v73 = v68;
        else
          v73 = v70;
        if (v70 >= v68)
          v70 = v68;
        if (v73 <= v71)
          v68 = v71;
        *v9 = v69;
        v9[1] = v68;
        if (v73 >= v71)
          v74 = v71;
        else
          v74 = v73;
        v9[2] = v74;
        v9[3] = v70;
        return result;
      default:
        if (v10 <= 95)
        {
          v75 = v9 + 1;
          v77 = v9 == a2 || v75 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v77)
            {
              v78 = 4;
              v79 = v9;
              do
              {
                v81 = *v79;
                v80 = v79[1];
                v79 = v75;
                if (v80 > v81)
                {
                  v82 = v78;
                  while (1)
                  {
                    *(int *)((char *)v9 + v82) = v81;
                    v83 = v82 - 4;
                    if (v82 == 4)
                      break;
                    v81 = *(int *)((char *)v9 + v82 - 8);
                    v82 -= 4;
                    if (v80 <= v81)
                    {
                      v84 = (int *)((char *)v9 + v83);
                      goto LABEL_154;
                    }
                  }
                  v84 = v9;
LABEL_154:
                  *v84 = v80;
                }
                v75 = v79 + 1;
                v78 += 4;
              }
              while (v79 + 1 != a2);
            }
          }
          else if (!v77)
          {
            do
            {
              v110 = *v7;
              v109 = v7[1];
              v7 = v75;
              if (v109 > v110)
              {
                do
                {
                  *v75 = v110;
                  v110 = *(v75 - 2);
                  --v75;
                }
                while (v109 > v110);
                *v75 = v109;
              }
              v75 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v85 = (v11 - 2) >> 1;
            v86 = v85;
            do
            {
              v87 = v86;
              if (v85 >= v86)
              {
                v88 = (2 * v86) | 1;
                v89 = &v9[v88];
                if (2 * v87 + 2 >= (uint64_t)v11)
                {
                  v90 = *v89;
                }
                else
                {
                  v90 = v89[1];
                  v91 = *v89 <= v90;
                  if (*v89 < v90)
                    v90 = *v89;
                  if (!v91)
                  {
                    ++v89;
                    v88 = 2 * v87 + 2;
                  }
                }
                v92 = &v9[v87];
                v93 = *v92;
                if (v90 <= *v92)
                {
                  do
                  {
                    *v92 = v90;
                    v92 = v89;
                    if (v85 < v88)
                      break;
                    v94 = (2 * v88) | 1;
                    v89 = &v9[v94];
                    v88 = 2 * v88 + 2;
                    if (v88 >= (uint64_t)v11)
                    {
                      v90 = *v89;
                      v88 = v94;
                    }
                    else
                    {
                      v90 = *v89;
                      result = v89 + 1;
                      v95 = v89[1];
                      if (*v89 >= v95)
                        v90 = v89[1];
                      if (*v89 <= v95)
                        v88 = v94;
                      else
                        ++v89;
                    }
                  }
                  while (v90 <= v93);
                  *v92 = v93;
                }
              }
              v86 = v87 - 1;
            }
            while (v87);
            v96 = (unint64_t)v10 >> 2;
            do
            {
              v97 = 0;
              v98 = *v9;
              v99 = v9;
              do
              {
                v100 = &v99[v97 + 1];
                v101 = (2 * v97) | 1;
                v97 = 2 * v97 + 2;
                if (v97 >= v96)
                {
                  v102 = *v100;
                  v97 = v101;
                }
                else
                {
                  v102 = *v100;
                  v103 = v100[1];
                  if (*v100 >= v103)
                    v102 = v100[1];
                  if (*v100 <= v103)
                    v97 = v101;
                  else
                    ++v100;
                }
                *v99 = v102;
                v99 = v100;
              }
              while (v97 <= (uint64_t)((unint64_t)(v96 - 2) >> 1));
              if (v100 == --a2)
              {
                *v100 = v98;
              }
              else
              {
                *v100 = *a2;
                *a2 = v98;
                v104 = (char *)v100 - (char *)v9 + 4;
                if (v104 >= 5)
                {
                  v105 = (((unint64_t)v104 >> 2) - 2) >> 1;
                  v106 = &v9[v105];
                  v107 = *v106;
                  v108 = *v100;
                  if (*v106 > *v100)
                  {
                    do
                    {
                      *v100 = v107;
                      v100 = v106;
                      if (!v105)
                        break;
                      v105 = (v105 - 1) >> 1;
                      v106 = &v9[v105];
                      v107 = *v106;
                    }
                    while (*v106 > v108);
                    *v100 = v108;
                  }
                }
              }
              v91 = v96-- <= 2;
            }
            while (!v91);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x201)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v7, &v7[v11 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v7 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        v16 = v7;
        if ((a4 & 1) == 0)
        {
          v16 = v7;
          if (*(v7 - 1) <= v15)
          {
            if (v15 <= *v8)
            {
              v30 = v7 + 1;
              do
              {
                v9 = v30;
                if (v30 >= a2)
                  break;
                ++v30;
              }
              while (v15 <= *v9);
            }
            else
            {
              v9 = v7;
              do
              {
                v29 = v9[1];
                ++v9;
              }
              while (v15 <= v29);
            }
            v31 = a2;
            if (v9 < a2)
            {
              v31 = a2;
              do
                v32 = *--v31;
              while (v15 > v32);
            }
            if (v9 < v31)
            {
              v33 = *v9;
              v34 = *v31;
              do
              {
                *v9 = v34;
                *v31 = v33;
                do
                {
                  v35 = v9[1];
                  ++v9;
                  v33 = v35;
                }
                while (v15 <= v35);
                do
                {
                  v36 = *--v31;
                  v34 = v36;
                }
                while (v15 > v36);
              }
              while (v9 < v31);
            }
            v37 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v37;
            a4 = 0;
            *v37 = v15;
            continue;
          }
        }
        do
        {
          v17 = v16;
          v19 = v16[1];
          ++v16;
          v18 = v19;
        }
        while (v19 > v15);
        v20 = a2;
        if (v17 == v7)
        {
          v20 = a2;
          do
          {
            if (v16 >= v20)
              break;
            v22 = *--v20;
          }
          while (v22 <= v15);
        }
        else
        {
          do
            v21 = *--v20;
          while (v21 <= v15);
        }
        if (v16 < v20)
        {
          v23 = *v20;
          v24 = v16;
          v25 = v20;
          do
          {
            *v24 = v23;
            *v25 = v18;
            do
            {
              v17 = v24;
              v26 = v24[1];
              ++v24;
              v18 = v26;
            }
            while (v26 > v15);
            do
            {
              v27 = *--v25;
              v23 = v27;
            }
            while (v27 <= v15);
          }
          while (v24 < v25);
        }
        if (v17 != v7)
          *v7 = *v17;
        *v17 = v15;
        if (v16 < v20)
        {
LABEL_29:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,std::greater<int> &,int *,false>(v7, v17, a3, a4 & 1);
          a4 = 0;
          v9 = v17 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v7, v17);
        v9 = v17 + 1;
        result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(v17 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v17;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<int> &,int *>(_DWORD *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      return 1;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *(a2 - 1);
      else
        v22 = a1[1];
      if (v20 >= v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      a1[1] = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 >= *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
        v26 = a1[1];
      if (v24 < v25)
        v25 = v24;
      *a1 = v26;
      a1[1] = v25;
      return 1;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 < v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 < v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (v52 >= v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 >= v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 >= v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      return 1;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (v27 >= v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *(a2 - 1);
      else
        v32 = a1[3];
      if (v30 >= v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      a1[3] = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 >= v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = a1[2];
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
        v37 = a1[3];
      if (v35 < v36)
        v36 = v35;
      a1[2] = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 < v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 >= v41)
        v42 = *a1;
      if (v44 <= v43)
        v41 = a1[2];
      if (v44 < v43)
        v43 = v44;
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 >= v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 >= v43)
        v46 = v43;
      else
        v46 = v45;
      a1[2] = v46;
      a1[3] = v42;
      return 1;
    default:
      v6 = a1 + 2;
      v5 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v5)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 < v5)
        v5 = a1[1];
      if (v5 <= v8)
        v10 = *a1;
      else
        v10 = v5;
      if (v5 >= v8)
        v5 = *a1;
      *v6 = v5;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 >= v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v16 = *v6;
    if (*v12 > v16)
    {
      v17 = v14;
      while (1)
      {
        *(_DWORD *)((char *)a1 + v17) = v16;
        v18 = v17 - 4;
        if (v17 == 4)
          break;
        v16 = *(_DWORD *)((char *)a1 + v17 - 8);
        v17 -= 4;
        if (v15 <= v16)
        {
          v19 = (_DWORD *)((char *)a1 + v18);
          goto LABEL_27;
        }
      }
      v19 = a1;
LABEL_27:
      *v19 = v15;
      if (++v13 == 8)
        return v12 + 1 == a2;
    }
    v6 = v12;
    v14 += 4;
    if (++v12 == a2)
      return 1;
  }
}

void std::__shared_ptr_emplace<Espresso::pass_fastspeech>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_fastspeech>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_fastspeech>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::blob_storage_mmap::~blob_storage_mmap(Espresso::blob_storage_mmap *this)
{
  Espresso::blob_storage_mmap::~blob_storage_mmap(this);
  JUMPOUT(0x19401CD90);
}

{
  *(_QWORD *)this = &off_1E2D81658;
  Espresso::blob_storage_mmap::pin_unpin_memory((uint64_t)this, 0);
  if (*((_BYTE *)this + 32))
    munmap(*((void **)this + 9), *((_QWORD *)this + 10));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  std::unique_ptr<encrypted_file>::reset[abi:ne180100]((encrypted_file **)this + 5);
  std::__tree<int>::destroy(*((_QWORD **)this + 2));
}

BOOL Espresso::blob_storage_mmap::copy_blob_to(uint64_t **this, uint64_t *a2, void *a3, size_t a4)
{
  const void *v8;
  uint64_t **v9;
  size_t v10;
  uint64_t *v12;

  v12 = a2;
  v8 = (const void *)((uint64_t (*)(uint64_t **))(*this)[10])(this);
  if (v8)
  {
    v9 = std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(this + 1, (unint64_t)a2, &v12);
    if ((unint64_t)v9[7] >= a4)
      v10 = a4;
    else
      v10 = (size_t)v9[7];
    memcpy(a3, v8, v10);
  }
  return v8 != 0;
}

uint64_t Espresso::blob_storage_mmap::get_blob_data_offset(Espresso::blob_storage_mmap *this, unint64_t a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = (char *)this + 16;
  v3 = v4;
  if (!v4)
    return -1;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((_QWORD *)v5 + 4) <= a2)
    return *((_QWORD *)v5 + 6);
  else
    return -1;
}

void Espresso::blob_storage_mmap::get_file_path(Espresso::blob_storage_mmap *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

uint64_t Espresso::blob_storage_mmap::get_file_type(Espresso::blob_storage_mmap *this)
{
  return 1;
}

uint64_t Espresso::blob_storage_mmap::owns_file_storage_mmap_alloc(Espresso::blob_storage_mmap *this)
{
  return 1;
}

BOOL Espresso::blob_storage_mmap::check_aligned(Espresso::blob_storage_mmap *this)
{
  char *v1;
  char *v2;
  uint64_t v4;
  _BOOL8 result;
  char *v6;
  char *v7;
  BOOL v8;

  v1 = (char *)*((_QWORD *)this + 1);
  v2 = (char *)this + 16;
  if (v1 == (char *)this + 16)
    return 1;
  while (1)
  {
    v4 = *((_QWORD *)v1 + 4);
    result = ((*(uint64_t (**)(Espresso::blob_storage_mmap *, _QWORD))(*(_QWORD *)this + 80))(this, (int)v4) & 0x3F) == 0
          || (unint64_t)((v4 & 1) == 0);
    if (!result)
      break;
    v6 = (char *)*((_QWORD *)v1 + 1);
    if (v6)
    {
      do
      {
        v7 = v6;
        v6 = *(char **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        v7 = (char *)*((_QWORD *)v1 + 2);
        v8 = *(_QWORD *)v7 == (_QWORD)v1;
        v1 = v7;
      }
      while (!v8);
    }
    v1 = v7;
    if (v7 == v2)
      return 1;
  }
  return result;
}

uint64_t Espresso::blob_storage_mmap::pin_unpin_memory(uint64_t this, int a2)
{
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  const char *v5;
  std::string v6;
  __int128 v7;
  int64_t v8;

  if (a2)
  {
    if (!*(_BYTE *)(this + 88))
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Pinning memory is not supported on this platform.");
  }
  else if (*(_BYTE *)(this + 88))
  {
    v2 = this;
    this = munlock(*(const void **)(this + 72), *(_QWORD *)(this + 80));
    if ((_DWORD)this)
    {
      std::to_string(&v6, this);
      v3 = std::string::insert(&v6, 0, "Unable to unpin blob storage to system memory due to error = ");
      v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      v8 = v3->__r_.__value_.__r.__words[2];
      v7 = v4;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v6.__r_.__value_.__l.__data_);
      if (v8 >= 0)
        v5 = (const char *)&v7;
      else
        v5 = (const char *)v7;
      Espresso::throw_exception_selector<Espresso::generic_error>(v5);
    }
    *(_BYTE *)(v2 + 88) = 0;
  }
  return this;
}

void sub_191719C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

encrypted_file *std::unique_ptr<encrypted_file>::reset[abi:ne180100](encrypted_file **a1)
{
  encrypted_file *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    encrypted_file::~encrypted_file(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

void Espresso::blob_storage_mmap_v2::~blob_storage_mmap_v2(MIL::Blob::StorageReader **this)
{
  *this = (MIL::Blob::StorageReader *)&off_1E2D86038;
  std::unique_ptr<MIL::Blob::StorageReader>::reset[abi:ne180100](this + 1, 0);
}

{
  *this = (MIL::Blob::StorageReader *)&off_1E2D86038;
  std::unique_ptr<MIL::Blob::StorageReader>::reset[abi:ne180100](this + 1, 0);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::blob_storage_mmap_v2::copy_blob_to(Espresso::blob_storage_mmap_v2 *this, unint64_t a2, void *a3, size_t a4)
{
  const void *v6;

  v6 = (const void *)(*(uint64_t (**)(Espresso::blob_storage_mmap_v2 *))(*(_QWORD *)this + 80))(this);
  if (v6)
    memcpy(a3, v6, a4);
  return v6 != 0;
}

uint64_t Espresso::blob_storage_mmap_v2::get_blob_size(MIL::Blob::StorageReader **this)
{
  uint64_t v1;

  MIL::Blob::StorageReader::GetRawDataView(this[1]);
  return v1;
}

uint64_t Espresso::blob_storage_mmap_v2::get_blob_data_offset(MIL::Blob::StorageReader **this)
{
  return MIL::Blob::StorageReader::GetDataOffset(this[1]);
}

void Espresso::blob_storage_mmap_v2::get_file_path(MIL::Blob::StorageReader **this@<X0>, std::string *a2@<X8>)
{
  uint64_t Filename;
  __int128 v4;

  Filename = MIL::Blob::StorageReader::GetFilename(this[1]);
  if (*(char *)(Filename + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)Filename, *(_QWORD *)(Filename + 8));
  }
  else
  {
    v4 = *(_OWORD *)Filename;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(Filename + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

uint64_t Espresso::blob_storage_mmap_v2::get_file_type(Espresso::blob_storage_mmap_v2 *this)
{
  return 2;
}

uint64_t Espresso::blob_storage_mmap_v2::owns_file_storage_mmap_alloc(Espresso::blob_storage_mmap_v2 *this)
{
  return 1;
}

uint64_t Espresso::blob_storage_mmap_v2::has_blob_file_metadata(Espresso::blob_storage_mmap_v2 *this)
{
  return 1;
}

double Espresso::blob_storage_mmap_v2::get_blob_file_metadata@<D0>(Espresso::blob_storage_mmap_v2 *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v6;
  uint64_t v7;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 40))(&v6);
  *(_DWORD *)a3 = 2;
  result = *(double *)&v6;
  *(_OWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 24) = v7;
  *(_QWORD *)(a3 + 32) = a2;
  return result;
}

uint64_t Espresso::blob_storage_mmap_v2::mapped_blob(MIL::Blob::StorageReader **this)
{
  return MIL::Blob::StorageReader::GetRawDataView(this[1]);
}

uint64_t Espresso::blob_storage_mmap_v2::check_aligned(Espresso::blob_storage_mmap_v2 *this)
{
  return 1;
}

void Espresso::blob_storage_abstract::pin_unpin_memory(Espresso::blob_storage_abstract *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "pin_unpin_memory not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_191719F28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Blob::StorageReader *std::unique_ptr<MIL::Blob::StorageReader>::reset[abi:ne180100](MIL::Blob::StorageReader **a1, MIL::Blob::StorageReader *a2)
{
  MIL::Blob::StorageReader *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::StorageReader::~StorageReader(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

void Espresso::blob_storage_memory::~blob_storage_memory(Espresso::blob_storage_memory *this)
{
  *(_QWORD *)this = &off_1E2D84570;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E2D84570;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

BOOL Espresso::blob_storage_memory::copy_blob_to(Espresso::blob_storage_memory *this, unint64_t a2, void *__dst, size_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  const void *v7;
  size_t v8;

  if (Espresso::blob_storage_write_version == 1)
    v4 = (a2 - 1) >> 1;
  else
    v4 = a2;
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  v6 = (uint64_t)(v5[1] - *v5) >> 3;
  if (v6 > v4)
  {
    v7 = *(const void **)(*v5 + 8 * v4);
    v8 = *(_QWORD *)(v5[3] + 8 * v4);
    if (v8 >= a4)
      v8 = a4;
    memcpy(__dst, v7, v8);
  }
  return v6 > v4;
}

uint64_t Espresso::blob_storage_memory::get_blob_size(Espresso::blob_storage_memory *this, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;

  if (Espresso::blob_storage_write_version == 1)
    v2 = (a2 - 1) >> 1;
  else
    v2 = a2;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2 >= (uint64_t)(v3[1] - *v3) >> 3)
    return 0;
  else
    return *(_QWORD *)(v3[3] + 8 * v2);
}

uint64_t Espresso::blob_storage_memory::get_blob_data_offset(Espresso::blob_storage_memory *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (Espresso::blob_storage_write_version == 1)
    v2 = (a2 - 1) >> 1;
  else
    v2 = a2;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 72);
  if (v2 >= (*(_QWORD *)(*((_QWORD *)this + 1) + 80) - v3) >> 3)
    return -1;
  else
    return *(_QWORD *)(v3 + 8 * v2);
}

void Espresso::blob_storage_memory::get_file_path(Espresso::blob_storage_memory *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 1);
  if (*(char *)(v2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 120), *(_QWORD *)(v2 + 128));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 120);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 136);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void Espresso::blob_storage_abstract::get_file_type(Espresso::blob_storage_abstract *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "get_file_type not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_19171A13C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob_storage_abstract::owns_file_storage_mmap_alloc(Espresso::blob_storage_abstract *this)
{
  return 0;
}

BOOL Espresso::blob_storage_memory::has_blob_file_metadata(Espresso::blob_storage_memory *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (Espresso::blob_storage_write_version == 1)
    v2 = (a2 - 1) >> 1;
  else
    v2 = a2;
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 96);
  return v2 < (*(_QWORD *)(*((_QWORD *)this + 1) + 104) - v3) >> 3 && *(_QWORD *)(v3 + 8 * v2) != 0;
}

uint64_t Espresso::blob_storage_memory::get_blob_file_metadata@<X0>(Espresso::blob_storage_memory *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (Espresso::blob_storage_write_version == 1)
    v3 = (a2 - 1) >> 1;
  else
    v3 = a2;
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 96);
  if (v3 >= (*(_QWORD *)(*((_QWORD *)this + 1) + 104) - v4) >> 3)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Out of bound access to blob_file_metadatas.");
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (!v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("blob_file_metadata not available for given handle.");
  return Espresso::blob_file_metadata::blob_file_metadata(a3, v5);
}

uint64_t Espresso::blob_storage_memory::mapped_blob(Espresso::blob_storage_memory *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (Espresso::blob_storage_write_version == 1)
    v2 = (a2 - 1) >> 1;
  else
    v2 = a2;
  v3 = **((_QWORD **)this + 1);
  if (v2 >= (*(_QWORD *)(*((_QWORD *)this + 1) + 8) - v3) >> 3)
    return 0;
  else
    return *(_QWORD *)(v3 + 8 * v2);
}

uint64_t Espresso::blob_storage_memory::check_aligned(Espresso::blob_storage_memory *this)
{
  return 1;
}

void Espresso::blob_storage_abstract::get_file_path(Espresso::blob_storage_abstract *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "get_file_path not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_19171A284(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob_storage_abstract::has_blob_file_metadata(Espresso::blob_storage_abstract *this)
{
  return 0;
}

void Espresso::blob_storage_abstract::get_blob_file_metadata(Espresso::blob_storage_abstract *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "get_blob_file_metadata not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_19171A2DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob_storage_abstract::mapped_blob(Espresso::blob_storage_abstract *this)
{
  return 0;
}

uint64_t Espresso::blob_storage_abstract::check_aligned(Espresso::blob_storage_abstract *this)
{
  return 0;
}

BOOL Espresso::blob_file_metadata::equals(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 31);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 31);
  else
    v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a2 + 31);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 16);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 8);
  if (v7 >= 0)
    v9 = (unsigned __int8 *)(a2 + 8);
  else
    v9 = *(unsigned __int8 **)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(_QWORD *)(a1 + 16)))
      return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
    return 0;
  }
  if (*(_BYTE *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4)
        return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
    }
    return 0;
  }
  return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

_QWORD *Espresso::blob_storage_mmap_v2::blob_storage_mmap_v2(_QWORD *a1, uint64_t a2)
{
  MIL::Blob::StorageReader **v4;
  MIL::Blob::StorageReader *v5;
  std::string __p;

  *a1 = &off_1E2D86038;
  a1[1] = 0;
  v4 = (MIL::Blob::StorageReader **)(a1 + 1);
  v5 = (MIL::Blob::StorageReader *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  MEMORY[0x19401B434](v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::unique_ptr<MIL::Blob::StorageReader>::reset[abi:ne180100](v4, v5);
  return a1;
}

void sub_19171A478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MIL::Blob::StorageReader **v14;
  uint64_t v15;

  MEMORY[0x19401CD90](v15, 0x20C4093837F09);
  std::unique_ptr<MIL::Blob::StorageReader>::reset[abi:ne180100](v14, 0);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::io_error,char const*,char *>(const char *a1, const char *a2)
{
  Espresso::throw_exception_with_format<Espresso::io_error>("Error loading file %s: %s", a1, a2);
}

void Espresso::write_blob_storage_v1_info(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::vector<int>::size_type v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _DWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  char *v35;
  void *v36;
  char *v37;
  void *__src;
  void *v39;
  uint64_t v40;

  v7 = *a2;
  v6 = a2[1];
  __src = 0;
  v39 = 0;
  v40 = 0;
  v8 = v6 - v7;
  v9 = (v6 - v7) >> 2;
  if (v6 == v7)
  {
    v11 = 0;
  }
  else
  {
    std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100](&__src, (v6 - v7) >> 2);
    v10 = (char *)v39;
    bzero(v39, 4 * v8);
    v11 = &v10[4 * v8];
  }
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::vector<int>::resize((std::vector<int> *)(a1 + 32), v9);
  v12 = a3 + 4 * v8 + 8;
  v13 = a2[1];
  v14 = (char *)__src;
  v15 = v13 - *a2;
  if (v13 != *a2)
  {
    v16 = 0;
    v17 = 0;
    v18 = v15 >> 3;
    v19 = (unint64_t)(v15 >> 3) > 1;
    v20 = a2[3];
    if (!v19)
      v18 = 1;
    v21 = (_DWORD *)(*(_QWORD *)(a1 + 32) + 4);
    v22 = (char *)__src + 16;
    do
    {
      v23 = *((int *)a2 + 12);
      v24 = v12 % v23;
      v25 = v23 - v12 % v23;
      if (!v24)
        v25 = 0;
      *(v22 - 2) = v16;
      *(v22 - 1) = v25;
      *(v21 - 1) = -1;
      *v22 = v16 + 1;
      v26 = *(_QWORD *)(v20 + 8 * v17);
      v22[1] = v26;
      *v21 = v17;
      v21 += 2;
      v12 += v25 + v26;
      ++v17;
      v22 += 4;
      v16 += 2;
    }
    while (v18 != v17);
  }
  *(_QWORD *)a1 = v9;
  v27 = v11 - v14;
  v28 = (v11 - v14) >> 4;
  v29 = *(_QWORD *)(a1 + 24);
  v30 = *(char **)(a1 + 8);
  if (v28 > (v29 - (uint64_t)v30) >> 4)
  {
    if (v30)
    {
      *(_QWORD *)(a1 + 16) = v30;
      operator delete(v30);
      v29 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
    }
    if ((v27 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v31 = v29 >> 3;
    if (v29 >> 3 <= v28)
      v31 = (v11 - v14) >> 4;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    std::vector<loopkit_rt_dimension_t>::__vallocate[abi:ne180100]((_QWORD *)(a1 + 8), v32);
    v30 = *(char **)(a1 + 16);
    goto LABEL_26;
  }
  v33 = *(_BYTE **)(a1 + 16);
  v34 = (v33 - v30) >> 4;
  if (v34 >= v28)
  {
LABEL_26:
    if (v11 == v14)
      goto LABEL_29;
    v36 = v30;
    v37 = v14;
    goto LABEL_28;
  }
  v35 = &v14[16 * v34];
  if (v33 != v30)
  {
    memmove(*(void **)(a1 + 8), v14, v33 - v30);
    v30 = *(char **)(a1 + 16);
  }
  v27 = v11 - v35;
  if (v11 != v35)
  {
    v36 = v30;
    v37 = v35;
LABEL_28:
    memmove(v36, v37, v27);
  }
LABEL_29:
  *(_QWORD *)(a1 + 16) = &v30[v27];
  *(_QWORD *)(a1 + 56) = v12;
  if (v14)
    operator delete(v14);
}

void sub_19171A718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19171A914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_rpn_tracker_merge_convs::~pass_rpn_tracker_merge_convs(Espresso::pass_rpn_tracker_merge_convs *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_rpn_tracker_merge_convs::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_rpn_tracker_merge_convs::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  Espresso::net *v3;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const struct __class_type_info *v9;
  uint64_t v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  const struct __class_type_info *v18;
  std::string *v19;
  std::string::size_type v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  int v56;
  int v57;
  int v58;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  const void *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  const void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  int v79;
  unint64_t *v80;
  Espresso::net *v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  int v86;
  BOOL v89;
  char v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *v98;
  unint64_t *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t *v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  char *v123;
  uint64_t v124;
  size_t v125;
  std::string *p_str;
  const void *v127;
  uint64_t v128;
  uint64_t v129;
  std::string::size_type v130;
  __int128 v131;
  __int128 v132;
  uint64_t i;
  __int128 v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  BOOL v148;
  unint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t *v154;
  std::string::size_type v155;
  std::string::size_type v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  char *v160;
  _QWORD *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  std::string::size_type *v168;
  std::string::size_type v169;
  unint64_t *v170;
  unint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t j;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  void *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  char *v204;
  std::__shared_weak_count *v205;
  char *v206;
  int v207;
  __int128 v208;
  unint64_t v209;
  unint64_t *v210;
  __int128 v211;
  __int128 v212;
  __int128 __p;
  __int128 v214;
  void *v215[4];
  void *v216[2];
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t *v227;
  unint64_t *v228;
  unint64_t v229;
  void *v230;
  char *v231;
  unint64_t v232;
  void *v233[5];
  void *v234[5];
  std::string *v235;
  char v236;
  _BYTE v237[24];
  _BYTE *v238;
  std::string __str;
  std::string v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243[3];

  v3 = a1;
  v243[0] = *MEMORY[0x1E0C80C00];
  Espresso::net::get_producers_of_blobs(a1, (uint64_t)v234);
  memset(v215, 0, sizeof(v215));
  LODWORD(v216[0]) = 1065353216;
  Espresso::net::get_consumers_of_blobs(v3, v215, (uint64_t)v233);
  v199 = a2;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v215);
  v230 = 0;
  v231 = 0;
  v232 = 0;
  v226 = 0;
  v5 = *((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 5) == v5)
  {
    v46 = 0;
    v45 = 0;
  }
  else
  {
    v6 = 0;
    v7 = (uint64_t)v3 + 96;
    v8 = (uint64_t)v3 + 136;
    do
    {
      v10 = *(_QWORD *)(v5 + 16 * (_QWORD)v6);
      v11 = *(const void **)(v10 + 64);
      {
        v12 = *(std::__shared_weak_count **)(v10 + 72);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v215[0] = &v226;
        v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v3 + 56, (unint64_t *)&v226, (uint64_t)&std::piecewise_construct, (uint64_t **)v215);
        if (v16[4] - v16[3] == 24)
        {
          v215[0] = &v226;
          v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v7, (unint64_t *)&v226, (uint64_t)&std::piecewise_construct, (uint64_t **)v215);
          if (v17[4] - v17[3] == 24)
          {
            v215[0] = &v226;
            v18 = v9;
            v19 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v3 + 56, (unint64_t *)&v226, (uint64_t)&std::piecewise_construct, (uint64_t **)v215)[3];
            v215[0] = &v226;
            v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v7, (unint64_t *)&v226, (uint64_t)&std::piecewise_construct, (uint64_t **)v215)[3];
            v210 = (unint64_t *)v19;
            v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)v19, (__int128 **)&v210);
            Espresso::abstract_blob_container::shape((char *)v215, *((_QWORD *)v21 + 5));
            __str.__r_.__value_.__r.__words[0] = v20;
            v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)v20, (__int128 **)&__str);
            Espresso::abstract_blob_container::shape((char *)&v210, *((_QWORD *)v22 + 5));
            if (!Espresso::layer_shape::operator==((uint64_t)v215, (uint64_t)&v210) || HIDWORD(v215[2]) != HIDWORD(v211))
              goto LABEL_55;
            v201 = v7;
            v202 = v8;
            __str.__r_.__value_.__r.__words[0] = v20;
            v23 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v233, (unsigned __int8 *)v20, (__int128 **)&__str);
            v24 = (_QWORD *)*((_QWORD *)v23 + 5);
            v25 = (_QWORD *)*((_QWORD *)v23 + 6);
LABEL_16:
            if (v24 != v25)
            {
              *(_QWORD *)&v208 = 0;
              *(_QWORD *)&v208 = *v24;
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
              v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v3 + 56, (unint64_t *)&v208, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
              v28 = v26[3];
              v27 = v26[4];
              while (1)
              {
                if (v28 == v27)
                {
                  ++v24;
                  goto LABEL_16;
                }
                v29 = *(unsigned __int8 *)(v28 + 23);
                if ((v29 & 0x80u) == 0)
                  v30 = *(unsigned __int8 *)(v28 + 23);
                else
                  v30 = *(_QWORD *)(v28 + 8);
                v31 = *(unsigned __int8 *)(v20 + 23);
                v32 = (char)v31;
                if ((v31 & 0x80u) != 0)
                  v31 = *(_QWORD *)(v20 + 8);
                if (v30 == v31)
                {
                  if (v32 >= 0)
                    v33 = (unsigned __int8 *)v20;
                  else
                    v33 = *(unsigned __int8 **)v20;
                  if ((v29 & 0x80) != 0)
                  {
                    if (memcmp(*(const void **)v28, v33, *(_QWORD *)(v28 + 8)))
                      goto LABEL_36;
LABEL_35:
                    std::string::operator=((std::string *)v28, v19);
                    goto LABEL_36;
                  }
                  if (!*(_BYTE *)(v28 + 23))
                    goto LABEL_35;
                  v34 = 0;
                  while (*(unsigned __int8 *)(v28 + v34) == v33[v34])
                  {
                    if (v29 == ++v34)
                      goto LABEL_35;
                  }
                }
LABEL_36:
                v28 += 24;
              }
            }
            v35 = v231;
            if ((unint64_t)v231 >= v232)
            {
              v37 = (char *)v230;
              v38 = (v231 - (_BYTE *)v230) >> 3;
              v39 = v38 + 1;
              v8 = v202;
              if ((unint64_t)(v38 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v40 = v232 - (_QWORD)v230;
              if ((uint64_t)(v232 - (_QWORD)v230) >> 2 > v39)
                v39 = v40 >> 2;
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                v41 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
                v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v41);
              else
                v42 = 0;
              v43 = (char *)(v41 + 8 * v38);
              *(_QWORD *)v43 = v226;
              v36 = v43 + 8;
              while (v35 != v37)
              {
                v44 = *((_QWORD *)v35 - 1);
                v35 -= 8;
                *((_QWORD *)v43 - 1) = v44;
                v43 -= 8;
              }
              v230 = v43;
              v232 = v41 + 8 * v42;
              if (v37)
                operator delete(v37);
            }
            else
            {
              *(_QWORD *)v231 = v226;
              v36 = v35 + 8;
              v8 = v202;
            }
            v231 = v36;
            v7 = v201;
LABEL_55:
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
            v9 = v18;
            if (v216[1])
            {
              *(void **)&v217 = v216[1];
              operator delete(v216[1]);
            }
          }
        }
      }
      v6 = (unint64_t *)((char *)v226 + 1);
      v226 = v6;
      v5 = *((_QWORD *)v3 + 4);
    }
    while ((unint64_t)v6 < (*((_QWORD *)v3 + 5) - v5) >> 4);
    v46 = (char *)v230;
    v45 = v231;
  }
  v47 = (v45 - v46) >> 3;
  v48 = v46 - 8;
  while (v47)
  {
    v49 = v47 - 1;
    Espresso::net::remove_layer(v3, *(_QWORD *)&v48[8 * v47]);
    v47 = v49;
  }
  Espresso::net::get_producers_of_blobs(v3, (uint64_t)v215);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)v234, (uint64_t *)v215);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v215[2]);
  v50 = v215[0];
  v215[0] = 0;
  if (v50)
    operator delete(v50);
  v229 = 0;
  v51 = *((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 5) != v51)
  {
    v52 = 0;
    v53 = (uint64_t)v3 + 56;
    v198 = (uint64_t)v3 + 96;
    v200 = (uint64_t)v3 + 136;
    v197 = (uint64_t)v3 + 16;
    while (1)
    {
      v226 = 0;
      v227 = 0;
      v228 = 0;
      v225 = 0;
      v54 = *(_QWORD *)(v51 + 16 * v52);
      v55 = (uint64_t **)(v54 + 40);
      v56 = *(char *)(v54 + 63);
      if (v56 < 0)
      {
        if (*(_QWORD *)(v54 + 48) != 6)
          goto LABEL_78;
        v55 = (uint64_t **)*v55;
      }
      else if (v56 != 6)
      {
        goto LABEL_78;
      }
      v57 = *(_DWORD *)v55;
      v58 = *((unsigned __int16 *)v55 + 2);
      if (v57 == 1668181859 && v58 == 29793)
        break;
LABEL_78:
      v215[0] = &v226;
      std::vector<std::pair<int,std::shared_ptr<Espresso::generic_batchnorm_kernel>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v215);
      v52 = v229 + 1;
      v229 = v52;
      v51 = *((_QWORD *)v3 + 4);
      if (v52 >= (*((_QWORD *)v3 + 5) - v51) >> 4)
        goto LABEL_271;
    }
    v210 = &v229;
    v60 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v53, &v229, (uint64_t)&std::piecewise_construct, (uint64_t **)&v210);
    v61 = (uint64_t *)v60[3];
    v203 = (uint64_t *)v60[4];
    if (v61 == v203)
    {
      printf("pass_rpn_tracker_merge_convs: merging %zu x-correlations\n", 0xAAAAAAAAAAAAAAABLL * (v227 - v226));
      goto LABEL_153;
    }
    while (1)
    {
      *(_QWORD *)&v208 = 0;
      v210 = (unint64_t *)v61;
      *(_QWORD *)&v208 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v234, (uint64_t)v61, (uint64_t)&std::piecewise_construct, (__int128 **)&v210)[5];
      v62 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 16 * v208);
      v63 = *(const void **)(v62 + 64);
      if (v63
      {
        v65 = v64;
        v66 = *(_QWORD *)(v62 + 72);
        v210 = (unint64_t *)v64;
        *(_QWORD *)&v211 = v66;
        if (v66)
        {
          v67 = (unint64_t *)(v66 + 8);
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
      }
      else
      {
        v65 = 0;
        v210 = 0;
        *(_QWORD *)&v211 = 0;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
      v69 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v53, (unint64_t *)&v208, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
      v70 = v69[4] - v69[3] != 48 || v65 == 0;
      if (v70
        || (__str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208,
      {
        v90 = 0;
        goto LABEL_113;
      }
      v74 = *(std::__shared_weak_count **)(v72 + 72);
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
        do
          v77 = __ldaxr(v75);
        while (__stlxr(v77 - 1, v75));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v78 = (uint64_t *)v210;
      v79 = *(_DWORD *)((*(uint64_t (**)(unint64_t *))(*v210 + 384))(v210) + 116);
      v80 = v226;
      if (v226 == v227)
      {
        if (v79 != 1)
          goto LABEL_111;
      }
      else
      {
        v81 = v3;
        v82 = v53;
        v83 = v225;
        v84 = *(_DWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v226[1] + 384))(v226[1]) + 48);
        v85 = *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v78 + 384))(v78) + 48);
        v86 = *(_DWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v80[1] + 384))(v80[1]) + 52);
        v89 = v86 == *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v78 + 384))(v78) + 52)
           && v84 == v85
           && v71 == v83
           && v79 == 1;
        v53 = v82;
        v3 = v81;
        if (!v89)
        {
LABEL_111:
          v90 = 0;
          goto LABEL_113;
        }
      }
      v225 = v71;
      v95 = v208;
      v215[0] = (void *)v208;
      v215[1] = v78;
      v215[2] = (void *)v211;
      if ((_QWORD)v211)
      {
        v96 = (unint64_t *)(v211 + 8);
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
      }
      v98 = v227;
      if (v227 >= v228)
      {
        v100 = v226;
        v101 = 0xAAAAAAAAAAAAAAABLL * (v227 - v226);
        v102 = v101 + 1;
        if (v101 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (v228 - v226) > v102)
          v102 = 0x5555555555555556 * (v228 - v226);
        if (0xAAAAAAAAAAAAAAABLL * (v228 - v226) >= 0x555555555555555)
          v103 = 0xAAAAAAAAAAAAAAALL;
        else
          v103 = v102;
        if (v103 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v104 = (char *)operator new(24 * v103);
        v105 = &v104[24 * v101];
        *(_QWORD *)v105 = v95;
        *(_OWORD *)(v105 + 8) = *(_OWORD *)&v215[1];
        v215[1] = 0;
        v215[2] = 0;
        v99 = (unint64_t *)(v105 + 24);
        if (v98 == v100)
        {
          v226 = (unint64_t *)&v104[24 * v101];
          v227 = (unint64_t *)(v105 + 24);
          v228 = (unint64_t *)&v104[24 * v103];
        }
        else
        {
          do
          {
            v106 = *(v98 - 3);
            v98 -= 3;
            *((_QWORD *)v105 - 3) = v106;
            v105 -= 24;
            *(_OWORD *)(v105 + 8) = *(_OWORD *)(v98 + 1);
            v98[1] = 0;
            v98[2] = 0;
          }
          while (v98 != v100);
          v107 = v226;
          v98 = v227;
          v226 = (unint64_t *)v105;
          v227 = v99;
          v228 = (unint64_t *)&v104[24 * v103];
          if (v98 != v107)
          {
            do
            {
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v98 - 2));
              v98 -= 3;
            }
            while (v98 != v107);
            v98 = v107;
          }
        }
        if (v98)
        {
          operator delete(v98);
          v108 = (std::__shared_weak_count *)v215[2];
          v227 = v99;
          if (v215[2])
          {
            v109 = (unint64_t *)((char *)v215[2] + 8);
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          goto LABEL_149;
        }
      }
      else
      {
        *v227 = v95;
        *(_OWORD *)(v98 + 1) = *(_OWORD *)&v215[1];
        v215[1] = 0;
        v215[2] = 0;
        v99 = v98 + 3;
      }
      v227 = v99;
LABEL_149:
      v90 = 1;
LABEL_113:
      v91 = (std::__shared_weak_count *)v211;
      if ((_QWORD)v211)
      {
        v92 = (unint64_t *)(v211 + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 - 1, v92));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
          std::__shared_weak_count::__release_weak(v91);
        }
      }
      v61 += 3;
      if (v61 == v203)
        v94 = 0;
      else
        v94 = v90;
      if ((v94 & 1) == 0)
      {
        printf("pass_rpn_tracker_merge_convs: merging %zu x-correlations\n", 0xAAAAAAAAAAAAAAABLL * (v227 - v226));
        if ((v90 & 1) != 0)
        {
LABEL_153:
          if (0xAAAAAAAAAAAAAAABLL * (v227 - v226) >= 2)
          {
            v210 = &v229;
            v111 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v198, &v229, (uint64_t)&std::piecewise_construct, (uint64_t **)&v210)[3];
            v210 = v226;
            v112 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v53, v226, (uint64_t)&std::piecewise_construct, (uint64_t **)&v210)[3];
            v210 = &v225;
            v113 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v53, &v225, (uint64_t)&std::piecewise_construct, (uint64_t **)&v210)[3];
            v114 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v226[1] + 384))(v226[1]);
            v115 = *(_OWORD *)v114;
            v116 = *(_OWORD *)(v114 + 32);
            *(_OWORD *)&v215[2] = *(_OWORD *)(v114 + 16);
            *(_OWORD *)v216 = v116;
            *(_OWORD *)v215 = v115;
            v117 = *(_OWORD *)(v114 + 48);
            v118 = *(_OWORD *)(v114 + 64);
            v119 = *(_OWORD *)(v114 + 96);
            v219 = *(_OWORD *)(v114 + 80);
            v220 = v119;
            v217 = v117;
            v218 = v118;
            v120 = *(_OWORD *)(v114 + 112);
            v121 = *(_OWORD *)(v114 + 128);
            v122 = *(_OWORD *)(v114 + 144);
            v224 = *(_QWORD *)(v114 + 160);
            v222 = v121;
            v223 = v122;
            v221 = v120;
            v210 = v112;
            HIDWORD(v216[1]) = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v200, (unsigned __int8 *)v112, (__int128 **)&v210)+ 5)+ 16);
            v210 = v111;
            LODWORD(v216[1]) = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v200, (unsigned __int8 *)v111, (__int128 **)&v210)+ 5)+ 16);
            WORD4(v218) = 0;
            *(_QWORD *)&v219 = 0;
            LODWORD(v210) = 0;
            v211 = 0u;
            v212 = 0u;
            __p = 0u;
            v214 = 0u;
            v123 = (char *)operator new(0xF8uLL);
            *((_QWORD *)v123 + 1) = 0;
            *((_QWORD *)v123 + 2) = 0;
            *(_QWORD *)v123 = &off_1E2DBF0D0;
            *((_QWORD *)v123 + 3) = &off_1E2DA1A38;
            *(_OWORD *)(v123 + 40) = 0u;
            *(_OWORD *)(v123 + 56) = 0u;
            *(_OWORD *)(v123 + 72) = 0u;
            *(_OWORD *)(v123 + 88) = 0u;
            *(_OWORD *)(v123 + 104) = 0u;
            *(_OWORD *)(v123 + 120) = 0u;
            *(_OWORD *)(v123 + 136) = 0u;
            *(_OWORD *)(v123 + 152) = 0u;
            *(_OWORD *)(v123 + 161) = 0u;
            *((_OWORD *)v123 + 13) = 0u;
            *((_OWORD *)v123 + 14) = 0u;
            *((_QWORD *)v123 + 30) = 0;
            *(_QWORD *)&v211 = v123 + 24;
            *((_QWORD *)&v211 + 1) = v123;
            v124 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 16 * v229);
            if (*(char *)(v124 + 39) >= 0)
              v125 = *(unsigned __int8 *)(v124 + 39);
            else
              v125 = *(_QWORD *)(v124 + 24);
            std::string::basic_string[abi:ne180100]((uint64_t)&__str, v125 + 12);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_str = &__str;
            else
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (v125)
            {
              if (*(char *)(v124 + 39) >= 0)
                v127 = (const void *)(v124 + 16);
              else
                v127 = *(const void **)(v124 + 16);
              memmove(p_str, v127, v125);
            }
            strcpy((char *)p_str + v125, "_single_conv");
            v128 = v211;
            v129 = v211 + 16;
            if (*(char *)(v211 + 39) < 0)
            {
              operator delete(*(void **)v129);
              v128 = v211;
            }
            v130 = __str.__r_.__value_.__r.__words[2];
            *(_OWORD *)v129 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(_QWORD *)(v129 + 16) = v130;
            MEMORY[0x19401C808](v128 + 40, "convolution");
            *(_QWORD *)(v211 + 8) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 4) + 16 * v229) + 8);
            if (*((char *)v112 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)*v112, v112[1]);
            }
            else
            {
              v131 = *(_OWORD *)v112;
              __str.__r_.__value_.__r.__words[2] = v112[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v131;
            }
            if (*((char *)v113 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)v113, *((_QWORD *)v113 + 1));
            }
            else
            {
              v132 = *v113;
              v240.__r_.__value_.__r.__words[2] = *((_QWORD *)v113 + 2);
              *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v132;
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v212, &__str, &v241, 2uLL);
            for (i = 0; i != -6; i -= 3)
            {
              if (SHIBYTE(v240.__r_.__value_.__r.__words[i + 2]) < 0)
                operator delete(*(void **)((char *)&__str + i * 8 + 24));
            }
            if (*((char *)v111 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)*v111, v111[1]);
            }
            else
            {
              v134 = *(_OWORD *)v111;
              __str.__r_.__value_.__r.__words[2] = v111[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v134;
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)((char *)&__p + 8), &__str, (__int128 *)&v240, 1uLL);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            Espresso::abstract_engine_factory::shared(&v204);
            v135 = (uint64_t)v204;
            std::string::basic_string[abi:ne180100]<0>(&__str, "convolution");
            Espresso::abstract_engine_factory::make_kernel_priv(v135, v197, (uint64_t)&__str, (uint64_t)v215, (int *)(v211 + 8));
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v211 + 64, &v208);
            v136 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
            if (*((_QWORD *)&v208 + 1))
            {
              v137 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v139 = v205;
            if (v205)
            {
              v140 = (unint64_t *)&v205->__shared_owners_;
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
            LODWORD(v210) = v225;
            v208 = 0uLL;
            v209 = 0;
            std::vector<unsigned long>::reserve((void **)&v208, 0xAAAAAAAAAAAAAAABLL * (v227 - v226) + 2);
            v142 = (_QWORD *)*((_QWORD *)&v208 + 1);
            if (*((_QWORD *)&v208 + 1) < v209)
            {
              **((_QWORD **)&v208 + 1) = v229;
              v143 = v142 + 1;
              goto LABEL_209;
            }
            v144 = (_QWORD *)v208;
            v145 = (uint64_t)(*((_QWORD *)&v208 + 1) - v208) >> 3;
            v146 = v145 + 1;
            if ((unint64_t)(v145 + 1) >> 61)
              goto LABEL_288;
            v147 = v209 - v208;
            if ((uint64_t)(v209 - v208) >> 2 > v146)
              v146 = v147 >> 2;
            v148 = (unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8;
            v149 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v148)
              v149 = v146;
            if (v149)
            {
              v149 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v149);
              v142 = (_QWORD *)*((_QWORD *)&v208 + 1);
              v144 = (_QWORD *)v208;
            }
            else
            {
              v150 = 0;
            }
            v151 = (_QWORD *)(v149 + 8 * v145);
            *v151 = v229;
            v143 = v151 + 1;
            while (v142 != v144)
            {
              v152 = *--v142;
              *--v151 = v152;
            }
            *(_QWORD *)&v208 = v151;
            *((_QWORD *)&v208 + 1) = v143;
            v209 = v149 + 8 * v150;
            if (v144)
              operator delete(v144);
LABEL_209:
            *((_QWORD *)&v208 + 1) = v143;
            v153 = v226;
            v154 = v227;
            if (v226 != v227)
            {
              do
              {
                v156 = *v153;
                v155 = v153[1];
                __str.__r_.__value_.__r.__words[0] = *v153;
                __str.__r_.__value_.__l.__size_ = v155;
                v157 = (std::__shared_weak_count *)v153[2];
                __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v157;
                if (v157)
                {
                  v158 = (unint64_t *)&v157->__shared_owners_;
                  do
                    v159 = __ldxr(v158);
                  while (__stxr(v159 + 1, v158));
                }
                v160 = (char *)*((_QWORD *)&v208 + 1);
                if (*((_QWORD *)&v208 + 1) >= v209)
                {
                  v162 = (char *)v208;
                  v163 = (uint64_t)(*((_QWORD *)&v208 + 1) - v208) >> 3;
                  v164 = v163 + 1;
                  if ((unint64_t)(v163 + 1) >> 61)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v165 = v209 - v208;
                  if ((uint64_t)(v209 - v208) >> 2 > v164)
                    v164 = v165 >> 2;
                  v148 = (unint64_t)v165 >= 0x7FFFFFFFFFFFFFF8;
                  v166 = 0x1FFFFFFFFFFFFFFFLL;
                  if (!v148)
                    v166 = v164;
                  if (v166)
                  {
                    v166 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v166);
                    v160 = (char *)*((_QWORD *)&v208 + 1);
                    v162 = (char *)v208;
                  }
                  else
                  {
                    v167 = 0;
                  }
                  v168 = (std::string::size_type *)(v166 + 8 * v163);
                  *v168 = v156;
                  v161 = v168 + 1;
                  while (v160 != v162)
                  {
                    v169 = *((_QWORD *)v160 - 1);
                    v160 -= 8;
                    *--v168 = v169;
                  }
                  *(_QWORD *)&v208 = v168;
                  *((_QWORD *)&v208 + 1) = v161;
                  v209 = v166 + 8 * v167;
                  if (v162)
                    operator delete(v162);
                }
                else
                {
                  **((_QWORD **)&v208 + 1) = v156;
                  v161 = v160 + 8;
                }
                *((_QWORD *)&v208 + 1) = v161;
                if (v157)
                {
                  v170 = (unint64_t *)&v157->__shared_owners_;
                  do
                    v171 = __ldaxr(v170);
                  while (__stlxr(v171 - 1, v170));
                  if (!v171)
                  {
                    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                    std::__shared_weak_count::__release_weak(v157);
                  }
                }
                v153 += 3;
              }
              while (v153 != v154);
              v143 = (_QWORD *)*((_QWORD *)&v208 + 1);
            }
            if ((unint64_t)v143 < v209)
            {
              *v143 = v225;
              v172 = v143 + 1;
              goto LABEL_250;
            }
            v173 = (_QWORD *)v208;
            v174 = (uint64_t)((uint64_t)v143 - v208) >> 3;
            v175 = v174 + 1;
            if ((unint64_t)(v174 + 1) >> 61)
LABEL_288:
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v176 = v209 - v208;
            if ((uint64_t)(v209 - v208) >> 2 > v175)
              v175 = v176 >> 2;
            v148 = (unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8;
            v177 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v148)
              v177 = v175;
            if (v177)
            {
              v177 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v177);
              v143 = (_QWORD *)*((_QWORD *)&v208 + 1);
              v173 = (_QWORD *)v208;
            }
            else
            {
              v178 = 0;
            }
            v179 = (_QWORD *)(v177 + 8 * v174);
            *v179 = v225;
            v172 = v179 + 1;
            while (v143 != v173)
            {
              v180 = *--v143;
              *--v179 = v180;
            }
            *(_QWORD *)&v208 = v179;
            *((_QWORD *)&v208 + 1) = v172;
            v209 = v177 + 8 * v178;
            if (v173)
              operator delete(v173);
LABEL_250:
            *((_QWORD *)&v208 + 1) = v172;
            std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
            for (j = ((uint64_t)(*((_QWORD *)&v208 + 1) - v208) >> 3) - 1; j != -1; --j)
            {
              v182 = *(_QWORD *)(v208 + 8 * j);
              Espresso::net::remove_layer(v3, v182);
            }
            v207 = v225;
            LODWORD(__str.__r_.__value_.__l.__data_) = (_DWORD)v210;
            *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v211;
            if (*((_QWORD *)&v211 + 1))
            {
              v183 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
              do
                v184 = __ldxr(v183);
              while (__stxr(v184 + 1, v183));
            }
            memset(&v240, 0, sizeof(v240));
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v240, v212, *((uint64_t *)&v212 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v212 + 1) - v212) >> 3));
            v241 = 0uLL;
            v242 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v241, *((uint64_t *)&__p + 1), v214, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v214 - *((_QWORD *)&__p + 1)) >> 3));
            v204 = 0;
            v205 = 0;
            v206 = 0;
            v235 = (std::string *)&v204;
            v236 = 0;
            v204 = (char *)operator new(0x48uLL);
            v205 = (std::__shared_weak_count *)v204;
            v206 = v204 + 72;
            v205 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v206, (uint64_t)&__str, (uint64_t)v243, (uint64_t)v204);
            Espresso::net::insert_layers((uint64_t)v3, &v207, (uint64_t *)&v204);
            v235 = (std::string *)&v204;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
            v235 = (std::string *)&v241;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
            v235 = &v240;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v235);
            v185 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
            if (__str.__r_.__value_.__r.__words[2])
            {
              v186 = (unint64_t *)(__str.__r_.__value_.__r.__words[2] + 8);
              do
                v187 = __ldaxr(v186);
              while (__stlxr(v187 - 1, v186));
              if (!v187)
              {
                ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                std::__shared_weak_count::__release_weak(v185);
              }
            }
            v229 = 0;
            Espresso::net::get_producers_of_blobs(v3, (uint64_t)&__str);
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)v234, (uint64_t *)&__str);
            std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__str.__r_.__value_.__r.__words[2]);
            v188 = (void *)__str.__r_.__value_.__r.__words[0];
            __str.__r_.__value_.__r.__words[0] = 0;
            if (v188)
              operator delete(v188);
            if ((_QWORD)v208)
            {
              *((_QWORD *)&v208 + 1) = v208;
              operator delete((void *)v208);
            }
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            v189 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
            if (*((_QWORD *)&v211 + 1))
            {
              v190 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
              do
                v191 = __ldaxr(v190);
              while (__stlxr(v191 - 1, v190));
              if (!v191)
              {
                ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                std::__shared_weak_count::__release_weak(v189);
              }
            }
          }
        }
        goto LABEL_78;
      }
    }
  }
LABEL_271:
  *((_BYTE *)v3 + 180) = 0;
  Espresso::shape_network_recursive(v3, (Espresso::net *)((char *)v3 + 184), 0, 0);
  std::string::basic_string[abi:ne180100]<0>(v215, "rpn_tracker_merge_convs");
  v238 = 0;
  Espresso::net::pprint((uint64_t)v3, (uint64_t)v215, (uint64_t)v237);
  v192 = v238;
  if (v238 == v237)
  {
    v194 = 4;
    v192 = v237;
    v193 = v199;
  }
  else
  {
    v193 = v199;
    if (!v238)
      goto LABEL_276;
    v194 = 5;
  }
  (*(void (**)(void))(*v192 + 8 * v194))();
LABEL_276:
  if (SHIBYTE(v215[2]) < 0)
    operator delete(v215[0]);
  *(_BYTE *)v193 = 1;
  *(_QWORD *)(v193 + 8) = 0;
  *(_QWORD *)(v193 + 16) = 0;
  if (v230)
    operator delete(v230);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v233[2]);
  v195 = v233[0];
  v233[0] = 0;
  if (v195)
    operator delete(v195);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v234[2]);
  v196 = v234[0];
  v234[0] = 0;
  if (v196)
    operator delete(v196);
}

void sub_19171BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  char a71;

  if (__p)
    operator delete(__p);
  if (a46)
    operator delete(a46);
  if (a68)
    operator delete(a68);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a71);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_rpn_tracker_merge_convs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDE38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_rpn_tracker_merge_convs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDE38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_rpn_tracker_merge_convs>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t espresso_vision_first_layer_number_of_input_blobs(EspressoNetwork *a1)
{
  EspressoNetwork *v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD v10[3];
  void **v11;

  v1 = a1;
  -[EspressoNetwork net](v1, "net");
  Espresso::layer_data::shapes((Espresso::layer_data *)v10, *(uint64_t **)(**(_QWORD **)(v8 + 32) + 80), *(uint64_t **)(**(_QWORD **)(v8 + 32) + 88));
  v3 = v10[0];
  v2 = v10[1];
  v11 = (void **)v10;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return (v2 - v3) >> 6;
}

void sub_19171C190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t espresso_vision_first_layer_first_source_blob_shape(EspressoNetwork *a1)
{
  EspressoNetwork *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void *__p;
  void *v10;

  v1 = a1;
  -[EspressoNetwork net](v1, "net");
  Espresso::abstract_blob_container::shape((char *)&v8, **(_QWORD **)(**(_QWORD **)(v6 + 32) + 80));
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)())v7->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v4 = v8;
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }

  return v4;
}

void sub_19171C25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t espresso_vision_last_layer_first_destination_blob_shape(EspressoNetwork *a1)
{
  EspressoNetwork *v1;
  __int128 v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  v1 = a1;
  -[EspressoNetwork net](v1, "net");
  -[EspressoNetwork net](v1, "net");
  v2 = *(_OWORD *)(*(_QWORD *)(v18 + 40) - *(_QWORD *)(v18 + 32) + *(_QWORD *)(v14 + 32) - 16);
  v20 = v2;
  if (*((_QWORD *)&v2 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v2 + 1) + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  if (v19)
  {
    p_shared_owners = &v19->__shared_owners_;
    do
      v6 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v6 - 1, (unint64_t *)p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v15)
  {
    v7 = &v15->__shared_owners_;
    do
      v8 = __ldaxr((unint64_t *)v7);
    while (__stlxr(v8 - 1, (unint64_t *)v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v14, **(_QWORD **)(v20 + 104));
  v9 = v14;
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  return v9;
}

void sub_19171C3D8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 48);

  _Unwind_Resume(a1);
}

uint64_t espresso_vision_compute(void *a1, void *a2, uint64_t a3, int a4, void *a5, uint64_t a6, int a7)
{
  id v13;
  id v14;
  _BYTE *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void (***v26)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD v55[10];
  std::__shared_weak_count *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  void (***v64)(uint64_t *__return_ptr, _QWORD);
  std::__shared_weak_count *v65;
  _QWORD v66[2];
  _QWORD v67[6];
  _QWORD *v68[3];
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  __n128 (*v72)(__n128 *, __n128 *);
  uint64_t (*v73)(uint64_t);
  const char *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  _QWORD v77[2];
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  __n128 (*v81)(__n128 *, __n128 *);
  uint64_t (*v82)(uint64_t);
  const char *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[7];
  std::__shared_weak_count *v91;
  _BYTE *v92;
  std::__shared_weak_count *v93;
  _OWORD v94[5];

  v13 = a1;
  v14 = a2;
  vimage2espresso_params((uint64_t)v94, v13, a6, a7);
  if (v13)
  {
    objc_msgSend(v13, "net");
    v15 = v92;
  }
  else
  {
    v15 = 0;
    v92 = 0;
    v93 = 0;
  }
  if (v15[180])
  {
    v15[180] = 0;
    Espresso::shape_network_recursive((Espresso *)v15, (Espresso::net *)(v15 + 184), 0, 0);
    v15[180] = 0;
    v15 = v92;
  }
  v90[0] = 0;
  v90[1] = v90;
  v90[2] = 0x4012000000;
  v90[3] = __Block_byref_object_copy__11428;
  v90[4] = __Block_byref_object_dispose__11429;
  v91 = 0;
  v90[5] = "";
  v90[6] = 0;
  v86 = 0;
  v87 = &v86;
  v88 = 0x2020000000;
  v89 = 3712;
  v78 = 0;
  v79 = &v78;
  v81 = __Block_byref_object_copy__17_11430;
  v82 = __Block_byref_object_dispose__18_11431;
  v80 = 0x4012000000;
  v83 = "";
  v16 = v93;
  v77[0] = v15;
  v77[1] = v93;
  if (v93)
  {
    p_shared_owners = (unint64_t *)&v93->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  Espresso::get_last_layer_blob((uint64_t)v77, &v84);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v69 = 0;
  v70 = &v69;
  v71 = 0x4012000000;
  v72 = __Block_byref_object_copy__11428;
  v73 = __Block_byref_object_dispose__11429;
  v74 = "";
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v79[6] + 56))(&v75);
  v67[0] = 0;
  v67[1] = v67;
  v67[2] = 0x4812000000;
  v67[3] = __Block_byref_object_copy__21;
  v67[4] = __Block_byref_object_dispose__22;
  v67[5] = "";
  v21 = v93;
  v66[0] = v92;
  v66[1] = v93;
  if (v93)
  {
    v22 = (unint64_t *)&v93->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  createEspressoHostBlobs((uint64_t)v68, (uint64_t)v66);
  if (!v21)
    goto LABEL_21;
  v24 = (unint64_t *)&v21->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (v14)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    if (v14)
    {
LABEL_22:
      objc_msgSend(v14, "ctx");
      v26 = v64;
      goto LABEL_25;
    }
  }
  v26 = 0;
  v64 = 0;
  v65 = 0;
LABEL_25:
  v55[0] = MEMORY[0x1E0C809B0];
  v55[1] = 3321888768;
  v55[2] = ___Z23espresso_vision_computeP15EspressoNetworkP15EspressoContextPK13vImage_BufferiPfPK12VimageParamsbii_block_invoke;
  v55[3] = &unk_1E2DC3DB8;
  v55[9] = v92;
  v56 = v93;
  if (v93)
  {
    v27 = (unint64_t *)&v93->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v63 = a4;
  v60 = v94[2];
  v61 = v94[3];
  v62 = v94[4];
  v59 = v94[1];
  v58 = v94[0];
  v55[4] = v90;
  v55[5] = &v86;
  v55[6] = &v78;
  v55[7] = &v69;
  v57 = a3;
  v55[8] = v67;
  Espresso::abstract_context::compute_batch_sync(v26, v55);
  v29 = v65;
  if (v65)
  {
    v30 = (unint64_t *)&v65->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v87;
  v33 = v87[3];
  if (v33 == 128)
  {
    v34 = 0;
    v35 = v70[6];
    v36 = *(const void **)(v35 + 24);
    v37 = *(int *)(v35 + 8);
    v38 = v35 + 12;
    do
    {
      v37 *= *(int *)(v38 + v34);
      v34 += 4;
    }
    while (v34 != 12);
    memcpy(a5, v36, 4 * v37);
    v33 = v32[3];
  }
  v39 = v56;
  if (v56)
  {
    v40 = (unint64_t *)&v56->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  _Block_object_dispose(v67, 8);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v68[1]);
  _Block_object_dispose(&v69, 8);
  v42 = v76;
  if (v76)
  {
    v43 = (unint64_t *)&v76->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  _Block_object_dispose(&v78, 8);
  v45 = v85;
  if (v85)
  {
    v46 = (unint64_t *)&v85->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  _Block_object_dispose(&v86, 8);
  _Block_object_dispose(v90, 8);
  v48 = v91;
  if (v91)
  {
    v49 = (unint64_t *)&v91->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v93;
  if (v93)
  {
    v52 = (unint64_t *)&v93->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }

  return v33;
}

void sub_19171C948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,_QWORD *a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a68;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  _Block_object_dispose(&a37, 8);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(a44);
  _Block_object_dispose(&a46, 8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v71);
  _Block_object_dispose(&a56, 8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v70);
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose(&a68, 8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x208]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v72 - 200);

  _Unwind_Resume(a1);
}

void vimage2espresso_params(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  id v7;
  void *v8;
  int v9;
  int v10;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::runtime_error *exception;
  uint64_t v29;
  std::string v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v7 = a2;
  v8 = v7;
  if (*(_BYTE *)(a3 + 28))
  {
LABEL_2:
    v9 = *(_DWORD *)(a3 + 4);
    v10 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a1 + 8) = a4;
    *(_DWORD *)(a1 + 12) = v10;
    *(_DWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(a1 + 48) = _D0;
    *(_DWORD *)a1 = *(_DWORD *)a3;
    *(_DWORD *)(a1 + 4) = v9;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a3 + 12);
    goto LABEL_3;
  }
  if (!v7)
  {
    v31 = 0;
    v32 = 0;
    goto LABEL_26;
  }
  objc_msgSend(v7, "net");
  if (!v31 || !*(_QWORD *)(v31 + 80))
  {
LABEL_26:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v29 = 0;
  v16 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v31 + 56, 0, &v29)[3];
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    v30.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  }
  v18 = v31;
  v19 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v31 + 328, &v30);
  if ((_QWORD *)(v18 + 336) == v19)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v25 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    goto LABEL_2;
  }
  v20 = *(_OWORD *)(v19 + 9);
  *(_OWORD *)a1 = *(_OWORD *)(v19 + 7);
  *(_OWORD *)(a1 + 16) = v20;
  v21 = *(_OWORD *)(v19 + 13);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v19 + 11);
  *(_OWORD *)(a1 + 48) = v21;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v19 + 15);
  *(_DWORD *)(a1 + 8) = a4;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v22 = v32;
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_3:

}

void sub_19171CC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;

  __cxa_free_exception(v16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__11428(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__11429(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
}

__n128 __Block_byref_object_copy__17_11430(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__18_11431(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
}

_QWORD *__Block_byref_object_copy__21(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 56));
}

void createEspressoHostBlobs(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  __int128 v15;
  std::string v16;
  std::string v17;
  char v18;
  std::string *v19;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v2 = *(_QWORD **)(*(_QWORD *)a2 + 256);
  v3 = *(_QWORD *)a2 + 264;
  if (v2 != (_QWORD *)v3)
  {
    do
    {
      if (*((char *)v2 + 55) < 0)
        std::string::__init_copy_ctor_external(&v17, (const std::string::value_type *)v2[4], v2[5]);
      else
        v17 = *(std::string *)(v2 + 4);
      v18 = *((_BYTE *)v2 + 56);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v16, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
      else
        v16 = v17;
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*(_QWORD *)a2 + 136), (unsigned __int8 *)&v16))
      {
        v6 = *(_QWORD *)a2 + 136;
        v19 = &v16;
        v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)&v16, (__int128 **)&v19);
        (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)v7 + 5) + 56))(&v15);
        v19 = &v17;
        v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, &v17, (__int128 **)&v19);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v8 + 7), &v15);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
        if (*((_QWORD *)&v15 + 1))
        {
          v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      v12 = (_QWORD *)v2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v2[2];
          v14 = *v13 == (_QWORD)v2;
          v2 = v13;
        }
        while (!v14);
      }
      v2 = v13;
    }
    while (v13 != (_QWORD *)v3);
  }
}

void sub_19171CE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _QWORD **v23;

  if (a23 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v23);
  _Unwind_Resume(a1);
}

void ___Z23espresso_vision_computeP15EspressoNetworkP15EspressoContextPK13vImage_BufferiPfPK12VimageParamsbii_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = (uint64_t *)(a1 + 72);
  Espresso::fill_network_with_image_batch_safe_v2((uint64_t)a2, (uint64_t *)(a1 + 72), *(_OWORD **)(a1 + 88), *(unsigned int *)(a1 + 176), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, (__int128 *)(a1 + 96));
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 128)
    Espresso::net::__forward(*v4, a2, 0, 0xFFFFFFFFLL);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48);
  v6 = (std::__shared_weak_count *)a2[1];
  v18 = *a2;
  v19 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 80);
  v17[0] = *(_QWORD *)(a1 + 72);
  v17[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  copyToEspressoHostBlobs((uint64_t)&v18, (uint64_t)v17, (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48));
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_19171D04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_72c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 80) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_72c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 72);
}

void copyToEspressoHostBlobs(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  std::string __p;
  std::string v15;
  char v16;
  std::string *p_p;

  v3 = *(_QWORD **)(*(_QWORD *)a2 + 256);
  v4 = *(_QWORD *)a2 + 264;
  if (v3 != (_QWORD *)v4)
  {
    do
    {
      if (*((char *)v3 + 55) < 0)
        std::string::__init_copy_ctor_external(&v15, (const std::string::value_type *)v3[4], v3[5]);
      else
        v15 = *(std::string *)(v3 + 4);
      v16 = *((_BYTE *)v3 + 56);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      else
        __p = v15;
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*(_QWORD *)a2 + 136), (unsigned __int8 *)&__p))
      {
        v8 = *(_QWORD *)a2 + 136;
        p_p = &__p;
        v9 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)&__p, (__int128 **)&p_p)+ 5);
        p_p = &__p;
        v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, &__p, (__int128 **)&p_p);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v9 + 40))(v9, a1, v10 + 7);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      v11 = (_QWORD *)v3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v3[2];
          v13 = *v12 == (_QWORD)v3;
          v3 = v12;
        }
        while (!v13);
      }
      v3 = v12;
    }
    while (v12 != (_QWORD *)v4);
  }
}

void sub_19171D22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t espresso_vision_compute_batch(void *a1, void *a2, int a3, int a4, uint64_t a5, int a6, int a7, char *a8, uint64_t a9, unsigned __int8 a10)
{
  id v17;
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  Espresso *v28;
  Espresso::net *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void (***v43)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _OWORD *v72;
  __int128 v73;
  uint64_t v74;
  void (***v75)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  size_t v89;
  char *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  id v109;
  char *v110;
  uint64_t v111;
  int v112;
  id v113;
  _QWORD v114[9];
  std::__shared_weak_count *v115;
  void *__p;
  void *v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  int v124;
  void (***v125)(uint64_t *__return_ptr, _QWORD);
  std::__shared_weak_count *v126;
  __int128 v127;
  _OWORD *v128;
  _QWORD v129[10];
  std::__shared_weak_count *v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  int v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  __n128 (*v141)(__n128 *, __n128 *);
  void *v142;
  const char *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  _QWORD v146[2];
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  __n128 (*v150)(__n128 *, __n128 *);
  uint64_t (*v151)(uint64_t);
  const char *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  int v158;
  _QWORD v159[2];
  _QWORD v160[6];
  _QWORD *v161[3];
  uint64_t v162;
  std::__shared_weak_count *v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;

  v17 = a1;
  v113 = a2;
  v169 = 0;
  v170 = &v169;
  v171 = 0x2020000000;
  v172 = 3712;
  vimage2espresso_params((uint64_t)&v164, v17, a9, a10);
  v112 = a7;
  if (a3 == 1)
  {
    v18 = v113;
    if (v17)
    {
      objc_msgSend(v17, "net");
      v19 = v162;
      v20 = v163;
    }
    else
    {
      v20 = 0;
      v19 = 0;
      v162 = 0;
      v163 = 0;
    }
    v160[0] = 0;
    v160[1] = v160;
    v160[2] = 0x4812000000;
    v160[3] = __Block_byref_object_copy__21;
    v160[4] = __Block_byref_object_dispose__22;
    v160[5] = "";
    v159[0] = v19;
    v159[1] = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    createEspressoHostBlobs((uint64_t)v161, (uint64_t)v159);
    if (v20)
    {
      v26 = (unint64_t *)&v20->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v28 = (Espresso *)v162;
    if (*(_BYTE *)(v162 + 180))
    {
      v29 = (Espresso::net *)(v162 + 184);
      *(_BYTE *)(v162 + 180) = 0;
      Espresso::shape_network_recursive(v28, v29, 0, 0);
      *((_BYTE *)v28 + 180) = 0;
    }
    v155 = 0;
    v156 = &v155;
    v157 = 0x2020000000;
    v158 = 0;
    if (a6 < 1)
    {
LABEL_29:
      v33 = v163;
      v34 = *(unsigned int *)(**(_QWORD **)(**(_QWORD **)(v162 + 32) + 80) + 20);
      v150 = __Block_byref_object_copy__17_11430;
      v151 = __Block_byref_object_dispose__18_11431;
      v152 = "";
      v147 = 0;
      v148 = &v147;
      v149 = 0x4012000000;
      v146[0] = v162;
      v146[1] = v163;
      if (v163)
      {
        v35 = (unint64_t *)&v163->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v109 = v17;
      Espresso::get_last_layer_blob((uint64_t)v146, &v153);
      if (v33)
      {
        v37 = (unint64_t *)&v33->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v110 = a8;
      if ((_DWORD)v34 == 1)
      {
        v138 = 0;
        v139 = &v138;
        v140 = 0x4812000000;
        v141 = __Block_byref_object_copy__30;
        v142 = __Block_byref_object_dispose__31;
        v143 = "";
        std::vector<std::shared_ptr<Espresso::blob<float,4>>>::vector(&v144, a6);
        if (a6 <= 0)
        {
          *((_DWORD *)v156 + 6) = 0;
        }
        else
        {
          v39 = 0;
          do
          {
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v148[6] + 56))(&v127);
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v139[6] + 16 * v39, &v127);
            v40 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
            if (*((_QWORD *)&v127 + 1))
            {
              v41 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            ++v39;
          }
          while (v39 != a6);
          *((_DWORD *)v156 + 6) = 0;
          do
          {
            v43 = (void (***)(uint64_t *__return_ptr, _QWORD))v113;
            if (v113)
            {
              objc_msgSend(v113, "ctx");
              v43 = (void (***)(uint64_t *__return_ptr, _QWORD))v127;
            }
            else
            {
              v127 = 0uLL;
            }
            v129[0] = MEMORY[0x1E0C809B0];
            v129[1] = 3321888768;
            v129[2] = ___Z29espresso_vision_compute_batchP15EspressoNetworkP15EspressoContextiiPK13vImage_BufferiiPfPK12VimageParamsb_block_invoke;
            v129[3] = &unk_1E2DC3DB8;
            v129[9] = v162;
            v130 = v163;
            if (v163)
            {
              v44 = (unint64_t *)&v163->__shared_owners_;
              do
                v45 = __ldxr(v44);
              while (__stxr(v45 + 1, v44));
            }
            v137 = v112;
            v134 = v166;
            v135 = v167;
            v136 = v168;
            v132 = v164;
            v133 = v165;
            v129[4] = &v155;
            v129[5] = &v169;
            v129[6] = &v147;
            v129[7] = &v138;
            v131 = a5;
            v129[8] = v160;
            Espresso::abstract_context::compute_batch_sync(v43, v129);
            v46 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
            if (*((_QWORD *)&v127 + 1))
            {
              v47 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            v49 = v130;
            if (v130)
            {
              v50 = (unint64_t *)&v130->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v52 = *((_DWORD *)v156 + 6) + 1;
            *((_DWORD *)v156 + 6) = v52;
          }
          while (v52 < a6);
          v18 = v113;
          if (*((unsigned __int8 *)v170 + 24) == 128)
          {
            v53 = 0;
            do
            {
              v54 = (uint64_t *)(v139[6] + 16 * v53);
              v55 = *v54;
              v56 = (std::__shared_weak_count *)v54[1];
              if (v56)
              {
                v57 = (unint64_t *)&v56->__shared_owners_;
                do
                  v58 = __ldxr(v57);
                while (__stxr(v58 + 1, v57));
              }
              v59 = 0;
              v60 = *(int *)(v55 + 8);
              v61 = v60;
              do
              {
                v61 *= *(int *)(v55 + 12 + v59);
                v59 += 4;
              }
              while (v59 != 12);
              v62 = 0;
              v63 = *(const void **)(v55 + 24);
              v64 = v55 + 12;
              do
              {
                v60 *= *(int *)(v64 + v62);
                v62 += 4;
              }
              while (v62 != 12);
              memcpy(&a8[4 * v61 * v53], v63, 4 * v60);
              if (v56)
              {
                v65 = (unint64_t *)&v56->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              ++v53;
            }
            while (v53 != a6);
          }
        }
        _Block_object_dispose(&v138, 8);
        *(_QWORD *)&v127 = &v144;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
      }
      else
      {
        *((_DWORD *)v156 + 6) = 0;
        if (a6 >= 1)
        {
          v67 = 0;
          v111 = 2 * (int)v34;
          do
          {
            v127 = 0uLL;
            v128 = 0;
            if ((_DWORD)v34)
            {
              if ((v34 & 0x80000000) != 0)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v68 = std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>((int)v34);
              *(_QWORD *)&v127 = v68;
              v128 = &v68[2 * v69];
              bzero(v68, v111 * 16);
              v70 = 0;
              *((_QWORD *)&v127 + 1) = &v68[v111];
              v67 = *((_DWORD *)v156 + 6);
              v71 = v67;
              while (v71 < a6)
              {
                v72 = (_OWORD *)(a5 + 32 * v71);
                v73 = v72[1];
                *v68 = *v72;
                v68[1] = v73;
                v68 += 2;
                ++v70;
                v71 = *((_DWORD *)v156 + 6) + 1;
                *((_DWORD *)v156 + 6) = v71;
                if (v34 == v70)
                {
                  LODWORD(v70) = v34;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v70) = 0;
            }
            v74 = v70;
            std::vector<vImage_Buffer>::resize((char **)&v127, v70);
            v138 = 0;
            v139 = &v138;
            v140 = 0x4012000000;
            v141 = __Block_byref_object_copy__11428;
            v142 = __Block_byref_object_dispose__11429;
            v143 = "";
            (*(void (**)(uint64_t))(*(_QWORD *)v148[6] + 56))(v148[6]);
            if (v18)
            {
              objc_msgSend(v18, "ctx");
              v75 = v125;
            }
            else
            {
              v75 = 0;
              v125 = 0;
              v126 = 0;
            }
            v114[0] = MEMORY[0x1E0C809B0];
            v114[1] = 3321888768;
            v114[2] = ___Z29espresso_vision_compute_batchP15EspressoNetworkP15EspressoContextiiPK13vImage_BufferiiPfPK12VimageParamsb_block_invoke_2;
            v114[3] = &unk_1E2DC3DF0;
            v114[8] = v162;
            v115 = v163;
            if (v163)
            {
              v76 = (unint64_t *)&v163->__shared_owners_;
              do
                v77 = __ldxr(v76);
              while (__stxr(v77 + 1, v76));
            }
            __p = 0;
            v117 = 0;
            v118 = 0;
            std::vector<vImage_Buffer>::__init_with_size[abi:ne180100]<vImage_Buffer*,vImage_Buffer*>(&__p, (const void *)v127, *((uint64_t *)&v127 + 1), (uint64_t)(*((_QWORD *)&v127 + 1) - v127) >> 5);
            v124 = a7;
            v121 = v166;
            v122 = v167;
            v123 = v168;
            v119 = v164;
            v120 = v165;
            v114[4] = &v169;
            v114[5] = &v147;
            v114[6] = &v138;
            v114[7] = v160;
            Espresso::abstract_context::compute_batch_sync(v75, v114);
            v78 = v126;
            if (v126)
            {
              v79 = (unint64_t *)&v126->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            if (*((unsigned __int8 *)v170 + 24) == 128)
            {
              v82 = v139[6];
              v81 = (std::__shared_weak_count *)v139[7];
              if (v81)
              {
                v83 = (unint64_t *)&v81->__shared_owners_;
                do
                  v84 = __ldxr(v83);
                while (__stxr(v84 + 1, v83));
              }
              v85 = 0;
              v86 = *(_DWORD *)(v82 + 8);
              do
              {
                v86 *= *(_DWORD *)(v82 + 12 + v85);
                v85 += 4;
              }
              while (v85 != 12);
              if ((_DWORD)v74)
              {
                v87 = 0;
                v88 = v86 / (int)v34;
                v89 = 4 * v88;
                v90 = &v110[4 * v67 * (uint64_t)v88];
                do
                {
                  memcpy(&v90[v87], (const void *)(*(_QWORD *)(v82 + 24) + v87), v89);
                  v87 += v89;
                  --v74;
                }
                while (v74);
              }
              v18 = v113;
              a7 = v112;
              if (v81)
              {
                v91 = (unint64_t *)&v81->__shared_owners_;
                do
                  v92 = __ldaxr(v91);
                while (__stlxr(v92 - 1, v91));
                if (!v92)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
            }
            if (__p)
            {
              v117 = __p;
              operator delete(__p);
            }
            v93 = v115;
            if (v115)
            {
              v94 = (unint64_t *)&v115->__shared_owners_;
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
            _Block_object_dispose(&v138, 8);
            v96 = v145;
            if (v145)
            {
              v97 = (unint64_t *)&v145->__shared_owners_;
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
            if ((_QWORD)v127)
              operator delete((void *)v127);
            v67 = *((_DWORD *)v156 + 6);
          }
          while (v67 < a6);
        }
      }
      _Block_object_dispose(&v147, 8);
      v101 = v154;
      v17 = v109;
      if (v154)
      {
        v102 = (unint64_t *)&v154->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
    }
    else
    {
      v30 = a6;
      v31 = 3709;
      v32 = (_QWORD *)a5;
      while (1)
      {
        if (!*v32)
        {
          v99 = 189;
          v100 = -3;
          goto LABEL_133;
        }
        if (a7 != 1 && a7 != 4)
          break;
        v32 += 4;
        if (!--v30)
          goto LABEL_29;
      }
      v99 = 192;
      v100 = -4;
      v31 = 3708;
LABEL_133:
      v170[3] = v31;
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", v100, "-", "CVML_status espresso_vision_compute_batch(EspressoNetwork *__strong, EspressoContext *__strong, int, int, const vImage_Buffer *, int, const int, float *, const VimageParams *, BOOL)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", v99);
    }
    _Block_object_dispose(&v155, 8);
    _Block_object_dispose(v160, 8);
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v161[1]);
    v104 = v163;
    if (v163)
    {
      v105 = (unint64_t *)&v163->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
  }
  else
  {
    v21 = *((unsigned __int8 *)v170 + 24) != 128 || a6 < 1;
    v18 = v113;
    if (!v21)
    {
      v22 = a6;
      while (1)
      {
        v23 = espresso_vision_compute(v17, v113, a5, v112, a8, a9, a10);
        v170[3] = v23;
        if (v23 <= 0x7FuLL)
          break;
        a8 += 4 * a4;
        a5 += 32;
        if (!--v22)
          goto LABEL_146;
      }
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", v23 - 128, "-", "CVML_status espresso_vision_compute_batch(EspressoNetwork *__strong, EspressoContext *__strong, int, int, const vImage_Buffer *, int, const int, float *, const VimageParams *, BOOL)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 303);
    }
  }
LABEL_146:
  v107 = v170[3];
  _Block_object_dispose(&v169, 8);

  return v107;
}

void sub_19171DDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void *v25;
  uint64_t v26;

  _Block_object_dispose((const void *)(v26 - 136), 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__30(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_QWORD *std::vector<std::shared_ptr<Espresso::blob<float,4>>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_19171DFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___Z29espresso_vision_compute_batchP15EspressoNetworkP15EspressoContextiiPK13vImage_BufferiiPfPK12VimageParamsb_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = (uint64_t *)(a1 + 72);
  Espresso::fill_network_with_image_batch_safe_v2((uint64_t)a2, (uint64_t *)(a1 + 72), (_OWORD *)(*(_QWORD *)(a1 + 88) + 32 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)), *(unsigned int *)(a1 + 176), 0, (__int128 *)(a1 + 96));
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 128)
  {
    Espresso::net::__forward(*v4, a2, 0, 0xFFFFFFFFLL);
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48)+ 16 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
  }
  v6 = (std::__shared_weak_count *)a2[1];
  v18 = *a2;
  v19 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 80);
  v17[0] = *(_QWORD *)(a1 + 72);
  v17[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  copyToEspressoHostBlobs((uint64_t)&v18, (uint64_t)v17, (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 48));
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void ___Z29espresso_vision_compute_batchP15EspressoNetworkP15EspressoContextiiPK13vImage_BufferiiPfPK12VimageParamsb_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  std::__shared_weak_count *v18;

  Espresso::fill_network_with_images_batch_safe_v2((uint64_t)a2, (uint64_t *)(a1 + 64), (const char ***)(a1 + 80), *(unsigned int *)(a1 + 184), 0, (__int128 *)(a1 + 104));
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 128)
  {
    Espresso::net::__forward(*(_QWORD *)(a1 + 64), a2, 0, 0xFFFFFFFFLL);
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48);
  }
  v5 = (std::__shared_weak_count *)a2[1];
  v17 = *a2;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 72);
  v16[0] = *(_QWORD *)(a1 + 64);
  v16[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  copyToEspressoHostBlobs((uint64_t)&v17, (uint64_t)v16, (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 48));
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_19171E3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_64c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE80c55_ZTSNSt3__16vectorI13vImage_BufferNS_9allocatorIS1_EEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a2 + 72);
  a1[8] = *(_QWORD *)(a2 + 64);
  a1[9] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  a1[10] = 0;
  a1[11] = 0;
  v5 = a1 + 10;
  v5[2] = 0;
  return std::vector<vImage_Buffer>::__init_with_size[abi:ne180100]<vImage_Buffer*,vImage_Buffer*>(v5, *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 5);
}

void sub_19171E46C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_64c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE80c55_ZTSNSt3__16vectorI13vImage_BufferNS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
}

uint64_t espresso_vision_compute_dropout_augment(void *a1, void *a2, _DWORD *a3, uint64_t a4, int a5, void *a6, uint64_t a7, int a8)
{
  id v15;
  id v16;
  Espresso *v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  void (***v25)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  std::string::size_type size;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD v58[8];
  std::__shared_weak_count *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  int v67;
  std::string v68;
  __n128 (*v69)(uint64_t, uint64_t);
  uint64_t (*v70)(uint64_t);
  const char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  std::string __p;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  Espresso *v80;
  uint64_t v81;
  _QWORD v82[7];
  std::__shared_weak_count *v83;
  _OWORD v84[5];
  __int128 v85;
  char v86;
  uint64_t v87[4];

  v15 = a1;
  v16 = a2;
  vimage2espresso_params((uint64_t)v84, v15, a7, a8);
  v82[0] = 0;
  v82[1] = v82;
  v82[2] = 0x4012000000;
  v82[3] = __Block_byref_object_copy__11428;
  v82[4] = __Block_byref_object_dispose__11429;
  v82[6] = 0;
  v83 = 0;
  v82[5] = "";
  if (v15)
  {
    objc_msgSend(v15, "net");
    v17 = v80;
  }
  else
  {
    v17 = 0;
    v80 = 0;
    v81 = 0;
  }
  if (*((_BYTE *)v17 + 180))
  {
    *((_BYTE *)v17 + 180) = 0;
    Espresso::shape_network_recursive(v17, (Espresso *)((char *)v17 + 184), 0, 0);
    *((_BYTE *)v17 + 180) = 0;
  }
  v76 = 0;
  v77 = &v76;
  v78 = 0x2020000000;
  v79 = 3712;
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv6a");
  v74 = 0uLL;
  v18 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_1E2DBCA88;
  v19 = (std::__shared_weak_count *)v81;
  v87[0] = (uint64_t)v80;
  v87[1] = v81;
  if (v81)
  {
    v20 = (unint64_t *)(v81 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_QWORD *)((char *)&v85 + 4) = 0x7C900000008;
  LODWORD(v85) = 1064514355;
  HIDWORD(v85) = 2;
  v86 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v68, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v68 = __p;
  Espresso::dropout_augment_lowmem::dropout_augment_lowmem((int *)v18 + 6, v87, &v85, (__int128 *)&v68);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)&v24 = v18 + 24;
  *((_QWORD *)&v24 + 1) = v18;
  v74 = v24;
  v68.__r_.__value_.__r.__words[0] = 0;
  v68.__r_.__value_.__l.__size_ = (std::string::size_type)&v68;
  v68.__r_.__value_.__r.__words[2] = 0x5012000000;
  v69 = __Block_byref_object_copy__36;
  v70 = __Block_byref_object_dispose__37;
  v71 = "";
  v72 = 0u;
  v73 = 0u;
  if (v16)
  {
    objc_msgSend(v16, "ctx");
    v25 = (void (***)(uint64_t *__return_ptr, _QWORD))v85;
  }
  else
  {
    v25 = 0;
    v85 = 0uLL;
  }
  v58[0] = MEMORY[0x1E0C809B0];
  v58[1] = 3321888768;
  v58[2] = ___Z39espresso_vision_compute_dropout_augmentP15EspressoNetworkP15EspressoContextPfPK13vImage_BufferiS3_PK12VimageParamsb_block_invoke;
  v58[3] = &unk_1E2DC3D80;
  v58[7] = v80;
  v59 = (std::__shared_weak_count *)v81;
  if (v81)
  {
    v26 = (unint64_t *)(v81 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v67 = a5;
  v63 = v84[2];
  v64 = v84[3];
  v65 = v84[4];
  v61 = v84[0];
  v62 = v84[1];
  v58[4] = v82;
  v58[5] = &v76;
  v60 = a4;
  v58[6] = &v68;
  v66 = v18 + 24;
  Espresso::abstract_context::compute_batch_sync(v25, v58);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v77;
  v32 = v77[3];
  size = v68.__r_.__value_.__l.__size_;
  if (v32 == 128)
  {
    v34 = 0;
    v35 = *(_QWORD *)(v68.__r_.__value_.__l.__size_ + 48);
    v36 = *(const void **)(v35 + 24);
    v37 = *(int *)(v35 + 8);
    v38 = v35 + 12;
    do
    {
      v37 *= *(int *)(v38 + v34);
      v34 += 4;
    }
    while (v34 != 12);
    memcpy(a6, v36, 4 * v37);
    v32 = v31[3];
  }
  *a3 = **(_DWORD **)(*(_QWORD *)(size + 64) + 24);
  v39 = v59;
  if (v59)
  {
    v40 = (unint64_t *)&v59->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  _Block_object_dispose(&v68, 8);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  _Block_object_dispose(&v76, 8);
  v51 = (std::__shared_weak_count *)v81;
  if (v81)
  {
    v52 = (unint64_t *)(v81 + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  _Block_object_dispose(v82, 8);
  v54 = v83;
  if (v83)
  {
    v55 = (unint64_t *)&v83->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }

  return v32;
}

void sub_19171E9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  void *v64;
  void *v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  void *v69;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v67 - 112);
  std::__shared_weak_count::~__shared_weak_count(v66);
  operator delete(v69);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  if (a51 < 0)
    operator delete(__p);
  _Block_object_dispose(&a52, 8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  _Block_object_dispose(&a58, 8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a64);

  _Unwind_Resume(a1);
}

void sub_19171EAD4()
{
  JUMPOUT(0x19171EAC4);
}

__n128 __Block_byref_object_copy__36(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__37(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 48;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
}

void ___Z39espresso_vision_compute_dropout_augmentP15EspressoNetworkP15EspressoContextPfPK13vImage_BufferiS3_PK12VimageParamsb_block_invoke(uint64_t a1, int64x2_t **a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  Espresso::fill_network_with_image_batch_safe_v2((uint64_t)a2, (uint64_t *)(a1 + 56), *(_OWORD **)(a1 + 72), *(unsigned int *)(a1 + 168), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48, (__int128 *)(a1 + 80));
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 128)
  {
    Espresso::dropout_augment_lowmem::__forward(*(int **)(a1 + 160), a2, (uint64_t)&v11);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v4 + 48, &v11);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v4 + 64, &v12);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (*((_QWORD *)&v11 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_19171EC2C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24) = 3708;
  __cxa_end_catch();
  JUMPOUT(0x19171EB60);
}

void std::__shared_ptr_emplace<Espresso::dropout_augment_lowmem>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCA88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::dropout_augment_lowmem>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCA88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::dropout_augment_lowmem>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 160);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 72);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void espresso_vision_shape_network(EspressoNetwork *a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  EspressoNetwork *v9;
  EspressoNetwork *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  Espresso *v14;
  unint64_t *v15;
  unint64_t v16;
  Espresso *v17;
  std::__shared_weak_count *v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  void *__p[2];
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _BYTE v26[8];
  char *v27;
  char *v28[3];

  v9 = a1;
  v10 = v9;
  if (v9)
  {
    -[EspressoNetwork net](v9, "net");
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  v23 = 0;
  *(_OWORD *)__p = 0u;
  v21 = 0u;
  *(_QWORD *)&v19 = __PAIR64__(a3, a2);
  *((_QWORD *)&v19 + 1) = __PAIR64__(a5, a4);
  v20 = 0xFFFFFFFF00000001;
  Espresso::compute_network_shape_starting_from_data_shape(&v24, &v19, (uint64_t)v26);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v11 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v10)
        goto LABEL_11;
LABEL_13:
      v14 = 0;
      v18 = 0;
      goto LABEL_14;
    }
  }
  if (!v10)
    goto LABEL_13;
LABEL_11:
  -[EspressoNetwork net](v10, "net");
  v14 = v17;
LABEL_14:
  Espresso::shape_network_recursive(v14, (Espresso::net *)v26, 0, 0);
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v28, v28[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v26, v27);

}

void sub_19171EE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char *a21)
{
  void *v21;

  Espresso::network_shape::~network_shape(&a21);

  _Unwind_Resume(a1);
}

uint64_t espresso_vision_classify_descriptor_handler(void *a1, const void *a2, size_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void (***v23)(uint64_t *__return_ptr, _QWORD);
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void (***v36)(uint64_t *__return_ptr, _QWORD);
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *exception;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD v58[2];
  _QWORD v59[5];
  _QWORD v60[6];
  _QWORD v61[2];
  _QWORD v62[5];
  uint64_t v63;
  std::__shared_weak_count *v64;
  _DWORD *v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;

  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    v67 = 0;
    v68 = 0;
LABEL_60:
    syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -24, "-", "EspressoVisionBlob espresso_vision_classify_descriptor_handler(EspressoNetwork *__strong, EspressoVisionBlob)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 387);
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3944;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  objc_msgSend(v5, "net");
  v7 = v67;
  if (!v67)
    goto LABEL_60;
  v8 = *(_QWORD *)(**(_QWORD **)(v67 + 32) + 80);
  v10 = *(_DWORD **)v8;
  v9 = *(std::__shared_weak_count **)(v8 + 8);
  v65 = *(_DWORD **)v8;
  v66 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = v10[2];
  v14 = v10[3];
  v15 = v10[4];
  v16 = v10[5];
  if (*(_BYTE *)(v67 + 180))
  {
    *(_BYTE *)(v67 + 180) = 0;
    Espresso::shape_network_recursive((Espresso *)v7, (Espresso::net *)(v7 + 184), 0, 0);
    *(_BYTE *)(v7 + 180) = 0;
    v7 = v67;
  }
  v17 = v14 * v13 * v15 * v16;
  if (*(_DWORD *)(**(_QWORD **)(v7 + 32) + 8))
  {
    if (a3 != 4 * v17)
    {
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -4, "-", "EspressoVisionBlob espresso_vision_classify_descriptor_handler(EspressoNetwork *__strong, EspressoVisionBlob)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 418);
      v56 = __cxa_allocate_exception(8uLL);
      *v56 = 3964;
      __cxa_throw(v56, MEMORY[0x1E0DE4F28], 0);
    }
    v61[0] = v10;
    v61[1] = v9;
    if (v9)
    {
      v18 = (unint64_t *)&v9->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = MEMORY[0x1E0C809B0];
    v60[0] = MEMORY[0x1E0C809B0];
    v60[1] = 3221225472;
    v60[2] = ___Z43espresso_vision_classify_descriptor_handlerP15EspressoNetwork18EspressoVisionBlob_block_invoke_2;
    v60[3] = &__block_descriptor_48_e70_v24__0_shared_ptr_Espresso::blob_float__4____v____shared_weak_count__8l;
    v60[4] = a2;
    v60[5] = a3;
    Espresso::sync_copy_from_host(v61, v60);
    if (v9)
    {
      v21 = (unint64_t *)&v9->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v23 = *(void (****)(uint64_t *__return_ptr, _QWORD))(v67 + 16);
    v59[0] = v20;
    v59[1] = 3221225472;
    v59[2] = ___Z43espresso_vision_classify_descriptor_handlerP15EspressoNetwork18EspressoVisionBlob_block_invoke_3;
    v59[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v59[4] = &v67;
    Espresso::abstract_context::compute_batch_sync(v23, v59);
    v24 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v67 + 40) - 16) + 104);
    v25 = (std::__shared_weak_count *)v24[1];
    v58[0] = *v24;
    v58[1] = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    Espresso::sync_copy_to_host(&v63, v58);
    if (v25)
    {
      v28 = (unint64_t *)&v25->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v30 = 0;
    v31 = *(_QWORD *)(v63 + 24);
    v32 = *(int *)(v63 + 8);
    do
    {
      v32 *= *(int *)(v63 + 12 + v30);
      v30 += 4;
    }
    while (v30 != 12);
    v33 = v64;
    if (v64)
    {
      v34 = (unint64_t *)&v64->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      goto LABEL_46;
    }
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v63, v10, v9);
    if (a3 != 4 * v17)
    {
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -4, "-", "EspressoVisionBlob espresso_vision_classify_descriptor_handler(EspressoNetwork *__strong, EspressoVisionBlob)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 401);
      v57 = __cxa_allocate_exception(8uLL);
      *v57 = 3964;
      __cxa_throw(v57, MEMORY[0x1E0DE4F28], 0);
    }
    memcpy(*(void **)(v63 + 24), a2, a3);
    v36 = *(void (****)(uint64_t *__return_ptr, _QWORD))(v67 + 16);
    v62[0] = MEMORY[0x1E0C809B0];
    v62[1] = 3221225472;
    v62[2] = ___Z43espresso_vision_classify_descriptor_handlerP15EspressoNetwork18EspressoVisionBlob_block_invoke;
    v62[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v62[4] = &v67;
    Espresso::abstract_context::compute_batch_sync(v36, v62);
    v37 = v64;
    if (v64)
    {
      v38 = (unint64_t *)&v64->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 + 40) - 16) + 104), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 + 40) - 16) + 112), 0);
    v41 = *((_QWORD *)v40 + 20);
    v33 = (std::__shared_weak_count *)*((_QWORD *)v40 + 21);
    if (v33)
    {
      v42 = (unint64_t *)&v33->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = 0;
    v31 = *(_QWORD *)(v41 + 24);
    v45 = *(int *)(v41 + 8);
    v46 = v41 + 12;
    do
    {
      v45 *= *(int *)(v46 + v44);
      v44 += 4;
    }
    while (v44 != 12);
    if (v33)
    {
      v47 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v47);
      while (__stlxr(v35 - 1, v47));
LABEL_46:
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  v48 = v66;
  if (v66)
  {
    v49 = (unint64_t *)&v66->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v68;
  if (v68)
  {
    v52 = (unint64_t *)&v68->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }

  return v31;
}

void sub_19171F3FC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 120);

  _Unwind_Resume(a1);
}

void ___Z43espresso_vision_classify_descriptor_handlerP15EspressoNetwork18EspressoVisionBlob_block_invoke(uint64_t a1, _QWORD *a2)
{
  Espresso::net::__forward(**(_QWORD **)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

void ___Z43espresso_vision_classify_descriptor_handlerP15EspressoNetwork18EspressoVisionBlob_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  Espresso::net::__forward(**(_QWORD **)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

id espresso_vision_classify_descriptor_handler_nsdata(EspressoNetwork *a1, NSData *a2)
{
  EspressoNetwork *v3;
  NSData *v4;
  _BYTE *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  _DWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  void (***v21)(uint64_t *__return_ptr, _QWORD);
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void (***v44)(uint64_t *__return_ptr, _QWORD);
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *exception;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD v62[2];
  _QWORD v63[5];
  _QWORD v64[4];
  NSData *v65;
  _QWORD v66[2];
  _QWORD v67[5];
  uint64_t v68;
  std::__shared_weak_count *v69;
  _DWORD *v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;

  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    v72 = 0;
    v73 = 0;
LABEL_62:
    syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -24, "-", "NSData *espresso_vision_classify_descriptor_handler_nsdata(EspressoNetwork *__strong, NSData *__strong)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 439);
    exception = __cxa_allocate_exception(8uLL);
    *exception = 3944;
    __cxa_throw(exception, MEMORY[0x1E0DE4F28], 0);
  }
  -[EspressoNetwork net](v3, "net");
  v5 = (_BYTE *)v72;
  if (!v72)
    goto LABEL_62;
  v6 = *(_QWORD *)(**(_QWORD **)(v72 + 32) + 80);
  v8 = *(_DWORD **)v6;
  v7 = *(std::__shared_weak_count **)(v6 + 8);
  v70 = *(_DWORD **)v6;
  v71 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = v8[2];
  v12 = v8[3];
  v13 = v8[4];
  v14 = v8[5];
  if (*(_BYTE *)(v72 + 180))
  {
    *(_BYTE *)(v72 + 180) = 0;
    Espresso::shape_network_recursive((Espresso *)v5, (Espresso::net *)(v5 + 184), 0, 0);
    v5[180] = 0;
    v5 = (_BYTE *)v72;
  }
  v15 = v12 * v11 * v13 * v14;
  if (*(_DWORD *)(**((_QWORD **)v5 + 4) + 8))
  {
    if (-[NSData length](v4, "length") != 4 * v15)
    {
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -4, "-", "NSData *espresso_vision_classify_descriptor_handler_nsdata(EspressoNetwork *__strong, NSData *__strong)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 471);
      v60 = __cxa_allocate_exception(8uLL);
      *v60 = 3964;
      __cxa_throw(v60, MEMORY[0x1E0DE4F28], 0);
    }
    v66[0] = v8;
    v66[1] = v7;
    if (v7)
    {
      v16 = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = MEMORY[0x1E0C809B0];
    v64[0] = MEMORY[0x1E0C809B0];
    v64[1] = 3221225472;
    v64[2] = ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke_2;
    v64[3] = &unk_1E2DD5A10;
    v65 = v4;
    Espresso::sync_copy_from_host(v66, v64);
    if (v7)
    {
      v19 = (unint64_t *)&v7->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v21 = *(void (****)(uint64_t *__return_ptr, _QWORD))(v72 + 16);
    v63[0] = v18;
    v63[1] = 3221225472;
    v63[2] = ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke_3;
    v63[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v63[4] = &v72;
    Espresso::abstract_context::compute_batch_sync(v21, v63);
    v22 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v72 + 40) - 16) + 104);
    v23 = (std::__shared_weak_count *)v22[1];
    v62[0] = *v22;
    v62[1] = v23;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    Espresso::sync_copy_to_host(&v68, v62);
    if (v23)
    {
      v26 = (unint64_t *)&v23->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v28 = 0;
    v29 = v68;
    *(_BYTE *)(v68 + 32) = 0;
    v30 = *(_QWORD *)(v29 + 24);
    v31 = *(int *)(v29 + 8);
    v32 = v29 + 12;
    do
    {
      v31 *= *(int *)(v32 + v28);
      v28 += 4;
    }
    while (v28 != 12);
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v30, 4 * v31, 1);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v69;
    if (v69)
    {
      v35 = (unint64_t *)&v69->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }

  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v68, v8, v7);
    if (-[NSData length](v4, "length") != 4 * v15)
    {
      syslog(3, "%s error %lld:%s in %s @ %s:%d\n", "-", -4, "-", "NSData *espresso_vision_classify_descriptor_handler_nsdata(EspressoNetwork *__strong, NSData *__strong)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/VisionObjCHelper/EspressoVisionMore.mm", 453);
      v61 = __cxa_allocate_exception(8uLL);
      *v61 = 3964;
      __cxa_throw(v61, MEMORY[0x1E0DE4F28], 0);
    }
    -[NSData getBytes:length:](v4, "getBytes:length:", *(_QWORD *)(v68 + 24), -[NSData length](v4, "length"));
    v44 = *(void (****)(uint64_t *__return_ptr, _QWORD))(v72 + 16);
    v67[0] = MEMORY[0x1E0C809B0];
    v67[1] = 3221225472;
    v67[2] = ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke;
    v67[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v67[4] = &v72;
    Espresso::abstract_context::compute_batch_sync(v44, v67);
    v45 = v69;
    if (v69)
    {
      v46 = (unint64_t *)&v69->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v72 + 40) - 16) + 104), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v72 + 40) - 16) + 112), 0);
    v49 = *((_QWORD *)v48 + 20);
    v50 = (std::__shared_weak_count *)*((_QWORD *)v48 + 21);
    v68 = v49;
    v69 = v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    v53 = 0;
    v54 = *(_QWORD *)(v49 + 24);
    v55 = *(int *)(v49 + 8);
    v56 = v49 + 12;
    do
    {
      v55 *= *(int *)(v56 + v53);
      v53 += 4;
    }
    while (v53 != 12);
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v54, 4 * v55);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    if (v50)
    {
      v57 = (unint64_t *)&v50->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  v37 = v71;
  if (v71)
  {
    v38 = (unint64_t *)&v71->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v73;
  if (v73)
  {
    v41 = (unint64_t *)&v73->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }

  return v33;
}

void sub_19171FA64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 112);

  _Unwind_Resume(a1);
}

void ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke(uint64_t a1, _QWORD *a2)
{
  Espresso::net::__forward(**(_QWORD **)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

uint64_t ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "getBytes:length:", *(_QWORD *)(*(_QWORD *)a2 + 24), objc_msgSend(*(id *)(a1 + 32), "length"));
}

void ___Z50espresso_vision_classify_descriptor_handler_nsdataP15EspressoNetworkP6NSData_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  Espresso::net::__forward(**(_QWORD **)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

BOOL espresso_vision_util_update_metal_priority(EspressoContext *a1, uint64_t a2, uint64_t a3)
{
  EspressoContext *v5;
  EspressoContext *v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *lpsrc;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;

  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    v16 = 0;
LABEL_9:
    v17 = 0;
    v18 = 0;
    goto LABEL_10;
  }
  -[EspressoContext ctx](v5, "ctx");
  if (!lpsrc)
    goto LABEL_9;
  if (!v7)
    goto LABEL_9;
  v17 = v7;
  v18 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
LABEL_10:
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v17 && (*((unsigned __int8 *)v17 + 172) != (_DWORD)a2 || v17[22] != a3))
    (*(void (**)(_QWORD *, uint64_t, uint64_t, float))(*v17 + 16))(v17, a2, a3, 4.0);
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return v17 != 0;
}

void sub_19171FCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

float espresso_vision_compute_pupil_position(EspressoNetwork *a1, vImage_Buffer *a2, const float *a3)
{
  EspressoNetwork *v5;
  uint64_t v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  void (***v26)(uint64_t *__return_ptr, _QWORD);
  float v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD v37[5];
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v5 = a1;
  -[EspressoNetwork net](v5, "net");
  v6 = v42;
  v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(_QWORD *)(**(_QWORD **)(v42 + 32) + 80), *(_QWORD *)(**(_QWORD **)(v42 + 32) + 88), 0);
  if (v7)
  {
    v9 = v7[20];
    v8 = (std::__shared_weak_count *)v7[21];
    v40 = v9;
    v41 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
  }
  else
  {
    v9 = 0;
    v40 = 0;
    v41 = 0;
  }
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 40) - 16) + 104), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 40) - 16) + 112), 0);
  if (v12)
  {
    v14 = *((_QWORD *)v12 + 20);
    v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 21);
    v38 = v14;
    v39 = v13;
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v38 = 0;
    v39 = 0;
  }
  v17 = *(unsigned int *)(v9 + 12);
  if ((int)v17 >= 1)
  {
    v18 = 0;
    v19 = 0;
    LODWORD(v20) = 0;
    v21 = *(unsigned int *)(v9 + 8);
    do
    {
      if ((int)v21 >= 1)
      {
        v20 = (int)v20;
        v22 = (float *)(*(_QWORD *)(v9 + 24) + v18);
        v23 = (unsigned __int8 *)a2->data + a2->rowBytes * v19;
        v24 = v21;
        do
        {
          v25 = *v23++;
          *v22++ = (float)((float)v25 - a3[v20]) / a3[v20 + 2304];
          ++v20;
          --v24;
        }
        while (v24);
      }
      ++v19;
      v18 += 4 * v17;
    }
    while (v19 != v17);
  }
  v26 = *(void (****)(uint64_t *__return_ptr, _QWORD))(v6 + 16);
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 3221225472;
  v37[2] = ___Z38espresso_vision_compute_pupil_positionP15EspressoNetworkP13vImage_BufferPKf_block_invoke;
  v37[3] = &__block_descriptor_40_e10_v16__0r_v8l;
  v37[4] = &v42;
  Espresso::abstract_context::compute_batch_sync(v26, v37);
  v27 = **(float **)(v14 + 24);
  if (v13)
  {
    v28 = (unint64_t *)&v13->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v30 = v41;
  if (v41)
  {
    v31 = (unint64_t *)&v41->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }

  return v27;
}

void sub_19171FF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);

  _Unwind_Resume(a1);
}

void ___Z38espresso_vision_compute_pupil_positionP15EspressoNetworkP13vImage_BufferPKf_block_invoke(uint64_t a1, _QWORD *a2)
{
  Espresso::net::__forward(**(_QWORD **)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

void sub_19171FFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::zephyr_passes::fuse_conv_batchnorm(_QWORD *this, Espresso::zephyr::function_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string **v18;
  char v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  __int128 v24;
  _QWORD v25[3];
  __int128 v26;

  *(_QWORD *)&v26 = *MEMORY[0x1E0C80C00];
  v2 = this + 8;
  v3 = (_QWORD *)this[9];
  if (v3 != this + 8)
  {
    do
    {
      v4 = v3[2];
      v22[0] = &off_1E2DACFE8;
      v22[1] = fuse_batchnorm_tx<Espresso::generic_convolution_kernel>;
      v23 = v22;
      std::string::basic_string[abi:ne180100]<0>(&v24, "convolution");
      std::string::basic_string[abi:ne180100]<0>(v25, "batchnorm");
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = &v15;
      v19 = 0;
      v15 = (std::string *)operator new(0x30uLL);
      v16 = v15;
      v17 = v15 + 2;
      v5 = 0;
      v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v17, &v24, &v26, v15);
      do
      {
        if (SHIBYTE(v25[v5 + 2]) < 0)
          operator delete((void *)v25[v5]);
        v5 -= 3;
      }
      while (v5 != -6);
      *(_QWORD *)&v24 = &off_1E2DB2FD0;
      *((_QWORD *)&v24 + 1) = v22;
      v25[0] = &v24;
      Espresso::zephyr::match_kernel_chain(v4, (uint64_t *)&v15, &v24);
      v6 = (__int128 *)v25[0];
      if ((__int128 *)v25[0] == &v24)
      {
        v6 = &v24;
        v7 = 4;
      }
      else
      {
        if (!v25[0])
          goto LABEL_11;
        v7 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_11:
      v18 = &v15;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      v8 = v23;
      if (v23 == v22)
      {
        v8 = v22;
        v9 = 4;
        goto LABEL_15;
      }
      if (v23)
      {
        v9 = 5;
LABEL_15:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v10 = v3[2];
      v20[0] = &off_1E2DAD098;
      v20[1] = fuse_batchnorm_tx<Espresso::generic_deconvolution_kernel>;
      v21 = v20;
      std::string::basic_string[abi:ne180100]<0>(&v24, "deconvolution");
      std::string::basic_string[abi:ne180100]<0>(v25, "batchnorm");
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = &v15;
      v19 = 0;
      v15 = (std::string *)operator new(0x30uLL);
      v16 = v15;
      v17 = v15 + 2;
      v11 = 0;
      v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v17, &v24, &v26, v15);
      do
      {
        if (SHIBYTE(v25[v11 + 2]) < 0)
          operator delete((void *)v25[v11]);
        v11 -= 3;
      }
      while (v11 != -6);
      *(_QWORD *)&v24 = &off_1E2DB30D8;
      *((_QWORD *)&v24 + 1) = v20;
      v25[0] = &v24;
      Espresso::zephyr::match_kernel_chain(v10, (uint64_t *)&v15, &v24);
      v12 = (__int128 *)v25[0];
      if ((__int128 *)v25[0] == &v24)
      {
        v12 = &v24;
        v13 = 4;
      }
      else
      {
        if (!v25[0])
          goto LABEL_25;
        v13 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_25:
      v18 = &v15;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      this = v21;
      if (v21 == v20)
      {
        this = v20;
        v14 = 4;
        goto LABEL_29;
      }
      if (v21)
      {
        v14 = 5;
LABEL_29:
        this = (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v14))();
      }
      v3 = (_QWORD *)v3[1];
    }
    while (v3 != v2);
  }
  return this;
}

void sub_1917202F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void **a29)
{
  void **p_p;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  p_p = a29;
  if (a29 == &__p)
  {
    v31 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v31 = 5;
  }
  (*((void (**)(void))*p_p + v31))();
LABEL_6:
  a13 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v32 = a18;
  if (a18 == &a15)
  {
    v33 = 4;
    v32 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t fuse_batchnorm_tx<Espresso::generic_convolution_kernel>(char *a1, Espresso::zephyr::node_t *a2, Espresso::zephyr::node_t *a3, uint64_t a4)
{
  Espresso::zephyr::node_t *v8;
  uint64_t matched;
  const char *v10;
  Espresso *v11;
  const char *v12;
  NSObject *v13;
  Espresso *v14;
  const char *v15;
  Espresso *v16;
  const char *v17;
  Espresso *v18;
  const char *v19;
  int *v21;
  const char *v22;
  int *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t i;
  unint64_t v27;
  uint64_t (*v28)(Espresso::zephyr::node_t *);
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  float *v33;
  int v34;
  uint64_t v35;
  const float *v36;
  float *v37;
  const float *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  Espresso::zephyr::value_t **v49;
  Espresso *v50;
  const char *v51;
  NSObject *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD v55[2];
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[16];
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _BYTE buf[12];
  __int16 v66;
  _BYTE v67[14];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if ((Espresso::zephyr::match_standalone_conv((Espresso::zephyr *)a1, a2) & 1) == 0)
  {
    matched = Espresso::zephyr::match_standalone_deconv((Espresso::zephyr *)a1, v8);
    if ((matched & 1) == 0)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)matched, v10);
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_aff"
                               "ine_simple_fusions.mm";
          v66 = 1024;
          *(_DWORD *)v67 = 347;
          *(_WORD *)&v67[4] = 2080;
          *(_QWORD *)&v67[6] = "match_standalone_conv(conv.node, true) || match_standalone_deconv(conv.node, true)";
          _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_26;
      }
      return 0;
    }
  }
  v11 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 384))(a4);
  if (*((_DWORD *)v11 + 1))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v11, v12);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        v66 = 1024;
        *(_DWORD *)v67 = 348;
        *(_WORD *)&v67[4] = 2080;
        *(_QWORD *)&v67[6] = "bn.kernel->get_params().training == 0";
        _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_26:

      return 0;
    }
    return 0;
  }
  v14 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 384))(a4);
  if (*((_DWORD *)v14 + 7))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v14, v15);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        v66 = 1024;
        *(_DWORD *)v67 = 349;
        *(_WORD *)&v67[4] = 2080;
        *(_QWORD *)&v67[6] = "bn.kernel->get_params().fused_relu == 0";
        _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  v16 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 384))(a4);
  if (*((_DWORD *)v16 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        v66 = 1024;
        *(_DWORD *)v67 = 350;
        *(_WORD *)&v67[4] = 2080;
        *(_QWORD *)&v67[6] = "bn.kernel->get_params().fused_tanh == 0";
        _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  v18 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 384))(a4);
  if (*((_DWORD *)v18 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v18, v19);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        v66 = 1024;
        *(_DWORD *)v67 = 351;
        *(_WORD *)&v67[4] = 2080;
        *(_QWORD *)&v67[6] = "bn.kernel->get_params().training_instancenorm == 0";
        _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  v21 = (int *)Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>((uint64_t)a1);
  v23 = v21;
  if (v21)
  {
    v21 = (int *)(*(uint64_t (**)(int *))(*(_QWORD *)v21 + 384))(v21);
    if (v21[29] >= 2)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v21, v22);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        v66 = 1024;
        *(_DWORD *)v67 = 354;
        *(_WORD *)&v67[4] = 2080;
        *(_QWORD *)&v67[6] = "!deconv_kernel || deconv_kernel->get_params().n_groups <= 1";
        _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
  }
  Espresso::espresso_os_log_subsystem((Espresso *)v21, v22);
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    v53 = a1 + 144;
    if (a1[167] < 0)
      v53 = (_QWORD *)*v53;
    v54 = (*(uint64_t (**)(Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 272))(a2);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v53;
    v66 = 2080;
    *(_QWORD *)v67 = v54;
    _os_log_debug_impl(&dword_190DAF000, v24, OS_LOG_TYPE_DEBUG, "fuse_conv_batchnorm: %s kernel_type=%s", buf, 0x16u);
  }

  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a4 + 408))(v64, a4);
  Espresso::blob<float,1>::make(v63, *(_DWORD *)(v64[0] + 8));
  memcpy(*(void **)(v63[0] + 16), *(const void **)(v64[0] + 16), 4 * *(int *)(v64[0] + 8));
  (*(void (**)(_QWORD *__return_ptr, Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 448))(v62, a2);
  if (v62[0])
  {
    v25 = 0;
    for (i = 0;
          i < *(int *)((*(uint64_t (**)(Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 384))(a2) + 40);
          ++i)
    {
      v27 = (16 * (((unint64_t)(v25 & 0xFFFFFFFC) >> 2) & 0x3FFFFFFF)) | 8;
      *(float *)(*(_QWORD *)(v63[0] + 16) + v27) = *(float *)(*(_QWORD *)(v64[0] + 16) + v27)
                                                   - *(float *)(*(_QWORD *)(v62[0] + 16) + v25);
      v25 += 4;
    }
  }
  Espresso::scoped_conv_weight_dequantizer::scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v61, a2);
  (*(void (**)(uint64_t *__return_ptr, Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 488))(&v59, a2);
  (*(void (**)(uint64_t *__return_ptr, Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 472))(&v57, a2);
  v28 = *(uint64_t (**)(Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 384);
  if (v23)
  {
    v29 = *(unsigned int *)(v28(a2) + 40);
    v30 = *(_DWORD *)(v57 + 8);
    v31 = *(_DWORD *)(v57 + 12);
    v32 = *(_DWORD *)(v57 + 20);
    (*(void (**)(_BYTE *__return_ptr, Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 456))(buf, a2);
    v34 = v31 * v30;
    v35 = *(_QWORD *)(*(_QWORD *)buf + 24);
    v36 = *(const float **)(v57 + 24);
    v37 = *(float **)(v63[0] + 16);
    v38 = *(const float **)(v59 + 16);
    v39 = v29;
    v40 = v32;
  }
  else
  {
    v41 = *(unsigned int *)(v28(a2) + 40);
    v42 = *(_DWORD *)(v57 + 8);
    v43 = *(_DWORD *)(v57 + 12);
    v44 = *(_DWORD *)(v57 + 16);
    (*(void (**)(_BYTE *__return_ptr, Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 456))(buf, a2);
    v34 = v43 * v42 * v44;
    v35 = *(_QWORD *)(*(_QWORD *)buf + 24);
    v36 = *(const float **)(v57 + 24);
    v37 = *(float **)(v63[0] + 16);
    v38 = *(const float **)(v59 + 16);
    v39 = v41;
    v40 = 1;
  }
  Espresso::util_bake_batchnorm_generic(v39, v34, v40, v35, v36, v37, v38, v33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
  v56[0] = v57;
  v56[1] = v58;
  if (v58)
  {
    v45 = (unint64_t *)(v58 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  (*(void (**)(Espresso::zephyr::node_t *, _QWORD *))(*(_QWORD *)a2 + 400))(a2, v56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v56);
  v55[0] = v59;
  v55[1] = v60;
  if (v60)
  {
    v47 = (unint64_t *)(v60 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  (*(void (**)(Espresso::zephyr::node_t *, _QWORD *))(*(_QWORD *)a2 + 392))(a2, v55);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v55);
  v49 = (Espresso::zephyr::value_t **)*((_QWORD *)a3 + 12);
  if (*((Espresso::zephyr::value_t ***)a3 + 13) == v49)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::node_t::replace_output_at((uint64_t)a1, 0, *v49);
  v50 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(a3);
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v50, v51);
    v52 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_"
                           "simple_fusions.mm";
      v66 = 1024;
      *(_DWORD *)v67 = 405;
      _os_log_impl(&dword_190DAF000, v52, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }

  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v57);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v59);
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v61);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v62);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v63);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v64);
  return 1;
}

void sub_191720C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  va_list va3;
  uint64_t v17;
  uint64_t v18;
  va_list va4;
  uint64_t v20;
  va_list va5;

  va_start(va5, a5);
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v15 = va_arg(va4, _QWORD);
  v17 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v18 = va_arg(va5, _QWORD);
  v20 = va_arg(va5, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va5);
  _Unwind_Resume(a1);
}

uint64_t fuse_batchnorm_tx<Espresso::generic_deconvolution_kernel>(char *a1, Espresso::zephyr::node_t *a2, Espresso::zephyr::node_t *a3, uint64_t a4)
{
  Espresso::zephyr::node_t *v8;
  uint64_t matched;
  const char *v10;
  Espresso *v11;
  const char *v12;
  NSObject *v13;
  Espresso *v14;
  const char *v15;
  Espresso *v16;
  const char *v17;
  Espresso *v18;
  const char *v19;
  int *v21;
  const char *v22;
  int *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t i;
  unint64_t v27;
  uint64_t (*v28)(Espresso::zephyr::node_t *);
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  float *v33;
  int v34;
  uint64_t v35;
  const float *v36;
  float *v37;
  const float *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  Espresso::zephyr::value_t **v49;
  Espresso *v50;
  const char *v51;
  NSObject *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD v55[2];
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[16];
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  _BYTE buf[12];
  __int16 v66;
  _BYTE v67[14];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if ((Espresso::zephyr::match_standalone_conv((Espresso::zephyr *)a1, a2) & 1) == 0)
  {
    matched = Espresso::zephyr::match_standalone_deconv((Espresso::zephyr *)a1, v8);
    if ((matched & 1) == 0)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem((Espresso *)matched, v10);
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_aff"
                               "ine_simple_fusions.mm";
          v66 = 1024;
          *(_DWORD *)v67 = 347;
          *(_WORD *)&v67[4] = 2080;
          *(_QWORD *)&v67[6] = "match_standalone_conv(conv.node, true) || match_standalone_deconv(conv.node, true)";
          _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_26;
      }
      return 0;
    }
  }
  v11 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 384))(a4);
  if (*((_DWORD *)v11 + 1))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v11, v12);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        v66 = 1024;
        *(_DWORD *)v67 = 348;
        *(_WORD *)&v67[4] = 2080;
        *(_QWORD *)&v67[6] = "bn.kernel->get_params().training == 0";
        _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_26:

      return 0;
    }
    return 0;
  }
  v14 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 384))(a4);
  if (*((_DWORD *)v14 + 7))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v14, v15);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        v66 = 1024;
        *(_DWORD *)v67 = 349;
        *(_WORD *)&v67[4] = 2080;
        *(_QWORD *)&v67[6] = "bn.kernel->get_params().fused_relu == 0";
        _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  v16 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 384))(a4);
  if (*((_DWORD *)v16 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v16, v17);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        v66 = 1024;
        *(_DWORD *)v67 = 350;
        *(_WORD *)&v67[4] = 2080;
        *(_QWORD *)&v67[6] = "bn.kernel->get_params().fused_tanh == 0";
        _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  v18 = (Espresso *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 384))(a4);
  if (*((_DWORD *)v18 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v18, v19);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        v66 = 1024;
        *(_DWORD *)v67 = 351;
        *(_WORD *)&v67[4] = 2080;
        *(_QWORD *)&v67[6] = "bn.kernel->get_params().training_instancenorm == 0";
        _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
    return 0;
  }
  v21 = (int *)Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>((uint64_t)a1);
  v23 = v21;
  if (v21)
  {
    v21 = (int *)(*(uint64_t (**)(int *))(*(_QWORD *)v21 + 384))(v21);
    if (v21[29] >= 2)
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v21, v22);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        v66 = 1024;
        *(_DWORD *)v67 = 354;
        *(_WORD *)&v67[4] = 2080;
        *(_QWORD *)&v67[6] = "!deconv_kernel || deconv_kernel->get_params().n_groups <= 1";
        _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_26;
    }
  }
  Espresso::espresso_os_log_subsystem((Espresso *)v21, v22);
  v24 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    v53 = a1 + 144;
    if (a1[167] < 0)
      v53 = (_QWORD *)*v53;
    v54 = (*(uint64_t (**)(Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 272))(a2);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v53;
    v66 = 2080;
    *(_QWORD *)v67 = v54;
    _os_log_debug_impl(&dword_190DAF000, v24, OS_LOG_TYPE_DEBUG, "fuse_conv_batchnorm: %s kernel_type=%s", buf, 0x16u);
  }

  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a4 + 408))(v64, a4);
  Espresso::blob<float,1>::make(v63, *(_DWORD *)(v64[0] + 8));
  memcpy(*(void **)(v63[0] + 16), *(const void **)(v64[0] + 16), 4 * *(int *)(v64[0] + 8));
  (*(void (**)(_QWORD *__return_ptr, Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 448))(v62, a2);
  if (v62[0])
  {
    v25 = 0;
    for (i = 0;
          i < *(int *)((*(uint64_t (**)(Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 384))(a2) + 40);
          ++i)
    {
      v27 = (16 * (((unint64_t)(v25 & 0xFFFFFFFC) >> 2) & 0x3FFFFFFF)) | 8;
      *(float *)(*(_QWORD *)(v63[0] + 16) + v27) = *(float *)(*(_QWORD *)(v64[0] + 16) + v27)
                                                   - *(float *)(*(_QWORD *)(v62[0] + 16) + v25);
      v25 += 4;
    }
  }
  Espresso::scoped_conv_weight_dequantizer::scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v61, a2);
  (*(void (**)(uint64_t *__return_ptr, Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 488))(&v59, a2);
  (*(void (**)(uint64_t *__return_ptr, Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 472))(&v57, a2);
  v28 = *(uint64_t (**)(Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 384);
  if (v23)
  {
    v29 = *(unsigned int *)(v28(a2) + 40);
    v30 = *(_DWORD *)(v57 + 8);
    v31 = *(_DWORD *)(v57 + 12);
    v32 = *(_DWORD *)(v57 + 20);
    (*(void (**)(_BYTE *__return_ptr, Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 456))(buf, a2);
    v34 = v31 * v30;
    v35 = *(_QWORD *)(*(_QWORD *)buf + 24);
    v36 = *(const float **)(v57 + 24);
    v37 = *(float **)(v63[0] + 16);
    v38 = *(const float **)(v59 + 16);
    v39 = v29;
    v40 = v32;
  }
  else
  {
    v41 = *(unsigned int *)(v28(a2) + 40);
    v42 = *(_DWORD *)(v57 + 8);
    v43 = *(_DWORD *)(v57 + 12);
    v44 = *(_DWORD *)(v57 + 16);
    (*(void (**)(_BYTE *__return_ptr, Espresso::zephyr::node_t *))(*(_QWORD *)a2 + 456))(buf, a2);
    v34 = v43 * v42 * v44;
    v35 = *(_QWORD *)(*(_QWORD *)buf + 24);
    v36 = *(const float **)(v57 + 24);
    v37 = *(float **)(v63[0] + 16);
    v38 = *(const float **)(v59 + 16);
    v39 = v41;
    v40 = 1;
  }
  Espresso::util_bake_batchnorm_generic(v39, v34, v40, v35, v36, v37, v38, v33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
  v56[0] = v57;
  v56[1] = v58;
  if (v58)
  {
    v45 = (unint64_t *)(v58 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  (*(void (**)(Espresso::zephyr::node_t *, _QWORD *))(*(_QWORD *)a2 + 400))(a2, v56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v56);
  v55[0] = v59;
  v55[1] = v60;
  if (v60)
  {
    v47 = (unint64_t *)(v60 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  (*(void (**)(Espresso::zephyr::node_t *, _QWORD *))(*(_QWORD *)a2 + 392))(a2, v55);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v55);
  v49 = (Espresso::zephyr::value_t **)*((_QWORD *)a3 + 12);
  if (*((Espresso::zephyr::value_t ***)a3 + 13) == v49)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::node_t::replace_output_at((uint64_t)a1, 0, *v49);
  v50 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(a3);
  if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v50, v51);
    v52 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_"
                           "simple_fusions.mm";
      v66 = 1024;
      *(_DWORD *)v67 = 405;
      _os_log_impl(&dword_190DAF000, v52, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }

  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v57);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v59);
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v61);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v62);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v63);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v64);
  return 1;
}

void sub_19172153C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  va_list va3;
  uint64_t v17;
  uint64_t v18;
  va_list va4;
  uint64_t v20;
  va_list va5;

  va_start(va5, a5);
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v15 = va_arg(va4, _QWORD);
  v17 = va_arg(va4, _QWORD);
  va_copy(va5, va4);
  v18 = va_arg(va5, _QWORD);
  v20 = va_arg(va5, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va5);
  _Unwind_Resume(a1);
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB30D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB30D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>(v4);
  v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_batchnorm_kernel>(v6);
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_28generic_deconvolution_kernelENS_24generic_batchnorm_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAD098;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAD098;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, a2[1], *a3, a3[1]);
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"PFbN8Espresso6zephyr19match_kernel_info_tINS_28generic_deconvolution_kernelEEENS1_INS_24generic_batchnorm_kernelEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::target_type()
{
}

Espresso::scoped_conv_weight_dequantizer *Espresso::scoped_conv_weight_dequantizer::scoped_conv_weight_dequantizer(Espresso::scoped_conv_weight_dequantizer *this, Espresso::generic_convolution_kernel *a2)
{
  _BOOL4 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  vImagePixelCount v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *height;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  vImage_Buffer dest;
  vImage_Buffer src;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = a2;
  (*(void (**)(vImage_Buffer *__return_ptr, Espresso::generic_convolution_kernel *))(*(_QWORD *)a2 + 456))(&src, a2);
  v3 = 0;
  if (!src.data)
  {
    (*(void (**)(vImage_Buffer *__return_ptr))(**((_QWORD **)this + 1) + 552))(&dest);
    height = (std::__shared_weak_count *)dest.height;
    v3 = dest.data != 0;
    if (dest.height)
    {
      v30 = (unint64_t *)(dest.height + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
        std::__shared_weak_count::__release_weak(height);
      }
    }
  }
  v4 = (std::__shared_weak_count *)src.height;
  if (!src.height)
    goto LABEL_6;
  v5 = (unint64_t *)(src.height + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      return this;
  }
  else
  {
LABEL_6:
    if (!v3)
      return this;
  }
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 472))(&v39);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 552))(&v37);
  v7 = 0;
  v8 = *(void **)(v39 + 24);
  v9 = *(int *)(v39 + 8);
  do
  {
    v9 *= *(int *)(v39 + 12 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  src.data = *(void **)(v37 + 24);
  src.height = 1;
  src.width = v9;
  src.rowBytes = 2 * v9;
  dest.data = v8;
  dest.height = 1;
  dest.width = v9;
  dest.rowBytes = 4 * v9;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  v10 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *((_QWORD *)this + 1);
  v35 = v39;
  v36 = v40;
  if (v40)
  {
    v14 = (unint64_t *)&v40->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 400))(v13, &v35);
  v16 = v36;
  if (v36)
  {
    v17 = (unint64_t *)&v36->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *((_QWORD *)this + 1);
  v33 = 0;
  v34 = 0;
  src.data = 0;
  src.height = 0;
  (*(void (**)(uint64_t, uint64_t *, vImage_Buffer *))(*(_QWORD *)v19 + 544))(v19, &v33, &src);
  v20 = (std::__shared_weak_count *)src.height;
  if (src.height)
  {
    v21 = (unint64_t *)(src.height + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v34;
  if (v34)
  {
    v24 = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_BYTE *)this = 1;
  v26 = v40;
  if (v40)
  {
    v27 = (unint64_t *)&v40->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return this;
}

void sub_191721AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer(Espresso::scoped_conv_weight_dequantizer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  int *v6;
  _WORD *v7;
  uint64_t v8;
  int v9;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  if (*(_BYTE *)this)
  {
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 456))(&v38);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v40, v38 + 8);
    v2 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 456))(&v38);
    v5 = 0;
    v6 = *(int **)(v38 + 24);
    v7 = *(_WORD **)(v40 + 24);
    v8 = *(int *)(v40 + 8);
    do
    {
      v8 *= *(int *)(v40 + 12 + v5);
      v5 += 4;
    }
    while (v5 != 12);
    for (; v8; --v8)
    {
      v9 = *v6++;
      _S0 = v9;
      __asm { FCVT            H0, S0 }
      *v7++ = _S0;
    }
    v15 = v39;
    if (v39)
    {
      v16 = (unint64_t *)&v39->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = *((_QWORD *)this + 1);
    v36 = v40;
    v37 = v41;
    if (v41)
    {
      v19 = (unint64_t *)&v41->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v38 = 0;
    v39 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v18 + 544))(v18, &v36, &v38);
    v21 = v39;
    if (v39)
    {
      v22 = (unint64_t *)&v39->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v37;
    if (v37)
    {
      v25 = (unint64_t *)&v37->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = *((_QWORD *)this + 1);
    v34 = 0;
    v35 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 400))(v27, &v34);
    v28 = v35;
    if (v35)
    {
      v29 = (unint64_t *)&v35->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v41;
    if (v41)
    {
      v32 = (unint64_t *)&v41->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB2FD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB2FD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(v4);
  v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_batchnorm_kernel>(v6);
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_26generic_convolution_kernelENS_24generic_batchnorm_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_batchnorm_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACFE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACFE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, a2[1], *a3, a3[1]);
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"PFbN8Espresso6zephyr19match_kernel_info_tINS_26generic_convolution_kernelEEENS1_INS_24generic_batchnorm_kernelEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_batchnorm_kernel>)>::target_type()
{
}

void sub_191721FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char matched;
  _QWORD *v8;
  uint64_t v9;
  char v11;
  char v12;
  char v13;
  char v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v6 = operator new(0x28uLL);
      *v6 = &off_1E2DB07F0;
      v6[1] = &v14;
      v6[2] = &v13;
      v6[3] = &v12;
      v6[4] = &v11;
      v16 = v6;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v15);
      v8 = v16;
      if (v16 == v15)
        break;
      if (v16)
      {
        v9 = 5;
LABEL_7:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v8 = v15;
    v9 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_1917220DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DB07F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB07F0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  int matched;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v39 = v38;
  v36[0] = &off_1E2DB06E8;
  v37 = v36;
  v38[0] = &off_1E2DB0690;
  matched = match_transform_affine_addmul_biaslike((uint64_t)v2, 1u, 1u, (uint64_t)v38, (uint64_t)v36);
  v4 = v37;
  if (v37 == v36)
  {
    v5 = 4;
    v4 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v39;
  if (v39 == v38)
  {
    v7 = 4;
    v6 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v35 = v34;
  v32[0] = &off_1E2DB0798;
  v33 = v32;
  v34[0] = &off_1E2DB0740;
  v8 = match_transform_affine_addmul_biaslike((uint64_t)v2, 1u, 1u, (uint64_t)v34, (uint64_t)v32);
  v9 = v33;
  if (v33 == v32)
  {
    v10 = 4;
    v9 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_16;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  v11 = v35;
  if (v35 == v34)
  {
    v12 = 4;
    v11 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_21;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_21:
  v30[0] = &off_1E2DB0690;
  v31 = v30;
  v28[0] = &off_1E2DB06E8;
  v29 = v28;
  v13 = match_transform_affine_addmul_scalar(v2, 3, (uint64_t)v30, (uint64_t)v28);
  v14 = v29;
  if (v29 == v28)
  {
    v15 = 4;
    v14 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_26:
  v16 = v31;
  if (v31 == v30)
  {
    v17 = 4;
    v16 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_31;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_31:
  v27 = v26;
  v24[0] = &off_1E2DB0798;
  v25 = v24;
  v26[0] = &off_1E2DB0740;
  v18 = match_transform_affine_addmul_scalar(v2, 3, (uint64_t)v26, (uint64_t)v24);
  v19 = v25;
  if (v25 == v24)
  {
    v20 = 4;
    v19 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_36;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_36:
  v21 = v27;
  if (v27 == v26)
  {
    v22 = 4;
    v21 = v26;
    goto LABEL_40;
  }
  if (v27)
  {
    v22 = 5;
LABEL_40:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  return matched | v8 | v13 | v18;
}

void sub_191722468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  char *v33;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v35 = a13;
  if (a13 == v33)
  {
    v36 = 4;
    v35 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_6:
  v37 = a17;
  if (a17 == &a14)
  {
    v38 = 4;
    v37 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes17fuse_affine_scaleERNS_6zephyr10function_tEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t match_transform_affine_addmul_biaslike(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  Espresso *v9;
  const char *v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  Espresso::zephyr::node_t *v15;
  unint64_t matched;
  const char *v17;
  unint64_t v18;
  Espresso *v19;
  const char *v20;
  Espresso *v21;
  const char *v22;
  Espresso *v23;
  uint64_t v24;
  Espresso *v25;
  const char *v26;
  Espresso::zephyr::value_t **v27;
  Espresso *v28;
  const char *v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  _BYTE buf[12];
  __int16 v41;
  int v42;
  __int16 v43;
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  v39 = (_QWORD *)a1;
  v37 = 0;
  *(_QWORD *)buf = a1;
  if (!a4)
    std::__throw_bad_function_call[abi:ne180100]();
  v9 = (Espresso *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 48))(a4, buf);
  if ((v9 & 1) == 0)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_56;
    Espresso::espresso_os_log_subsystem(v9, v10);
    v31 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      goto LABEL_54;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    v41 = 1024;
    v42 = 135;
    v43 = 2080;
    v44 = "match_affine(root)";
LABEL_53:
    _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    goto LABEL_54;
  }
  if (v39[16] - v39[15] != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_56;
    Espresso::espresso_os_log_subsystem(v9, v10);
    v31 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      goto LABEL_54;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    v41 = 1024;
    v42 = 137;
    v43 = 2080;
    v44 = "root->inputs().size() == 1";
    goto LABEL_53;
  }
  v11 = (char *)v39[12];
  v12 = (char *)v39[13];
  if (v12 - v11 != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_56;
    Espresso::espresso_os_log_subsystem(v9, v10);
    v31 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      goto LABEL_54;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    v41 = 1024;
    v42 = 138;
    v43 = 2080;
    v44 = "root->outputs().size() == 1";
    goto LABEL_53;
  }
  if (v12 == v11)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v14 = *(_QWORD *)v11 + 56;
  v13 = *(uint64_t **)v14;
  if (*(_QWORD *)(v14 + 8) - *(_QWORD *)v14 != 16)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_56;
    Espresso::espresso_os_log_subsystem(v9, v10);
    v31 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      goto LABEL_54;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    v41 = 1024;
    v42 = 139;
    v43 = 2080;
    v44 = "root->output()->uses().size() == 1";
    goto LABEL_53;
  }
  v15 = (Espresso::zephyr::node_t *)*v13;
  matched = (unint64_t)Espresso::zephyr::match_simple_eltwise_binop(*v13, a2);
  v18 = matched;
  if (a2 == a3)
  {
    if (matched)
      goto LABEL_9;
    goto LABEL_35;
  }
  matched = (unint64_t)Espresso::zephyr::match_simple_eltwise_binop((uint64_t)v15, a3);
  if (!(v18 | matched))
  {
LABEL_35:
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_56;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v17);
    v31 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      goto LABEL_54;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    v41 = 1024;
    v42 = 145;
    v43 = 2080;
    v44 = "elementwise_match";
    goto LABEL_53;
  }
LABEL_9:
  if (*((_QWORD *)v15 + 13) - *((_QWORD *)v15 + 12) != 8)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_56;
    Espresso::espresso_os_log_subsystem((Espresso *)matched, v17);
    v31 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      goto LABEL_54;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    v41 = 1024;
    v42 = 147;
    v43 = 2080;
    v44 = "elementwise->outputs().size() == 1";
    goto LABEL_53;
  }
  v19 = (Espresso *)*((_QWORD *)v15 + 15);
  v20 = (const char *)*((_QWORD *)v15 + 16);
  if (v20 - (const char *)v19 != 16)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_56;
    Espresso::espresso_os_log_subsystem(v19, v20);
    v31 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      goto LABEL_54;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    v41 = 1024;
    v42 = 148;
    v43 = 2080;
    v44 = "elementwise->inputs().size() == 2";
    goto LABEL_53;
  }
  v21 = (Espresso *)Espresso::zephyr::match_any_input_of<match_transform_affine_addmul_biaslike(Espresso::zephyr::node_t *,Espresso::ELEMENTWISE_OPERATION,Espresso::ELEMENTWISE_OPERATION,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>)::$_0>((uint64_t)v19, (uint64_t)v20, &v37, (uint64_t)&v39);
  v23 = v21;
  if (!v21)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_56;
    Espresso::espresso_os_log_subsystem(0, v22);
    v31 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      goto LABEL_54;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    v41 = 1024;
    v42 = 174;
    v43 = 2080;
    v44 = "constant != nullptr";
    goto LABEL_53;
  }
  if (!v37)
  {
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_56;
    Espresso::espresso_os_log_subsystem(v21, v22);
    v31 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      goto LABEL_54;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    v41 = 1024;
    v42 = 176;
    v43 = 2080;
    v44 = "_constant_blob != nullptr";
    goto LABEL_53;
  }
  *(_QWORD *)buf = a1;
  v24 = *(_QWORD *)(a5 + 24);
  if (!v24)
    std::__throw_bad_function_call[abi:ne180100]();
  v25 = (Espresso *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v24 + 48))(v24, buf, &v37);
  if ((v25 & 1) != 0)
  {
    v27 = (Espresso::zephyr::value_t **)*((_QWORD *)v15 + 12);
    if (*((Espresso::zephyr::value_t ***)v15 + 13) == v27
      || (Espresso::zephyr::node_t::replace_output_at(a1, 0, *v27),
          v28 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v15),
          v30 = *((_QWORD *)v23 + 12),
          *((_QWORD *)v23 + 13) == v30))
    {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(_QWORD *)(*(_QWORD *)v30 + 56) == *(_QWORD *)(*(_QWORD *)v30 + 64))
      v28 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v23);
    if (!Espresso::zephyr::match_verbose)
    {
      v32 = 1;
      goto LABEL_57;
    }
    Espresso::espresso_os_log_subsystem(v28, v29);
    v31 = objc_claimAutoreleasedReturnValue();
    v32 = 1;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_"
                           "simple_fusions.mm";
      v41 = 1024;
      v42 = 186;
      _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
    }
    goto LABEL_55;
  }
  if (!Espresso::zephyr::match_verbose)
  {
LABEL_56:
    v32 = 0;
    goto LABEL_57;
  }
  Espresso::espresso_os_log_subsystem(v25, v26);
  v31 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    v41 = 1024;
    v42 = 178;
    v43 = 2080;
    v44 = "transform_affine(affine, _constant_blob)";
    goto LABEL_53;
  }
LABEL_54:
  v32 = 0;
LABEL_55:

LABEL_57:
  v33 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return v32;
}

void sub_191722D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

Espresso *match_transform_affine_addmul_scalar(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  Espresso *v7;
  const char *v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  Espresso::zephyr::node_t *v13;
  Espresso *matched;
  const char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  Espresso *v19;
  const char *v20;
  Espresso *v21;
  Espresso::zephyr::value_t **v22;
  Espresso *v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  NSObject *v29;
  _QWORD v31[2];
  _BYTE buf[12];
  __int16 v33;
  int v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)buf = a1;
  if (!a3)
    std::__throw_bad_function_call[abi:ne180100]();
  v7 = (Espresso *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a3 + 48))(a3, buf);
  if ((v7 & 1) != 0)
  {
    if (a1[16] - a1[15] == 8)
    {
      v9 = (char *)a1[12];
      v10 = (char *)a1[13];
      if (v10 - v9 == 8)
      {
        if (v10 == v9)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v12 = *(_QWORD *)v9 + 56;
        v11 = *(uint64_t **)v12;
        if (*(_QWORD *)(v12 + 8) - *(_QWORD *)v12 == 16)
        {
          v13 = (Espresso::zephyr::node_t *)*v11;
          matched = (Espresso *)Espresso::zephyr::match_simple_eltwise_unaryop(*v11, a2);
          if (matched)
          {
            if (*((_QWORD *)v13 + 13) - *((_QWORD *)v13 + 12) == 8)
            {
              if (*((_QWORD *)v13 + 16) - *((_QWORD *)v13 + 15) == 8)
              {
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(v31, 1, 1, 1, 1);
                v16 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>((uint64_t)v13);
                v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 320))(v16);
                **(_DWORD **)(v31[0] + 24) = *(_DWORD *)(v17 + 8);
                *(_QWORD *)buf = a1;
                v18 = *(_QWORD *)(a4 + 24);
                if (!v18)
                  std::__throw_bad_function_call[abi:ne180100]();
                v19 = (Espresso *)(*(uint64_t (**)(uint64_t, _BYTE *, _QWORD *))(*(_QWORD *)v18 + 48))(v18, buf, v31);
                v21 = v19;
                if ((v19 & 1) != 0)
                {
                  v22 = (Espresso::zephyr::value_t **)*((_QWORD *)v13 + 12);
                  if (*((Espresso::zephyr::value_t ***)v13 + 13) == v22)
                    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
                  Espresso::zephyr::node_t::replace_output_at((uint64_t)a1, 0, *v22);
                  v23 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v13);
                  if (!Espresso::zephyr::match_verbose)
                    goto LABEL_51;
                  Espresso::espresso_os_log_subsystem(v23, v24);
                  v25 = objc_claimAutoreleasedReturnValue();
                  if (!os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
                    goto LABEL_50;
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pa"
                                       "sses_affine_simple_fusions.mm";
                  v33 = 1024;
                  v34 = 217;
                  v26 = "ZEPHYR_MATCH_PASS %s:%d\n";
                  v27 = v25;
                  v28 = 18;
                }
                else
                {
                  if (!Espresso::zephyr::match_verbose)
                  {
LABEL_51:
                    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v31);
                    return v21;
                  }
                  Espresso::espresso_os_log_subsystem(v19, v20);
                  v25 = objc_claimAutoreleasedReturnValue();
                  if (!os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
                  {
LABEL_50:

                    goto LABEL_51;
                  }
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pa"
                                       "sses_affine_simple_fusions.mm";
                  v33 = 1024;
                  v34 = 212;
                  v35 = 2080;
                  v36 = "transform_affine(affine, constant)";
                  v26 = "ZEPHYR_MATCH_FAIL %s:%d '%s'\n";
                  v27 = v25;
                  v28 = 28;
                }
                _os_log_impl(&dword_190DAF000, v27, OS_LOG_TYPE_INFO, v26, buf, v28);
                goto LABEL_50;
              }
              if (Espresso::zephyr::match_verbose)
              {
                Espresso::espresso_os_log_subsystem(matched, v15);
                v29 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136315650;
                  *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pa"
                                       "sses_affine_simple_fusions.mm";
                  v33 = 1024;
                  v34 = 208;
                  v35 = 2080;
                  v36 = "elementwise->inputs().size() == 1";
                  _os_log_impl(&dword_190DAF000, v29, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
                }
LABEL_43:

              }
            }
            else if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem(matched, v15);
              v29 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/pass"
                                     "es_affine_simple_fusions.mm";
                v33 = 1024;
                v34 = 207;
                v35 = 2080;
                v36 = "elementwise->outputs().size() == 1";
                _os_log_impl(&dword_190DAF000, v29, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
              }
              goto LABEL_43;
            }
          }
          else if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(0, v15);
            v29 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes"
                                   "_affine_simple_fusions.mm";
              v33 = 1024;
              v34 = 206;
              v35 = 2080;
              v36 = "elementwise_match";
              _os_log_impl(&dword_190DAF000, v29, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_43;
          }
        }
        else if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v7, v8);
          v29 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_a"
                                 "ffine_simple_fusions.mm";
            v33 = 1024;
            v34 = 202;
            v35 = 2080;
            v36 = "root->output()->uses().size() == 1";
            _os_log_impl(&dword_190DAF000, v29, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_43;
        }
      }
      else if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v7, v8);
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_aff"
                               "ine_simple_fusions.mm";
          v33 = 1024;
          v34 = 201;
          v35 = 2080;
          v36 = "root->outputs().size() == 1";
          _os_log_impl(&dword_190DAF000, v29, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }
        goto LABEL_43;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v7, v8);
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        v33 = 1024;
        v34 = 200;
        v35 = 2080;
        v36 = "root->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v29, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_43;
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(v7, v8);
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_"
                           "simple_fusions.mm";
      v33 = 1024;
      v34 = 198;
      v35 = 2080;
      v36 = "match_affine(root)";
      _os_log_impl(&dword_190DAF000, v29, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
    goto LABEL_43;
  }
  return 0;
}

void sub_1917233C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB0798;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB0798;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  Espresso *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  vDSP_Length v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  _BYTE buf[18];
  __int16 v55;
  const char *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*a2);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 432))(&v52);
  (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v5 + 424))(&v50, v5);
  v6 = (Espresso *)(*(_QWORD *(**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v5 + 416))(&v48, v5);
  v8 = 0;
  v9 = *(int *)(*(_QWORD *)a3 + 8);
  v10 = v9;
  do
  {
    v10 *= *(int *)(*(_QWORD *)a3 + 12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  if (((v10 ^ *(int *)(v52 + 8)) & 0x3FFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_7;
  for (i = 0; i != 12; i += 4)
    v9 *= *(int *)(*(_QWORD *)a3 + 12 + i);
  if (v9 != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 485;
        v55 = 2080;
        v56 = "biases->size() == constant->size() || constant->count() == 1";
        _os_log_impl(&dword_190DAF000, v34, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    v33 = 0;
  }
  else
  {
LABEL_7:
    Espresso::espresso_os_log_subsystem(v6, v7);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v45 = (_QWORD *)(v4 + 144);
      if (*(char *)(v4 + 167) < 0)
        v45 = (_QWORD *)*v45;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v45;
      _os_log_debug_impl(&dword_190DAF000, v12, OS_LOG_TYPE_DEBUG, "fuse_affine_scale: inner_product %s", buf, 0xCu);
    }

    v13 = 0;
    v14 = *(int *)(*(_QWORD *)a3 + 8);
    do
    {
      v14 *= *(int *)(*(_QWORD *)a3 + 12 + v13);
      v13 += 4;
    }
    while (v13 != 12);
    v15 = *(int *)(v50 + 12);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = 0;
      v18 = *(int *)(v50 + 8);
      do
      {
        if (v14 == 1)
          v19 = 0;
        else
          v19 = v17;
        vDSP_vsmul((const float *)(*(_QWORD *)(v48 + 16) + v16), 1, (const float *)(*(_QWORD *)(*(_QWORD *)a3 + 24) + 4 * v19), (float *)(*(_QWORD *)(v50 + 16) + v16), 1, v18);
        ++v17;
        v16 += 4 * v18;
      }
      while (v15 != v17);
    }
    (*(void (**)(_BYTE *__return_ptr, void *))(*(_QWORD *)v5 + 408))(buf, v5);
    if (*(_QWORD *)buf)
      vDSP_vmul(*(const float **)(*(_QWORD *)buf + 16), 1, *(const float **)(*(_QWORD *)a3 + 24), v14 != 1, *(float **)(v52 + 16), 1, *(int *)(v52 + 8));
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    *(_QWORD *)buf = v52;
    *(_QWORD *)&buf[8] = v53;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    (*(void (**)(void *, _BYTE *))(*(_QWORD *)v5 + 392))(v5, buf);
    v25 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v46 = v50;
    v47 = v51;
    if (v51)
    {
      v28 = (unint64_t *)&v51->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v5 + 400))(v5, &v46);
    v30 = v47;
    if (v47)
    {
      v31 = (unint64_t *)&v47->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = 1;
  }
  v35 = v49;
  if (v49)
  {
    v36 = (unint64_t *)&v49->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v51;
  if (v51)
  {
    v39 = (unint64_t *)&v51->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v53;
  if (v53)
  {
    v42 = (unint64_t *)&v53->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  return v33;
}

void sub_1917238C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (a12)
  {
    v21 = (unint64_t *)&a12->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v23 = (unint64_t *)&a14->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (a16)
  {
    v25 = (unint64_t *)&a16->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes17fuse_affine_scaleERNS_6zephyr10function_tEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB0740;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB0740;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  void *v2;
  const char *v3;
  void *v4;
  Espresso *v5;
  const char *v6;
  NSObject *v7;
  Espresso *v9;
  const char *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[18];
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*a2);
  if (v2)
  {
    v4 = v2;
    v5 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v2 + 384))(v2);
    if (*((_DWORD *)v5 + 3))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v5, v6);
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v15 = 136315650;
          *(_QWORD *)&v15[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_aff"
                               "ine_simple_fusions.mm";
          *(_WORD *)&v15[12] = 1024;
          *(_DWORD *)&v15[14] = 472;
          v16 = 2080;
          v17 = "p.has_relu == 0";
LABEL_17:
          _os_log_impl(&dword_190DAF000, v7, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", v15, 0x1Cu);
          goto LABEL_18;
        }
        goto LABEL_18;
      }
    }
    else if (*((_DWORD *)v5 + 4))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v5, v6);
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v15 = 136315650;
          *(_QWORD *)&v15[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_aff"
                               "ine_simple_fusions.mm";
          *(_WORD *)&v15[12] = 1024;
          *(_DWORD *)&v15[14] = 473;
          v16 = 2080;
          v17 = "p.has_tanh == 0";
          goto LABEL_17;
        }
        goto LABEL_18;
      }
    }
    else if (*((_DWORD *)v5 + 13) == -1)
    {
      v9 = (Espresso *)(*(_QWORD *(**)(_BYTE *__return_ptr, void *))(*(_QWORD *)v4 + 416))(v15, v4);
      v12 = *(_QWORD *)v15;
      v11 = *(std::__shared_weak_count **)&v15[8];
      if (*(_QWORD *)&v15[8])
      {
        v13 = (unint64_t *)(*(_QWORD *)&v15[8] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v12)
        return 1;
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v9, v10);
        v7 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          goto LABEL_18;
        *(_DWORD *)v15 = 136315650;
        *(_QWORD *)&v15[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&v15[12] = 1024;
        *(_DWORD *)&v15[14] = 475;
        v16 = 2080;
        v17 = "k_ip->get_weights()";
        goto LABEL_17;
      }
    }
    else if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v5, v6);
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v15 = 136315650;
        *(_QWORD *)&v15[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&v15[12] = 1024;
        *(_DWORD *)&v15[14] = 474;
        v16 = 2080;
        v17 = "p.fused_activation_mode == ACTIVATION_NONE";
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(0, v3);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v15 = 136315650;
      *(_QWORD *)&v15[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_"
                           "simple_fusions.mm";
      *(_WORD *)&v15[12] = 1024;
      *(_DWORD *)&v15[14] = 470;
      v16 = 2080;
      v17 = "k_ip";
      goto LABEL_17;
    }
LABEL_18:

  }
  return 0;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes17fuse_affine_scaleERNS_6zephyr10function_tEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t Espresso::zephyr::match_any_input_of<match_transform_affine_addmul_biaslike(Espresso::zephyr::node_t *,Espresso::ELEMENTWISE_OPERATION,Espresso::ELEMENTWISE_OPERATION,std::function<BOOL ()(Espresso::zephyr::node_t *)>,std::function<BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>)::$_0>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  Espresso **constant;
  const char *v9;
  Espresso **v10;
  Espresso *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  Espresso *v18;
  int *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  Espresso::zephyr::value_t **v22;
  Espresso *v23;
  const char *v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _DWORD *v39;
  std::__shared_weak_count *v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  const char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a1 != a2)
  {
    v6 = a1;
    while (1)
    {
      if (!*(_QWORD *)v6)
        goto LABEL_24;
      v7 = *(_QWORD *)(*(_QWORD *)v6 + 80);
      constant = (Espresso **)Espresso::zephyr::cast_kernel<Espresso::generic_load_constant_kernel>(v7);
      v10 = constant;
      if (!constant)
      {
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(0, v9);
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
            v43 = 1024;
            v44 = 153;
            v45 = 2080;
            v46 = "k_const != nullptr";
            _os_log_impl(&dword_190DAF000, v17, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }

        }
        goto LABEL_24;
      }
      v11 = constant[43];
      if (!v11 || (v11 = (Espresso *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v11 + 32))(v11), (_DWORD)v11))
      {
        v12 = 0;
LABEL_8:
        if (Espresso::zephyr::match_verbose)
        {
          Espresso::espresso_os_log_subsystem(v11, v9);
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
            v43 = 1024;
            v44 = 156;
            v45 = 2080;
            v46 = "constant_blob";
            _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }

        }
        v14 = 0;
        goto LABEL_13;
      }
      v18 = v10[43];
      v19 = (int *)*((_QWORD *)v18 + 20);
      v12 = (std::__shared_weak_count *)*((_QWORD *)v18 + 21);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      if (!v19)
        goto LABEL_8;
      v22 = *(Espresso::zephyr::value_t ***)(*(_QWORD *)a4 + 96);
      if (*(Espresso::zephyr::value_t ***)(*(_QWORD *)a4 + 104) == v22)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      Espresso::zephyr::need_shape((Espresso::zephyr *)&v39, *v22);
      if (!v39)
        break;
      v25 = v39[5];
      v26 = v19[2];
      if (v25 != -1 && v25 < 4)
      {
        if ((_DWORD)v26 != *v39)
        {
          if (!Espresso::zephyr::match_verbose)
            goto LABEL_80;
          Espresso::espresso_os_log_subsystem(v23, v24);
          v31 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
            v43 = 1024;
            v44 = 167;
            v45 = 2080;
            v46 = "constant_blob->dim[0] == shape_ptr->w";
            _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
          }
          goto LABEL_79;
        }
        v32 = 0;
        v33 = v19[2];
        do
        {
          v33 *= v19[v32 + 3];
          ++v32;
        }
        while (v32 != 3);
        if (v33 != v26)
        {
          if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v23, v24);
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
              v43 = 1024;
              v44 = 168;
              v45 = 2080;
              v46 = "constant_blob->count() == shape_ptr->w";
              _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_79;
          }
LABEL_80:
          v14 = 0;
          goto LABEL_81;
        }
      }
      else
      {
        v28 = 0;
        v29 = v19[2];
        do
        {
          v29 *= v19[v28 + 3];
          ++v28;
        }
        while (v28 != 3);
        v30 = (int)v39[2];
        if (v29 != v30)
        {
          if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v23, v24);
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
              v43 = 1024;
              v44 = 161;
              v45 = 2080;
              v46 = "constant_blob->count() == shape_ptr->k";
              _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_79;
          }
          goto LABEL_80;
        }
        if ((_DWORD)v26 != 1)
        {
          if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v23, v24);
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
              v43 = 1024;
              v44 = 162;
              v45 = 2080;
              v46 = "constant_blob->dim[0] == 1";
              _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_79;
          }
          goto LABEL_80;
        }
        if (v19[3] != 1)
        {
          if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v23, v24);
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
              v43 = 1024;
              v44 = 163;
              v45 = 2080;
              v46 = "constant_blob->dim[1] == 1";
              _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_79;
          }
          goto LABEL_80;
        }
        if (v19[4] != (_DWORD)v30)
        {
          if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v23, v24);
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
              v43 = 1024;
              v44 = 164;
              v45 = 2080;
              v46 = "constant_blob->dim[2] == shape_ptr->k";
              _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_79;
          }
          goto LABEL_80;
        }
        if (v19[5] != 1)
        {
          if (Espresso::zephyr::match_verbose)
          {
            Espresso::espresso_os_log_subsystem(v23, v24);
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315650;
              v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
              v43 = 1024;
              v44 = 165;
              v45 = 2080;
              v46 = "constant_blob->dim[3] == 1";
              _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
            }
            goto LABEL_79;
          }
          goto LABEL_80;
        }
      }
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a3, (uint64_t)v19, (uint64_t)v12);
      v14 = 1;
LABEL_81:
      v34 = v40;
      if (v40)
      {
        v35 = (unint64_t *)&v40->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
LABEL_13:
      if (v12)
      {
        v15 = (unint64_t *)&v12->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if ((v14 & 1) != 0)
        return v7;
LABEL_24:
      v6 += 8;
      if (v6 == a2)
        return 0;
    }
    if (!Espresso::zephyr::match_verbose)
      goto LABEL_80;
    Espresso::espresso_os_log_subsystem(v23, v24);
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v42 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v43 = 1024;
      v44 = 158;
      v45 = 2080;
      v46 = "shape_ptr != nullptr";
      _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
    }
LABEL_79:

    goto LABEL_80;
  }
  return 0;
}

void sub_191724578(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB06E8;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB06E8;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  Espresso::generic_convolution_kernel *v5;
  Espresso *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  vDSP_Length v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint8_t v54[16];
  _BYTE buf[18];
  __int16 v56;
  const char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = (Espresso::generic_convolution_kernel *)Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(*a2);
  Espresso::scoped_conv_weight_dequantizer::scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v54, v5);
  (*(void (**)(uint64_t *__return_ptr, Espresso::generic_convolution_kernel *))(*(_QWORD *)v5 + 488))(&v52, v5);
  (*(void (**)(uint64_t *__return_ptr, Espresso::generic_convolution_kernel *))(*(_QWORD *)v5 + 472))(&v50, v5);
  v6 = (Espresso *)(*(_QWORD *(**)(uint64_t *__return_ptr, Espresso::generic_convolution_kernel *))(*(_QWORD *)v5 + 456))(&v48, v5);
  v8 = 0;
  v9 = *(int *)(*(_QWORD *)a3 + 8);
  v10 = v9;
  do
  {
    v10 *= *(int *)(*(_QWORD *)a3 + 12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  if (((v10 ^ *(int *)(v52 + 8)) & 0x3FFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_7;
  for (i = 0; i != 12; i += 4)
    v9 *= *(int *)(*(_QWORD *)a3 + 12 + i);
  if (v9 != 1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 435;
        v56 = 2080;
        v57 = "biases->size() == constant->size() || constant->count() == 1";
        _os_log_impl(&dword_190DAF000, v34, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    v33 = 0;
  }
  else
  {
LABEL_7:
    Espresso::espresso_os_log_subsystem(v6, v7);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v45 = (_QWORD *)(v4 + 144);
      if (*(char *)(v4 + 167) < 0)
        v45 = (_QWORD *)*v45;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v45;
      _os_log_debug_impl(&dword_190DAF000, v12, OS_LOG_TYPE_DEBUG, "fuse_affine_scale: conv %s", buf, 0xCu);
    }

    v13 = 0;
    v14 = *(int *)(*(_QWORD *)a3 + 8);
    do
    {
      v14 *= *(int *)(*(_QWORD *)a3 + 12 + v13);
      v13 += 4;
    }
    while (v13 != 12);
    v15 = *(int *)(v50 + 20);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = 0;
      v18 = *(int *)(v50 + 12) * (uint64_t)*(int *)(v50 + 8) * *(int *)(v50 + 16);
      do
      {
        if (v14 == 1)
          v19 = 0;
        else
          v19 = v17;
        vDSP_vsmul((const float *)(*(_QWORD *)(v48 + 24) + v16), 1, (const float *)(*(_QWORD *)(*(_QWORD *)a3 + 24) + 4 * v19), (float *)(*(_QWORD *)(v50 + 24) + v16), 1, v18);
        ++v17;
        v16 += 4 * v18;
      }
      while (v15 != v17);
    }
    (*(void (**)(_BYTE *__return_ptr, Espresso::generic_convolution_kernel *))(*(_QWORD *)v5 + 448))(buf, v5);
    if (*(_QWORD *)buf)
      vDSP_vmul(*(const float **)(*(_QWORD *)buf + 16), 1, *(const float **)(*(_QWORD *)a3 + 24), v14 != 1, *(float **)(v52 + 16), 1, *(int *)(v52 + 8));
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    *(_QWORD *)buf = v52;
    *(_QWORD *)&buf[8] = v53;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    (*(void (**)(Espresso::generic_convolution_kernel *, _BYTE *))(*(_QWORD *)v5 + 392))(v5, buf);
    v25 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v46 = v50;
    v47 = v51;
    if (v51)
    {
      v28 = (unint64_t *)&v51->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    (*(void (**)(Espresso::generic_convolution_kernel *, uint64_t *))(*(_QWORD *)v5 + 400))(v5, &v46);
    v30 = v47;
    if (v47)
    {
      v31 = (unint64_t *)&v47->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = 1;
  }
  v35 = v49;
  if (v49)
  {
    v36 = (unint64_t *)&v49->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v51;
  if (v51)
  {
    v39 = (unint64_t *)&v51->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v53;
  if (v53)
  {
    v42 = (unint64_t *)&v53->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)v54);
  return v33;
}

void sub_191724AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;

  v21 = a20;
  if (a20)
  {
    p_shared_owners = (unint64_t *)&a20->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (a12)
  {
    v24 = (unint64_t *)&a12->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v26 = (unint64_t *)&a14->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (a16)
  {
    v28 = (unint64_t *)&a16->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  Espresso::scoped_conv_weight_dequantizer::~scoped_conv_weight_dequantizer((Espresso::scoped_conv_weight_dequantizer *)&a17);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes17fuse_affine_scaleERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB0690;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB0690;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, Espresso::zephyr **a2)
{
  return Espresso::zephyr::match_standalone_conv(*a2, (Espresso::zephyr::node_t *)a2);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes17fuse_affine_scaleERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_scale(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void sub_191724D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr_passes::fuse_pad(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char matched;
  __int128 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string **v23;
  char v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  __int128 v29;
  _QWORD v30[3];
  __int128 v31;

  *(_QWORD *)&v31 = *MEMORY[0x1E0C80C00];
  v2 = (char *)*((_QWORD *)this + 9);
  v19 = (char *)this + 64;
  if (v2 != (char *)this + 64)
  {
    v3 = 0;
    while (1)
    {
      v4 = *((_QWORD *)v2 + 2);
      v27[0] = &off_1E2DB13A0;
      v27[1] = v2 + 16;
      v28 = v27;
      std::string::basic_string[abi:ne180100]<0>(&v29, "general_padding");
      std::string::basic_string[abi:ne180100]<0>(v30, "convolution");
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = &v20;
      v24 = 0;
      v20 = (std::string *)operator new(0x30uLL);
      v21 = v20;
      v22 = v20 + 2;
      v5 = 0;
      v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, &v29, &v31, v20);
      do
      {
        if (SHIBYTE(v30[v5 + 2]) < 0)
          operator delete((void *)v30[v5]);
        v5 -= 3;
      }
      while (v5 != -6);
      *(_QWORD *)&v29 = &off_1E2DB3290;
      *((_QWORD *)&v29 + 1) = v27;
      v30[0] = &v29;
      matched = Espresso::zephyr::match_kernel_chain(v4, (uint64_t *)&v20, &v29);
      v7 = (__int128 *)v30[0];
      if ((__int128 *)v30[0] == &v29)
      {
        v7 = &v29;
        v8 = 4;
      }
      else
      {
        if (!v30[0])
          goto LABEL_12;
        v8 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_12:
      v23 = &v20;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      v9 = v28;
      if (v28 == v27)
      {
        v9 = v27;
        v10 = 4;
        goto LABEL_16;
      }
      if (v28)
      {
        v10 = 5;
LABEL_16:
        (*(void (**)(void))(*v9 + 8 * v10))();
      }
      v11 = *((_QWORD *)v2 + 2);
      v25[0] = &off_1E2DB13F8;
      v25[1] = v2 + 16;
      v26 = v25;
      std::string::basic_string[abi:ne180100]<0>(&v29, "general_padding");
      std::string::basic_string[abi:ne180100]<0>(v30, "pool");
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = &v20;
      v24 = 0;
      v20 = (std::string *)operator new(0x30uLL);
      v21 = v20;
      v22 = v20 + 2;
      v12 = 0;
      v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v22, &v29, &v31, v20);
      do
      {
        if (SHIBYTE(v30[v12 + 2]) < 0)
          operator delete((void *)v30[v12]);
        v12 -= 3;
      }
      while (v12 != -6);
      *(_QWORD *)&v29 = &off_1E2DB3238;
      *((_QWORD *)&v29 + 1) = v25;
      v30[0] = &v29;
      v13 = Espresso::zephyr::match_kernel_chain(v11, (uint64_t *)&v20, &v29);
      v14 = (__int128 *)v30[0];
      if ((__int128 *)v30[0] == &v29)
      {
        v14 = &v29;
        v15 = 4;
      }
      else
      {
        if (!v30[0])
          goto LABEL_26;
        v15 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_26:
      v23 = &v20;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      v16 = v26;
      if (v26 == v25)
      {
        v16 = v25;
        v17 = 4;
        goto LABEL_30;
      }
      if (v26)
      {
        v17 = 5;
LABEL_30:
        (*(void (**)(void))(*v16 + 8 * v17))();
      }
      v3 |= matched | v13;
      v2 = (char *)*((_QWORD *)v2 + 1);
      if (v2 == v19)
        return v3 & 1;
    }
  }
  v3 = 0;
  return v3 & 1;
}

void sub_1917250BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void **a29)
{
  void **p_p;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  p_p = a29;
  if (a29 == &__p)
  {
    v31 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v31 = 5;
  }
  (*((void (**)(void))*p_p + v31))();
LABEL_6:
  a13 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v32 = a18;
  if (a18 == &a15)
  {
    v33 = 4;
    v32 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_11:
  _Unwind_Resume(a1);
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3238;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3238;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_general_padding_kernel>(v4);
  v6 = (*a2)[1];
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0 && (v8 = *(const void **)(v7 + 8)) != 0)
  {
    if (v9)
    {
      v10 = *(std::__shared_weak_count **)(v7 + 16);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v17[0] = v4;
  v17[1] = v5;
  v16[0] = v6;
  v16[1] = v9;
  v14 = *(_QWORD *)(v3 + 24);
  if (!v14)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v17, v16);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_30generic_general_padding_kernelENS_19generic_pool_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_pool_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_general_padding_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB13F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB13F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Espresso::zephyr::node_t *v3;
  Espresso::zephyr::node_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  __int128 v11;
  Espresso::zephyr::value_t **v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *(Espresso::zephyr::node_t **)a2;
  v4 = *(Espresso::zephyr::node_t **)a3;
  v5 = *(_QWORD *)(a3 + 8);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 320))(*(_QWORD *)(a2 + 8));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5);
  if (*(_WORD *)(v6 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v13 = 136315650;
        v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        v15 = 1024;
        v16 = 578;
        v17 = 2080;
        v18 = "pad_p.pad.fill_mode == padding_fill_mode::CONSTANT";
LABEL_9:
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v13, 0x1Cu);
        goto LABEL_10;
      }
      goto LABEL_10;
    }
    return 0;
  }
  if (*(_WORD *)(v7 + 38))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v13 = 136315650;
        v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        v15 = 1024;
        v16 = 579;
        v17 = 2080;
        v18 = "conv_p.pad.fill_mode == padding_fill_mode::CONSTANT";
        goto LABEL_9;
      }
LABEL_10:

    }
    return 0;
  }
  if (*(unsigned __int16 *)(v7 + 36) - 2 >= 2)
  {
    if (*(_WORD *)(v7 + 36))
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_10;
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v15 = 1024;
      v16 = 582;
      v17 = 2080;
      v18 = "conv_p.pad.pad_mode == padding_mode::VALID || conv_p.pad.pad_mode == padding_mode::VALID_LEGACY || conv_p.pa"
            "d.pad_mode == padding_mode::CUSTOM";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 44))
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_10;
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v15 = 1024;
      v16 = 585;
      v17 = 2080;
      v18 = "conv_p.pad.l == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 46))
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_10;
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v15 = 1024;
      v16 = 586;
      v17 = 2080;
      v18 = "conv_p.pad.r == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 48))
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_10;
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v15 = 1024;
      v16 = 587;
      v17 = 2080;
      v18 = "conv_p.pad.t == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 50))
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_10;
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v15 = 1024;
      v16 = 588;
      v17 = 2080;
      v18 = "conv_p.pad.b == 0";
      goto LABEL_9;
    }
  }
  v11 = *(_OWORD *)v6;
  *(_DWORD *)(v7 + 52) = *(_DWORD *)(v6 + 16);
  *(_OWORD *)(v7 + 36) = v11;
  v12 = (Espresso::zephyr::value_t **)*((_QWORD *)v3 + 15);
  if (*((Espresso::zephyr::value_t ***)v3 + 16) == v12)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::node_t::replace_input_at(v4, 0, *v12);
  Espresso::zephyr::node_t::remove_from_graphs(v3);
  return 1;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes8fuse_padERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_pool_kernel>)>::target_type()
{
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3290;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3290;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_general_padding_kernel>(v4);
  v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(v6);
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_30generic_general_padding_kernelENS_26generic_convolution_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB13A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB13A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Espresso::zephyr::node_t *v3;
  Espresso::zephyr::node_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  __int128 v11;
  Espresso::zephyr::value_t **v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *(Espresso::zephyr::node_t **)a2;
  v4 = *(Espresso::zephyr::node_t **)a3;
  v5 = *(_QWORD *)(a3 + 8);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 320))(*(_QWORD *)(a2 + 8));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5);
  if (*(_WORD *)(v6 + 2))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v13 = 136315650;
        v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        v15 = 1024;
        v16 = 552;
        v17 = 2080;
        v18 = "pad_p.pad.fill_mode == padding_fill_mode::CONSTANT";
LABEL_9:
        _os_log_impl(&dword_190DAF000, v9, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v13, 0x1Cu);
        goto LABEL_10;
      }
      goto LABEL_10;
    }
    return 0;
  }
  if (*(_WORD *)(v7 + 74))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v13 = 136315650;
        v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
        v15 = 1024;
        v16 = 553;
        v17 = 2080;
        v18 = "conv_p.pad.fill_mode == padding_fill_mode::CONSTANT";
        goto LABEL_9;
      }
LABEL_10:

    }
    return 0;
  }
  if (*(unsigned __int16 *)(v7 + 72) - 2 >= 2)
  {
    if (*(_WORD *)(v7 + 72))
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_10;
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v15 = 1024;
      v16 = 556;
      v17 = 2080;
      v18 = "conv_p.pad.pad_mode == padding_mode::VALID || conv_p.pad.pad_mode == padding_mode::VALID_LEGACY || conv_p.pa"
            "d.pad_mode == padding_mode::CUSTOM";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 80))
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_10;
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v15 = 1024;
      v16 = 559;
      v17 = 2080;
      v18 = "conv_p.pad.l == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 82))
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_10;
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v15 = 1024;
      v16 = 560;
      v17 = 2080;
      v18 = "conv_p.pad.r == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 84))
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_10;
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v15 = 1024;
      v16 = 561;
      v17 = 2080;
      v18 = "conv_p.pad.t == 0";
      goto LABEL_9;
    }
    if (*(_WORD *)(v7 + 86))
    {
      if (!Espresso::zephyr::match_verbose)
        return 0;
      Espresso::espresso_os_log_subsystem((Espresso *)v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_10;
      v13 = 136315650;
      v14 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v15 = 1024;
      v16 = 562;
      v17 = 2080;
      v18 = "conv_p.pad.b == 0";
      goto LABEL_9;
    }
  }
  v11 = *(_OWORD *)v6;
  *(_DWORD *)(v7 + 88) = *(_DWORD *)(v6 + 16);
  *(_OWORD *)(v7 + 72) = v11;
  v12 = (Espresso::zephyr::value_t **)*((_QWORD *)v3 + 15);
  if (*((Espresso::zephyr::value_t ***)v3 + 16) == v12)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::node_t::replace_input_at(v4, 0, *v12);
  Espresso::zephyr::node_t::remove_from_graphs(v3);
  return 1;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes8fuse_padERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_pad(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_general_padding_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>)>::target_type()
{
}

uint64_t Espresso::zephyr_passes::fuse_conv_activation(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char matched;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  __int128 *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  std::string **v25;
  char v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  __int128 v31;
  _QWORD v32[3];
  __int128 v33;

  *(_QWORD *)&v33 = *MEMORY[0x1E0C80C00];
  v2 = (char *)*((_QWORD *)this + 9);
  v21 = (char *)this + 64;
  if (v2 != (char *)this + 64)
  {
    v3 = 0;
    v4 = "activation";
    while (1)
    {
      v5 = *((_QWORD *)v2 + 2);
      v29[0] = &off_1E2DAD040;
      v29[1] = fuse_activation_tx<Espresso::generic_convolution_kernel>;
      v30 = v29;
      std::string::basic_string[abi:ne180100]<0>(&v31, "convolution");
      std::string::basic_string[abi:ne180100]<0>(v32, v4);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &v22;
      v26 = 0;
      v22 = (std::string *)operator new(0x30uLL);
      v23 = v22;
      v24 = v22 + 2;
      v6 = 0;
      v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v24, &v31, &v33, v22);
      do
      {
        if (SHIBYTE(v32[v6 + 2]) < 0)
          operator delete((void *)v32[v6]);
        v6 -= 3;
      }
      while (v6 != -6);
      *(_QWORD *)&v31 = &off_1E2DB3028;
      *((_QWORD *)&v31 + 1) = v29;
      v32[0] = &v31;
      matched = Espresso::zephyr::match_kernel_chain(v5, (uint64_t *)&v22, &v31);
      v8 = (__int128 *)v32[0];
      if ((__int128 *)v32[0] == &v31)
      {
        v8 = &v31;
        v9 = 4;
      }
      else
      {
        if (!v32[0])
          goto LABEL_12;
        v9 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_12:
      v25 = &v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      v10 = v30;
      if (v30 == v29)
      {
        v10 = v29;
        v11 = 4;
        goto LABEL_16;
      }
      if (v30)
      {
        v11 = 5;
LABEL_16:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v12 = *((_QWORD *)v2 + 2);
      v27[0] = &off_1E2DAD0F0;
      v27[1] = fuse_activation_tx<Espresso::generic_deconvolution_kernel>;
      v28 = v27;
      std::string::basic_string[abi:ne180100]<0>(&v31, "deconvolution");
      v13 = v4;
      std::string::basic_string[abi:ne180100]<0>(v32, v4);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &v22;
      v26 = 0;
      v22 = (std::string *)operator new(0x30uLL);
      v23 = v22;
      v24 = v22 + 2;
      v14 = 0;
      v23 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v24, &v31, &v33, v22);
      do
      {
        if (SHIBYTE(v32[v14 + 2]) < 0)
          operator delete((void *)v32[v14]);
        v14 -= 3;
      }
      while (v14 != -6);
      *(_QWORD *)&v31 = &off_1E2DB3130;
      *((_QWORD *)&v31 + 1) = v27;
      v32[0] = &v31;
      v15 = Espresso::zephyr::match_kernel_chain(v12, (uint64_t *)&v22, &v31);
      v16 = (__int128 *)v32[0];
      v4 = v13;
      if ((__int128 *)v32[0] == &v31)
      {
        v16 = &v31;
        v17 = 4;
      }
      else
      {
        if (!v32[0])
          goto LABEL_26;
        v17 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_26:
      v25 = &v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      v18 = v28;
      if (v28 == v27)
      {
        v18 = v27;
        v19 = 4;
        goto LABEL_30;
      }
      if (v28)
      {
        v19 = 5;
LABEL_30:
        (*(void (**)(void))(*v18 + 8 * v19))();
      }
      v3 |= matched | v15;
      v2 = (char *)*((_QWORD *)v2 + 1);
      if (v2 == v21)
        return v3 & 1;
    }
  }
  v3 = 0;
  return v3 & 1;
}

void sub_1917262F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void **a29)
{
  void **p_p;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  p_p = a29;
  if (a29 == &__p)
  {
    v31 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a29)
      goto LABEL_6;
    v31 = 5;
  }
  (*((void (**)(void))*p_p + v31))();
LABEL_6:
  a13 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v32 = a18;
  if (a18 == &a15)
  {
    v33 = 4;
    v32 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_11;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_11:
  _Unwind_Resume(a1);
}

uint64_t fuse_activation_tx<Espresso::generic_convolution_kernel>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  Espresso::zephyr::value_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = (*(uint64_t (**)(_QWORD *))(*a2 + 384))(a2);
  result = (*(uint64_t (**)(_QWORD *))(*a4 + 384))(a4);
  if (*(_DWORD *)(v8 + 60) != -1 || *(_DWORD *)(v8 + 24) || *(_DWORD *)(v8 + 28) || a2[1] != a4[1])
    return 0;
  v11 = result;
  v12 = *(_DWORD *)result;
  if ((*(_DWORD *)result - 2) < 2)
  {
    result = (uint64_t)getenv("ZEPHYR_FUSE_SIGMOID_LRELU");
    if (!result)
      return result;
    *(_DWORD *)(v8 + 60) = v12;
    *(_QWORD *)(v8 + 64) = *(_QWORD *)(v11 + 4);
  }
  else if (v12 == 1)
  {
    *(_DWORD *)(v8 + 28) = 1;
  }
  else
  {
    if (v12)
      return 0;
    *(_DWORD *)(v8 + 24) = 1;
  }
  Espresso::espresso_os_log_subsystem((Espresso *)result, v10);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v15 = (_QWORD *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0)
      v15 = (_QWORD *)*v15;
    v16 = (_QWORD *)(a3 + 144);
    if (*(char *)(a3 + 167) < 0)
      v16 = (_QWORD *)*v16;
    v17 = 136315394;
    v18 = v15;
    v19 = 2080;
    v20 = v16;
    _os_log_debug_impl(&dword_190DAF000, v13, OS_LOG_TYPE_DEBUG, "pass_fuse_activation: fusing at %s %s\n", (uint8_t *)&v17, 0x16u);
  }

  v14 = *(Espresso::zephyr::value_t ***)(a3 + 96);
  if (*(Espresso::zephyr::value_t ***)(a3 + 104) == v14)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::node_t::replace_output_at(a1, 0, *v14);
  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)a3);
  return 1;
}

uint64_t fuse_activation_tx<Espresso::generic_deconvolution_kernel>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  Espresso::zephyr::value_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = (*(uint64_t (**)(_QWORD *))(*a2 + 384))(a2);
  result = (*(uint64_t (**)(_QWORD *))(*a4 + 384))(a4);
  if (*(_DWORD *)(v8 + 60) != -1 || *(_DWORD *)(v8 + 24) || *(_DWORD *)(v8 + 28) || a2[1] != a4[1])
    return 0;
  v11 = result;
  v12 = *(_DWORD *)result;
  if ((*(_DWORD *)result - 2) < 2)
  {
    result = (uint64_t)getenv("ZEPHYR_FUSE_SIGMOID_LRELU");
    if (!result)
      return result;
    *(_DWORD *)(v8 + 60) = v12;
    *(_QWORD *)(v8 + 64) = *(_QWORD *)(v11 + 4);
  }
  else if (v12 == 1)
  {
    *(_DWORD *)(v8 + 28) = 1;
  }
  else
  {
    if (v12)
      return 0;
    *(_DWORD *)(v8 + 24) = 1;
  }
  Espresso::espresso_os_log_subsystem((Espresso *)result, v10);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v15 = (_QWORD *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0)
      v15 = (_QWORD *)*v15;
    v16 = (_QWORD *)(a3 + 144);
    if (*(char *)(a3 + 167) < 0)
      v16 = (_QWORD *)*v16;
    v17 = 136315394;
    v18 = v15;
    v19 = 2080;
    v20 = v16;
    _os_log_debug_impl(&dword_190DAF000, v13, OS_LOG_TYPE_DEBUG, "pass_fuse_activation: fusing at %s %s\n", (uint8_t *)&v17, 0x16u);
  }

  v14 = *(Espresso::zephyr::value_t ***)(a3 + 96);
  if (*(Espresso::zephyr::value_t ***)(a3 + 104) == v14)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::node_t::replace_output_at(a1, 0, *v14);
  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)a3);
  return 1;
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3130;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3130;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>(v4);
  v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(v6);
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_28generic_deconvolution_kernelENS_25generic_activation_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_deconvolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAD0F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAD0F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, a2[1], *a3, a3[1]);
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"PFbN8Espresso6zephyr19match_kernel_info_tINS_28generic_deconvolution_kernelEEENS1_INS_25generic_activation_kernelEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_deconvolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target_type()
{
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3028;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3028;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(v4);
  v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(v6);
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_26generic_convolution_kernelENS_25generic_activation_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAD040;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAD040;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, a2[1], *a3, a3[1]);
}

uint64_t std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"PFbN8Espresso6zephyr19match_kernel_info_tINS_26generic_convolution_kernelEEENS1_INS_25generic_activation_kernelEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>),std::allocator<BOOL (*)(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_convolution_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target_type()
{
}

void std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3188;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3188;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];

  v3 = *(_QWORD *)(a1 + 8);
  v4 = **a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(v4);
  v6 = (*a2)[1];
  v10[0] = v4;
  v10[1] = v5;
  v9[0] = v6;
  v9[1] = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(v6);
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v7 + 48))(v7, v10, v9);
}

uint64_t std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr19match_fuse_verticalINS_28generic_inner_product_kernelENS_25generic_activation_kernelEEEbRNS0_15ordered_block_tENSt3__18functionIFbNS0_19match_kernel_info_tIT_EENS8_IT0_EEEEEEUlRKNS6_6vectorIPNS0_6node_tENS6_9allocatorISH_EEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1},std::allocator<BOOL Espresso::zephyr::match_fuse_vertical<Espresso::generic_inner_product_kernel,Espresso::generic_activation_kernel>(Espresso::zephyr::ordered_block_t &,std::function<BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>)::{lambda(std::vector<Espresso::zephyr::node_t *> const&)#1}>,BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0CC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0CC0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  Espresso *v8;
  const char *v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;
  NSObject *v14;
  Espresso::zephyr::value_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  __int16 v20;
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = (_QWORD *)a2[1];
  v5 = *a3;
  v6 = (_QWORD *)a3[1];
  v7 = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 384))(v4);
  v8 = (Espresso *)(*(uint64_t (**)(_QWORD *))(*v6 + 384))(v6);
  if (v7[13] != -1)
    return 0;
  v10 = v7 + 3;
  if (v7[3])
    return 0;
  v12 = v7[4];
  v11 = v7 + 4;
  if (v12 || v4[1] != v6[1])
    return 0;
  if (*(_DWORD *)v8)
  {
    if (*(_DWORD *)v8 != 1)
      return 0;
    v10 = v11;
  }
  *v10 = 1;
  Espresso::espresso_os_log_subsystem(v8, v9);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v16 = (_QWORD *)(v3 + 144);
    if (*(char *)(v3 + 167) < 0)
      v16 = (_QWORD *)*v16;
    v17 = (_QWORD *)(v5 + 144);
    if (*(char *)(v5 + 167) < 0)
      v17 = (_QWORD *)*v17;
    v18 = 136315394;
    v19 = v16;
    v20 = 2080;
    v21 = v17;
    _os_log_debug_impl(&dword_190DAF000, v14, OS_LOG_TYPE_DEBUG, "pass_fuse_activation: fusing at %s %s\n", (uint8_t *)&v18, 0x16u);
  }

  v15 = *(Espresso::zephyr::value_t ***)(v5 + 96);
  if (*(Espresso::zephyr::value_t ***)(v5 + 104) == v15)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Espresso::zephyr::node_t::replace_output_at(v3, 0, *v15);
  Espresso::zephyr::node_t::remove_from_graphs((Espresso::zephyr::node_t *)v5);
  return 1;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes29fuse_inner_product_activationERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_inner_product_activation(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::match_kernel_info_t<Espresso::generic_inner_product_kernel>,Espresso::zephyr::match_kernel_info_t<Espresso::generic_activation_kernel>)>::target_type()
{
}

uint64_t Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char matched;
  _QWORD *v8;
  uint64_t v9;
  char v11;
  char v12;
  char v13;
  char v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 != (char *)this + 64)
  {
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v3 + 2);
      v6 = operator new(0x28uLL);
      *v6 = &off_1E2DB05E0;
      v6[1] = &v14;
      v6[2] = &v13;
      v6[3] = &v12;
      v6[4] = &v11;
      v16 = v6;
      matched = Espresso::zephyr::ordered_block_t::match_transform(v5, (uint64_t)v15);
      v8 = v16;
      if (v16 == v15)
        break;
      if (v16)
      {
        v9 = 5;
LABEL_7:
        (*(void (**)(void))(*v8 + 8 * v9))();
      }
      v4 |= matched;
      v3 = (char *)*((_QWORD *)v3 + 1);
      if (v3 == v2)
        return v4 & 1;
    }
    v8 = v15;
    v9 = 4;
    goto LABEL_7;
  }
  v4 = 0;
  return v4 & 1;
}

void sub_191727068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DB05E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB05E0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  int matched;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  _QWORD v30[3];
  _QWORD *v31;
  _QWORD v32[3];
  _QWORD *v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v39 = v38;
  v36[0] = &off_1E2DB04D8;
  v37 = v36;
  v38[0] = &off_1E2DB0480;
  matched = match_transform_affine_addmul_biaslike((uint64_t)v2, 0, 5u, (uint64_t)v38, (uint64_t)v36);
  v4 = v37;
  if (v37 == v36)
  {
    v5 = 4;
    v4 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = v39;
  if (v39 == v38)
  {
    v7 = 4;
    v6 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v35 = v34;
  v32[0] = &off_1E2DB0588;
  v33 = v32;
  v34[0] = &off_1E2DB0530;
  v8 = match_transform_affine_addmul_biaslike((uint64_t)v2, 0, 5u, (uint64_t)v34, (uint64_t)v32);
  v9 = v33;
  if (v33 == v32)
  {
    v10 = 4;
    v9 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_16;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  v11 = v35;
  if (v35 == v34)
  {
    v12 = 4;
    v11 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_21;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_21:
  v30[0] = &off_1E2DB0480;
  v31 = v30;
  v28[0] = &off_1E2DB04D8;
  v29 = v28;
  v13 = match_transform_affine_addmul_scalar(v2, 2, (uint64_t)v30, (uint64_t)v28);
  v14 = v29;
  if (v29 == v28)
  {
    v15 = 4;
    v14 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_26:
  v16 = v31;
  if (v31 == v30)
  {
    v17 = 4;
    v16 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_31;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_31:
  v27 = v26;
  v24[0] = &off_1E2DB0588;
  v25 = v24;
  v26[0] = &off_1E2DB0530;
  v18 = match_transform_affine_addmul_scalar(v2, 2, (uint64_t)v26, (uint64_t)v24);
  v19 = v25;
  if (v25 == v24)
  {
    v20 = 4;
    v19 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_36;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_36:
  v21 = v27;
  if (v27 == v26)
  {
    v22 = 4;
    v21 = v26;
    goto LABEL_40;
  }
  if (v27)
  {
    v22 = 5;
LABEL_40:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  return matched | v8 | v13 | v18;
}

void sub_1917273F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  char *v33;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v35 = a13;
  if (a13 == v33)
  {
    v36 = 4;
    v35 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_6:
  v37 = a17;
  if (a17 == &a14)
  {
    v38 = 4;
    v37 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_affine_biasERNS_6zephyr10function_tEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_4>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB0588;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB0588;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  void *v5;
  Espresso *v6;
  const char *v7;
  NSObject *v8;
  Espresso *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v37;
  int v38;
  const char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _BYTE buf[18];
  __int16 v43;
  const char *v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*a2);
  v6 = (Espresso *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 432))(&v40);
  Espresso::espresso_os_log_subsystem(v6, v7);
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v37 = (_QWORD *)(v4 + 144);
    if (*(char *)(v4 + 167) < 0)
      v37 = (_QWORD *)*v37;
    v38 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
    v39 = (const char *)*(int *)(v40 + 8);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v37;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v38;
    v43 = 2048;
    v44 = v39;
    v45 = 2048;
    v46 = 4 * (_QWORD)v39;
    _os_log_debug_impl(&dword_190DAF000, v8, OS_LOG_TYPE_DEBUG, "fuse_affine_bias: inner_product %s nC=%d %zu %zu", buf, 0x26u);
  }

  v11 = 0;
  v12 = *(int *)(v40 + 8);
  v13 = *a3;
  v14 = *(int *)(*a3 + 8);
  v15 = v14;
  do
  {
    v15 *= *(int *)(*a3 + 12 + v11);
    v11 += 4;
  }
  while (v11 != 12);
  if (4 * v12 == 4 * v15)
    goto LABEL_8;
  v16 = 0;
  v17 = *(int *)(*a3 + 8);
  do
  {
    v17 *= *(int *)(v13 + 12 + v16);
    v16 += 4;
  }
  while (v16 != 12);
  if (v17 == 1)
  {
LABEL_8:
    for (i = 0; i != 12; i += 4)
      v14 *= *(int *)(v13 + 12 + i);
    if (v14 == 1)
    {
      if ((int)v12 >= 1)
      {
        v19 = *(_DWORD **)(v13 + 24);
        v20 = *(_DWORD **)(v40 + 16);
        v21 = (v12 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          *v20++ = *v19;
          --v21;
        }
        while (v21 > 1);
      }
    }
    else
    {
      memcpy(*(void **)(v40 + 16), *(const void **)(v13 + 24), 4 * v12);
    }
    (*(void (**)(_BYTE *__return_ptr, void *))(*(_QWORD *)v5 + 408))(buf, v5);
    if (*(_QWORD *)buf)
      vDSP_vadd(*(const float **)(*(_QWORD *)buf + 16), 1, *(const float **)(v40 + 16), 1, *(float **)(v40 + 16), 1, *(int *)(v40 + 8));
    v22 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    *(_QWORD *)buf = v40;
    *(_QWORD *)&buf[8] = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }
    (*(void (**)(void *, _BYTE *))(*(_QWORD *)v5 + 392))(v5, buf);
    v27 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
    v31 = 1;
    *(_DWORD *)(v30 + 8) = 1;
  }
  else
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v9, v10);
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 276;
        v43 = 2080;
        v44 = "biases->size() == constant->size() || constant->count() == 1";
        _os_log_impl(&dword_190DAF000, v32, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    v31 = 0;
  }
  v33 = v41;
  if (v41)
  {
    v34 = (unint64_t *)&v41->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  return v31;
}

void sub_191727988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a10)
  {
    v15 = (unint64_t *)&a10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_affine_biasERNS_6zephyr10function_tEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_3>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB0530;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB0530;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  void *v2;
  const char *v3;
  Espresso *v4;
  const char *v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = Espresso::zephyr::cast_kernel<Espresso::generic_inner_product_kernel>(*a2);
  if (v2)
  {
    v4 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v2 + 384))(v2);
    if (*((_DWORD *)v4 + 3))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v4, v5);
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v8 = 136315650;
          v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          v10 = 1024;
          v11 = 260;
          v12 = 2080;
          v13 = "p.has_relu == 0";
LABEL_17:
          _os_log_impl(&dword_190DAF000, v6, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v8, 0x1Cu);
          goto LABEL_18;
        }
        goto LABEL_18;
      }
    }
    else if (*((_DWORD *)v4 + 4))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v4, v5);
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v8 = 136315650;
          v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          v10 = 1024;
          v11 = 261;
          v12 = 2080;
          v13 = "p.has_tanh == 0";
          goto LABEL_17;
        }
        goto LABEL_18;
      }
    }
    else
    {
      if (*((_DWORD *)v4 + 13) == -1)
        return 1;
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v4, v5);
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v8 = 136315650;
          v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          v10 = 1024;
          v11 = 262;
          v12 = 2080;
          v13 = "p.fused_activation_mode == ACTIVATION_NONE";
          goto LABEL_17;
        }
        goto LABEL_18;
      }
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(0, v3);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v8 = 136315650;
      v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v10 = 1024;
      v11 = 258;
      v12 = 2080;
      v13 = "k_ip";
      goto LABEL_17;
    }
LABEL_18:

  }
  return 0;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_affine_biasERNS_6zephyr10function_tEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_2>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB04D8;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB04D8;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::operator()(Espresso *a1, const char *a2, uint64_t *a3)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  Espresso *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _BYTE buf[18];
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  Espresso::espresso_os_log_subsystem(a1, a2);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v35 = (_QWORD *)(v4 + 144);
    if (*(char *)(v4 + 167) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v35;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "fuse_affine_bias: conv %s", buf, 0xCu);
  }

  v6 = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(v4);
  v7 = (Espresso *)(*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 488))(&v36);
  v9 = 0;
  v10 = *(int *)(v36 + 8);
  v11 = *a3;
  v12 = *(int *)(*a3 + 8);
  v13 = v12;
  do
  {
    v13 *= *(int *)(*a3 + 12 + v9);
    v9 += 4;
  }
  while (v9 != 12);
  if (4 * v10 == 4 * v13)
    goto LABEL_8;
  v14 = 0;
  v15 = *(int *)(*a3 + 8);
  do
  {
    v15 *= *(int *)(v11 + 12 + v14);
    v14 += 4;
  }
  while (v14 != 12);
  if (v15 == 1)
  {
LABEL_8:
    for (i = 0; i != 12; i += 4)
      v12 *= *(int *)(v11 + 12 + i);
    if (v12 == 1)
    {
      if ((int)v10 >= 1)
      {
        v17 = *(_DWORD **)(v11 + 24);
        v18 = *(_DWORD **)(v36 + 16);
        v19 = (v10 & 0x3FFFFFFFFFFFFFFFLL) + 1;
        do
        {
          *v18++ = *v17;
          --v19;
        }
        while (v19 > 1);
      }
    }
    else
    {
      memcpy(*(void **)(v36 + 16), *(const void **)(v11 + 24), 4 * v10);
    }
    (*(void (**)(_BYTE *__return_ptr, void *))(*(_QWORD *)v6 + 448))(buf, v6);
    if (*(_QWORD *)buf)
      vDSP_vadd(*(const float **)(*(_QWORD *)buf + 16), 1, *(const float **)(v36 + 16), 1, *(float **)(v36 + 16), 1, *(int *)(v36 + 8));
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    *(_QWORD *)buf = v36;
    *(_QWORD *)&buf[8] = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    (*(void (**)(void *, _BYTE *))(*(_QWORD *)v6 + 392))(v6, buf);
    v25 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v26 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 384))(v6);
    v29 = 1;
    *(_DWORD *)(v28 + 32) = 1;
  }
  else
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v7, v8);
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 240;
        v39 = 2080;
        v40 = "biases->size() == constant->size() || constant->count() == 1";
        _os_log_impl(&dword_190DAF000, v30, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }

    }
    v29 = 0;
  }
  v31 = v37;
  if (v37)
  {
    v32 = (unint64_t *)&v37->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v29;
}

void sub_191728150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a10)
  {
    v15 = (unint64_t *)&a10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_affine_biasERNS_6zephyr10function_tEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_1>,BOOL ()(Espresso::zephyr::node_t *,std::shared_ptr<Espresso::blob<float,4>> const&)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB0480;
  return result;
}

void std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB0480;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  void *v2;
  const char *v3;
  Espresso *v4;
  const char *v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(*a2);
  if (v2)
  {
    v4 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v2 + 384))(v2);
    if (*((_DWORD *)v4 + 6))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v4, v5);
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v8 = 136315650;
          v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          v10 = 1024;
          v11 = 228;
          v12 = 2080;
          v13 = "p.fused_relu == 0";
LABEL_21:
          _os_log_impl(&dword_190DAF000, v6, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v8, 0x1Cu);
          goto LABEL_22;
        }
        goto LABEL_22;
      }
    }
    else if (*((_DWORD *)v4 + 28))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v4, v5);
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v8 = 136315650;
          v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          v10 = 1024;
          v11 = 229;
          v12 = 2080;
          v13 = "p.has_batch_norm == 0";
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    else if (*((_DWORD *)v4 + 7))
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v4, v5);
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v8 = 136315650;
          v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          v10 = 1024;
          v11 = 230;
          v12 = 2080;
          v13 = "p.fused_tanh == 0";
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    else
    {
      if (*((_DWORD *)v4 + 15) == -1)
        return 1;
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v4, v5);
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v8 = 136315650;
          v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
          v10 = 1024;
          v11 = 231;
          v12 = 2080;
          v13 = "p.fused_activation_mode == ACTIVATION_NONE";
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
  }
  else if (Espresso::zephyr::match_verbose)
  {
    Espresso::espresso_os_log_subsystem(0, v3);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v8 = 136315650;
      v9 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
      v10 = 1024;
      v11 = 226;
      v12 = 2080;
      v13 = "k_conv";
      goto LABEL_21;
    }
LABEL_22:

  }
  return 0;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes16fuse_affine_biasERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_affine_bias(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr_passes *this, Espresso::zephyr::function_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E2DB0428;
  v6[1] = this;
  v7 = v6;
  v2 = Espresso::zephyr::function_t::foreach_block((uint64_t)this, (uint64_t)v6);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return v2;
}

void sub_191728668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0428;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0428;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t matched;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7[0] = &off_1E2DB39C8;
  v7[1] = &v6;
  v8 = v7;
  matched = Espresso::zephyr::ordered_block_t::match_transform(v6, (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return matched;
}

void sub_1917287B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes15fuse_transposesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB39C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB39C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  Espresso *v4;
  const char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  Espresso::zephyr::node_t *v11;
  Espresso *v12;
  unint64_t **v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  Espresso::zephyr::value_t **v37;
  Espresso::zephyr::value_t **v38;
  Espresso::zephyr::value_t *v39;
  _DWORD *v40;
  NSObject *v41;
  Espresso *v42;
  const char *v43;
  uint64_t v44;
  uint64_t *v46;
  Espresso::zephyr::node_t *v47;
  Espresso *v48;
  __int128 v49;
  _BYTE buf[20];
  const char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(*a2);
  v48 = v4;
  if (v4)
  {
    v6 = *(uint64_t **)(v3 + 96);
    v47 = (Espresso::zephyr::node_t *)v3;
    if (*(uint64_t **)(v3 + 104) == v6)
LABEL_62:
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v7 = *v6;
    v9 = *(uint64_t **)(v7 + 56);
    v8 = *(uint64_t **)(v7 + 64);
    if (v9 != v8)
    {
      v10 = 0;
      v46 = *(uint64_t **)(v7 + 64);
      do
      {
        while (!v9[1])
        {
          v11 = (Espresso::zephyr::node_t *)*v9;
          v4 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(*v9);
          if (!v4)
            break;
          v12 = v4;
          v4 = (Espresso *)Espresso::zephyr::graph_t::live_outputs(**(Espresso::zephyr::graph_t ***)(a1 + 8));
          v13 = (unint64_t **)*((_QWORD *)v11 + 12);
          if (*((unint64_t ***)v11 + 13) == v13)
            goto LABEL_62;
          v14 = (_QWORD *)*((_QWORD *)v4 + 1);
          if (v14)
          {
            v15 = *v13;
            do
            {
              if (v15)
                v16 = *v15;
              else
                v16 = 0;
              v17 = (_QWORD *)v14[4];
              if (!v17 || (v17 = (_QWORD *)*v17, v16 >= (unint64_t)v17))
              {
                if (v15)
                  v18 = *v15;
                else
                  v18 = 0;
                if ((unint64_t)v17 >= v18)
                  goto LABEL_6;
                ++v14;
              }
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          v19 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v48 + 320))(v48);
          v20 = *(_DWORD *)(v19 + 16);
          v49 = *(_OWORD *)v19;
          v21 = (int *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v12 + 320))(v12);
          v22 = *v21;
          v23 = v21[1];
          v24 = v21[2];
          v25 = v21[3];
          v26 = v21[4];
          *(_OWORD *)buf = v49;
          *(_DWORD *)&buf[16] = v20;
          v27 = *(_DWORD *)&buf[4 * v22];
          v28 = *(_DWORD *)&buf[4 * v23];
          v29 = *(_DWORD *)&buf[4 * v24];
          v30 = *(_DWORD *)&buf[4 * v25];
          v31 = *(_DWORD *)&buf[4 * v26];
          v32 = !v27 && v28 == 1;
          v33 = v32 && v29 == 2;
          v34 = v33 && v30 == 3;
          v35 = v34 && v31 == 4;
          v36 = v35;
          v37 = (Espresso::zephyr::value_t **)*((_QWORD *)v47 + 15);
          if (*((Espresso::zephyr::value_t ***)v47 + 16) == v37)
            goto LABEL_62;
          if (*((_QWORD *)v47 + 13) == *((_QWORD *)v47 + 12))
            goto LABEL_62;
          v38 = (Espresso::zephyr::value_t **)*((_QWORD *)v11 + 12);
          if (*((Espresso::zephyr::value_t ***)v11 + 13) == v38)
            goto LABEL_62;
          v39 = *v37;
          if (v36)
          {
            Espresso::zephyr::value_t::replace_uses(*v38, *v37);
            v4 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused(v11);
          }
          else
          {
            v40 = (_DWORD *)(*(uint64_t (**)(Espresso *))(*(_QWORD *)v12 + 320))(v12);
            *v40 = v27;
            v40[1] = v28;
            v40[2] = v29;
            v40[3] = v30;
            v40[4] = v31;
            Espresso::zephyr::node_t::replace_input_at(v11, 0, v39);
          }
          v9 += 2;
          v10 = 1;
          v8 = v46;
          if (v9 == v46)
            goto LABEL_50;
        }
LABEL_6:
        v9 += 2;
      }
      while (v9 != v8);
      if ((v10 & 1) != 0)
      {
LABEL_50:
        v42 = (Espresso *)Espresso::zephyr::node_t::remove_if_unused(v47);
        if (!Espresso::zephyr::match_verbose)
          return 1;
        Espresso::espresso_os_log_subsystem(v42, v43);
        v41 = objc_claimAutoreleasedReturnValue();
        v44 = 1;
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_aff"
                               "ine_simple_fusions.mm";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 674;
          _os_log_impl(&dword_190DAF000, v41, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", buf, 0x12u);
        }
        goto LABEL_58;
      }
    }
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v4, v5);
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affin"
                             "e_simple_fusions.mm";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 672;
        *(_WORD *)&buf[18] = 2080;
        v51 = "any_change";
        goto LABEL_56;
      }
      goto LABEL_57;
    }
    return 0;
  }
  if (!Espresso::zephyr::match_verbose)
    return 0;
  Espresso::espresso_os_log_subsystem(0, v5);
  v41 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 609;
    *(_WORD *)&buf[18] = 2080;
    v51 = "t0_kernel";
LABEL_56:
    _os_log_impl(&dword_190DAF000, v41, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
  }
LABEL_57:
  v44 = 0;
LABEL_58:

  return v44;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes15fuse_transposesERNS_6zephyr10function_tEENK3$_0clEPNS1_15ordered_block_tEEUlPNS1_6node_tEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::fuse_transposes(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB0A00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB0A00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t matched;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7[0] = &off_1E2DB3AD0;
  v7[1] = &v6;
  v8 = v7;
  matched = Espresso::zephyr::ordered_block_t::match_transform(v6, (uint64_t)v7);
  v3 = v8;
  if (v8 == v7)
  {
    v4 = 4;
    v3 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return matched;
}

void sub_191728DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso13zephyr_passes19remove_no_op_copiesERNS_6zephyr10function_tEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0,std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0>,BOOL ()(Espresso::zephyr::ordered_block_t *)>::target_type()
{
}

void std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB3AD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB3AD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::operator()(_QWORD **a1, const char *a2)
{
  Espresso::zephyr::node_t *v2;
  uint64_t v3;
  _QWORD **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  Espresso::zephyr::value_t **v9;
  Espresso::zephyr::value_t **v10;
  uint64_t *v11;
  uint64_t v12;
  Espresso::zephyr::node_t **v13;
  NSObject *v14;
  uint64_t v15;
  Espresso::zephyr::node_t *v16;
  Espresso *v17;
  const char *v18;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(Espresso::zephyr::node_t **)a2;
  if (*(_QWORD *)a2)
  {
    v3 = *((_QWORD *)v2 + 1);
    if (v3)
    {
      v4 = a1;
      a1 = *(_QWORD ***)(v3 + 8);
      if (a1)
      {
        if (a1)
        {
          v5 = *(std::__shared_weak_count **)(v3 + 16);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldxr(p_shared_owners);
            while (__stxr(v7 + 1, p_shared_owners));
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v9 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 12);
          v10 = (Espresso::zephyr::value_t **)*((_QWORD *)v2 + 13);
          if ((char *)v10 - (char *)v9 != 8)
          {
            if (Espresso::zephyr::match_verbose)
            {
              Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
              v14 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
                goto LABEL_22;
              v20 = 136315650;
              v21 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
              v22 = 1024;
              v23 = 683;
              v24 = 2080;
              v25 = "copy_node->outputs().size() == 1";
              goto LABEL_21;
            }
            return 0;
          }
          v11 = (uint64_t *)*((_QWORD *)v2 + 15);
          if (*((uint64_t **)v2 + 16) != v11)
          {
            v12 = *v11;
            v13 = *(Espresso::zephyr::node_t ***)(*v11 + 56);
            if (*(_QWORD *)(v12 + 64) - (_QWORD)v13 != 16)
            {
              if (Espresso::zephyr::match_verbose)
              {
                Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
                v14 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
                  goto LABEL_22;
                v20 = 136315650;
                v21 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
                v22 = 1024;
                v23 = 691;
                v24 = 2080;
                v25 = "copy_node->input()->has_one_use()";
                goto LABEL_21;
              }
              return 0;
            }
            if (*v13 != v2)
            {
              if (Espresso::zephyr::match_verbose)
              {
                Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
                v14 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
                {
                  v20 = 136315650;
                  v21 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
                  v22 = 1024;
                  v23 = 693;
                  v24 = 2080;
                  v25 = "copy_node->input()->uses()[0].user_node == copy_node";
LABEL_21:
                  _os_log_impl(&dword_190DAF000, v14, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", (uint8_t *)&v20, 0x1Cu);
                  goto LABEL_22;
                }
                goto LABEL_22;
              }
              return 0;
            }
            v16 = *(Espresso::zephyr::node_t **)(v12 + 80);
            if (!v16
              || (a1 = (_QWORD **)std::__tree<Espresso::zephyr::node_t *,Espresso::zephyr::ir_object_set_compare<Espresso::zephyr::node_t *>,std::allocator<Espresso::zephyr::node_t *>>::__count_unique<Espresso::zephyr::node_t *>(*(_QWORD *)(*v4[1] + 96), *(unint64_t **)(v12 + 80))) == 0)
            {
              if (Espresso::zephyr::match_verbose)
              {
                Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
                v14 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
                  goto LABEL_22;
                v20 = 136315650;
                v21 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
                v22 = 1024;
                v23 = 696;
                v24 = 2080;
                v25 = "input_def && block->nodes().count(input_def)";
                goto LABEL_21;
              }
              return 0;
            }
            if (v10 != v9)
            {
              Espresso::zephyr::node_t::replace_output_with(v16, (Espresso::zephyr::value_t *)v12, *v9);
              v17 = (Espresso *)Espresso::zephyr::node_t::remove_from_graphs(v2);
              if (!Espresso::zephyr::match_verbose)
                return 1;
              Espresso::espresso_os_log_subsystem(v17, v18);
              v14 = objc_claimAutoreleasedReturnValue();
              v15 = 1;
              if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
              {
                v20 = 136315394;
                v21 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
                v22 = 1024;
                v23 = 702;
                _os_log_impl(&dword_190DAF000, v14, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_PASS %s:%d\n", (uint8_t *)&v20, 0x12u);
              }
              goto LABEL_23;
            }
          }
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
      }
    }
  }
  if (!Espresso::zephyr::match_verbose)
    return 0;
  Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    v20 = 136315650;
    v21 = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/passes/passes_affine_simple_fusions.mm";
    v22 = 1024;
    v23 = 682;
    v24 = 2080;
    v25 = "zephyr::cast_kernel<generic_copy_kernel>(copy_node)";
    goto LABEL_21;
  }
LABEL_22:
  v15 = 0;
LABEL_23:

  return v15;
}

uint64_t std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZZN8Espresso13zephyr_passes19remove_no_op_copiesERNS_6zephyr10function_tEENK3$_0clEPNS1_15ordered_block_tEEUlPNS1_6node_tEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1},std::allocator<Espresso::zephyr_passes::remove_no_op_copies(Espresso::zephyr::function_t &)::$_0::operator() const(Espresso::zephyr::ordered_block_t *)::{lambda(Espresso::zephyr::node_t *)#1}>,BOOL ()(Espresso::zephyr::node_t *)>::target_type()
{
}

uint64_t is_ane(_DWORD *a1)
{
  return ((*a1 - 10006) < 6) & (0x2Fu >> (*(_BYTE *)a1 - 22));
}

void sub_191729518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_transform_static_quantize_kernel::~pass_transform_static_quantize_kernel(Espresso::pass_transform_static_quantize_kernel *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_transform_static_quantize_kernel::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD v74[2];
  void (*v75)(uint64_t, int64x2_t *);
  void *v76;
  Espresso::net *v77;
  _QWORD v78[2];
  void (*v79)(uint64_t, int64x2_t *);
  void *v80;
  Espresso::net *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  __int128 v85;
  __int128 v86;
  _QWORD v87[4];
  Espresso::net *v88;
  char v89[8];
  std::__shared_weak_count *v90;
  _QWORD *v91;
  _QWORD *v92;
  char **v93;
  char v94;
  void **v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[3];

  v104[0] = *MEMORY[0x1E0C80C00];
  Espresso::run_pass_on_network<Espresso::pass_transform_quantize_kernel>((uint64_t)a1);
  v5 = MEMORY[0x1E0C809B0];
  v78[0] = MEMORY[0x1E0C809B0];
  v78[1] = 3221225472;
  v79 = ___ZN8Espresso37pass_transform_static_quantize_kernel14run_on_networkERNS_3netE_block_invoke;
  v80 = &__block_descriptor_40_e9_v16__0_v8l;
  v81 = a1;
  v6 = v78;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v89, a1);
  memset(v87, 0, 28);
  v85 = 0u;
  v86 = 0u;
  v88 = a1;
  v7 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v7)
  {
    v8 = 0;
    do
    {
      LODWORD(v87[3]) = v8;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v86, *(_QWORD *)(v7 + 16 * v8), *(_QWORD *)(v7 + 16 * v8 + 8));
      v9 = v86;
      v10 = *(void **)(v86 + 64);
      if (v10
      {
        v11 = *(_QWORD *)(v9 + 72);
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
      }
      else
      {
        v11 = 0;
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      *(_QWORD *)&v85 = v10;
      *((_QWORD *)&v85 + 1) = v11;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        v10 = (void *)v85;
      }
      if (v10)
        v79((uint64_t)v6, (int64x2_t *)&v85);
      ++v8;
      v7 = *((_QWORD *)a1 + 4);
    }
    while (v8 < (*((_QWORD *)a1 + 5) - v7) >> 4);
    v17 = v87[0];
    v18 = v87[1];
    if (v87[0] == v87[1])
    {
      v5 = MEMORY[0x1E0C809B0];
    }
    else
    {
      v70 = a2;
      v72 = v6;
      v19 = 0;
      do
      {
        v20 = *(_DWORD *)v17 + v19;
        *(_DWORD *)v17 = v20;
        v21 = *(_QWORD *)(v17 + 8);
        if (v21)
        {
          LODWORD(v95) = v20;
          v22 = *(std::__shared_weak_count **)(v17 + 16);
          v96 = v21;
          v97 = v22;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v98 = 0;
          v99 = 0;
          v100 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v98, *(_QWORD *)(v17 + 24), *(_QWORD *)(v17 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v17 + 32) - *(_QWORD *)(v17 + 24)) >> 3));
          v101 = 0;
          v102 = 0;
          v103 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v101, *(_QWORD *)(v17 + 48), *(_QWORD *)(v17 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v17 + 56) - *(_QWORD *)(v17 + 48)) >> 3));
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v93 = &v82;
          v94 = 0;
          v82 = (char *)operator new(0x48uLL);
          v83 = (uint64_t)v82;
          v84 = v82 + 72;
          v83 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v84, (uint64_t)&v95, (uint64_t)v104, (uint64_t)v82);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v82);
          v93 = &v82;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
          v93 = (char **)&v101;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
          v93 = (char **)&v98;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
          v25 = v97;
          if (v97)
          {
            v26 = (unint64_t *)&v97->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v28 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v20);
          v28 = -1;
        }
        v19 += v28;
        v17 += 72;
      }
      while (v17 != v18);
      a2 = v70;
      v6 = v72;
      v5 = MEMORY[0x1E0C809B0];
    }
  }
  v95 = (void **)v87;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v95);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v92);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v91);
  v35 = v90;
  if (v90)
  {
    v36 = (unint64_t *)&v90->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  v74[0] = v5;
  v74[1] = 3221225472;
  v75 = ___ZN8Espresso37pass_transform_static_quantize_kernel14run_on_networkERNS_3netE_block_invoke_2;
  v76 = &__block_descriptor_40_e9_v16__0_v8l;
  v77 = a1;
  v38 = v74;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v89, a1);
  memset(v87, 0, 28);
  v85 = 0u;
  v86 = 0u;
  v88 = a1;
  v39 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v39)
  {
    v40 = 0;
    do
    {
      LODWORD(v87[3]) = v40;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v86, *(_QWORD *)(v39 + 16 * v40), *(_QWORD *)(v39 + 16 * v40 + 8));
      v41 = v86;
      v42 = *(void **)(v86 + 64);
      if (v42
      {
        v43 = *(_QWORD *)(v41 + 72);
        if (v43)
        {
          v44 = (unint64_t *)(v43 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
      }
      else
      {
        v43 = 0;
      }
      v46 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      *(_QWORD *)&v85 = v42;
      *((_QWORD *)&v85 + 1) = v43;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
        v42 = (void *)v85;
      }
      if (v42)
        v75((uint64_t)v38, (int64x2_t *)&v85);
      ++v40;
      v39 = *((_QWORD *)a1 + 4);
    }
    while (v40 < (*((_QWORD *)a1 + 5) - v39) >> 4);
    v49 = v87[0];
    v50 = v87[1];
    if (v87[0] != v87[1])
    {
      v71 = a2;
      v73 = v38;
      v51 = 0;
      do
      {
        v52 = *(_DWORD *)v49 + v51;
        *(_DWORD *)v49 = v52;
        v53 = *(_QWORD *)(v49 + 8);
        if (v53)
        {
          LODWORD(v95) = v52;
          v54 = *(std::__shared_weak_count **)(v49 + 16);
          v96 = v53;
          v97 = v54;
          if (v54)
          {
            v55 = (unint64_t *)&v54->__shared_owners_;
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          v98 = 0;
          v99 = 0;
          v100 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v98, *(_QWORD *)(v49 + 24), *(_QWORD *)(v49 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v49 + 32) - *(_QWORD *)(v49 + 24)) >> 3));
          v101 = 0;
          v102 = 0;
          v103 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v101, *(_QWORD *)(v49 + 48), *(_QWORD *)(v49 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v49 + 56) - *(_QWORD *)(v49 + 48)) >> 3));
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v93 = &v82;
          v94 = 0;
          v82 = (char *)operator new(0x48uLL);
          v83 = (uint64_t)v82;
          v84 = v82 + 72;
          v83 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v84, (uint64_t)&v95, (uint64_t)v104, (uint64_t)v82);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v82);
          v93 = &v82;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
          v93 = (char **)&v101;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
          v93 = (char **)&v98;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
          v57 = v97;
          if (v97)
          {
            v58 = (unint64_t *)&v97->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v60 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v52);
          v60 = -1;
        }
        v51 += v60;
        v49 += 72;
      }
      while (v49 != v50);
      a2 = v71;
      v38 = v73;
    }
  }
  v95 = (void **)v87;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v95);
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v92);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v91);
  v67 = v90;
  if (v90)
  {
    v68 = (unint64_t *)&v90->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = 1;
}

void sub_191729DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso37pass_transform_static_quantize_kernel14run_on_networkERNS_3netE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string *p_str;
  uint64_t v29;
  uint64_t **v30;
  char *v31;
  uint64_t **v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v42;
  uint64_t **v43;
  char *v44;
  uint64_t **v45;
  char *v46;
  void *v47;
  void *v48;
  std::string __p;
  std::string __str;
  void *v51[5];
  void *v52[5];
  _BYTE v53[72];
  void **v54;

  v4 = *(_QWORD **)(a1 + 32);
  memset(v53, 0, 32);
  *(_DWORD *)&v53[32] = 1065353216;
  Espresso::net::get_consumers_of_blobs(v4, v53, (uint64_t)v52);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v53);
  Espresso::net::get_producers_of_blobs(*(Espresso::net **)(a1 + 32), (uint64_t)v51);
  v5 = *(_QWORD *)(a1 + 32) + 96;
  v6 = a2[3].i32[2];
  *(_QWORD *)v53 = v6;
  v7 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v5, v6, v53)[3];
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v8 = *v7;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v8;
  }
  v9 = *(_QWORD *)(a1 + 32) + 56;
  v10 = a2[3].i32[2];
  *(_QWORD *)v53 = v10;
  v11 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, v53)[3];
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
  }
  else
  {
    v12 = *v11;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
  }
  *(_DWORD *)v53 = a2[3].i32[2];
  memset(&v53[8], 0, 64);
  v13 = a2[2].u64[1];
  if (v13 >= a2[3].i64[0])
  {
    v14 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v53);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v53);
    v14 = v13 + 72;
    a2[2].i64[1] = v13 + 72;
  }
  a2[2].i64[1] = v14;
  v54 = (void **)&v53[48];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v54);
  v54 = (void **)&v53[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v54);
  v15 = *(std::__shared_weak_count **)&v53[16];
  if (*(_QWORD *)&v53[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v53[16] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 240), &__p))
  {
    *(_QWORD *)v53 = &__p;
    v54 = (void **)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v51, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v53)[5];
    v34 = *(_QWORD *)(a1 + 32) + 96;
    *(_QWORD *)v53 = &v54;
    v35 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v34, (unint64_t *)&v54, (uint64_t)&std::piecewise_construct, (uint64_t **)v53);
    v36 = v35[3];
    v37 = v35[4];
    if (v36 == v37)
      goto LABEL_62;
    while (1)
    {
      v38 = *(unsigned __int8 *)(v36 + 23);
      if ((v38 & 0x80u) == 0)
        v39 = *(unsigned __int8 *)(v36 + 23);
      else
        v39 = *(_QWORD *)(v36 + 8);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (v39 != size)
        goto LABEL_61;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v38 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v36, p_p, *(_QWORD *)(v36 + 8)))
        {
LABEL_58:
          v43 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 352);
          *(_QWORD *)v53 = v36;
          v44 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43, (_QWORD *)v36, (uint64_t)&std::piecewise_construct, (__int128 **)v53);
          v45 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 352);
          *(_QWORD *)v53 = &__str;
          v46 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, &__str, (uint64_t)&std::piecewise_construct, (__int128 **)v53);
          *(_OWORD *)(v46 + 56) = *(_OWORD *)(v44 + 56);
          if (v46 != v44)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v46 + 72, *((char **)v44 + 9), *((_QWORD *)v44 + 10), (uint64_t)(*((_QWORD *)v44 + 10) - *((_QWORD *)v44 + 9)) >> 2);
          std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__erase_unique<std::string>((uint64_t **)(*(_QWORD *)(a1 + 32) + 352), (_QWORD *)v36);
          std::string::operator=((std::string *)v36, &__str);
        }
      }
      else
      {
        if (!*(_BYTE *)(v36 + 23))
          goto LABEL_58;
        v42 = 0;
        while (*(unsigned __int8 *)(v36 + v42) == p_p->__r_.__value_.__s.__data_[v42])
        {
          if (v38 == ++v42)
            goto LABEL_58;
        }
      }
LABEL_61:
      v36 += 24;
      if (v36 == v37)
        goto LABEL_62;
    }
  }
  *(_QWORD *)v53 = &__str;
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v52, (unsigned __int8 *)&__str, (__int128 **)v53);
  v19 = (unint64_t *)*((_QWORD *)v18 + 5);
  v20 = (unint64_t *)*((_QWORD *)v18 + 6);
  if (v19 == v20)
    goto LABEL_62;
  do
  {
    v21 = *(_QWORD *)(a1 + 32) + 56;
    *(_QWORD *)v53 = v19;
    v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v21, v19, (uint64_t)&std::piecewise_construct, (uint64_t **)v53);
    v23 = v22[3];
    v24 = v22[4];
    while (v23 != v24)
    {
      v25 = *(unsigned __int8 *)(v23 + 23);
      if ((v25 & 0x80u) == 0)
        v26 = *(unsigned __int8 *)(v23 + 23);
      else
        v26 = *(_QWORD *)(v23 + 8);
      v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = __str.__r_.__value_.__l.__size_;
      if (v26 == v27)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((v25 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v23, p_str, *(_QWORD *)(v23 + 8)))
            goto LABEL_38;
LABEL_35:
          v30 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 352);
          *(_QWORD *)v53 = v23;
          v31 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, (_QWORD *)v23, (uint64_t)&std::piecewise_construct, (__int128 **)v53);
          v32 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 352);
          *(_QWORD *)v53 = &__p;
          v33 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, &__p, (uint64_t)&std::piecewise_construct, (__int128 **)v53);
          *(_OWORD *)(v33 + 56) = *(_OWORD *)(v31 + 56);
          if (v33 != v31)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v33 + 72, *((char **)v31 + 9), *((_QWORD *)v31 + 10), (uint64_t)(*((_QWORD *)v31 + 10) - *((_QWORD *)v31 + 9)) >> 2);
          std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__erase_unique<std::string>((uint64_t **)(*(_QWORD *)(a1 + 32) + 352), (_QWORD *)v23);
          std::string::operator=((std::string *)v23, &__p);
          goto LABEL_38;
        }
        if (!*(_BYTE *)(v23 + 23))
          goto LABEL_35;
        v29 = 0;
        while (*(unsigned __int8 *)(v23 + v29) == p_str->__r_.__value_.__s.__data_[v29])
        {
          if (v25 == ++v29)
            goto LABEL_35;
        }
      }
LABEL_38:
      v23 += 24;
    }
    ++v19;
  }
  while (v19 != v20);
LABEL_62:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v51[2]);
  v47 = v51[0];
  v51[0] = 0;
  if (v47)
    operator delete(v47);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v52[2]);
  v48 = v52[0];
  v52[0] = 0;
  if (v48)
    operator delete(v48);
}

void sub_19172A5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso37pass_transform_static_quantize_kernel14run_on_networkERNS_3netE_block_invoke_2(uint64_t a1, int64x2_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string *p_str;
  uint64_t v29;
  uint64_t **v30;
  char *v31;
  uint64_t **v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v42;
  uint64_t **v43;
  char *v44;
  uint64_t **v45;
  char *v46;
  void *v47;
  void *v48;
  std::string __p;
  std::string __str;
  void *v51[5];
  void *v52[5];
  _BYTE v53[72];
  void **v54;

  v4 = *(_QWORD **)(a1 + 32);
  memset(v53, 0, 32);
  *(_DWORD *)&v53[32] = 1065353216;
  Espresso::net::get_consumers_of_blobs(v4, v53, (uint64_t)v52);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v53);
  Espresso::net::get_producers_of_blobs(*(Espresso::net **)(a1 + 32), (uint64_t)v51);
  v5 = *(_QWORD *)(a1 + 32) + 96;
  v6 = a2[3].i32[2];
  *(_QWORD *)v53 = v6;
  v7 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v5, v6, v53)[3];
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v8 = *v7;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v8;
  }
  v9 = *(_QWORD *)(a1 + 32) + 56;
  v10 = a2[3].i32[2];
  *(_QWORD *)v53 = v10;
  v11 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, v53)[3];
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
  }
  else
  {
    v12 = *v11;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
  }
  *(_DWORD *)v53 = a2[3].i32[2];
  memset(&v53[8], 0, 64);
  v13 = a2[2].u64[1];
  if (v13 >= a2[3].i64[0])
  {
    v14 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v53);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v53);
    v14 = v13 + 72;
    a2[2].i64[1] = v13 + 72;
  }
  a2[2].i64[1] = v14;
  v54 = (void **)&v53[48];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v54);
  v54 = (void **)&v53[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v54);
  v15 = *(std::__shared_weak_count **)&v53[16];
  if (*(_QWORD *)&v53[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v53[16] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 240), &__p))
  {
    *(_QWORD *)v53 = &__p;
    v54 = (void **)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v51, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)v53)[5];
    v34 = *(_QWORD *)(a1 + 32) + 96;
    *(_QWORD *)v53 = &v54;
    v35 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v34, (unint64_t *)&v54, (uint64_t)&std::piecewise_construct, (uint64_t **)v53);
    v36 = v35[3];
    v37 = v35[4];
    if (v36 == v37)
      goto LABEL_62;
    while (1)
    {
      v38 = *(unsigned __int8 *)(v36 + 23);
      if ((v38 & 0x80u) == 0)
        v39 = *(unsigned __int8 *)(v36 + 23);
      else
        v39 = *(_QWORD *)(v36 + 8);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (v39 != size)
        goto LABEL_61;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v38 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v36, p_p, *(_QWORD *)(v36 + 8)))
        {
LABEL_58:
          v43 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 352);
          *(_QWORD *)v53 = v36;
          v44 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43, (_QWORD *)v36, (uint64_t)&std::piecewise_construct, (__int128 **)v53);
          v45 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 352);
          *(_QWORD *)v53 = &__str;
          v46 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, &__str, (uint64_t)&std::piecewise_construct, (__int128 **)v53);
          *(_OWORD *)(v46 + 56) = *(_OWORD *)(v44 + 56);
          if (v46 != v44)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v46 + 72, *((char **)v44 + 9), *((_QWORD *)v44 + 10), (uint64_t)(*((_QWORD *)v44 + 10) - *((_QWORD *)v44 + 9)) >> 2);
          std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__erase_unique<std::string>((uint64_t **)(*(_QWORD *)(a1 + 32) + 352), (_QWORD *)v36);
          std::string::operator=((std::string *)v36, &__str);
        }
      }
      else
      {
        if (!*(_BYTE *)(v36 + 23))
          goto LABEL_58;
        v42 = 0;
        while (*(unsigned __int8 *)(v36 + v42) == p_p->__r_.__value_.__s.__data_[v42])
        {
          if (v38 == ++v42)
            goto LABEL_58;
        }
      }
LABEL_61:
      v36 += 24;
      if (v36 == v37)
        goto LABEL_62;
    }
  }
  *(_QWORD *)v53 = &__str;
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v52, (unsigned __int8 *)&__str, (__int128 **)v53);
  v19 = (unint64_t *)*((_QWORD *)v18 + 5);
  v20 = (unint64_t *)*((_QWORD *)v18 + 6);
  if (v19 == v20)
    goto LABEL_62;
  do
  {
    v21 = *(_QWORD *)(a1 + 32) + 56;
    *(_QWORD *)v53 = v19;
    v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v21, v19, (uint64_t)&std::piecewise_construct, (uint64_t **)v53);
    v23 = v22[3];
    v24 = v22[4];
    while (v23 != v24)
    {
      v25 = *(unsigned __int8 *)(v23 + 23);
      if ((v25 & 0x80u) == 0)
        v26 = *(unsigned __int8 *)(v23 + 23);
      else
        v26 = *(_QWORD *)(v23 + 8);
      v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = __str.__r_.__value_.__l.__size_;
      if (v26 == v27)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((v25 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v23, p_str, *(_QWORD *)(v23 + 8)))
            goto LABEL_38;
LABEL_35:
          v30 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 352);
          *(_QWORD *)v53 = v23;
          v31 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, (_QWORD *)v23, (uint64_t)&std::piecewise_construct, (__int128 **)v53);
          v32 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 352);
          *(_QWORD *)v53 = &__p;
          v33 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, &__p, (uint64_t)&std::piecewise_construct, (__int128 **)v53);
          *(_OWORD *)(v33 + 56) = *(_OWORD *)(v31 + 56);
          if (v33 != v31)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v33 + 72, *((char **)v31 + 9), *((_QWORD *)v31 + 10), (uint64_t)(*((_QWORD *)v31 + 10) - *((_QWORD *)v31 + 9)) >> 2);
          std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__erase_unique<std::string>((uint64_t **)(*(_QWORD *)(a1 + 32) + 352), (_QWORD *)v23);
          std::string::operator=((std::string *)v23, &__p);
          goto LABEL_38;
        }
        if (!*(_BYTE *)(v23 + 23))
          goto LABEL_35;
        v29 = 0;
        while (*(unsigned __int8 *)(v23 + v29) == p_str->__r_.__value_.__s.__data_[v29])
        {
          if (v25 == ++v29)
            goto LABEL_35;
        }
      }
LABEL_38:
      v23 += 24;
    }
    ++v19;
  }
  while (v19 != v20);
LABEL_62:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v51[2]);
  v47 = v51[0];
  v51[0] = 0;
  if (v47)
    operator delete(v47);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v52[2]);
  v48 = v52[0];
  v52[0] = 0;
  if (v48)
    operator delete(v48);
}

void sub_19172AB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a22);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__erase_unique<std::string>(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    v4 = v3;
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__remove_node_pointer(a1, v3);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<Espresso::pass_transform_static_quantize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE810;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_transform_static_quantize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE810;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_transform_static_quantize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANECompilerEngine::inner_product_kernel::~inner_product_kernel(Espresso::ANECompilerEngine::inner_product_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D796B8;
  v2 = (void **)((char *)this + 544);
  *((_QWORD *)this + 68) = &unk_1E2D798E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 824);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 808);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 760);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D796B8;
  v2 = (void **)((char *)this + 544);
  *((_QWORD *)this + 68) = &unk_1E2D798E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 824);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 808);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 760);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::inner_product_kernel::clear_weights(Espresso::ANECompilerEngine::inner_product_kernel *this)
{
  char *v2;

  v2 = (char *)this + 288;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 36));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 35) = v2;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 62);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 95);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100]((_QWORD *)this + 97);
}

void Espresso::ANECompilerEngine::inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::runtime_error *v20;
  unint64_t v21;
  std::runtime_error *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  int v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::string::size_type v56;
  int v57;
  int v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int *v66;
  int v68;
  int v69;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  uint64_t v92;
  std::__shared_weak_count *size;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  uint64_t v99;
  double v100;
  double v101;
  int32x2_t v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::runtime_error *exception;
  unint64_t v109;
  std::runtime_error *v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  const std::string::value_type *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  const std::string::value_type *v125;
  std::string::size_type v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  std::string::size_type v130;
  std::string *v131;
  __int128 v132;
  uint64_t v133[2];
  std::string v134;
  void *__p;
  void *v136;
  std::string v137;
  const std::string::value_type *v138;
  std::string::size_type v139;
  unsigned __int8 v140;
  const std::string::value_type *v141;
  std::string::size_type v142;
  unsigned __int8 v143;
  std::string v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;
  std::string v151;
  uint64_t v152[2];
  uint64_t v153;
  std::__shared_weak_count *v154;
  uint64_t v155[2];
  uint64_t v156;
  std::__shared_weak_count *v157;
  uint64_t v158[2];
  uint64_t v159;
  uint64_t v160;

  v159 = 0;
  v160 = 0;
  if (a6 && *a6)
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v159, *a6, a6[1]);
  if (((char)a3[23] & 0x80000000) == 0)
  {
    v12 = a3[23];
    if (v12 != 1)
    {
      if (v12 != 7)
      {
        if (v12 != 8)
          goto LABEL_144;
        v13 = a3;
        if (*(_QWORD *)a3 == 0x38746E695F745F57)
          goto LABEL_58;
        goto LABEL_15;
      }
      if (*(_DWORD *)a3 != 828792695 || *(_DWORD *)(a3 + 3) != 1952396849)
      {
        if (*(_DWORD *)a3 != 862347127 || *(_DWORD *)(a3 + 3) != 1952395827)
          goto LABEL_144;
        goto LABEL_95;
      }
      goto LABEL_112;
    }
    v47 = *a3;
LABEL_136:
    if (v47 == 81)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v134, 2, 1, 1, 1);
      v92 = a1 + 792;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v92, (__int128 *)&v134);
      size = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
      if (v134.__r_.__value_.__l.__size_)
      {
        v94 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v19 = *(_QWORD *)v92;
      if (a5 != 4 * *(int *)(*(_QWORD *)v92 + 8))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        v109 = a5;
        v110 = exception;
        std::to_string(&v145, v109);
        v111 = std::string::insert(&v145, 0, "Unexpected size s=");
        v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
        v146.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v112;
        v111->__r_.__value_.__l.__size_ = 0;
        v111->__r_.__value_.__r.__words[2] = 0;
        v111->__r_.__value_.__r.__words[0] = 0;
        v113 = std::string::append(&v146, "/blob=");
        v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
        v147.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v114;
        v113->__r_.__value_.__l.__size_ = 0;
        v113->__r_.__value_.__r.__words[2] = 0;
        v113->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v144, 4 * *(int *)(*(_QWORD *)v92 + 8));
        if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v115 = &v144;
        else
          v115 = (std::string *)v144.__r_.__value_.__r.__words[0];
        if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v116 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
        else
          v116 = v144.__r_.__value_.__l.__size_;
        v117 = std::string::append(&v147, (const std::string::value_type *)v115, v116);
        v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
        v148.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v118;
        v117->__r_.__value_.__l.__size_ = 0;
        v117->__r_.__value_.__r.__words[2] = 0;
        v117->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v141, " @ ");
        if ((v143 & 0x80u) == 0)
          v119 = (const std::string::value_type *)&v141;
        else
          v119 = v141;
        if ((v143 & 0x80u) == 0)
          v120 = v143;
        else
          v120 = v142;
        v121 = std::string::append(&v148, v119, v120);
        v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
        v149.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v122;
        v121->__r_.__value_.__l.__size_ = 0;
        v121->__r_.__value_.__r.__words[2] = 0;
        v121->__r_.__value_.__r.__words[0] = 0;
        v123 = std::string::append(&v149, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANECompilerEngine/Layers/ANECompilerInnerProduct.mm");
        v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
        v150.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v124;
        v123->__r_.__value_.__l.__size_ = 0;
        v123->__r_.__value_.__r.__words[2] = 0;
        v123->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v138, ":");
        if ((v140 & 0x80u) == 0)
          v125 = (const std::string::value_type *)&v138;
        else
          v125 = v138;
        if ((v140 & 0x80u) == 0)
          v126 = v140;
        else
          v126 = v139;
        v127 = std::string::append(&v150, v125, v126);
        v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        v151.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v128;
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v137, 80);
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v129 = &v137;
        else
          v129 = (std::string *)v137.__r_.__value_.__r.__words[0];
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v130 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
        else
          v130 = v137.__r_.__value_.__l.__size_;
        v131 = std::string::append(&v151, (const std::string::value_type *)v129, v130);
        v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        v134.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v110, &v134);
        __cxa_throw(v110, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      goto LABEL_143;
    }
LABEL_144:
    Espresso::generic_inner_product_kernel::__set_weight_raw_blob(a1, a2, (const std::string::value_type *)a3, a4, a5, a6);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 536))(&v134, a1);
    v96 = *(std::__shared_weak_count **)(a1 + 16);
    v133[0] = *(_QWORD *)(a1 + 8);
    v133[1] = (uint64_t)v96;
    if (v96)
    {
      p_shared_owners = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldxr(p_shared_owners);
      while (__stxr(v98 + 1, p_shared_owners));
    }
    v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 544) + 136))(a1 + 544);
    Espresso::set_conv_quantized_weight_helper(v100, v101, v102, v99, (unsigned __int8 **)a3, (char *)a4, a5, a6, a1 + 440, (__int128 *)&v134, v133, v99, 1);
    if (v96)
    {
      v103 = (unint64_t *)&v96->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    if (__p)
    {
      v136 = __p;
      operator delete(__p);
    }
    Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 544), (uint64_t *)a3, a4, a5);
    goto LABEL_155;
  }
  v14 = *((_QWORD *)a3 + 1);
  if (v14 == 1)
  {
    v47 = **(unsigned __int8 **)a3;
    goto LABEL_136;
  }
  if (v14 == 7)
  {
    v66 = *(int **)a3;
    if (**(_DWORD **)a3 != 828792695 || *(_DWORD *)(*(_QWORD *)a3 + 3) != 1952396849)
    {
      v68 = *v66;
      v69 = *(int *)((char *)v66 + 3);
      if (v68 != 862347127 || v69 != 1952395827)
        goto LABEL_144;
LABEL_95:
      v71 = (std::__shared_weak_count *)v160;
      v155[0] = v159;
      v155[1] = v160;
      if (v160)
      {
        v72 = (unint64_t *)(v160 + 8);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v134, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v155, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
      if (v71)
      {
        v74 = (unint64_t *)&v71->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      Espresso::transposed_blob_2d<Espresso::blob<float,2>>(&v153, (uint64_t *)&v134);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 400))(a1, &v153);
      v76 = v154;
      if (v154)
      {
        v77 = (unint64_t *)&v154->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v63 = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
      if (!v134.__r_.__value_.__l.__size_)
        goto LABEL_155;
      v79 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
      do
        v65 = __ldaxr(v79);
      while (__stlxr(v65 - 1, v79));
      goto LABEL_133;
    }
LABEL_112:
    v80 = (std::__shared_weak_count *)v160;
    v158[0] = v159;
    v158[1] = v160;
    if (v160)
    {
      v81 = (unint64_t *)(v160 + 8);
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v134, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v158, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
    if (v80)
    {
      v83 = (unint64_t *)&v80->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    Espresso::transposed_blob_2d<Espresso::blob<unsigned short,2>>(&v156, (uint64_t *)&v134);
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(uint64_t, uint64_t *, std::string *))(*(_QWORD *)a1 + 464))(a1, &v156, &v151);
    v85 = (std::__shared_weak_count *)v151.__r_.__value_.__l.__size_;
    if (v151.__r_.__value_.__l.__size_)
    {
      v86 = (unint64_t *)(v151.__r_.__value_.__l.__size_ + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = v157;
    if (v157)
    {
      v89 = (unint64_t *)&v157->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v63 = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
    if (!v134.__r_.__value_.__l.__size_)
      goto LABEL_155;
    v91 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
    do
      v65 = __ldaxr(v91);
    while (__stlxr(v65 - 1, v91));
LABEL_133:
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
    goto LABEL_155;
  }
  if (v14 != 8)
    goto LABEL_144;
  if (**(_QWORD **)a3 != 0x38746E695F745F57)
  {
    v13 = *(_QWORD **)a3;
LABEL_15:
    if (*v13 == 0x745F656C61637351)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v134, *(_DWORD *)(a1 + 308), 1, 1, 1);
      v15 = a1 + 824;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v15, (__int128 *)&v134);
      v16 = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
      if (v134.__r_.__value_.__l.__size_)
      {
        v17 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = *(_QWORD *)v15;
      if (a5 != 4 * *(int *)(*(_QWORD *)v15 + 8))
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        v21 = a5;
        v22 = v20;
        std::to_string(&v145, v21);
        v23 = std::string::insert(&v145, 0, "Unexpected size s=");
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v146.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v146, "/blob=");
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v147.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v144, 4 * *(int *)(*(_QWORD *)v15 + 8));
        if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v144;
        else
          v27 = (std::string *)v144.__r_.__value_.__r.__words[0];
        if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = HIBYTE(v144.__r_.__value_.__r.__words[2]);
        else
          v28 = v144.__r_.__value_.__l.__size_;
        v29 = std::string::append(&v147, (const std::string::value_type *)v27, v28);
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v148.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v141, " @ ");
        if ((v143 & 0x80u) == 0)
          v31 = (const std::string::value_type *)&v141;
        else
          v31 = v141;
        if ((v143 & 0x80u) == 0)
          v32 = v143;
        else
          v32 = v142;
        v33 = std::string::append(&v148, v31, v32);
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v149.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        v35 = std::string::append(&v149, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANECompilerEngine/Layers/ANECompilerInnerProduct.mm");
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v150.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v138, ":");
        if ((v140 & 0x80u) == 0)
          v37 = (const std::string::value_type *)&v138;
        else
          v37 = v138;
        if ((v140 & 0x80u) == 0)
          v38 = v140;
        else
          v38 = v139;
        v39 = std::string::append(&v150, v37, v38);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v151.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v137, 83);
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v137;
        else
          v41 = (std::string *)v137.__r_.__value_.__r.__words[0];
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
        else
          v42 = v137.__r_.__value_.__l.__size_;
        v43 = std::string::append(&v151, (const std::string::value_type *)v41, v42);
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v134.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v22, &v134);
        __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
LABEL_143:
      memcpy(*(void **)(v19 + 16), a4, a5);
      goto LABEL_155;
    }
    goto LABEL_144;
  }
LABEL_58:
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 760, (__int128 *)&v134);
  v48 = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
  if (v134.__r_.__value_.__l.__size_)
  {
    v49 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)v160;
  v152[0] = v159;
  v152[1] = v160;
  if (v160)
  {
    v52 = (unint64_t *)(v160 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,2>(&v134, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v152, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
  if (v51)
  {
    v54 = (unint64_t *)&v51->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int &,int &,int &,int &,void>(&v151, *(_DWORD *)(v134.__r_.__value_.__r.__words[0] + 12), *(_DWORD *)(v134.__r_.__value_.__r.__words[0] + 8), 1, 1);
  v56 = v151.__r_.__value_.__r.__words[0];
  if (*(int *)(v151.__r_.__value_.__r.__words[0] + 12) >= 1)
  {
    v57 = 0;
    do
    {
      v58 = *(_DWORD *)(v56 + 8);
      if (v58 >= 1)
      {
        v59 = 0;
        do
        {
          *(_BYTE *)(*(_QWORD *)(v56 + 16) + v57 * (uint64_t)v58 + v59) = *(_BYTE *)(*(_QWORD *)(v134.__r_.__value_.__r.__words[0]
                                                                                              + 16)
                                                                                  + *(int *)(v56 + 12)
                                                                                  * (uint64_t)(int)v59
                                                                                  + v57);
          v58 = *(_DWORD *)(v56 + 8);
          ++v59;
        }
        while ((int)v59 < v58);
      }
      ++v57;
    }
    while (v57 < *(_DWORD *)(v56 + 12));
  }
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 808, (__int128 *)&v151);
  v60 = (std::__shared_weak_count *)v151.__r_.__value_.__l.__size_;
  if (v151.__r_.__value_.__l.__size_)
  {
    v61 = (unint64_t *)(v151.__r_.__value_.__l.__size_ + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)v134.__r_.__value_.__l.__size_;
  if (v134.__r_.__value_.__l.__size_)
  {
    v64 = (unint64_t *)(v134.__r_.__value_.__l.__size_ + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    goto LABEL_133;
  }
LABEL_155:
  v105 = (std::__shared_weak_count *)v160;
  if (v160)
  {
    v106 = (unint64_t *)(v160 + 8);
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
}

void sub_19172B99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a69;
  char a72;
  void *v72;
  int v73;
  uint64_t v74;

  if (a18 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v74 - 169) < 0)
    operator delete(*(void **)(v74 - 192));
  if (a36 < 0)
    operator delete(a31);
  if (*(char *)(v74 - 201) < 0)
    operator delete(*(void **)(v74 - 224));
  if (*(char *)(v74 - 233) < 0)
    operator delete(*(void **)(v74 - 256));
  if (a42 < 0)
    operator delete(a37);
  if (a72 < 0)
    operator delete(a69);
  if (a48 < 0)
    operator delete(a43);
  if (a67 < 0)
    operator delete(a62);
  if (a60 < 0)
    operator delete(a55);
  if (a54 < 0)
  {
    operator delete(a49);
    if ((v73 & 1) == 0)
    {
LABEL_28:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v74 - 80);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v72);
  goto LABEL_28;
}

uint64_t Espresso::ANECompilerEngine::inner_product_kernel::supports_weight_key(uint64_t a1, unsigned __int8 **a2)
{
  int v3;
  BOOL v4;
  int *v5;
  int v7;
  int v8;

  v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != (unsigned __int8 *)7)
      goto LABEL_18;
    v5 = (int *)*a2;
    if (*(_DWORD *)*a2 == 828792695 && *(_DWORD *)(*a2 + 3) == 1952396849)
      return 1;
  }
  else
  {
    if (v3 != 7)
      goto LABEL_18;
    v4 = *(_DWORD *)a2 == 828792695 && *(_DWORD *)((char *)a2 + 3) == 1952396849;
    v5 = (int *)a2;
    if (v4)
      return 1;
  }
  v7 = *v5;
  v8 = *(int *)((char *)v5 + 3);
  if (v7 == 862347127 && v8 == 1952395827)
    return 1;
LABEL_18:
  if ((Espresso::generic_inner_product_kernel::supports_weight_key(a1, a2) & 1) != 0
    || Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 1))
  {
    return 1;
  }
  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key((uint64_t *)a2);
}

_QWORD *Espresso::ANECompilerEngine::inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 624), *a2, a2[1]);
}

_QWORD *Espresso::ANECompilerEngine::inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 760), *a2, a2[1]);
}

uint64_t Espresso::ANECompilerEngine::inner_product_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 632);
  *a2 = *(_QWORD *)(this + 624);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::ANECompilerEngine::inner_product_kernel::get_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 768);
  *a2 = *(_QWORD *)(this + 760);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *Espresso::ANECompilerEngine::inner_product_kernel::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 776), *a2, a2[1]);
}

uint64_t Espresso::ANECompilerEngine::inner_product_kernel::get_f16_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 784);
  *a2 = *(_QWORD *)(this + 776);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::ANECompilerEngine::inner_product_kernel::compile(Espresso::ANECompilerEngine::inner_product_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  std::__shared_weak_count *v9;
  char *v10;
  _DWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  _DWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v35;
  _BOOL4 v37;
  int v38;
  int v39;
  _BOOL4 v40;
  void *v41;
  __CFString *v42;
  size_t v43;
  std::string *p_str;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v45;
  size_t v46;
  unsigned int v47;
  std::string::size_type size;
  int64_t v49;
  std::string *v50;
  char *v51;
  std::string *v52;
  char *v53;
  size_t v54;
  std::string *v55;
  std::string *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::string *v60;
  std::string::size_type v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *height;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  vImagePixelCount v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  char *v95;
  _BOOL4 v96;
  void *data;
  std::__shared_weak_count *v98;
  char *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  int v106;
  uint64_t v107;
  int data_high;
  char *v109;
  unint64_t *v110;
  Espresso *v111;
  void *v112;
  int i;
  int v114;
  char *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  __CFString *v133;
  vImagePixelCount width_high;
  std::string *v135;
  const void *v136;
  __int128 v137;
  unint64_t j;
  std::string *v139;
  __int128 v140;
  std::string *v141;
  int v142;
  void *v143;
  __CFString *v144;
  unint64_t k;
  void *v146;
  __CFString *v147;
  __CFString *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  const char *v169;
  std::runtime_error *exception;
  void *v171;
  void *v172;
  vImage_Buffer v173;
  std::__shared_weak_count *v174;
  void *v175;
  std::vector<std::string> v176;
  void *v177;
  char v178;
  id v179;
  __CFString *v180;
  id v181;
  int v182;
  __int128 *v183[2];
  vImage_Buffer dest;
  std::__shared_weak_count *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  __int128 v190;
  std::string v191;
  std::string __str;
  std::string v193;
  uint64_t v194;
  void *__p;
  std::string *v196;
  std::string *v197;
  unint64_t v198;
  void *v199;
  char v200;
  id v201;
  __CFString *v202;
  id v203;
  int v204;
  _QWORD v205[3];
  void *v206;
  std::__shared_weak_count *v207;
  void *v208;
  std::__shared_weak_count *v209;
  _QWORD v210[4];
  int v211;
  int v212;
  int v213;
  int v214;
  uint64_t v215;
  int v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  __int16 v231;
  int v232;
  char v233;
  const Espresso::net *v234;
  std::__shared_weak_count *v235;
  _DWORD *v236;
  std::__shared_weak_count *v237;
  _DWORD *v238;
  std::__shared_weak_count *v239;
  const Espresso::net *v240;
  std::__shared_weak_count *v241;
  std::string v242[2];
  __int128 v243[2];

  *((_QWORD *)&v243[0] + 1) = *MEMORY[0x1E0C80C00];
  v240 = 0;
  v241 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v241 = v7) == 0)
    || (v8 = (const Espresso::net *)*((_QWORD *)a2 + 1), (v240 = v8) == 0))
  {
    v169 = "Inconsistent state: null network";
    goto LABEL_346;
  }
  if (!*((_QWORD *)v8 + 72))
  {
    v169 = "Inconsistent state: blob_storage";
LABEL_346:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v169);
  }
  v9 = v7;
  v193.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)v193.__r_.__value_.__l.__data_, (__int128 **)&v193);
  v11 = (_DWORD *)*((_QWORD *)v10 + 5);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v238 = v11;
  v239 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v193.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)a3, (__int128 **)&v193);
  v16 = (_DWORD *)*((_QWORD *)v15 + 5);
  v17 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  v236 = v16;
  v237 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (*((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6) != 24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v16[3] == 1 && v16[2] == 1)
  {
    v20 = v11[3] * v11[4] * v11[2];
    if (v20 == *((_DWORD *)this + 77))
    {
      v21 = *((_DWORD *)this + 76);
      v22 = *((_DWORD *)this + 78);
      v23 = *(_QWORD *)((char *)this + 316);
      v24 = *((_DWORD *)this + 89);
      v25 = *((_QWORD *)this + 45);
      v26 = (unint64_t *)&v9->__shared_owners_;
      v234 = v8;
      v235 = v9;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      memset(v210, 0, 24);
      v210[3] = v23;
      v211 = v22;
      v212 = 0;
      v213 = v21;
      v214 = v20;
      v215 = 0x100000001;
      v216 = 0;
      v217 = v24;
      v218 = v25;
      v220 = 0;
      v219 = 0;
      v222 = 0x1000100010001;
      v224 = 0;
      v223 = 0;
      v225 = 0x100000001;
      v226 = 0;
      v221 = 0;
      v227 = 0x10000;
      v230 = 0;
      v228 = 0;
      v229 = 0;
      v231 = 1;
      v232 = 0;
      v233 = 0;
      if (v28)
      {
        v208 = v28;
        v209 = v12;
        if (v12)
        {
          v29 = (unint64_t *)&v12->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
      }
      else
      {
        v209 = 0;
        v208 = 0;
      }
      if (v158)
      {
        v206 = v158;
        v207 = v17;
        if (v17)
        {
          v159 = (unint64_t *)&v17->__shared_owners_;
          do
            v160 = __ldxr(v159);
          while (__stxr(v160 + 1, v159));
        }
      }
      else
      {
        v17 = 0;
        v206 = 0;
        v207 = 0;
      }
      Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::inner_product_kernel *>((uint64_t)this, a2, &v234, (uint64_t)v210, (id *)a3, (uint64_t *)&v208, (uint64_t *)&v206);
      if (v17)
      {
        v161 = (unint64_t *)&v17->__shared_owners_;
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v163 = v209;
      if (v209)
      {
        v164 = (unint64_t *)&v209->__shared_owners_;
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      v166 = v235;
      if (v235)
      {
        v167 = (unint64_t *)&v235->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      goto LABEL_305;
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v193, (uint64_t)v16);
  v32 = HIDWORD(v193.__r_.__value_.__r.__words[2]) == -1 || SHIDWORD(v193.__r_.__value_.__r.__words[2]) > 1;
  if (__p)
  {
    v196 = (std::string *)__p;
    operator delete(__p);
  }
  if (v32)
  {
    Espresso::abstract_blob_container::shape((char *)&v193, (uint64_t)v16);
    v33 = HIDWORD(v193.__r_.__value_.__r.__words[0]) == 1;
    if (__p)
    {
      v196 = (std::string *)__p;
      operator delete(__p);
    }
  }
  else
  {
    v33 = 1;
  }
  Espresso::abstract_blob_container::shape((char *)&v193, (uint64_t)v16);
  v35 = HIDWORD(v193.__r_.__value_.__r.__words[2]) == -1 || SHIDWORD(v193.__r_.__value_.__r.__words[2]) > 2;
  if (__p)
  {
    v196 = (std::string *)__p;
    operator delete(__p);
  }
  if (v35)
  {
    Espresso::abstract_blob_container::shape((char *)&v193, (uint64_t)v16);
    if (LODWORD(v193.__r_.__value_.__r.__words[1]) != 1)
      v33 = 0;
    if (__p)
    {
      v196 = (std::string *)__p;
      operator delete(__p);
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v193, (uint64_t)v16);
  v37 = HIDWORD(v193.__r_.__value_.__r.__words[2]) == -1 || SHIDWORD(v193.__r_.__value_.__r.__words[2]) > 3;
  if (__p)
  {
    v196 = (std::string *)__p;
    operator delete(__p);
  }
  if (v37)
  {
    Espresso::abstract_blob_container::shape((char *)&v193, (uint64_t)v16);
    if (HIDWORD(v193.__r_.__value_.__r.__words[1]) != 1)
      v33 = 0;
    if (__p)
    {
      v196 = (std::string *)__p;
      operator delete(__p);
    }
  }
  Espresso::abstract_blob_container::shape((char *)&v193, (uint64_t)v16);
  if (LODWORD(v193.__r_.__value_.__r.__words[2]) == 1)
    v38 = 4;
  else
    v38 = 5;
  if (HIDWORD(v193.__r_.__value_.__r.__words[2]) == -1)
    v39 = v38;
  else
    v39 = HIDWORD(v193.__r_.__value_.__r.__words[2]);
  if (__p)
  {
    v196 = (std::string *)__p;
    operator delete(__p);
  }
  if (v39 >= 5)
  {
    Espresso::abstract_blob_container::shape((char *)&v193, (uint64_t)v16);
    if (LODWORD(v193.__r_.__value_.__r.__words[2]) != 1)
      v33 = 0;
    if (__p)
    {
      v196 = (std::string *)__p;
      operator delete(__p);
    }
  }
  if (*((_DWORD *)this + 78))
    v40 = (*((_BYTE *)this + 308) & 0x1F) == 0 && v33;
  else
    v40 = 0;
  memset(v205, 0, sizeof(v205));
  v41 = (void *)objc_opt_new();
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v193.__r_.__value_.__l.__data_, (id *)a3);
  v42 = v202;
  v202 = CFSTR("MatrixMultiplication");

  v204 = 1;
  if (*((char *)a3 + 23) >= 0)
    v43 = *((unsigned __int8 *)a3 + 23);
  else
    v43 = *((_QWORD *)a3 + 1);
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v43 + 3);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v43)
  {
    if (*((char *)a3 + 23) >= 0)
      v45 = a3;
    else
      v45 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
    memmove(p_str, v45, v43);
  }
  *(_DWORD *)((char *)&p_str->__r_.__value_.__l.__data_ + v43) = 7823199;
  v46 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  LOBYTE(v47) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
  size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v49 = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = &__str;
  else
    v50 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v49 >= 8)
  {
    v171 = v41;
    v51 = (char *)v50 + v49;
    v52 = v50;
    while (1)
    {
      v53 = (char *)memchr(v52, 95, v49 - 7);
      if (!v53)
      {
LABEL_100:
        v41 = v171;
        goto LABEL_101;
      }
      if (*(_QWORD *)v53 == 0x5F6C6C6F726E755FLL)
        break;
      v52 = (std::string *)(v53 + 1);
      v49 = v51 - (char *)v52;
      if (v51 - (char *)v52 < 8)
        goto LABEL_100;
    }
    if (v53 == v51)
    {
      v41 = v171;
    }
    else
    {
      v41 = v171;
      if (v53 - (char *)v50 != -1)
      {
        std::string::basic_string((std::string *)&v173, &__str, 0, v53 - (char *)v50, (std::allocator<char> *)&dest);
        v60 = std::string::append((std::string *)&v173, "__w");
        v61 = v60->__r_.__value_.__r.__words[0];
        v242[0].__r_.__value_.__r.__words[0] = v60->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v242[0].__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7);
        v47 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str.__r_.__value_.__r.__words[0] = v61;
        __str.__r_.__value_.__l.__size_ = v242[0].__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v242[0].__r_.__value_.__r.__words + 7);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = v47;
        if (SHIBYTE(v173.width) < 0)
        {
          operator delete(v173.data);
          v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        size = __str.__r_.__value_.__l.__size_;
        v46 = v47;
      }
    }
  }
LABEL_101:
  if ((v47 & 0x80u) == 0)
    v54 = v46;
  else
    v54 = size;
  std::string::basic_string[abi:ne180100]((uint64_t)&v191, v54 + 3);
  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &v191;
  else
    v55 = (std::string *)v191.__r_.__value_.__r.__words[0];
  if (v54)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &__str;
    else
      v56 = (std::string *)__str.__r_.__value_.__r.__words[0];
    memmove(v55, v56, v54);
  }
  *(_DWORD *)((char *)&v55->__r_.__value_.__l.__data_ + v54) = 6446943;
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 35), &__str))
  {
    memset(v242, 0, 40);
    (*(void (**)(__int128 *__return_ptr, Espresso::ANECompilerEngine::inner_product_kernel *))(*(_QWORD *)this + 416))(&v190, this);
    if (!(_QWORD)v190)
    {
      v62 = *((_QWORD *)this + 97);
      v63 = *((_QWORD *)this + 98);
      v188 = v62;
      v189 = (std::__shared_weak_count *)v63;
      if (v63)
      {
        v64 = (unint64_t *)(v63 + 8);
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }
      if (!v62)
        Espresso::throw_exception_selector<Espresso::generic_error>("InnerProduct kernel has no weights");
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v173, (int *)(v62 + 8));
      v66 = *(_OWORD *)&v173.data;
      *(_OWORD *)&v173.data = 0uLL;
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
      v190 = v66;
      if (v67)
      {
        v68 = (unint64_t *)&v67->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      height = (std::__shared_weak_count *)v173.height;
      if (v173.height)
      {
        v71 = (unint64_t *)(v173.height + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
          std::__shared_weak_count::__release_weak(height);
        }
      }
      v73 = *(void **)(v190 + 16);
      v74 = *(int *)(v188 + 12) * (uint64_t)*(int *)(v188 + 8);
      v173.data = *(void **)(v188 + 16);
      v173.height = 1;
      v173.width = v74;
      v173.rowBytes = 2 * v74;
      dest.data = v73;
      dest.height = 1;
      dest.width = v74;
      dest.rowBytes = 4 * v74;
      vImageConvert_Planar16FtoPlanarF(&v173, &dest, 0);
      v75 = v189;
      if (v189)
      {
        v76 = (unint64_t *)&v189->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v188, *((_DWORD *)this + 76), 1, *((_DWORD *)this + 77) + v40, 1);
    if (*((_QWORD *)this + 78))
    {
      v57 = (std::__shared_weak_count *)*((_QWORD *)this + 79);
      v186 = *((_QWORD *)this + 78);
      v187 = v57;
      if (v57)
      {
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldxr(v58);
        while (__stxr(v59 + 1, v58));
      }
    }
    else
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v186, *((_DWORD *)this + 76), 1, 1, 1);
    }
    std::string::operator=(v242, &__str);
    v78 = v188;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v242[1].__r_.__value_.__r.__words, v188, (uint64_t)v189);
    v79 = *((_DWORD *)this + 77);
    if (v79 + v40)
    {
      v80 = 0;
      v81 = 0;
      v82 = v190;
      v83 = v186;
      v84 = *((unsigned int *)this + 76);
      do
      {
        if (v81 == v79)
        {
          if ((_DWORD)v84)
          {
            v85 = *(int **)(v83 + 16);
            v86 = *(_QWORD *)(v78 + 24);
            v87 = v84 * v79;
            v88 = v84;
            do
            {
              v89 = *v85++;
              *(_DWORD *)(v86 + 4 * v87++) = v89;
              --v88;
            }
            while (v88);
          }
        }
        else if ((_DWORD)v84)
        {
          v90 = *(_QWORD *)(v82 + 16);
          v91 = *(_QWORD *)(v78 + 24);
          v92 = v81;
          v93 = v80;
          v94 = v84;
          do
          {
            *(_DWORD *)(v91 + 4 * v93++) = *(_DWORD *)(v90 + 4 * v92);
            v92 += v79;
            --v94;
          }
          while (v94);
        }
        ++v81;
        v80 += v84;
      }
      while (v81 != v79 + v40);
    }
    v173.data = &__str;
    v95 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &__str, (__int128 **)&v173);
    std::string::operator=((std::string *)(v95 + 56), v242);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v95 + 10, (uint64_t)v242[1].__r_.__value_.__l.__data_, v242[1].__r_.__value_.__l.__size_);
    if (!*((_DWORD *)this + 78))
      goto LABEL_190;
    v172 = v41;
    if (v40)
    {
      v96 = v40;
      v174 = 0;
      memset(&v173, 0, sizeof(v173));
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&dest, 1, 1, 1, 1);
      data = dest.data;
      **((_DWORD **)dest.data + 3) = 1065353216;
      std::string::operator=(v242, &v191);
      v98 = (std::__shared_weak_count *)dest.height;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v242[1].__r_.__value_.__r.__words, (uint64_t)data, dest.height);
      v183[0] = (__int128 *)&v191;
      v99 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &v191, v183);
      std::string::operator=((std::string *)(v99 + 56), v242);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v99 + 10, (uint64_t)v242[1].__r_.__value_.__l.__data_, v242[1].__r_.__value_.__l.__size_);
      v40 = v96;
      v41 = v172;
      if (v98)
      {
        v100 = (unint64_t *)&v98->__shared_owners_;
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      v102 = v174;
      if (v174)
      {
        v103 = (unint64_t *)&v174->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      if ((SHIBYTE(v173.width) & 0x80000000) == 0)
        goto LABEL_190;
      v105 = v173.data;
    }
    else
    {
      v185 = 0;
      memset(&dest, 0, sizeof(dest));
      v106 = *(_DWORD *)(*((_QWORD *)this + 78) + 8);
      v107 = (uint64_t)v236;
      Espresso::abstract_blob_container::shape((char *)&v173, (uint64_t)v236);
      data_high = HIDWORD(v173.data);
      v109 = (char *)operator new(0x60uLL);
      *((_QWORD *)v109 + 1) = 0;
      v110 = (unint64_t *)(v109 + 8);
      *((_QWORD *)v109 + 2) = 0;
      *((_QWORD *)v109 + 3) = &off_1E2DA11F0;
      *(_QWORD *)v109 = &off_1E2DBECA8;
      *((_OWORD *)v109 + 4) = 0u;
      *((_OWORD *)v109 + 5) = 0u;
      *((_DWORD *)v109 + 8) = v106;
      *((_DWORD *)v109 + 9) = data_high;
      *((_QWORD *)v109 + 5) = 0x100000001;
      v111 = (Espresso *)(4 * v106 * (uint64_t)data_high);
      v112 = Espresso::kern_alloc_uninitialized(v111);
      bzero(v112, (size_t)v111);
      *((_QWORD *)v109 + 6) = v112;
      v109[56] = 1;
      v183[0] = (__int128 *)(v109 + 24);
      v183[1] = (__int128 *)v109;
      if (v175)
      {
        v176.__begin_ = (std::vector<std::string>::pointer)v175;
        operator delete(v175);
      }
      for (i = 0; ; ++i)
      {
        Espresso::abstract_blob_container::shape((char *)&v173, v107);
        v114 = HIDWORD(v173.data);
        if (v175)
        {
          v176.__begin_ = (std::vector<std::string>::pointer)v175;
          operator delete(v175);
        }
        if (i >= v114)
          break;
        memcpy((void *)(*((_QWORD *)v109 + 6) + 4 * *(_DWORD *)(*((_QWORD *)this + 78) + 8) * i), *(const void **)(*((_QWORD *)this + 78) + 16), 4 * *(int *)(*((_QWORD *)this + 78) + 8));
      }
      std::string::operator=(v242, &v191);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v242[1].__r_.__value_.__r.__words, (uint64_t)(v109 + 24), (uint64_t)v109);
      v173.data = &v191;
      v115 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &v191, (__int128 **)&v173);
      std::string::operator=((std::string *)(v115 + 56), v242);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v115 + 10, (uint64_t)v242[1].__r_.__value_.__l.__data_, v242[1].__r_.__value_.__l.__size_);
      v40 = 0;
      do
        v116 = __ldaxr(v110);
      while (__stlxr(v116 - 1, v110));
      if (!v116)
      {
        (*(void (**)(char *))(*(_QWORD *)v109 + 16))(v109);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v109);
      }
      v117 = v185;
      if (v185)
      {
        v118 = (unint64_t *)&v185->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      if ((SHIBYTE(dest.width) & 0x80000000) == 0)
        goto LABEL_190;
      v105 = dest.data;
    }
    operator delete(v105);
LABEL_190:
    v120 = v187;
    if (v187)
    {
      v121 = (unint64_t *)&v187->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v123 = v189;
    if (v189)
    {
      v124 = (unint64_t *)&v189->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v126 = (std::__shared_weak_count *)*((_QWORD *)&v190 + 1);
    if (*((_QWORD *)&v190 + 1))
    {
      v127 = (unint64_t *)(*((_QWORD *)&v190 + 1) + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    v129 = (std::__shared_weak_count *)v242[1].__r_.__value_.__l.__size_;
    if (v242[1].__r_.__value_.__l.__size_)
    {
      v130 = (unint64_t *)(v242[1].__r_.__value_.__l.__size_ + 8);
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    if (SHIBYTE(v242[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v242[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 78) && v40)
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v173.data, (id *)a3);
    v132 = (void *)objc_opt_new();
    objc_msgSend(v132, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Dimension"));
    v133 = v180;
    v180 = CFSTR("Concat");

    v182 = 1;
    objc_storeStrong(&v181, v132);
    if ((v173.width & 0x8000000000000000) == 0)
      width_high = HIBYTE(v173.width);
    else
      width_high = v173.height;
    std::string::basic_string[abi:ne180100]((uint64_t)v242, width_high + 12);
    if ((v242[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v135 = v242;
    else
      v135 = (std::string *)v242[0].__r_.__value_.__r.__words[0];
    if (width_high)
    {
      if ((v173.width & 0x8000000000000000) == 0)
        v136 = &v173;
      else
        v136 = v173.data;
      memmove(v135, v136, width_high);
    }
    strcpy((char *)v135 + width_high, "__concat_one");
    if (SHIBYTE(v173.width) < 0)
      operator delete(v173.data);
    *(_OWORD *)&v173.data = *(_OWORD *)&v242[0].__r_.__value_.__l.__data_;
    v173.width = v242[0].__r_.__value_.__r.__words[2];
    if (SHIBYTE(v196->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v242, v196->__r_.__value_.__l.__data_, v196->__r_.__value_.__l.__size_);
    }
    else
    {
      v137 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
      v242[0].__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v242[0].__r_.__value_.__l.__data_ = v137;
    }
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v242[1], v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
    else
      v242[1] = v191;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v176, v242, v243, 2uLL);
    for (j = 0; j != 0x1FFFFFFFFFFFFFFALL; j -= 3)
    {
      if (SHIBYTE(v242[1].__r_.__value_.__r.__words[j + 2]) < 0)
        operator delete(v242[j / 3 + 1].__r_.__value_.__l.__data_);
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v173);
    std::string::operator=(v196, (const std::string *)&v173);

    if (v178 < 0)
      operator delete(v177);
    v242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v242);
    v242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v173.rowBytes;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v242);
    if (SHIBYTE(v173.width) < 0)
      operator delete(v173.data);
  }
  v139 = v197;
  if ((unint64_t)v197 >= v198)
  {
    v141 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v196, (uint64_t)&__str);
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v197, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else
    {
      v140 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      v197->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v139->__r_.__value_.__l.__data_ = v140;
    }
    v141 = v139 + 1;
  }
  v197 = v141;
  objc_storeStrong(&v203, v41);
  if (*((_DWORD *)this + 78))
    v142 = v40;
  else
    v142 = 1;
  if (v142 != 1 || *((_DWORD *)this + 79) || *((_DWORD *)this + 80))
    std::string::append(&v193, "__matmul");
  Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v193);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&dest, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&dest.data = *(_OWORD *)&v193.__r_.__value_.__l.__data_;
    dest.width = v193.__r_.__value_.__r.__words[2];
  }
  if (*((_DWORD *)this + 78) && !v40)
  {
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v173.data, (id *)a3);
    v143 = (void *)objc_opt_new();
    objc_msgSend(v143, "setObject:forKeyedSubscript:", CFSTR("Add"), CFSTR("Type"));
    v144 = v180;
    v180 = CFSTR("ElementWise");

    objc_storeStrong(&v181, v143);
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(v242, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
    else
      v242[0] = v193;
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v242[1], v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
    else
      v242[1] = v191;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v176, v242, v243, 2uLL);
    for (k = 0; k != 0x1FFFFFFFFFFFFFFALL; k -= 3)
    {
      if (SHIBYTE(v242[1].__r_.__value_.__r.__words[k + 2]) < 0)
        operator delete(v242[k / 3 + 1].__r_.__value_.__l.__data_);
    }
    if (*((_DWORD *)this + 79) || *((_DWORD *)this + 80))
      std::string::append((std::string *)&v173, "__bias");
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v173);
    std::string::operator=((std::string *)&dest, (const std::string *)&v173);

    if (v178 < 0)
      operator delete(v177);
    v242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v242);
    v242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v173.rowBytes;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v242);
    if (SHIBYTE(v173.width) < 0)
      operator delete(v173.data);
  }
  if (*((_DWORD *)this + 79))
  {
    v146 = (void *)objc_opt_new();
    objc_msgSend(v146, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v173.data, (id *)a3);
    v147 = v180;
    v180 = CFSTR("Neuron");

    objc_storeStrong(&v181, v146);
    if (SHIBYTE(dest.width) < 0)
    {
      std::string::__init_copy_ctor_external(v242, (const std::string::value_type *)dest.data, dest.height);
    }
    else
    {
      *(_OWORD *)&v242[0].__r_.__value_.__l.__data_ = *(_OWORD *)&dest.data;
      v242[0].__r_.__value_.__r.__words[2] = dest.width;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v176, v242, (__int128 *)&v242[1], 1uLL);
    if (SHIBYTE(v242[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v242[0].__r_.__value_.__l.__data_);
LABEL_289:
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v173);

    if (v178 < 0)
      operator delete(v177);
    v242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v176;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v242);
    v242[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v173.rowBytes;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v242);
    if (SHIBYTE(v173.width) < 0)
      operator delete(v173.data);

    goto LABEL_294;
  }
  if (*((_DWORD *)this + 80))
  {
    v146 = (void *)objc_opt_new();
    objc_msgSend(v146, "setObject:forKeyedSubscript:", CFSTR("Tanh"), CFSTR("Type"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v173.data, (id *)a3);
    v148 = v180;
    v180 = CFSTR("Neuron");

    objc_storeStrong(&v181, v146);
    if (SHIBYTE(dest.width) < 0)
    {
      std::string::__init_copy_ctor_external(v242, (const std::string::value_type *)dest.data, dest.height);
    }
    else
    {
      *(_OWORD *)&v242[0].__r_.__value_.__l.__data_ = *(_OWORD *)&dest.data;
      v242[0].__r_.__value_.__r.__words[2] = dest.width;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v176, v242, (__int128 *)&v242[1], 1uLL);
    if (SHIBYTE(v242[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v242[0].__r_.__value_.__l.__data_);
    goto LABEL_289;
  }
LABEL_294:
  if (SHIBYTE(dest.width) < 0)
    operator delete(dest.data);
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);

  if (v200 < 0)
    operator delete(v199);
  v173.data = &v196;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
  v173.data = &v194;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
  if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v193.__r_.__value_.__l.__data_);

  v193.__r_.__value_.__r.__words[0] = (std::string::size_type)v205;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
LABEL_305:
  v149 = v237;
  if (v237)
  {
    v150 = (unint64_t *)&v237->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = v239;
  if (v239)
  {
    v153 = (unint64_t *)&v239->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v155 = v241;
  if (v241)
  {
    v156 = (unint64_t *)&v241->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
}

void sub_19172D388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;

  if (a18 < 0)
    operator delete(__p);
  if (a56 < 0)
    operator delete(a51);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a57);

  a57 = (uint64_t)&a72;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v72 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v72 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v72 - 176);
  _Unwind_Resume(a1);
}

double Espresso::ANECompilerEngine::inner_product_kernel::weights_helper_weights_shape@<D0>(int32x2_t *this@<X0>, uint64_t a2@<X8>)
{
  int32x2_t v2;
  double result;

  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  v2 = vrev64_s32(this[38]);
  *(_QWORD *)a2 = 0x100000001;
  *(int32x2_t *)(a2 + 8) = v2;
  result = NAN;
  *(_QWORD *)(a2 + 16) = 0xFFFFFFFF00000001;
  return result;
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::inner_product_kernel::compile(Espresso::ANECompilerEngine::inner_product_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::inner_product_kernel::compile((Espresso::ANECompilerEngine::inner_product_kernel *)((char *)this - 544), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::inner_product_kernel::~inner_product_kernel(Espresso::ANECompilerEngine::inner_product_kernel *this)
{
  Espresso::generic_inner_product_kernel *v2;
  char *v3;

  v2 = (Espresso::ANECompilerEngine::inner_product_kernel *)((char *)this - 544);
  *((_QWORD *)this - 68) = &off_1E2D796B8;
  *(_QWORD *)this = &unk_1E2D798E8;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v2);
}

{
  Espresso::generic_inner_product_kernel *v2;
  char *v3;

  v2 = (Espresso::ANECompilerEngine::inner_product_kernel *)((char *)this - 544);
  *((_QWORD *)this - 68) = &off_1E2D796B8;
  *(_QWORD *)this = &unk_1E2D798E8;
  v3 = (char *)this + 216;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::inner_product_kernel::clear_weights(Espresso::ANECompilerEngine::inner_product_kernel *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this - 256);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this - 32));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 26);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 59);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 61);
}

double `non-virtual thunk to'Espresso::ANECompilerEngine::inner_product_kernel::weights_helper_weights_shape@<D0>(Espresso::ANECompilerEngine::inner_product_kernel *this@<X0>, uint64_t a2@<X8>)
{
  int32x2_t v2;
  double result;

  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  v2 = vrev64_s32(*(int32x2_t *)((char *)this - 240));
  *(_QWORD *)a2 = 0x100000001;
  *(int32x2_t *)(a2 + 8) = v2;
  result = NAN;
  *(_QWORD *)(a2 + 16) = 0xFFFFFFFF00000001;
  return result;
}

void Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::inner_product_kernel *>(uint64_t a1, _BYTE *a2, const Espresso::net **a3, uint64_t a4, id *a5, uint64_t *a6, uint64_t *a7)
{
  std::__shared_weak_count *v10;
  const Espresso::net *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  const Espresso::net *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  const Espresso::net *v22;
  _QWORD *v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  __CFString *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::string *v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  const __CFString *v50;
  const NSDictionary *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  _BOOL4 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  Espresso::ANECompilerEngine::ane_kernel *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  void *v89;
  Espresso::ANECompilerEngine::ane_kernel *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  void *v105;
  Espresso::ANECompilerEngine::ane_kernel *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  const Espresso::net *v114;
  unint64_t *v115;
  unint64_t v116;
  void *v117;
  void *v118;
  Espresso::ANECompilerEngine::ane_kernel *v119;
  uint64_t v120;
  Espresso::ANECompilerEngine::ane_kernel *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  char *v127;
  unint64_t *v128;
  const unsigned __int8 *v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  uint64_t weights_file_index;
  std::string::size_type v136;
  Espresso::ANECompilerEngine::ane_kernel *v137;
  std::string::size_type v138;
  int v139;
  int v140;
  char *v141;
  unint64_t *v142;
  const unsigned __int8 *v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  void *v150;
  Espresso::quantized_weights_helper *v151;
  const Espresso::net *v152;
  unint64_t *v153;
  unint64_t v154;
  Espresso::quantized_weights_helper *v155;
  unint64_t *v156;
  unint64_t v157;
  void *v158;
  char *v159;
  char *v160;
  char *v161;
  int v162;
  _DWORD *v163;
  char v165;
  uint64_t v166;
  uint64_t v168;
  int v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  const unsigned __int8 *v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  void *v177;
  uint64_t v178;
  std::__shared_weak_count *size;
  unint64_t *v180;
  unint64_t v181;
  unsigned int *v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::string::size_type v201;
  uint64_t v202;
  std::string::size_type v203;
  BOOL v204;
  void *v206;
  void *v207;
  void *v208;
  int v209;
  _BOOL4 v210;
  int v211;
  int v212;
  int v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  BOOL v225;
  int v227;
  void *v228;
  void *v229;
  void *v230;
  void *v231;
  const __CFString *v232;
  char v233;
  void *v234;
  void *v235;
  __CFString *v236;
  uint64_t v237;
  char *v238;
  _DWORD *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::string *v243;
  std::string *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  char *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  char v262;
  float v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  int *v279;
  _WORD *v280;
  int v281;
  __int128 v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  int *v294;
  _WORD *v295;
  int v296;
  int v298;
  Espresso::ANECompilerEngine::compiler::build_state_t *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t *v305;
  unint64_t v306;
  void *v307;
  id v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  uint64_t v313;
  void *v314;
  void *v315;
  __int128 v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  void *v322;
  void *v323;
  void *v324;
  uint64_t v325;
  void *v326;
  void *v327;
  std::string *v328;
  std::string *v329;
  uint64_t v330;
  char v331;
  std::string::size_type v332;
  std::string::size_type v333;
  uint64_t v334;
  unsigned __int8 *v335;
  std::string *v336;
  const std::string::value_type *data;
  __int128 v338;
  __CFString *v339;
  std::string *v340;
  std::string *v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t *v360;
  unint64_t v361;
  uint64_t *v362;
  unint64_t v363;
  _QWORD *v364;
  uint64_t v365;
  uint64_t v366;
  __int128 v367;
  const unsigned __int8 *v368;
  int *v369;
  _WORD *v370;
  uint64_t v371;
  int v372;
  Espresso::ANECompilerEngine::compiler::build_state_t *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  void *v380;
  void *v381;
  void *v382;
  void *v383;
  uint64_t v384;
  std::__shared_weak_count *v385;
  unint64_t *v386;
  unint64_t v387;
  __int128 v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  Espresso::ANECompilerEngine::compiler::build_state_t *v393;
  unint64_t *v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  const unsigned __int8 **v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  uint64_t v403;
  unint64_t *v404;
  unint64_t v405;
  void *v406;
  void *v407;
  void *v408;
  void *v409;
  uint64_t v410;
  __int128 v411;
  unint64_t *v412;
  unint64_t v413;
  id v414;
  void *v415;
  void *v416;
  void *v417;
  void *v418;
  uint64_t v419;
  void *v420;
  void *v421;
  __CFString *v422;
  std::string *v423;
  std::string *v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  void *v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  unint64_t v436;
  char *v437;
  std::string::size_type v438;
  __int128 v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  std::string::size_type v443;
  float *v444;
  float *v445;
  float *v446;
  uint64_t v447;
  float v448;
  float v449;
  float v450;
  uint64_t v451;
  const unsigned __int8 *v452;
  int *v453;
  _WORD *v454;
  uint64_t v455;
  int v456;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  uint64_t v461;
  unint64_t *v462;
  unint64_t v463;
  void *v464;
  void *v465;
  void *v466;
  uint64_t v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  unint64_t v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  std::__shared_weak_count *v477;
  unint64_t *v478;
  unint64_t v479;
  void *v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  std::__shared_weak_count *v487;
  unint64_t *v488;
  unint64_t v489;
  void *v490;
  __CFString *v491;
  std::string *v492;
  std::string *v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  uint64_t v497;
  unint64_t *v498;
  void *v499;
  void *v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  int v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  uint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  Espresso::ANECompilerEngine::compiler *v518;
  unint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  std::__shared_weak_count *v526;
  unint64_t *v527;
  unint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  unint64_t *v532;
  char *v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  std::__shared_weak_count *v537;
  unint64_t *v538;
  unint64_t v539;
  int v540;
  std::__shared_weak_count *v541;
  unint64_t *v542;
  unint64_t v543;
  void *v544;
  void *v545;
  __CFString *v546;
  std::string *v547;
  std::string *v548;
  int *v549;
  uint64_t v550;
  std::string::size_type v551;
  const unsigned __int8 *v552;
  _WORD *v553;
  int v554;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  unint64_t *v559;
  unint64_t v560;
  void *v561;
  uint64_t v562;
  std::__shared_weak_count *v563;
  unint64_t *v564;
  unint64_t v565;
  id v566;
  __CFString *v567;
  std::string *v568;
  std::string *v569;
  unint64_t v570;
  unint64_t v571;
  char *v572;
  uint64_t v573;
  const Espresso::net *v574;
  Espresso::ANECompilerEngine *v575;
  NSString *v576;
  Espresso::ANECompilerEngine *v577;
  std::string *p_str;
  void *v579;
  __int128 *v580;
  uint64_t v581;
  char *v582;
  char *k;
  __CFString *v584;
  std::string *v585;
  std::string *v586;
  std::string *v587;
  unint64_t v588;
  unint64_t v589;
  unint64_t v590;
  uint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  std::__shared_weak_count *v595;
  unint64_t *v596;
  unint64_t v597;
  std::__shared_weak_count *v598;
  unint64_t *v599;
  unint64_t v600;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  unint64_t v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  std::__shared_weak_count *v610;
  unint64_t *v611;
  unint64_t v612;
  std::__shared_weak_count *v613;
  unint64_t *v614;
  unint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  std::__shared_weak_count *v619;
  unint64_t *v620;
  unint64_t v621;
  std::__shared_weak_count *v622;
  unint64_t *v623;
  unint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  void *v628;
  std::__shared_weak_count *v629;
  unint64_t *v630;
  unint64_t v631;
  char *v632;
  char *v633;
  char *v634;
  vDSP_Length v635;
  unsigned int v636;
  uint64_t v637;
  uint64_t v638;
  float *v639;
  vDSP_Length v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t *v645;
  unint64_t v646;
  void *v647;
  void *v648;
  uint64_t v649;
  void *v650;
  std::__shared_weak_count *v651;
  unint64_t *v652;
  unint64_t v653;
  std::__shared_weak_count *v654;
  unint64_t *v655;
  unint64_t v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  std::__shared_weak_count *v660;
  unint64_t *v661;
  unint64_t v662;
  void *v663;
  int v664;
  uint64_t v666;
  const __CFString *v668;
  std::__shared_weak_count *v669;
  unint64_t *v670;
  unint64_t v671;
  std::runtime_error *exception;
  uint64_t v673;
  int *v674;
  uint64_t i;
  float v676;
  int v677;
  _WORD *v678;
  int v679;
  std::runtime_error *v681;
  int *v682;
  uint64_t j;
  int v684;
  int v685;
  unsigned int v686;
  unsigned int v687;
  int v688;
  Espresso *v689;
  const char *v690;
  float v691;
  NSObject *v693;
  double v694;
  uint64_t v695;
  _WORD *v696;
  int v697;
  uint64_t v699;
  uint64_t v700;
  char *v701;
  char *v702;
  _WORD *v703;
  char *v704;
  std::string::size_type v705;
  uint64_t v706;
  vDSP_Length __N;
  vDSP_Length __Na;
  unsigned int __Nb;
  const __CFString *v710;
  int v711;
  void *v712;
  int v713;
  unsigned int v715;
  _BOOL4 v716;
  Espresso::ANECompilerEngine::sparsity_options *v717;
  const Espresso::net *v721;
  std::__shared_weak_count *v722;
  const Espresso::net *v723;
  std::__shared_weak_count *v724;
  const Espresso::net *v725;
  std::__shared_weak_count *v726;
  const Espresso::net *v727;
  std::__shared_weak_count *v728;
  const Espresso::net *v729;
  std::__shared_weak_count *v730;
  const Espresso::net *v731;
  std::__shared_weak_count *v732;
  char *v733;
  std::__shared_weak_count *v734;
  __int128 v735;
  uint64_t v736;
  std::__shared_weak_count *v737;
  uint64_t v738;
  uint64_t v739;
  const Espresso::net *v740;
  std::__shared_weak_count *v741;
  __int128 v742;
  uint64_t v743;
  std::__shared_weak_count *v744;
  const Espresso::net *v745;
  std::__shared_weak_count *v746;
  uint64_t v747;
  std::__shared_weak_count *v748;
  const Espresso::net *v749;
  std::__shared_weak_count *v750;
  const Espresso::net *v751;
  std::__shared_weak_count *v752;
  const Espresso::net *v753;
  std::__shared_weak_count *v754;
  std::__shared_weak_count *v755;
  std::__shared_weak_count *v756;
  Espresso::quantized_weights_helper *v757[2];
  _QWORD v758[2];
  _QWORD v759[2];
  _QWORD v760[2];
  uint64_t v761[2];
  _QWORD v762[2];
  const Espresso::net *v763;
  std::__shared_weak_count *v764;
  const Espresso::net *v765;
  std::__shared_weak_count *v766;
  const Espresso::net *v767;
  std::__shared_weak_count *v768;
  const Espresso::net *v769;
  std::__shared_weak_count *v770;
  const Espresso::net *v771;
  std::__shared_weak_count *v772;
  const Espresso::net *v773;
  std::__shared_weak_count *v774;
  const Espresso::net *v775;
  std::__shared_weak_count *v776;
  const Espresso::net *v777;
  std::__shared_weak_count *v778;
  uint64_t v779;
  std::string *v780;
  unint64_t v781;
  __int16 v782;
  char v783[40];
  void *v784;
  void *v785;
  const Espresso::net *v786;
  std::__shared_weak_count *v787;
  char v788[32];
  char v789[40];
  void *__p;
  void *v791;
  const Espresso::net *v792;
  std::__shared_weak_count *v793;
  char v794[32];
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  __int128 v800;
  __int128 v801;
  __int128 v802;
  __int128 v803;
  __int128 v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  uint64_t v808;
  std::__shared_weak_count *v809;
  __int128 v810;
  uint64_t v811;
  std::__shared_weak_count *v812;
  uint64_t v813;
  std::__shared_weak_count *v814;
  char *v815;
  std::__shared_weak_count *v816;
  void *v817[2];
  uint64_t v818;
  std::__shared_weak_count *v819;
  unsigned int v820;
  unsigned int v821;
  char *v822;
  std::__shared_weak_count *v823;
  std::string v824;
  _QWORD v825[3];
  char *v826;
  std::string *v827;
  unint64_t v828;
  void *v829;
  char v830;
  id v831;
  __CFString *v832;
  id v833;
  uint64_t v834;
  _QWORD v835[2];
  _BYTE buf[24];
  __int128 v837;
  std::vector<std::string> v838;
  void *v839;
  char v840;
  id v841;
  __CFString *v842;
  id v843;
  std::string __str;
  __int128 v845;
  uint64_t v846;

  v846 = *MEMORY[0x1E0C80C00];
  v711 = a2[552];
  v806 = 0u;
  v805 = 0u;
  v804 = 0u;
  v803 = 0u;
  v802 = 0u;
  v801 = 0u;
  v799 = 0u;
  v800 = 0u;
  v797 = 0u;
  v798 = 0u;
  v795 = 0u;
  v796 = 0u;
  v11 = *a3;
  v10 = (std::__shared_weak_count *)a3[1];
  v792 = *a3;
  v793 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  Espresso::abstract_blob_container::shape(v789, *a6);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v794, v11, (const Espresso::layer_shape *)v789, 1);
  if (__p)
  {
    v791 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v17 = *a3;
  v16 = (std::__shared_weak_count *)a3[1];
  v786 = *a3;
  v787 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  Espresso::abstract_blob_container::shape(v783, *a7);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v788, v17, (const Espresso::layer_shape *)v783, 1);
  if (v784)
  {
    v785 = v784;
    operator delete(v784);
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v22 = *a3;
  v23 = a5[6];
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)*a3 + 45), v23))
  {
    *(_QWORD *)buf = v23;
    v24 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v22 + 44, v23, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
    *(_OWORD *)&v824.__r_.__value_.__l.__data_ = *(_OWORD *)(v24 + 56);
    v825[1] = 0;
    v824.__r_.__value_.__r.__words[2] = 0;
    v825[0] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v824.__r_.__value_.__r.__words[2], *((const void **)v24 + 9), *((_QWORD *)v24 + 10), (uint64_t)(*((_QWORD *)v24 + 10) - *((_QWORD *)v24 + 9)) >> 2);
    if (LODWORD(v824.__r_.__value_.__r.__words[1]) == -1)
      v25 = 1;
    else
      v25 = v824.__r_.__value_.__r.__words[1];
    if (v824.__r_.__value_.__r.__words[2])
    {
      v825[0] = *((_QWORD *)&v824.__r_.__value_.__l + 2);
      operator delete((void *)v824.__r_.__value_.__r.__words[2]);
    }
    v22 = *a3;
  }
  else
  {
    v25 = 1;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v22 + 472);
  v782 = 0;
  v712 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::ANECompilerEngine::query_dilation_options(a4, 0, v25, (char *)&v782 + 1, &v782, v712);
  v27 = *(_DWORD *)(a4 + 48);
  v26 = *(_DWORD *)(a4 + 52);
  v28 = *(__int16 *)(a4 + 96);
  v29 = v28 < 2;
  v30 = *(__int16 *)(a4 + 98);
  if (HIBYTE(v782))
  {
    v31 = v30 < 2;
  }
  else
  {
    v29 = 1;
    v31 = 1;
  }
  if (v29)
    v32 = v27;
  else
    v32 = ((v27 - 1) * v28 + 1);
  if (v31)
    v33 = v26;
  else
    v33 = ((v26 - 1) * v30 + 1);
  v34 = v28 >= 2 && v27 > 1 || v30 > 1 && v26 > 1;
  v716 = v34;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v717 = (Espresso::ANECompilerEngine::sparsity_options *)objc_claimAutoreleasedReturnValue();

  Espresso::ANECompilerEngine::sparsity_options::scan_for_compress_sparse((uint64_t)*a3 + 472, v717);
  v37 = (uint64_t)a5[6];
  if ((char *)a5[7] - v37 != (_BYTE *)24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v38 = *a6;
  if (!*a6)
  {
    if (*(char *)(v37 + 23) < 0)
      v37 = *(_QWORD *)v37;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find input blobs. bottom=%s", v37);
  }
  if (!*a7)
  {
    if (*((char *)a5 + 23) >= 0)
      v673 = (uint64_t)a5;
    else
      v673 = (uint64_t)*a5;
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("ANEC conv: cannot find output blobs. top=%s", v673);
  }
  v780 = 0;
  v779 = 0;
  v781 = 0;
  if (a1 && *(_BYTE *)(a1 + 840) && (*(int *)(v38 + 8) > 1 || *(int *)(v38 + 12) >= 2))
  {
    v39 = (void *)objc_opt_new();
    objc_msgSend(v39, "setObject:forKeyedSubscript:", CFSTR("NCHW"), CFSTR("Mode"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
    v40 = v832;
    v832 = CFSTR("Flatten");

    objc_storeStrong(&v833, v39);
    v41 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
    if (v41 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v42 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
    if (v42 <= v41 + 1)
      v42 = v41 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
      v43 = 0x1C71C71C71C71C7;
    else
      v43 = v42;
    *((_QWORD *)&v837 + 1) = &v781;
    if (v43)
      v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v43);
    else
      v44 = 0;
    *(_QWORD *)buf = v43;
    *(_QWORD *)&buf[8] = v43 + 16 * (((uint64_t)v780 - v779) >> 4);
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v837 = v43 + 144 * v44;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
    v45 = v780;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    v780 = v45;

    if (v830 < 0)
      operator delete(v829);
    *(_QWORD *)buf = &v826;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v825;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v824.__r_.__value_.__l.__data_);

  }
  v46 = (void *)objc_opt_new();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Dense"), CFSTR("KernelMode"));
  if (*(_BYTE *)(a1 + 754))
  {
    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Unity"), CFSTR("KernelMode"));
    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v32);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v47, CFSTR("KernelWidth"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v33);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v48, CFSTR("KernelHeight"));

  v49 = *(_DWORD *)(a4 + 116);
  if (v49 >= 2 && v49 == *(_DWORD *)(a4 + 44) && v49 == *(_DWORD *)(a4 + 40))
  {
    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("ChannelWiseConv"), CFSTR("Type"));
    v50 = CFSTR("ChannelWiseDilatedConv");
  }
  else
  {
    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Conv"), CFSTR("Type"));
    v50 = CFSTR("DilatedConv");
  }
  v710 = v50;
  v713 = *(_DWORD *)(a4 + 116);
  objc_msgSend(v46, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], CFSTR("KernelGroupReuse"));
  if (*(_BYTE *)(a1 + 753))
    objc_msgSend(v46, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("KernelGroupReuse"));
  if (*(_BYTE *)(a1 + 754))
    goto LABEL_304;
  v52 = (std::__shared_weak_count *)a3[1];
  v777 = *a3;
  v778 = v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  std::string::basic_string[abi:ne180100]<0>(&v824, "post_scale");
  v55 = ((*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                            + 88))(a1 + 544, &v777, a1, &v824) & 0x80000000) == 0|| *(_QWORD *)(a1 + 608) != 0;
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  v56 = v778;
  if (v778)
  {
    v57 = (unint64_t *)&v778->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)a3[1];
  v775 = *a3;
  v776 = v59;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  std::string::basic_string[abi:ne180100]<0>(&v824, "W_S8");
  v62 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544) + 88))(a1 + 544, &v775, a1, &v824);
  if ((int)v62 < 0)
    v55 = 0;
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  v63 = v776;
  if (!v776)
    goto LABEL_103;
  v64 = (unint64_t *)&v776->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
    if (v55)
      goto LABEL_104;
  }
  else
  {
LABEL_103:
    if (v55)
    {
LABEL_104:
      v66 = (std::__shared_weak_count *)a3[1];
      v773 = *a3;
      v774 = v66;
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "W_S8");
      (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v773, a1, buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v69 = v774;
      if (v774)
      {
        v70 = (unint64_t *)&v774->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v62);
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "setObject:forKeyedSubscript:", v72, CFSTR("KernelOffset"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__l.__data_, (const void *)v824.__r_.__value_.__r.__words[2]));
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "setObject:forKeyedSubscript:", v73, CFSTR("KernelIndex"));

      objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
      if (a1)
        v74 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
      else
        v74 = 0;
      Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v74, v824.__r_.__value_.__l.__data_);
      goto LABEL_304;
    }
  }
  v75 = (std::__shared_weak_count *)a3[1];
  v771 = *a3;
  v772 = v75;
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  std::string::basic_string[abi:ne180100]<0>(&v824, "W_int8");
  v78 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544) + 88))(a1 + 544, &v771, a1, &v824);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  v79 = v772;
  if (v772)
  {
    v80 = (unint64_t *)&v772->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if ((v78 & 0x80000000) == 0)
  {
    v82 = (std::__shared_weak_count *)a3[1];
    v769 = *a3;
    v770 = v82;
    if (v82)
    {
      v83 = (unint64_t *)&v82->__shared_owners_;
      do
        v84 = __ldxr(v83);
      while (__stxr(v84 + 1, v83));
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "W_int8");
    (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v769, a1, buf);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v85 = v770;
    if (v770)
    {
      v86 = (unint64_t *)&v770->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v78);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v88, CFSTR("KernelOffset"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__l.__data_, (const void *)v824.__r_.__value_.__r.__words[2]));
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v89, CFSTR("KernelIndex"));

    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
    if (a1)
      v90 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
    else
      v90 = 0;
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v90, v824.__r_.__value_.__l.__data_);
    goto LABEL_304;
  }
  v91 = (std::__shared_weak_count *)a3[1];
  v767 = *a3;
  v768 = v91;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  std::string::basic_string[abi:ne180100]<0>(&v824, "blob_weights");
  v94 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544) + 88))(a1 + 544, &v767, a1, &v824);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  v95 = v768;
  if (v768)
  {
    v96 = (unint64_t *)&v768->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if ((v94 & 0x80000000) == 0)
  {
    v98 = (std::__shared_weak_count *)a3[1];
    v765 = *a3;
    v766 = v98;
    if (v98)
    {
      v99 = (unint64_t *)&v98->__shared_owners_;
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights");
    (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v765, a1, buf);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v101 = v766;
    if (v766)
    {
      v102 = (unint64_t *)&v766->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v94);
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v104, CFSTR("KernelOffset"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__l.__data_, (const void *)v824.__r_.__value_.__r.__words[2]));
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v105, CFSTR("KernelIndex"));

    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
    if (a1)
      v106 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
    else
      v106 = 0;
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v106, v824.__r_.__value_.__l.__data_);
    goto LABEL_304;
  }
  v107 = (std::__shared_weak_count *)a3[1];
  v763 = *a3;
  v764 = v107;
  if (v107)
  {
    v108 = (unint64_t *)&v107->__shared_owners_;
    do
      v109 = __ldxr(v108);
    while (__stxr(v109 + 1, v108));
  }
  std::string::basic_string[abi:ne180100]<0>(&v824, "blob_weights_f16");
  v110 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                            + 88))(a1 + 544, &v763, a1, &v824);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  v111 = v764;
  if (v764)
  {
    v112 = (unint64_t *)&v764->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if ((v110 & 0x80000000) == 0)
  {
    v114 = a3[1];
    v762[0] = *a3;
    v762[1] = v114;
    if (v114)
    {
      v115 = (unint64_t *)((char *)v114 + 8);
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "blob_weights_f16");
    (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD *, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544)
                                                                                           + 120))(&v824, a1 + 544, v762, a1, buf);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v762);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v110);
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v117, CFSTR("KernelOffset"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__l.__data_, (const void *)v824.__r_.__value_.__r.__words[2]));
    v118 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v118, CFSTR("KernelIndex"));

    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
    if (a1)
      v119 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
    else
      v119 = 0;
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v119, v824.__r_.__value_.__l.__data_);
    goto LABEL_304;
  }
  if (*(_QWORD *)(a1 + 776))
  {
    v120 = *(_QWORD *)(a1 + 784);
    if (a1)
      v121 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
    else
      v121 = 0;
    v761[0] = *(_QWORD *)(a1 + 776);
    v761[1] = v120;
    if (v120)
    {
      v122 = (unint64_t *)(v120 + 8);
      do
        v123 = __ldxr(v122);
      while (__stxr(v123 + 1, v122));
    }
    Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v121, v761);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v761);
    v124 = *(_QWORD *)(a1 + 776);
    v125 = *(_DWORD *)(v124 + 8);
    v126 = *(_DWORD *)(v124 + 12);
    v127 = (char *)operator new(0x58uLL);
    *((_QWORD *)v127 + 1) = 0;
    v128 = (unint64_t *)(v127 + 8);
    *((_QWORD *)v127 + 2) = 0;
    *(_QWORD *)v127 = &off_1E2DBED50;
    v129 = *(const unsigned __int8 **)(v124 + 16);
    *((_QWORD *)v127 + 3) = &off_1E2DA1250;
    v130 = 2 * v125 * v126;
    *(_OWORD *)(v127 + 72) = 0u;
    *(_OWORD *)(v127 + 56) = 0u;
    *((_DWORD *)v127 + 8) = v130;
    *((_QWORD *)v127 + 5) = v129;
    v127[48] = 0;
    v824.__r_.__value_.__r.__words[0] = (std::string::size_type)(v127 + 24);
    v824.__r_.__value_.__l.__size_ = (std::string::size_type)v127;
    v760[0] = v127 + 24;
    v760[1] = v127;
    do
      v131 = __ldxr(v128);
    while (__stxr(v131 + 1, v128));
    v132 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v129, v130);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v760);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v132);
    v133 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v133, CFSTR("KernelOffset"));

    v134 = (void *)MEMORY[0x1E0CB37E8];
    if (v711)
      weights_file_index = 0;
    else
    objc_msgSend(v134, "numberWithUnsignedLong:", weights_file_index);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v150, CFSTR("KernelIndex"));

    objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v824);
    goto LABEL_304;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 416))(&v824, a1);
  v136 = v824.__r_.__value_.__r.__words[0];
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v824);
  if (!v136)
  {
    v151 = *(Espresso::quantized_weights_helper **)(a1 + 440);
    if (v151
      && *(_QWORD *)v151
      && (*((_QWORD *)v151 + 4) || *((_QWORD *)v151 + 6) || *((_QWORD *)v151 + 8) || *((_QWORD *)v151 + 10)))
    {
      v152 = a3[1];
      v758[0] = *a3;
      v758[1] = v152;
      if (v152)
      {
        v153 = (unint64_t *)((char *)v152 + 8);
        do
          v154 = __ldxr(v153);
        while (__stxr(v154 + 1, v153));
        v151 = *(Espresso::quantized_weights_helper **)(a1 + 440);
      }
      v155 = *(Espresso::quantized_weights_helper **)(a1 + 448);
      v757[0] = v151;
      v757[1] = v155;
      if (v155)
      {
        v156 = (unint64_t *)((char *)v155 + 8);
        do
          v157 = __ldxr(v156);
        while (__stxr(v157 + 1, v156));
      }
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>((char *)a1, (Espresso::ANECompilerEngine *)a2, v758, v757, v46, (uint64_t *)&v795);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v757);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v758);
      goto LABEL_304;
    }
    if (!v159)
    {
      v165 = 0;
LABEL_264:
      v182 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
      if (v182[9] == 1)
      {
        v699 = *v182;
        __Na = v182[1];
        v183 = (std::__shared_weak_count *)a3[1];
        v753 = *a3;
        v754 = v183;
        if (v183)
        {
          v184 = (unint64_t *)&v183->__shared_owners_;
          do
            v185 = __ldxr(v184);
          while (__stxr(v185 + 1, v184));
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "W_8bit");
        (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v753, a1, buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v186 = v754;
        if (v754)
        {
          v187 = (unint64_t *)&v754->__shared_owners_;
          do
            v188 = __ldaxr(v187);
          while (__stlxr(v188 - 1, v187));
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
            std::__shared_weak_count::__release_weak(v186);
          }
        }
        v189 = (std::__shared_weak_count *)a3[1];
        v751 = *a3;
        v752 = v189;
        if (v189)
        {
          v190 = (unint64_t *)&v189->__shared_owners_;
          do
            v191 = __ldxr(v190);
          while (__stxr(v191 + 1, v190));
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "Qscale");
        (*(void (**)(_BYTE *__return_ptr, uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544) + 120))(buf, a1 + 544, &v751, a1, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v192 = v752;
        if (v752)
        {
          v193 = (unint64_t *)&v752->__shared_owners_;
          do
            v194 = __ldaxr(v193);
          while (__stlxr(v194 - 1, v193));
          if (!v194)
          {
            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
            std::__shared_weak_count::__release_weak(v192);
          }
        }
        v195 = (std::__shared_weak_count *)a3[1];
        v749 = *a3;
        v750 = v195;
        if (v195)
        {
          v196 = (unint64_t *)&v195->__shared_owners_;
          do
            v197 = __ldxr(v196);
          while (__stxr(v197 + 1, v196));
        }
        std::string::basic_string[abi:ne180100]<0>(v817, "Qbias");
        (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, void **))(*(_QWORD *)(a1 + 544) + 120))(&__str, a1 + 544, &v749, a1, v817);
        if (SHIBYTE(v818) < 0)
          operator delete(v817[0]);
        v198 = v750;
        if (v750)
        {
          v199 = (unint64_t *)&v750->__shared_owners_;
          do
            v200 = __ldaxr(v199);
          while (__stlxr(v200 - 1, v199));
          if (!v200)
          {
            ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
            std::__shared_weak_count::__release_weak(v198);
          }
        }
        v201 = v824.__r_.__value_.__r.__words[0];
        v202 = *(_QWORD *)buf;
        v203 = __str.__r_.__value_.__r.__words[0];
        v204 = !v824.__r_.__value_.__r.__words[0] || *(_QWORD *)buf == 0;
        if (!v204 && __str.__r_.__value_.__r.__words[0] != 0)
        {
          v632 = (char *)operator new(0x58uLL);
          *((_QWORD *)v632 + 1) = 0;
          *((_QWORD *)v632 + 2) = 0;
          *(_QWORD *)v632 = &off_1E2DBED88;
          *((_QWORD *)v632 + 3) = &off_1E2DA1270;
          *(_OWORD *)(v632 + 56) = 0u;
          *(_OWORD *)(v632 + 72) = 0u;
          *((_DWORD *)v632 + 8) = v699;
          *((_DWORD *)v632 + 9) = __Na;
          *((_QWORD *)v632 + 5) = v201;
          v632[48] = 0;
          v817[0] = v632 + 24;
          v704 = v632;
          v817[1] = v632;
          v633 = (char *)operator new(0x58uLL);
          *((_QWORD *)v633 + 1) = 0;
          *((_QWORD *)v633 + 2) = 0;
          *(_QWORD *)v633 = &off_1E2DBEC00;
          *((_QWORD *)v633 + 3) = &off_1E2DA1190;
          *(_OWORD *)(v633 + 56) = 0u;
          *(_OWORD *)(v633 + 72) = 0u;
          *((_DWORD *)v633 + 8) = v699;
          *((_QWORD *)v633 + 5) = v202;
          v633[48] = 0;
          v822 = v633 + 24;
          v702 = v633;
          v823 = (std::__shared_weak_count *)v633;
          v634 = (char *)operator new(0x58uLL);
          *((_QWORD *)v634 + 1) = 0;
          *((_QWORD *)v634 + 2) = 0;
          *(_QWORD *)v634 = &off_1E2DBEC00;
          *((_QWORD *)v634 + 3) = &off_1E2DA1190;
          *(_OWORD *)(v634 + 56) = 0u;
          *(_OWORD *)(v634 + 72) = 0u;
          *((_DWORD *)v634 + 8) = v699;
          *((_QWORD *)v634 + 5) = v203;
          v634[48] = 0;
          v815 = v634 + 24;
          v701 = v634;
          v816 = (std::__shared_weak_count *)v634;
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v813, 4 * v699 * __Na, 1, 1, 1);
          v706 = v813;
          v635 = __Na;
          if ((_DWORD)v699)
          {
            v636 = 0;
            v637 = 0;
            v638 = 0;
            v699 *= 4;
            v700 = 4 * __Na;
            do
            {
              __Nb = v636;
              v639 = (float *)(*(_QWORD *)(v706 + 16) + v637);
              v640 = v635;
              vDSP_vfltu8((const unsigned __int8 *)(*((_QWORD *)v704 + 5) + v636), 1, v639, 1, v635);
              vDSP_vsmul(v639, 1, (const float *)(*((_QWORD *)v702 + 5) + v638), v639, 1, v640);
              vDSP_vsadd(v639, 1, (const float *)(*((_QWORD *)v701 + 5) + v638), v639, 1, v640);
              v638 += 4;
              v637 += v700;
              v636 = __Nb + v640;
              v635 = v640;
            }
            while (v699 != v638);
          }
          v641 = v814;
          v747 = v706;
          v748 = v814;
          if (v814)
          {
            v642 = (unint64_t *)&v814->__shared_owners_;
            do
              v643 = __ldxr(v642);
            while (__stxr(v643 + 1, v642));
          }
          v644 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v706 + 16), *(int *)(v706 + 8));
          if (v641)
          {
            v645 = (unint64_t *)&v641->__shared_owners_;
            do
              v646 = __ldaxr(v645);
            while (__stlxr(v646 - 1, v645));
            if (!v646)
            {
              ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
              std::__shared_weak_count::__release_weak(v641);
            }
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v644, v699);
          v647 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "setObject:forKeyedSubscript:", v647, CFSTR("KernelOffset"));

          v648 = (void *)MEMORY[0x1E0CB37E8];
          if (v711)
            v649 = 0;
          else
          objc_msgSend(v648, "numberWithUnsignedLong:", v649);
          v650 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "setObject:forKeyedSubscript:", v650, CFSTR("KernelIndex"));

          objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
          v651 = v814;
          if (v814)
          {
            v652 = (unint64_t *)&v814->__shared_owners_;
            do
              v653 = __ldaxr(v652);
            while (__stlxr(v653 - 1, v652));
            if (!v653)
            {
              ((void (*)(std::__shared_weak_count *))v651->__on_zero_shared)(v651);
              std::__shared_weak_count::__release_weak(v651);
            }
          }
          v654 = v816;
          if (v816)
          {
            v655 = (unint64_t *)&v816->__shared_owners_;
            do
              v656 = __ldaxr(v655);
            while (__stlxr(v656 - 1, v655));
            if (!v656)
            {
              ((void (*)(std::__shared_weak_count *))v654->__on_zero_shared)(v654);
              std::__shared_weak_count::__release_weak(v654);
            }
          }
          v657 = v823;
          if (v823)
          {
            v658 = (unint64_t *)&v823->__shared_owners_;
            do
              v659 = __ldaxr(v658);
            while (__stlxr(v659 - 1, v658));
            if (!v659)
            {
              ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
              std::__shared_weak_count::__release_weak(v657);
            }
          }
          v660 = (std::__shared_weak_count *)v817[1];
          if (v817[1])
          {
            v661 = (unint64_t *)((char *)v817[1] + 8);
            do
              v662 = __ldaxr(v661);
            while (__stlxr(v662 - 1, v661));
            if (!v662)
            {
              ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
              std::__shared_weak_count::__release_weak(v660);
            }
          }
          goto LABEL_304;
        }
      }
LABEL_303:
      if ((v165 & 1) == 0)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
      goto LABEL_304;
    }
    v160 = v159;
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v159 + 568))(&v824);
    if (!v824.__r_.__value_.__r.__words[0])
      goto LABEL_257;
    v161 = v160 + 536;
    if (v160[559] < 0)
    {
      v166 = *((_QWORD *)v160 + 68);
      if (v166 != 4)
      {
        if (v166 != 6)
          goto LABEL_257;
        if (**(_DWORD **)v161 != 1852399447 || *(_WORD *)(*(_QWORD *)v161 + 4) != 14452)
          goto LABEL_257;
        goto LABEL_245;
      }
      v163 = *(_DWORD **)v161;
    }
    else
    {
      v162 = v160[559];
      v163 = v160 + 536;
      if (v162 != 4)
      {
        if (v162 != 6)
          goto LABEL_257;
        if (*(_DWORD *)v161 != 1852399447 || *((_WORD *)v160 + 270) != 14452)
          goto LABEL_257;
        goto LABEL_245;
      }
    }
    if (*v163 != 947216215)
    {
LABEL_257:
      v165 = 0;
      goto LABEL_258;
    }
LABEL_245:
    v705 = v824.__r_.__value_.__r.__words[0];
    __N = (vDSP_Length)v160;
    v703 = v160 + 536;
    v168 = 0;
    v169 = *(_DWORD *)(v824.__r_.__value_.__r.__words[0] + 8);
    do
    {
      v169 *= *(_DWORD *)(v824.__r_.__value_.__r.__words[0] + 12 + v168);
      v168 += 4;
    }
    while (v168 != 12);
    v170 = (std::__shared_weak_count *)operator new(0x58uLL);
    v170->__shared_owners_ = 0;
    v171 = (unint64_t *)&v170->__shared_owners_;
    v170->__shared_weak_owners_ = 0;
    v170->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBED50;
    v172 = *(const unsigned __int8 **)(v705 + 24);
    v170[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1250;
    v170[3].std::__shared_count = 0u;
    *(_OWORD *)&v170[2].__shared_owners_ = 0u;
    LODWORD(v170[1].__shared_owners_) = v169;
    v170[1].__shared_weak_owners_ = (uint64_t)v172;
    LOBYTE(v170[2].__vftable) = 0;
    *(_QWORD *)buf = v170 + 1;
    *(_QWORD *)&buf[8] = v170;
    v755 = v170 + 1;
    v756 = v170;
    do
      v173 = __ldxr(v171);
    while (__stxr(v173 + 1, v171));
    v174 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v172, v169);
    do
      v175 = __ldaxr(v171);
    while (__stlxr(v175 - 1, v171));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v174);
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v176, CFSTR("KernelOffset"));

    v177 = (void *)MEMORY[0x1E0CB37E8];
    if (v711)
      v178 = 0;
    else
    objc_msgSend(v177, "numberWithUnsignedLong:", v178);
    v663 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v663, CFSTR("KernelIndex"));

    if (*(char *)(__N + 559) < 0)
    {
      v666 = *(_QWORD *)(__N + 544);
      if (v666 != 4)
      {
        if (v666 != 6)
          goto LABEL_1013;
        if (**(_DWORD **)v703 != 1852399447 || *(_WORD *)(*(_QWORD *)v703 + 4) != 14452)
          goto LABEL_1013;
LABEL_1010:
        v668 = CFSTR("Int8");
        goto LABEL_1015;
      }
      v703 = *(_WORD **)v703;
    }
    else
    {
      v664 = *(unsigned __int8 *)(__N + 559);
      if (v664 != 4)
      {
        if (v664 != 6)
          goto LABEL_1013;
        if (*(_DWORD *)v703 != 1852399447 || v703[2] != 14452)
          goto LABEL_1013;
        goto LABEL_1010;
      }
    }
    if (*(_DWORD *)v703 != 947216215)
    {
LABEL_1013:
      v165 = 0;
LABEL_1016:
      v669 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v670 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v671 = __ldaxr(v670);
        while (__stlxr(v671 - 1, v670));
        if (!v671)
        {
          ((void (*)(std::__shared_weak_count *))v669->__on_zero_shared)(v669);
          std::__shared_weak_count::__release_weak(v669);
        }
      }
LABEL_258:
      size = (std::__shared_weak_count *)v824.__r_.__value_.__l.__size_;
      if (v824.__r_.__value_.__l.__size_)
      {
        v180 = (unint64_t *)(v824.__r_.__value_.__l.__size_ + 8);
        do
          v181 = __ldaxr(v180);
        while (__stlxr(v181 - 1, v180));
        if (!v181)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (!a1)
        goto LABEL_303;
      goto LABEL_264;
    }
    v668 = CFSTR("UInt8");
LABEL_1015:
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v668, CFSTR("KernelType"));
    v165 = 1;
    goto LABEL_1016;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 416))(&v824, a1);
  if (a1)
    v137 = (Espresso::ANECompilerEngine::ane_kernel *)(a1 + 544);
  else
    v137 = 0;
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f32((Espresso::ANECompilerEngine::final_anec_weights_t *)&v795, v137, (uint64_t *)&v824);
  v138 = v824.__r_.__value_.__r.__words[0];
  v139 = *(_DWORD *)(v824.__r_.__value_.__r.__words[0] + 8);
  v140 = *(_DWORD *)(v824.__r_.__value_.__r.__words[0] + 12);
  v141 = (char *)operator new(0x58uLL);
  *((_QWORD *)v141 + 1) = 0;
  v142 = (unint64_t *)(v141 + 8);
  *((_QWORD *)v141 + 2) = 0;
  *(_QWORD *)v141 = &off_1E2DBED50;
  v143 = *(const unsigned __int8 **)(v138 + 16);
  *((_QWORD *)v141 + 3) = &off_1E2DA1250;
  v144 = 4 * v139 * v140;
  *(_OWORD *)(v141 + 72) = 0u;
  *(_OWORD *)(v141 + 56) = 0u;
  *((_DWORD *)v141 + 8) = v144;
  *((_QWORD *)v141 + 5) = v143;
  v141[48] = 0;
  *(_QWORD *)buf = v141 + 24;
  *(_QWORD *)&buf[8] = v141;
  v759[0] = v141 + 24;
  v759[1] = v141;
  do
    v145 = __ldxr(v142);
  while (__stxr(v145 + 1, v142));
  v146 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v143, v144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v759);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v146);
  v147 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v147, CFSTR("KernelOffset"));

  v148 = (void *)MEMORY[0x1E0CB37E8];
  if (v711)
    v149 = 0;
  else
  objc_msgSend(v148, "numberWithUnsignedLong:", v149);
  v158 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v158, CFSTR("KernelIndex"));

  objc_msgSend(v46, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("KernelType"));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v824);
LABEL_304:
  Espresso::ANECompilerEngine::sparsity_options::required_sparsity_for_compression(v717, v51);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(__int16 *)(a4 + 92));
  v206 = (void *)objc_claimAutoreleasedReturnValue();
  v835[0] = v206;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(__int16 *)(a4 + 94));
  v207 = (void *)objc_claimAutoreleasedReturnValue();
  v835[1] = v207;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v835, 2);
  v208 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v208, CFSTR("Step"));

  v209 = HIBYTE(v782);
  v210 = v716;
  if (HIBYTE(v782))
    v210 = 0;
  if (v210 && !(_BYTE)v782)
  {
    LODWORD(v32) = (v32 - 1) * *(__int16 *)(a4 + 96) + 1;
    LODWORD(v33) = (v33 - 1) * *(__int16 *)(a4 + 98) + 1;
  }
  v211 = *(__int16 *)(a4 + 72);
  switch(v211)
  {
    case 4:
      goto LABEL_312;
    case 2:
      goto LABEL_359;
    case 1:
LABEL_312:
      v212 = v33 + (*(_DWORD *)(*a7 + 12) - 1) * *(__int16 *)(a4 + 94) - *(_DWORD *)(*a6 + 12);
      v213 = v32 + (*(_DWORD *)(*a7 + 8) - 1) * *(__int16 *)(a4 + 92) - *(_DWORD *)(*a6 + 8);
      v214 = v212 & ~(v212 >> 31);
      v215 = v213 & ~(v213 >> 31);
      v216 = *(unsigned __int16 *)(a4 + 72);
      v217 = v215 >> 1;
      v218 = v215 - (v215 >> 1);
      v219 = v214 >> 1;
      v220 = v214 - (v214 >> 1);
      if (v216 == 1)
        v221 = v220;
      else
        v221 = v219;
      if (v216 == 1)
        v222 = v219;
      else
        v222 = v220;
      if (v216 == 1)
        v223 = v218;
      else
        v223 = v217;
      if (v216 == 1)
        v224 = v217;
      else
        v224 = v218;
      break;
    default:
      v224 = *(__int16 *)(a4 + 80);
      v223 = *(__int16 *)(a4 + 82);
      v222 = *(__int16 *)(a4 + 84);
      v221 = *(__int16 *)(a4 + 86);
      break;
  }
  if (v222)
    v225 = 0;
  else
    v225 = (_DWORD)v221 == 0;
  if (v225 && (_DWORD)v224 == 0)
  {
    if (!(_DWORD)v223)
      goto LABEL_359;
    v221 = 0;
    v224 = 0;
  }
  else if ((v222 & 0x80000000) != 0)
  {
    v227 = 0;
    v228 = &unk_1E2DEDBE0;
    goto LABEL_337;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v699);
  v228 = (void *)objc_claimAutoreleasedReturnValue();
  v227 = 1;
LABEL_337:
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v228, CFSTR("PadTop"), v699);
  if (v227)

  if ((v221 & 0x80000000) != 0)
  {
    v229 = &unk_1E2DEDBE0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v221);
    v229 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v229, CFSTR("PadBot"));
  if ((v221 & 0x80000000) == 0)

  if ((v224 & 0x80000000) != 0)
  {
    v230 = &unk_1E2DEDBE0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v224);
    v230 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v230, CFSTR("PadLeft"));
  if ((v224 & 0x80000000) == 0)

  if ((v223 & 0x80000000) != 0)
  {
    v231 = &unk_1E2DEDBE0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v223);
    v231 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v231, CFSTR("PadRight"));
  if ((v223 & 0x80000000) == 0)

  if (*(_WORD *)(a4 + 74))
  {
    if (*(_WORD *)(a4 + 74) != 1)
      goto LABEL_359;
    v232 = CFSTR("Replication");
  }
  else
  {
    v232 = CFSTR("Zero");
  }
  objc_msgSend(v46, "setObject:forKeyedSubscript:", v232, CFSTR("PaddingMode"));
LABEL_359:
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
  v233 = !v716;
  if (v209)
    v233 = 1;
  if ((v233 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *(__int16 *)(a4 + 96));
    v234 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v234, CFSTR("KernelDilationX"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", *(__int16 *)(a4 + 98));
    v235 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "setObject:forKeyedSubscript:", v235, CFSTR("KernelDilationY"));

    objc_msgSend(v46, "setObject:forKeyedSubscript:", v710, CFSTR("Type"));
  }
  v236 = v832;
  v832 = CFSTR("Conv");

  objc_storeStrong(&v833, v46);
  v237 = (uint64_t)*a3 + 136;
  *(_QWORD *)buf = &v824;
  v238 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v237, (unsigned __int8 *)&v824, (__int128 **)buf);
  v240 = (std::__shared_weak_count *)*((_QWORD *)v238 + 6);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v239;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v240;
  if (v240)
  {
    v241 = (unint64_t *)&v240->__shared_owners_;
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
  }
  LODWORD(v834) = v239[41];
  HIDWORD(v834) = v713;
  v243 = v780;
  if ((unint64_t)v780 >= v781)
  {
    v245 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
    if (v245 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v246 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
    if (v246 <= v245 + 1)
      v246 = v245 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
      v247 = 0x1C71C71C71C71C7;
    else
      v247 = v246;
    *((_QWORD *)&v837 + 1) = &v781;
    if (v247)
      v247 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v247);
    else
      v248 = 0;
    *(_QWORD *)buf = v247;
    *(_QWORD *)&buf[8] = v247 + 144 * v245;
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v837 = v247 + 144 * v248;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
    v244 = v780;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
    v244 = v243 + 6;
  }
  v780 = v244;
  if (v240)
  {
    v249 = (unint64_t *)&v240->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
      std::__shared_weak_count::__release_weak(v240);
    }
  }

  if (v830 < 0)
    operator delete(v829);
  *(_QWORD *)buf = &v826;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v825;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);

  v251 = (std::__shared_weak_count *)a3[1];
  v745 = *a3;
  v746 = v251;
  if (v251)
  {
    v252 = (unint64_t *)&v251->__shared_owners_;
    do
      v253 = __ldxr(v252);
    while (__stxr(v253 + 1, v252));
  }
  v255 = *a7;
  v254 = (std::__shared_weak_count *)a7[1];
  v743 = *a7;
  v744 = v254;
  if (v254)
  {
    v256 = (unint64_t *)&v254->__shared_owners_;
    do
      v257 = __ldxr(v256);
    while (__stxr(v257 + 1, v256));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v824);
  v833 = 0;
  v832 = 0;
  v834 = 0x100000000;
  v258 = *(char **)(a1 + 608);
  v259 = *(std::__shared_weak_count **)(a1 + 616);
  v822 = v258;
  v823 = v259;
  if (v259)
  {
    v260 = (unint64_t *)&v259->__shared_owners_;
    do
      v261 = __ldxr(v260);
    while (__stxr(v261 + 1, v260));
  }
  if (!v258 || *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 544) + 104))(a1 + 544) + 40))
  {
    v262 = 0;
    if (!v259)
      goto LABEL_529;
    goto LABEL_525;
  }
  v263 = *(float *)(v255 + 112);
  v815 = v258;
  v816 = v259;
  if (v259)
  {
    v264 = (unint64_t *)&v259->__shared_owners_;
    do
      v265 = __ldxr(v264);
    while (__stxr(v265 + 1, v264));
  }
  v266 = *(std::__shared_weak_count **)(a1 + 632);
  v813 = *(_QWORD *)(a1 + 624);
  v814 = v266;
  if (v266)
  {
    v267 = (unint64_t *)&v266->__shared_owners_;
    do
      v268 = __ldxr(v267);
    while (__stxr(v268 + 1, v267));
  }
  Espresso::ane_style_post_scale_bias((uint64_t)&v815, &v813, (uint64_t)v817, v263);
  if (v266)
  {
    v269 = (unint64_t *)&v266->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v271 = v816;
  if (v816)
  {
    v272 = (unint64_t *)&v816->__shared_owners_;
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  v274 = v822;
  v275 = *((unsigned int *)v822 + 2);
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v811, 2 * v275, 1, 1, 1);
  v276 = (int)v275;
  v810 = 0uLL;
  v277 = v275;
  v278 = *(_QWORD *)(a1 + 624);
  if (v278)
    v277 = *(_DWORD *)(v278 + 8);
  if (!a2[384])
  {
    Espresso::blob<unsigned char,1>::make(&__str, 4 * v275);
    v674 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
    if ((int)v275 >= 1)
    {
      for (i = 0; i != v275; ++i)
      {
        v676 = *(float *)(*((_QWORD *)v274 + 2) + i * 4);
        *(float *)&v677 = ldexp(1.0, -v820) * v676;
        v674[i] = v677;
      }
    }
    if ((_DWORD)v275)
    {
      v678 = *(_WORD **)(v811 + 16);
      do
      {
        v679 = *v674++;
        _S0 = v679;
        __asm { FCVT            H0, S0 }
        *v678++ = _S0;
        --v276;
      }
      while (v276);
    }
    v809 = 0;
    v808 = 0;
    if (*(_QWORD *)(a1 + 624))
    {
      Espresso::blob<unsigned char,1>::make(buf, 4 * v277);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v808, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      Espresso::blob<unsigned char,1>::make(buf, 2 * v277);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v810, (__int128 *)buf);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
      v682 = *(int **)(v808 + 16);
      if (v277 >= 1)
      {
        for (j = 0; j != v277; ++j)
        {
          if ((int)v275 - 1 >= (int)j)
            v684 = j;
          else
            v684 = v275 - 1;
          *(float *)&v685 = *(float *)(*(_QWORD *)(v818 + 16) + 4 * j)
                          * *(float *)(*((_QWORD *)v817[0] + 2) + 4 * v684);
          v682[j] = v685;
          v686 = v821;
          v687 = v820;
          *(float *)&v688 = ldexp(1.0, v821 - v820) * *(float *)&v685;
          v682[j] = v688;
          v691 = ldexp(1.0, v687 - v686) * *(float *)&v688;
          if (v691 < -127.0 || v691 > 255.0)
          {
            Espresso::espresso_os_log_subsystem(v689, v690);
            v693 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v693, OS_LOG_TYPE_ERROR))
            {
              v694 = *(float *)&v682[j];
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = v691;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v821;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v820;
              LOWORD(v837) = 2048;
              *(double *)((char *)&v837 + 2) = v694;
              _os_log_error_impl(&dword_190DAF000, v693, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
            }

          }
        }
      }
      if (v277)
      {
        v695 = v277;
        v696 = *(_WORD **)(v810 + 16);
        do
        {
          v697 = *v682++;
          _S0 = v697;
          __asm { FCVT            H0, S0 }
          *v696++ = _S0;
          --v695;
        }
        while (v695);
      }
    }
    v681 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(v681);
  }
  v715 = v821;
  if ((_DWORD)v275)
  {
    v279 = (int *)*((_QWORD *)v817[0] + 2);
    v280 = *(_WORD **)(v811 + 16);
    do
    {
      v281 = *v279++;
      _S0 = v281;
      __asm { FCVT            H0, S0 }
      *v280++ = _S0;
      --v276;
    }
    while (v276);
  }
  if (v278)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v277, 1, 1, 1);
    v286 = *(_OWORD *)buf;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    v287 = (std::__shared_weak_count *)*((_QWORD *)&v810 + 1);
    v810 = v286;
    if (v287)
    {
      v288 = (unint64_t *)&v287->__shared_owners_;
      do
        v289 = __ldaxr(v288);
      while (__stlxr(v289 - 1, v288));
      if (!v289)
      {
        ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
        std::__shared_weak_count::__release_weak(v287);
      }
    }
    v290 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v291 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v292 = __ldaxr(v291);
      while (__stlxr(v292 - 1, v291));
      if (!v292)
      {
        ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
        std::__shared_weak_count::__release_weak(v290);
      }
    }
    if (v277)
    {
      v293 = v277;
      v294 = *(int **)(v818 + 16);
      v295 = *(_WORD **)(v810 + 16);
      do
      {
        v296 = *v294++;
        _S0 = v296;
        __asm { FCVT            H0, S0 }
        *v295++ = _S0;
        --v293;
      }
      while (v293);
    }
  }
  v298 = a2[552];
  v299 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v300 = v811;
  v301 = v812;
  v808 = v811;
  v809 = v812;
  if (v812)
  {
    v302 = (unint64_t *)&v812->__shared_owners_;
    do
      v303 = __ldxr(v302);
    while (__stxr(v303 + 1, v302));
  }
  v304 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v299, *(const unsigned __int8 **)(v300 + 16), *(int *)(v300 + 8));
  if (v301)
  {
    v305 = (unint64_t *)&v301->__shared_owners_;
    do
      v306 = __ldaxr(v305);
    while (__stlxr(v306 - 1, v305));
    if (!v306)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
  v307 = (void *)objc_opt_new();
  if (a2[121])
  {
    v308 = *(id *)(v779 + 128);

    v307 = v308;
  }
  v309 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v275);
  v310 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v309, "setObject:forKeyedSubscript:", v310, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v304);
  v311 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v309, "setObject:forKeyedSubscript:", v311, CFSTR("ScaleOffset"));

  v312 = (void *)MEMORY[0x1E0CB37E8];
  if (v298)
    v313 = 0;
  else
  objc_msgSend(v312, "numberWithUnsignedLong:", v313, v699);
  v314 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v309, "setObject:forKeyedSubscript:", v314, CFSTR("ScaleIndex"));

  objc_msgSend(v309, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v820);
  v315 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v307, "setObject:forKeyedSubscript:", v315, CFSTR("ScaleShift"));

  if (*(_QWORD *)(a1 + 624))
  {
    v316 = v810;
    v807 = v810;
    if (*((_QWORD *)&v810 + 1))
    {
      v317 = (unint64_t *)(*((_QWORD *)&v810 + 1) + 8);
      do
        v318 = __ldxr(v317);
      while (__stxr(v318 + 1, v317));
    }
    v319 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v299, *(const unsigned __int8 **)(v316 + 16), *(int *)(v316 + 8));
    if (*((_QWORD *)&v316 + 1))
    {
      v320 = (unint64_t *)(*((_QWORD *)&v316 + 1) + 8);
      do
        v321 = __ldaxr(v320);
      while (__stlxr(v321 - 1, v320));
      if (!v321)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v316 + 1) + 16))(*((_QWORD *)&v316 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v316 + 1));
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 624) + 8));
    v322 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v309, "setObject:forKeyedSubscript:", v322, CFSTR("BiasCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v319);
    v323 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v309, "setObject:forKeyedSubscript:", v323, CFSTR("BiasOffset"));

    v324 = (void *)MEMORY[0x1E0CB37E8];
    if (v298)
      v325 = 0;
    else
    objc_msgSend(v324, "numberWithUnsignedLong:", v325);
    v326 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v309, "setObject:forKeyedSubscript:", v326, CFSTR("BiasIndex"));

    objc_msgSend(v309, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v715);
    v327 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v307, "setObject:forKeyedSubscript:", v327, CFSTR("BiasShift"));

  }
  objc_msgSend(v307, "setObject:forKeyedSubscript:", v309, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a5);
  v328 = v780;
  if (v780 != (std::string *)v779)
  {
    v329 = v780 - 6;
    v330 = HIBYTE(v780[-6].__r_.__value_.__r.__words[2]);
    v331 = v330;
    v332 = v780[-6].__r_.__value_.__l.__size_;
    if ((v330 & 0x80u) == 0)
      v333 = HIBYTE(v780[-6].__r_.__value_.__r.__words[2]);
    else
      v333 = v780[-6].__r_.__value_.__l.__size_;
    v334 = buf[23];
    if (buf[23] < 0)
      v334 = *(_QWORD *)&buf[8];
    if (v333 == v334)
    {
      if (buf[23] >= 0)
        v335 = buf;
      else
        v335 = *(unsigned __int8 **)buf;
      if ((char)v330 < 0)
      {
        data = (const std::string::value_type *)v329->__r_.__value_.__r.__words[0];
        if (memcmp(v329->__r_.__value_.__l.__data_, v335, v780[-6].__r_.__value_.__l.__size_))
          goto LABEL_483;
      }
      else if ((_BYTE)v330)
      {
        v336 = v780 - 6;
        while (v336->__r_.__value_.__s.__data_[0] == *v335)
        {
          v336 = (std::string *)((char *)v336 + 1);
          ++v335;
          if (!--v330)
            goto LABEL_479;
        }
        goto LABEL_480;
      }
LABEL_479:
      std::string::append(v328 - 6, "__@pre_scale_bias");
      v331 = HIBYTE(v328[-6].__r_.__value_.__r.__words[2]);
    }
LABEL_480:
    if ((v331 & 0x80) == 0)
    {
      v338 = *(_OWORD *)&v329->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v328[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v338;
      goto LABEL_484;
    }
    data = v328[-6].__r_.__value_.__l.__data_;
    v332 = v328[-6].__r_.__value_.__l.__size_;
LABEL_483:
    std::string::__init_copy_ctor_external(&__str, data, v332);
LABEL_484:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v838, &__str, &v845, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v339 = v842;
  v842 = CFSTR("GOC");

  objc_storeStrong(&v843, v307);
  if (!a2[121])
  {
    v340 = v780;
    if ((unint64_t)v780 >= v781)
    {
      v342 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
      if (v342 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v343 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
      if (v343 <= v342 + 1)
        v343 = v342 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
        v344 = 0x1C71C71C71C71C7;
      else
        v344 = v343;
      *((_QWORD *)&v845 + 1) = &v781;
      if (v344)
        v344 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v344);
      else
        v345 = 0;
      __str.__r_.__value_.__r.__words[0] = v344;
      __str.__r_.__value_.__l.__size_ = v344 + 144 * v342;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      *(_QWORD *)&v845 = v344 + 144 * v345;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, &__str);
      v341 = v780;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)buf);
      v341 = v340 + 6;
    }
    v780 = v341;
  }

  if (v840 < 0)
    operator delete(v839);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v838;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v837;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);

  v346 = (std::__shared_weak_count *)*((_QWORD *)&v810 + 1);
  if (*((_QWORD *)&v810 + 1))
  {
    v347 = (unint64_t *)(*((_QWORD *)&v810 + 1) + 8);
    do
      v348 = __ldaxr(v347);
    while (__stlxr(v348 - 1, v347));
    if (!v348)
    {
      ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
      std::__shared_weak_count::__release_weak(v346);
    }
  }
  v349 = v812;
  if (v812)
  {
    v350 = (unint64_t *)&v812->__shared_owners_;
    do
      v351 = __ldaxr(v350);
    while (__stlxr(v351 - 1, v350));
    if (!v351)
    {
      ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
      std::__shared_weak_count::__release_weak(v349);
    }
  }
  v352 = v819;
  if (v819)
  {
    v353 = (unint64_t *)&v819->__shared_owners_;
    do
      v354 = __ldaxr(v353);
    while (__stlxr(v354 - 1, v353));
    if (!v354)
    {
      ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
      std::__shared_weak_count::__release_weak(v352);
    }
  }
  v355 = (std::__shared_weak_count *)v817[1];
  if (v817[1])
  {
    v356 = (unint64_t *)((char *)v817[1] + 8);
    do
      v357 = __ldaxr(v356);
    while (__stlxr(v357 - 1, v356));
    if (!v357)
    {
      ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
      std::__shared_weak_count::__release_weak(v355);
    }
  }
  v262 = 1;
  v259 = v823;
  if (v823)
  {
LABEL_525:
    v358 = (unint64_t *)&v259->__shared_owners_;
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
      std::__shared_weak_count::__release_weak(v259);
    }
  }
LABEL_529:

  if (v830 < 0)
    operator delete(v829);
  *(_QWORD *)buf = &v826;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v825;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  if (v744)
  {
    v360 = &v744->__shared_owners_;
    do
      v361 = __ldaxr((unint64_t *)v360);
    while (__stlxr(v361 - 1, (unint64_t *)v360));
    if (!v361)
    {
      ((void (*)(std::__shared_weak_count *))v744->__on_zero_shared)(v744);
      std::__shared_weak_count::__release_weak(v744);
    }
  }
  if (!v746)
    goto LABEL_542;
  v362 = &v746->__shared_owners_;
  do
    v363 = __ldaxr((unint64_t *)v362);
  while (__stlxr(v363 - 1, (unint64_t *)v362));
  if (!v363)
  {
    ((void (*)(std::__shared_weak_count *))v746->__on_zero_shared)(v746);
    std::__shared_weak_count::__release_weak(v746);
    if ((v262 & 1) != 0)
    {
LABEL_543:
      if (*(_DWORD *)(a4 + 112))
LABEL_1028:
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Inconsistent fused bn state");
      goto LABEL_817;
    }
  }
  else
  {
LABEL_542:
    if ((v262 & 1) != 0)
      goto LABEL_543;
  }
  v364 = *(_QWORD **)(a1 + 440);
  if (v364 && *v364 && (v364[4] || v364[6] || v364[8] || v364[10]))
  {
    v365 = v364[10];
    if (v365)
    {
      v366 = *(int *)(v365 + 8);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v824, 2 * v366, 1, 1, 1);
      v367 = *(_OWORD *)&v824.__r_.__value_.__l.__data_;
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v824.__r_.__value_.__l.__data_;
      v368 = *(const unsigned __int8 **)(v824.__r_.__value_.__r.__words[0] + 16);
      if ((_DWORD)v366)
      {
        v369 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 440) + 80) + 16);
        v370 = *(_WORD **)(v824.__r_.__value_.__r.__words[0] + 16);
        v371 = v366;
        do
        {
          v372 = *v369++;
          _S0 = v372;
          __asm { FCVT            H0, S0 }
          *v370++ = _S0;
          --v371;
        }
        while (v371);
      }
      v374 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
      v742 = v367;
      if (*((_QWORD *)&v367 + 1))
      {
        v375 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
        do
          v376 = __ldxr(v375);
        while (__stxr(v376 + 1, v375));
        v368 = *(const unsigned __int8 **)(v367 + 16);
      }
      v377 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v374, v368, *(int *)(v367 + 8));
      if (*((_QWORD *)&v367 + 1))
      {
        v378 = (unint64_t *)(*((_QWORD *)&v367 + 1) + 8);
        do
          v379 = __ldaxr(v378);
        while (__stlxr(v379 - 1, v378));
        if (!v379)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v367 + 1) + 16))(*((_QWORD *)&v367 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v367 + 1));
        }
      }
      v380 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v366);
      v381 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v380, "setObject:forKeyedSubscript:", v381, CFSTR("ScaleCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v377);
      v382 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v380, "setObject:forKeyedSubscript:", v382, CFSTR("ScaleOffset"));

      v383 = (void *)MEMORY[0x1E0CB37E8];
      if (v711)
        v384 = 0;
      else
      objc_msgSend(v383, "numberWithUnsignedLong:", v384, v699);
      v429 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v380, "setObject:forKeyedSubscript:", v429, CFSTR("ScaleIndex"));

      objc_msgSend(v380, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
      if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1) + 8))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 408))(v817, a1);
        if (!v817[0])
        {
          v430 = (std::__shared_weak_count *)a3[1];
          v740 = *a3;
          v741 = v430;
          if (v430)
          {
            v431 = (unint64_t *)&v430->__shared_owners_;
            do
              v432 = __ldxr(v431);
            while (__stxr(v432 + 1, v431));
          }
          std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
          (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v740, a1, buf);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v433 = v741;
          if (v741)
          {
            v434 = (unint64_t *)&v741->__shared_owners_;
            do
              v435 = __ldaxr(v434);
            while (__stlxr(v435 - 1, v434));
            if (!v435)
            {
              ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
              std::__shared_weak_count::__release_weak(v433);
            }
          }
          v436 = v824.__r_.__value_.__r.__words[2];
          v437 = (char *)operator new(0x58uLL);
          *((_QWORD *)v437 + 1) = 0;
          *((_QWORD *)v437 + 2) = 0;
          *(_QWORD *)v437 = &off_1E2DBEC00;
          *((_QWORD *)v437 + 3) = &off_1E2DA1190;
          v438 = v824.__r_.__value_.__r.__words[0];
          *(_OWORD *)(v437 + 56) = 0u;
          *(_OWORD *)(v437 + 72) = 0u;
          *((_DWORD *)v437 + 8) = v436 >> 2;
          *((_QWORD *)v437 + 5) = v438;
          v437[48] = 0;
          *(_QWORD *)&v439 = v437 + 24;
          *((_QWORD *)&v439 + 1) = v437;
          v440 = (std::__shared_weak_count *)v817[1];
          *(_OWORD *)v817 = v439;
          if (v440)
          {
            v441 = (unint64_t *)&v440->__shared_owners_;
            do
              v442 = __ldaxr(v441);
            while (__stlxr(v442 - 1, v441));
            if (!v442)
            {
              ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
              std::__shared_weak_count::__release_weak(v440);
            }
          }
          if (!v817[0])
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v824, 4 * v366, 1, 1, 1);
        v443 = v824.__r_.__value_.__r.__words[0];
        if ((_DWORD)v366)
        {
          v444 = *(float **)(v824.__r_.__value_.__r.__words[0] + 16);
          v445 = (float *)*((_QWORD *)v817[0] + 2);
          v446 = *(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 440) + 80) + 16);
          v447 = v366;
          do
          {
            v448 = *v445++;
            v449 = v448;
            v450 = *v446++;
            *v444++ = v449 / v450;
            --v447;
          }
          while (v447);
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v366, 1, 1, 1);
        v451 = *(_QWORD *)buf;
        v452 = *(const unsigned __int8 **)(*(_QWORD *)buf + 16);
        if ((_DWORD)v366)
        {
          v453 = *(int **)(v443 + 16);
          v454 = *(_WORD **)(*(_QWORD *)buf + 16);
          v455 = v366;
          do
          {
            v456 = *v453++;
            _S0 = v456;
            __asm { FCVT            H0, S0 }
            *v454++ = _S0;
            --v455;
          }
          while (v455);
        }
        v458 = *(std::__shared_weak_count **)&buf[8];
        v738 = v451;
        v739 = *(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v459 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v460 = __ldxr(v459);
          while (__stxr(v460 + 1, v459));
          v452 = *(const unsigned __int8 **)(v451 + 16);
        }
        v461 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v374, v452, *(int *)(v451 + 8));
        if (v458)
        {
          v462 = (unint64_t *)&v458->__shared_owners_;
          do
            v463 = __ldaxr(v462);
          while (__stlxr(v463 - 1, v462));
          if (!v463)
          {
            ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
            std::__shared_weak_count::__release_weak(v458);
          }
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v366);
        v464 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v380, "setObject:forKeyedSubscript:", v464, CFSTR("BiasCount"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v461);
        v465 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v380, "setObject:forKeyedSubscript:", v465, CFSTR("BiasOffset"));

        v466 = (void *)MEMORY[0x1E0CB37E8];
        if (v711)
          v467 = 0;
        else
        objc_msgSend(v466, "numberWithUnsignedLong:", v467);
        v480 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v380, "setObject:forKeyedSubscript:", v480, CFSTR("BiasIndex"));

        objc_msgSend(v380, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
        v481 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v482 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v483 = __ldaxr(v482);
          while (__stlxr(v483 - 1, v482));
          if (!v483)
          {
            ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
            std::__shared_weak_count::__release_weak(v481);
          }
        }
        v484 = (std::__shared_weak_count *)v824.__r_.__value_.__l.__size_;
        if (v824.__r_.__value_.__l.__size_)
        {
          v485 = (unint64_t *)(v824.__r_.__value_.__l.__size_ + 8);
          do
            v486 = __ldaxr(v485);
          while (__stlxr(v486 - 1, v485));
          if (!v486)
          {
            ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
            std::__shared_weak_count::__release_weak(v484);
          }
        }
        v487 = (std::__shared_weak_count *)v817[1];
        if (v817[1])
        {
          v488 = (unint64_t *)((char *)v817[1] + 8);
          do
            v489 = __ldaxr(v488);
          while (__stlxr(v489 - 1, v488));
          if (!v489)
          {
            ((void (*)(std::__shared_weak_count *))v487->__on_zero_shared)(v487);
            std::__shared_weak_count::__release_weak(v487);
          }
        }
      }
      v490 = (void *)objc_opt_new();
      objc_msgSend(v490, "setObject:forKeyedSubscript:", v380, CFSTR("BiasScaleGroupData"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
      v491 = v832;
      v832 = CFSTR("GOC");

      objc_storeStrong(&v833, v490);
      v492 = v780;
      if ((unint64_t)v780 >= v781)
      {
        v494 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
        if (v494 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v495 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
        if (v495 <= v494 + 1)
          v495 = v494 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
          v496 = 0x1C71C71C71C71C7;
        else
          v496 = v495;
        *((_QWORD *)&v837 + 1) = &v781;
        if (v496)
          v496 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v496);
        else
          v497 = 0;
        *(_QWORD *)buf = v496;
        *(_QWORD *)&buf[8] = v496 + 144 * v494;
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        *(_QWORD *)&v837 = v496 + 144 * v497;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
        *(_QWORD *)&buf[16] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
        v493 = v780;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
        v493 = v492 + 6;
      }
      v780 = v493;

      if (v830 < 0)
        operator delete(v829);
      *(_QWORD *)buf = &v826;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = v825;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v824.__r_.__value_.__l.__data_);

      v477 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_)
        goto LABEL_817;
      v498 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v479 = __ldaxr(v498);
      while (__stlxr(v479 - 1, v498));
LABEL_717:
      if (!v479)
      {
        ((void (*)(std::__shared_weak_count *))v477->__on_zero_shared)(v477);
        std::__shared_weak_count::__release_weak(v477);
      }
      goto LABEL_817;
    }
  }
  if (!*(_DWORD *)(a4 + 112))
  {
    if (!*(_DWORD *)(a4 + 32))
      goto LABEL_817;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 408))(&v824, a1);
    v411 = *(_OWORD *)&v824.__r_.__value_.__l.__data_;
    if (v824.__r_.__value_.__l.__size_)
    {
      v412 = (unint64_t *)(v824.__r_.__value_.__l.__size_ + 8);
      do
        v413 = __ldaxr(v412);
      while (__stlxr(v413 - 1, v412));
      if (!v413)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v411 + 1) + 16))(*((_QWORD *)&v411 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v411 + 1));
      }
    }
    if (!(_QWORD)v411)
      goto LABEL_817;
    if (a2[121])
    {
      v414 = *(id *)(v779 + 128);
    }
    else
    {
      v414 = (id)objc_opt_new();

    }
    v499 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
    v500 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v499, "setObject:forKeyedSubscript:", v500, CFSTR("BiasCount"));

    v501 = (std::__shared_weak_count *)a3[1];
    v731 = *a3;
    v732 = v501;
    if (v501)
    {
      v502 = (unint64_t *)&v501->__shared_owners_;
      do
        v503 = __ldxr(v502);
      while (__stxr(v503 + 1, v502));
    }
    std::string::basic_string[abi:ne180100]<0>(&v824, "blob_biases_f16");
    v504 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                              + 88))(a1 + 544, &v731, a1, &v824);
    if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v824.__r_.__value_.__l.__data_);
    v505 = v732;
    if (v732)
    {
      v506 = (unint64_t *)&v732->__shared_owners_;
      do
        v507 = __ldaxr(v506);
      while (__stlxr(v507 - 1, v506));
      if (!v507)
      {
        ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
        std::__shared_weak_count::__release_weak(v505);
      }
    }
    if (v504 < 0)
    {
      v523 = (std::__shared_weak_count *)a3[1];
      v725 = *a3;
      v726 = v523;
      if (v523)
      {
        v524 = (unint64_t *)&v523->__shared_owners_;
        do
          v525 = __ldxr(v524);
        while (__stxr(v525 + 1, v524));
      }
      std::string::basic_string[abi:ne180100]<0>(&v824, "blob_biases");
      v511 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                                + 88))(a1 + 544, &v725, a1, &v824);
      if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v824.__r_.__value_.__l.__data_);
      v526 = v726;
      if (v726)
      {
        v527 = (unint64_t *)&v726->__shared_owners_;
        do
          v528 = __ldaxr(v527);
        while (__stlxr(v528 - 1, v527));
        if (!v528)
        {
          ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
          std::__shared_weak_count::__release_weak(v526);
        }
      }
      v529 = (std::__shared_weak_count *)a3[1];
      v723 = *a3;
      v724 = v529;
      if (v529)
      {
        v530 = (unint64_t *)&v529->__shared_owners_;
        do
          v531 = __ldxr(v530);
        while (__stxr(v531 + 1, v530));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases");
      (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v723, a1, buf);
      v518 = (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__r.__words[0];
      v519 = v824.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v520 = v724;
      if (!v724)
        goto LABEL_770;
      v532 = (unint64_t *)&v724->__shared_owners_;
      do
        v522 = __ldaxr(v532);
      while (__stlxr(v522 - 1, v532));
    }
    else
    {
      v508 = (std::__shared_weak_count *)a3[1];
      v729 = *a3;
      v730 = v508;
      if (v508)
      {
        v509 = (unint64_t *)&v508->__shared_owners_;
        do
          v510 = __ldxr(v509);
        while (__stxr(v510 + 1, v509));
      }
      std::string::basic_string[abi:ne180100]<0>(&v824, "blob_biases_f16");
      v511 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                                + 88))(a1 + 544, &v729, a1, &v824);
      if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v824.__r_.__value_.__l.__data_);
      v512 = v730;
      if (v730)
      {
        v513 = (unint64_t *)&v730->__shared_owners_;
        do
          v514 = __ldaxr(v513);
        while (__stlxr(v514 - 1, v513));
        if (!v514)
        {
          ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
          std::__shared_weak_count::__release_weak(v512);
        }
      }
      v515 = (std::__shared_weak_count *)a3[1];
      v727 = *a3;
      v728 = v515;
      if (v515)
      {
        v516 = (unint64_t *)&v515->__shared_owners_;
        do
          v517 = __ldxr(v516);
        while (__stxr(v517 + 1, v516));
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "blob_biases_f16");
      (*(void (**)(std::string *__return_ptr, uint64_t, const Espresso::net **, uint64_t, _BYTE *))(*(_QWORD *)(a1 + 544) + 120))(&v824, a1 + 544, &v727, a1, buf);
      v518 = (Espresso::ANECompilerEngine::compiler *)v824.__r_.__value_.__r.__words[0];
      v519 = v824.__r_.__value_.__r.__words[2];
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v520 = v728;
      if (!v728)
        goto LABEL_770;
      v521 = (unint64_t *)&v728->__shared_owners_;
      do
        v522 = __ldaxr(v521);
      while (__stlxr(v522 - 1, v521));
    }
    if (!v522)
    {
      ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
      std::__shared_weak_count::__release_weak(v520);
    }
LABEL_770:
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 408))(buf, a1);
    if (!*(_QWORD *)buf)
    {
      v533 = (char *)operator new(0x58uLL);
      *((_QWORD *)v533 + 1) = 0;
      *((_QWORD *)v533 + 2) = 0;
      *(_QWORD *)v533 = &off_1E2DBEC00;
      *((_QWORD *)v533 + 3) = &off_1E2DA1190;
      *(_OWORD *)(v533 + 56) = 0u;
      *(_OWORD *)(v533 + 72) = 0u;
      *((_DWORD *)v533 + 8) = v519 >> 2;
      *((_QWORD *)v533 + 5) = v518;
      v533[48] = 0;
      v534 = *(std::__shared_weak_count **)&buf[8];
      *(_QWORD *)buf = v533 + 24;
      *(_QWORD *)&buf[8] = v533;
      if (v534)
      {
        v535 = (unint64_t *)&v534->__shared_owners_;
        do
          v536 = __ldaxr(v535);
        while (__stlxr(v536 - 1, v535));
        if (!v536)
        {
          ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
          std::__shared_weak_count::__release_weak(v534);
        }
        if (!*(_QWORD *)buf)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Missing biases");
      }
    }
    v537 = (std::__shared_weak_count *)a3[1];
    v721 = *a3;
    v722 = v537;
    if (v537)
    {
      v538 = (unint64_t *)&v537->__shared_owners_;
      do
        v539 = __ldxr(v538);
      while (__stxr(v539 + 1, v538));
    }
    std::string::basic_string[abi:ne180100]<0>(&v824, "blob_biases_f16");
    v540 = (*(uint64_t (**)(uint64_t, const Espresso::net **, uint64_t, std::string *))(*(_QWORD *)(a1 + 544)
                                                                                              + 88))(a1 + 544, &v721, a1, &v824);
    if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v824.__r_.__value_.__l.__data_);
    v541 = v722;
    if (v722)
    {
      v542 = (unint64_t *)&v722->__shared_owners_;
      do
        v543 = __ldaxr(v542);
      while (__stlxr(v543 - 1, v542));
      if (!v543)
      {
        ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
        std::__shared_weak_count::__release_weak(v541);
      }
    }
    if (v540 < 0)
    {
      v549 = *(int **)(*(_QWORD *)buf + 16);
      v550 = *(int *)(*(_QWORD *)buf + 8);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v824, 2 * v550, 1, 1, 1);
      v551 = v824.__r_.__value_.__r.__words[0];
      v552 = *(const unsigned __int8 **)(v824.__r_.__value_.__r.__words[0] + 16);
      if ((_DWORD)v550)
      {
        v553 = *(_WORD **)(v824.__r_.__value_.__r.__words[0] + 16);
        do
        {
          v554 = *v549++;
          _S0 = v554;
          __asm { FCVT            H0, S0 }
          *v553++ = _S0;
          --v550;
        }
        while (v550);
      }
      v556 = (std::__shared_weak_count *)v824.__r_.__value_.__l.__size_;
      if (v824.__r_.__value_.__l.__size_)
      {
        v557 = (unint64_t *)(v824.__r_.__value_.__l.__size_ + 8);
        do
          v558 = __ldxr(v557);
        while (__stxr(v558 + 1, v557));
        v552 = *(const unsigned __int8 **)(v551 + 16);
      }
      v511 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), v552, *(int *)(v551 + 8));
      if (v556)
      {
        v559 = (unint64_t *)&v556->__shared_owners_;
        do
          v560 = __ldaxr(v559);
        while (__stlxr(v560 - 1, v559));
        if (!v560)
        {
          ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
          std::__shared_weak_count::__release_weak(v556);
        }
      }
      v561 = (void *)MEMORY[0x1E0CB37E8];
      if (v711)
        v562 = 0;
      else
      objc_msgSend(v561, "numberWithUnsignedLong:", v562, v699);
      v628 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v499, "setObject:forKeyedSubscript:", v628, CFSTR("BiasIndex"));

      v629 = (std::__shared_weak_count *)v824.__r_.__value_.__l.__size_;
      if (v824.__r_.__value_.__l.__size_)
      {
        v630 = (unint64_t *)(v824.__r_.__value_.__l.__size_ + 8);
        do
          v631 = __ldaxr(v630);
        while (__stlxr(v631 - 1, v630));
        if (!v631)
        {
          ((void (*)(std::__shared_weak_count *))v629->__on_zero_shared)(v629);
          std::__shared_weak_count::__release_weak(v629);
        }
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", Espresso::ANECompilerEngine::get_primary_weights_file_index((Espresso::ANECompilerEngine *)a2, v518, (const void *)v519));
      v544 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v499, "setObject:forKeyedSubscript:", v544, CFSTR("BiasIndex"));

    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v511, v699);
    v545 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v499, "setObject:forKeyedSubscript:", v545, CFSTR("BiasOffset"));

    objc_msgSend(v499, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
    objc_msgSend(v414, "setObject:forKeyedSubscript:", v499, CFSTR("BiasScaleGroupData"));
    if (!a2[121])
    {
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
      v546 = v832;
      v832 = CFSTR("GOC");

      objc_storeStrong(&v833, v414);
      v547 = v780;
      if ((unint64_t)v780 >= v781)
      {
        v548 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v779, (uint64_t)&v824);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
        v548 = v547 + 6;
      }
      v780 = v548;

      if (v830 < 0)
        operator delete(v829);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v826;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v825;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v824.__r_.__value_.__l.__data_);
    }
    v563 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v564 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v565 = __ldaxr(v564);
      while (__stlxr(v565 - 1, v564));
      if (!v565)
      {
        ((void (*)(std::__shared_weak_count *))v563->__on_zero_shared)(v563);
        std::__shared_weak_count::__release_weak(v563);
      }
    }

    goto LABEL_817;
  }
  if (a2[121])
    goto LABEL_1028;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 408))(&v736, a1);
  Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_to_scale_bias(&__str, (uint64_t)&v736, *(_DWORD *)(*a7 + 16), a2[384], 0, 0.0);
  v385 = v737;
  if (v737)
  {
    v386 = (unint64_t *)&v737->__shared_owners_;
    do
      v387 = __ldaxr(v386);
    while (__stlxr(v387 - 1, v386));
    if (!v387)
    {
      ((void (*)(std::__shared_weak_count *))v385->__on_zero_shared)(v385);
      std::__shared_weak_count::__release_weak(v385);
    }
  }
  v388 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_OWORD *)v817 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v389 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v390 = __ldxr(v389);
    while (__stxr(v390 + 1, v389));
  }
  v822 = (char *)__str.__r_.__value_.__r.__words[2];
  v823 = (std::__shared_weak_count *)v845;
  if ((_QWORD)v845)
  {
    v391 = (unint64_t *)(v845 + 8);
    do
      v392 = __ldxr(v391);
    while (__stxr(v392 + 1, v391));
  }
  v393 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128);
  v735 = v388;
  if (*((_QWORD *)&v388 + 1))
  {
    v394 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
    do
      v395 = __ldxr(v394);
    while (__stxr(v395 + 1, v394));
  }
  v396 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v393, *(const unsigned __int8 **)(v388 + 16), *(int *)(v388 + 8));
  if (*((_QWORD *)&v388 + 1))
  {
    v397 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
    do
      v398 = __ldaxr(v397);
    while (__stlxr(v398 - 1, v397));
    if (!v398)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v388 + 1) + 16))(*((_QWORD *)&v388 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v388 + 1));
    }
  }
  v399 = (const unsigned __int8 **)v822;
  v400 = v823;
  v733 = v822;
  v734 = v823;
  if (v823)
  {
    v401 = (unint64_t *)&v823->__shared_owners_;
    do
      v402 = __ldxr(v401);
    while (__stxr(v402 + 1, v401));
  }
  v403 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v393, v399[2], *((int *)v399 + 2));
  if (v400)
  {
    v404 = (unint64_t *)&v400->__shared_owners_;
    do
      v405 = __ldaxr(v404);
    while (__stlxr(v405 - 1, v404));
    if (!v405)
    {
      ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
      std::__shared_weak_count::__release_weak(v400);
    }
  }
  v406 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
  v407 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v407, CFSTR("BiasCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v403);
  v408 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v408, CFSTR("BiasOffset"));

  v409 = (void *)MEMORY[0x1E0CB37E8];
  if (v711)
    v410 = 0;
  else
  objc_msgSend(v409, "numberWithUnsignedLong:", v410, v699);
  v415 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v415, CFSTR("BiasIndex"));

  objc_msgSend(v406, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("BiasType"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*a7 + 16));
  v416 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v416, CFSTR("ScaleCount"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v396);
  v417 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v417, CFSTR("ScaleOffset"));

  v418 = (void *)MEMORY[0x1E0CB37E8];
  if (v711)
    v419 = 0;
  else
  objc_msgSend(v418, "numberWithUnsignedLong:", v419);
  v420 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v406, "setObject:forKeyedSubscript:", v420, CFSTR("ScaleIndex"));

  objc_msgSend(v406, "setObject:forKeyedSubscript:", CFSTR("Float32"), CFSTR("ScaleType"));
  v421 = (void *)objc_opt_new();
  objc_msgSend(v421, "setObject:forKeyedSubscript:", v406, CFSTR("BiasScaleGroupData"));
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
  v422 = v832;
  v832 = CFSTR("GOC");

  objc_storeStrong(&v833, v421);
  v423 = v780;
  if ((unint64_t)v780 >= v781)
  {
    v425 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
    if (v425 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v426 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
    if (v426 <= v425 + 1)
      v426 = v425 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
      v427 = 0x1C71C71C71C71C7;
    else
      v427 = v426;
    *((_QWORD *)&v837 + 1) = &v781;
    if (v427)
      v427 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v427);
    else
      v428 = 0;
    *(_QWORD *)buf = v427;
    *(_QWORD *)&buf[8] = v427 + 144 * v425;
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&v837 = v427 + 144 * v428;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
    *(_QWORD *)&buf[16] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
    v424 = v780;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
    v424 = v423 + 6;
  }
  v780 = v424;

  if (v830 < 0)
    operator delete(v829);
  *(_QWORD *)buf = &v826;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v825;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);

  v468 = v823;
  if (v823)
  {
    v469 = (unint64_t *)&v823->__shared_owners_;
    do
      v470 = __ldaxr(v469);
    while (__stlxr(v470 - 1, v469));
    if (!v470)
    {
      ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
      std::__shared_weak_count::__release_weak(v468);
    }
  }
  v471 = (std::__shared_weak_count *)v817[1];
  if (v817[1])
  {
    v472 = (unint64_t *)((char *)v817[1] + 8);
    do
      v473 = __ldaxr(v472);
    while (__stlxr(v473 - 1, v472));
    if (!v473)
    {
      ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
      std::__shared_weak_count::__release_weak(v471);
    }
  }
  v474 = (std::__shared_weak_count *)v845;
  if ((_QWORD)v845)
  {
    v475 = (unint64_t *)(v845 + 8);
    do
      v476 = __ldaxr(v475);
    while (__stlxr(v476 - 1, v475));
    if (!v476)
    {
      ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
      std::__shared_weak_count::__release_weak(v474);
    }
  }
  v477 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v478 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v479 = __ldaxr(v478);
    while (__stlxr(v479 - 1, v478));
    goto LABEL_717;
  }
LABEL_817:
  if (*(_DWORD *)(a4 + 24))
  {
    if (a2[121])
    {
      v566 = *(id *)(v779 + 128);
    }
    else
    {
      v566 = (id)objc_opt_new();

    }
    objc_msgSend(v566, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"), v699);
    if (a2[121])
      goto LABEL_889;
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
    v567 = v832;
    v832 = CFSTR("Neuron");

    objc_storeStrong(&v833, v566);
    v568 = v780;
    if ((unint64_t)v780 >= v781)
    {
      v570 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
      if (v570 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v571 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
      if (v571 <= v570 + 1)
        v571 = v570 + 1;
      v572 = (char *)(0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3
                    ? 0x1C71C71C71C71C7
                    : v571);
      *((_QWORD *)&v837 + 1) = &v781;
      if (v572)
        v572 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>((unint64_t)v572);
      else
        v573 = 0;
      *(_QWORD *)buf = v572;
      *(_QWORD *)&buf[8] = &v572[144 * v570];
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v837 = &v572[144 * v573];
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
      v569 = v780;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
      v569 = v568 + 6;
    }
    v780 = v569;

    if (v830 < 0)
      operator delete(v829);
    *(_QWORD *)buf = &v826;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v825;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((SHIBYTE(v824.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_889;
    v579 = (void *)v824.__r_.__value_.__r.__words[0];
    goto LABEL_852;
  }
  if (!*(_DWORD *)(a4 + 28))
  {
    if (*(_DWORD *)(a4 + 60) != -1)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("Custom activation not implemented");
    goto LABEL_890;
  }
  if (a2[121])
  {
    v566 = *(id *)(v779 + 128);
  }
  else
  {
    v566 = (id)objc_opt_new();

  }
  objc_msgSend(v566, "setObject:forKeyedSubscript:", CFSTR("Tanh"), CFSTR("Type"), v699);
  if (a2[121])
  {
LABEL_889:

LABEL_890:
    (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)(a1 + 544) + 32))(a1 + 544, a2, &v779);
    goto LABEL_891;
  }
  v574 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v824, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(buf, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v574 + 472, (uint64_t)&v824, (uint64_t)buf, &__str);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)*a3 + 472);
  v575 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  v577 = v575;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 1)
      goto LABEL_856;
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_856;
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[0] == 48)
  {
LABEL_862:
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v824.__r_.__value_.__l.__data_, a5);
    v584 = v832;
    v832 = CFSTR("Neuron");

    objc_storeStrong(&v833, v566);
    v585 = v780;
    if ((unint64_t)v780 >= v781)
    {
      v588 = 0x8E38E38E38E38E39 * (((uint64_t)v780 - v779) >> 4);
      if (v588 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v589 = 0x1C71C71C71C71C72 * ((uint64_t)(v781 - v779) >> 4);
      if (v589 <= v588 + 1)
        v589 = v588 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v781 - v779) >> 4) >= 0xE38E38E38E38E3)
        v590 = 0x1C71C71C71C71C7;
      else
        v590 = v589;
      *((_QWORD *)&v837 + 1) = &v781;
      if (v590)
        v590 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v590);
      else
        v591 = 0;
      *(_QWORD *)buf = v590;
      *(_QWORD *)&buf[8] = v590 + 144 * v588;
      *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
      *(_QWORD *)&v837 = v590 + 144 * v591;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&buf[8], (uint64_t)&v824);
      *(_QWORD *)&buf[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v779, buf);
      v586 = v780;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v780, (uint64_t)&v824);
      v586 = v585 + 6;
    }
    v780 = v586;

    if (v830 < 0)
      operator delete(v829);
    *(_QWORD *)buf = &v826;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v825;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v824.__r_.__value_.__l.__data_);

    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_889;
    v579 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_852:
    operator delete(v579);
    goto LABEL_889;
  }
LABEL_856:
  if (!Espresso::ANECompilerEngine::is_mix(v575, v576))
    goto LABEL_862;
  v580 = (__int128 *)&v780[-6];
  std::string::append(v780 - 6, "_pre_tanh");
  v581 = a1 + 544;
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)(a1 + 544) + 32))(a1 + 544, a2, &v779);
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t(&v824, (const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)a5);
  v582 = v826;
  for (k = (char *)v827; k != v582; k -= 24)
  {
    if (*(k - 1) < 0)
      operator delete(*((void **)k - 3));
  }
  v827 = (std::string *)v582;
  if ((unint64_t)v582 >= v828)
  {
    v587 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v826, (uint64_t)v580);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v826, v580);
    v587 = (std::string *)(v582 + 24);
  }
  v827 = v587;
  (*(void (**)(uint64_t, _BYTE *, std::string *))(*(_QWORD *)v581 + 48))(v581, a2, &v824);

  if (v830 < 0)
    operator delete(v829);
  *(_QWORD *)buf = &v826;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v825;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v824.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v824.__r_.__value_.__l.__data_);

  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);

LABEL_891:
  v824.__r_.__value_.__r.__words[0] = (std::string::size_type)&v779;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v824);

  v592 = (std::__shared_weak_count *)*((_QWORD *)&v806 + 1);
  if (*((_QWORD *)&v806 + 1))
  {
    v593 = (unint64_t *)(*((_QWORD *)&v806 + 1) + 8);
    do
      v594 = __ldaxr(v593);
    while (__stlxr(v594 - 1, v593));
    if (!v594)
    {
      ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
      std::__shared_weak_count::__release_weak(v592);
    }
  }
  v595 = (std::__shared_weak_count *)*((_QWORD *)&v805 + 1);
  if (*((_QWORD *)&v805 + 1))
  {
    v596 = (unint64_t *)(*((_QWORD *)&v805 + 1) + 8);
    do
      v597 = __ldaxr(v596);
    while (__stlxr(v597 - 1, v596));
    if (!v597)
    {
      ((void (*)(std::__shared_weak_count *))v595->__on_zero_shared)(v595);
      std::__shared_weak_count::__release_weak(v595);
    }
  }
  v598 = (std::__shared_weak_count *)*((_QWORD *)&v804 + 1);
  if (*((_QWORD *)&v804 + 1))
  {
    v599 = (unint64_t *)(*((_QWORD *)&v804 + 1) + 8);
    do
      v600 = __ldaxr(v599);
    while (__stlxr(v600 - 1, v599));
    if (!v600)
    {
      ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
      std::__shared_weak_count::__release_weak(v598);
    }
  }
  v601 = (std::__shared_weak_count *)*((_QWORD *)&v803 + 1);
  if (*((_QWORD *)&v803 + 1))
  {
    v602 = (unint64_t *)(*((_QWORD *)&v803 + 1) + 8);
    do
      v603 = __ldaxr(v602);
    while (__stlxr(v603 - 1, v602));
    if (!v603)
    {
      ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
      std::__shared_weak_count::__release_weak(v601);
    }
  }
  v604 = (std::__shared_weak_count *)*((_QWORD *)&v802 + 1);
  if (*((_QWORD *)&v802 + 1))
  {
    v605 = (unint64_t *)(*((_QWORD *)&v802 + 1) + 8);
    do
      v606 = __ldaxr(v605);
    while (__stlxr(v606 - 1, v605));
    if (!v606)
    {
      ((void (*)(std::__shared_weak_count *))v604->__on_zero_shared)(v604);
      std::__shared_weak_count::__release_weak(v604);
    }
  }
  v607 = (std::__shared_weak_count *)*((_QWORD *)&v801 + 1);
  if (*((_QWORD *)&v801 + 1))
  {
    v608 = (unint64_t *)(*((_QWORD *)&v801 + 1) + 8);
    do
      v609 = __ldaxr(v608);
    while (__stlxr(v609 - 1, v608));
    if (!v609)
    {
      ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
      std::__shared_weak_count::__release_weak(v607);
    }
  }
  v610 = (std::__shared_weak_count *)*((_QWORD *)&v800 + 1);
  if (*((_QWORD *)&v800 + 1))
  {
    v611 = (unint64_t *)(*((_QWORD *)&v800 + 1) + 8);
    do
      v612 = __ldaxr(v611);
    while (__stlxr(v612 - 1, v611));
    if (!v612)
    {
      ((void (*)(std::__shared_weak_count *))v610->__on_zero_shared)(v610);
      std::__shared_weak_count::__release_weak(v610);
    }
  }
  v613 = (std::__shared_weak_count *)*((_QWORD *)&v799 + 1);
  if (*((_QWORD *)&v799 + 1))
  {
    v614 = (unint64_t *)(*((_QWORD *)&v799 + 1) + 8);
    do
      v615 = __ldaxr(v614);
    while (__stlxr(v615 - 1, v614));
    if (!v615)
    {
      ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
      std::__shared_weak_count::__release_weak(v613);
    }
  }
  v616 = (std::__shared_weak_count *)*((_QWORD *)&v798 + 1);
  if (*((_QWORD *)&v798 + 1))
  {
    v617 = (unint64_t *)(*((_QWORD *)&v798 + 1) + 8);
    do
      v618 = __ldaxr(v617);
    while (__stlxr(v618 - 1, v617));
    if (!v618)
    {
      ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
      std::__shared_weak_count::__release_weak(v616);
    }
  }
  v619 = (std::__shared_weak_count *)*((_QWORD *)&v797 + 1);
  if (*((_QWORD *)&v797 + 1))
  {
    v620 = (unint64_t *)(*((_QWORD *)&v797 + 1) + 8);
    do
      v621 = __ldaxr(v620);
    while (__stlxr(v621 - 1, v620));
    if (!v621)
    {
      ((void (*)(std::__shared_weak_count *))v619->__on_zero_shared)(v619);
      std::__shared_weak_count::__release_weak(v619);
    }
  }
  v622 = (std::__shared_weak_count *)*((_QWORD *)&v796 + 1);
  if (*((_QWORD *)&v796 + 1))
  {
    v623 = (unint64_t *)(*((_QWORD *)&v796 + 1) + 8);
    do
      v624 = __ldaxr(v623);
    while (__stlxr(v624 - 1, v623));
    if (!v624)
    {
      ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
      std::__shared_weak_count::__release_weak(v622);
    }
  }
  v625 = (std::__shared_weak_count *)*((_QWORD *)&v795 + 1);
  if (*((_QWORD *)&v795 + 1))
  {
    v626 = (unint64_t *)(*((_QWORD *)&v795 + 1) + 8);
    do
      v627 = __ldaxr(v626);
    while (__stlxr(v627 - 1, v626));
    if (!v627)
    {
      ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
      std::__shared_weak_count::__release_weak(v625);
    }
  }
}

void sub_191732610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x5C0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x520]);

  STACK[0x478] = (unint64_t)&STACK[0x2B0];
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x478]);

  Espresso::ANECompilerEngine::final_anec_weights_t::~final_anec_weights_t((Espresso::ANECompilerEngine::final_anec_weights_t *)&STACK[0x3B0]);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(char *a1, Espresso::ANECompilerEngine *a2, _QWORD *a3, Espresso::quantized_weights_helper **a4, void *a5, uint64_t *a6)
{
  void *v10;
  void *v11;
  void *v12;
  int v13;
  Espresso::quantized_weights_helper *v14;
  void *v15;
  void *v16;
  void *v17;
  Espresso::ANECompilerEngine *v18;
  Espresso::ANECompilerEngine *v19;
  NSString *v20;
  char is_mix;
  Espresso::quantized_weights_helper *v22;
  NSString *v23;
  int v24;
  NSString *v25;
  int v26;
  char *v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  _QWORD *v30;
  uint64_t v31;
  NSString *v32;
  int v33;
  NSString *v34;
  int v35;
  char *v36;
  uint64_t *v37;
  unsigned __int8 *v38;
  NSString *v39;
  int v40;
  NSString *v41;
  int v42;
  char *v43;
  uint64_t *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  std::string *v53;
  _BOOL4 v54;
  uint64_t v55;
  std::string *v56;
  _BOOL4 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  BOOL is_qbias_zero;
  unint64_t *v62;
  unint64_t v63;
  const float **v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _BOOL4 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t weights_file_index;
  Espresso::ANECompilerEngine::ane_kernel *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  Espresso::ANECompilerEngine *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  Espresso::ANECompilerEngine::compiler::build_state_t *v99;
  const unsigned __int8 **v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  Espresso::ANECompilerEngine::ane_kernel *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  void *v111;
  void *v112;
  Espresso::ANECompilerEngine::ane_kernel *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116[2];
  _QWORD v117[4];
  uint64_t v118[2];
  void *__p;
  uint64_t v120;
  void *v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125[2];
  char v126;
  std::string v127;
  std::string v128;
  _QWORD v129[2];
  uint64_t v130[2];
  uint64_t v131;
  uint64_t v132;
  _QWORD v133[4];
  uint64_t *v134[5];
  char v135;
  id v136;
  Espresso::ANECompilerEngine *v137;
  char *v138;
  _QWORD v139[3];
  _QWORD *v140;
  _QWORD v141[3];
  _QWORD *v142;
  _QWORD v143[3];
  _QWORD *v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v137 = a2;
  v138 = a1;
  v136 = a5;
  v135 = *((_BYTE *)a2 + 552);
  v134[0] = (uint64_t *)&v138;
  v134[1] = a6;
  v134[2] = (uint64_t *)&v137;
  v134[3] = (uint64_t *)&v136;
  v134[4] = (uint64_t *)&v135;
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("espresso.anecompiler.always_bloat"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "BOOLValue");

  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "<rdar://problem/39402422> 257a: \"Illegal cog size\" or \"NE kernel blob too large \" assertion when using large convolutions with int8 weights");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)&__p);
    goto LABEL_11;
  }
  v14 = *a4;
  if (*((_QWORD *)*a4 + 4) || *((_QWORD *)v14 + 6) || *((_QWORD *)v14 + 8))
  {
    if (v138)
    {
      if (v15)
      {
        v16 = v15;
        if (*(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v15 + 384))(v15) + 96) > 1
          || *(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v16 + 384))(v16) + 98) >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "Dilated + LUT");
          Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)&__p);
          goto LABEL_11;
        }
      }
    }
    v18 = v137;
    Espresso::ANECompilerEngine::ane_arch_allow_network_override(*a3 + 472);
    v19 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    is_mix = Espresso::ANECompilerEngine::is_mix(v19, v20);
    v22 = *a4;
    if (*((_QWORD *)*a4 + 4))
    {
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v120 = (uint64_t)v23;
      v24 = Espresso::ANECompilerEngine::is_mix(v19, v23);
      v26 = Espresso::ANECompilerEngine::is_mix(v19, v25);
      if (v24)
        v27 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_fp16_palettes;
      else
        v27 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_fp16_palettes;
      v28 = (uint64_t *)*a4;
      v143[0] = &off_1E2DB16B8;
      v143[1] = v18;
      v144 = v143;
      if (v26)
        v29 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_fp16_palettes;
      else
        v29 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_fp16_palettes;
      Espresso::ANECompilerEngine::add_lut_to_f16_weights(v28, v136, (uint64_t)v143, v27, v29, is_mix, (uint64_t)&__p);
      v30 = v144;
      if (v144 == v143)
      {
        v31 = 4;
        v30 = v143;
        goto LABEL_42;
      }
    }
    else if (*((_QWORD *)v22 + 8))
    {
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v120 = (uint64_t)v32;
      v33 = Espresso::ANECompilerEngine::is_mix(v19, v32);
      v35 = Espresso::ANECompilerEngine::is_mix(v19, v34);
      if (v33)
        v36 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_uint8_palettes;
      else
        v36 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_uint8_palettes;
      v37 = (uint64_t *)*a4;
      v141[0] = &off_1E2DB16B8;
      v141[1] = v18;
      v142 = v141;
      if (v35)
        v38 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_uint8_palettes;
      else
        v38 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_uint8_palettes;
      Espresso::ANECompilerEngine::add_lut_to_uint8_weights(v37, v136, (uint64_t)v141, v36, v38, is_mix, (uint64_t)&__p);
      v30 = v142;
      if (v142 == v141)
      {
        v31 = 4;
        v30 = v141;
        goto LABEL_42;
      }
    }
    else
    {
      if (!*((_QWORD *)v22 + 6))
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unknown lookup table type.");
      __p = (void *)Espresso::ANECompilerEngine::sparsity_options::read_sparse_lut_config(*a3 + 472, (Espresso::ANECompilerEngine::sparsity_options *)v11);
      v120 = (uint64_t)v39;
      v40 = Espresso::ANECompilerEngine::is_mix(v19, v39);
      v42 = Espresso::ANECompilerEngine::is_mix(v19, v41);
      if (v40)
        v43 = (char *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::dense_int8_palettes;
      else
        v43 = (char *)&Espresso::ANECompilerEngine::mix_limits::dense_int8_palettes;
      v44 = (uint64_t *)*a4;
      v139[0] = &off_1E2DB16B8;
      v139[1] = v18;
      v140 = v139;
      if (v42)
        v45 = (unsigned __int8 *)&Espresso::ANECompilerEngine::h12_ane_hw_limits::sparse_int8_palettes;
      else
        v45 = (unsigned __int8 *)&Espresso::ANECompilerEngine::mix_limits::sparse_int8_palettes;
      Espresso::ANECompilerEngine::add_lut_to_int8_weights(v44, v136, (uint64_t)v139, v43, v45, is_mix, (uint64_t)&__p);
      v30 = v140;
      if (v140 == v139)
      {
        v31 = 4;
        v30 = v139;
        goto LABEL_42;
      }
    }
    if (!v30)
    {
LABEL_43:

      goto LABEL_44;
    }
    v31 = 5;
LABEL_42:
    (*(void (**)(void))(*v30 + 8 * v31))();
    goto LABEL_43;
  }
  if (*((_DWORD *)v14 + 39) != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Not 8 bits");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)&__p);
LABEL_11:
    if (SHIBYTE(v121) < 0)
    {
      v17 = __p;
LABEL_13:
      operator delete(v17);
      goto LABEL_44;
    }
    goto LABEL_44;
  }
  if (*((_BYTE *)v14 + 164))
  {
    if (Espresso::quantized_weights_helper::is_quantization_linear_signed_symmetric(v14))
    {
      v46 = *((_QWORD *)v138 + 55);
      v47 = *(_QWORD *)(v46 + 80);
      v48 = *(std::__shared_weak_count **)(v46 + 88);
      v133[2] = v47;
      v133[3] = v48;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(p_shared_owners);
        while (__stxr(v50 + 1, p_shared_owners));
      }
      v51 = 0;
      if (v47)
      {
        LODWORD(__p) = 0;
        vDSP_minmgv(*(const float **)(v47 + 16), 1, (float *)&__p, *(int *)(v47 + 8));
        if (*(float *)&__p < 0.000061035)
          v51 = 1;
      }
      if (v48)
      {
        v78 = (unint64_t *)&v48->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if (!v51)
      {
        v80 = v138;
        v81 = a3[1];
        v133[0] = *a3;
        v133[1] = v81;
        if (v81)
        {
          v82 = (unint64_t *)(v81 + 8);
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_S8");
        v84 = (*(uint64_t (**)(char *, _QWORD *, char *, void **))(*((_QWORD *)v80 + 68) + 88))(v80 + 544, v133, v80, &__p);
        if (SHIBYTE(v121) < 0)
          operator delete(__p);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v133);
        if ((v84 & 0x80000000) != 0)
        {
          v91 = *(_QWORD *)*a4;
          v92 = *((_QWORD *)*a4 + 1);
          __p = (void *)v91;
          v120 = v92;
          if (v92)
          {
            v93 = (unint64_t *)(v92 + 8);
            do
              v94 = __ldxr(v93);
            while (__stxr(v94 + 1, v93));
            v95 = v137;
            v132 = v92;
            do
              v96 = __ldxr(v93);
            while (__stxr(v96 + 1, v93));
          }
          else
          {
            v95 = v137;
            v132 = 0;
          }
          v131 = v91;
          v84 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine *)((char *)v95 + 128), *(const unsigned __int8 **)(v91 + 16), *(int *)(v91 + 8));
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v131);
          if (v135)
            weights_file_index = 0;
          else
          if (v138)
            v107 = (Espresso::ANECompilerEngine::ane_kernel *)(v138 + 544);
          else
            v107 = 0;
          v130[0] = (uint64_t)__p;
          v130[1] = v120;
          if (v120)
          {
            v108 = (unint64_t *)(v120 + 8);
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
          }
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v107, v130);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v130);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
        }
        else
        {
          v85 = v138;
          v86 = a3[1];
          v129[0] = *a3;
          v129[1] = v86;
          if (v86)
          {
            v87 = (unint64_t *)(v86 + 8);
            do
              v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
          }
          std::string::basic_string[abi:ne180100]<0>(&v128, "W_S8");
          (*(void (**)(void **__return_ptr, char *, _QWORD *, char *, std::string *))(*((_QWORD *)v85 + 68)
                                                                                               + 120))(&__p, v85 + 544, v129, v85, &v128);
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v128.__r_.__value_.__l.__data_);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v129);
          weights_file_index = Espresso::ANECompilerEngine::get_primary_weights_file_index(v137, (Espresso::ANECompilerEngine::compiler *)__p, v121);
          if (v138)
            v90 = (Espresso::ANECompilerEngine::ane_kernel *)(v138 + 544);
          else
            v90 = 0;
          Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v90, __p);
        }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v84);
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v136, "setObject:forKeyedSubscript:", v110, CFSTR("KernelOffset"));

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", weights_file_index);
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v136, "setObject:forKeyedSubscript:", v111, CFSTR("KernelIndex"));

        objc_msgSend(v136, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
        goto LABEL_44;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Overflowing");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)&__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Signed / Not symmetric");
      Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)&__p);
    }
    goto LABEL_11;
  }
  v52 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat");
  std::string::basic_string[abi:ne180100]<0>(&v127, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v52 + 472, (uint64_t)&__p, (uint64_t)&v127, &v128);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v121) < 0)
    operator delete(__p);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v128.__r_.__value_.__l.__size_ == 1)
    {
      v53 = (std::string *)v128.__r_.__value_.__r.__words[0];
      goto LABEL_66;
    }
  }
  else if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) == 1)
  {
    v53 = &v128;
LABEL_66:
    v54 = v53->__r_.__value_.__s.__data_[0] == 49;
    goto LABEL_68;
  }
  v54 = 0;
LABEL_68:
  v55 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "early_arch_conv_w_int8_no_bloat_v2");
  std::string::basic_string[abi:ne180100]<0>(v125, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v55 + 472, (uint64_t)&__p, (uint64_t)v125, &v127);
  if (v126 < 0)
    operator delete(v125[0]);
  if (SHIBYTE(v121) < 0)
    operator delete(__p);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v127.__r_.__value_.__l.__size_ == 1)
    {
      v56 = (std::string *)v127.__r_.__value_.__r.__words[0];
      goto LABEL_77;
    }
LABEL_78:
    v57 = 0;
    goto LABEL_79;
  }
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) != 1)
    goto LABEL_78;
  v56 = &v127;
LABEL_77:
  v57 = v56->__r_.__value_.__s.__data_[0] == 49;
LABEL_79:
  Espresso::quantized_weights_helper::cast_uint8_linear_to_int8_linear(*a4, v54, v57, &__p);
  if (!__p)
    goto LABEL_95;
  v58 = (std::__shared_weak_count *)v124;
  v118[0] = v123;
  v118[1] = v124;
  if (v124)
  {
    v59 = (unint64_t *)(v124 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  is_qbias_zero = Espresso::quantized_weights_helper::is_qbias_zero(v118);
  if (v58)
  {
    v62 = (unint64_t *)&v58->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (!is_qbias_zero)
  {
LABEL_95:
    std::string::basic_string[abi:ne180100]<0>(v125, "Unsigned / Not symmetric");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)v125);
LABEL_96:
    if (v126 < 0)
      operator delete(v125[0]);
    v69 = (std::__shared_weak_count *)v124;
    if (v124)
    {
      v70 = (unint64_t *)(v124 + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = v122;
    if (v122)
    {
      v73 = (unint64_t *)&v122->__shared_owners_;
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = (std::__shared_weak_count *)v120;
    if (v120)
    {
      v76 = (unint64_t *)(v120 + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    goto LABEL_175;
  }
  v64 = (const float **)v121;
  v65 = v122;
  v117[2] = v121;
  v117[3] = v122;
  if (v122)
  {
    v66 = (unint64_t *)&v122->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  v68 = 0;
  if (v64)
  {
    LODWORD(v125[0]) = 0;
    vDSP_minmgv(v64[2], 1, (float *)v125, *((int *)v64 + 2));
    if (*(float *)v125 < 0.000061035)
      v68 = 1;
  }
  if (v65)
  {
    v97 = (unint64_t *)&v65->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v68)
  {
    std::string::basic_string[abi:ne180100]<0>(v125, "Unsigned / Overflowing");
    Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(v134, (uint64_t *)v125);
    goto LABEL_96;
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v138 + 55) + 80), (uint64_t)v121, (uint64_t)v122);
  v99 = (Espresso::ANECompilerEngine *)((char *)v137 + 128);
  v100 = (const unsigned __int8 **)__p;
  v117[0] = __p;
  v117[1] = v120;
  if (v120)
  {
    v101 = (unint64_t *)(v120 + 8);
    do
      v102 = __ldxr(v101);
    while (__stxr(v102 + 1, v101));
  }
  v103 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v99, v100[2], *((int *)v100 + 2));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v117);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v103);
  v104 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v136, "setObject:forKeyedSubscript:", v104, CFSTR("KernelOffset"));

  objc_msgSend(v136, "setObject:forKeyedSubscript:", CFSTR("Int8"), CFSTR("KernelType"));
  v105 = (void *)MEMORY[0x1E0CB37E8];
  if (v135)
    v106 = 0;
  else
  objc_msgSend(v105, "numberWithUnsignedLong:", v106);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v136, "setObject:forKeyedSubscript:", v112, CFSTR("KernelIndex"));

  if (v138)
    v113 = (Espresso::ANECompilerEngine::ane_kernel *)(v138 + 544);
  else
    v113 = 0;
  v116[0] = (uint64_t)__p;
  v116[1] = v120;
  if (v120)
  {
    v114 = (unint64_t *)(v120 + 8);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
  }
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_s8((Espresso::ANECompilerEngine::final_anec_weights_t *)a6, v113, v116);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v116);
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&__p);
LABEL_175:
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
  {
    v17 = (void *)v128.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
LABEL_44:

}

void sub_191733E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,char a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53)
{
  void *v53;
  uint64_t v54;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);

  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(std::string const&)#1}::operator()(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  Espresso::ANECompilerEngine::final_anec_weights_t *v7;
  uint64_t v8;
  Espresso::ANECompilerEngine::ane_kernel *v9;
  unint64_t *v10;
  unint64_t v11;
  Espresso *v12;
  const char *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  Espresso::ANECompilerEngine::compiler::build_state_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  uint64_t weights_file_index;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _BYTE buf[22];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = **a1;
  if (v4)
    Espresso::quantized_weights_helper::dequantize_to_float16_2d(*(Espresso::quantized_weights_helper **)(v4 + 440), buf);
  else
    Espresso::quantized_weights_helper::dequantize_to_float16_4d(MEMORY[0x1B8], buf);
  v6 = *(_QWORD *)buf;
  v5 = *(std::__shared_weak_count **)&buf[8];
  v36 = *(_QWORD *)buf;
  v37 = *(std::__shared_weak_count **)&buf[8];
  v7 = (Espresso::ANECompilerEngine::final_anec_weights_t *)a1[1];
  v8 = **a1;
  if (v8)
    v9 = (Espresso::ANECompilerEngine::ane_kernel *)(v8 + 544);
  else
    v9 = 0;
  v34 = *(_QWORD *)buf;
  v35 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 20, v6, (uint64_t)v5);
  Espresso::ANECompilerEngine::final_anec_weights_t::track_anec_weights_f16(v7, v9, *(void **)(v6 + 16));
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  Espresso::espresso_os_log_subsystem(v12, v13);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v32 = a2;
    else
      v32 = (uint64_t *)*a2;
    v33 = *(int *)(v36 + 8);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v32;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v33;
    _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "[ANEC/handle_quantized_weights] Bloating (%s) W: %zu", buf, 0x16u);
  }

  v17 = (Espresso::ANECompilerEngine::compiler::build_state_t *)(*a1[2] + 128);
  if (v37)
  {
    v18 = (unint64_t *)&v37->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v17, *(const unsigned __int8 **)(v36 + 16), *(int *)(v36 + 8));
  if (v37)
  {
    v21 = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v20, v36, v37, v34, v35);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", v23, CFSTR("KernelOffset"));

  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("KernelType"));
  v24 = (void *)MEMORY[0x1E0CB37E8];
  if (*(_BYTE *)a1[4])
    weights_file_index = 0;
  else
  objc_msgSend(v24, "numberWithUnsignedLong:", weights_file_index);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)*a1[3], "setObject:forKeyedSubscript:", v26, CFSTR("KernelIndex"));

  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(**a1 + 440) + 80, (__int128 *)buf);
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v28 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_191734464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB16B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB16B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::operator()(uint64_t a1, const unsigned __int8 **a2, size_t *a3)
{
  unsigned int v4;

  v4 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(*(_QWORD *)(a1 + 8) + 128), *a2, *a3);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 552))
  return v4;
}

uint64_t std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine24handle_quantized_weightsIPNS0_20inner_product_kernelEEEvT_PNS0_8compilerENSt3__110shared_ptrINS_3netEEENS8_INS_24quantized_weights_helperEEEP19NSMutableDictionaryRNS0_20final_anec_weights_tEEUlPKhmE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1},std::allocator<void Espresso::ANECompilerEngine::handle_quantized_weights<Espresso::ANECompilerEngine::inner_product_kernel *>(Espresso::ANECompilerEngine::inner_product_kernel *,Espresso::ANECompilerEngine::compiler *,std::shared_ptr<Espresso::net>,std::shared_ptr<Espresso::quantized_weights_helper>,NSMutableDictionary *,Espresso::ANECompilerEngine::final_anec_weights_t &)::{lambda(unsigned char const*,unsigned long)#1}>,std::pair<int,unsigned long> ()(unsigned char const*,unsigned long)>::target_type()
{
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,2>(_QWORD *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, char a9)
{
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::runtime_error *exception;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *a6;
  v17 = a6[1];
  v42 = *a6;
  v43 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *a1 = 0;
  a1[1] = 0;
  if (!*(_BYTE *)(a2 + 73))
  {
LABEL_11:
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,2>,std::allocator<Espresso::blob<unsigned char,2>>,int &,int &,int &,int &,void>(&v49, a7, a8, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v49);
    size = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
    if (v49.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (*(int *)(*a1 + 12) * (uint64_t)*(int *)(*a1 + 8) != a5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v46, a5);
      v34 = std::string::insert(&v46, 0, "Unexpected size s=");
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      v36 = std::string::append(&v47, "/blob=");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v45, *(int *)(*a1 + 12) * (uint64_t)*(int *)(*a1 + 8));
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = &v45;
      else
        v38 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      else
        v39 = v45.__r_.__value_.__l.__size_;
      v40 = std::string::append(&v48, (const std::string::value_type *)v38, v39);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v49);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    memcpy(*(void **)(*a1 + 16), a4, a5);
    v23 = (std::__shared_weak_count *)v43;
    if (!v43)
      goto LABEL_30;
LABEL_26:
    v29 = (unint64_t *)&v23->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    goto LABEL_30;
  }
  if (!v16 || (a9 & 1) != 0)
  {
    if (!v16)
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(a2 + 123))
  {
    goto LABEL_11;
  }
  v24 = (char *)operator new(0x58uLL);
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = &off_1E2DBED88;
  *((_QWORD *)v24 + 3) = &off_1E2DA1270;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_OWORD *)(v24 + 72) = 0u;
  *((_DWORD *)v24 + 8) = a7;
  *((_DWORD *)v24 + 9) = a8;
  *((_QWORD *)v24 + 5) = a4;
  v24[48] = 0;
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 24);
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v49);
  v25 = (std::__shared_weak_count *)v49.__r_.__value_.__l.__size_;
  if (v49.__r_.__value_.__l.__size_)
  {
    v26 = (unint64_t *)(v49.__r_.__value_.__l.__size_ + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (_QWORD *)(*a1 + 32);
  v23 = (std::__shared_weak_count *)v43;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v28, v42, v43);
  if (v43)
    goto LABEL_26;
LABEL_30:
  if (a3)
  {
    v31 = (unint64_t *)&a3->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_1917348F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;

  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (a18 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v39 & 1) == 0)
    {
LABEL_14:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v38);
  goto LABEL_14;
}

void Espresso::ANECompilerEngine::mix_inner_product_kernel::~mix_inner_product_kernel(Espresso::ANECompilerEngine::mix_inner_product_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D796B8;
  v2 = (void **)((char *)this + 544);
  *((_QWORD *)this + 68) = &unk_1E2D798E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 824);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 808);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 760);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D796B8;
  v2 = (void **)((char *)this + 544);
  *((_QWORD *)this + 68) = &unk_1E2D798E8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 824);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 808);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 792);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 776);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 760);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_inner_product_kernel::compile(Espresso::ANECompilerEngine::mix_inner_product_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  const Espresso::net *v8;
  std::__shared_weak_count *v9;
  char *v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  Espresso::ANECompilerEngine *v19;
  NSString *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  const Espresso::net *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  _QWORD *v31;
  __CFString *v32;
  std::vector<std::string>::pointer begin;
  size_t size;
  __int128 *v35;
  std::vector<std::string>::pointer v36;
  int v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  char v42;
  __CFString *v43;
  size_t v44;
  std::string *v45;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v46;
  size_t v47;
  std::string::size_type v48;
  int64_t v49;
  std::string *v50;
  char *v51;
  std::string *v52;
  char *v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __CFString *v76;
  size_t v77;
  _BYTE *v78;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v79;
  size_t v80;
  size_t v81;
  uint64_t v82;
  _BYTE *v83;
  char *v84;
  void *v85;
  char *v86;
  std::string *v87;
  std::string::size_type v88;
  size_t v89;
  _BYTE *v90;
  std::string *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  std::string::size_type v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  char *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  void *v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  __CFString *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  void *v140;
  std::string *v141;
  std::string *v142;
  std::string::size_type v143;
  size_t v144;
  std::string *v145;
  _BYTE *v146;
  std::string::size_type v147;
  std::string::size_type v148;
  unint64_t *v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  std::string::size_type v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  char *v173;
  void *v174;
  std::vector<std::string>::pointer end;
  __int128 v176;
  std::string *v177;
  void *v178;
  __CFString *v179;
  __CFString *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  const char *v189;
  std::runtime_error *exception;
  void *v191;
  void *v192;
  id v193;
  void *v194;
  id obj;
  void *v196;
  __int128 v197;
  __int128 v198;
  std::string __str;
  _BYTE v200[24];
  std::vector<std::string> v201;
  void *v202;
  char v203;
  id v204;
  __CFString *v205;
  id v206;
  int v207;
  void *v208;
  std::__shared_weak_count *v209;
  void *v210;
  std::__shared_weak_count *v211;
  _QWORD v212[4];
  int v213;
  int v214;
  int v215;
  int v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  __int16 v233;
  int v234;
  char v235;
  const Espresso::net *v236;
  std::__shared_weak_count *v237;
  std::string v238;
  char v239[40];
  void *v240;
  void *v241;
  const Espresso::net *v242;
  std::__shared_weak_count *v243;
  char v244[12];
  int v245;
  char v246[40];
  void *__p;
  void *v248;
  const Espresso::net *v249;
  std::__shared_weak_count *v250;
  char v251[12];
  int v252;
  int v253;
  int v254;
  void *v255;
  std::__shared_weak_count *v256;
  void *lpsrc;
  std::__shared_weak_count *v258;
  const Espresso::net *v259;
  std::__shared_weak_count *v260;
  std::string *v261;
  std::string v262;
  uint64_t v263;
  _BYTE v264[32];
  std::__shared_weak_count *v265;
  std::vector<std::string> v266;
  void *v267;
  char v268;
  id v269;
  __CFString *v270;
  id v271;
  _BYTE v272[15];
  char v273;
  std::string v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;
  std::string *v278;
  std::string *v279;
  unint64_t v280;
  void *v281;
  char v282;
  id v283;
  __CFString *v284;
  id v285;
  int v286;
  uint64_t v287;

  v287 = *MEMORY[0x1E0C80C00];
  v260 = 0;
  v259 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v260 = v7) == 0)
    || (v8 = (const Espresso::net *)*((_QWORD *)a2 + 1), (v259 = v8) == 0))
  {
    v189 = "Inconsistent state: null network";
    goto LABEL_352;
  }
  if (!*((_QWORD *)v8 + 72))
  {
    v189 = "Inconsistent state: blob_storage";
LABEL_352:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v189);
  }
  v9 = v7;
  __str.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)__str.__r_.__value_.__l.__data_, (__int128 **)&__str);
  v12 = (void *)*((_QWORD *)v10 + 5);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  lpsrc = v12;
  v258 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8 + 136, (unsigned __int8 *)a3, (__int128 **)&__str);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
  v255 = (void *)*((_QWORD *)v15 + 5);
  v256 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  v19 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v19, v20))
  {
    Espresso::ANECompilerEngine::inner_product_kernel::compile(this, a2, a3);
    goto LABEL_334;
  }
  if (*((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6) != 24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent number of blobs");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v249 = v8;
  v250 = v9;
  v21 = (unint64_t *)&v9->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  Espresso::abstract_blob_container::shape(v246, (uint64_t)v12);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v251, v8, (const Espresso::layer_shape *)v246, 1);
  if (__p)
  {
    v248 = __p;
    operator delete(__p);
  }
  do
    v23 = __ldaxr(v21);
  while (__stlxr(v23 - 1, v21));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  v24 = v259;
  v25 = v260;
  v242 = v259;
  v243 = v260;
  if (v260)
  {
    v26 = (unint64_t *)&v260->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  Espresso::abstract_blob_container::shape(v239, (uint64_t)v255);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v244, v24, (const Espresso::layer_shape *)v239, 1);
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
  if (v25)
  {
    v28 = (unint64_t *)&v25->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v238, "");
  if (v254 > 3 || (v31 = (_QWORD *)*((_QWORD *)this + 55)) != 0 && *v31 && (v31[4] || v31[6] || v31[8] || v31[10]))
  {
    if (*((_BYTE *)this + 840))
      v30 = v252 * v253 * *((_DWORD *)this + 77);
    else
      v30 = *((_DWORD *)this + 77);
    v54 = *((_DWORD *)this + 76);
    v55 = *((_DWORD *)this + 78);
    v56 = *(_QWORD *)((char *)this + 316);
    v57 = *((_DWORD *)this + 89);
    v58 = *((_QWORD *)this + 45);
    v236 = v259;
    v237 = v260;
    if (v260)
    {
      v59 = (unint64_t *)&v260->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    memset(v212, 0, 24);
    v212[3] = v56;
    v213 = v55;
    v214 = 0;
    v215 = v54;
    v216 = v30;
    v217 = 0x100000001;
    v218 = 0;
    v219 = v57;
    v220 = v58;
    v221 = 0;
    v222 = 0;
    v224 = 0x1000100010001;
    v226 = 0;
    v225 = 0;
    v227 = 0x100000001;
    v228 = 0;
    v223 = 0;
    v229 = 0x10000;
    v232 = 0;
    v230 = 0;
    v231 = 0;
    v233 = 1;
    v234 = 0;
    v235 = 0;
    if (lpsrc
    {
      v210 = v61;
      v211 = v258;
      if (v258)
      {
        v62 = (unint64_t *)&v258->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
    }
    else
    {
      v210 = 0;
      v211 = 0;
    }
    if (v255
    {
      v65 = v256;
      v208 = v64;
      v209 = v256;
      if (v256)
      {
        v66 = (unint64_t *)&v256->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
    }
    else
    {
      v65 = 0;
      v208 = 0;
      v209 = 0;
    }
    Espresso::ANECompilerEngine::add_conv<Espresso::ANECompilerEngine::mix_inner_product_kernel *>((uint64_t)this, a2, &v236, (uint64_t)v212, (id *)a3, (uint64_t *)&v210, (uint64_t *)&v208);
    if (v65)
    {
      v68 = (unint64_t *)&v65->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    v70 = v211;
    if (v211)
    {
      v71 = (unint64_t *)&v211->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = v237;
    if (v237)
    {
      v74 = (unint64_t *)&v237->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    goto LABEL_331;
  }
  if ((v254 & 0xFFFFFFFE) == 2)
  {
    obj = (id)objc_opt_new();
    v196 = (void *)objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
    v32 = v205;
    v205 = CFSTR("Transpose");

    v192 = (void *)objc_opt_new();
    objc_msgSend(v192, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("TransposeSourceDimension"));
    objc_msgSend(v192, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("TransposeDestinationDimension"));
    objc_msgSend(v196, "addObject:", v192);
    v191 = (void *)objc_opt_new();
    objc_msgSend(v191, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("TransposeSourceDimension"));
    objc_msgSend(v191, "setObject:forKeyedSubscript:", CFSTR("Batch"), CFSTR("TransposeDestinationDimension"));
    objc_msgSend(v196, "addObject:", v191);
    v194 = (void *)objc_opt_new();
    objc_msgSend(v194, "setObject:forKeyedSubscript:", CFSTR("Batch"), CFSTR("TransposeSourceDimension"));
    objc_msgSend(v194, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("TransposeDestinationDimension"));
    objc_msgSend(v196, "addObject:", v194);
    objc_msgSend(obj, "setObject:forKeyedSubscript:", v196, CFSTR("TransposeDimensions"));
    objc_storeStrong(&v206, obj);
    begin = v201.__begin_;
    if ((v201.__begin_->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v201.__begin_->__r_.__value_.__r.__words[2]);
    else
      size = v201.__begin_->__r_.__value_.__l.__size_;
    v35 = &v275;
    std::string::basic_string[abi:ne180100]((uint64_t)&v275, size + 17);
    if (SBYTE7(v276) < 0)
      v35 = (__int128 *)v275;
    if (size)
    {
      if ((begin->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = begin;
      else
        v36 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
      memmove(v35, v36, size);
    }
    strcpy((char *)v35 + size, "_input_transpose_");
    v37 = *((char *)a3 + 23);
    if (v37 >= 0)
      v38 = (const std::string::value_type *)a3;
    else
      v38 = *(const std::string::value_type **)a3;
    if (v37 >= 0)
      v39 = *((unsigned __int8 *)a3 + 23);
    else
      v39 = *((_QWORD *)a3 + 1);
    v40 = std::string::append((std::string *)&v275, v38, v39);
    v41 = v40->__r_.__value_.__r.__words[0];
    *(_QWORD *)v264 = v40->__r_.__value_.__l.__size_;
    *(_QWORD *)&v264[7] = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[1] + 7);
    v42 = HIBYTE(v40->__r_.__value_.__r.__words[2]);
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = v41;
    __str.__r_.__value_.__l.__size_ = *(_QWORD *)v264;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v264[7];
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = v42;
    if (SBYTE7(v276) < 0)
      operator delete((void *)v275);
    std::string::operator=(&v238, &__str);
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
    v193 = (id)objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v275, (id *)a3);
    v43 = v284;
    v284 = CFSTR("MatrixMultiplication");

    v286 = v245;
    if (*((char *)a3 + 23) >= 0)
      v44 = *((unsigned __int8 *)a3 + 23);
    else
      v44 = *((_QWORD *)a3 + 1);
    v45 = &v274;
    std::string::basic_string[abi:ne180100]((uint64_t)&v274, v44 + 3);
    if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v45 = (std::string *)v274.__r_.__value_.__r.__words[0];
    if (v44)
    {
      if (*((char *)a3 + 23) >= 0)
        v46 = a3;
      else
        v46 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
      memmove(v45, v46, v44);
    }
    *(_DWORD *)((char *)&v45->__r_.__value_.__l.__data_ + v44) = 7823199;
    v47 = HIBYTE(v274.__r_.__value_.__r.__words[2]);
    LOBYTE(v44) = *((_BYTE *)&v274.__r_.__value_.__s + 23);
    v48 = v274.__r_.__value_.__l.__size_;
    if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v274.__r_.__value_.__r.__words[2]);
    else
      v49 = v274.__r_.__value_.__l.__size_;
    if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &v274;
    else
      v50 = (std::string *)v274.__r_.__value_.__r.__words[0];
    if (v49 >= 8)
    {
      v51 = (char *)v50 + v49;
      v52 = v50;
      do
      {
        v53 = (char *)memchr(v52, 95, v49 - 7);
        if (!v53)
          break;
        if (*(_QWORD *)v53 == 0x5F6C6C6F726E755FLL)
        {
          if (v53 != v51 && v53 - (char *)v50 != -1)
          {
            std::string::basic_string((std::string *)v264, &v274, 0, v53 - (char *)v50, (std::allocator<char> *)&v262);
            v87 = std::string::append((std::string *)v264, "__w");
            v88 = v87->__r_.__value_.__r.__words[0];
            *(_QWORD *)v272 = v87->__r_.__value_.__l.__size_;
            *(_QWORD *)&v272[7] = *(std::string::size_type *)((char *)&v87->__r_.__value_.__r.__words[1] + 7);
            LODWORD(v44) = HIBYTE(v87->__r_.__value_.__r.__words[2]);
            v87->__r_.__value_.__l.__size_ = 0;
            v87->__r_.__value_.__r.__words[2] = 0;
            v87->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v274.__r_.__value_.__l.__data_);
            v274.__r_.__value_.__r.__words[0] = v88;
            v274.__r_.__value_.__l.__size_ = *(_QWORD *)v272;
            *(std::string::size_type *)((char *)&v274.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v272[7];
            *((_BYTE *)&v274.__r_.__value_.__s + 23) = v44;
            if ((v264[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v264);
              LODWORD(v44) = HIBYTE(v274.__r_.__value_.__r.__words[2]);
            }
            v48 = v274.__r_.__value_.__l.__size_;
            v47 = v44;
          }
          break;
        }
        v52 = (std::string *)(v53 + 1);
        v49 = v51 - (char *)v52;
      }
      while (v51 - (char *)v52 >= 8);
    }
    if ((v44 & 0x80u) == 0)
      v89 = v47;
    else
      v89 = v48;
    v90 = v272;
    std::string::basic_string[abi:ne180100]((uint64_t)v272, v89 + 3);
    if (v273 < 0)
      v90 = *(_BYTE **)v272;
    if (v89)
    {
      if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v91 = &v274;
      else
        v91 = (std::string *)v274.__r_.__value_.__r.__words[0];
      memmove(v90, v91, v89);
    }
    *(_DWORD *)&v90[v89] = 6446943;
    if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 35), &v274))
    {
      v265 = 0;
      memset(v264, 0, sizeof(v264));
      (*(void (**)(std::string *__return_ptr, Espresso::ANECompilerEngine::mix_inner_product_kernel *))(*(_QWORD *)this + 416))(&v262, this);
      if (!v262.__r_.__value_.__r.__words[0])
      {
        v92 = *((_QWORD *)this + 97);
        v93 = *((_QWORD *)this + 98);
        *(_QWORD *)&v198 = v92;
        *((_QWORD *)&v198 + 1) = v93;
        if (v93)
        {
          v94 = (unint64_t *)(v93 + 8);
          do
            v95 = __ldxr(v94);
          while (__stxr(v95 + 1, v94));
        }
        if (!v92)
          Espresso::throw_exception_selector<Espresso::generic_error>("InnerProduct kernel has no weights");
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v197, (int *)(v92 + 8));
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v262, &v197);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v197);
        Espresso::CPUFP16Engine::f16_to_fp32(*(Espresso::CPUFP16Engine **)(v198 + 16), *(unsigned __int16 **)(v262.__r_.__value_.__r.__words[0] + 16), *(int *)(v198 + 12) * (uint64_t)*(int *)(v198 + 8));
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v198);
      }
      if (*((_DWORD *)this + 78))
        v96 = *((_DWORD *)this + 77) + 1;
      else
        v96 = *((_DWORD *)this + 77);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v198, *((_DWORD *)this + 76), 1, v96, 1);
      if (*((_QWORD *)this + 78))
      {
        v97 = *((_QWORD *)this + 79);
        *(_QWORD *)&v197 = *((_QWORD *)this + 78);
        *((_QWORD *)&v197 + 1) = v97;
        if (v97)
        {
          v98 = (unint64_t *)(v97 + 8);
          do
            v99 = __ldxr(v98);
          while (__stxr(v99 + 1, v98));
        }
      }
      else
      {
        Espresso::blob<float,1>::make(&v197, *((_DWORD *)this + 76));
      }
      std::string::operator=((std::string *)v264, &v274);
      v100 = v198;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v264[24], v198, *((uint64_t *)&v198 + 1));
      v101 = *((_DWORD *)this + 77);
      if (*((_DWORD *)this + 78))
        v102 = v101 + 1;
      else
        v102 = *((_DWORD *)this + 77);
      if (v102)
      {
        v103 = 0;
        v104 = 0;
        v105 = v262.__r_.__value_.__r.__words[0];
        v106 = v197;
        v107 = *((unsigned int *)this + 76);
        do
        {
          if (v104 == v101)
          {
            if ((_DWORD)v107)
            {
              v108 = *(int **)(v106 + 16);
              v109 = *(_QWORD *)(v100 + 24);
              v110 = v107 * v101;
              v111 = v107;
              do
              {
                v112 = *v108++;
                *(_DWORD *)(v109 + 4 * v110++) = v112;
                --v111;
              }
              while (v111);
            }
          }
          else if ((_DWORD)v107)
          {
            v113 = *(_QWORD *)(v105 + 16);
            v114 = *(_QWORD *)(v100 + 24);
            v115 = v104;
            v116 = v103;
            v117 = v107;
            do
            {
              *(_DWORD *)(v114 + 4 * v116++) = *(_DWORD *)(v113 + 4 * v115);
              v115 += v101;
              --v117;
            }
            while (v117);
          }
          ++v104;
          v103 += v107;
        }
        while (v104 != v102);
      }
      v261 = &v274;
      v118 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &v274, (__int128 **)&v261);
      std::string::operator=((std::string *)(v118 + 56), (const std::string *)v264);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v118 + 10, *(uint64_t *)&v264[24], (uint64_t)v265);
      v119 = (std::__shared_weak_count *)*((_QWORD *)&v197 + 1);
      if (*((_QWORD *)&v197 + 1))
      {
        v120 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      v122 = (std::__shared_weak_count *)*((_QWORD *)&v198 + 1);
      if (*((_QWORD *)&v198 + 1))
      {
        v123 = (unint64_t *)(*((_QWORD *)&v198 + 1) + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v125 = (std::__shared_weak_count *)v262.__r_.__value_.__l.__size_;
      if (v262.__r_.__value_.__l.__size_)
      {
        v126 = (unint64_t *)(v262.__r_.__value_.__l.__size_ + 8);
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
      }
      v128 = v265;
      if (v265)
      {
        v129 = (unint64_t *)&v265->__shared_owners_;
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      if ((v264[23] & 0x80000000) != 0)
        operator delete(*(void **)v264);
    }
    if (*((_DWORD *)this + 78))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 15360);
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v193, "setObject:forKeyedSubscript:", v131, CFSTR("Bias"));

    }
    std::string::operator=(v278, &v238);
    v132 = v279;
    if ((unint64_t)v279 >= v280)
    {
      v134 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v278, (uint64_t)&v274);
    }
    else
    {
      if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v279, v274.__r_.__value_.__l.__data_, v274.__r_.__value_.__l.__size_);
      }
      else
      {
        v133 = *(_OWORD *)&v274.__r_.__value_.__l.__data_;
        v279->__r_.__value_.__r.__words[2] = v274.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v132->__r_.__value_.__l.__data_ = v133;
      }
      v134 = v132 + 1;
    }
    v279 = v134;
    objc_storeStrong(&v285, v193);
    std::string::append((std::string *)&v275, "__matmul");
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v275);
    std::string::operator=(&v238, (const std::string *)&v275);
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)v264, (id *)a3);
    v135 = v270;
    v270 = CFSTR("Transpose");

    if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v262, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
    else
      v262 = v238;
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v266, &v262, (__int128 *)&v263, 1uLL);
    if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v262.__r_.__value_.__l.__data_);
    v136 = (void *)objc_opt_new();
    v137 = (void *)objc_opt_new();
    v138 = (void *)objc_opt_new();
    objc_msgSend(v137, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("TransposeSourceDimension"));
    objc_msgSend(v137, "setObject:forKeyedSubscript:", CFSTR("Batch"), CFSTR("TransposeDestinationDimension"));
    objc_msgSend(v136, "addObject:", v137);
    v139 = (void *)objc_opt_new();
    objc_msgSend(v139, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("TransposeSourceDimension"));
    objc_msgSend(v139, "setObject:forKeyedSubscript:", CFSTR("Height"), CFSTR("TransposeDestinationDimension"));
    objc_msgSend(v136, "addObject:", v139);
    v140 = (void *)objc_opt_new();
    objc_msgSend(v140, "setObject:forKeyedSubscript:", CFSTR("Batch"), CFSTR("TransposeSourceDimension"));
    objc_msgSend(v140, "setObject:forKeyedSubscript:", CFSTR("Channel"), CFSTR("TransposeDestinationDimension"));
    objc_msgSend(v136, "addObject:", v140);
    objc_msgSend(v138, "setObject:forKeyedSubscript:", v136, CFSTR("TransposeDimensions"));
    objc_storeStrong(&v271, v138);
    if (*((_DWORD *)this + 79) || *((_DWORD *)this + 80))
    {
      std::string::append((std::string *)v264, "_matmul_transpose");
      std::string::operator=(&v238, (const std::string *)v264);
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v264);

    if (v268 < 0)
      operator delete(v267);
    v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&v266;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
    v262.__r_.__value_.__r.__words[0] = (std::string::size_type)&v264[24];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v262);
    if ((v264[23] & 0x80000000) != 0)
      operator delete(*(void **)v264);
    if (v273 < 0)
      operator delete(*(void **)v272);
    if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v274.__r_.__value_.__l.__data_);

    if (v282 < 0)
      operator delete(v281);
    *(_QWORD *)v264 = &v278;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v264);
    *(_QWORD *)v264 = (char *)&v276 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v264);
    if (SBYTE7(v276) < 0)
      operator delete((void *)v275);

    if (v203 < 0)
      operator delete(v202);
    *(_QWORD *)&v275 = &v201;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
    *(_QWORD *)&v275 = v200;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);

  }
  else
  {
    if (v254 != 1)
      goto LABEL_309;
    obj = (id)objc_opt_new();
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
    v76 = v205;
    v205 = CFSTR("MatrixMultiplication");

    v207 = v245;
    if (*((char *)a3 + 23) >= 0)
      v77 = *((unsigned __int8 *)a3 + 23);
    else
      v77 = *((_QWORD *)a3 + 1);
    v78 = v264;
    std::string::basic_string[abi:ne180100]((uint64_t)v264, v77 + 3);
    if (v264[23] < 0)
      v78 = *(_BYTE **)v264;
    if (v77)
    {
      if (*((char *)a3 + 23) >= 0)
        v79 = a3;
      else
        v79 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
      memmove(v78, v79, v77);
    }
    *(_DWORD *)&v78[v77] = 7823199;
    v80 = v264[23];
    LOBYTE(v77) = v264[23];
    v81 = *(_QWORD *)&v264[8];
    if (v264[23] >= 0)
      v82 = v264[23];
    else
      v82 = *(_QWORD *)&v264[8];
    if (v264[23] >= 0)
      v83 = v264;
    else
      v83 = *(_BYTE **)v264;
    if (v82 >= 8)
    {
      v84 = &v83[v82];
      v85 = v83;
      do
      {
        v86 = (char *)memchr(v85, 95, v82 - 7);
        if (!v86)
          break;
        if (*(_QWORD *)v86 == 0x5F6C6C6F726E755FLL)
        {
          if (v86 != v84 && v86 - v83 != -1)
          {
            v141 = std::string::basic_string((std::string *)&v275, (const std::string *)v264, 0, v86 - v83, (std::allocator<char> *)v272);
            v142 = std::string::append(v141, "__w");
            v143 = v142->__r_.__value_.__r.__words[0];
            v274.__r_.__value_.__r.__words[0] = v142->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v274.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v142->__r_.__value_.__r.__words[1] + 7);
            LODWORD(v77) = HIBYTE(v142->__r_.__value_.__r.__words[2]);
            v142->__r_.__value_.__l.__size_ = 0;
            v142->__r_.__value_.__r.__words[2] = 0;
            v142->__r_.__value_.__r.__words[0] = 0;
            if ((v264[23] & 0x80000000) != 0)
              operator delete(*(void **)v264);
            *(_QWORD *)v264 = v143;
            *(_QWORD *)&v264[8] = v274.__r_.__value_.__r.__words[0];
            *(_QWORD *)&v264[15] = *(std::string::size_type *)((char *)v274.__r_.__value_.__r.__words + 7);
            v264[23] = v77;
            if (SBYTE7(v276) < 0)
            {
              operator delete((void *)v275);
              LODWORD(v77) = v264[23];
            }
            v81 = *(_QWORD *)&v264[8];
            v80 = v77;
          }
          break;
        }
        v85 = v86 + 1;
        v82 = v84 - (_BYTE *)v85;
      }
      while (v84 - (_BYTE *)v85 >= 8);
    }
    if ((v77 & 0x80u) == 0)
      v144 = v80;
    else
      v144 = v81;
    v145 = &v274;
    std::string::basic_string[abi:ne180100]((uint64_t)&v274, v144 + 3);
    if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v145 = (std::string *)v274.__r_.__value_.__r.__words[0];
    if (v144)
    {
      if (v264[23] >= 0)
        v146 = v264;
      else
        v146 = *(_BYTE **)v264;
      memmove(v145, v146, v144);
    }
    *(_DWORD *)((char *)&v145->__r_.__value_.__l.__data_ + v144) = 6446943;
    if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 35), v264))
    {
      v277 = 0;
      v275 = 0u;
      v276 = 0u;
      (*(void (**)(_BYTE *__return_ptr, Espresso::ANECompilerEngine::mix_inner_product_kernel *))(*(_QWORD *)this + 416))(v272, this);
      if (!*(_QWORD *)v272)
      {
        v147 = *((_QWORD *)this + 97);
        v148 = *((_QWORD *)this + 98);
        v262.__r_.__value_.__r.__words[0] = v147;
        v262.__r_.__value_.__l.__size_ = v148;
        if (v148)
        {
          v149 = (unint64_t *)(v148 + 8);
          do
            v150 = __ldxr(v149);
          while (__stxr(v150 + 1, v149));
        }
        if (!v147)
          Espresso::throw_exception_selector<Espresso::generic_error>("InnerProduct kernel has no weights");
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v198, (int *)(v147 + 8));
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v272, &v198);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v198);
        Espresso::CPUFP16Engine::f16_to_fp32(*(Espresso::CPUFP16Engine **)(v262.__r_.__value_.__r.__words[0] + 16), *(unsigned __int16 **)(*(_QWORD *)v272 + 16), *(int *)(v262.__r_.__value_.__r.__words[0] + 12) * (uint64_t)*(int *)(v262.__r_.__value_.__r.__words[0] + 8));
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v262);
      }
      if (*((_DWORD *)this + 78))
        v151 = *((_DWORD *)this + 77) + 1;
      else
        v151 = *((_DWORD *)this + 77);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v262, *((_DWORD *)this + 76), 1, v151, 1);
      if (*((_QWORD *)this + 78))
      {
        v152 = *((_QWORD *)this + 79);
        *(_QWORD *)&v198 = *((_QWORD *)this + 78);
        *((_QWORD *)&v198 + 1) = v152;
        if (v152)
        {
          v153 = (unint64_t *)(v152 + 8);
          do
            v154 = __ldxr(v153);
          while (__stxr(v154 + 1, v153));
        }
      }
      else
      {
        Espresso::blob<float,1>::make(&v198, *((_DWORD *)this + 76));
      }
      std::string::operator=((std::string *)&v275, (const std::string *)v264);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)&v276 + 1, (uint64_t)v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
      v155 = *((_DWORD *)this + 77);
      if (*((_DWORD *)this + 78))
        v156 = v155 + 1;
      else
        v156 = *((_DWORD *)this + 77);
      if (v156)
      {
        v157 = 0;
        v158 = 0;
        v159 = *(_QWORD *)v272;
        v160 = v262.__r_.__value_.__r.__words[0];
        v161 = v198;
        v162 = *((unsigned int *)this + 76);
        do
        {
          if (v158 == v155)
          {
            if ((_DWORD)v162)
            {
              v163 = *(int **)(v161 + 16);
              v164 = *(_QWORD *)(v160 + 24);
              v165 = v162 * v155;
              v166 = v162;
              do
              {
                v167 = *v163++;
                *(_DWORD *)(v164 + 4 * v165++) = v167;
                --v166;
              }
              while (v166);
            }
          }
          else if ((_DWORD)v162)
          {
            v168 = *(_QWORD *)(v159 + 16);
            v169 = *(_QWORD *)(v160 + 24);
            v170 = v158;
            v171 = v157;
            v172 = v162;
            do
            {
              *(_DWORD *)(v169 + 4 * v171++) = *(_DWORD *)(v168 + 4 * v170);
              v170 += v155;
              --v172;
            }
            while (v172);
          }
          ++v158;
          v157 += v162;
        }
        while (v158 != v156);
      }
      *(_QWORD *)&v197 = v264;
      v173 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, v264, (__int128 **)&v197);
      std::string::operator=((std::string *)(v173 + 56), (const std::string *)&v275);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v173 + 10, *((uint64_t *)&v276 + 1), v277);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v198);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v262);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v272);
      std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&v275);
    }
    if (*((_DWORD *)this + 78))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 15360);
      v174 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v174, CFSTR("Bias"));

    }
    std::string::operator=(v201.__begin_, *((const std::string **)a3 + 6));
    end = v201.__end_;
    if (v201.__end_ >= v201.__end_cap_.__value_)
    {
      v177 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v201, (uint64_t)v264);
    }
    else
    {
      if ((v264[23] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v201.__end_, *(const std::string::value_type **)v264, *(std::string::size_type *)&v264[8]);
      }
      else
      {
        v176 = *(_OWORD *)v264;
        v201.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)&v264[16];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v176;
      }
      v177 = end + 1;
    }
    v201.__end_ = v177;
    objc_storeStrong(&v206, obj);
    if (*((_DWORD *)this + 79) || *((_DWORD *)this + 80))
    {
      std::string::append(&__str, "__matmul");
      std::string::operator=(&v238, &__str);
    }
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);
    if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v274.__r_.__value_.__l.__data_);
    if ((v264[23] & 0x80000000) != 0)
      operator delete(*(void **)v264);

    if (v203 < 0)
      operator delete(v202);
    *(_QWORD *)&v275 = &v201;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
    *(_QWORD *)&v275 = v200;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }

LABEL_309:
  if (*((_DWORD *)this + 79))
  {
    v178 = (void *)objc_opt_new();
    objc_msgSend(v178, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
    v179 = v205;
    v205 = CFSTR("Neuron");

    objc_storeStrong(&v206, v178);
    if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v275, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
    }
    else
    {
      v275 = *(_OWORD *)&v238.__r_.__value_.__l.__data_;
      *(_QWORD *)&v276 = *((_QWORD *)&v238.__r_.__value_.__l + 2);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v201, (std::string *)&v275, (__int128 *)((char *)&v276 + 8), 1uLL);
    if (SBYTE7(v276) < 0)
      operator delete((void *)v275);
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

    if (v203 < 0)
      operator delete(v202);
    *(_QWORD *)&v275 = &v201;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
    *(_QWORD *)&v275 = v200;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_330:

    goto LABEL_331;
  }
  if (*((_DWORD *)this + 80))
  {
    v178 = (void *)objc_opt_new();
    objc_msgSend(v178, "setObject:forKeyedSubscript:", CFSTR("Tanh"), CFSTR("Type"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str.__r_.__value_.__l.__data_, (id *)a3);
    v180 = v205;
    v205 = CFSTR("Neuron");

    objc_storeStrong(&v206, v178);
    if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v275, v238.__r_.__value_.__l.__data_, v238.__r_.__value_.__l.__size_);
    }
    else
    {
      v275 = *(_OWORD *)&v238.__r_.__value_.__l.__data_;
      *(_QWORD *)&v276 = *((_QWORD *)&v238.__r_.__value_.__l + 2);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v201, (std::string *)&v275, (__int128 *)((char *)&v276 + 8), 1uLL);
    if (SBYTE7(v276) < 0)
      operator delete((void *)v275);
    Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__str);

    if (v203 < 0)
      operator delete(v202);
    *(_QWORD *)&v275 = &v201;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
    *(_QWORD *)&v275 = v200;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v275);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_330;
  }
LABEL_331:
  if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v238.__r_.__value_.__l.__data_);
  v16 = v256;
LABEL_334:

  if (v16)
  {
    v181 = (unint64_t *)&v16->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v183 = v258;
  if (v258)
  {
    v184 = (unint64_t *)&v258->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  v186 = v260;
  if (v260)
  {
    v187 = (unint64_t *)&v260->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
}

