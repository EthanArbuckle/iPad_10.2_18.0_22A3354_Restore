void sub_191103244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,__int16 a49,uint64_t a50,char a51)
{
  void **v51;

  std::vector<std::string>::~vector[abi:ne180100](v51);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::identify_segments(uint64_t a1, _QWORD *a2)
{
  uint64_t (***v4)(_QWORD);
  unsigned int v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  _QWORD *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  char *v39;
  std::__shared_weak_count *v40;
  unsigned int v41;
  unsigned int *v42;

  v4 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 16) + 8);
  v5 = (**v4)(v4);
  v41 = v5;
  v6 = *(_QWORD *)(*a2 + 536);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = v5;
      if (v6 <= v5)
        v8 = v5 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & v5;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)(*a2 + 528) + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == v5)
            {
              if (*((_DWORD *)v10 + 4) == v5)
                goto LABEL_22;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_31;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_31;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == v5)
          {
            if (*((_DWORD *)v10 + 4) == v5)
            {
LABEL_22:
              v14 = (char *)v10[3];
              v15 = (std::__shared_weak_count *)v10[4];
              v39 = v14;
              v40 = v15;
              if (v15)
              {
                p_shared_owners = (unint64_t *)&v15->__shared_owners_;
                do
                  v17 = __ldxr(p_shared_owners);
                while (__stxr(v17 + 1, p_shared_owners));
              }
              if (v14)
                Espresso::throw_exception_selector<Espresso::generic_error>("Compiler is already built");
              if (v15)
              {
                v18 = (unint64_t *)&v15->__shared_owners_;
                do
                  v19 = __ldaxr(v18);
                while (__stlxr(v19 - 1, v18));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              break;
            }
          }
          else
          {
            if (v12 >= v6)
              v12 %= v6;
            if (v12 != v8)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_31:
  v20 = *a2;
  *(_BYTE *)(*a2 + 1408) = *(_BYTE *)(a1 + 1168);
  *(_BYTE *)(v20 + 1409) = *(_QWORD *)(a1 + 1224) != 0;
  v21 = operator new(0x80uLL);
  v21[1] = 0;
  v22 = v21 + 1;
  v21[2] = 0;
  *v21 = &unk_1E2DB5A18;
  v21[3] = &off_1E2D59690;
  *((_OWORD *)v21 + 2) = 0u;
  *((_OWORD *)v21 + 3) = 0u;
  *((_OWORD *)v21 + 4) = 0u;
  *((_OWORD *)v21 + 5) = 0u;
  v21[12] = 0;
  v21[13] = 0;
  v21[10] = v21 + 11;
  v21[14] = 0;
  v21[15] = 0;
  v39 = (char *)(v21 + 3);
  v40 = (std::__shared_weak_count *)v21;
  v42 = &v41;
  v23 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v20 + 528, &v41, (uint64_t)&std::piecewise_construct, &v42);
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  v25 = (std::__shared_weak_count *)v23[4];
  v23[3] = v21 + 3;
  v23[4] = v21;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (std::__shared_weak_count *)a2[1];
  v37 = *a2;
  v38 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  (*(void (**)(char *, uint64_t *))(*(_QWORD *)v39 + 88))(v39, &v37);
  v31 = v38;
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v40;
  if (v40)
  {
    v35 = (unint64_t *)&v40->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_191103A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191103A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_191103A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::AssertIsSingleSegmentAneNetwork(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  int v7;
  int v8;
  const void *v9;
  std::__shared_weak_count *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  char v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  void *v21;
  std::__shared_weak_count *v22;

  v19 = a3;
  if (!a4)
    return;
  v5 = a1;
  v18 = 0;
  if (a1 == a2)
LABEL_24:
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&,int &>("%s: network has %d ANE inference layers, expected 1", &v19, &v18);
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(const void **)(*(_QWORD *)v5 + 64);
    if (!v9
      || (v10 = *(std::__shared_weak_count **)(*(_QWORD *)v5 + 72),
    {
      ++v8;
      goto LABEL_5;
    }
    v21 = v11;
    v22 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v20 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v11 + 320))(v11);
    v14 = is_ane(&v20);
    v15 = v14;
    if (!v10)
      goto LABEL_15;
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((v15 & 1) != 0)
      {
LABEL_16:
        ++v18;
        goto LABEL_5;
      }
    }
    else
    {
LABEL_15:
      if (v14)
        goto LABEL_16;
    }
    ++v7;
LABEL_5:
    v5 += 16;
  }
  while (v5 != a2);
  if (v18 != 1)
    goto LABEL_24;
  if (v7 > 0 || a4 == 2 && v8 >= 1)
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("%s: network contains layers other than ANE inference", &v19);
}

void sub_191103C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191103C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *EspressoLight::espresso_aot_plan::get_bundle_dir(EspressoLight::espresso_aot_plan *this)
{
  std::string *v1;
  int64_t size;
  std::string *p_str;
  int64_t v4;
  char *v5;
  std::string *v6;
  char *v7;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int __c[2];
  char v14;
  std::string __str;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v1 = (std::string *)((char *)this + 1104);
  if (*((char *)this + 1127) < 0)
  {
    if (*((_QWORD *)this + 139))
      return v1;
  }
  else if (*((_BYTE *)this + 1127))
  {
    return v1;
  }
  EspressoLight::espresso_aot_plan::get_network(this, &v16);
  if (*(char *)(v16 + 471) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v16 + 448), *(_QWORD *)(v16 + 456));
  else
    __str = *(std::string *)(v16 + 448);
  v14 = 7;
  qmemcpy(__c, ".bundle", 7);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  HIBYTE(__c[1]) = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  v4 = size - 7;
  if (size >= 7)
  {
    v5 = (char *)p_str + size;
    v6 = p_str;
    do
    {
      v7 = (char *)memchr(v6, SLOBYTE(__c[0]), size - 6);
      if (!v7)
        break;
      if (*(_DWORD *)v7 == __c[0] && *(_DWORD *)(v7 + 3) == *(int *)((char *)__c + 3))
      {
        if (v7 != v5 && v7 - (char *)p_str != -1 && v7 - (char *)p_str == v4)
          goto LABEL_26;
        break;
      }
      v6 = (std::string *)(v7 + 1);
      size = v5 - (char *)v6;
    }
    while (v5 - (char *)v6 >= 7);
  }
  std::string::append(&__str, (const std::string::value_type *)__c, 7uLL);
LABEL_26:
  std::string::operator=(v1, &__str);
  if ((v14 & 0x80000000) == 0)
  {
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
LABEL_31:
    operator delete(__str.__r_.__value_.__l.__data_);
    v9 = v17;
    if (!v17)
      return v1;
    goto LABEL_32;
  }
  operator delete(*(void **)__c);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
LABEL_28:
  v9 = v17;
  if (!v17)
    return v1;
LABEL_32:
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v1;
}

void sub_191103E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191103E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_plan::get_abs_path_to_segment_assets_within_bundle(EspressoLight::espresso_aot_plan *a1@<X0>, const void **a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  std::string *bundle_dir;
  int v10;
  size_t size;
  unint64_t v12;
  const void **p_data;
  std::string *p_dst;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  std::string *p_p;
  std::string::size_type v19;
  std::string *v20;
  std::string __p;
  std::string __dst;

  bundle_dir = EspressoLight::espresso_aot_plan::get_bundle_dir(a1);
  v10 = SHIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
  if (v10 >= 0)
    size = HIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
  else
    size = bundle_dir->__r_.__value_.__l.__size_;
  v12 = size + 1;
  if (size + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  p_data = (const void **)&bundle_dir->__r_.__value_.__l.__data_;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    p_dst = (std::string *)operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 1;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 1;
    if (!size)
      goto LABEL_15;
  }
  if (v10 >= 0)
    v17 = p_data;
  else
    v17 = *p_data;
  memmove(p_dst, v17, size);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 47;
  EspressoLight::espresso_aot_plan::get_rel_path_to_segment_assets_within_bundle(a3, a2, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v19 = __p.__r_.__value_.__l.__size_;
  v20 = std::string::append(&__dst, (const std::string::value_type *)p_p, v19);
  *a5 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
}

void sub_191103FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_aot_plan::get_rel_path_to_segment_assets_within_bundle(unint64_t __val@<X2>, const void **a2@<X1>, int a3@<W3>, std::string *a4@<X8>)
{
  int v5;
  size_t v6;
  unint64_t v7;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  size_t v24;
  void *p_p;
  uint64_t v26;
  uint64_t v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  void *__p;
  size_t v32;
  int64_t v33;
  std::string v34;
  std::string __dst;
  std::string v36;
  std::string v37;

  v5 = *((char *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = v6 + 9;
  if (v6 + 9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v6 + 9;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6 + 9;
    if (!v6)
      goto LABEL_15;
  }
  if (v5 >= 0)
    v14 = a2;
  else
    v14 = *a2;
  memmove(p_dst, v14, v6);
LABEL_15:
  strcpy((char *)p_dst + v6, "/segment_");
  std::to_string(&v34, __val);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v34;
  else
    v15 = (std::string *)v34.__r_.__value_.__r.__words[0];
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  else
    size = v34.__r_.__value_.__l.__size_;
  v17 = std::string::append(&__dst, (const std::string::value_type *)v15, size);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = std::string::append(&v36, "__");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (a3 > 10007)
  {
    v21 = 0;
    if (a3 != 10008)
    {
      if (a3 != 50008)
        goto LABEL_56;
      v21 = 3;
    }
  }
  else
  {
    if (a3)
    {
      if (a3 == 10007)
      {
        v21 = 1;
        goto LABEL_29;
      }
LABEL_56:
      Espresso::throw_exception_selector<Espresso::generic_error>("Unrecognized platform");
    }
    v21 = 2;
  }
LABEL_29:
  v22 = (const char *)*((_QWORD *)&unk_1E2DD14F0 + 2 * v21 + 1);
  v23 = strlen(v22);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    p_p = operator new(v26 + 1);
    v32 = v24;
    v33 = v27 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_36;
  }
  HIBYTE(v33) = v23;
  p_p = &__p;
  if (v23)
LABEL_36:
    memmove(p_p, v22, v24);
  *((_BYTE *)p_p + v24) = 0;
  if (v33 >= 0)
    v28 = (const std::string::value_type *)&__p;
  else
    v28 = (const std::string::value_type *)__p;
  if (v33 >= 0)
    v29 = HIBYTE(v33);
  else
    v29 = v32;
  v30 = std::string::append(&v37, v28, v29);
  *a4 = *v30;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_45:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      goto LABEL_51;
    }
  }
  else if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v37.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_52;
  }
LABEL_51:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_47:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_53:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
LABEL_52:
  operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_53;
}

void sub_191104348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a40 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a40 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a21 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a27 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_aot_plan::compile_segment(EspressoLight::espresso_aot_plan *this@<X0>, int a2@<W1>, unsigned int a3@<W2>, _QWORD *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v6;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string::size_type size;
  std::string *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  size_t v28;
  const void *v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  size_t v33;
  const void *v34;
  size_t v35;
  int v36;
  _BOOL4 v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  _BOOL4 v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  size_t v51;
  unint64_t v52;
  void *v53;
  int v54;
  size_t v55;
  unint64_t v56;
  void *v57;
  int v58;
  size_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  int v65;
  size_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  std::string *v72;
  std::string *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  std::string *v77;
  uint64_t v78;
  uint64_t v79;
  std::string *v80;
  int v81;
  size_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  std::string *v87;
  int v88;
  const std::string::value_type *v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string::size_type v94;
  const char *v95;
  int v96;
  size_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  std::string *v102;
  char *v103;
  std::string *v104;
  std::string *v105;
  uint64_t v106;
  char *v107;
  std::string *v108;
  int v109;
  size_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  std::string *v115;
  int v116;
  size_t v117;
  unint64_t v118;
  char *p_from;
  uint64_t v120;
  uint64_t v121;
  std::string *v122;
  int v123;
  const std::string::value_type *v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::string *bundle_dir;
  std::__fs::filesystem::path __to;
  std::__fs::filesystem::path __from;
  void *__p[2];
  int64_t v136;
  std::string v137;
  std::string v138;
  std::string v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  int v142;
  std::__fs::filesystem::path v143;
  _QWORD v144[22];

  v144[20] = *MEMORY[0x1E0C80C00];
  v142 = a2;
  v6 = a4[67];
  if (!v6)
    goto LABEL_292;
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a3;
    if (v6 <= a3)
      v11 = a3 % v6;
  }
  else
  {
    v11 = ((_DWORD)v6 - 1) & a3;
  }
  v12 = *(uint64_t ***)(a4[66] + 8 * v11);
  if (!v12 || (v13 = *v12) == 0)
  {
LABEL_292:
    v140 = 0;
    v141 = 0;
    goto LABEL_293;
  }
  if (v10.u32[0] < 2uLL)
  {
    v14 = v6 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == a3)
      {
        if (*((_DWORD *)v13 + 4) == a3)
          goto LABEL_21;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_292;
      }
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_292;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 == a3)
      break;
    if (v15 >= v6)
      v15 %= v6;
    if (v15 != v11)
      goto LABEL_292;
LABEL_11:
    v13 = (uint64_t *)*v13;
    if (!v13)
      goto LABEL_292;
  }
  if (*((_DWORD *)v13 + 4) != a3)
    goto LABEL_11;
LABEL_21:
  v17 = v13[3];
  v18 = (std::__shared_weak_count *)v13[4];
  v140 = v17;
  v141 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  if (!v17)
LABEL_293:
    Espresso::throw_exception_selector<Espresso::generic_error>("Compiler not found");
  bundle_dir = EspressoLight::espresso_aot_plan::get_bundle_dir(this);
  *((_BYTE *)&v143.__pn_.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v143, "main");
  EspressoLight::espresso_aot_plan::get_rel_path_to_segment_assets_within_bundle(a5, (const void **)&v143.__pn_.__r_.__value_.__l.__data_, v142, &v139);
  *((_BYTE *)&v143.__pn_.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v143, "main");
  EspressoLight::espresso_aot_plan::get_abs_path_to_segment_assets_within_bundle(this, (const void **)&v143.__pn_.__r_.__value_.__l.__data_, a5, v142, &v138);
  memset(&v143, 0, sizeof(v143));
  size = HIBYTE(v138.__r_.__value_.__r.__words[2]);
  if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v138;
  else
    v22 = (std::string *)v138.__r_.__value_.__r.__words[0];
  if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v138.__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&v143.__pn_, v22, (std::string *)((char *)v22 + size));
  std::__fs::filesystem::__create_directories(&v143, 0);
  if (SHIBYTE(v143.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v143.__pn_.__r_.__value_.__l.__data_);
  if (!is_ane(&v142))
  {
    if (!is_gpu(&v142))
    {
      if (is_cpu(&v142))
      {
        EspressoLight::espresso_aot_plan::compile_cpu_segment((std::string **)this, (uint64_t)a4, (const void **)&v139.__r_.__value_.__l.__data_, (void **)a6);
        goto LABEL_280;
      }
      v95 = "Unknown platform";
LABEL_299:
      Espresso::throw_exception_selector<Espresso::generic_error>(v95);
    }
    v50 = SHIBYTE(v139.__r_.__value_.__r.__words[2]);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    else
      v51 = v139.__r_.__value_.__l.__size_;
    v52 = v51 + 10;
    if (v51 + 10 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v52 >= 0x17)
    {
      v62 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v62 = v52 | 7;
      v63 = v62 + 1;
      v53 = operator new(v62 + 1);
      *(_QWORD *)(a6 + 8) = v52;
      *(_QWORD *)(a6 + 16) = v63 | 0x8000000000000000;
      *(_QWORD *)a6 = v53;
    }
    else
    {
      *(_QWORD *)(a6 + 8) = 0;
      *(_QWORD *)(a6 + 16) = 0;
      *(_QWORD *)a6 = 0;
      v53 = (void *)a6;
      *(_BYTE *)(a6 + 23) = v52;
      if (!v51)
        goto LABEL_124;
    }
    if (v50 >= 0)
      v64 = &v139;
    else
      v64 = (std::string *)v139.__r_.__value_.__r.__words[0];
    memmove(v53, v64, v51);
LABEL_124:
    strcpy((char *)v53 + v51, "/model.mil");
    v65 = SHIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
    if (v65 >= 0)
      v66 = HIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
    else
      v66 = bundle_dir->__r_.__value_.__l.__size_;
    v67 = v66 + 1;
    if (v66 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v67 >= 0x17)
    {
      v69 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v67 | 7) != 0x17)
        v69 = v67 | 7;
      v70 = v69 + 1;
      v68 = (char *)operator new(v69 + 1);
      v137.__r_.__value_.__l.__size_ = v66 + 1;
      v137.__r_.__value_.__r.__words[2] = v70 | 0x8000000000000000;
      v137.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
    }
    else
    {
      memset(&v137, 0, sizeof(v137));
      v68 = (char *)&v137;
      *((_BYTE *)&v137.__r_.__value_.__s + 23) = v66 + 1;
      if (!v66)
      {
LABEL_138:
        *(_WORD *)&v68[v66] = 47;
        if (v50 >= 0)
          v72 = &v139;
        else
          v72 = (std::string *)v139.__r_.__value_.__r.__words[0];
        v73 = std::string::append(&v137, (const std::string::value_type *)v72, v51);
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v143.__pn_.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__pn_.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v137.__r_.__value_.__l.__data_);
        (*(void (**)(uint64_t, std::__fs::filesystem::path *))(*(_QWORD *)v140 + 32))(v140, &v143);
        goto LABEL_279;
      }
    }
    if (v65 >= 0)
      v71 = bundle_dir;
    else
      v71 = (std::string *)bundle_dir->__r_.__value_.__r.__words[0];
    memmove(v68, v71, v66);
    goto LABEL_138;
  }
  v23 = (_QWORD *)a4[29];
  v24 = a4 + 30;
  if (v23 != a4 + 30)
  {
    v25 = a4[42];
    if (v25)
    {
      v26 = a4 + 42;
      do
      {
        v27 = *((_BYTE *)v23 + 55);
        if (v27 >= 0)
          v28 = *((unsigned __int8 *)v23 + 55);
        else
          v28 = v23[5];
        if (v27 >= 0)
          v29 = v23 + 4;
        else
          v29 = (const void *)v23[4];
        v30 = v26;
        v31 = v25;
        do
        {
          v32 = *(char *)(v31 + 55);
          if (v32 >= 0)
            v33 = *(unsigned __int8 *)(v31 + 55);
          else
            v33 = *(_QWORD *)(v31 + 40);
          if (v32 >= 0)
            v34 = (const void *)(v31 + 32);
          else
            v34 = *(const void **)(v31 + 32);
          if (v28 >= v33)
            v35 = v33;
          else
            v35 = v28;
          v36 = memcmp(v34, v29, v35);
          v37 = v33 < v28;
          if (v36)
            v37 = v36 < 0;
          v38 = !v37;
          if (v37)
            v39 = (uint64_t *)(v31 + 8);
          else
            v39 = (uint64_t *)v31;
          if (v38)
            v30 = (_QWORD *)v31;
          v31 = *v39;
        }
        while (*v39);
        if (v30 != v26)
        {
          v40 = *((char *)v30 + 55);
          if (v40 >= 0)
            v41 = *((unsigned __int8 *)v30 + 55);
          else
            v41 = v30[5];
          if (v40 >= 0)
            v42 = v30 + 4;
          else
            v42 = (const void *)v30[4];
          if (v41 >= v28)
            v43 = v28;
          else
            v43 = v41;
          v44 = memcmp(v29, v42, v43);
          v45 = v28 >= v41;
          if (v44)
            v45 = v44 >= 0;
          if (v45 && !*((_DWORD *)v30 + 31))
            Espresso::throw_exception_selector<Espresso::generic_error>("Input transforms on CPU are not supported for a surface fed to ANE. Please set use_direct_cvpixelbuffer to 1 in transform_params to perform the pre-processing on the ANE.");
        }
        v46 = (_QWORD *)v23[1];
        if (v46)
        {
          do
          {
            v47 = v46;
            v46 = (_QWORD *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            v47 = (_QWORD *)v23[2];
            v38 = *v47 == (_QWORD)v23;
            v23 = v47;
          }
          while (!v38);
        }
        v23 = v47;
      }
      while (v47 != v24);
    }
    else
    {
      do
      {
        v48 = (_QWORD *)v23[1];
        if (v48)
        {
          do
          {
            v49 = v48;
            v48 = (_QWORD *)*v48;
          }
          while (v48);
        }
        else
        {
          do
          {
            v49 = (_QWORD *)v23[2];
            v38 = *v49 == (_QWORD)v23;
            v23 = v49;
          }
          while (!v38);
        }
        v23 = v49;
      }
      while (v49 != v24);
    }
  }
  if (v142 == 10007)
  {
    if (*((char *)this + 1167) < 0)
    {
      if (!*((_QWORD *)this + 144))
      {
LABEL_110:
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v140 + 48))(&v137);
        v58 = SHIBYTE(v139.__r_.__value_.__r.__words[2]);
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        else
          v59 = v139.__r_.__value_.__l.__size_;
        v60 = v59 + 12;
        if (v59 + 12 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v60 >= 0x17)
        {
          v78 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v60 | 7) != 0x17)
            v78 = v60 | 7;
          v79 = v78 + 1;
          v61 = operator new(v78 + 1);
          *(_QWORD *)(a6 + 8) = v60;
          *(_QWORD *)(a6 + 16) = v79 | 0x8000000000000000;
          *(_QWORD *)a6 = v61;
        }
        else
        {
          *(_QWORD *)(a6 + 8) = 0;
          *(_QWORD *)(a6 + 16) = 0;
          *(_QWORD *)a6 = 0;
          v61 = (void *)a6;
          *(_BYTE *)(a6 + 23) = v60;
          if (!v59)
            goto LABEL_161;
        }
        if (v58 >= 0)
          v80 = &v139;
        else
          v80 = (std::string *)v139.__r_.__value_.__r.__words[0];
        memmove(v61, v80, v59);
LABEL_161:
        strcpy((char *)v61 + v59, "/net.anehash");
        v81 = SHIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
        if (v81 >= 0)
          v82 = HIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
        else
          v82 = bundle_dir->__r_.__value_.__l.__size_;
        v83 = v82 + 1;
        if (v82 + 1 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v83 >= 0x17)
        {
          v85 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v83 | 7) != 0x17)
            v85 = v83 | 7;
          v86 = v85 + 1;
          v84 = (char *)operator new(v85 + 1);
          v143.__pn_.__r_.__value_.__l.__size_ = v82 + 1;
          v143.__pn_.__r_.__value_.__r.__words[2] = v86 | 0x8000000000000000;
          v143.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
        }
        else
        {
          memset(&v143, 0, sizeof(v143));
          v84 = (char *)&v143;
          *((_BYTE *)&v143.__pn_.__r_.__value_.__s + 23) = v82 + 1;
          if (!v82)
            goto LABEL_175;
        }
        if (v81 >= 0)
          v87 = bundle_dir;
        else
          v87 = (std::string *)bundle_dir->__r_.__value_.__r.__words[0];
        memmove(v84, v87, v82);
LABEL_175:
        *(_WORD *)&v84[v82] = 47;
        v88 = *(char *)(a6 + 23);
        if (v88 >= 0)
          v89 = (const std::string::value_type *)a6;
        else
          v89 = *(const std::string::value_type **)a6;
        if (v88 >= 0)
          v90 = *(unsigned __int8 *)(a6 + 23);
        else
          v90 = *(_QWORD *)(a6 + 8);
        v91 = std::string::append(&v143.__pn_, v89, v90);
        v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
        v136 = v91->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v92;
        v91->__r_.__value_.__l.__size_ = 0;
        v91->__r_.__value_.__r.__words[2] = 0;
        v91->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v143.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v143.__pn_.__r_.__value_.__l.__data_);
        std::ofstream::basic_ofstream(&v143);
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v93 = &v137;
        else
          v93 = (std::string *)v137.__r_.__value_.__r.__words[0];
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v94 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
        else
          v94 = v137.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v143, (uint64_t)v93, v94);
        if (!std::filebuf::close())
          std::ios_base::clear((std::ios_base *)((char *)&v143 + *(_QWORD *)(v143.__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v143 + *(_QWORD *)(v143.__pn_.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
        v143.__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
        *(std::string::size_type *)((char *)v143.__pn_.__r_.__value_.__r.__words
                                  + *(_QWORD *)(v143.__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
        MEMORY[0x19401C8BC](&v143.__pn_.__r_.__value_.__r.__words[1]);
        std::ostream::~ostream();
        MEMORY[0x19401CCD0](v144);
        if (SHIBYTE(v136) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_280;
        }
        else if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_280;
        }
        operator delete(v137.__r_.__value_.__l.__data_);
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_285;
LABEL_281:
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_286;
        goto LABEL_282;
      }
    }
    else if (!*((_BYTE *)this + 1167))
    {
      goto LABEL_110;
    }
    v95 = "ANE Runtime Compiler cannot (yet) support override ANE compiler options plists.";
    goto LABEL_299;
  }
  if (v142 != 10008)
  {
    v95 = "Unexpected ANE platform.";
    goto LABEL_299;
  }
  v54 = SHIBYTE(v138.__r_.__value_.__r.__words[2]);
  if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
  else
    v55 = v138.__r_.__value_.__l.__size_;
  v56 = v55 + 17;
  if (v55 + 17 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v56 >= 0x17)
  {
    v75 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v75 = v56 | 7;
    v76 = v75 + 1;
    v57 = operator new(v75 + 1);
    v143.__pn_.__r_.__value_.__l.__size_ = v55 + 17;
    v143.__pn_.__r_.__value_.__r.__words[2] = v76 | 0x8000000000000000;
    v143.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
  }
  else
  {
    memset(&v143, 0, sizeof(v143));
    v57 = &v143;
    *((_BYTE *)&v143.__pn_.__r_.__value_.__s + 23) = v55 + 17;
    if (!v55)
      goto LABEL_151;
  }
  if (v54 >= 0)
    v77 = &v138;
  else
    v77 = (std::string *)v138.__r_.__value_.__r.__words[0];
  memmove(v57, v77, v55);
LABEL_151:
  strcpy((char *)v57 + v55, "/anecir.XXXXXXXXX");
  EspressoLight::tmp_assets_manager::create_tmp_dir(*((_QWORD *)this + 152), (uint64_t)&v143, (uint64_t)&v137);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v140 + 32))(v140, &v137);
  if (*((char *)this + 1167) < 0)
  {
    if (!*((_QWORD *)this + 144))
      goto LABEL_236;
  }
  else if (!*((_BYTE *)this + 1167))
  {
    goto LABEL_236;
  }
  v96 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
  if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v97 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
  else
    v97 = v137.__r_.__value_.__l.__size_;
  v98 = v97 + 18;
  if (v97 + 18 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v98 >= 0x17)
  {
    v100 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v98 | 7) != 0x17)
      v100 = v98 | 7;
    v101 = v100 + 1;
    v99 = operator new(v100 + 1);
    __p[1] = (void *)(v97 + 18);
    v136 = v101 | 0x8000000000000000;
    __p[0] = v99;
  }
  else
  {
    __p[1] = 0;
    v136 = 0;
    __p[0] = 0;
    v99 = __p;
    HIBYTE(v136) = v97 + 18;
    if (!v97)
      goto LABEL_214;
  }
  if (v96 >= 0)
    v102 = &v137;
  else
    v102 = (std::string *)v137.__r_.__value_.__r.__words[0];
  memmove(v99, v102, v97);
LABEL_214:
  strcpy((char *)v99 + v97, "/net_options.plist");
  v103 = (char *)HIBYTE(v136);
  if (v136 >= 0)
    v104 = (std::string *)__p;
  else
    v104 = (std::string *)__p[0];
  memset(&__from, 0, sizeof(__from));
  if (v136 < 0)
    v103 = (char *)__p[1];
  std::string::append[abi:ne180100]<char const*,0>(&__from.__pn_, v104, (std::string *)&v103[(_QWORD)v104]);
  std::__fs::filesystem::__status(&__from, 0);
  if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__from.__pn_.__r_.__value_.__l.__data_);
  v105 = (std::string *)((char *)this + 1144);
  if (__to.__pn_.__r_.__value_.__s.__data_[0] && __to.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    Espresso::ANECompilerEngine::CombineOptionsPlists((uint64_t *)__p, (uint64_t *)v105, (uint64_t)__p);
  }
  else
  {
    memset(&__from, 0, sizeof(__from));
    v106 = *((unsigned __int8 *)this + 1167);
    if ((v106 & 0x80u) != 0)
    {
      v105 = (std::string *)*((_QWORD *)this + 143);
      v106 = *((_QWORD *)this + 144);
    }
    std::string::append[abi:ne180100]<char const*,0>(&__from.__pn_, v105, (std::string *)((char *)v105 + v106));
    memset(&__to, 0, sizeof(__to));
    v107 = (char *)HIBYTE(v136);
    if (v136 >= 0)
      v108 = (std::string *)__p;
    else
      v108 = (std::string *)__p[0];
    if (v136 < 0)
      v107 = (char *)__p[1];
    std::string::append[abi:ne180100]<char const*,0>(&__to.__pn_, v108, (std::string *)&v107[(_QWORD)v108]);
    std::__fs::filesystem::__copy_file(&__from, &__to, (std::__fs::filesystem::copy_options)0, 0);
    if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__to.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v136) < 0)
  {
    operator delete(__p[0]);
    if (!*((_BYTE *)this + 1128))
      goto LABEL_239;
LABEL_237:
    *(_BYTE *)(*((_QWORD *)this + 152) + 24) = 1;
    *(std::string *)a6 = v137;
  }
  else
  {
LABEL_236:
    if (*((_BYTE *)this + 1128))
      goto LABEL_237;
LABEL_239:
    v109 = SHIBYTE(v139.__r_.__value_.__r.__words[2]);
    if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v110 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
    else
      v110 = v139.__r_.__value_.__l.__size_;
    v111 = v110 + 8;
    if (v110 + 8 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v111 >= 0x17)
    {
      v113 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v111 | 7) != 0x17)
        v113 = v111 | 7;
      v114 = v113 + 1;
      v112 = operator new(v113 + 1);
      *(_QWORD *)(a6 + 8) = v111;
      *(_QWORD *)(a6 + 16) = v114 | 0x8000000000000000;
      *(_QWORD *)a6 = v112;
    }
    else
    {
      *(_QWORD *)(a6 + 8) = 0;
      *(_QWORD *)(a6 + 16) = 0;
      *(_QWORD *)a6 = 0;
      v112 = (void *)a6;
      *(_BYTE *)(a6 + 23) = v111;
      if (!v110)
        goto LABEL_253;
    }
    if (v109 >= 0)
      v115 = &v139;
    else
      v115 = (std::string *)v139.__r_.__value_.__r.__words[0];
    memmove(v112, v115, v110);
LABEL_253:
    strcpy((char *)v112 + v110, "/net.hwx");
    v116 = SHIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
    if (v116 >= 0)
      v117 = HIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
    else
      v117 = bundle_dir->__r_.__value_.__l.__size_;
    v118 = v117 + 1;
    if (v117 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v118 >= 0x17)
    {
      v120 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v118 | 7) != 0x17)
        v120 = v118 | 7;
      v121 = v120 + 1;
      p_from = (char *)operator new(v120 + 1);
      __from.__pn_.__r_.__value_.__l.__size_ = v117 + 1;
      __from.__pn_.__r_.__value_.__r.__words[2] = v121 | 0x8000000000000000;
      __from.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_from;
    }
    else
    {
      memset(&__from, 0, sizeof(__from));
      p_from = (char *)&__from;
      *((_BYTE *)&__from.__pn_.__r_.__value_.__s + 23) = v117 + 1;
      if (!v117)
        goto LABEL_267;
    }
    if (v116 >= 0)
      v122 = bundle_dir;
    else
      v122 = (std::string *)bundle_dir->__r_.__value_.__r.__words[0];
    memmove(p_from, v122, v117);
LABEL_267:
    *(_WORD *)&p_from[v117] = 47;
    v123 = *(char *)(a6 + 23);
    if (v123 >= 0)
      v124 = (const std::string::value_type *)a6;
    else
      v124 = *(const std::string::value_type **)a6;
    if (v123 >= 0)
      v125 = *(unsigned __int8 *)(a6 + 23);
    else
      v125 = *(_QWORD *)(a6 + 8);
    v126 = std::string::append(&__from.__pn_, v124, v125);
    v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
    v136 = v126->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v127;
    v126->__r_.__value_.__l.__size_ = 0;
    v126->__r_.__value_.__r.__words[2] = 0;
    v126->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__from.__pn_.__r_.__value_.__l.__data_);
    (*(void (**)(uint64_t, std::string *, void **))(*(_QWORD *)v140 + 40))(v140, &v137, __p);
    if (SHIBYTE(v136) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v137.__r_.__value_.__l.__data_);
  }
LABEL_279:
  if (SHIBYTE(v143.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v143.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_285;
    goto LABEL_281;
  }
LABEL_280:
  if ((SHIBYTE(v138.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_281;
LABEL_285:
  operator delete(v138.__r_.__value_.__l.__data_);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_286:
    operator delete(v139.__r_.__value_.__l.__data_);
    v128 = v141;
    if (v141)
      goto LABEL_287;
    return;
  }
LABEL_282:
  v128 = v141;
  if (v141)
  {
LABEL_287:
    v129 = (unint64_t *)&v128->__shared_owners_;
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
}

void sub_191105240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a56 < 0)
    operator delete(a51);
  if (a41 < 0)
  {
    operator delete(a36);
    if ((a47 & 0x80000000) == 0)
    {
LABEL_9:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
      _Unwind_Resume(a1);
    }
  }
  else if ((a47 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(a42);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_19110546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void EspressoLight::tmp_assets_manager::create_tmp_dir(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const char **v9;
  char *v10;
  char *v11;
  size_t v12;
  size_t v13;
  void *v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  void *v20;
  const std::string::value_type *v21;
  void *v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    MEMORY[0x1E0C80A78]();
    v7 = (char *)v23 - ((v8 + 16) & 0xFFFFFFFFFFFFFFF0);
    v5 = *v9;
  }
  else
  {
    MEMORY[0x1E0C80A78]();
    v7 = (char *)v23 - v6;
  }
  v10 = strcpy(v7, v5);
  v11 = mkdtemp(v10);
  v12 = strlen(v11);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v17 = v12 | 7;
    v18 = v17 + 1;
    v14 = operator new(v17 + 1);
    *(_QWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = v18 | 0x8000000000000000;
    *(_QWORD *)a3 = v14;
LABEL_13:
    memmove(v14, v11, v13);
    *((_BYTE *)v14 + v13) = 0;
    v15 = *(std::string **)(a1 + 8);
    if ((unint64_t)v15 < *(_QWORD *)(a1 + 16))
      goto LABEL_8;
LABEL_14:
    v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, a3);
    goto LABEL_17;
  }
  *(_BYTE *)(a3 + 23) = v12;
  v14 = (void *)a3;
  if (v12)
    goto LABEL_13;
  *(_BYTE *)a3 = 0;
  v15 = *(std::string **)(a1 + 8);
  if ((unint64_t)v15 >= *(_QWORD *)(a1 + 16))
    goto LABEL_14;
LABEL_8:
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v16 = *(_OWORD *)a3;
    v15->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  v19 = v15 + 1;
  *(_QWORD *)(a1 + 8) = v15 + 1;
LABEL_17:
  *(_QWORD *)(a1 + 8) = v19;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(char *)(a3 + 23) >= 0)
    v21 = (const std::string::value_type *)a3;
  else
    v21 = *(const std::string::value_type **)a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v22, 1, 0, 0);

}

void sub_191105680(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 8) = v3;
  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_aot_plan::compile_cpu_segment(std::string **this@<X0>, uint64_t a2@<X1>, const void **a3@<X2>, void **a4@<X8>)
{
  int8x8_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  size_t v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  std::string *bundle_dir;
  const void **p_data;
  int v27;
  size_t size;
  unint64_t v29;
  std::string *p_dst;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  uint64_t DirectoryPath;
  __int128 v40;
  const Espresso::net *v41;
  Espresso::AOT *v42;
  std::string *v43;
  std::string *v44;
  std::string *v45;
  int v46;
  int v47;
  size_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  std::string *v54;
  const void **v55;
  int v56;
  size_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  int v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  char v68;
  uint64_t v69;
  std::string::size_type v70;
  std::string::size_type v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  char *last_error;
  std::string *v77;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  void *__p[2];
  char v84;
  std::string __dst;
  std::string v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  std::__fs::filesystem::path v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v5 = *(int8x8_t *)(a2 + 536);
  if (!*(_QWORD *)&v5 || (v6 = **(uint64_t ****)(a2 + 528)) == 0 || (v7 = *v6) == 0)
  {
LABEL_26:
    v87 = 0;
    v88 = 0;
    goto LABEL_27;
  }
  v10 = (uint8x8_t)vcnt_s8(v5);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] < 2uLL)
  {
    v11 = *(_QWORD *)&v5 - 1;
    while (1)
    {
      v12 = v7[1];
      if (v12)
      {
        if ((v12 & v11) != 0)
          goto LABEL_26;
      }
      else if (!*((_DWORD *)v7 + 4))
      {
        goto LABEL_10;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_26;
    }
  }
  while (1)
  {
    v21 = v7[1];
    if (!v21)
      break;
    if (v21 < *(_QWORD *)&v5 || v21 % *(_QWORD *)&v5)
      goto LABEL_26;
LABEL_22:
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_26;
  }
  if (*((_DWORD *)v7 + 4))
    goto LABEL_22;
LABEL_10:
  v14 = v7[3];
  v13 = (std::__shared_weak_count *)v7[4];
  v87 = v14;
  v88 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (!v14)
LABEL_27:
    Espresso::throw_exception_selector<Espresso::generic_error>("Compiler not found");
  v17 = *((char *)a3 + 23);
  if (v17 >= 0)
    v18 = *((unsigned __int8 *)a3 + 23);
  else
    v18 = (size_t)a3[1];
  v19 = v18 + 19;
  if (v18 + 19 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v20 = operator new(v22 + 1);
    a4[1] = (void *)v19;
    a4[2] = (void *)(v23 | 0x8000000000000000);
    *a4 = v20;
  }
  else
  {
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    v20 = a4;
    *((_BYTE *)a4 + 23) = v19;
    if (!v18)
      goto LABEL_35;
  }
  if (v17 >= 0)
    v24 = a3;
  else
    v24 = *a3;
  memmove(v20, v24, v18);
LABEL_35:
  strcpy((char *)v20 + v18, "/model.espresso.net");
  bundle_dir = EspressoLight::espresso_aot_plan::get_bundle_dir((EspressoLight::espresso_aot_plan *)this);
  p_data = (const void **)&bundle_dir->__r_.__value_.__l.__data_;
  v27 = SHIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
  if (v27 >= 0)
    size = HIBYTE(bundle_dir->__r_.__value_.__r.__words[2]);
  else
    size = bundle_dir->__r_.__value_.__l.__size_;
  v29 = size + 1;
  if (size + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 >= 0x17)
  {
    v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v31 = v29 | 7;
    v32 = v31 + 1;
    p_dst = (std::string *)operator new(v31 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 1;
    __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 1;
    if (!size)
      goto LABEL_49;
  }
  if (v27 >= 0)
    v33 = p_data;
  else
    v33 = *p_data;
  memmove(p_dst, v33, size);
LABEL_49:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 47;
  v34 = *((char *)a4 + 23);
  if (v34 >= 0)
    v35 = (const std::string::value_type *)a4;
  else
    v35 = (const std::string::value_type *)*a4;
  if (v34 >= 0)
    v36 = *((unsigned __int8 *)a4 + 23);
  else
    v36 = (std::string::size_type)a4[1];
  v37 = std::string::append(&__dst, v35, v36);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v86.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!this[153])
      goto LABEL_62;
LABEL_57:
    v84 = 4;
    strcpy((char *)__p, "/tmp");
    Espresso::SharedUtils::TemporaryDirectory::TemporaryDirectory(&__dst, __p);
    if (v84 < 0)
      operator delete(__p[0]);
    DirectoryPath = Espresso::SharedUtils::TemporaryDirectory::GetDirectoryPath((Espresso::SharedUtils::TemporaryDirectory *)&__dst);
    if (*(char *)(DirectoryPath + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)DirectoryPath, *(_QWORD *)(DirectoryPath + 8));
    }
    else
    {
      v40 = *(_OWORD *)DirectoryPath;
      v82.__r_.__value_.__r.__words[2] = *(_QWORD *)(DirectoryPath + 16);
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v40;
    }
    memset(&v79, 0, sizeof(v79));
    std::string::append[abi:ne180100]<char const*,0>(&v79, (std::string *)"model.espresso.net", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v79, (uint64_t)&v82, (std::__fs::filesystem::path *)&v80);
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v81 = v80;
      if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_70;
      goto LABEL_67;
    }
    std::string::__init_copy_ctor_external(&v81, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v80.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_70:
        memset(&v89, 0, sizeof(v89));
        std::string::append[abi:ne180100]<char const*,0>(&v89.__pn_, (std::string *)"model.mil", (std::string *)"");
        std::__fs::filesystem::operator/[abi:ne180100](&v89, (uint64_t)&v82, (std::__fs::filesystem::path *)&v79);
        if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v80 = v79;
          if ((SHIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_75;
          goto LABEL_72;
        }
        std::string::__init_copy_ctor_external(&v80, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v79.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_75:
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 32))(v14, &v81);
            if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v43 = &v81;
            else
              v43 = (std::string *)v81.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v79, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
            else
              v79 = v82;
            if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = &v79;
            else
              v44 = (std::string *)v79.__r_.__value_.__r.__words[0];
            if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v45 = &v80;
            else
              v45 = (std::string *)v80.__r_.__value_.__r.__words[0];
            v46 = espresso_upgrade_to_mil(v43, (char *)v44, (char *)v45);
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v79.__r_.__value_.__l.__data_);
            if (v46)
            {
              last_error = (char *)espresso_get_last_error();
              std::string::basic_string[abi:ne180100]<0>(&v79, last_error);
              if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v77 = &v79;
              else
                v77 = (std::string *)v79.__r_.__value_.__r.__words[0];
              v89.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
              Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Upgrade Failure: %s", &v89);
            }
            v47 = *((char *)a3 + 23);
            if (v47 >= 0)
              v48 = *((unsigned __int8 *)a3 + 23);
            else
              v48 = (size_t)a3[1];
            v49 = v48 + 10;
            if (v48 + 10 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v49 >= 0x17)
            {
              v51 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v49 | 7) != 0x17)
                v51 = v49 | 7;
              v52 = v51 + 1;
              v50 = operator new(v51 + 1);
              v79.__r_.__value_.__l.__size_ = v48 + 10;
              v79.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
              v79.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
            }
            else
            {
              memset(&v79, 0, sizeof(v79));
              v50 = &v79;
              *((_BYTE *)&v79.__r_.__value_.__s + 23) = v48 + 10;
              if (!v48)
                goto LABEL_104;
            }
            if (v47 >= 0)
              v53 = a3;
            else
              v53 = *a3;
            memmove(v50, v53, v48);
LABEL_104:
            strcpy((char *)v50 + v48, "/model.mlc");
            if (*((char *)a4 + 23) < 0)
              operator delete(*a4);
            *(std::string *)a4 = v79;
            v54 = EspressoLight::espresso_aot_plan::get_bundle_dir((EspressoLight::espresso_aot_plan *)this);
            v55 = (const void **)&v54->__r_.__value_.__l.__data_;
            v56 = SHIBYTE(v54->__r_.__value_.__r.__words[2]);
            if (v56 >= 0)
              v57 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
            else
              v57 = v54->__r_.__value_.__l.__size_;
            v58 = v57 + 1;
            if (v57 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v58 >= 0x17)
            {
              v60 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v58 | 7) != 0x17)
                v60 = v58 | 7;
              v61 = v60 + 1;
              v59 = (char *)operator new(v60 + 1);
              v79.__r_.__value_.__l.__size_ = v57 + 1;
              v79.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
              v79.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
            }
            else
            {
              memset(&v79, 0, sizeof(v79));
              v59 = (char *)&v79;
              *((_BYTE *)&v79.__r_.__value_.__s + 23) = v57 + 1;
              if (!v57)
                goto LABEL_120;
            }
            if (v56 >= 0)
              v62 = v55;
            else
              v62 = *v55;
            memmove(v59, v62, v57);
LABEL_120:
            *(_WORD *)&v59[v57] = 47;
            v63 = *((char *)a4 + 23);
            if (v63 >= 0)
              v64 = (const std::string::value_type *)a4;
            else
              v64 = (const std::string::value_type *)*a4;
            if (v63 >= 0)
              v65 = *((unsigned __int8 *)a4 + 23);
            else
              v65 = (std::string::size_type)a4[1];
            v66 = std::string::append(&v79, v64, v65);
            v67 = v66->__r_.__value_.__r.__words[0];
            v89.__pn_.__r_.__value_.__r.__words[0] = v66->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v89.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
            v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
            v66->__r_.__value_.__l.__size_ = 0;
            v66->__r_.__value_.__r.__words[2] = 0;
            v66->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v86.__r_.__value_.__l.__data_);
            v86.__r_.__value_.__r.__words[0] = v67;
            v86.__r_.__value_.__l.__size_ = v89.__pn_.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v86.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v89.__pn_.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v86.__r_.__value_.__s + 23) = v68;
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v79.__r_.__value_.__l.__data_);
            Espresso::AOT::MILCompilerForMLC::SetOutput(this[153], &v86);
            v69 = (uint64_t)this[153];
            memset(&v79, 0, sizeof(v79));
            Espresso::AOT::MILCompilerForMLC::Run(v69, (uint64_t)&v80);
            v70 = v79.__r_.__value_.__r.__words[0];
            if (v79.__r_.__value_.__r.__words[0])
            {
              v71 = v79.__r_.__value_.__l.__size_;
              v72 = (void *)v79.__r_.__value_.__r.__words[0];
              if (v79.__r_.__value_.__l.__size_ != v79.__r_.__value_.__r.__words[0])
              {
                do
                {
                  if (*(char *)(v71 - 1) < 0)
                    operator delete(*(void **)(v71 - 24));
                  v71 -= 24;
                }
                while (v71 != v70);
                v72 = (void *)v79.__r_.__value_.__r.__words[0];
              }
              v79.__r_.__value_.__l.__size_ = v70;
              operator delete(v72);
            }
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v80.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_140:
                if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_141;
                goto LABEL_145;
              }
            }
            else if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_140;
            }
            operator delete(v81.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_141:
              Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)&__dst);
              v42 = (Espresso::AOT *)a2;
              if (!*(_QWORD *)(a2 + 344))
                goto LABEL_147;
              goto LABEL_146;
            }
LABEL_145:
            operator delete(v82.__r_.__value_.__l.__data_);
            Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)&__dst);
            v42 = (Espresso::AOT *)a2;
            if (!*(_QWORD *)(a2 + 344))
              goto LABEL_147;
            goto LABEL_146;
          }
        }
        else if ((SHIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_75;
        }
LABEL_72:
        operator delete(v89.__pn_.__r_.__value_.__l.__data_);
        goto LABEL_75;
      }
    }
    else if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_70;
    }
LABEL_67:
    operator delete(v79.__r_.__value_.__l.__data_);
    goto LABEL_70;
  }
  if (this[153])
    goto LABEL_57;
LABEL_62:
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 32))(v14, &v86);
  v42 = (Espresso::AOT *)a2;
  if (*(_QWORD *)(a2 + 344))
  {
LABEL_146:
    if (!Espresso::AOT::AreSurfaceDescriptorsEnabled(v42, v41))
      Espresso::throw_exception_selector<Espresso::generic_error>("Input transforms aren't supported on CPU for non-surface blobs. Please enable surfaces by adding experimental.aot.enable_surface_desc to network properties.");
  }
LABEL_147:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  v73 = v88;
  if (v88)
  {
    v74 = (unint64_t *)&v88->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_191105F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  uint64_t v50;

  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  if (a37 < 0)
    operator delete(a32);
  Espresso::SharedUtils::TemporaryDirectory::~TemporaryDirectory((Espresso::SharedUtils::TemporaryDirectory *)&a44);
  if (*(char *)(v50 - 153) < 0)
    operator delete(*(void **)(v50 - 176));
  if (*(char *)(v49 + 23) < 0)
  {
    operator delete(*(void **)v49);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v50 - 144);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v50 - 144);
  _Unwind_Resume(a1);
}

void sub_1911061C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_aot_compiler::~espresso_aot_compiler(EspressoLight::espresso_aot_compiler *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E2D94680;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *((_QWORD *)this + 5);
    v5 = (void *)*((_QWORD *)this + 4);
    if (v4 != v3)
    {
      do
        Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)(v4 - 120));
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v3;
    operator delete(v5);
  }
  Espresso::net_compiler::~net_compiler(this);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E2D94680;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *((_QWORD *)this + 5);
    v5 = (void *)*((_QWORD *)this + 4);
    if (v4 != v3)
    {
      do
        Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)(v4 - 120));
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v3;
    operator delete(v5);
  }
  Espresso::net_compiler::~net_compiler(this);
  JUMPOUT(0x19401CD90);
}

void EspressoLight::espresso_aot_compiler::build_segment()
{
  Espresso::throw_exception_selector<Espresso::generic_error>("Build method of AOT compiler should never be called");
}

void EspressoLight::espresso_aot_compiler::__forward_segment()
{
  Espresso::throw_exception_selector<Espresso::generic_error>("Forward method of AOT compiler should never be called");
}

void EspressoLight::espresso_aot_plan::execute_sync(EspressoLight::espresso_aot_plan *this)
{
  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Cannot execute AOT plan");
}

void EspressoLight::espresso_aot_plan::bind_external_input()
{
  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Cannot bind AOT plan for execution");
}

void Espresso::net_compiler_segment_based::segment_t::~segment_t(Espresso::net_compiler_segment_based::segment_t *this)
{
  void *v2;
  void **v3;
  void *v4;
  void **v5;
  void *v6;
  void **v7;
  void **v8;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void **)*((_QWORD *)this + 9);
  if (v3)
  {
    do
    {
      v7 = (void **)*v3;
      if (*((char *)v3 + 39) < 0)
        operator delete(v3[2]);
      operator delete(v3);
      v3 = v7;
    }
    while (v7);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    operator delete(v4);
  v5 = (void **)*((_QWORD *)this + 4);
  if (v5)
  {
    do
    {
      v8 = (void **)*v5;
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v8;
    }
    while (v8);
  }
  v6 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
    operator delete(v6);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 56);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 16);
}

void Espresso::throw_exception_selector<Espresso::generic_error,char const*&,int &>(char *a1, _QWORD *a2, unsigned int *a3)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>(a1, *a2, *a3);
}

void std::__tree<std::__value_type<std::tuple<std::string,int,int>,std::string>,std::__map_value_compare<std::tuple<std::string,int,int>,std::__value_type<std::tuple<std::string,int,int>,std::string>,std::less<std::tuple<std::string,int,int>>,true>,std::allocator<std::__value_type<std::tuple<std::string,int,int>,std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::tuple<std::string,int,int>,std::string>,std::__map_value_compare<std::tuple<std::string,int,int>,std::__value_type<std::tuple<std::string,int,int>,std::string>,std::less<std::tuple<std::string,int,int>>,true>,std::allocator<std::__value_type<std::tuple<std::string,int,int>,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::tuple<std::string,int,int>,std::string>,std::__map_value_compare<std::tuple<std::string,int,int>,std::__value_type<std::tuple<std::string,int,int>,std::string>,std::less<std::tuple<std::string,int,int>>,true>,std::allocator<std::__value_type<std::tuple<std::string,int,int>,std::string>>>::destroy(a1, *(_QWORD *)(a2 + 8));
    if (*(char *)(a2 + 87) < 0)
    {
      operator delete(*(void **)(a2 + 64));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

void Espresso::pass_run_return_t::~pass_run_return_t(Espresso::pass_run_return_t *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

std::string *std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  void *v11;
  std::string::size_type v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(__int128 *)((char *)a2 + 24);
  v6 = *(__int128 *)((char *)a2 + 40);
  v7 = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__l.__size_ = v7;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  v9 = (_BYTE *)*((_QWORD *)a2 + 8);
  v8 = (_BYTE *)*((_QWORD *)a2 + 9);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = operator new(v8 - v9);
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v11;
    this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    v12 = (std::string::size_type)v11 + 4 * (v10 >> 2);
    this[3].__r_.__value_.__l.__size_ = v12;
    memcpy(v11, v9, v10);
    this[3].__r_.__value_.__r.__words[0] = v12;
  }
  return this;
}

void sub_1911065B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__node_insert_multi(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *inserted;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;

  v4 = a2 + 2;
  v5 = *(_QWORD *)(a2[2] + 8);
  if ((v5 & 0x8000000000000000) != 0)
  {
    v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    v7 = 5381;
    do
    {
      v5 = v7;
      v8 = *v6++;
      v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  v10 = (int8x8_t)a1[1];
  v11 = a2[1];
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v10)
      v11 %= *(_QWORD *)&v10;
  }
  else
  {
    v11 &= *(_QWORD *)&v10 - 1;
  }
  if (!inserted)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v11) = a1 + 2;
    if (!*a2)
      goto LABEL_22;
    v13 = *(_QWORD *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v13 >= *(_QWORD *)&v10)
        v13 %= *(_QWORD *)&v10;
    }
    else
    {
      v13 &= *(_QWORD *)&v10 - 1;
    }
LABEL_21:
    *(_QWORD *)(*a1 + 8 * v13) = a2;
    goto LABEL_22;
  }
  *a2 = *inserted;
  *inserted = (uint64_t)a2;
  if (*a2)
  {
    v13 = *(_QWORD *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v13 >= *(_QWORD *)&v10)
        v13 %= *(_QWORD *)&v10;
    }
    else
    {
      v13 &= *(_QWORD *)&v10 - 1;
    }
    if (v13 != v11)
      goto LABEL_21;
  }
LABEL_22:
  ++a1[3];
  return a2;
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
      v4 = (std::__shared_weak_count *)v3[4];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  size_t v23;
  uint8x8_t v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  _BOOL4 v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0)
      goto LABEL_4;
    goto LABEL_39;
  }
  v19 = 1;
  if (v6 >= 3)
    v19 = (v6 & (v6 - 1)) != 0;
  v20 = v19 | (2 * v6);
  v21 = vcvtps_u32_f32(v7 / v8);
  if (v20 <= v21)
    prime = v21;
  else
    prime = v20;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v6)
    goto LABEL_25;
  if (prime < v6)
  {
    v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] <= 1uLL)
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
        if (prime <= v23)
          prime = v23;
        if (prime >= v6)
          goto LABEL_38;
LABEL_25:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<false>(a1, prime);
        goto LABEL_38;
      }
    }
    v26 = std::__next_prime(v23);
    if (prime <= v26)
      prime = v26;
    if (prime < v6)
      goto LABEL_25;
  }
LABEL_38:
  v6 = *(_QWORD *)(a1 + 8);
  v9 = v6 - 1;
  if ((v6 & (v6 - 1)) != 0)
  {
LABEL_39:
    v27 = a2;
    if (v6 <= a2)
      v27 = a2 % v6;
    v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v27);
    if (!v28)
      return 0;
    v29 = 0;
    v30 = *a3;
    while (1)
    {
      v15 = v28;
      v28 = (_QWORD *)*v28;
      if (!v28)
        return v15;
      v33 = v28[1];
      v34 = v33;
      if (v33 >= v6)
        v34 = v33 % v6;
      if (v34 != v27)
        return v15;
      if (v33 == a2)
      {
        v35 = *(_QWORD *)(v28[2] + 8);
        v36 = *(_QWORD *)(v30 + 8);
        if (v35 == v36)
        {
          v31 = 1;
          goto LABEL_45;
        }
        if ((v36 & v35) < 0 != __OFSUB__(v35, v36))
        {
          v31 = strcmp((const char *)(v35 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v36 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
          goto LABEL_45;
        }
      }
      v31 = 0;
LABEL_45:
      v32 = v29 & !v31;
      v29 |= v31;
      if (v32 == 1)
        return v15;
    }
  }
LABEL_4:
  v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 & a2));
  if (v10)
  {
    v11 = 0;
    v12 = *a3;
    while (1)
    {
      v15 = v10;
      v10 = (_QWORD *)*v10;
      if (!v10)
        return v15;
      v16 = v10[1];
      if ((v16 & v9) != (v9 & a2))
        return v15;
      if (v16 == a2)
      {
        v17 = *(_QWORD *)(v10[2] + 8);
        v18 = *(_QWORD *)(v12 + 8);
        if (v17 == v18)
        {
          v13 = 1;
          goto LABEL_8;
        }
        if ((v18 & v17) < 0 != __OFSUB__(v17, v18))
        {
          v13 = strcmp((const char *)(v17 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v18 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
          goto LABEL_8;
        }
      }
      v13 = 0;
LABEL_8:
      v14 = v11 & !v13;
      v11 |= v13;
      if ((v14 & 1) != 0)
        return v15;
    }
  }
  return 0;
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_debug_metadata>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::sequential_builder::~sequential_builder(Espresso::sequential_builder *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)this + 136);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_15:
    if ((*((char *)this + 79) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_19:
    operator delete(*((void **)this + 7));
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v11)
      return;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (*((char *)this + 79) < 0)
    goto LABEL_19;
LABEL_16:
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v11)
    return;
LABEL_20:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

uint64_t std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v12 = 0;
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 / 0xAA];
  v6 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
  v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
  if (v6 == v7)
    goto LABEL_14;
  do
  {
    v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (!v8)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
LABEL_9:
      v6 += 24;
      if (v6 - (_QWORD)*v5 != 4080)
        continue;
LABEL_10:
      v11 = (unint64_t)v5[1];
      ++v5;
      v6 = v11;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v6 += 24;
    if (v6 - (_QWORD)*v5 == 4080)
      goto LABEL_10;
  }
  while (v6 != v7);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_14:
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_16:
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 85;
LABEL_21:
    *(_QWORD *)(a1 + 32) = v14;
  }
  else if (v13 == 2)
  {
    v14 = 170;
    goto LABEL_21;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Espresso::net_compiler_segment_based::segment_t *v11;
  Espresso::net_compiler_segment_based::segment_t *v12;
  Espresso::net_compiler_segment_based::segment_t *v13;

  v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x222222222222222)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(120 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (uint64_t)&v7[120 * v3];
  v9 = &v7[120 * v6];
  std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t>((uint64_t)(a1 + 2), v8, a2);
  v10 = v8 + 120;
  v12 = (Espresso::net_compiler_segment_based::segment_t *)*a1;
  v11 = (Espresso::net_compiler_segment_based::segment_t *)a1[1];
  if (v11 == (Espresso::net_compiler_segment_based::segment_t *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11)
      return v10;
    goto LABEL_17;
  }
  do
  {
    v8 -= 120;
    v11 = (Espresso::net_compiler_segment_based::segment_t *)((char *)v11 - 120);
    std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t>((uint64_t)(a1 + 2), v8, (uint64_t)v11);
  }
  while (v11 != v12);
  v13 = (Espresso::net_compiler_segment_based::segment_t *)*a1;
  v11 = (Espresso::net_compiler_segment_based::segment_t *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v13)
  {
    do
    {
      v11 = (Espresso::net_compiler_segment_based::segment_t *)((char *)v11 - 120);
      Espresso::net_compiler_segment_based::segment_t::~segment_t(v11);
    }
    while (v11 != v13);
    v11 = v13;
  }
  if (v11)
LABEL_17:
    operator delete(v11);
  return v10;
}

void EspressoLight::tmp_assets_manager::~tmp_assets_manager(void ***this)
{
  void **v2;
  void **v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  void **v7;
  void **v8;

  v2 = *this;
  if (!*((_BYTE *)this + 24))
  {
    v3 = this[1];
    if (v2 != v3)
    {
      do
      {
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = v2;
        if (*((char *)v2 + 23) < 0)
          v5 = *v2;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "removeItemAtPath:error:", v6, 0);

        v2 += 3;
      }
      while (v2 != v3);
      v2 = *this;
    }
  }
  if (v2)
  {
    v7 = this[1];
    v8 = v2;
    if (v7 != v2)
    {
      do
      {
        if (*((char *)v7 - 1) < 0)
          operator delete(*(v7 - 3));
        v7 -= 3;
      }
      while (v7 != v2);
      v8 = *this;
    }
    this[1] = v2;
    operator delete(v8);
  }
}

void std::__shared_ptr_emplace<Espresso::multi_head_aot_helper_t>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  std::__tree<std::string>::destroy(a1 + 48, *(char **)(a1 + 56));
  std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(v2, *(_QWORD *)(a1 + 32));
}

void std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::multi_head_aot_helper_t::combination>>>::destroy(a1, *(_QWORD *)(a2 + 8));
    v4 = *(void **)(a2 + 80);
    if (v4)
      operator delete(v4);
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_6;
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
LABEL_6:
      operator delete((void *)a2);
      return;
    }
    operator delete(*(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

void std::__shared_ptr_emplace<EspressoLight::espresso_aot_compiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB5A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EspressoLight::espresso_aot_compiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB5A18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<EspressoLight::espresso_aot_compiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::AOT::Validators::EirValidator::EirValidator(_QWORD *a1, __n128 *a2)
{
  _QWORD *v3;
  __n128 result;

  v3 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  *v3 = off_1E2DA0188;
  result = *a2;
  *(__n128 *)(v3 + 1) = *a2;
  v3[4] = 0;
  v3[5] = 0;
  v3[3] = 0;
  return result;
}

{
  _QWORD *v3;
  __n128 result;

  v3 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  *v3 = off_1E2DA0188;
  result = *a2;
  *(__n128 *)(v3 + 1) = *a2;
  v3[4] = 0;
  v3[5] = 0;
  v3[3] = 0;
  return result;
}

void Espresso::AOT::Validators::EirValidator::Validate(uint64_t *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void *v8;
  void **v9;
  void *__p[2];
  void *v11[2];
  int v12;
  void *v13[2];
  void *v14[2];
  int v15;
  _QWORD v16[3];
  _QWORD *v17;
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34[24];
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v32 = 4;
  strcpy((char *)v31, "call");
  strcpy(v34, "\nwrite_state");
  strcpy((char *)v33, "read_state");
  v35 = 11;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v13, (uint64_t)v31, (uint64_t)v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v13, (uint64_t)v33, (uint64_t)v33);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v13, (uint64_t)&v34[1], (uint64_t)&v34[1]);
  v20 = 5;
  strcpy((char *)v19, "ios15");
  v22 = 5;
  strcpy((char *)v21, "ios16");
  v24 = 5;
  strcpy((char *)v23, "ios17");
  v26 = 11;
  strcpy((char *)v25, "ios16_train");
  v28 = 11;
  strcpy((char *)v27, "ios17_train");
  v30 = 5;
  strcpy((char *)v29, "ios18");
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v11 = 0u;
  v12 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v19, (uint64_t)v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v21, (uint64_t)v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v23, (uint64_t)v23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v25, (uint64_t)v25);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v27, (uint64_t)v27);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v29, (uint64_t)v29);
  v16[0] = &off_1E2DB2000;
  v17 = v16;
  v18 = 1;
  Espresso::AOT::Utils::OpBlackListValidate(v13, __p, (uint64_t)v16, a1);
  if (v18)
  {
    v2 = v17;
    if (v17 == v16)
    {
      v3 = 4;
      v2 = v16;
    }
    else
    {
      if (!v17)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  v4 = (void **)v11[0];
  if (v11[0])
  {
    do
    {
      v7 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v7;
    }
    while (v7);
  }
  v5 = __p[0];
  __p[0] = 0;
  if (v5)
    operator delete(v5);
  if (v30 < 0)
  {
    operator delete(v29[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v26 & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_23;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v27[0]);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v24 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v25[0]);
  if ((v24 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v22 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v23[0]);
  if ((v22 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v20 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v21[0]);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_16:
    v6 = (void **)v14[0];
    if (!v14[0])
      goto LABEL_27;
    goto LABEL_34;
  }
LABEL_26:
  operator delete(v19[0]);
  v6 = (void **)v14[0];
  if (!v14[0])
    goto LABEL_27;
  do
  {
LABEL_34:
    v9 = (void **)*v6;
    if (*((char *)v6 + 39) < 0)
      operator delete(v6[2]);
    operator delete(v6);
    v6 = v9;
  }
  while (v9);
LABEL_27:
  v8 = v13[0];
  v13[0] = 0;
  if (v8)
    operator delete(v8);
  if (v35 < 0)
  {
    operator delete(*(void **)&v34[1]);
    if ((v34[0] & 0x80000000) == 0)
    {
LABEL_31:
      if ((v32 & 0x80000000) == 0)
        return;
LABEL_38:
      operator delete(v31[0]);
      return;
    }
  }
  else if ((v34[0] & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v33[0]);
  if (v32 < 0)
    goto LABEL_38;
}

void sub_19110754C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  if (a24)
    Espresso::AOT::Validators::EirValidator::Validate(&a23, &a20);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  if (a60 < 0)
  {
    operator delete(a55);
    if (a54 < 0)
    {
LABEL_19:
      operator delete(a49);
      if (a48 < 0)
      {
LABEL_20:
        operator delete(a43);
        if (a42 < 0)
        {
LABEL_21:
          operator delete(a37);
          if (a36 < 0)
          {
LABEL_22:
            operator delete(a31);
            if ((a30 & 0x80000000) == 0)
            {
LABEL_14:
              std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a15);
              if (*(char *)(v60 - 57) < 0)
              {
                operator delete(*(void **)(v60 - 80));
                if (*(char *)(v60 - 81) < 0)
                {
LABEL_16:
                  operator delete(*(void **)(v60 - 104));
                  if (*(char *)(v60 - 105) < 0)
                  {
LABEL_17:
                    operator delete(*(void **)(v60 - 128));
                    _Unwind_Resume(a1);
                  }
LABEL_24:
                  _Unwind_Resume(a1);
                }
              }
              else if (*(char *)(v60 - 81) < 0)
              {
                goto LABEL_16;
              }
              if (*(char *)(v60 - 105) < 0)
                goto LABEL_17;
              goto LABEL_24;
            }
LABEL_13:
            operator delete(__p);
            goto LABEL_14;
          }
LABEL_12:
          if ((a30 & 0x80000000) == 0)
            goto LABEL_14;
          goto LABEL_13;
        }
LABEL_11:
        if (a36 < 0)
          goto LABEL_22;
        goto LABEL_12;
      }
LABEL_10:
      if (a42 < 0)
        goto LABEL_21;
      goto LABEL_11;
    }
  }
  else if (a54 < 0)
  {
    goto LABEL_19;
  }
  if (a48 < 0)
    goto LABEL_20;
  goto LABEL_10;
}

void Espresso::AOT::Validators::EirValidator::~EirValidator(void **this)
{
  *this = off_1E2DA0188;
  if (*((char *)this + 47) < 0)
  {
    operator delete(this[3]);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));
  }
  else
  {
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));
  }
  Espresso::AOT::AbstractValidator::~AbstractValidator((Espresso::AOT::AbstractValidator *)this);
}

{
  *this = off_1E2DA0188;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));
  Espresso::AOT::AbstractValidator::~AbstractValidator((Espresso::AOT::AbstractValidator *)this);
  JUMPOUT(0x19401CD90);
}

void std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB2000;
  return result;
}

void std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB2000;
}

uint64_t std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, MIL::IROperation *a2)
{
  uint64_t v3;
  std::string *v4;
  int data;
  int v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  E5Common::Utils *v12;
  const MIL::IRValueType *v13;
  MIL::IRValueType *v14;
  MIL::IRMemoryLayoutValueType *v15;
  MIL::IRTensorBufferValueType *v16;
  uint64_t v17;
  MIL::IRProperty **v18;
  MIL::IRProperty **v19;
  MIL::IRConstantProperty *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t j;
  E5Common::Utils *v24;
  const MIL::IRValueType *v25;
  MIL::IRValueType *v26;
  MIL::IRMemoryLayoutValueType *v27;
  MIL::IRTensorBufferValueType *v28;
  uint64_t InterleaveFactors;
  MIL::IRProperty **v30;
  MIL::IRProperty **v31;
  MIL::IRConstantProperty *v32;
  unint64_t i;
  uint64_t OutputType;
  uint64_t v35;
  uint64_t ParameterType;
  uint64_t v37;
  uint64_t v38;
  char __p[23];
  char v41;
  std::string v42;

  v3 = (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a2 + 56))(a2);
  Espresso::AOT::GetOperatorType(v3, &v42);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v42.__r_.__value_.__l.__size_ != 6)
      goto LABEL_10;
    v4 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) != 6)
      goto LABEL_10;
    v4 = &v42;
  }
  data = (int)v4->__r_.__value_.__l.__data_;
  v6 = WORD2(v4->__r_.__value_.__r.__words[0]);
  v7 = data == 1752457575 && v6 == 29285;
  if (v7)
  {
    for (i = 0; i < (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a2 + 192))(a2); ++i)
    {
      OutputType = MIL::IROperation::GetOutputType(a2);
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)OutputType + 24))(OutputType);
      if (v35)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 88))(v35) == 14)
        {
          v41 = 7;
          strcpy(__p, "indices");
          ParameterType = MIL::IROperation::TryGetParameterType();
          if (ParameterType)
          {
            v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterType + 24))(ParameterType);
            if (v37)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 88))(v37) == 11)
                goto LABEL_43;
            }
          }
        }
      }
    }
  }
LABEL_10:
  v8 = (_QWORD *)(*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a2 + 160))(a2);
  v9 = v8 + 1;
  v10 = (_QWORD *)*v8;
  if ((_QWORD *)*v8 == v8 + 1)
  {
LABEL_26:
    for (j = 0; j < (*(uint64_t (**)(MIL::IROperation *))(*(_QWORD *)a2 + 192))(a2); ++j)
    {
      v24 = (E5Common::Utils *)MIL::IROperation::GetOutputType(a2);
      v26 = v24;
      if (v24)
      {
        if (E5Common::Utils::IsTensorBuffer(v24, v25))
        {
          v27 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v26);
          v28 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v27);
          InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v28);
          v30 = *(MIL::IRProperty ***)InterleaveFactors;
          v31 = *(MIL::IRProperty ***)(InterleaveFactors + 8);
          if (*(MIL::IRProperty ***)InterleaveFactors != v31)
          {
            do
            {
              v32 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*v30);
              if (MIL::IRConstantProperty::GetUInt8ScalarValue(v32) != 1)
                goto LABEL_43;
              ++v30;
            }
            while (v30 != v31);
          }
        }
      }
    }
    v38 = 1;
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v38;
LABEL_44:
    operator delete(v42.__r_.__value_.__l.__data_);
    return v38;
  }
  while (v10[8] == v10[7])
  {
LABEL_20:
    v21 = (_QWORD *)v10[1];
    if (v21)
    {
      do
      {
        v22 = v21;
        v21 = (_QWORD *)*v21;
      }
      while (v21);
    }
    else
    {
      do
      {
        v22 = (_QWORD *)v10[2];
        v7 = *v22 == (_QWORD)v10;
        v10 = v22;
      }
      while (!v7);
    }
    v10 = v22;
    if (v22 == v9)
      goto LABEL_26;
  }
  v11 = 0;
  while (1)
  {
    v12 = (E5Common::Utils *)MIL::IROperation::TryGetParameterType();
    v14 = v12;
    if (v12)
    {
      if (E5Common::Utils::IsTensorBuffer(v12, v13))
      {
        v15 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v14);
        v16 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v15);
        v17 = MIL::IRTensorBufferValueType::GetInterleaveFactors(v16);
        v18 = *(MIL::IRProperty ***)v17;
        v19 = *(MIL::IRProperty ***)(v17 + 8);
        if (*(MIL::IRProperty ***)v17 != v19)
          break;
      }
    }
LABEL_13:
    if (++v11 >= (unint64_t)((uint64_t)(v10[8] - v10[7]) >> 4))
      goto LABEL_20;
  }
  while (1)
  {
    v20 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*v18);
    if (MIL::IRConstantProperty::GetUInt8ScalarValue(v20) != 1)
      break;
    if (++v18 == v19)
      goto LABEL_13;
  }
LABEL_43:
  v38 = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_44;
  return v38;
}

void sub_191107ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT10Validators12EirValidator8ValidateERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS7_1"
                     "1char_traitsIcEENS7_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT10Validators12EirValidator8ValidateERKN3MIL9IRProgramERKNSt3__112basic_st"
                                "ringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT10Validators12EirValidator8ValidateERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT10Validators12EirValidator8ValidateERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::Validators::EirValidator::Validate(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

_QWORD *Espresso::AOT::Validators::EirValidator::Validate(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  if ((_QWORD *)*result == a2)
  {
    v2 = 4;
  }
  else
  {
    if (!*result)
      return result;
    v2 = 5;
    a2 = (_QWORD *)*result;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 8 * v2))(a2);
}

void E5AOT::E5BuilderForMIL::~E5BuilderForMIL(E5AOT::E5BuilderForMIL *this)
{
  void **v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8;

  *(_QWORD *)this = &off_1E2D5C038;
  v2 = (void **)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v8 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_16:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v2);
      v2 = v8;
    }
    while (v8);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node((_DWORD)this + 40, *((char **)this + 7));
  v4 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    operator delete(v4);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5AOT::E5BuilderForMIL *)((char *)this + 24));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

{
  E5AOT::E5BuilderForMIL::~E5BuilderForMIL(this);
  JUMPOUT(0x19401CD90);
}

uint64_t E5AOT::E5BuilderForMIL::E5BuilderForMIL(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  std::logic_error *exception;
  std::string *v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::string v27;
  std::string v28;

  *(_QWORD *)a1 = &off_1E2D5C038;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 24) = *a3;
  v7 = (_QWORD *)(a1 + 40);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::unordered_map(a1 + 40, a4);
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 80, a5);
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 8);
  v26 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  Espresso::AOT::ValidateE5RTProgram(&v25);
  v11 = v26;
  if (v26)
  {
    v12 = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(std::__shared_weak_count **)(a1 + 16);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = (_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14) + 16);
  while (1)
  {
    v18 = (_QWORD *)*v18;
    if (!v18)
      break;
    if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v7, (uint64_t)(v18 + 2)))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v20 = std::string::append(&v27, ".");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v28);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
  }
  if (v15)
  {
    v22 = (unint64_t *)&v15->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

void sub_191107F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v28);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v27);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v25 + 24));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::SerializeToString(E5AOT::E5BuilderForMIL *this)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "SerializeToString not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
}

void sub_191108014(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t E5AOT::E5BuilderForMIL::SerializeToDisk(E5AOT::E5BuilderForMIL *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;

  v6[1] = 0x2B23829000000000;
  v7 = 0u;
  v8 = 0u;
  kdebug_trace();
  E5AOT::E5BuilderForMIL::BuildProgram(a1, v6);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v6[0] + 56))(v6[0], *((_QWORD *)a1 + 3), a2);
  v4 = v6[0];
  v6[0] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return kdebug_trace();
}

void sub_1911080DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
    _Unwind_Resume(a1);
  }
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5AOT::E5BuilderForMIL::BuildProgram@<X0>(E5AOT::E5BuilderForMIL *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  const void *v12;
  _QWORD *i;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count_vtbl *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const void *v26;
  const void *v27;
  const void *v28;
  uint64_t result;
  std::runtime_error *exception;
  const void *v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count_vtbl *v35;
  std::__shared_weak_count *v36;
  const void *v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  const void *v40;
  uint64_t v41;

  E5RT::E5ProgramBuilder::Create(&v41);
  if (!v41)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error creating E5 program builder.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  E5RT::E5BuildInfoBuilder::Create(&v40);
  (*(void (**)(const void *, char *))(*(_QWORD *)v40 + 16))(v40, (char *)this + 80);
  v4 = v40;
  v5 = v41;
  v40 = 0;
  v37 = v4;
  E5RT::E5BuildInfoBuilder::Finish(&v37, &v35);
  v38 = v35;
  if (v35)
  {
    v6 = (std::__shared_weak_count *)operator new();
    v7 = v35;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2CC0;
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6[1].__vftable = v7;
  }
  else
  {
    v6 = 0;
  }
  v39 = v6;
  v35 = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v5 + 32))(v5, &v38);
  v8 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v35;
  v35 = 0;
  if (v11)
    (*((void (**)(std::__shared_weak_count_vtbl *))v11->~__shared_weak_count + 1))(v11);
  v12 = v37;
  v37 = 0;
  if (v12)
    (*(void (**)(const void *))(*(_QWORD *)v12 + 8))(v12);
  for (i = *(_QWORD **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1)) + 16);
        i;
        i = (_QWORD *)*i)
  {
    E5AOT::E5BuilderForMIL::BuildFunction((uint64_t)this, (uint64_t)(i + 2), i[5], &v34);
    v14 = v34;
    v35 = v34;
    if (v34)
    {
      v15 = (std::__shared_weak_count *)operator new();
      v16 = v34;
      v15->__shared_owners_ = 0;
      v17 = (unint64_t *)&v15->__shared_owners_;
      v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2C88;
      v15->__shared_weak_owners_ = 0;
      v15[1].__vftable = v16;
      v36 = v15;
      v18 = v41;
      v32 = v14;
      v33 = v15;
      do
        v19 = __ldxr(v17);
      while (__stxr(v19 + 1, v17));
    }
    else
    {
      v36 = 0;
      v18 = v41;
      v32 = 0;
      v33 = 0;
    }
    (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v18 + 16))(v18, &v32);
    v20 = v33;
    if (!v33)
      goto LABEL_26;
    v21 = (unint64_t *)&v33->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v23 = v36;
      if (v36)
      {
LABEL_27:
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    else
    {
LABEL_26:
      v23 = v36;
      if (v36)
        goto LABEL_27;
    }
  }
  v26 = (const void *)v41;
  v41 = 0;
  v31 = v26;
  E5RT::E5ProgramBuilder::Finish(&v31, a2);
  v27 = v31;
  v31 = 0;
  if (v27)
    (*(void (**)(const void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = v40;
  v40 = 0;
  if (v28)
    (*(void (**)(const void *))(*(_QWORD *)v28 + 8))(v28);
  result = v41;
  v41 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_191108430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t v19;

  v19 = *(_QWORD *)(v17 - 56);
  *(_QWORD *)(v17 - 56) = 0;
  if (!v19)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(exception_object);
}

uint64_t E5AOT::E5BuilderForMIL::BuildFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  const void ***v8;
  const MIL::IRValueType *v9;
  const void **v10;
  const void ***v11;
  const void ***v12;
  const MIL::IRValueType *v13;
  const void **v14;
  const void ***v15;
  uint64_t ***v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  const void **v20;
  const void ***v21;
  BOOL v22;
  const void **v23;
  const void ***v24;
  int v25;
  size_t v26;
  unint64_t v27;
  uint64_t v28;
  std::string *p_dst;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::__shared_weak_count *v39;
  std::string::size_type v40;
  unint64_t *p_shared_owners;
  const void *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  const void *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  char **v70;
  const void *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  const void *v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t *v87;
  const void *v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  const void *v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  char *v104;
  char **v105;
  MIL::Attributes::BuildInfo *v106;
  const void *v107;
  std::string::size_type v108;
  std::__shared_weak_count *v109;
  std::string::size_type v110;
  const void *v111;
  const void *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  const void *v118;
  const void *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void **v123;
  void **v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  void *v128;
  const void *v129;
  uint64_t result;
  std::runtime_error *exception;
  _QWORD *v132;
  uint64_t *v133;
  uint64_t v134;
  const void *v136;
  std::string::size_type v137;
  std::__shared_weak_count *v138;
  const void *v139;
  char __p[23];
  char v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  std::string::size_type v154;
  std::__shared_weak_count *v155;
  std::string v156;
  std::string __dst;
  std::string v158;
  std::string v159;
  char **v160;
  char *v161[2];
  char **v162;
  char *v163[2];
  _QWORD v164[2];
  void **v165;
  const void *v166;
  const void *v167;

  E5RT::E5FunctionBuilder::Create(&v167);
  E5RT::E5BlockBuilder::Create(&v166);
  if (!v167)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error creating E5 function builder.");
    goto LABEL_196;
  }
  if (!v166)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error creating E5 block builder.");
LABEL_196:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v167 + 16))(v167, a2);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  E5AOT::E5BuilderForMIL::BuildOperandsForFunction(a1, a2, (uint64_t)v164);
  v132 = a4;
  v163[0] = 0;
  v163[1] = 0;
  v162 = v163;
  v8 = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 128))(a3);
  v11 = v8 + 1;
  v10 = *v8;
  if (*v8 != (const void **)(v8 + 1))
  {
    do
    {
      if (!E5Common::Utils::IsState((E5Common::Utils *)v10[7], v9))
        std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t **)&v162, v10 + 4, (uint64_t)(v10 + 4));
      v20 = (const void **)v10[1];
      if (v20)
      {
        do
        {
          v21 = (const void ***)v20;
          v20 = (const void **)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (const void ***)v10[2];
          v22 = *v21 == v10;
          v10 = (const void **)v21;
        }
        while (!v22);
      }
      v10 = (const void **)v21;
    }
    while (v21 != v11);
  }
  v161[0] = 0;
  v161[1] = 0;
  v160 = v161;
  v12 = (const void ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 128))(a3);
  v15 = v12 + 1;
  v14 = *v12;
  if (*v12 != (const void **)(v12 + 1))
  {
    do
    {
      if (E5Common::Utils::IsState((E5Common::Utils *)v14[7], v13))
        std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t **)&v160, v14 + 4, (uint64_t)(v14 + 4));
      v23 = (const void **)v14[1];
      if (v23)
      {
        do
        {
          v24 = (const void ***)v23;
          v23 = (const void **)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (const void ***)v14[2];
          v22 = *v24 == v14;
          v14 = (const void **)v24;
        }
        while (!v22);
      }
      v14 = (const void **)v24;
    }
    while (v24 != v15);
  }
  v133 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v134 = a3;
  v16 = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  v17 = **v16;
  v18 = (*v16)[1];
  if (v17 != v18)
  {
    v19 = 0;
    while (1)
    {
      v25 = *(char *)(a2 + 23);
      if (v25 >= 0)
        v26 = *(unsigned __int8 *)(a2 + 23);
      else
        v26 = *(_QWORD *)(a2 + 8);
      v27 = v26 + 4;
      if (v26 + 4 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v28 = *v17;
      if (v27 >= 0x17)
      {
        v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v27 | 7) != 0x17)
          v30 = v27 | 7;
        v31 = v30 + 1;
        p_dst = (std::string *)operator new(v30 + 1);
        __dst.__r_.__value_.__l.__size_ = v26 + 4;
        __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26 + 4;
        if (!v26)
          goto LABEL_41;
      }
      if (v25 >= 0)
        v32 = (const void *)a2;
      else
        v32 = *(const void **)a2;
      memmove(p_dst, v32, v26);
LABEL_41:
      strcpy((char *)p_dst + v26, "__Op");
      std::to_string(&v156, v19);
      if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v156;
      else
        v33 = (std::string *)v156.__r_.__value_.__r.__words[0];
      if ((v156.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v156.__r_.__value_.__r.__words[2]);
      else
        size = v156.__r_.__value_.__l.__size_;
      v35 = std::string::append(&__dst, (const std::string::value_type *)v33, size);
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v158.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v37 = std::string::append(&v158, "_");
      v159 = *v37;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v158.__r_.__value_.__l.__data_);
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_55:
          operator delete(v156.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_50;
          goto LABEL_56;
        }
      }
      else if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_55;
      }
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_50;
LABEL_56:
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_50:
      E5AOT::E5BuilderForMIL::BuildOperation(a1, v28, v164, (const void **)&v159.__r_.__value_.__l.__data_, &__dst);
      v38 = __dst.__r_.__value_.__r.__words[0];
      v158.__r_.__value_.__r.__words[0] = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
      {
        v39 = (std::__shared_weak_count *)operator new();
        v40 = __dst.__r_.__value_.__r.__words[0];
        v39->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2CF8;
        v39->__shared_weak_owners_ = 0;
        v39[1].__vftable = (std::__shared_weak_count_vtbl *)v40;
        v158.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
        v42 = v166;
        v154 = v38;
        v155 = v39;
        do
          v43 = __ldxr(p_shared_owners);
        while (__stxr(v43 + 1, p_shared_owners));
      }
      else
      {
        *(_OWORD *)&v158.__r_.__value_.__l.__data_ = 0uLL;
        v42 = v166;
        v154 = 0;
        v155 = 0;
      }
      (*(void (**)(const void *, std::string::size_type *))(*(_QWORD *)v42 + 16))(v42, &v154);
      v44 = v155;
      if (!v155)
        goto LABEL_62;
      v45 = (unint64_t *)&v155->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        v47 = (std::__shared_weak_count *)v158.__r_.__value_.__l.__size_;
        if (v158.__r_.__value_.__l.__size_)
        {
LABEL_63:
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
      }
      else
      {
LABEL_62:
        v47 = (std::__shared_weak_count *)v158.__r_.__value_.__l.__size_;
        if (v158.__r_.__value_.__l.__size_)
          goto LABEL_63;
      }
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v159.__r_.__value_.__l.__data_);
        ++v19;
        v17 += 2;
        if (v17 == v18)
          break;
      }
      else
      {
        ++v19;
        v17 += 2;
        if (v17 == v18)
          break;
      }
    }
  }
  v50 = (uint64_t *)v162;
  if (v162 != v163)
  {
    do
    {
      v53 = v166;
      v54 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v164, (uint64_t)(v50 + 4));
      if (!v54)
        goto LABEL_190;
      v55 = v54[6];
      v152 = v54[5];
      v153 = (std::__shared_weak_count *)v55;
      if (v55)
      {
        v56 = (unint64_t *)(v55 + 8);
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      (*(void (**)(const void *, uint64_t *, uint64_t *))(*(_QWORD *)v53 + 24))(v53, v50 + 4, &v152);
      v58 = v153;
      if (v153)
      {
        v59 = (unint64_t *)&v153->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = v167;
      v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v164, (uint64_t)(v50 + 4));
      if (!v62)
LABEL_190:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v63 = v62[6];
      v150 = v62[5];
      v151 = (std::__shared_weak_count *)v63;
      if (v63)
      {
        v64 = (unint64_t *)(v63 + 8);
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }
      (*(void (**)(const void *, uint64_t *, uint64_t *))(*(_QWORD *)v61 + 40))(v61, v50 + 4, &v150);
      v66 = v151;
      if (!v151)
        goto LABEL_91;
      v67 = (unint64_t *)&v151->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
        v69 = (char *)v50[1];
        if (!v69)
        {
          do
          {
LABEL_95:
            v70 = (char **)v50[2];
            v22 = *v70 == (char *)v50;
            v50 = (uint64_t *)v70;
          }
          while (!v22);
          goto LABEL_73;
        }
      }
      else
      {
LABEL_91:
        v69 = (char *)v50[1];
        if (!v69)
          goto LABEL_95;
      }
      do
      {
        v70 = (char **)v69;
        v69 = *(char **)v69;
      }
      while (v69);
LABEL_73:
      v50 = (uint64_t *)v70;
    }
    while (v70 != v163);
  }
  v52 = *v133;
  v51 = v133[1];
  while (v52 != v51)
  {
    v71 = v166;
    v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v164, v52);
    if (!v72)
      goto LABEL_191;
    v73 = v72[6];
    v148 = v72[5];
    v149 = (std::__shared_weak_count *)v73;
    if (v73)
    {
      v74 = (unint64_t *)(v73 + 8);
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
    }
    (*(void (**)(const void *, uint64_t, uint64_t *))(*(_QWORD *)v71 + 32))(v71, v52, &v148);
    v76 = v149;
    if (v149)
    {
      v77 = (unint64_t *)&v149->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v79 = v167;
    v80 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v164, v52);
    if (!v80)
LABEL_191:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v81 = v80[6];
    v146 = v80[5];
    v147 = (std::__shared_weak_count *)v81;
    if (v81)
    {
      v82 = (unint64_t *)(v81 + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    (*(void (**)(const void *, uint64_t, uint64_t *))(*(_QWORD *)v79 + 48))(v79, v52, &v146);
    v84 = v147;
    if (v147)
    {
      v85 = (unint64_t *)&v147->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    v52 += 24;
  }
  v87 = (uint64_t *)v160;
  if (v160 != v161)
  {
    do
    {
      v88 = v166;
      v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v164, (uint64_t)(v87 + 4));
      if (!v89)
        goto LABEL_192;
      v90 = v89[6];
      v144 = v89[5];
      v145 = (std::__shared_weak_count *)v90;
      if (v90)
      {
        v91 = (unint64_t *)(v90 + 8);
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      (*(void (**)(const void *, uint64_t *, uint64_t *))(*(_QWORD *)v88 + 40))(v88, v87 + 4, &v144);
      v93 = v145;
      if (v145)
      {
        v94 = (unint64_t *)&v145->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v96 = v167;
      v97 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v164, (uint64_t)(v87 + 4));
      if (!v97)
LABEL_192:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v98 = v97[6];
      v142 = v97[5];
      v143 = (std::__shared_weak_count *)v98;
      if (v98)
      {
        v99 = (unint64_t *)(v98 + 8);
        do
          v100 = __ldxr(v99);
        while (__stxr(v100 + 1, v99));
      }
      (*(void (**)(const void *, uint64_t *, uint64_t *))(*(_QWORD *)v96 + 56))(v96, v87 + 4, &v142);
      v101 = v143;
      if (!v143)
        goto LABEL_141;
      v102 = (unint64_t *)&v143->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
        v104 = (char *)v87[1];
        if (!v104)
        {
          do
          {
LABEL_145:
            v105 = (char **)v87[2];
            v22 = *v105 == (char *)v87;
            v87 = (uint64_t *)v105;
          }
          while (!v22);
          goto LABEL_123;
        }
      }
      else
      {
LABEL_141:
        v104 = (char *)v87[1];
        if (!v104)
          goto LABEL_145;
      }
      do
      {
        v105 = (char **)v104;
        v104 = *(char **)v104;
      }
      while (v104);
LABEL_123:
      v87 = (uint64_t *)v105;
    }
    while (v105 != v161);
  }
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 176))(v134))
    goto LABEL_153;
  MIL::Attributes::BuildInfo::Make();
  v141 = 5;
  strcpy(__p, "model");
  MIL::Attributes::BuildInfo::GetVersion();
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v159.__r_.__value_.__l.__size_)
    {
LABEL_150:
      operator delete(v159.__r_.__value_.__l.__data_);
      goto LABEL_151;
    }
LABEL_149:
    (*(void (**)(const void *, std::string *))(*(_QWORD *)v167 + 72))(v167, &v159);
    if ((SHIBYTE(v159.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_151;
    goto LABEL_150;
  }
  if (*((_BYTE *)&v159.__r_.__value_.__s + 23))
    goto LABEL_149;
LABEL_151:
  v106 = (MIL::Attributes::BuildInfo *)v158.__r_.__value_.__r.__words[0];
  v158.__r_.__value_.__r.__words[0] = 0;
  if (v106)
  {
    MIL::Attributes::BuildInfo::~BuildInfo(v106);
    MEMORY[0x19401CD90]();
  }
LABEL_153:
  v107 = v166;
  v166 = 0;
  v139 = v107;
  E5RT::E5BlockBuilder::Finish(&v139, &v158);
  v108 = v158.__r_.__value_.__r.__words[0];
  v159.__r_.__value_.__r.__words[0] = v158.__r_.__value_.__r.__words[0];
  if (v158.__r_.__value_.__r.__words[0])
  {
    v109 = (std::__shared_weak_count *)operator new();
    v110 = v158.__r_.__value_.__r.__words[0];
    v109->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2D68;
    v109->__shared_owners_ = 0;
    v109->__shared_weak_owners_ = 0;
    v109[1].__vftable = (std::__shared_weak_count_vtbl *)v110;
    v159.__r_.__value_.__l.__size_ = (std::string::size_type)v109;
    v158.__r_.__value_.__r.__words[0] = 0;
    v111 = v139;
    v139 = 0;
    if (!v111)
      goto LABEL_156;
    goto LABEL_155;
  }
  *(_OWORD *)&v159.__r_.__value_.__l.__data_ = 0uLL;
  v109 = 0;
  v158.__r_.__value_.__r.__words[0] = 0;
  v111 = v139;
  v139 = 0;
  if (v111)
LABEL_155:
    (*(void (**)(const void *))(*(_QWORD *)v111 + 8))(v111);
LABEL_156:
  v112 = v167;
  v137 = v108;
  v138 = v109;
  if (v109)
  {
    v113 = (unint64_t *)&v109->__shared_owners_;
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
  }
  (*(void (**)(const void *, std::string::size_type *))(*(_QWORD *)v112 + 24))(v112, &v137);
  v115 = v138;
  if (v138)
  {
    v116 = (unint64_t *)&v138->__shared_owners_;
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
    }
  }
  v118 = v167;
  v167 = 0;
  v136 = v118;
  E5RT::E5FunctionBuilder::Finish(&v136, v132);
  v119 = v136;
  v136 = 0;
  if (v119)
    (*(void (**)(const void *))(*(_QWORD *)v119 + 8))(v119);
  v120 = (std::__shared_weak_count *)v159.__r_.__value_.__l.__size_;
  if (v159.__r_.__value_.__l.__size_)
  {
    v121 = (unint64_t *)(v159.__r_.__value_.__l.__size_ + 8);
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v160, v161[0]);
  std::__tree<std::string>::destroy((uint64_t)&v162, v163[0]);
  v123 = v165;
  if (v165)
  {
    do
    {
      while (1)
      {
        v124 = (void **)*v123;
        v125 = (std::__shared_weak_count *)v123[6];
        if (v125)
        {
          v126 = (unint64_t *)&v125->__shared_owners_;
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        if (*((char *)v123 + 39) < 0)
          break;
        operator delete(v123);
        v123 = v124;
        if (!v124)
          goto LABEL_181;
      }
      operator delete(v123[2]);
      operator delete(v123);
      v123 = v124;
    }
    while (v124);
  }
LABEL_181:
  v128 = (void *)v164[0];
  v164[0] = 0;
  if (v128)
    operator delete(v128);
  v129 = v166;
  v166 = 0;
  if (v129)
    (*(void (**)(const void *))(*(_QWORD *)v129 + 8))(v129);
  result = (uint64_t)v167;
  v167 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_191109174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  if (*(char *)(v51 - 201) < 0)
    operator delete(*(void **)(v51 - 224));
  std::unique_ptr<MIL::Attributes::BuildInfo>::~unique_ptr[abi:ne180100]((MIL::Attributes::BuildInfo **)(v51 - 256));
  std::__tree<std::string>::destroy(v51 - 200, *(char **)(v51 - 192));
  std::__tree<std::string>::destroy(v51 - 176, *(char **)(v51 - 168));
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v51 - 152);
  v53 = *(_QWORD *)(v51 - 112);
  *(_QWORD *)(v51 - 112) = 0;
  if (v53)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    v54 = *(_QWORD *)(v51 - 104);
    *(_QWORD *)(v51 - 104) = 0;
    if (!v54)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v54 = *(_QWORD *)(v51 - 104);
    *(_QWORD *)(v51 - 104) = 0;
    if (!v54)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::BuildOperandsForFunction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD ***v8;
  uint64_t *v9;
  uint64_t Attribute;
  std::string::size_type v11;
  _QWORD *v12;
  std::string::size_type v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  MIL::IRNamedValueType **v33;
  MIL::IRNamedValueType **v34;
  MIL::IRArgument **v35;
  uint64_t Name;
  uint64_t v37;
  uint64_t v38;
  int v39;
  size_t v40;
  const void *v41;
  uint64_t *v42;
  int v43;
  size_t v44;
  const void *v45;
  size_t v46;
  int v47;
  _BOOL4 v48;
  BOOL v49;
  uint64_t *v50;
  int v51;
  size_t v52;
  const void *v53;
  size_t v54;
  int v55;
  _BOOL4 v56;
  MIL::IRValueType *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  std::string::size_type v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  uint64_t *v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *size;
  unint64_t *v75;
  unint64_t v76;
  std::string::size_type v77;
  MIL::IRValueType *Type;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  const std::string::value_type *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  std::string::size_type v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t *v98;
  __int128 v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  MIL::IRValueType *v111;
  unint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  std::string::size_type v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  __int128 v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::runtime_error *v134;
  int v135;
  const std::string::value_type *v136;
  std::string::size_type v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  __int128 v141;
  std::string *v142;
  __int128 v143;
  std::runtime_error *v144;
  std::string *v145;
  __int128 v146;
  int v147;
  const std::string::value_type *v148;
  std::string::size_type v149;
  std::string *v150;
  __int128 v151;
  std::string *v152;
  __int128 v153;
  std::runtime_error *v154;
  std::string *v155;
  __int128 v156;
  std::logic_error *exception;
  std::string *v158;
  __int128 v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v165;
  _QWORD *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  uint64_t v170;
  uint64_t v171;
  std::string v172;
  uint64_t v173[2];
  std::string v174;
  std::string v175;
  uint64_t v176;
  uint64_t v177;
  std::string v178;
  std::string v179;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v158 = std::string::append(&v178, " in program");
    v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
    v179.__r_.__value_.__r.__words[2] = v158->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v159;
    v158->__r_.__value_.__l.__size_ = 0;
    v158->__r_.__value_.__r.__words[2] = 0;
    v158->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v179);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35310, (void (*)(void *))MEMORY[0x1E0DE42E0]);
  }
  v5 = v4;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v167 = (_QWORD *)a3;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  v160 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 128))(v5);
  v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
  v8 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(a1 + 40), a2);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v176 = 0;
  v177 = 0;
  v179.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v179.__r_.__value_.__r.__words[1] = xmmword_191A71250;
  strcpy(v179.__r_.__value_.__l.__data_, "FlexibleShapeInformation");
  Attribute = MIL::IRObject::TryGetAttribute();
  operator delete(v179.__r_.__value_.__l.__data_);
  if (!Attribute)
  {
    v14 = **v8;
    v161 = (*v8)[1];
    if (v14 == v161)
      goto LABEL_159;
    goto LABEL_11;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  MIL::Attributes::FlexibleShapeInfo::Make();
  v11 = v179.__r_.__value_.__r.__words[0];
  if (v179.__r_.__value_.__r.__words[0])
  {
    v12 = (_QWORD *)operator new();
    v13 = v179.__r_.__value_.__r.__words[0];
    *v12 = &unk_1E2D36690;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v13;
  }
  else
  {
    v12 = 0;
  }
  v176 = v11;
  v177 = (uint64_t)v12;
  a3 = (uint64_t)v167;
  v14 = **v8;
  v161 = (*v8)[1];
  if (v14 != v161)
  {
LABEL_11:
    v165 = v9 + 5;
    v15 = v160 + 1;
    while (1)
    {
      v162 = v14;
      v16 = *v14;
      v17 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 160))(*v14);
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 176))(v16);
      std::operator+<char>();
      v19 = std::string::append(&v174, ", ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v175.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 56))(v16);
      v22 = *(char *)(v21 + 23);
      if (v22 >= 0)
        v23 = (const std::string::value_type *)v21;
      else
        v23 = *(const std::string::value_type **)v21;
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(v21 + 23);
      else
        v24 = *(_QWORD *)(v21 + 8);
      v25 = std::string::append(&v175, v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v178.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v27 = std::string::append(&v178, "]: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v179.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v178.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_22:
          v163 = v18;
          if ((SHIBYTE(v174.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_23;
          goto LABEL_27;
        }
      }
      else if ((SHIBYTE(v175.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_22;
      }
      operator delete(v175.__r_.__value_.__l.__data_);
      v163 = v18;
      if ((SHIBYTE(v174.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_23:
        v31 = (_QWORD *)*v17;
        v30 = v17 + 1;
        v29 = v31;
        if (v31 != v30)
          goto LABEL_30;
        goto LABEL_28;
      }
LABEL_27:
      operator delete(v174.__r_.__value_.__l.__data_);
      v32 = (_QWORD *)*v17;
      v30 = v17 + 1;
      v29 = v32;
      if (v32 != v30)
      {
        do
        {
LABEL_30:
          v35 = (MIL::IRArgument **)v29[7];
          if ((MIL::IRArgument **)v29[8] == v35)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          Name = MIL::IRArgument::GetName(*v35);
          v37 = Name;
          v38 = *v15;
          if (!*v15)
            goto LABEL_76;
          v39 = *(char *)(Name + 23);
          v40 = v39 >= 0 ? *(unsigned __int8 *)(Name + 23) : *(_QWORD *)(Name + 8);
          v41 = v39 >= 0 ? (const void *)Name : *(const void **)Name;
          v42 = v160 + 1;
          do
          {
            v43 = *(char *)(v38 + 55);
            if (v43 >= 0)
              v44 = *(unsigned __int8 *)(v38 + 55);
            else
              v44 = *(_QWORD *)(v38 + 40);
            if (v43 >= 0)
              v45 = (const void *)(v38 + 32);
            else
              v45 = *(const void **)(v38 + 32);
            if (v40 >= v44)
              v46 = v44;
            else
              v46 = v40;
            v47 = memcmp(v45, v41, v46);
            v48 = v44 < v40;
            if (v47)
              v48 = v47 < 0;
            v49 = !v48;
            if (v48)
              v50 = (uint64_t *)(v38 + 8);
            else
              v50 = (uint64_t *)v38;
            if (v49)
              v42 = (uint64_t *)v38;
            v38 = *v50;
          }
          while (*v50);
          if (v42 == v15)
            goto LABEL_76;
          v51 = *((char *)v42 + 55);
          if (v51 >= 0)
            v52 = *((unsigned __int8 *)v42 + 55);
          else
            v52 = v42[5];
          if (v51 >= 0)
            v53 = v42 + 4;
          else
            v53 = (const void *)v42[4];
          if (v52 >= v40)
            v54 = v40;
          else
            v54 = v52;
          v55 = memcmp(v41, v53, v54);
          v56 = v40 >= v52;
          if (v55)
            v56 = v55 >= 0;
          if (!v56)
          {
LABEL_76:
            a3 = (uint64_t)v167;
            if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v167, v37))
            {
              v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Topologically incorrect op ordering in function. ", (const void **)&v179.__r_.__value_.__l.__data_, &v172);
              v145 = std::string::append(&v172, "Argument ");
              v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
              v174.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v146;
              v145->__r_.__value_.__l.__size_ = 0;
              v145->__r_.__value_.__r.__words[2] = 0;
              v145->__r_.__value_.__r.__words[0] = 0;
              v147 = *(char *)(v37 + 23);
              if (v147 >= 0)
                v148 = (const std::string::value_type *)v37;
              else
                v148 = *(const std::string::value_type **)v37;
              if (v147 >= 0)
                v149 = *(unsigned __int8 *)(v37 + 23);
              else
                v149 = *(_QWORD *)(v37 + 8);
              v150 = std::string::append(&v174, v148, v149);
              v151 = *(_OWORD *)&v150->__r_.__value_.__l.__data_;
              v175.__r_.__value_.__r.__words[2] = v150->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v151;
              v150->__r_.__value_.__l.__size_ = 0;
              v150->__r_.__value_.__r.__words[2] = 0;
              v150->__r_.__value_.__r.__words[0] = 0;
              v152 = std::string::append(&v175, " consumed before it is produced.");
              v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
              v178.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v153;
              v152->__r_.__value_.__l.__size_ = 0;
              v152->__r_.__value_.__r.__words[2] = 0;
              v152->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v144, &v178);
              __cxa_throw(v144, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            goto LABEL_77;
          }
          v57 = (MIL::IRValueType *)v42[7];
          v58 = (std::__shared_weak_count *)v177;
          v173[0] = v176;
          v173[1] = v177;
          if (v177)
          {
            v59 = (unint64_t *)(v177 + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          E5AOT::E5BuilderForMIL::BuildOperand(a1, v37, v57, 0, 0, v173, &v175);
          v178.__r_.__value_.__r.__words[0] = v175.__r_.__value_.__r.__words[0];
          a3 = (uint64_t)v167;
          if (v175.__r_.__value_.__r.__words[0])
          {
            v61 = (_QWORD *)operator new();
            v62 = v175.__r_.__value_.__r.__words[0];
            *v61 = &unk_1E2DC2DA0;
            v61[1] = 0;
            v61[2] = 0;
            v61[3] = v62;
            v178.__r_.__value_.__l.__size_ = (std::string::size_type)v61;
            v175.__r_.__value_.__r.__words[0] = 0;
            if (!v58)
              goto LABEL_88;
          }
          else
          {
            *(_OWORD *)&v178.__r_.__value_.__l.__data_ = 0uLL;
            v175.__r_.__value_.__r.__words[0] = 0;
            if (!v58)
              goto LABEL_88;
          }
          p_shared_owners = (unint64_t *)&v58->__shared_owners_;
          do
            v66 = __ldaxr(p_shared_owners);
          while (__stlxr(v66 - 1, p_shared_owners));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
LABEL_88:
          v175.__r_.__value_.__r.__words[0] = v37;
          v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v167, v37, (uint64_t)&std::piecewise_construct, (__int128 **)&v175);
          v68 = *(_OWORD *)&v178.__r_.__value_.__l.__data_;
          if (v178.__r_.__value_.__l.__size_)
          {
            v69 = (unint64_t *)(v178.__r_.__value_.__l.__size_ + 8);
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
          v71 = (std::__shared_weak_count *)v67[6];
          *(_OWORD *)(v67 + 5) = v68;
          if (!v71)
            goto LABEL_95;
          v72 = (unint64_t *)&v71->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
            size = (std::__shared_weak_count *)v178.__r_.__value_.__l.__size_;
            if (v178.__r_.__value_.__l.__size_)
            {
LABEL_96:
              v75 = (unint64_t *)&size->__shared_owners_;
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
          }
          else
          {
LABEL_95:
            size = (std::__shared_weak_count *)v178.__r_.__value_.__l.__size_;
            if (v178.__r_.__value_.__l.__size_)
              goto LABEL_96;
          }
LABEL_77:
          v63 = (_QWORD *)v29[1];
          if (v63)
          {
            do
            {
              v64 = v63;
              v63 = (_QWORD *)*v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              v64 = (_QWORD *)v29[2];
              v49 = *v64 == (_QWORD)v29;
              v29 = v64;
            }
            while (!v49);
          }
          v29 = v64;
        }
        while (v64 != v30);
      }
LABEL_28:
      v34 = *(MIL::IRNamedValueType ***)v163;
      v33 = *(MIL::IRNamedValueType ***)(v163 + 8);
      while (v34 != v33)
      {
        v77 = MIL::IRNamedValueType::GetName(*v34);
        Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*v34);
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>((_QWORD *)a3, v77))
        {
          v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Output operand \"", (const void **)&v179.__r_.__value_.__l.__data_, &v172);
          v135 = *(char *)(v77 + 23);
          if (v135 >= 0)
            v136 = (const std::string::value_type *)v77;
          else
            v136 = *(const std::string::value_type **)v77;
          if (v135 >= 0)
            v137 = *(unsigned __int8 *)(v77 + 23);
          else
            v137 = *(_QWORD *)(v77 + 8);
          v138 = std::string::append(&v172, v136, v137);
          v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
          v174.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v139;
          v138->__r_.__value_.__l.__size_ = 0;
          v138->__r_.__value_.__r.__words[2] = 0;
          v138->__r_.__value_.__r.__words[0] = 0;
          v140 = std::string::append(&v174, "\"");
          v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
          v175.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v175.__r_.__value_.__l.__data_ = v141;
          v140->__r_.__value_.__l.__size_ = 0;
          v140->__r_.__value_.__r.__words[2] = 0;
          v140->__r_.__value_.__r.__words[0] = 0;
          v142 = std::string::append(&v175, "already produced by an earlier op in the function.");
          v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
          v178.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v178.__r_.__value_.__l.__data_ = v143;
          v142->__r_.__value_.__l.__size_ = 0;
          v142->__r_.__value_.__r.__words[2] = 0;
          v142->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v134, &v178);
          __cxa_throw(v134, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v80 = *v7;
        v79 = v7[1];
        if (*v7 != v79)
        {
          v81 = *(_BYTE *)(v77 + 23);
          if (v81 >= 0)
            v82 = *(unsigned __int8 *)(v77 + 23);
          else
            v82 = *(_QWORD *)(v77 + 8);
          if (v81 >= 0)
            v83 = (const std::string::value_type *)v77;
          else
            v83 = *(const std::string::value_type **)v77;
          do
          {
            v84 = *(unsigned __int8 *)(v80 + 23);
            if ((v84 & 0x80u) == 0)
              v85 = *(unsigned __int8 *)(v80 + 23);
            else
              v85 = *(_QWORD *)(v80 + 8);
            if (v85 == v82)
            {
              if ((v84 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v80, v83, *(_QWORD *)(v80 + 8)))
                  goto LABEL_123;
              }
              else
              {
                if (!*(_BYTE *)(v80 + 23))
                  goto LABEL_123;
                v86 = 0;
                while (*(unsigned __int8 *)(v80 + v86) == v83[v86])
                {
                  if (v84 == ++v86)
                    goto LABEL_123;
                }
              }
            }
            v80 += 24;
          }
          while (v80 != v79);
          v80 = v79;
LABEL_123:
          a3 = (uint64_t)v167;
        }
        if (v80 != v79)
        {
          v87 = 0;
          v88 = 0;
          v89 = (std::__shared_weak_count *)v177;
          v170 = v176;
          v171 = v177;
          if (!v177)
            goto LABEL_135;
          goto LABEL_133;
        }
        if (!std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v165, v77))
        {
          v87 = 0;
          v88 = 2;
          v89 = (std::__shared_weak_count *)v177;
          v170 = v176;
          v171 = v177;
          if (!v177)
            goto LABEL_135;
LABEL_133:
          v92 = (unint64_t *)&v89->__shared_owners_;
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
          goto LABEL_135;
        }
        v90 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(a1 + 40), a2);
        if (!v90
          || (v91 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v90 + 5, v77)) == 0)
        {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        v87 = v91[5];
        v88 = 1;
        v89 = (std::__shared_weak_count *)v177;
        v170 = v176;
        v171 = v177;
        if (v177)
          goto LABEL_133;
LABEL_135:
        E5AOT::E5BuilderForMIL::BuildOperand(a1, v77, Type, v88, v87, &v170, &v175);
        v178.__r_.__value_.__r.__words[0] = v175.__r_.__value_.__r.__words[0];
        if (v175.__r_.__value_.__r.__words[0])
        {
          v94 = (_QWORD *)operator new();
          v95 = v175.__r_.__value_.__r.__words[0];
          *v94 = &unk_1E2DC2DA0;
          v94[1] = 0;
          v94[2] = 0;
          v94[3] = v95;
          v178.__r_.__value_.__l.__size_ = (std::string::size_type)v94;
          v175.__r_.__value_.__r.__words[0] = 0;
          if (!v89)
            goto LABEL_143;
        }
        else
        {
          *(_OWORD *)&v178.__r_.__value_.__l.__data_ = 0uLL;
          v175.__r_.__value_.__r.__words[0] = 0;
          if (!v89)
            goto LABEL_143;
        }
        v96 = (unint64_t *)&v89->__shared_owners_;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
LABEL_143:
        v175.__r_.__value_.__r.__words[0] = v77;
        v98 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, v77, (uint64_t)&std::piecewise_construct, (__int128 **)&v175);
        v99 = *(_OWORD *)&v178.__r_.__value_.__l.__data_;
        if (v178.__r_.__value_.__l.__size_)
        {
          v100 = (unint64_t *)(v178.__r_.__value_.__l.__size_ + 8);
          do
            v101 = __ldxr(v100);
          while (__stxr(v101 + 1, v100));
        }
        v102 = (std::__shared_weak_count *)v98[6];
        *(_OWORD *)(v98 + 5) = v99;
        if (!v102)
          goto LABEL_150;
        v103 = (unint64_t *)&v102->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
          v105 = (std::__shared_weak_count *)v178.__r_.__value_.__l.__size_;
          if (!v178.__r_.__value_.__l.__size_)
            goto LABEL_102;
        }
        else
        {
LABEL_150:
          v105 = (std::__shared_weak_count *)v178.__r_.__value_.__l.__size_;
          if (!v178.__r_.__value_.__l.__size_)
            goto LABEL_102;
        }
        v106 = (unint64_t *)&v105->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
LABEL_102:
        v34 += 2;
      }
      if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v179.__r_.__value_.__l.__data_);
        v14 = v162 + 2;
        if (v162 + 2 == v161)
          break;
      }
      else
      {
        v14 = v162 + 2;
        if (v162 + 2 == v161)
          break;
      }
    }
  }
LABEL_159:
  v108 = (_QWORD *)*v160;
  if ((_QWORD *)*v160 != v160 + 1)
  {
    do
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>((_QWORD *)a3, (uint64_t)(v108 + 4)))
      {
        goto LABEL_163;
      }
      v111 = (MIL::IRValueType *)v108[7];
      v168 = v176;
      v169 = (std::__shared_weak_count *)v177;
      if (v177)
      {
        v112 = (unint64_t *)(v177 + 8);
        do
          v113 = __ldxr(v112);
        while (__stxr(v113 + 1, v112));
      }
      E5AOT::E5BuilderForMIL::BuildOperand(a1, (uint64_t)(v108 + 4), v111, 0, 0, &v168, &v178);
      v179.__r_.__value_.__r.__words[0] = v178.__r_.__value_.__r.__words[0];
      if (v178.__r_.__value_.__r.__words[0])
      {
        v114 = (_QWORD *)operator new();
        v115 = v178.__r_.__value_.__r.__words[0];
        *v114 = &unk_1E2DC2DA0;
        v114[1] = 0;
        v114[2] = 0;
        v114[3] = v115;
        v179.__r_.__value_.__l.__size_ = (std::string::size_type)v114;
        v178.__r_.__value_.__r.__words[0] = 0;
        v116 = v169;
        if (!v169)
          goto LABEL_180;
      }
      else
      {
        *(_OWORD *)&v179.__r_.__value_.__l.__data_ = 0uLL;
        v178.__r_.__value_.__r.__words[0] = 0;
        v116 = v169;
        if (!v169)
          goto LABEL_180;
      }
      v117 = (unint64_t *)&v116->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
LABEL_180:
      v178.__r_.__value_.__r.__words[0] = (std::string::size_type)(v108 + 4);
      v119 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (uint64_t)(v108 + 4), (uint64_t)&std::piecewise_construct, (__int128 **)&v178);
      v120 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
      if (v179.__r_.__value_.__l.__size_)
      {
        v121 = (unint64_t *)(v179.__r_.__value_.__l.__size_ + 8);
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      v123 = (std::__shared_weak_count *)v119[6];
      *(_OWORD *)(v119 + 5) = v120;
      if (!v123)
        goto LABEL_187;
      v124 = (unint64_t *)&v123->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
        v126 = (std::__shared_weak_count *)v179.__r_.__value_.__l.__size_;
        if (v179.__r_.__value_.__l.__size_)
        {
LABEL_188:
          v127 = (unint64_t *)&v126->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
      }
      else
      {
LABEL_187:
        v126 = (std::__shared_weak_count *)v179.__r_.__value_.__l.__size_;
        if (v179.__r_.__value_.__l.__size_)
          goto LABEL_188;
      }
LABEL_163:
      v109 = (_QWORD *)v108[1];
      if (v109)
      {
        do
        {
          v110 = v109;
          v109 = (_QWORD *)*v109;
        }
        while (v109);
      }
      else
      {
        do
        {
          v110 = (_QWORD *)v108[2];
          v49 = *v110 == (_QWORD)v108;
          v108 = v110;
        }
        while (!v49);
      }
      v108 = v110;
    }
    while (v110 != v160 + 1);
  }
  v130 = *v7;
  v129 = v7[1];
  if (*v7 != v129)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v167, v130))
      {
        v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v155 = std::string::append(&v178, " not encountered as output of any op.");
        v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
        v179.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v179.__r_.__value_.__l.__data_ = v156;
        v155->__r_.__value_.__l.__size_ = 0;
        v155->__r_.__value_.__r.__words[2] = 0;
        v155->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v154, &v179);
        __cxa_throw(v154, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v130 += 24;
    }
    while (v130 != v129);
  }
  v131 = (std::__shared_weak_count *)v177;
  if (v177)
  {
    v132 = (unint64_t *)(v177 + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
}

void sub_19110A278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;
  int v45;
  uint64_t v46;

  if (*(char *)(v46 - 105) < 0)
    operator delete(*(void **)(v46 - 128));
  if (*(char *)(v46 - 137) < 0)
  {
    operator delete(*(void **)(v46 - 160));
    if ((v45 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v45)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v44);
  _Unwind_Resume(a1);
}

uint64_t E5AOT::E5BuilderForMIL::BuildOperation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, const void **a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t *v13;
  uint64_t v16;
  BOOL v17;
  BOOL v38;
  uint64_t v40;
  uint64_t v41;
  std::runtime_error *exception;
  std::string v44;

  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v11 = v10;
  v12 = *((unsigned __int8 *)v10 + 23);
  if ((v12 & 0x80) == 0)
  {
    v13 = v10;
    switch(*((_BYTE *)v10 + 23))
    {
      case 0xF:
        goto LABEL_105;
      case 0x18:
        if (*v10 == 0x736F695F4C4D3545 && v10[1] == 0x695F7570632E3631 && v10[2] == 0x65636E657265666ELL)
          return E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation(a2, a3, a4, a5);
        goto LABEL_76;
      case 0x19:
        if (*v10 == 0x736F695F4C4D3545
          && v10[1] == 0x5F736E6E622E3631
          && v10[2] == 0x636E657265666E69
          && *((_BYTE *)v10 + 24) == 101)
        {
          return E5AOT::E5BuilderForMIL::BuildBnnsInferenceOperation(a2, a3, a4, a5);
        }
        v13 = v10;
        if (v12 == 15)
          goto LABEL_105;
        if (v12 != 24)
          goto LABEL_109;
LABEL_76:
        if (*v10 == 0x736F695F4C4D3545 && v10[1] == 0x695F656E612E3631 && v10[2] == 0x65636E657265666ELL)
          return E5AOT::E5BuilderForMIL::BuildAneInferenceOperation(a2, a3, a4, a5);
LABEL_95:
        v13 = v10;
        if (v12 == 15)
          goto LABEL_105;
        if (v12 != 24)
          goto LABEL_109;
        v38 = *v10 == 0x736F695F4C4D3545 && v10[1] == 0x695F636C6D2E3631;
        if (!v38 || v10[2] != 0x65636E657265666ELL)
          goto LABEL_109;
        return E5AOT::E5BuilderForMIL::BuildMlcInferenceOperation(a2, a3, a4, a5);
      case 0x1E:
        if (*v10 == 0x736F695F4C4D3545
          && v10[1] == 0x675F73706D2E3631
          && v10[2] == 0x666E695F68706172
          && *(_QWORD *)((char *)v10 + 22) == 0x65636E657265666ELL)
        {
          return E5AOT::E5BuilderForMIL::BuildMpsGraphInferenceOperation(a1, a2, a3, a4, a5);
        }
        goto LABEL_95;
      default:
        goto LABEL_109;
    }
  }
  v16 = v10[1];
  if (v16 == 24)
  {
    v17 = *(_QWORD *)*v10 == 0x736F695F4C4D3545 && *(_QWORD *)(*v10 + 8) == 0x695F7570632E3631;
    if (v17 && *(_QWORD *)(*v10 + 16) == 0x65636E657265666ELL)
      return E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation(a2, a3, a4, a5);
  }
  if (v16 == 25)
  {
    if (*(_QWORD *)*v10 == 0x736F695F4C4D3545
      && *(_QWORD *)(*v10 + 8) == 0x5F736E6E622E3631
      && *(_QWORD *)(*v10 + 16) == 0x636E657265666E69
      && *(_BYTE *)(*v10 + 24) == 101)
    {
      return E5AOT::E5BuilderForMIL::BuildBnnsInferenceOperation(a2, a3, a4, a5);
    }
    v16 = v10[1];
  }
  if (v16 == 24)
  {
    if (*(_QWORD *)*v10 == 0x736F695F4C4D3545
      && *(_QWORD *)(*v10 + 8) == 0x695F656E612E3631
      && *(_QWORD *)(*v10 + 16) == 0x65636E657265666ELL)
    {
      return E5AOT::E5BuilderForMIL::BuildAneInferenceOperation(a2, a3, a4, a5);
    }
    v16 = v10[1];
  }
  if (v16 == 30)
  {
    if (*(_QWORD *)*v10 == 0x736F695F4C4D3545
      && *(_QWORD *)(*v10 + 8) == 0x675F73706D2E3631
      && *(_QWORD *)(*v10 + 16) == 0x666E695F68706172
      && *(_QWORD *)(*v10 + 22) == 0x65636E657265666ELL)
    {
      return E5AOT::E5BuilderForMIL::BuildMpsGraphInferenceOperation(a1, a2, a3, a4, a5);
    }
    v16 = v10[1];
  }
  if (v16 == 24)
  {
    if (*(_QWORD *)*v10 == 0x736F695F4C4D3545
      && *(_QWORD *)(*v10 + 8) == 0x695F636C6D2E3631
      && *(_QWORD *)(*v10 + 16) == 0x65636E657265666ELL)
    {
      return E5AOT::E5BuilderForMIL::BuildMlcInferenceOperation(a2, a3, a4, a5);
    }
    v16 = v10[1];
  }
  if (v16 != 15)
    goto LABEL_109;
  v13 = (uint64_t *)*v10;
LABEL_105:
  v40 = *v13;
  v41 = *(uint64_t *)((char *)v13 + 7);
  if (v40 == 0x736F695F4C4D3545 && v41 == 0x747361632E363173)
    return E5AOT::E5BuilderForMIL::BuildCastOperation(a2, a3, a4, a5);
LABEL_109:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, "E5ML_ios16.eir_inference"))
    return E5AOT::E5BuilderForMIL::BuildEirInferenceOperation(a2, a3, a4, a5);
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, "E5ML_ios16.jit_call"))
    return E5AOT::E5BuilderForMIL::BuildJitCallOperation(a2, a3, a4, a5);
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, "E5ML_ios16.e5_minimal_cpu"))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v44);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return E5AOT::E5BuilderForMIL::BuildE5MinimalCpuOperation(a2, a3, a4, a5);
}

void sub_19110AC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void E5AOT::E5BuilderForMIL::BuildOperand(uint64_t a1@<X0>, uint64_t a2@<X1>, MIL::IRValueType *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  const MIL::IRValueType *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const MIL::IRValueType *v22;
  MIL::IRMemoryLayoutValueType *v23;
  MIL::IRTensorBufferValueType *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  const MIL::IRValueType *v29;
  MIL::IRMemoryLayoutValueType *v30;
  MIL::IRPixelBufferValueType *v31;
  MIL::IRStateValueType *v32;
  uint64_t WrappedType;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::runtime_error *exception;
  std::string v41;
  _QWORD v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;

  if (E5Common::Utils::IsTensor((uint64_t)a3))
  {
    v15 = MIL::IRValueType::AsTensorType(a3);
    v16 = (std::__shared_weak_count *)a6[1];
    v45 = *a6;
    v46 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorValueType>(a2, v15, a4, a5, (uint64_t)&v45, a7);
    v19 = v46;
    if (v46)
    {
      v20 = (unint64_t *)&v46->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
LABEL_16:
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else if (E5Common::Utils::IsTensorBuffer(a3, v14))
  {
    v23 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a3);
    v24 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v23);
    v25 = (std::__shared_weak_count *)a6[1];
    v43 = *a6;
    v44 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorBufferValueType>(v24, a2, a4, a5, &v43, a7);
    v19 = v44;
    if (v44)
    {
      v28 = (unint64_t *)&v44->__shared_owners_;
      do
        v21 = __ldaxr(v28);
      while (__stlxr(v21 - 1, v28));
      goto LABEL_16;
    }
  }
  else if (E5Common::Utils::IsPixelBuffer(a3, v22))
  {
    v30 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a3);
    v31 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v30);
    E5AOT::E5BuilderForMIL::BuildSurfaceOperand(v31, a2, a4, a5, a7);
  }
  else
  {
    if (!E5Common::Utils::IsState(a3, v29))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v41);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v32 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(a3);
    WrappedType = MIL::IRStateValueType::GetWrappedType(v32);
    v34 = *a6;
    v35 = (std::__shared_weak_count *)a6[1];
    v42[0] = v34;
    v42[1] = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    E5AOT::E5BuilderForMIL::BuildOperand(a1, a2, WrappedType, a4, a5, v42);
    if (v35)
    {
      v38 = (unint64_t *)&v35->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
}

void sub_19110AF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  void *v20;
  int v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

uint64_t E5AOT::E5BuilderForMIL::GetAllocOffsetFor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(a1 + 40), a2);
  if (!v4
    || (v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v4 + 5, a3)) == 0)
  {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v5[5];
}

uint64_t E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorValueType>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const void *v22;
  const void *v23;
  const void *v24;
  uint64_t result;
  const void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  const void *v29;
  MIL::Attributes::FlexibleShapeInfo *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;

  v10 = *(std::__shared_weak_count **)(a5 + 8);
  v30 = *(MIL::Attributes::FlexibleShapeInfo **)a5;
  v31 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  Espresso::AOT::BuildTensorDescriptor(a1, a2, &v30, &v32);
  v13 = v31;
  if (v31)
  {
    v14 = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  E5RT::E5OperandBuilder::Create(&v29);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v29 + 24))(v29, a1);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v29 + 32))(v29, a3);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v29 + 40))(v29, a4);
  v16 = v29;
  v27 = v32;
  if (v32)
  {
    v17 = (std::__shared_weak_count *)operator new();
    v18 = v32;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17[1].__vftable = (std::__shared_weak_count_vtbl *)v18;
  }
  else
  {
    v17 = 0;
  }
  v28 = v17;
  v32 = 0;
  (*(void (**)(const void *, uint64_t *))(*(_QWORD *)v16 + 16))(v16, &v27);
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v29;
  v29 = 0;
  v26 = v22;
  E5RT::E5OperandBuilder::Finish(&v26, a6);
  v23 = v26;
  v26 = 0;
  if (v23)
    (*(void (**)(const void *))(*(_QWORD *)v23 + 8))(v23);
  v24 = v29;
  v29 = 0;
  if (v24)
    (*(void (**)(const void *))(*(_QWORD *)v24 + 8))(v24);
  result = v32;
  v32 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110B1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  uint64_t v18;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    v17 = a13;
    if (!a13)
    {
LABEL_3:
      v18 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v17 = a13;
    if (!a13)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = a16;
  if (!a16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(exception_object);
}

uint64_t E5AOT::E5BuilderForMIL::BuildTensorOperand<MIL::IRTensorBufferValueType>@<X0>(MIL::IRTensorBufferValueType *this@<X2>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X5>, _QWORD *a6@<X8>)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t result;
  const void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD v28[2];
  std::__shared_weak_count *v29;
  uint64_t v30;

  v10 = (std::__shared_weak_count *)a5[1];
  v28[1] = *a5;
  v29 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  Espresso::AOT::BuildTensorDescriptor(this, a2, &v30);
  if (v29)
  {
    v13 = &v29->__shared_owners_;
    do
      v14 = __ldaxr((unint64_t *)v13);
    while (__stlxr(v14 - 1, (unint64_t *)v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  E5RT::E5OperandBuilder::Create(v28);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v28[0] + 24))(v28[0], a2);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v28[0] + 32))(v28[0], a3);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v28[0] + 40))(v28[0], a4);
  v15 = v28[0];
  v26 = v30;
  if (v30)
  {
    v16 = (std::__shared_weak_count *)operator new();
    v17 = v30;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3270;
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
  }
  else
  {
    v16 = 0;
  }
  v27 = v16;
  v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 16))(v15, &v26);
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (const void *)v28[0];
  v28[0] = 0;
  v25 = v21;
  E5RT::E5OperandBuilder::Finish(&v25, a6);
  v22 = v25;
  v25 = 0;
  if (v22)
    (*(void (**)(const void *))(*(_QWORD *)v22 + 8))(v22);
  v23 = v28[0];
  v28[0] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  result = v30;
  v30 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110B468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  uint64_t v18;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    v17 = a13;
    if (!a13)
    {
LABEL_3:
      v18 = a16;
      if (!a16)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v17 = a13;
    if (!a13)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = a16;
  if (!a16)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(exception_object);
}

uint64_t E5AOT::E5BuilderForMIL::BuildSurfaceOperand@<X0>(MIL::IRPixelBufferValueType *this@<X2>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t result;
  const void *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  const void *v22;
  uint64_t v23;

  Espresso::AOT::BuildSurfaceDescriptor(this, &v23);
  E5RT::E5OperandBuilder::Create(&v22);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v22 + 24))(v22, a2);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v22 + 32))(v22, a3);
  (*(void (**)(const void *, uint64_t))(*(_QWORD *)v22 + 40))(v22, a4);
  v9 = v22;
  v20 = v23;
  if (v23)
  {
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v23;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC32A8;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
  }
  else
  {
    v10 = 0;
  }
  v21 = v10;
  v23 = 0;
  (*(void (**)(const void *, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v20);
  v12 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v22;
  v22 = 0;
  v19 = v15;
  E5RT::E5OperandBuilder::Finish(&v19, a5);
  v16 = v19;
  v19 = 0;
  if (v16)
    (*(void (**)(const void *))(*(_QWORD *)v16 + 8))(v16);
  v17 = v22;
  v22 = 0;
  if (v17)
    (*(void (**)(const void *))(*(_QWORD *)v17 + 8))(v17);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110B6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  uint64_t v16;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    v15 = a13;
    if (!a13)
    {
LABEL_3:
      v16 = a14;
      if (!a14)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v15 = a13;
    if (!a13)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = a14;
  if (!a14)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

uint64_t E5AOT::E5BuilderForMIL::BuildCpuInferenceOperation@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, const void **a3@<X3>, _QWORD *a4@<X8>)
{
  double v8;
  int v9;
  size_t v10;
  unint64_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  char *v16;
  unint64_t *v17;
  void **v18;
  void **v19;
  const void *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  const void *v26;
  const void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t result;
  const void *v32;
  char *v33;
  std::__shared_weak_count *v34;
  char __p[19];
  char v36;
  std::string v37;
  char *v38;
  std::__shared_weak_count *v39;
  void **__dst;
  size_t v41;
  unint64_t v42;
  const void *v43;

  v8 = E5RT::E5OperationBuilder::Create(2, &v43);
  (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v43 + 16))(v43, 2, v8);
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = v10 + 12;
  if (v10 + 12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v41 = v10 + 12;
    v42 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v41 = 0;
    v42 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v42) = v10 + 12;
    if (!v10)
      goto LABEL_15;
  }
  if (v9 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  memmove(p_dst, v15, v10);
LABEL_15:
  strcpy((char *)p_dst + v10, "CpuInference");
  (*(void (**)(const void *, void ***))(*(_QWORD *)v43 + 24))(v43, &__dst);
  v16 = (char *)operator new(0x48uLL);
  *((_QWORD *)v16 + 1) = 0;
  v17 = (unint64_t *)(v16 + 8);
  *((_QWORD *)v16 + 2) = 0;
  *(_OWORD *)(v16 + 24) = 0u;
  v18 = (void **)(v16 + 24);
  *(_QWORD *)v16 = &unk_1E2DB55B8;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  v38 = v16 + 24;
  v39 = (std::__shared_weak_count *)v16;
  v36 = 16;
  strcpy(__p, "model_assets_url");
  if (v16[47] < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
  *((_QWORD *)v16 + 5) = *((_QWORD *)&v37.__r_.__value_.__l + 2);
  *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
  v37.__r_.__value_.__s.__data_[0] = 0;
  if (v36 < 0)
    operator delete(*(void **)__p);
  v36 = 18;
  strcpy(__p, "configuration_name");
  v19 = (void **)(v16 + 48);
  if (v16[71] < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
  *((_QWORD *)v16 + 8) = *((_QWORD *)&v37.__r_.__value_.__l + 2);
  *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
  v37.__r_.__value_.__s.__data_[0] = 0;
  if (v36 < 0)
    operator delete(*(void **)__p);
  v20 = v43;
  v33 = v16 + 24;
  v34 = (std::__shared_weak_count *)v16;
  do
    v21 = __ldxr(v17);
  while (__stxr(v21 + 1, v17));
  E5RT::E5OperationBuilder::SetOperationAttributes<CpuInferenceOpT>(v20, (uint64_t *)&v33);
  v23 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  E5AOT::E5BuilderForMIL::AddOperationInputsOutputs(v22, a1, (uint64_t)v43, a2);
  v26 = v43;
  v43 = 0;
  v32 = v26;
  E5RT::E5OperationBuilder::Finish(&v32, a4);
  v27 = v32;
  v32 = 0;
  if (v27)
    (*(void (**)(const void *))(*(_QWORD *)v27 + 8))(v27);
  v28 = v39;
  if (!v39)
    goto LABEL_36;
  v29 = (unint64_t *)&v39->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_36:
    if ((SHIBYTE(v42) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (SHIBYTE(v42) < 0)
LABEL_37:
    operator delete(__dst);
LABEL_38:
  result = (uint64_t)v43;
  v43 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110BAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v31;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
  {
    operator delete(__p);
    v31 = *(_QWORD *)(v29 - 88);
    *(_QWORD *)(v29 - 88) = 0;
    if (!v31)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v31 = *(_QWORD *)(v29 - 88);
    *(_QWORD *)(v29 - 88) = 0;
    if (!v31)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  _Unwind_Resume(a1);
}

uint64_t E5AOT::E5BuilderForMIL::BuildBnnsInferenceOperation@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, const void **a3@<X3>, _QWORD *a4@<X8>)
{
  double v8;
  int v9;
  size_t v10;
  unint64_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  MIL::IRValue *Attribute;
  uint64_t v17;
  uint64_t v18;
  MIL::IRValue *v19;
  uint64_t v20;
  uint64_t v21;
  MIL::IRValue *v22;
  char v23;
  char *v24;
  unint64_t *v25;
  _BYTE *v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  std::string::size_type v30;
  std::string *v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  const void *v42;
  const void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t result;
  std::runtime_error *exception;
  const void *v49;
  char *v50;
  std::__shared_weak_count *v51;
  void *v52[2];
  char v53;
  char *v54;
  std::__shared_weak_count *v55;
  void *__p[3];
  std::string __str;
  void **__dst;
  size_t v59;
  unint64_t v60;
  const void *v61;

  v8 = E5RT::E5OperationBuilder::Create(12, &v61);
  (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v61 + 16))(v61, 12, v8);
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = v10 + 16;
  if (v10 + 16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v59 = v10 + 16;
    v60 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v60) = v10 + 16;
    if (!v10)
      goto LABEL_15;
  }
  if (v9 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  memmove(p_dst, v15, v10);
LABEL_15:
  strcpy((char *)p_dst + v10, "BnnsCpuInference");
  (*(void (**)(const void *, void ***))(*(_QWORD *)v61 + 24))(v61, &__dst);
  strcpy((char *)__p, "function_name");
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "mil_program_url");
  Attribute = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
  if (Attribute)
  {
    v17 = MIL::IRValue::AsTensor(Attribute);
    v18 = MEMORY[0x19401C3DC](v17);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  v18 = 0;
  if (SHIBYTE(__p[2]) < 0)
LABEL_17:
    operator delete(__p[0]);
LABEL_18:
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "bnns_ir_program_url");
  v19 = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
  if (!v19)
  {
    v21 = 0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  v20 = MIL::IRValue::AsTensor(v19);
  v21 = MEMORY[0x19401C3DC](v20);
  if (SHIBYTE(__p[2]) < 0)
LABEL_20:
    operator delete(__p[0]);
LABEL_21:
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "allow_reshaping");
  v22 = (MIL::IRValue *)MIL::IRObject::GetAttribute();
  MIL::IRValue::AsTensor(v22);
  v23 = MIL::IRValue::GetScalar<BOOL>();
  v24 = (char *)operator new(0x60uLL);
  *((_QWORD *)v24 + 1) = 0;
  v25 = (unint64_t *)(v24 + 8);
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = &unk_1E2DB5708;
  *(_OWORD *)(v24 + 24) = 0u;
  v26 = v24 + 24;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_OWORD *)(v24 + 72) = 0u;
  *((_QWORD *)v24 + 11) = 0;
  v54 = v24 + 24;
  v55 = (std::__shared_weak_count *)v24;
  if (v21 && v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid program: Cannot provide both mil_program_url and bnns_ir_program_url arguments to e5 BNNS Op. This is probably an E5 defect. If you see this, please file a radar.");
    goto LABEL_71;
  }
  if (v21)
  {
    *v26 = 2;
    v27 = (std::string *)operator new();
    v28 = v27;
    if ((*(char *)(v21 + 23) & 0x80000000) == 0)
    {
      v29 = *(_OWORD *)v21;
      v30 = *(_QWORD *)(v21 + 16);
LABEL_33:
      v28->__r_.__value_.__r.__words[2] = v30;
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      goto LABEL_36;
    }
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
    goto LABEL_36;
  }
  if (!v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid program: Must provide either mil_program_url or bnns_ir_program_url argument to e5 BNNS Op. This is probably an E5 defect. If you see this, please file a radar.");
LABEL_71:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *v26 = 1;
  v31 = (std::string *)operator new();
  v28 = v31;
  if ((*(char *)(v18 + 23) & 0x80000000) == 0)
  {
    v29 = *(_OWORD *)v18;
    v30 = *(_QWORD *)(v18 + 16);
    goto LABEL_33;
  }
  std::string::__init_copy_ctor_external(v31, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
LABEL_36:
  *((_QWORD *)v24 + 4) = v28;
  std::string::operator=((std::string *)(v24 + 40), &__str);
  v24[64] = v23;
  v53 = 12;
  strcpy((char *)v52, "callee_names");
  v32 = (void **)(v24 + 72);
  v33 = *((_QWORD *)v24 + 9);
  if (v33)
  {
    v34 = *((_QWORD *)v24 + 10);
    v35 = (void *)*((_QWORD *)v24 + 9);
    if (v34 != v33)
    {
      do
      {
        if (*(char *)(v34 - 1) < 0)
          operator delete(*(void **)(v34 - 24));
        v34 -= 24;
      }
      while (v34 != v33);
      v35 = *v32;
    }
    *((_QWORD *)v24 + 10) = v33;
    operator delete(v35);
    *v32 = 0;
    *((_QWORD *)v24 + 10) = 0;
    *((_QWORD *)v24 + 11) = 0;
  }
  *(_OWORD *)(v24 + 72) = *(_OWORD *)__p;
  *((void **)v24 + 11) = __p[2];
  memset(__p, 0, sizeof(__p));
  if (v53 < 0)
    operator delete(v52[0]);
  v36 = v61;
  v50 = v24 + 24;
  v51 = (std::__shared_weak_count *)v24;
  do
    v37 = __ldxr(v25);
  while (__stxr(v37 + 1, v25));
  E5RT::E5OperationBuilder::SetOperationAttributes<BnnsCpuInferenceOpT>(v36, (uint64_t *)&v50);
  v39 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  E5AOT::E5BuilderForMIL::AddOperationInputsOutputs(v38, a1, (uint64_t)v61, a2);
  v42 = v61;
  v61 = 0;
  v49 = v42;
  E5RT::E5OperationBuilder::Finish(&v49, a4);
  v43 = v49;
  v49 = 0;
  if (v43)
    (*(void (**)(const void *))(*(_QWORD *)v43 + 8))(v43);
  v44 = v55;
  if (!v55)
    goto LABEL_59;
  v45 = (unint64_t *)&v55->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_60:
      if ((SHIBYTE(v60) & 0x80000000) == 0)
        goto LABEL_61;
      goto LABEL_66;
    }
  }
  else
  {
LABEL_59:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_60;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
LABEL_61:
    result = (uint64_t)v61;
    v61 = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
LABEL_66:
  operator delete(__dst);
  result = (uint64_t)v61;
  v61 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110C150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;

  MEMORY[0x19401CD90](v37, 0x1012C40EC159624);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a31 < 0)
    operator delete(__p);
  if (a37 < 0)
  {
    operator delete(a32);
    v40 = *(_QWORD *)(v38 - 88);
    *(_QWORD *)(v38 - 88) = 0;
    if (!v40)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v40 = *(_QWORD *)(v38 - 88);
    *(_QWORD *)(v38 - 88) = 0;
    if (!v40)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  _Unwind_Resume(a1);
}

uint64_t E5AOT::E5BuilderForMIL::BuildAneInferenceOperation@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, const void **a3@<X3>, _QWORD *a4@<X8>)
{
  double v8;
  int v9;
  size_t v10;
  unint64_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  char *v16;
  unint64_t *v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  const void *v30;
  const void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t result;
  const void *v36;
  char *v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;
  std::string __str;
  char *v42;
  std::__shared_weak_count *v43;
  void **__dst;
  size_t v45;
  unint64_t v46;
  const void *v47;

  v8 = E5RT::E5OperationBuilder::Create(1, &v47);
  (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v47 + 16))(v47, 1, v8);
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = v10 + 12;
  if (v10 + 12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v45 = v10 + 12;
    v46 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v45 = 0;
    v46 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v46) = v10 + 12;
    if (!v10)
      goto LABEL_15;
  }
  if (v9 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  memmove(p_dst, v15, v10);
LABEL_15:
  strcpy((char *)p_dst + v10, "AneInference");
  (*(void (**)(const void *, void ***))(*(_QWORD *)v47 + 24))(v47, &__dst);
  v16 = (char *)operator new(0x68uLL);
  *((_QWORD *)v16 + 1) = 0;
  v17 = (unint64_t *)(v16 + 8);
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &unk_1E2DB5580;
  *(_OWORD *)(v16 + 24) = 0u;
  v18 = (void **)(v16 + 24);
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  v42 = v16 + 24;
  v43 = (std::__shared_weak_count *)v16;
  v40 = 11;
  strcpy((char *)__p, "program_url");
  if (v16[47] < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *((_QWORD *)v16 + 5) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (v40 < 0)
    operator delete(__p[0]);
  v40 = 14;
  strcpy((char *)__p, "procedure_name");
  v19 = (void **)(v16 + 48);
  if (v16[71] < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *((_QWORD *)v16 + 8) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (v40 < 0)
    operator delete(__p[0]);
  v40 = 6;
  strcpy((char *)__p, "ane_id");
  *((_DWORD *)v16 + 18) = std::stoul(&__str, 0, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v40 & 0x80000000) == 0)
      goto LABEL_25;
  }
  else if ((v40 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(__p[0]);
LABEL_25:
  v40 = 15;
  strcpy((char *)__p, "mutable_weights");
  v20 = (void **)(v16 + 80);
  v21 = *((_QWORD *)v16 + 10);
  if (v21)
  {
    v22 = *((_QWORD *)v16 + 11);
    v23 = (void *)*((_QWORD *)v16 + 10);
    if (v22 != v21)
    {
      do
      {
        if (*(char *)(v22 - 1) < 0)
          operator delete(*(void **)(v22 - 24));
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = *v20;
    }
    *((_QWORD *)v16 + 11) = v21;
    operator delete(v23);
    *v20 = 0;
    *((_QWORD *)v16 + 11) = 0;
    *((_QWORD *)v16 + 12) = 0;
  }
  *(std::string *)(v16 + 80) = __str;
  memset(&__str, 0, sizeof(__str));
  if (v40 < 0)
    operator delete(__p[0]);
  v24 = v47;
  v37 = v16 + 24;
  v38 = (std::__shared_weak_count *)v16;
  do
    v25 = __ldxr(v17);
  while (__stxr(v25 + 1, v17));
  E5RT::E5OperationBuilder::SetOperationAttributes<AneInferenceOpT>(v24, (uint64_t *)&v37);
  v27 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  E5AOT::E5BuilderForMIL::AddOperationInputsOutputs(v26, a1, (uint64_t)v47, a2);
  v30 = v47;
  v47 = 0;
  v36 = v30;
  E5RT::E5OperationBuilder::Finish(&v36, a4);
  v31 = v36;
  v36 = 0;
  if (v31)
    (*(void (**)(const void *))(*(_QWORD *)v31 + 8))(v31);
  v32 = v43;
  if (!v43)
    goto LABEL_48;
  v33 = (unint64_t *)&v43->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_48:
    if ((SHIBYTE(v46) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (SHIBYTE(v46) < 0)
LABEL_49:
    operator delete(__dst);
LABEL_50:
  result = (uint64_t)v47;
  v47 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110C728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v34;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a32 < 0)
  {
    operator delete(__p);
    v34 = *(_QWORD *)(v32 - 88);
    *(_QWORD *)(v32 - 88) = 0;
    if (!v34)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v34 = *(_QWORD *)(v32 - 88);
    *(_QWORD *)(v32 - 88) = 0;
    if (!v34)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  _Unwind_Resume(a1);
}

uint64_t E5AOT::E5BuilderForMIL::BuildMpsGraphInferenceOperation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, const void **a4@<X3>, _QWORD *a5@<X8>)
{
  double v10;
  int v11;
  size_t v12;
  unint64_t v13;
  void **p_dst;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  char *v18;
  unint64_t *v19;
  void **v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t *v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  const void *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  const void *v37;
  const void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t result;
  const void *v43;
  char *v44;
  std::__shared_weak_count *v45;
  char __p[20];
  char v47;
  std::string __str;
  char *v49;
  std::__shared_weak_count *v50;
  void **__dst;
  size_t v52;
  unint64_t v53;
  const void *v54;

  v10 = E5RT::E5OperationBuilder::Create(8, &v54);
  (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v54 + 16))(v54, 8, v10);
  v11 = *((char *)a4 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a4 + 23);
  else
    v12 = (size_t)a4[1];
  v13 = v12 + 17;
  if (v12 + 17 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    p_dst = (void **)operator new(v15 + 1);
    v52 = v12 + 17;
    v53 = v16 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v52 = 0;
    v53 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v53) = v12 + 17;
    if (!v12)
      goto LABEL_15;
  }
  if (v11 >= 0)
    v17 = a4;
  else
    v17 = *a4;
  memmove(p_dst, v17, v12);
LABEL_15:
  strcpy((char *)p_dst + v12, "MpsGraphInference");
  (*(void (**)(const void *, void ***))(*(_QWORD *)v54 + 24))(v54, &__dst);
  v18 = (char *)operator new(0x70uLL);
  *((_QWORD *)v18 + 1) = 0;
  v19 = (unint64_t *)(v18 + 8);
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &unk_1E2DB57B0;
  *(_OWORD *)(v18 + 24) = 0u;
  v20 = (void **)(v18 + 24);
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *((_QWORD *)v18 + 13) = 0;
  v49 = v18 + 24;
  v50 = (std::__shared_weak_count *)v18;
  v47 = 11;
  strcpy(__p, "program_url");
  if (v18[47] < 0)
    operator delete(*v20);
  *(_OWORD *)v20 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *((_QWORD *)v18 + 5) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (v47 < 0)
    operator delete(*(void **)__p);
  v47 = 13;
  strcpy(__p, "function_name");
  v21 = (void **)(v18 + 48);
  if (v18[71] < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *((_QWORD *)v18 + 8) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
  __str.__r_.__value_.__s.__data_[0] = 0;
  if (v47 < 0)
    operator delete(*(void **)__p);
  v47 = 15;
  strcpy(__p, "gpu_registry_id");
  *((_QWORD *)v18 + 9) = std::stoull(&__str, 0, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v47 & 0x80000000) == 0)
      goto LABEL_25;
  }
  else if ((v47 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(*(void **)__p);
LABEL_25:
  v47 = 12;
  strcpy(__p, "callee_names");
  v22 = (void **)(v18 + 88);
  v23 = *((_QWORD *)v18 + 11);
  if (v23)
  {
    v24 = *((_QWORD *)v18 + 12);
    v25 = (void *)*((_QWORD *)v18 + 11);
    if (v24 != v23)
    {
      do
      {
        if (*(char *)(v24 - 1) < 0)
          operator delete(*(void **)(v24 - 24));
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = *v22;
    }
    *((_QWORD *)v18 + 12) = v23;
    operator delete(v25);
    *v22 = 0;
    *((_QWORD *)v18 + 12) = 0;
    *((_QWORD *)v18 + 13) = 0;
  }
  *(std::string *)(v18 + 88) = __str;
  memset(&__str, 0, sizeof(__str));
  if (v47 < 0)
    operator delete(*(void **)__p);
  v26 = (_QWORD *)(a1 + 80);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&__str, "built-for-profiling");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v26, (uint64_t)&__str))
  {
    v30 = 0;
    goto LABEL_49;
  }
  v47 = 19;
  strcpy(__p, "built-for-profiling");
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v26, (uint64_t)__p);
  if (!v27)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v28 = v27 + 5;
  v29 = *((char *)v27 + 63);
  if (v29 < 0)
  {
    if (v27[6] != 4)
      goto LABEL_47;
    v28 = (_QWORD *)*v28;
  }
  else if (v29 != 4)
  {
LABEL_47:
    v30 = 0;
    if ((v47 & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  v30 = *(_DWORD *)v28 == 1702195828;
  if ((v47 & 0x80000000) == 0)
    goto LABEL_49;
LABEL_48:
  operator delete(*(void **)__p);
LABEL_49:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v18[80] = v30;
  v31 = v54;
  v44 = v18 + 24;
  v45 = (std::__shared_weak_count *)v18;
  do
    v32 = __ldxr(v19);
  while (__stxr(v32 + 1, v19));
  E5RT::E5OperationBuilder::SetOperationAttributes<MpsGraphInferenceOpT>(v31, (uint64_t *)&v44);
  v34 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  E5AOT::E5BuilderForMIL::AddOperationInputsOutputs(v33, a2, (uint64_t)v54, a3);
  v37 = v54;
  v54 = 0;
  v43 = v37;
  E5RT::E5OperationBuilder::Finish(&v43, a5);
  v38 = v43;
  v43 = 0;
  if (v38)
    (*(void (**)(const void *))(*(_QWORD *)v38 + 8))(v38);
  v39 = v50;
  if (!v50)
    goto LABEL_64;
  v40 = (unint64_t *)&v50->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_64:
    if ((SHIBYTE(v53) & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (SHIBYTE(v53) < 0)
LABEL_65:
    operator delete(__dst);
LABEL_66:
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110CDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v37;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a35 < 0)
  {
    operator delete(__p);
    v37 = *(_QWORD *)(v35 - 96);
    *(_QWORD *)(v35 - 96) = 0;
    if (v37)
      goto LABEL_5;
  }
  else
  {
    v37 = *(_QWORD *)(v35 - 96);
    *(_QWORD *)(v35 - 96) = 0;
    if (v37)
    {
LABEL_5:
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_19110CEB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 96);
  *(_QWORD *)(v0 - 96) = 0;
  if (v1)
    JUMPOUT(0x19110CE8CLL);
  JUMPOUT(0x19110CEACLL);
}

uint64_t E5AOT::E5BuilderForMIL::BuildMlcInferenceOperation@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, const void **a3@<X3>, _QWORD *a4@<X8>)
{
  double v8;
  int v9;
  size_t v10;
  unint64_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  void **v18;
  const void *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  const void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t result;
  const void *v31;
  char *v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  char v35;
  std::string v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  void **__dst;
  size_t v40;
  unint64_t v41;
  const void *v42;

  v8 = E5RT::E5OperationBuilder::Create(7, &v42);
  (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v42 + 16))(v42, 7, v8);
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = v10 + 12;
  if (v10 + 12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v40 = v10 + 12;
    v41 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v40 = 0;
    v41 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v41) = v10 + 12;
    if (!v10)
      goto LABEL_15;
  }
  if (v9 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  memmove(p_dst, v15, v10);
LABEL_15:
  strcpy((char *)p_dst + v10, "MlcInference");
  (*(void (**)(const void *, void ***))(*(_QWORD *)v42 + 24))(v42, &__dst);
  v16 = (std::__shared_weak_count *)operator new(0x30uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB56D0;
  v16[1].__vftable = 0;
  v18 = (void **)&v16[1].__vftable;
  v16[1].__shared_owners_ = 0;
  v16[1].__shared_weak_owners_ = 0;
  v37 = v16 + 1;
  v38 = v16;
  v35 = 15;
  strcpy((char *)__p, "mlc_binary_path");
  if (SHIBYTE(v16[1].__shared_weak_owners_) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
  v16[1].__shared_weak_owners_ = v36.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v36.__r_.__value_.__s + 23) = 0;
  v36.__r_.__value_.__s.__data_[0] = 0;
  if (v35 < 0)
    operator delete(__p[0]);
  v19 = v42;
  v32 = (char *)&v16[1];
  v33 = v16;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  E5RT::E5OperationBuilder::SetOperationAttributes<MlcCpuInferenceOpT>(v19, (uint64_t *)&v32);
  v22 = v33;
  if (v33)
  {
    v23 = (unint64_t *)&v33->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  E5AOT::E5BuilderForMIL::AddOperationInputsOutputs(v21, a1, (uint64_t)v42, a2);
  v25 = v42;
  v42 = 0;
  v31 = v25;
  E5RT::E5OperationBuilder::Finish(&v31, a4);
  v26 = v31;
  v31 = 0;
  if (v26)
    (*(void (**)(const void *))(*(_QWORD *)v26 + 8))(v26);
  v27 = v38;
  if (!v38)
    goto LABEL_32;
  v28 = (unint64_t *)&v38->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_32:
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (SHIBYTE(v41) < 0)
LABEL_33:
    operator delete(__dst);
LABEL_34:
  result = (uint64_t)v42;
  v42 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110D1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v31;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
  {
    operator delete(__p);
    v31 = *(_QWORD *)(v29 - 88);
    *(_QWORD *)(v29 - 88) = 0;
    if (v31)
      goto LABEL_5;
  }
  else
  {
    v31 = *(_QWORD *)(v29 - 88);
    *(_QWORD *)(v29 - 88) = 0;
    if (v31)
    {
LABEL_5:
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_19110D254()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 88);
  *(_QWORD *)(v0 - 88) = 0;
  if (v1)
    JUMPOUT(0x19110D22CLL);
  JUMPOUT(0x19110D24CLL);
}

void sub_19110D268()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 88);
  *(_QWORD *)(v0 - 88) = 0;
  if (v1)
    JUMPOUT(0x19110D22CLL);
  JUMPOUT(0x19110D24CLL);
}

uint64_t E5AOT::E5BuilderForMIL::BuildCastOperation@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, const void **a3@<X3>, _QWORD *a4@<X8>)
{
  double v8;
  int v9;
  size_t v10;
  unint64_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  char *v16;
  unint64_t *v17;
  MIL::IRValue *Attribute;
  const void *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const void *v25;
  const void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t result;
  const void *v34;
  char *v35;
  std::__shared_weak_count *v36;
  MIL::IRValue *v37;
  std::__shared_weak_count *v38;
  char __p[18];
  char v40;
  char *v41;
  std::__shared_weak_count *v42;
  void **__dst;
  size_t v44;
  unint64_t v45;
  const void *v46;

  v8 = E5RT::E5OperationBuilder::Create(3, &v46);
  (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v46 + 16))(v46, 3, v8);
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = v10 + 4;
  if (v10 + 4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v44 = v10 + 4;
    v45 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v44 = 0;
    v45 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v45) = v10 + 4;
    if (!v10)
      goto LABEL_15;
  }
  if (v9 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  memmove(p_dst, v15, v10);
LABEL_15:
  strcpy((char *)p_dst + v10, "Cast");
  (*(void (**)(const void *, void ***))(*(_QWORD *)v46 + 24))(v46, &__dst);
  v16 = (char *)operator new(0x38uLL);
  *((_QWORD *)v16 + 1) = 0;
  v17 = (unint64_t *)(v16 + 8);
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &unk_1E2DB5970;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  v41 = v16 + 24;
  v42 = (std::__shared_weak_count *)v16;
  v40 = 16;
  strcpy(__p, "execution_device");
  Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute();
  MIL::IRValue::AsTensor(Attribute);
  *((_DWORD *)v16 + 6) = MIL::IRValue::GetScalar<unsigned int>();
  if (v40 < 0)
    operator delete(*(void **)__p);
  v40 = 17;
  strcpy(__p, "output_alignments");
  MIL::IRObject::TryGetAttributeSharedPtr();
  if (v37)
  {
    Espresso::AOT::MakeVectorFromMILValue<unsigned long long>(v37, __p);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)v16 + 4, *(char **)__p, *(char **)&__p[8], (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
  }
  v19 = v46;
  v35 = v16 + 24;
  v36 = (std::__shared_weak_count *)v16;
  do
    v20 = __ldxr(v17);
  while (__stxr(v20 + 1, v17));
  E5RT::E5OperationBuilder::SetOperationAttributes<CastOpT>(v19, (uint64_t *)&v35);
  v22 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  E5AOT::E5BuilderForMIL::AddOperationInputsOutputs(v21, a1, (uint64_t)v46, a2);
  v25 = v46;
  v46 = 0;
  v34 = v25;
  E5RT::E5OperationBuilder::Finish(&v34, a4);
  v26 = v34;
  v34 = 0;
  if (v26)
    (*(void (**)(const void *))(*(_QWORD *)v26 + 8))(v26);
  v27 = v38;
  if (v38)
  {
    v28 = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v42;
  if (!v42)
    goto LABEL_38;
  v31 = (unint64_t *)&v42->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_38:
    if ((SHIBYTE(v45) & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if (SHIBYTE(v45) < 0)
LABEL_39:
    operator delete(__dst);
LABEL_40:
  result = (uint64_t)v46;
  v46 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110D5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v31;

  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
  {
    operator delete(a24);
    v31 = *(_QWORD *)(v29 - 88);
    *(_QWORD *)(v29 - 88) = 0;
    if (!v31)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v31 = *(_QWORD *)(v29 - 88);
    *(_QWORD *)(v29 - 88) = 0;
    if (!v31)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  _Unwind_Resume(a1);
}

uint64_t E5AOT::E5BuilderForMIL::BuildEirInferenceOperation@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, const void **a3@<X3>, _QWORD *a4@<X8>)
{
  double v8;
  int v9;
  size_t v10;
  unint64_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  char *v16;
  unint64_t *v17;
  void **v18;
  uint64_t Attribute;
  uint64_t v20;
  MIL::IRValue *v21;
  char *v22;
  void **v23;
  uint64_t v24;
  MIL::IRValue *v25;
  MIL::IRListValue *v26;
  uint64_t Values;
  uint64_t v28;
  MIL::IRValue **v29;
  MIL::IRValue **v30;
  std::string::size_type v31;
  int v32;
  int v33;
  std::string::size_type size;
  void *v35;
  std::string::size_type v36;
  uint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  char *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  const void *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  const void *v58;
  const void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t result;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  const void *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  char __p[19];
  char v73;
  std::string v74;
  char *v75;
  std::__shared_weak_count *v76;
  void **__dst;
  size_t v78;
  unint64_t v79;
  const void *v80;

  v8 = E5RT::E5OperationBuilder::Create(11, &v80);
  (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v80 + 16))(v80, 11, v8);
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = v10 + 12;
  if (v10 + 12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v78 = v10 + 12;
    v79 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v78 = 0;
    v79 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v79) = v10 + 12;
    if (!v10)
      goto LABEL_15;
  }
  if (v9 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  memmove(p_dst, v15, v10);
LABEL_15:
  strcpy((char *)p_dst + v10, "EirInference");
  (*(void (**)(const void *, void ***))(*(_QWORD *)v80 + 24))(v80, &__dst);
  v16 = (char *)operator new(0x68uLL);
  *((_QWORD *)v16 + 1) = 0;
  v17 = (unint64_t *)(v16 + 8);
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &unk_1E2DB5628;
  *(_OWORD *)(v16 + 24) = 0u;
  v18 = (void **)(v16 + 24);
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  v75 = v16 + 24;
  v76 = (std::__shared_weak_count *)v16;
  v73 = 16;
  strcpy(__p, "model_assets_url");
  if (v16[47] < 0)
    operator delete(*v18);
  v67 = (uint64_t)(v16 + 24);
  v68 = (std::__shared_weak_count *)v16;
  *(_OWORD *)v18 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
  *((_QWORD *)v16 + 5) = *((_QWORD *)&v74.__r_.__value_.__l + 2);
  *((_BYTE *)&v74.__r_.__value_.__s + 23) = 0;
  v74.__r_.__value_.__s.__data_[0] = 0;
  if (v73 < 0)
    operator delete(*(void **)__p);
  *((_BYTE *)&v74.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v74, "backend_requested");
  Attribute = MIL::IRObject::TryGetAttribute();
  v20 = Attribute;
  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (Attribute)
      goto LABEL_21;
LABEL_24:
    v22 = v16;
    *((_DWORD *)v16 + 12) = 3;
    goto LABEL_25;
  }
  operator delete(v74.__r_.__value_.__l.__data_);
  if (!v20)
    goto LABEL_24;
LABEL_21:
  *((_BYTE *)&v74.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v74, "backend_requested");
  v21 = (MIL::IRValue *)MIL::IRObject::GetAttribute();
  MIL::IRValue::AsTensor(v21);
  v22 = v16;
  *((_DWORD *)v16 + 12) = MIL::IRValue::GetScalar<unsigned int>();
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
LABEL_25:
  v73 = 18;
  strcpy(__p, "configuration_name");
  v23 = (void **)(v22 + 56);
  if (v22[79] < 0)
    operator delete(*v23);
  *(_OWORD *)v23 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
  *((_QWORD *)v22 + 9) = *((_QWORD *)&v74.__r_.__value_.__l + 2);
  *((_BYTE *)&v74.__r_.__value_.__s + 23) = 0;
  v74.__r_.__value_.__s.__data_[0] = 0;
  if (v73 < 0)
    operator delete(*(void **)__p);
  *((_BYTE *)&v74.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&v74, "allowed_backends");
  v24 = MIL::IRObject::TryGetAttribute();
  v25 = (MIL::IRValue *)v24;
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v74.__r_.__value_.__l.__data_);
    if (!v25)
      goto LABEL_59;
  }
  else if (!v24)
  {
    goto LABEL_59;
  }
  v64 = a1;
  v65 = a2;
  v66 = a4;
  memset(&v74, 0, sizeof(v74));
  v26 = (MIL::IRListValue *)MIL::IRValue::AsList(v25);
  Values = MIL::IRListValue::GetValues(v26);
  if (v28)
  {
    v29 = (MIL::IRValue **)Values;
    v30 = (MIL::IRValue **)(Values + 16 * v28);
    while (1)
    {
      MIL::IRValue::AsTensor(*v29);
      v32 = MIL::IRValue::GetScalar<unsigned int>();
      v33 = v32;
      size = v74.__r_.__value_.__l.__size_;
      if (v74.__r_.__value_.__l.__size_ >= v74.__r_.__value_.__r.__words[2])
        break;
      *(_DWORD *)v74.__r_.__value_.__l.__size_ = v32;
      v31 = size + 4;
LABEL_36:
      v74.__r_.__value_.__l.__size_ = v31;
      v29 += 2;
      if (v29 == v30)
        goto LABEL_57;
    }
    v35 = (void *)v74.__r_.__value_.__r.__words[0];
    v36 = v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0];
    v37 = (uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 2;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v39 = v74.__r_.__value_.__r.__words[2] - v74.__r_.__value_.__r.__words[0];
    if ((uint64_t)(v74.__r_.__value_.__r.__words[2] - v74.__r_.__value_.__r.__words[0]) >> 1 > v38)
      v38 = v39 >> 1;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
      v40 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      if (v40 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v41 = (char *)operator new(4 * v40);
      v42 = &v41[4 * v37];
      *(_DWORD *)v42 = v33;
      v31 = (std::string::size_type)(v42 + 4);
      if ((void *)size == v35)
        goto LABEL_55;
    }
    else
    {
      v41 = 0;
      v42 = (char *)(4 * v37);
      *(_DWORD *)(4 * v37) = v33;
      v31 = 4 * v37 + 4;
      if ((void *)size == v35)
      {
LABEL_55:
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
        v74.__r_.__value_.__r.__words[2] = (std::string::size_type)&v41[4 * v40];
        if (v35)
          operator delete(v35);
        goto LABEL_36;
      }
    }
    v43 = size - 4 - (_QWORD)v35;
    if (v43 < 0x2C)
      goto LABEL_84;
    if (size - (unint64_t)&v41[v36] < 0x20)
      goto LABEL_84;
    v44 = (v43 >> 2) + 1;
    v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
    v46 = size - v45;
    v42 -= v45;
    v47 = &v41[4 * v37 - 16];
    v48 = (__int128 *)(size - 16);
    v49 = v44 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v50 = *v48;
      *((_OWORD *)v47 - 1) = *(v48 - 1);
      *(_OWORD *)v47 = v50;
      v47 -= 32;
      v48 -= 2;
      v49 -= 8;
    }
    while (v49);
    size = v46;
    if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_84:
      do
      {
        v51 = *(_DWORD *)(size - 4);
        size -= 4;
        *((_DWORD *)v42 - 1) = v51;
        v42 -= 4;
      }
      while ((void *)size != v35);
    }
    goto LABEL_55;
  }
LABEL_57:
  std::vector<E5RT::BufferType>::__assign_with_size[abi:ne180100]<E5RT::BufferType*,E5RT::BufferType*>(&v68[3].__shared_owners_, v74.__r_.__value_.__l.__data_, (char *)v74.__r_.__value_.__l.__size_, (uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 2);
  a2 = v65;
  a4 = v66;
  a1 = v64;
  if (v74.__r_.__value_.__r.__words[0])
    operator delete(v74.__r_.__value_.__l.__data_);
LABEL_59:
  v52 = v80;
  v70 = v67;
  v71 = v68;
  do
    v53 = __ldxr(v17);
  while (__stxr(v53 + 1, v17));
  E5RT::E5OperationBuilder::SetOperationAttributes<EirInferenceOpT>(v52, &v70);
  v55 = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v57 = __ldaxr(p_shared_owners);
    while (__stlxr(v57 - 1, p_shared_owners));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  E5AOT::E5BuilderForMIL::AddOperationInputsOutputs(v54, a1, (uint64_t)v80, a2);
  v58 = v80;
  v80 = 0;
  v69 = v58;
  E5RT::E5OperationBuilder::Finish(&v69, a4);
  v59 = v69;
  v69 = 0;
  if (v59)
    (*(void (**)(const void *))(*(_QWORD *)v59 + 8))(v59);
  v60 = v76;
  if (!v76)
    goto LABEL_72;
  v61 = (unint64_t *)&v76->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (v62)
  {
LABEL_72:
    if ((SHIBYTE(v79) & 0x80000000) == 0)
      goto LABEL_74;
    goto LABEL_73;
  }
  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
  std::__shared_weak_count::__release_weak(v60);
  if (SHIBYTE(v79) < 0)
LABEL_73:
    operator delete(__dst);
LABEL_74:
  result = (uint64_t)v80;
  v80 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110DCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v34;

  if (__p)
    operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = *(_QWORD *)(v32 - 96);
    *(_QWORD *)(v32 - 96) = 0;
    if (v34)
      goto LABEL_5;
  }
  else
  {
    v34 = *(_QWORD *)(v32 - 96);
    *(_QWORD *)(v32 - 96) = 0;
    if (v34)
    {
LABEL_5:
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t E5AOT::E5BuilderForMIL::BuildJitCallOperation@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, const void **a3@<X3>, _QWORD *a4@<X8>)
{
  double v8;
  int v9;
  size_t v10;
  unint64_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  char *v16;
  unint64_t *v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  const void *v34;
  const void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t result;
  const void *v40;
  char *v41;
  std::__shared_weak_count *v42;
  void *__p[2];
  char v44;
  std::string v45;
  char *v46;
  std::__shared_weak_count *v47;
  void **__dst;
  size_t v49;
  unint64_t v50;
  const void *v51;

  v8 = E5RT::E5OperationBuilder::Create(13, &v51);
  (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v51 + 16))(v51, 13, v8);
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = v10 + 7;
  if (v10 + 7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v49 = v10 + 7;
    v50 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v49 = 0;
    v50 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v50) = v10 + 7;
    if (!v10)
      goto LABEL_15;
  }
  if (v9 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  memmove(p_dst, v15, v10);
LABEL_15:
  strcpy((char *)p_dst + v10, "JitCall");
  (*(void (**)(const void *, void ***))(*(_QWORD *)v51 + 24))(v51, &__dst);
  v16 = (char *)operator new(0x78uLL);
  *((_QWORD *)v16 + 1) = 0;
  v17 = (unint64_t *)(v16 + 8);
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = &unk_1E2DB41D0;
  *(_OWORD *)(v16 + 24) = 0u;
  v18 = (void **)(v16 + 24);
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  v46 = v16 + 24;
  v47 = (std::__shared_weak_count *)v16;
  v44 = 11;
  strcpy((char *)__p, "program_url");
  if (v16[47] < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
  *((_QWORD *)v16 + 5) = *((_QWORD *)&v45.__r_.__value_.__l + 2);
  *((_BYTE *)&v45.__r_.__value_.__s + 23) = 0;
  v45.__r_.__value_.__s.__data_[0] = 0;
  if (v44 < 0)
    operator delete(__p[0]);
  v44 = 13;
  strcpy((char *)__p, "function_name");
  v19 = (void **)(v16 + 48);
  if (v16[71] < 0)
    operator delete(*v19);
  *(_OWORD *)v19 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
  *((_QWORD *)v16 + 8) = *((_QWORD *)&v45.__r_.__value_.__l + 2);
  *((_BYTE *)&v45.__r_.__value_.__s + 23) = 0;
  v45.__r_.__value_.__s.__data_[0] = 0;
  if (v44 < 0)
    operator delete(__p[0]);
  v44 = 9;
  strcpy((char *)__p, "arg_names");
  v20 = (void **)(v16 + 96);
  v21 = *((_QWORD *)v16 + 12);
  if (v21)
  {
    v22 = *((_QWORD *)v16 + 13);
    v23 = (void *)*((_QWORD *)v16 + 12);
    if (v22 != v21)
    {
      do
      {
        if (*(char *)(v22 - 1) < 0)
          operator delete(*(void **)(v22 - 24));
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = *v20;
    }
    *((_QWORD *)v16 + 13) = v21;
    operator delete(v23);
    *v20 = 0;
    *((_QWORD *)v16 + 13) = 0;
    *((_QWORD *)v16 + 14) = 0;
  }
  *((std::string *)v16 + 4) = v45;
  memset(&v45, 0, sizeof(v45));
  if (v44 < 0)
    operator delete(__p[0]);
  v44 = 11;
  strcpy((char *)__p, "param_names");
  v24 = (void **)(v16 + 72);
  v25 = *((_QWORD *)v16 + 9);
  if (v25)
  {
    v26 = *((_QWORD *)v16 + 10);
    v27 = (void *)*((_QWORD *)v16 + 9);
    if (v26 != v25)
    {
      do
      {
        if (*(char *)(v26 - 1) < 0)
          operator delete(*(void **)(v26 - 24));
        v26 -= 24;
      }
      while (v26 != v25);
      v27 = *v24;
    }
    *((_QWORD *)v16 + 10) = v25;
    operator delete(v27);
    *v24 = 0;
    *((_QWORD *)v16 + 10) = 0;
    *((_QWORD *)v16 + 11) = 0;
  }
  *((std::string *)v16 + 3) = v45;
  memset(&v45, 0, sizeof(v45));
  if (v44 < 0)
    operator delete(__p[0]);
  v28 = v51;
  v41 = v16 + 24;
  v42 = (std::__shared_weak_count *)v16;
  do
    v29 = __ldxr(v17);
  while (__stxr(v29 + 1, v17));
  E5RT::E5OperationBuilder::SetOperationAttributes<JitCallOpT>(v28, (uint64_t *)&v41);
  v31 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  E5AOT::E5BuilderForMIL::AddOperationInputsOutputs(v30, a1, (uint64_t)v51, a2);
  v34 = v51;
  v51 = 0;
  v40 = v34;
  E5RT::E5OperationBuilder::Finish(&v40, a4);
  v35 = v40;
  v40 = 0;
  if (v35)
    (*(void (**)(const void *))(*(_QWORD *)v35 + 8))(v35);
  v36 = v47;
  if (!v47)
    goto LABEL_56;
  v37 = (unint64_t *)&v47->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (v38)
  {
LABEL_56:
    if ((SHIBYTE(v50) & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if (SHIBYTE(v50) < 0)
LABEL_57:
    operator delete(__dst);
LABEL_58:
  result = (uint64_t)v51;
  v51 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110E2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v31;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
  {
    operator delete(__p);
    v31 = *(_QWORD *)(v29 - 88);
    *(_QWORD *)(v29 - 88) = 0;
    if (!v31)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else
  {
    v31 = *(_QWORD *)(v29 - 88);
    *(_QWORD *)(v29 - 88) = 0;
    if (!v31)
      goto LABEL_5;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  _Unwind_Resume(a1);
}

uint64_t E5AOT::E5BuilderForMIL::BuildE5MinimalCpuOperation@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, const void **a3@<X3>, _QWORD *a4@<X8>)
{
  double v8;
  int v9;
  size_t v10;
  unint64_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  void **v18;
  const void *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  const void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t result;
  const void *v31;
  char *v32;
  std::__shared_weak_count *v33;
  char __p[17];
  char v35;
  std::string v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  void **__dst;
  size_t v40;
  unint64_t v41;
  const void *v42;

  v8 = E5RT::E5OperationBuilder::Create(14, &v42);
  (*(void (**)(const void *, uint64_t, double))(*(_QWORD *)v42 + 16))(v42, 14, v8);
  v9 = *((char *)a3 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a3 + 23);
  else
    v10 = (size_t)a3[1];
  v11 = v10 + 12;
  if (v10 + 12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v40 = v10 + 12;
    v41 = v14 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v40 = 0;
    v41 = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v41) = v10 + 12;
    if (!v10)
      goto LABEL_15;
  }
  if (v9 >= 0)
    v15 = a3;
  else
    v15 = *a3;
  memmove(p_dst, v15, v10);
LABEL_15:
  strcpy((char *)p_dst + v10, "E5MinimalCpu");
  (*(void (**)(const void *, void ***))(*(_QWORD *)v42 + 24))(v42, &__dst);
  v16 = (std::__shared_weak_count *)operator new(0x30uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = 0;
  v18 = (void **)&v16[1].__vftable;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB55F0;
  v16[1].__shared_owners_ = 0;
  v16[1].__shared_weak_owners_ = 0;
  v37 = v16 + 1;
  v38 = v16;
  v35 = 16;
  strcpy(__p, "model_assets_url");
  if (SHIBYTE(v16[1].__shared_weak_owners_) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
  v16[1].__shared_weak_owners_ = v36.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v36.__r_.__value_.__s + 23) = 0;
  v36.__r_.__value_.__s.__data_[0] = 0;
  if (v35 < 0)
    operator delete(*(void **)__p);
  v19 = v42;
  v32 = (char *)&v16[1];
  v33 = v16;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  E5RT::E5OperationBuilder::SetOperationAttributes<E5MinimalCpuOpT>(v19, (uint64_t *)&v32);
  v22 = v33;
  if (v33)
  {
    v23 = (unint64_t *)&v33->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  E5AOT::E5BuilderForMIL::AddOperationInputsOutputs(v21, a1, (uint64_t)v42, a2);
  v25 = v42;
  v42 = 0;
  v31 = v25;
  E5RT::E5OperationBuilder::Finish(&v31, a4);
  v26 = v31;
  v31 = 0;
  if (v26)
    (*(void (**)(const void *))(*(_QWORD *)v26 + 8))(v26);
  v27 = v38;
  if (!v38)
    goto LABEL_32;
  v28 = (unint64_t *)&v38->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_32:
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (SHIBYTE(v41) < 0)
LABEL_33:
    operator delete(__dst);
LABEL_34:
  result = (uint64_t)v42;
  v42 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19110E684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v31;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  if (a29 < 0)
  {
    operator delete(__p);
    v31 = *(_QWORD *)(v29 - 88);
    *(_QWORD *)(v29 - 88) = 0;
    if (v31)
      goto LABEL_5;
  }
  else
  {
    v31 = *(_QWORD *)(v29 - 88);
    *(_QWORD *)(v29 - 88) = 0;
    if (v31)
    {
LABEL_5:
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_19110E728()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 88);
  *(_QWORD *)(v0 - 88) = 0;
  if (v1)
    JUMPOUT(0x19110E700);
  JUMPOUT(0x19110E720);
}

void sub_19110E73C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 88);
  *(_QWORD *)(v0 - 88) = 0;
  if (v1)
    JUMPOUT(0x19110E700);
  JUMPOUT(0x19110E720);
}

void `anonymous namespace'::GetOpAttrValue<std::string>(std::string *a1)
{
  MIL::IRValue *Attribute;
  void *__p[2];
  std::string::size_type v4;

  Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute();
  MIL::IRValue::AsTensor(Attribute);
  MIL::IRValue::GetScalar<std::string>();
  if (SHIBYTE(v4) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a1->__r_.__value_.__r.__words[2] = v4;
  }
}

void sub_19110E7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::GetOpAttrVectorValue<std::string>(uint64_t a1)
{
  MIL::IRValue *Attribute;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;

  Attribute = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
  if (Attribute)
  {
    MIL::IRValue::AsTensor(Attribute);
    v3 = MIL::IRTensorValue::GetDataView<std::string>();
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      v5 = v3;
      v6 = v4;
      v7 = 0;
      do
      {
        while ((unint64_t)v7 >= *(_QWORD *)(a1 + 16))
        {
          v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, v5);
          *(_QWORD *)(a1 + 8) = v7;
          v5 += 24;
          if (!--v6)
            return;
        }
        if (*(char *)(v5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
        }
        else
        {
          v8 = *(_OWORD *)v5;
          v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
          *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
        }
        *(_QWORD *)(a1 + 8) = ++v7;
        *(_QWORD *)(a1 + 8) = v7;
        v5 += 24;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void sub_19110E8C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  std::vector<std::string>::~vector[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void sub_19110E8DC(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void E5AOT::E5BuilderForMIL::AddOperationInputsOutputs(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  MIL::IRNamedValueType **v12;
  MIL::IRNamedValueType **v13;
  uint64_t Name;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  E5Common::Utils *ParameterType;
  const MIL::IRValueType *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  E5Common::Utils *Type;
  const MIL::IRValueType *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::logic_error *exception;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;

  v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
  v11 = (_QWORD *)*v7;
  v9 = v7 + 1;
  v10 = v11;
  if (v11 != v9)
  {
    do
    {
      Name = MIL::IRArgument::GetName(*(MIL::IRArgument **)v10[7]);
      v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a4, Name);
      if (!v15)
LABEL_58:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v16 = v15[6];
      v57 = v15[5];
      v58 = (std::__shared_weak_count *)v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      ParameterType = (E5Common::Utils *)MIL::IROperation::GetParameterType();
      if (E5Common::Utils::IsState(ParameterType, v20))
      {
        v53 = v57;
        v54 = v58;
        if (v58)
        {
          p_shared_owners = (unint64_t *)&v58->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 48))(a3, Name, &v53);
        v23 = v54;
        if (!v54)
          goto LABEL_23;
        v24 = (unint64_t *)&v54->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
      }
      else
      {
        v55 = v57;
        v56 = v58;
        if (v58)
        {
          v26 = (unint64_t *)&v58->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 32))(a3, Name, &v55);
        v23 = v56;
        if (!v56)
        {
LABEL_23:
          v29 = v58;
          if (!v58)
            goto LABEL_27;
          goto LABEL_24;
        }
        v28 = (unint64_t *)&v56->__shared_owners_;
        do
          v25 = __ldaxr(v28);
        while (__stlxr(v25 - 1, v28));
      }
      if (v25)
        goto LABEL_23;
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v29 = v58;
      if (!v58)
        goto LABEL_27;
LABEL_24:
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (v31)
      {
LABEL_27:
        v32 = (_QWORD *)v10[1];
        if (!v32)
          goto LABEL_33;
        goto LABEL_28;
      }
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      v32 = (_QWORD *)v10[1];
      if (!v32)
      {
        do
        {
LABEL_33:
          v33 = (_QWORD *)v10[2];
          v34 = *v33 == (_QWORD)v10;
          v10 = v33;
        }
        while (!v34);
        goto LABEL_3;
      }
      do
      {
LABEL_28:
        v33 = v32;
        v32 = (_QWORD *)*v32;
      }
      while (v32);
LABEL_3:
      v10 = v33;
    }
    while (v33 != v9);
  }
  v12 = *(MIL::IRNamedValueType ***)v8;
  v13 = *(MIL::IRNamedValueType ***)(v8 + 8);
  while (v12 != v13)
  {
    v35 = MIL::IRNamedValueType::GetName(*v12);
    v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(a4, v35);
    if (!v36)
      goto LABEL_58;
    v37 = v36[5];
    v38 = v36[6];
    v57 = v37;
    v58 = (std::__shared_weak_count *)v38;
    if (v38)
    {
      v39 = (unint64_t *)(v38 + 8);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v51 = v37;
      v52 = (std::__shared_weak_count *)v38;
      do
        v41 = __ldxr(v39);
      while (__stxr(v41 + 1, v39));
    }
    else
    {
      v51 = v37;
      v52 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 40))(a3, v35, &v51);
    v42 = v52;
    if (v52)
    {
      v43 = (unint64_t *)&v52->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    Type = (E5Common::Utils *)MIL::IRNamedValueType::GetType(*v12);
    if (E5Common::Utils::IsState(Type, v46))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Returning MIL state types is not supported.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
    v47 = v58;
    if (v58)
    {
      v48 = (unint64_t *)&v58->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v12 += 2;
  }
}

void sub_19110EC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19110EC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  __cxa_free_exception(v15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_19110EC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19110ECB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_19110ECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_19110ECF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19110ED04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  _QWORD *v22;
  std::string *v23;
  uint64_t *v24;
  uint64_t *v25;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    do
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_26;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        return v10;
      v5 = v10[1];
    }
    while (v5);
    v6 = v10 + 1;
LABEL_26:
    v22 = operator new(0x40uLL);
    v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
      goto LABEL_29;
  }
  else
  {
    v10 = a1 + 1;
    v22 = operator new(0x40uLL);
    v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  v23->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
LABEL_30:
  v22[7] = *(_QWORD *)(a3 + 24);
  *v22 = 0;
  v22[1] = 0;
  v22[2] = v10;
  *v6 = v22;
  v24 = (uint64_t *)**a1;
  v25 = v22;
  if (v24)
  {
    *a1 = v24;
    v25 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v22;
}

void sub_19110EEB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,Espresso::AOT::MemOptimizer::AllocInfo> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19110EFE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19110EFF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,Espresso::AOT::MemOptimizer::AllocInfo> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  float v27;
  float v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[3];

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return v14;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__construct_node_hash<std::pair<std::string const,Espresso::AOT::MemOptimizer::AllocInfo> const&>(a1, v10, a3, (uint64_t)v41);
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v27 / v28);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v29)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v29)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      if (v29)
        goto LABEL_54;
    }
LABEL_78:
    *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v29)
    goto LABEL_78;
LABEL_54:
  *(_QWORD *)v41[0] = *v29;
  *v29 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19110F414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::MemOptimizer::AllocInfo>>>::__construct_node_hash<std::pair<std::string const,Espresso::AOT::MemOptimizer::AllocInfo> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x58uLL);
  v9 = v8;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 16), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = std::unordered_map<std::string,unsigned long>::unordered_map((uint64_t)(v9 + 40), a3 + 24);
  *((_QWORD *)v9 + 10) = *(_QWORD *)(a3 + 64);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_19110F4C8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_19110F4E0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

MIL::Attributes::FlexibleShapeInfo *std::__shared_ptr_pointer<MIL::Attributes::FlexibleShapeInfo  *>::__on_zero_shared(uint64_t a1)
{
  MIL::Attributes::FlexibleShapeInfo *result;

  result = *(MIL::Attributes::FlexibleShapeInfo **)(a1 + 24);
  if (result)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Attributes::FlexibleShapeInfo  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8AE8DLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A8AE8DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8AE8DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8AE8DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<BnnsCpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB5708;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BnnsCpuInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB5708;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<BnnsCpuInferenceOpT>::__on_zero_shared(uint64_t a1)
{
  BnnsCpuInferenceOpT::~BnnsCpuInferenceOpT((BnnsCpuInferenceOpT *)(a1 + 24));
}

void std::__shared_ptr_emplace<EirInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB5628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EirInferenceOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB5628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<EirInferenceOpT>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_7:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_7;
}

void std::__shared_ptr_emplace<JitCallOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB41D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<JitCallOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB41D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<JitCallOpT>::__on_zero_shared(uint64_t a1)
{
  JitCallOpT::~JitCallOpT((JitCallOpT *)(a1 + 24));
}

void std::__shared_ptr_emplace<E5MinimalCpuOpT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB55F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5MinimalCpuOpT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DB55F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<E5MinimalCpuOpT>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

_QWORD *Espresso::AOT::SegmentsIOTransformer::SegmentsIOTransformer(Espresso::AOT::SegmentsIOTransformer *this)
{
  _QWORD *result;

  result = Espresso::AOT::AbstractMILPass::AbstractMILPass(this);
  *result = &off_1E2DA07C0;
  return result;
}

{
  _QWORD *result;

  result = Espresso::AOT::AbstractMILPass::AbstractMILPass(this);
  *result = &off_1E2DA07C0;
  return result;
}

void Espresso::AOT::SegmentsIOTransformer::~SegmentsIOTransformer(Espresso::AOT::SegmentsIOTransformer *this)
{
  Espresso::AOT::AbstractMILPass::~AbstractMILPass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::AOT::SegmentsIOTransformer::Run(uint64_t a1, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *a2, _QWORD *a3)
{
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v4;
  uint64_t v5;
  uint64_t Function;
  char *v7;
  char *v8;
  MIL::IRValue *v9;
  void **v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void **v16;
  unint64_t v17;
  void **v18;
  void **v19;
  void *v20;
  _QWORD *v21;
  MIL::Builder::Variable *v22;
  uint64_t Name;
  MIL::MILContext *Type;
  const MIL::IRValueType *v25;
  MIL::IRValueType *EntryPointIOType;
  __int128 v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  char *v31;
  char *v32;
  MIL::Builder::OperationBuilder *v33;
  std::string::size_type v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t Operator;
  uint64_t v38;
  int v39;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  MIL::Builder::Variable *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void **v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  void **v65;
  char *v66;
  uint64_t v67;
  MIL::MILContext *v68;
  uint64_t v69;
  _anonymous_namespace_ *v70;
  const MIL::IRValueType *v71;
  MIL::IRValueType *v72;
  __int128 v73;
  _QWORD *Attributes;
  uint64_t *v75;
  std::string::size_type v76;
  std::string *v77;
  std::string::size_type v78;
  int v79;
  uint64_t OperationsByInput;
  uint64_t v82;
  std::__shared_weak_count *v83;
  MIL::Builder::OperationBuilder *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  MIL::IRValueType **v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  _OWORD *v106;
  char *v107;
  uint64_t v108;
  __int128 v109;
  MIL::IRValueType *v110;
  MIL::IRValueType **v111;
  _QWORD *v114;
  uint64_t *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t BackendCompatibleType;
  __int128 v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  char *v123;
  uint64_t *v124;
  char *v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  _OWORD *v137;
  uint64_t *v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t *v142;
  MIL::Builder::Variable *v143;
  MIL::IRValue *v144;
  uint64_t *v145;
  size_t prime;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  int8x8_t v156;
  BOOL v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t *p_shared_owners;
  unint64_t v161;
  MIL::MILContext *OutputType;
  uint64_t OutputName;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *size;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t v173;
  uint8x8_t v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  _anonymous_namespace_ *v182;
  const MIL::IRValueType *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  __int128 v189;
  std::string::size_type v190;
  MIL::Builder::Variable *ArgumentForParameter;
  MIL::IRValue *Value;
  std::string::size_type v193;
  std::string *v194;
  std::string::size_type v195;
  int v196;
  MIL::Builder::Variable *v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  __int128 v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  void *v209;
  void *v210;
  uint64_t v211;
  _QWORD **v212;
  size_t v213;
  size_t v214;
  size_t v215;
  _QWORD *v216;
  size_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  size_t v221;
  unsigned __int8 *i;
  char *v223;
  int64_t v224;
  char *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  char *v229;
  void **v230;
  void *v231;
  _QWORD *v232;
  _QWORD *v233;
  void *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  void **v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  void *v247;
  void **v248;
  void *v249;
  std::__shared_weak_count *v250;
  void **v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  uint64_t *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t *v274;
  unint64_t v275;
  MIL::Builder::Variable *v276;
  void *v277;
  char *v278;
  char *v279;
  char *v280;
  char *v281;
  void **v282;
  void *v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  void **v287;
  void *v288;
  void **v289;
  void **v290;
  void *v291;
  void **v292;
  char *v293;
  char *v294;
  void *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  void **v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::runtime_error *v312;
  std::logic_error *v313;
  std::logic_error *exception;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  _anonymous_namespace_ *v319;
  char *v320;
  std::__shared_weak_count *v321;
  MIL::Builder::OperationBuilder *v322;
  std::__shared_weak_count *v323;
  _BYTE __p[32];
  float v325;
  void *v326;
  void *v327;
  char *v328;
  MIL::Builder::BlockBuilder *v329;
  std::__shared_weak_count *v330;
  __int128 v331;
  MIL::Builder::OperationBuilder *v332;
  std::__shared_weak_count *v333;
  std::string v334;
  void *v335[2];
  void *v336[2];
  int v337;
  MIL::IRValue *v338;
  std::__shared_weak_count *v339;
  void *v340[2];
  void *v341[2];
  int v342;
  void *v343;
  void **v344;
  void *v345;
  char *v346;
  MIL::Builder::BlockBuilder *v347;
  std::__shared_weak_count *v348;
  MIL::Builder::FunctionBuilder *v349;
  std::__shared_weak_count *v350;
  std::__shared_weak_count *v351;
  char v352[8];
  std::string v353;
  std::__shared_weak_count *v354;
  void *v355;
  std::__shared_weak_count *v356;
  char v357;
  MIL::Builder::OperationBuilder *v358;
  std::__shared_weak_count *v359;
  std::string v360;
  std::__shared_weak_count *v361;
  MIL::Builder::OperationBuilder *v362;
  std::__shared_weak_count *v363;
  std::string v364;
  std::string v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  std::string v368;
  MIL::Builder::OperationBuilder *v369;
  std::__shared_weak_count *v370;
  std::__shared_weak_count *v371;
  char *v372;
  char *v373;
  char *v374;
  __int128 v375;
  __int128 v376;
  int v377;
  std::string v378;

  v4 = a2;
  v319 = (_anonymous_namespace_ *)(*(uint64_t (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)a2 + 40))(a2);
  MEMORY[0x19401BA88](v352, v4);
  MIL::Transform::ProgramTransformer::GetProgramBuilder((MIL::Transform::ProgramTransformer *)v352);
  v5 = *a3;
  v317 = a3[1];
  if (*a3 != v317)
  {
    v315 = v4;
    v316 = a3;
    do
    {
      if ((Espresso::AOT::IsFunctionSegmented(v4) & 1) == 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::logic_error::logic_error(exception, (const std::string *)__p);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      Function = MIL::IRProgram::GetFunction();
      MIL::Builder::ProgramBuilder::GetFunction();
      MIL::Builder::FunctionBuilder::SelectedSpecialization(v349);
      MIL::Builder::FunctionBuilder::GetBlock();
      MIL::Builder::BlockBuilder::GetOperations(v347);
      v318 = v5;
      MIL::Builder::BlockBuilder::GetOutputNames(v347);
      v7 = (char *)v343;
      v8 = (char *)v344;
      *(_OWORD *)v340 = 0u;
      *(_OWORD *)v341 = 0u;
      v342 = 1065353216;
      if (v343 != v344)
      {
        do
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v340, (uint64_t)v7, (uint64_t)v7);
          v7 += 24;
        }
        while (v7 != v8);
      }
      *(_QWORD *)__p = operator new(0x20uLL);
      *(_OWORD *)&__p[8] = xmmword_191A7C2C0;
      strcpy(*(char **)__p, "NeuralEngineOptimizedIOBuffer");
      MIL::IRObject::TryGetAttributeSharedPtr();
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        *(_OWORD *)v335 = 0u;
        *(_OWORD *)v336 = 0u;
        v337 = 1065353216;
        v9 = v338;
        if (v338)
        {
LABEL_11:
          E5Common::Utils::MILDictToCpp<std::string,BOOL>(v9, (uint64_t)__p);
          if (v336[1])
          {
            v10 = (void **)v336[0];
            if (v336[0])
            {
              do
              {
                v18 = (void **)*v10;
                if (*((char *)v10 + 39) < 0)
                  operator delete(v10[2]);
                operator delete(v10);
                v10 = v18;
              }
              while (v18);
            }
            v336[0] = 0;
            v11 = (char *)v335[1];
            if (v335[1])
            {
              v12 = 0;
              do
                *((_QWORD *)v335[0] + (_QWORD)v12++) = 0;
              while (v11 != v12);
            }
            v336[1] = 0;
          }
          v13 = *(void **)__p;
          *(_QWORD *)__p = 0;
          v14 = v335[0];
          v335[0] = v13;
          if (v14)
            operator delete(v14);
          v15 = *(_QWORD *)&__p[8];
          v16 = *(void ***)&__p[16];
          *(_QWORD *)&__p[8] = 0;
          v336[0] = *(void **)&__p[16];
          v336[1] = *(void **)&__p[24];
          v337 = LODWORD(v325);
          v335[1] = (void *)v15;
          if (*(_QWORD *)&__p[24])
          {
            v17 = *(_QWORD *)(*(_QWORD *)&__p[16] + 8);
            if ((v15 & (v15 - 1)) != 0)
            {
              if (v17 >= v15)
                v17 %= v15;
            }
            else
            {
              v17 &= v15 - 1;
            }
            *((_QWORD *)v335[0] + v17) = v336;
            *(_QWORD *)&__p[16] = 0;
            *(_QWORD *)&__p[24] = 0;
          }
          else if (*(_QWORD *)&__p[16])
          {
            do
            {
              v19 = (void **)*v16;
              if (*((char *)v16 + 39) < 0)
                operator delete(v16[2]);
              operator delete(v16);
              v16 = v19;
            }
            while (v19);
          }
          v20 = *(void **)__p;
          *(_QWORD *)__p = 0;
          if (v20)
            operator delete(v20);
        }
      }
      else
      {
        *(_OWORD *)v335 = 0u;
        *(_OWORD *)v336 = 0u;
        v337 = 1065353216;
        v9 = v338;
        if (v338)
          goto LABEL_11;
      }
      MIL::Builder::FunctionBuilder::GetInputs(v349);
      v21 = *(_QWORD **)&__p[16];
      if (*(_QWORD *)&__p[16])
      {
        do
        {
          v22 = (MIL::Builder::Variable *)v21[2];
          Name = MIL::Builder::Variable::GetName(v22);
          Type = (MIL::MILContext *)MIL::Builder::Variable::TryGetType(v22);
          MIL::Builder::FunctionBuilder::RemoveInput();
          if (*(char *)(Name + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v334, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
          }
          else
          {
            v27 = *(_OWORD *)Name;
            v334.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
            *(_OWORD *)&v334.__r_.__value_.__l.__data_ = v27;
          }
          MIL::Builder::FunctionBuilder::AddInput();
          if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v334.__r_.__value_.__l.__data_);
          v21 = (_QWORD *)*v21;
        }
        while (v21);
        v28 = *(_QWORD **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          do
          {
            v29 = (_QWORD *)*v28;
            operator delete(v28);
            v28 = v29;
          }
          while (v29);
        }
      }
      v30 = *(void **)__p;
      *(_QWORD *)__p = 0;
      if (v30)
        operator delete(v30);
      v32 = (char *)v345;
      v31 = v346;
      v320 = v346;
      while (v32 != v31)
      {
        v33 = *(MIL::Builder::OperationBuilder **)v32;
        v34 = *((_QWORD *)v32 + 1);
        v332 = *(MIL::Builder::OperationBuilder **)v32;
        v333 = (std::__shared_weak_count *)v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        Operator = MIL::Builder::OperationBuilder::GetOperator(v33);
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
        v39 = *(char *)(v38 + 23);
        if (v39 < 0)
        {
          if (*(_QWORD *)(v38 + 8) != 19)
            goto LABEL_65;
          v38 = *(_QWORD *)v38;
        }
        else if (v39 != 19)
        {
          goto LABEL_65;
        }
        if (*(_QWORD *)v38 == 0x736F695F4C4D3545
          && *(_QWORD *)(v38 + 8) == 0x736E6172742E3631
          && *(_QWORD *)(v38 + 11) == 0x726566736E617274)
        {
          *(_QWORD *)&v331 = v33;
          *((_QWORD *)&v331 + 1) = v34;
          if (v34)
          {
            v158 = (unint64_t *)(v34 + 8);
            do
              v159 = __ldxr(v158);
            while (__stxr(v159 + 1, v158));
          }
          v329 = v347;
          v330 = v348;
          if (v348)
          {
            p_shared_owners = (unint64_t *)&v348->__shared_owners_;
            do
              v161 = __ldxr(p_shared_owners);
            while (__stxr(v161 + 1, p_shared_owners));
          }
          if ((unint64_t)MIL::Builder::OperationBuilder::GetNumOutputs(v33) >= 2)
          {
            v313 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v313, "Found more than one output in E5ML_ios16.transfer.");
            v313->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v313, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
          }
          OutputType = (MIL::MILContext *)MIL::Builder::OperationBuilder::GetOutputType(v33);
          OutputName = MIL::Builder::OperationBuilder::GetOutputName(v33);
          __p[23] = 8;
          strcpy(__p, "transfer");
          v360.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
          v360.__r_.__value_.__l.__size_ = v34;
          if (v34)
          {
            v164 = (unint64_t *)(v34 + 8);
            do
              v165 = __ldxr(v164);
            while (__stxr(v165 + 1, v164));
          }
          MIL::Builder::BlockBuilder::AddOperation();
          size = (std::__shared_weak_count *)v360.__r_.__value_.__l.__size_;
          if (!v360.__r_.__value_.__l.__size_)
            goto LABEL_265;
          v167 = (unint64_t *)(v360.__r_.__value_.__l.__size_ + 8);
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          if (!v168)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
            if ((__p[23] & 0x80000000) != 0)
LABEL_266:
              operator delete(*(void **)__p);
          }
          else
          {
LABEL_265:
            if ((__p[23] & 0x80000000) != 0)
              goto LABEL_266;
          }
          __p[23] = 6;
          strcpy(__p, "values");
          *((_BYTE *)&v378.__r_.__value_.__s + 23) = 6;
          strcpy((char *)&v378, "values");
          MIL::Builder::OperationBuilder::GetArgumentForParameter();
          MIL::Builder::OperationBuilder::AddInput();
          BYTE7(v376) = 4;
          strcpy((char *)&v375, "from");
          *((_BYTE *)&v368.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&v368, "from");
          MIL::Builder::OperationBuilder::GetArgumentForParameter();
          MIL::Builder::OperationBuilder::AddInput();
          HIBYTE(v374) = 2;
          strcpy((char *)&v372, "to");
          *((_BYTE *)&v365.__r_.__value_.__s + 23) = 2;
          strcpy((char *)&v365, "to");
          MIL::Builder::OperationBuilder::GetArgumentForParameter();
          MIL::Builder::OperationBuilder::AddInput();
          v169 = v356;
          if (!v356)
            goto LABEL_271;
          v170 = (unint64_t *)&v356->__shared_owners_;
          do
            v171 = __ldaxr(v170);
          while (__stlxr(v171 - 1, v170));
          if (!v171)
          {
            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
            std::__shared_weak_count::__release_weak(v169);
            if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_287;
LABEL_272:
            if ((SHIBYTE(v374) & 0x80000000) == 0)
              goto LABEL_273;
LABEL_288:
            operator delete(v372);
            v172 = (std::__shared_weak_count *)v353.__r_.__value_.__l.__size_;
            if (v353.__r_.__value_.__l.__size_)
              goto LABEL_289;
LABEL_292:
            if ((SHIBYTE(v368.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_293;
LABEL_297:
            operator delete(v368.__r_.__value_.__l.__data_);
            if (SBYTE7(v376) < 0)
              goto LABEL_298;
LABEL_294:
            v178 = v371;
            if (!v371)
              goto LABEL_302;
LABEL_299:
            v179 = (unint64_t *)&v178->__shared_owners_;
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (v180)
              goto LABEL_302;
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
            if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_338;
LABEL_303:
            if ((__p[23] & 0x80000000) != 0)
LABEL_339:
              operator delete(*(void **)__p);
          }
          else
          {
LABEL_271:
            if ((SHIBYTE(v365.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_272;
LABEL_287:
            operator delete(v365.__r_.__value_.__l.__data_);
            if (SHIBYTE(v374) < 0)
              goto LABEL_288;
LABEL_273:
            v172 = (std::__shared_weak_count *)v353.__r_.__value_.__l.__size_;
            if (!v353.__r_.__value_.__l.__size_)
              goto LABEL_292;
LABEL_289:
            v176 = (unint64_t *)&v172->__shared_owners_;
            do
              v177 = __ldaxr(v176);
            while (__stlxr(v177 - 1, v176));
            if (v177)
              goto LABEL_292;
            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
            std::__shared_weak_count::__release_weak(v172);
            if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_297;
LABEL_293:
            if ((SBYTE7(v376) & 0x80000000) == 0)
              goto LABEL_294;
LABEL_298:
            operator delete((void *)v375);
            v178 = v371;
            if (v371)
              goto LABEL_299;
LABEL_302:
            if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_303;
LABEL_338:
            operator delete(v378.__r_.__value_.__l.__data_);
            if ((__p[23] & 0x80000000) != 0)
              goto LABEL_339;
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v340, OutputName))
          {
            v181 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 168))(Function);
            v182 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v181 + 40))(v181);
            *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v331;
            if (*((_QWORD *)&v331 + 1))
            {
              v184 = (unint64_t *)(*((_QWORD *)&v331 + 1) + 8);
              do
                v185 = __ldxr(v184);
              while (__stxr(v185 + 1, v184));
            }
            MIL::Builder::BlockBuilder::RemoveOperation();
            v186 = (std::__shared_weak_count *)v368.__r_.__value_.__l.__size_;
            if (!v368.__r_.__value_.__l.__size_)
              goto LABEL_312;
            v187 = (unint64_t *)(v368.__r_.__value_.__l.__size_ + 8);
            do
              v188 = __ldaxr(v187);
            while (__stlxr(v188 - 1, v187));
            if (!v188)
            {
              ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
              std::__shared_weak_count::__release_weak(v186);
              if (*(char *)(OutputName + 23) < 0)
                goto LABEL_341;
LABEL_313:
              v189 = *(_OWORD *)OutputName;
              v378.__r_.__value_.__r.__words[2] = *(_QWORD *)(OutputName + 16);
              *(_OWORD *)&v378.__r_.__value_.__l.__data_ = v189;
            }
            else
            {
LABEL_312:
              if ((*(char *)(OutputName + 23) & 0x80000000) == 0)
                goto LABEL_313;
LABEL_341:
              std::string::__init_copy_ctor_external(&v378, *(const std::string::value_type **)OutputName, *(_QWORD *)(OutputName + 8));
            }
            MIL::Builder::OperationBuilder::AddOutput();
            v206 = (std::__shared_weak_count *)v353.__r_.__value_.__l.__size_;
            if (v353.__r_.__value_.__l.__size_)
            {
              v207 = (unint64_t *)(v353.__r_.__value_.__l.__size_ + 8);
              do
                v208 = __ldaxr(v207);
              while (__stlxr(v208 - 1, v207));
              if (!v208)
              {
                ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                std::__shared_weak_count::__release_weak(v206);
                if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_444;
                goto LABEL_445;
              }
            }
LABEL_443:
            if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_444;
            goto LABEL_445;
          }
          v190 = v331;
          *((_BYTE *)&v368.__r_.__value_.__s + 23) = 2;
          strcpy((char *)&v368, "to");
          ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          Value = (MIL::IRValue *)MIL::Builder::Variable::GetValue(ArgumentForParameter);
          MIL::IRValue::AsTensor(Value);
          MIL::IRValue::GetScalar<std::string>();
          if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v368.__r_.__value_.__l.__data_);
          v193 = HIBYTE(v378.__r_.__value_.__r.__words[2]);
          if ((v378.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v193 = v378.__r_.__value_.__l.__size_;
          if (v193 != 9)
            goto LABEL_325;
          v194 = &v378;
          if ((v378.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v194 = (std::string *)v378.__r_.__value_.__r.__words[0];
          v195 = v194->__r_.__value_.__r.__words[0];
          v196 = v194->__r_.__value_.__s.__data_[8];
          if (v195 == 0x706172675F73706DLL && v196 == 104)
          {
            *((_BYTE *)&v368.__r_.__value_.__s + 23) = 6;
            strcpy((char *)&v368, "values");
            v276 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
            MIL::Builder::Variable::TryGetType(v276);
            if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v368.__r_.__value_.__l.__data_);
          }
          else
          {
LABEL_325:
            *((_BYTE *)&v368.__r_.__value_.__s + 23) = 6;
            strcpy((char *)&v368, "values");
            v198 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
            v199 = MIL::Builder::Variable::GetName(v198);
            if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v368.__r_.__value_.__l.__data_);
          }
          v353.__r_.__value_.__r.__words[0] = v190;
          v353.__r_.__value_.__l.__size_ = *((_QWORD *)&v331 + 1);
          if (*((_QWORD *)&v331 + 1))
          {
            v200 = (unint64_t *)(*((_QWORD *)&v331 + 1) + 8);
            do
              v201 = __ldxr(v200);
            while (__stxr(v201 + 1, v200));
          }
          MIL::Builder::BlockBuilder::RemoveOperation();
          v202 = (std::__shared_weak_count *)v353.__r_.__value_.__l.__size_;
          if (!v353.__r_.__value_.__l.__size_)
            goto LABEL_335;
          v203 = (unint64_t *)(v353.__r_.__value_.__l.__size_ + 8);
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
            std::__shared_weak_count::__release_weak(v202);
            if (*(char *)(OutputName + 23) < 0)
              goto LABEL_437;
LABEL_336:
            v205 = *(_OWORD *)OutputName;
            v368.__r_.__value_.__r.__words[2] = *(_QWORD *)(OutputName + 16);
            *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v205;
          }
          else
          {
LABEL_335:
            if ((*(char *)(OutputName + 23) & 0x80000000) == 0)
              goto LABEL_336;
LABEL_437:
            std::string::__init_copy_ctor_external(&v368, *(const std::string::value_type **)OutputName, *(_QWORD *)(OutputName + 8));
          }
          MIL::Builder::OperationBuilder::AddOutput();
          v252 = v371;
          if (!v371)
            goto LABEL_442;
          v253 = (unint64_t *)&v371->__shared_owners_;
          do
            v254 = __ldaxr(v253);
          while (__stlxr(v254 - 1, v253));
          if (!v254)
          {
            ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
            std::__shared_weak_count::__release_weak(v252);
            if ((SHIBYTE(v368.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_443;
          }
          else
          {
LABEL_442:
            if ((SHIBYTE(v368.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_443;
          }
          operator delete(v368.__r_.__value_.__l.__data_);
          if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
LABEL_444:
            operator delete(v378.__r_.__value_.__l.__data_);
LABEL_445:
          v255 = *(uint64_t **)(MIL::Builder::OperationBuilder::GetAttributes((MIL::Builder::OperationBuilder *)v331) + 16);
          if (!v255)
          {
LABEL_446:
            v256 = (std::__shared_weak_count *)v364.__r_.__value_.__l.__size_;
            if (!v364.__r_.__value_.__l.__size_)
              goto LABEL_450;
            v257 = (unint64_t *)(v364.__r_.__value_.__l.__size_ + 8);
            do
              v258 = __ldaxr(v257);
            while (__stlxr(v258 - 1, v257));
            if (!v258)
            {
              ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
              std::__shared_weak_count::__release_weak(v256);
              v259 = v330;
              if (v330)
              {
LABEL_451:
                v260 = (unint64_t *)&v259->__shared_owners_;
                do
                  v261 = __ldaxr(v260);
                while (__stlxr(v261 - 1, v260));
                if (!v261)
                {
                  ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                  std::__shared_weak_count::__release_weak(v259);
                }
              }
            }
            else
            {
LABEL_450:
              v259 = v330;
              if (v330)
                goto LABEL_451;
            }
            v271 = (std::__shared_weak_count *)*((_QWORD *)&v331 + 1);
            if (*((_QWORD *)&v331 + 1))
            {
              v272 = (unint64_t *)(*((_QWORD *)&v331 + 1) + 8);
              do
                v273 = __ldaxr(v272);
              while (__stlxr(v273 - 1, v272));
              if (!v273)
              {
                ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                std::__shared_weak_count::__release_weak(v271);
                v250 = v333;
                if (v333)
                  goto LABEL_482;
                goto LABEL_48;
              }
            }
LABEL_481:
            v250 = v333;
            if (!v333)
              goto LABEL_48;
            goto LABEL_482;
          }
          while (2)
          {
            if (*((char *)v255 + 39) < 0)
              std::string::__init_copy_ctor_external(&v365, (const std::string::value_type *)v255[2], v255[3]);
            else
              v365 = *(std::string *)(v255 + 2);
            v262 = (std::__shared_weak_count *)v255[6];
            v366 = v255[5];
            v367 = v262;
            if (v262)
            {
              v263 = (unint64_t *)&v262->__shared_owners_;
              do
                v264 = __ldxr(v263);
              while (__stxr(v264 + 1, v263));
            }
            MIL::Builder::OperationBuilder::SetAttribute();
            v265 = v370;
            if (!v370)
              goto LABEL_467;
            v266 = (unint64_t *)&v370->__shared_owners_;
            do
              v267 = __ldaxr(v266);
            while (__stlxr(v267 - 1, v266));
            if (!v267)
            {
              ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
              std::__shared_weak_count::__release_weak(v265);
              v268 = v367;
              if (v367)
              {
LABEL_468:
                v269 = (unint64_t *)&v268->__shared_owners_;
                do
                  v270 = __ldaxr(v269);
                while (__stlxr(v270 - 1, v269));
                if (!v270)
                {
                  ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                  std::__shared_weak_count::__release_weak(v268);
                }
              }
            }
            else
            {
LABEL_467:
              v268 = v367;
              if (v367)
                goto LABEL_468;
            }
            if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v365.__r_.__value_.__l.__data_);
              v255 = (uint64_t *)*v255;
              if (!v255)
                goto LABEL_446;
            }
            else
            {
              v255 = (uint64_t *)*v255;
              if (!v255)
                goto LABEL_446;
            }
            continue;
          }
        }
LABEL_65:
        v42 = MIL::Builder::OperationBuilder::GetOperator(v33);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 128))(v42))
          goto LABEL_481;
        v322 = v33;
        v323 = (std::__shared_weak_count *)v34;
        if (v34)
        {
          v43 = (unint64_t *)(v34 + 8);
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        v321 = v348;
        if (v348)
        {
          v45 = (unint64_t *)&v348->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        MIL::Builder::OperationBuilder::GetInputArguments(v33);
        v375 = 0u;
        v376 = 0u;
        v377 = 1065353216;
        v372 = 0;
        v373 = 0;
        v374 = 0;
        *((_BYTE *)&v368.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v368, "call");
        v369 = v33;
        v370 = (std::__shared_weak_count *)v34;
        if (v34)
        {
          v47 = (unint64_t *)(v34 + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        MIL::Builder::BlockBuilder::AddOperation();
        v49 = v370;
        if (!v370)
          goto LABEL_79;
        v50 = (unint64_t *)&v370->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (v51)
        {
LABEL_79:
          if ((SHIBYTE(v368.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_81;
LABEL_80:
          operator delete(v368.__r_.__value_.__l.__data_);
          goto LABEL_81;
        }
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_80;
LABEL_81:
        MIL::Builder::OperationBuilder::GetParameterNames(v322);
        v52 = (uint64_t *)v368.__r_.__value_.__r.__words[2];
        if (!v368.__r_.__value_.__r.__words[2])
          goto LABEL_97;
        do
        {
          v53 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          if (*((char *)v52 + 39) < 0)
            std::string::__init_copy_ctor_external(&v365, (const std::string::value_type *)v52[2], v52[3]);
          else
            v365 = *(std::string *)(v52 + 2);
          MIL::Builder::OperationBuilder::AddInput();
          v54 = v367;
          if (!v367)
            goto LABEL_89;
          v55 = (unint64_t *)&v367->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (v56)
          {
LABEL_89:
            if ((SHIBYTE(v365.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_91;
LABEL_90:
            operator delete(v365.__r_.__value_.__l.__data_);
            goto LABEL_91;
          }
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
          if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_90;
LABEL_91:
          if (!MIL::Builder::Variable::TryGetType(v53))
          {
            v312 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::runtime_error::runtime_error(v312, &v364);
            __cxa_throw(v312, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v364.__r_.__value_.__r.__words[0] = MIL::Builder::Variable::TryGetType(v53);
          std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*>((uint64_t)&v375, (uint64_t)(v52 + 2), (uint64_t)(v52 + 2), &v364);
          v52 = (uint64_t *)*v52;
        }
        while (v52);
        v57 = (void **)v368.__r_.__value_.__r.__words[2];
        if (v368.__r_.__value_.__r.__words[2])
        {
          do
          {
            v65 = (void **)*v57;
            if (*((char *)v57 + 39) < 0)
              operator delete(v57[2]);
            operator delete(v57);
            v57 = v65;
          }
          while (v65);
        }
LABEL_97:
        v58 = (void *)v368.__r_.__value_.__r.__words[0];
        v368.__r_.__value_.__r.__words[0] = 0;
        if (v58)
          operator delete(v58);
        v362 = v322;
        v363 = (std::__shared_weak_count *)v34;
        if (v34)
        {
          v59 = (unint64_t *)(v34 + 8);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        MIL::Builder::BlockBuilder::RemoveOperation();
        v61 = v363;
        if (v363)
        {
          v62 = (unint64_t *)&v363->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v64 = 0;
        while (v64 < MIL::Builder::OperationBuilder::GetNumOutputs(v322))
        {
          v67 = MIL::Builder::OperationBuilder::GetOutputName(v322);
          v68 = (MIL::MILContext *)MIL::Builder::OperationBuilder::GetOutputType(v322);
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v340, v67))
          {
            v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 168))(Function);
            v70 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 40))(v69);
            if (*(char *)(v67 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v368, *(const std::string::value_type **)v67, *(_QWORD *)(v67 + 8));
            }
            else
            {
              v73 = *(_OWORD *)v67;
              v368.__r_.__value_.__r.__words[2] = *(_QWORD *)(v67 + 16);
              *(_OWORD *)&v368.__r_.__value_.__l.__data_ = v73;
            }
            MIL::Builder::OperationBuilder::AddOutput();
            v90 = v361;
            if (!v361)
              goto LABEL_143;
            v91 = (unint64_t *)&v361->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (v92)
            {
LABEL_143:
              if ((SHIBYTE(v368.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_144;
LABEL_147:
              operator delete(v368.__r_.__value_.__l.__data_);
              v94 = v373;
              v93 = v374;
              if (v373 >= v374)
                goto LABEL_148;
LABEL_111:
              *(_QWORD *)v94 = v72;
              v66 = v94 + 8;
LABEL_112:
              v373 = v66;
LABEL_113:
              ++v64;
              continue;
            }
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
            if (SHIBYTE(v368.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_147;
LABEL_144:
            v94 = v373;
            v93 = v374;
            if (v373 < v374)
              goto LABEL_111;
LABEL_148:
            v95 = v372;
            v96 = (v94 - v372) >> 3;
            v97 = v96 + 1;
            if ((unint64_t)(v96 + 1) >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v98 = v93 - v372;
            if (v98 >> 2 > v97)
              v97 = v98 >> 2;
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
              v99 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v99 = v97;
            if (v99)
            {
              if (v99 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v100 = operator new(8 * v99);
              v101 = (MIL::IRValueType **)&v100[8 * v96];
              *v101 = v72;
              v66 = (char *)(v101 + 1);
              if (v94 != v95)
                goto LABEL_157;
LABEL_166:
              v372 = (char *)v101;
              v373 = v66;
              v374 = &v100[8 * v99];
              if (!v94)
                goto LABEL_112;
            }
            else
            {
              v100 = 0;
              v101 = (MIL::IRValueType **)(8 * v96);
              v111 = (MIL::IRValueType **)(8 * v96);
              *v111 = v72;
              v66 = (char *)(v111 + 1);
              if (v94 == v95)
                goto LABEL_166;
LABEL_157:
              v102 = v94 - 8 - v95;
              if (v102 < 0x58)
                goto LABEL_572;
              if ((unint64_t)(v95 - v100) < 0x20)
                goto LABEL_572;
              v103 = (v102 >> 3) + 1;
              v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
              v105 = &v94[-v104];
              v101 = (MIL::IRValueType **)((char *)v101 - v104);
              v106 = &v100[v94 - v95 - 16];
              v107 = v94 - 16;
              v108 = v103 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v109 = *(_OWORD *)v107;
                *(v106 - 1) = *((_OWORD *)v107 - 1);
                *v106 = v109;
                v106 -= 2;
                v107 -= 32;
                v108 -= 4;
              }
              while (v108);
              v94 = v105;
              if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_572:
                do
                {
                  v110 = (MIL::IRValueType *)*((_QWORD *)v94 - 1);
                  v94 -= 8;
                  *--v101 = v110;
                }
                while (v94 != v95);
              }
              v94 = v372;
              v372 = (char *)v101;
              v373 = v66;
              v374 = &v100[8 * v99];
              if (!v94)
                goto LABEL_112;
            }
            operator delete(v94);
            goto LABEL_112;
          }
          Attributes = (_QWORD *)MIL::Builder::OperationBuilder::GetAttributes(v322);
          *((_BYTE *)&v360.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v360, "backend");
          v75 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(Attributes, (uint64_t)&v360);
          if (!v75)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          MIL::IRValue::AsTensor((MIL::IRValue *)v75[5]);
          MIL::IRValue::GetScalar<std::string>();
          if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v360.__r_.__value_.__l.__data_);
          v76 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
          if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v76 = v364.__r_.__value_.__l.__size_;
          if (v76 != 9)
            goto LABEL_189;
          v77 = &v364;
          if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v77 = (std::string *)v364.__r_.__value_.__r.__words[0];
          v78 = v77->__r_.__value_.__r.__words[0];
          v79 = v77->__r_.__value_.__s.__data_[8];
          if (v78 != 0x706172675F73706DLL || v79 != 104)
            goto LABEL_189;
          OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
          if (*(_QWORD *)(OperationsByInput + 24) != 1)
            goto LABEL_189;
          v82 = *(_QWORD *)(OperationsByInput + 16);
          v84 = *(MIL::Builder::OperationBuilder **)(v82 + 16);
          v83 = *(std::__shared_weak_count **)(v82 + 24);
          v358 = v84;
          v359 = v83;
          if (v83)
          {
            v85 = (unint64_t *)&v83->__shared_owners_;
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
          }
          v87 = MIL::Builder::OperationBuilder::GetOperator(v84);
          v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
          v89 = *(char *)(v88 + 23);
          if (v89 < 0)
          {
            if (*(_QWORD *)(v88 + 8) != 19)
              goto LABEL_177;
            v88 = *(_QWORD *)v88;
          }
          else if (v89 != 19)
          {
            goto LABEL_177;
          }
          if (*(_QWORD *)v88 != 0x736F695F4C4D3545
            || *(_QWORD *)(v88 + 8) != 0x736E6172742E3631
            || *(_QWORD *)(v88 + 11) != 0x726566736E617274)
          {
LABEL_177:
            v114 = (_QWORD *)MIL::Builder::OperationBuilder::GetAttributes(v84);
            v357 = 7;
            strcpy((char *)&v355, "backend");
            v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v114, (uint64_t)&v355);
            if (!v115)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            MIL::IRValue::AsTensor((MIL::IRValue *)v115[5]);
            MIL::IRValue::GetScalar<std::string>();
            goto LABEL_179;
          }
          v357 = 2;
          strcpy((char *)&v355, "to");
          v143 = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
          v144 = (MIL::IRValue *)MIL::Builder::Variable::GetValue(v143);
          MIL::IRValue::AsTensor(v144);
          MIL::IRValue::GetScalar<std::string>();
LABEL_179:
          if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v364.__r_.__value_.__l.__data_);
          v364 = v360;
          *((_BYTE *)&v360.__r_.__value_.__s + 23) = 0;
          v360.__r_.__value_.__s.__data_[0] = 0;
          if (v357 < 0)
          {
            operator delete(v355);
            if (!v83)
              goto LABEL_189;
          }
          else if (!v83)
          {
            goto LABEL_189;
          }
          v116 = (unint64_t *)&v83->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
LABEL_189:
          if (*(char *)(v67 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v353, *(const std::string::value_type **)v67, *(_QWORD *)(v67 + 8));
          }
          else
          {
            v119 = *(_OWORD *)v67;
            v353.__r_.__value_.__r.__words[2] = *(_QWORD *)(v67 + 16);
            *(_OWORD *)&v353.__r_.__value_.__l.__data_ = v119;
          }
          MIL::Builder::OperationBuilder::AddOutput();
          v120 = v354;
          if (!v354)
            goto LABEL_196;
          v121 = (unint64_t *)&v354->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
            if ((SHIBYTE(v353.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_197:
              v124 = (uint64_t *)v373;
              v123 = v374;
              if (v373 < v374)
                goto LABEL_198;
              goto LABEL_201;
            }
          }
          else
          {
LABEL_196:
            if ((SHIBYTE(v353.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_197;
          }
          operator delete(v353.__r_.__value_.__l.__data_);
          v124 = (uint64_t *)v373;
          v123 = v374;
          if (v373 < v374)
          {
LABEL_198:
            *v124 = BackendCompatibleType;
            v125 = (char *)(v124 + 1);
            goto LABEL_221;
          }
LABEL_201:
          v126 = (uint64_t *)v372;
          v127 = ((char *)v124 - v372) >> 3;
          v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v129 = v123 - v372;
          if (v129 >> 2 > v128)
            v128 = v129 >> 2;
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
            v130 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v130 = v128;
          if (v130)
          {
            if (v130 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v131 = operator new(8 * v130);
            v132 = (uint64_t *)&v131[8 * v127];
            *v132 = BackendCompatibleType;
            v125 = (char *)(v132 + 1);
            if (v124 == v126)
            {
LABEL_219:
              v372 = (char *)v132;
              v373 = v125;
              v374 = &v131[8 * v130];
              if (!v124)
                goto LABEL_221;
LABEL_220:
              operator delete(v124);
              goto LABEL_221;
            }
          }
          else
          {
            v131 = 0;
            v132 = (uint64_t *)(8 * v127);
            v142 = (uint64_t *)(8 * v127);
            *v142 = BackendCompatibleType;
            v125 = (char *)(v142 + 1);
            if (v124 == v126)
              goto LABEL_219;
          }
          v133 = (char *)(v124 - 1) - (char *)v126;
          if (v133 < 0x58)
            goto LABEL_573;
          if ((unint64_t)((char *)v126 - v131) < 0x20)
            goto LABEL_573;
          v134 = (v133 >> 3) + 1;
          v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
          v136 = &v124[v135 / 0xFFFFFFFFFFFFFFF8];
          v132 = (uint64_t *)((char *)v132 - v135);
          v137 = &v131[(char *)v124 - (char *)v126 - 16];
          v138 = v124 - 2;
          v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v140 = *(_OWORD *)v138;
            *(v137 - 1) = *((_OWORD *)v138 - 1);
            *v137 = v140;
            v137 -= 2;
            v138 -= 4;
            v139 -= 4;
          }
          while (v139);
          v124 = v136;
          if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_573:
            do
            {
              v141 = *--v124;
              *--v132 = v141;
            }
            while (v124 != v126);
          }
          v124 = (uint64_t *)v372;
          v372 = (char *)v132;
          v373 = v125;
          v374 = &v131[8 * v130];
          if (v124)
            goto LABEL_220;
LABEL_221:
          v373 = v125;
          if ((SHIBYTE(v364.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_113;
          operator delete(v364.__r_.__value_.__l.__data_);
          ++v64;
        }
        v145 = *(uint64_t **)(MIL::Builder::OperationBuilder::GetAttributes(v322) + 16);
        if (v145)
        {
          while (1)
          {
            if (*((char *)v145 + 39) < 0)
              std::string::__init_copy_ctor_external(&v364, (const std::string::value_type *)v145[2], v145[3]);
            else
              v364 = *(std::string *)(v145 + 2);
            v147 = (std::__shared_weak_count *)v145[6];
            v355 = (void *)v145[5];
            v356 = v147;
            if (v147)
            {
              v148 = (unint64_t *)&v147->__shared_owners_;
              do
                v149 = __ldxr(v148);
              while (__stxr(v149 + 1, v148));
            }
            MIL::Builder::OperationBuilder::SetAttribute();
            v150 = (std::__shared_weak_count *)v360.__r_.__value_.__l.__size_;
            if (!v360.__r_.__value_.__l.__size_)
              goto LABEL_239;
            v151 = (unint64_t *)(v360.__r_.__value_.__l.__size_ + 8);
            do
              v152 = __ldaxr(v151);
            while (__stlxr(v152 - 1, v151));
            if (!v152)
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
              v153 = v356;
              if (v356)
              {
LABEL_240:
                v154 = (unint64_t *)&v153->__shared_owners_;
                do
                  v155 = __ldaxr(v154);
                while (__stlxr(v155 - 1, v154));
                if (!v155)
                {
                  ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                  std::__shared_weak_count::__release_weak(v153);
                }
              }
            }
            else
            {
LABEL_239:
              v153 = v356;
              if (v356)
                goto LABEL_240;
            }
            if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v364.__r_.__value_.__l.__data_);
              v145 = (uint64_t *)*v145;
              if (!v145)
                break;
            }
            else
            {
              v145 = (uint64_t *)*v145;
              if (!v145)
                break;
            }
          }
        }
        memset(__p, 0, sizeof(__p));
        v325 = *(float *)&v377;
        prime = *((_QWORD *)&v375 + 1);
        if (*((_QWORD *)&v375 + 1) == 1)
        {
          prime = 2;
          goto LABEL_354;
        }
        if ((*((_QWORD *)&v375 + 1) & (*((_QWORD *)&v375 + 1) - 1)) != 0)
        {
          prime = std::__next_prime(*((size_t *)&v375 + 1));
          v156 = *(int8x8_t *)&__p[8];
          v157 = prime >= *(_QWORD *)&__p[8];
          if (prime > *(_QWORD *)&__p[8])
            goto LABEL_353;
        }
        else
        {
          v156 = 0;
          v157 = 1;
          if (*((_QWORD *)&v375 + 1))
          {
LABEL_353:
            if (prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
LABEL_354:
            v209 = operator new(8 * prime);
            v210 = *(void **)__p;
            *(_QWORD *)__p = v209;
            if (v210)
              operator delete(v210);
            v211 = 0;
            *(_QWORD *)&__p[8] = prime;
            do
              *(_QWORD *)(*(_QWORD *)__p + 8 * v211++) = 0;
            while (prime != v211);
            v212 = *(_QWORD ***)&__p[16];
            if (!*(_QWORD *)&__p[16])
              goto LABEL_378;
            v213 = *(_QWORD *)(*(_QWORD *)&__p[16] + 8);
            v214 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              v215 = v213 & v214;
              *(_QWORD *)(*(_QWORD *)__p + 8 * v215) = &__p[16];
              while (1)
              {
                v216 = *v212;
                if (!*v212)
                  break;
                v217 = v216[1] & v214;
                if (v217 == v215)
                {
                  v212 = (_QWORD **)*v212;
                }
                else if (*(_QWORD *)(*(_QWORD *)__p + 8 * v217))
                {
                  *v212 = (_QWORD *)*v216;
                  v218 = 8 * v217;
                  *v216 = **(_QWORD **)(*(_QWORD *)__p + v218);
                  **(_QWORD **)(*(_QWORD *)__p + v218) = v216;
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)__p + 8 * v217) = v212;
                  v212 = (_QWORD **)v216;
                  v215 = v217;
                }
              }
              goto LABEL_378;
            }
            if (v213 >= prime)
              v213 %= prime;
            *(_QWORD *)(*(_QWORD *)__p + 8 * v213) = &__p[16];
            v219 = *v212;
            if (!*v212)
            {
LABEL_378:
              i = (unsigned __int8 *)v376;
              if ((_QWORD)v376)
                goto LABEL_379;
              goto LABEL_380;
            }
            while (1)
            {
LABEL_373:
              v221 = v219[1];
              if (v221 >= prime)
                v221 %= prime;
              if (v221 == v213)
                goto LABEL_372;
              if (*(_QWORD *)(*(_QWORD *)__p + 8 * v221))
                break;
              *(_QWORD *)(*(_QWORD *)__p + 8 * v221) = v212;
              v212 = (_QWORD **)v219;
              v219 = (_QWORD *)*v219;
              v213 = v221;
              if (!v219)
                goto LABEL_378;
            }
            *v212 = (_QWORD *)*v219;
            v220 = 8 * v221;
            *v219 = **(_QWORD **)(*(_QWORD *)__p + v220);
            **(_QWORD **)(*(_QWORD *)__p + v220) = v219;
            v219 = v212;
LABEL_372:
            v212 = (_QWORD **)v219;
            v219 = (_QWORD *)*v219;
            if (!v219)
              goto LABEL_378;
            goto LABEL_373;
          }
        }
        if (v157)
          goto LABEL_378;
        v173 = vcvtps_u32_f32((float)*(unint64_t *)&__p[24] / v325);
        if (*(_QWORD *)&v156 < 3uLL
          || (v174 = (uint8x8_t)vcnt_s8(v156), v174.i16[0] = vaddlv_u8(v174), v174.u32[0] > 1uLL))
        {
          v173 = std::__next_prime(v173);
        }
        else
        {
          v175 = 1 << -(char)__clz(v173 - 1);
          if (v173 >= 2)
            v173 = v175;
        }
        if (prime <= v173)
          prime = v173;
        if (prime >= *(_QWORD *)&v156)
          goto LABEL_378;
        if (prime)
          goto LABEL_353;
        v277 = *(void **)__p;
        *(_QWORD *)__p = 0;
        if (v277)
          operator delete(v277);
        *(_QWORD *)&__p[8] = 0;
        for (i = (unsigned __int8 *)v376; i; i = *(unsigned __int8 **)i)
LABEL_379:
          std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t)__p, i + 16, (uint64_t)(i + 16));
LABEL_380:
        v326 = 0;
        v327 = 0;
        v328 = 0;
        v223 = v372;
        v224 = v373 - v372;
        if (v373 != v372)
        {
          if (v224 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v326 = operator new(v373 - v372);
          v327 = v326;
          v225 = (char *)v326 + 8 * (v224 >> 3);
          v328 = v225;
          memcpy(v326, v223, v224);
          v327 = v225;
        }
        v226 = v371;
        if (!v371)
          goto LABEL_387;
        v227 = (unint64_t *)&v371->__shared_owners_;
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v228 - 1, v227));
        if (!v228)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
          v229 = v372;
          if (v372)
          {
LABEL_388:
            v373 = v229;
            operator delete(v229);
          }
        }
        else
        {
LABEL_387:
          v229 = v372;
          if (v372)
            goto LABEL_388;
        }
        v230 = (void **)v376;
        if ((_QWORD)v376)
        {
          do
          {
            v240 = (void **)*v230;
            if (*((char *)v230 + 39) < 0)
              operator delete(v230[2]);
            operator delete(v230);
            v230 = v240;
          }
          while (v240);
        }
        v231 = (void *)v375;
        *(_QWORD *)&v375 = 0;
        if (v231)
          operator delete(v231);
        v232 = (_QWORD *)v378.__r_.__value_.__r.__words[2];
        if (v378.__r_.__value_.__r.__words[2])
        {
          do
          {
            v233 = (_QWORD *)*v232;
            operator delete(v232);
            v232 = v233;
          }
          while (v233);
        }
        v234 = (void *)v378.__r_.__value_.__r.__words[0];
        v378.__r_.__value_.__r.__words[0] = 0;
        if (v234)
          operator delete(v234);
        if (!v321)
          goto LABEL_400;
        v235 = (unint64_t *)&v321->__shared_owners_;
        do
          v236 = __ldaxr(v235);
        while (__stlxr(v236 - 1, v235));
        if (!v236)
        {
          ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
          std::__shared_weak_count::__release_weak(v321);
          v237 = v323;
          if (v323)
          {
LABEL_401:
            v238 = (unint64_t *)&v237->__shared_owners_;
            do
              v239 = __ldaxr(v238);
            while (__stlxr(v239 - 1, v238));
            if (!v239)
            {
              ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
              std::__shared_weak_count::__release_weak(v237);
            }
          }
        }
        else
        {
LABEL_400:
          v237 = v323;
          if (v323)
            goto LABEL_401;
        }
        BYTE7(v376) = 8;
        strcpy((char *)&v375, "function");
        MIL::Builder::OperationBuilder::TryGetAttribute();
        MIL::IRValue::AsTensor((MIL::IRValue *)v368.__r_.__value_.__l.__data_);
        MIL::IRValue::GetScalar<std::string>();
        v241 = (std::__shared_weak_count *)v368.__r_.__value_.__l.__size_;
        if (!v368.__r_.__value_.__l.__size_)
          goto LABEL_415;
        v242 = (unint64_t *)(v368.__r_.__value_.__l.__size_ + 8);
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
          if (SBYTE7(v376) < 0)
LABEL_416:
            operator delete((void *)v375);
        }
        else
        {
LABEL_415:
          if (SBYTE7(v376) < 0)
            goto LABEL_416;
        }
        MIL::Builder::ProgramBuilder::GetFunction();
        Espresso::AOT::UpdateFunctionIO((MIL::Builder::FunctionBuilder *)v375, (uint64_t)__p, &v326);
        v244 = (std::__shared_weak_count *)*((_QWORD *)&v375 + 1);
        if (!*((_QWORD *)&v375 + 1))
          goto LABEL_421;
        v245 = (unint64_t *)(*((_QWORD *)&v375 + 1) + 8);
        do
          v246 = __ldaxr(v245);
        while (__stlxr(v246 - 1, v245));
        if (v246)
        {
LABEL_421:
          if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_422;
LABEL_434:
          operator delete(v378.__r_.__value_.__l.__data_);
          v247 = v326;
          if (!v326)
            goto LABEL_424;
LABEL_423:
          v327 = v247;
          operator delete(v247);
          goto LABEL_424;
        }
        ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
        std::__shared_weak_count::__release_weak(v244);
        if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_434;
LABEL_422:
        v247 = v326;
        if (v326)
          goto LABEL_423;
LABEL_424:
        v248 = *(void ***)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          do
          {
            v251 = (void **)*v248;
            if (*((char *)v248 + 39) < 0)
              operator delete(v248[2]);
            operator delete(v248);
            v248 = v251;
          }
          while (v251);
        }
        v249 = *(void **)__p;
        *(_QWORD *)__p = 0;
        if (!v249)
          goto LABEL_481;
        operator delete(v249);
        v250 = v333;
        if (!v333)
          goto LABEL_48;
LABEL_482:
        v274 = (unint64_t *)&v250->__shared_owners_;
        do
          v275 = __ldaxr(v274);
        while (__stlxr(v275 - 1, v274));
        if (!v275)
        {
          ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
          std::__shared_weak_count::__release_weak(v250);
        }
LABEL_48:
        v32 += 16;
        v31 = v320;
      }
      v278 = (char *)v343;
      v279 = (char *)v344;
      v4 = v315;
      a3 = v316;
      if (v343 != v344)
      {
        do
        {
          MIL::Builder::BlockBuilder::RemoveOutput();
          v278 += 24;
        }
        while (v278 != v279);
        v280 = (char *)v343;
        v281 = (char *)v344;
        if (v343 != v344)
        {
          do
          {
            MIL::Builder::BlockBuilder::AddOutput();
            v280 += 24;
          }
          while (v280 != v281);
        }
      }
      v282 = (void **)v336[0];
      if (v336[0])
      {
        do
        {
          v292 = (void **)*v282;
          if (*((char *)v282 + 39) < 0)
            operator delete(v282[2]);
          operator delete(v282);
          v282 = v292;
        }
        while (v292);
      }
      v283 = v335[0];
      v335[0] = 0;
      if (v283)
        operator delete(v283);
      v284 = v339;
      if (!v339)
        goto LABEL_508;
      v285 = (unint64_t *)&v339->__shared_owners_;
      do
        v286 = __ldaxr(v285);
      while (__stlxr(v286 - 1, v285));
      if (!v286)
      {
        ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
        std::__shared_weak_count::__release_weak(v284);
        v287 = (void **)v341[0];
        if (v341[0])
          goto LABEL_545;
      }
      else
      {
LABEL_508:
        v287 = (void **)v341[0];
        if (!v341[0])
          goto LABEL_509;
        do
        {
LABEL_545:
          v305 = (void **)*v287;
          if (*((char *)v287 + 39) < 0)
            operator delete(v287[2]);
          operator delete(v287);
          v287 = v305;
        }
        while (v305);
      }
LABEL_509:
      v288 = v340[0];
      v340[0] = 0;
      if (v288)
        operator delete(v288);
      v289 = (void **)v343;
      if (v343)
      {
        v290 = v344;
        v291 = v343;
        if (v344 != v343)
        {
          do
          {
            if (*((char *)v290 - 1) < 0)
              operator delete(*(v290 - 3));
            v290 -= 3;
          }
          while (v290 != v289);
          v291 = v343;
        }
        v344 = v289;
        operator delete(v291);
      }
      v293 = (char *)v345;
      if (v345)
      {
        v294 = v346;
        v295 = v345;
        if (v346 != v345)
        {
          do
          {
            v296 = (std::__shared_weak_count *)*((_QWORD *)v294 - 1);
            if (v296)
            {
              v297 = (unint64_t *)&v296->__shared_owners_;
              do
                v298 = __ldaxr(v297);
              while (__stlxr(v298 - 1, v297));
              if (!v298)
              {
                ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                std::__shared_weak_count::__release_weak(v296);
              }
            }
            v294 -= 16;
          }
          while (v294 != v293);
          v295 = v345;
        }
        v346 = v293;
        operator delete(v295);
      }
      v299 = v348;
      if (!v348)
        goto LABEL_537;
      v300 = (unint64_t *)&v348->__shared_owners_;
      do
        v301 = __ldaxr(v300);
      while (__stlxr(v301 - 1, v300));
      if (!v301)
      {
        ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
        std::__shared_weak_count::__release_weak(v299);
        v302 = v350;
        if (v350)
        {
LABEL_538:
          v303 = (unint64_t *)&v302->__shared_owners_;
          do
            v304 = __ldaxr(v303);
          while (__stlxr(v304 - 1, v303));
          if (!v304)
          {
            ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
            std::__shared_weak_count::__release_weak(v302);
          }
        }
      }
      else
      {
LABEL_537:
        v302 = v350;
        if (v350)
          goto LABEL_538;
      }
      v5 = v318 + 24;
    }
    while (v318 + 24 != v317);
  }
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)v352);
  v306 = *a3;
  v307 = a3[1];
  if (*a3 != v307)
  {
    do
    {
      Espresso::AOT::ValidateAlignmentsAttrForE5Backend(*(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset **)__p);
      v306 += 24;
    }
    while (v306 != v307);
  }
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)v352);
  v308 = *(_QWORD *)__p;
  *(_QWORD *)__p = 0;
  if (v308)
    (*(void (**)(uint64_t))(*(_QWORD *)v308 + 8))(v308);
  v309 = v351;
  if (v351)
  {
    v310 = (unint64_t *)&v351->__shared_owners_;
    do
      v311 = __ldaxr(v310);
    while (__stlxr(v311 - 1, v310));
    if (!v311)
    {
      ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
      std::__shared_weak_count::__release_weak(v309);
    }
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v352);
}

void sub_191111998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  char a68;

  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a66);
    MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&a68);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a66);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&a68);
  _Unwind_Resume(a1);
}

MIL::IRValueType *`anonymous namespace'::MakeEntryPointIOType(_anonymous_namespace_ *this, MIL::MILContext *a2, const MIL::IRValueType *a3)
{
  MIL::IRValueType *v3;
  const MIL::IRValueType *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void **v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  const MIL::IRValueType *v23;
  MIL::IRMemoryLayoutValueType *v24;
  MIL::IRTensorBufferValueType *v25;
  uint64_t Shape;
  uint64_t v27;
  const void *v28;
  int64_t v29;
  char *v30;
  char *v31;
  uint64_t Strides;
  uint64_t v33;
  const void *v34;
  int64_t v35;
  uint64_t InterleaveFactors;
  uint64_t v37;
  const void *v38;
  int64_t v39;
  uint64_t Attributes;
  void **v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  const MIL::IRValueType *v47;
  std::logic_error *exception;
  void *v50[3];
  void *v51;
  void *v52;
  char *v53;
  void *__p;
  void *v55;
  char *v56;
  void *v57[2];
  void *v58;
  char *v59;
  char *v60;
  char *v61;

  v3 = a2;
  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    v6 = MIL::IRValueType::AsTensorType(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
    v60 = 0;
    v61 = 0;
    v59 = 0;
    v9 = *(const void **)v7;
    v8 = *(_QWORD *)(v7 + 8);
    v10 = v8 - *(_QWORD *)v7;
    if (v8 != *(_QWORD *)v7)
    {
      if (v10 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v11 = (char *)operator new(v8 - *(_QWORD *)v7);
      v12 = &v11[8 * (v10 >> 3)];
      v59 = v11;
      v61 = v12;
      memcpy(v11, v9, v10);
      v60 = v12;
    }
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(v6);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v57, v13);
    v55 = 0;
    v56 = 0;
    __p = 0;
    v14 = v60 - v59;
    if (v60 != v59)
    {
      if (v14 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v15 = (char *)operator new(v60 - v59);
      v16 = &v15[8 * (v14 >> 3)];
      __p = v15;
      v56 = v16;
      memset_pattern16(v15, &xmmword_191A87020, v14 & 0xFFFFFFFFFFFFFFF8);
      v55 = v16;
    }
    v3 = (MIL::IRValueType *)MIL::IRTensorValueType::MakeWithShape();
    if (__p)
    {
      v55 = __p;
      operator delete(__p);
    }
    v17 = (void **)v58;
    if (v58)
    {
      do
      {
        while (1)
        {
          v18 = (void **)*v17;
          v19 = (std::__shared_weak_count *)v17[6];
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(p_shared_owners);
            while (__stlxr(v21 - 1, p_shared_owners));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (*((char *)v17 + 39) < 0)
            break;
          operator delete(v17);
          v17 = v18;
          if (!v18)
            goto LABEL_20;
        }
        operator delete(v17[2]);
        operator delete(v17);
        v17 = v18;
      }
      while (v18);
    }
LABEL_20:
    v22 = v57[0];
    v57[0] = 0;
    if (!v22)
      goto LABEL_51;
    goto LABEL_21;
  }
  if (E5Common::Utils::IsTensorBuffer(v3, v5))
  {
    v24 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v3);
    v25 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v24);
    Shape = MIL::IRTensorBufferValueType::GetShape(v25);
    v60 = 0;
    v61 = 0;
    v59 = 0;
    v28 = *(const void **)Shape;
    v27 = *(_QWORD *)(Shape + 8);
    v29 = v27 - *(_QWORD *)Shape;
    if (v27 != *(_QWORD *)Shape)
    {
      if (v29 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v30 = (char *)operator new(v27 - *(_QWORD *)Shape);
      v31 = &v30[8 * (v29 >> 3)];
      v59 = v30;
      v61 = v31;
      memcpy(v30, v28, v29);
      v60 = v31;
    }
    if (!Espresso::AOT::ShapeHasUnknownDims(&v59))
      goto LABEL_51;
    MIL::IRTensorBufferValueType::GetDataType(v25);
    Strides = MIL::IRTensorBufferValueType::GetStrides(v25);
    __p = 0;
    v55 = 0;
    v56 = 0;
    v34 = *(const void **)Strides;
    v33 = *(_QWORD *)(Strides + 8);
    v35 = v33 - *(_QWORD *)Strides;
    if (v33 != *(_QWORD *)Strides)
    {
      if (v35 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      __p = operator new(v33 - *(_QWORD *)Strides);
      v56 = (char *)__p + 8 * (v35 >> 3);
      memcpy(__p, v34, v35);
      v55 = v56;
    }
    InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v25);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v38 = *(const void **)InterleaveFactors;
    v37 = *(_QWORD *)(InterleaveFactors + 8);
    v39 = v37 - *(_QWORD *)InterleaveFactors;
    if (v37 != *(_QWORD *)InterleaveFactors)
    {
      if (v39 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = operator new(v37 - *(_QWORD *)InterleaveFactors);
      v53 = (char *)v51 + 8 * (v39 >> 3);
      memcpy(v51, v38, v39);
      v52 = v53;
    }
    Attributes = MIL::IRTensorBufferValueType::GetAttributes(v25);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v57, Attributes);
    Espresso::AOT::Make64ByteAlignmentsVec((uint64_t *)&v59, 0, v50);
    v3 = (MIL::IRValueType *)MIL::IRTensorBufferValueType::MakeWithShape();
    if (v50[0])
    {
      v50[1] = v50[0];
      operator delete(v50[0]);
    }
    v41 = (void **)v58;
    if (v58)
    {
      do
      {
        while (1)
        {
          v42 = (void **)*v41;
          v43 = (std::__shared_weak_count *)v41[6];
          if (v43)
          {
            v44 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (*((char *)v41 + 39) < 0)
            break;
          operator delete(v41);
          v41 = v42;
          if (!v42)
            goto LABEL_45;
        }
        operator delete(v41[2]);
        operator delete(v41);
        v41 = v42;
      }
      while (v42);
    }
LABEL_45:
    v46 = v57[0];
    v57[0] = 0;
    if (v46)
      operator delete(v46);
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    v22 = __p;
    if (!__p)
      goto LABEL_51;
    v55 = __p;
LABEL_21:
    operator delete(v22);
LABEL_51:
    if (v59)
    {
      v60 = v59;
      operator delete(v59);
    }
    return v3;
  }
  if ((E5Common::Utils::IsPixelBuffer(v3, v23) & 1) == 0 && !E5Common::Utils::IsState(v3, v47))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported IRValueType in MakeEntryPointIOType.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  return v3;
}

void sub_1911124AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911124C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  void *v21;
  void *v22;

  if (__p)
    operator delete(__p);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a19);
  if (a13)
  {
    operator delete(a13);
    v21 = a16;
    if (!a16)
    {
LABEL_5:
      v22 = *(void **)(v19 - 72);
      if (!v22)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else
  {
    v21 = a16;
    if (!a16)
      goto LABEL_5;
  }
  operator delete(v21);
  v22 = *(void **)(v19 - 72);
  if (!v22)
LABEL_7:
    _Unwind_Resume(a1);
LABEL_6:
  *(_QWORD *)(v19 - 64) = v22;
  operator delete(v22);
  goto LABEL_7;
}

void sub_191112570(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (__p)
    operator delete(__p);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a19);
  if (!*(_QWORD *)(v19 - 72))
    JUMPOUT(0x19111253CLL);
  JUMPOUT(0x191112534);
}

void sub_1911125A0()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 72))
    JUMPOUT(0x19111253CLL);
  JUMPOUT(0x191112534);
}

void `anonymous namespace'::ValidateShapeOfMILType(uint64_t a1, E5Common::Utils *a2)
{
  uint64_t v3;
  const MIL::IRValueType *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  uint64_t EnumeratedShapes;
  const char *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  MIL::Attributes::FlexibleShapeInfo *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::logic_error *exception;
  uint8_t v21;
  _BYTE v22[7];
  uint64_t v23;
  std::__shared_weak_count *v24;
  MIL::Attributes::FlexibleShapeInfo *v25;
  uint8_t v26;
  _BYTE v27[7];
  void *__p;
  __int128 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  __p = operator new(0x20uLL);
  v29 = xmmword_191A71250;
  strcpy((char *)__p, "FlexibleShapeInformation");
  MIL::IRObject::TryGetAttributeSharedPtr();
  operator delete(__p);
  E5Common::Utils::GetMILShape(a2, v4, &__p);
  v5 = __p;
  v6 = (_QWORD *)v29;
  if (__p != (void *)v29)
  {
    while (1)
    {
      v7 = *v5;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Variadic dims not supported.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7))
        goto LABEL_3;
      if (!v30)
      {
        v16 = Espresso::espresso_os_log_subsystem(0, v8);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_3;
      }
      MIL::Attributes::FlexibleShapeInfo::Make();
      EnumeratedShapes = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v25);
      MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(v25);
      if (*(_QWORD *)(EnumeratedShapes + 24)
        || v23
        || (v11 = Espresso::espresso_os_log_subsystem(0, v10), !os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)))
      {
        v12 = v24;
        if (v24)
          goto LABEL_11;
      }
      else
      {
        v12 = v24;
        if (v24)
        {
LABEL_11:
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
      v15 = v25;
      v25 = 0;
      if (v15)
      {
        MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v15);
        MEMORY[0x19401CD90]();
      }
LABEL_3:
      if (++v5 == v6)
      {
        v5 = __p;
        break;
      }
    }
  }
  if (v5)
  {
    *(_QWORD *)&v29 = v5;
    operator delete(v5);
  }
  v17 = v31;
  if (v31)
  {
    v18 = (unint64_t *)&v31->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_19111284C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::unordered_map<std::string,MIL::IRValueType const*>,std::vector<MIL::IRValueType const*>>::~pair(uint64_t a1)
{
  void *v2;
  void **v3;
  void *v4;
  void **v6;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  v3 = *(void ***)(a1 + 16);
  if (v3)
  {
    do
    {
      v6 = (void **)*v3;
      if (*((char *)v3 + 39) < 0)
        operator delete(v3[2]);
      operator delete(v3);
      v3 = v6;
    }
    while (v6);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t `anonymous namespace'::AddAlignmentsAttr(uint64_t a1, const void **a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  char v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t result;
  std::runtime_error *exception;
  std::__shared_weak_count_vtbl *v12;
  void *__p[2];
  char v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;

  Espresso::AOT::MakeMILTensorValue(a1, a2);
  strcpy((char *)__p, "alignments");
  v14 = 10;
  v15 = v12;
  if (v12)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v12;
  }
  else
  {
    v4 = 0;
  }
  v16 = v4;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>(a3, (uint64_t)__p, (uint64_t)__p);
  v6 = v5;
  v7 = v16;
  if (!v16)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
LABEL_8:
    if ((v14 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v14 < 0)
LABEL_9:
    operator delete(__p[0]);
LABEL_10:
  result = 0;
  if ((v6 & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to insert alignment into the map of existing attributes.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_191112AA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191112AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a9)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::MakeBackendCompatibleType(uint64_t a1, E5Common::Utils *a2, unsigned __int16 *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  Espresso::AOT *v11;
  uint64_t v12;
  const MIL::IRValueType *v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  const MIL::IRValueType *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int64_t v28;
  void *v29;
  std::string::size_type v30;
  void *v31;
  uint64_t v32;
  void **v33;
  void **v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *v38;
  void *v39;
  const MIL::IRValueType *v40;
  MIL::IRMemoryLayoutValueType *v41;
  MIL::IRTensorBufferValueType *v42;
  uint64_t Shape;
  uint64_t v44;
  const void *v45;
  int64_t v46;
  char *v47;
  uint64_t Strides;
  uint64_t v49;
  const void *v50;
  int64_t v51;
  uint64_t InterleaveFactors;
  uint64_t v53;
  const void *v54;
  int64_t v55;
  uint64_t Attributes;
  _BOOL4 HasUnknownDims;
  uint64_t v58;
  MIL::IRProperty **v59;
  MIL::IRProperty **v60;
  uint64_t v61;
  MIL::IRProperty **v62;
  MIL::IRProperty **v63;
  MIL::IRProperty *v64;
  MIL::IRConstantProperty *v65;
  uint64_t v66;
  int v67;
  unsigned __int16 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  const MIL::IRValueType *v73;
  MIL::IRMemoryLayoutValueType *v74;
  uint64_t v75;
  int v76;
  unsigned __int16 *v77;
  int v79;
  int v80;
  unsigned __int16 *v82;
  int v83;
  int v84;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int16 *v89;
  int v90;
  int v91;
  BOOL v92;
  int v93;
  unsigned __int16 *v94;
  int v96;
  int v97;
  uint64_t *v99;
  unsigned int v100;
  MIL::Attributes::FlexibleShapeInfo *v101;
  uint64_t v102;
  std::string::size_type v103;
  int64_t v104;
  void *v105;
  std::string::size_type v106;
  _QWORD *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  std::logic_error *v112;
  unsigned __int16 *v113;
  int v114;
  int v115;
  uint64_t v117;
  void *v118;
  std::string::size_type v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int16 *v124;
  uint64_t v125;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v131;
  std::logic_error *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::string::size_type v137;
  std::string::size_type v138;
  int v139;
  const void *v140;
  std::string::size_type v141;
  std::string *p_p;
  void **v143;
  void **v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  MIL::Attributes::FlexibleShapeInfo *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t EnumeratedShapes;
  char *v155;
  unsigned __int8 *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 *v159;
  uint64_t v160;
  uint64_t v161;
  _BOOL4 v162;
  char *v163;
  void *v164;
  char *v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  _QWORD *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t *v177;
  int v178;
  uint64_t *v179;
  uint64_t *v180;
  int v181;
  int v182;
  int v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  char *v187;
  char *v188;
  void *v189;
  unint64_t *v190;
  unint64_t v191;
  std::logic_error *exception;
  std::string *v193;
  __int128 v194;
  std::logic_error *v195;
  std::logic_error *v196;
  uint64_t v197;
  std::string v198;
  std::string v199;
  MIL::Attributes::FlexibleShapeInfo *v200;
  std::string v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  std::string __p;
  void *v205[2];
  void *v206;
  _QWORD *v207;
  std::__shared_weak_count *v208;
  char *v209;
  char *v210;
  char *v211;
  uint64_t v212;

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  v11 = (Espresso::AOT *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_191A71250;
  strcpy(__p.__r_.__value_.__l.__data_, "FlexibleShapeInformation");
  MIL::IRObject::TryGetAttributeSharedPtr();
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v202)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 160))(&__p, a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v14 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
    if (v14[1] != *v14)
    {
      v15 = 0;
      do
      {
        E5Common::Utils::GetMILShape(*(E5Common::Utils **)(__p.__r_.__value_.__r.__words[0] + 8 * v15), v13, &v209);
        v16 = v210;
        if (v210 != v209)
        {
          v17 = 0;
          v16 = v209;
          do
          {
            if ((*(unsigned int (**)(_QWORD *))(**(_QWORD **)&v16[8 * v17] + 32))(*(_QWORD **)&v16[8 * v17]))
            {
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v193 = std::string::append(&v201, " is variadic. Such models are not supported.");
              v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
              v199.__r_.__value_.__r.__words[2] = v193->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v194;
              v193->__r_.__value_.__l.__size_ = 0;
              v193->__r_.__value_.__r.__words[2] = 0;
              v193->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &v199);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
              __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
            }
            ++v17;
            v16 = v209;
          }
          while (v17 < (v210 - v209) >> 3);
        }
        if (v16)
        {
          v210 = v16;
          operator delete(v16);
        }
        ++v15;
      }
      while (v15 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14[1] - *v14) >> 3));
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  MIL::Attributes::FlexibleShapeInfo::Make();
  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    v19 = MIL::IRValueType::AsTensorType(a2);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 96))(v19);
    memset(&v201, 0, sizeof(v201));
    v23 = *(const void **)v21;
    v22 = *(_QWORD *)(v21 + 8);
    v24 = v22 - *(_QWORD *)v21;
    if (v22 != *(_QWORD *)v21)
    {
      if (v24 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v201.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v22 - *(_QWORD *)v21);
      v201.__r_.__value_.__r.__words[2] = v201.__r_.__value_.__r.__words[0] + 8 * (v24 >> 3);
      memcpy(v201.__r_.__value_.__l.__data_, v23, v24);
      v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[2];
    }
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 80))(v19);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v199, v25);
    v26 = *((unsigned __int8 *)a3 + 23);
    v27 = (char)v26;
    if ((v26 & 0x80u) != 0)
      v26 = *((_QWORD *)a3 + 1);
    if (v26 != 3)
    {
      memset(&__p, 0, sizeof(__p));
      v28 = v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0];
      if (v201.__r_.__value_.__l.__size_ == v201.__r_.__value_.__r.__words[0])
        goto LABEL_23;
LABEL_21:
      if (v28 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v29 = operator new(v28);
      v30 = (std::string::size_type)v29 + 8 * (v28 >> 3);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      __p.__r_.__value_.__r.__words[2] = v30;
      memset_pattern16(v29, &xmmword_191A87020, v28 & 0xFFFFFFFFFFFFFFF8);
      __p.__r_.__value_.__l.__size_ = v30;
LABEL_23:
      v31 = (void *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_25;
      goto LABEL_24;
    }
    if (v27 >= 0)
      v82 = a3;
    else
      v82 = *(unsigned __int16 **)a3;
    v83 = *v82;
    v84 = *((unsigned __int8 *)v82 + 2);
    if (v83 != 28257 || v84 != 101)
    {
      memset(&__p, 0, sizeof(__p));
      v28 = v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0];
      if (v201.__r_.__value_.__l.__size_ == v201.__r_.__value_.__r.__words[0])
        goto LABEL_23;
      goto LABEL_21;
    }
    v197 = (uint64_t)v11;
    if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a5, a4))
    {
      v99 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a5, a4);
      if (!v99)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v100 = *((_BYTE *)v99 + 40) != 0;
      goto LABEL_130;
    }
    v137 = std::string::rfind((const std::string *)a4, 95, 0xFFFFFFFFFFFFFFFFLL);
    if (v137 == -1)
    {
      v100 = 0;
      goto LABEL_130;
    }
    v138 = *(unsigned __int8 *)(a4 + 23);
    v139 = (char)v138;
    if ((v138 & 0x80u) != 0)
      v138 = *(_QWORD *)(a4 + 8);
    if (v139 >= 0)
      v140 = (const void *)a4;
    else
      v140 = *(const void **)a4;
    if (v138 >= v137)
      v141 = v137;
    else
      v141 = v138;
    if (v141 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v141 >= 0x17)
    {
      v167 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v141 | 7) != 0x17)
        v167 = v141 | 7;
      v168 = v167 + 1;
      p_p = (std::string *)operator new(v167 + 1);
      __p.__r_.__value_.__l.__size_ = v141;
      __p.__r_.__value_.__r.__words[2] = v168 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v141;
      p_p = &__p;
      if (!v141)
        goto LABEL_273;
    }
    memmove(p_p, v140, v141);
LABEL_273:
    p_p->__r_.__value_.__s.__data_[v141] = 0;
    if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a5, (uint64_t)&__p))
    {
      v169 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a5, (uint64_t)&__p);
      if (!v169)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v100 = *((_BYTE *)v169 + 40) != 0;
    }
    else
    {
      v100 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_130:
    v101 = v200;
    v102 = Espresso::AOT::IRDataTypeToByteSize(v20);
    v103 = v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0];
    if (v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0] < 0x10)
    {
LABEL_131:
      memset(&__p, 0, sizeof(__p));
      v104 = v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0];
      if (v201.__r_.__value_.__l.__size_ != v201.__r_.__value_.__r.__words[0])
      {
        if (v104 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v105 = operator new(v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0]);
        v106 = (std::string::size_type)v105 + 8 * (v104 >> 3);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
        __p.__r_.__value_.__r.__words[2] = v106;
        memset_pattern16(v105, &xmmword_191A87020, v104 & 0xFFFFFFFFFFFFFFF8);
        __p.__r_.__value_.__l.__size_ = v106;
      }
LABEL_315:
      v31 = (void *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0])
      {
LABEL_25:
        v32 = MIL::IRTensorValueType::MakeWithShape();
        v33 = (void **)v199.__r_.__value_.__r.__words[2];
        if (v199.__r_.__value_.__r.__words[2])
        {
          do
          {
            while (1)
            {
              v34 = (void **)*v33;
              v35 = (std::__shared_weak_count *)v33[6];
              if (v35)
              {
                p_shared_owners = (unint64_t *)&v35->__shared_owners_;
                do
                  v37 = __ldaxr(p_shared_owners);
                while (__stlxr(v37 - 1, p_shared_owners));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
              if (*((char *)v33 + 39) < 0)
                break;
              operator delete(v33);
              v33 = v34;
              if (!v34)
                goto LABEL_35;
            }
            operator delete(v33[2]);
            operator delete(v33);
            v33 = v34;
          }
          while (v34);
        }
LABEL_35:
        v38 = (void *)v199.__r_.__value_.__r.__words[0];
        v199.__r_.__value_.__r.__words[0] = 0;
        if (v38)
          operator delete(v38);
        v39 = (void *)v201.__r_.__value_.__r.__words[0];
        if (v201.__r_.__value_.__r.__words[0])
        {
          v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
LABEL_234:
          operator delete(v39);
          goto LABEL_235;
        }
        goto LABEL_235;
      }
LABEL_24:
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(v31);
      goto LABEL_25;
    }
    v133 = v102;
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v201.__r_.__value_.__l.__size_ - 8) + 16))(*(_QWORD *)(v201.__r_.__value_.__l.__size_ - 8)))
    {
      v134 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v201.__r_.__value_.__l.__size_ - 8));
      v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 48))(v134) * v133;
      if (v100)
      {
        v136 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v201.__r_.__value_.__r.__words[0] + v103 - 16));
        LOBYTE(v135) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v136 + 48))(v136) * v135;
      }
      if ((v135 & 0x3F) == 0)
        goto LABEL_131;
LABEL_314:
      Espresso::AOT::Make64ByteAlignmentsVec((uint64_t *)&v201, v100, &__p);
      goto LABEL_315;
    }
    MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes(v101);
    EnumeratedShapes = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v101);
    std::unordered_map<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::unordered_map((uint64_t)&v209, EnumeratedShapes);
    MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(v101);
    if (v212)
    {
      v155 = v211;
      if (v211)
      {
        while (1)
        {
          if (v155[39] < 0)
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v155 + 2), *((_QWORD *)v155 + 3));
          else
            __p = *(std::string *)(v155 + 16);
          std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map((uint64_t)v205, (uint64_t)(v155 + 40));
          if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v205, a4))break;
          v156 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v205, (unsigned __int8 *)a4);
          if (!v156)
            goto LABEL_331;
          v157 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*((_QWORD *)v156 + 6) - 8));
          v158 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 48))(v157) * v133;
          if (v100)
          {
            v159 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v205, (unsigned __int8 *)a4);
            if (!v159)
LABEL_331:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v160 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(*((_QWORD *)v159 + 5) + v103 - 16));
            LOBYTE(v158) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v160 + 48))(v160) * v158;
          }
          v161 = a4;
          v162 = (v158 & 0x3F) != 0;
          v163 = (char *)v206;
          if (v206)
            goto LABEL_264;
LABEL_256:
          v164 = v205[0];
          v205[0] = 0;
          if (v164)
            operator delete(v164);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (v162)
            goto LABEL_299;
          v155 = *(char **)v155;
          a4 = v161;
          if (!v155)
            goto LABEL_279;
        }
        v161 = a4;
        v162 = 1;
        v163 = (char *)v206;
        if (!v206)
          goto LABEL_256;
        do
        {
LABEL_264:
          v165 = *(char **)v163;
          v166 = (void *)*((_QWORD *)v163 + 5);
          if (v166)
          {
            *((_QWORD *)v163 + 6) = v166;
            operator delete(v166);
          }
          if (v163[39] < 0)
            operator delete(*((void **)v163 + 2));
          operator delete(v163);
          v163 = v165;
        }
        while (v165);
        goto LABEL_256;
      }
LABEL_279:
      v170 = (_QWORD *)v198.__r_.__value_.__r.__words[0];
      if (!v198.__r_.__value_.__r.__words[0])
      {
LABEL_288:
        v176 = v207;
        if (!v207)
        {
LABEL_317:
          v183 = 1;
          v184 = v208;
          if (!v208)
            goto LABEL_304;
          goto LABEL_300;
        }
        goto LABEL_291;
      }
    }
    else
    {
      v170 = (_QWORD *)v198.__r_.__value_.__r.__words[0];
      if (!v198.__r_.__value_.__r.__words[0])
      {
        v176 = v207;
        if (!v207)
          goto LABEL_299;
LABEL_291:
        v177 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v176, a4);
        if (!v177
          || (v178 = *(_DWORD *)(v177[6] - 8),
              (v179 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v207, a4)) == 0))
        {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        if (v178 == *(_DWORD *)(v179[6] - 4))
        {
          v180 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v207, a4);
          if (!v180)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v181 = v133 * *(_DWORD *)(v180[6] - 8);
          if (v100)
          {
            v182 = *(_DWORD *)(*std::unordered_map<std::string,std::vector<std::pair<int,int>>>::at(v207, a4) + v103 - 16);
            if (v182 != *(_DWORD *)(*std::unordered_map<std::string,std::vector<std::pair<int,int>>>::at(v207, a4)
                                   + v103
                                   - 12))
              goto LABEL_299;
            v181 *= *(_DWORD *)(*std::unordered_map<std::string,std::vector<std::pair<int,int>>>::at(v207, a4)
                              + v103
                              - 16);
          }
          if ((v181 & 0x3F) == 0)
            goto LABEL_317;
        }
LABEL_299:
        v183 = 0;
        v184 = v208;
        if (!v208)
          goto LABEL_304;
LABEL_300:
        v185 = (unint64_t *)&v184->__shared_owners_;
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
LABEL_304:
        v187 = v211;
        if (v211)
        {
          do
          {
            v188 = *(char **)v187;
            std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)(v187 + 16));
            operator delete(v187);
            v187 = v188;
          }
          while (v188);
        }
        v189 = v209;
        v209 = 0;
        if (v189)
          operator delete(v189);
        if (v198.__r_.__value_.__l.__size_)
        {
          v190 = (unint64_t *)(v198.__r_.__value_.__l.__size_ + 8);
          do
            v191 = __ldaxr(v190);
          while (__stlxr(v191 - 1, v190));
          if (!v191)
          {
            (*(void (**)(std::string::size_type))(*(_QWORD *)v198.__r_.__value_.__l.__size_ + 16))(v198.__r_.__value_.__l.__size_);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v198.__r_.__value_.__l.__size_);
          }
        }
        if (v183)
          goto LABEL_131;
        goto LABEL_314;
      }
    }
    if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v170, a4))goto LABEL_299;
    v171 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v198.__r_.__value_.__l.__data_, a4);
    if (v171)
    {
      v172 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v171[6] - 8));
      v173 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v172 + 48))(v172) * v133;
      if (!v100)
        goto LABEL_287;
      v174 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v198.__r_.__value_.__l.__data_, a4);
      if (v174)
      {
        v175 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v174[5] + v103 - 16));
        LOBYTE(v173) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v175 + 48))(v175) * v173;
LABEL_287:
        if ((v173 & 0x3F) != 0)
          goto LABEL_299;
        goto LABEL_288;
      }
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (!E5Common::Utils::IsTensorBuffer(a2, v18))
  {
    if (!E5Common::Utils::IsPixelBuffer(a2, v40))
    {
      if (E5Common::Utils::IsState(a2, v73))
      {
        v86 = MIL::IRValueType::AsStateType(a2);
        v87 = *((unsigned __int8 *)a3 + 23);
        v88 = (char)v87;
        if ((v87 & 0x80u) != 0)
          v87 = *((_QWORD *)a3 + 1);
        v32 = v86;
        switch(v87)
        {
          case 3:
            if (v88 >= 0)
              v89 = a3;
            else
              v89 = *(unsigned __int16 **)a3;
            v90 = *v89;
            v91 = *((unsigned __int8 *)v89 + 2);
            v92 = v90 == 28257;
            v93 = 101;
            goto LABEL_175;
          case 8:
            if (v88 >= 0)
              v131 = a3;
            else
              v131 = *(_QWORD **)a3;
            if (*v131 != 0x6C6C61635F74696ALL)
              goto LABEL_192;
            goto LABEL_235;
          case 9:
            if (v88 >= 0)
              v124 = a3;
            else
              v124 = *(unsigned __int16 **)a3;
            v125 = *(_QWORD *)v124;
            v91 = *((unsigned __int8 *)v124 + 8);
            v92 = v125 == 0x706172675F73706DLL;
            v93 = 104;
LABEL_175:
            if (!v92 || v91 != v93)
              goto LABEL_192;
            goto LABEL_235;
          case 14:
            if (v88 >= 0)
              v127 = (uint64_t *)a3;
            else
              v127 = *(uint64_t **)a3;
            v128 = *v127;
            v129 = *(uint64_t *)((char *)v127 + 6);
            if (v128 != 0x6D696E696D5F3565 || v129 != 0x7570635F6C616D69)
              goto LABEL_192;
            goto LABEL_235;
          default:
LABEL_192:
            v132 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::logic_error::logic_error(v132, &__p);
            v132->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v132, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
      }
      v196 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v196, "Found unsupported type for MakeBackendCompatibleType.");
      v196->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v196, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
    v74 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    v32 = MIL::IRMemoryLayoutValueType::AsPixelBufferType(v74);
    v75 = *((unsigned __int8 *)a3 + 23);
    v76 = (char)v75;
    if ((v75 & 0x80u) != 0)
      v75 = *((_QWORD *)a3 + 1);
    switch(v75)
    {
      case 11:
        if (v76 >= 0)
          v108 = (uint64_t *)a3;
        else
          v108 = *(uint64_t **)a3;
        v109 = *v108;
        v110 = *(uint64_t *)((char *)v108 + 3);
        if (v109 == 0x5F63697373616C63 && v110 == 0x7570635F63697373)
          goto LABEL_235;
        break;
      case 8:
        if (v76 >= 0)
          v107 = a3;
        else
          v107 = *(_QWORD **)a3;
        if (*v107 == 0x6C6C61635F74696ALL)
          goto LABEL_235;
        break;
      case 3:
        v77 = v76 >= 0 ? a3 : *(unsigned __int16 **)a3;
        if (*v77 == 28257 && *((_BYTE *)v77 + 2) == 101)
          goto LABEL_235;
        v79 = *v77;
        v80 = *((unsigned __int8 *)v77 + 2);
        if (v79 == 26981 && v80 == 114)
          goto LABEL_235;
        break;
    }
    v112 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(v112, &__p);
    v112->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v112, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v41 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
  v42 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v41);
  MIL::IRTensorBufferValueType::GetDataType(v42);
  Shape = MIL::IRTensorBufferValueType::GetShape(v42);
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v45 = *(const void **)Shape;
  v44 = *(_QWORD *)(Shape + 8);
  v46 = v44 - *(_QWORD *)Shape;
  if (v44 != *(_QWORD *)Shape)
  {
    if (v46 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v209 = (char *)operator new(v44 - *(_QWORD *)Shape);
    v210 = v209;
    v47 = &v209[8 * (v46 >> 3)];
    v211 = v47;
    memcpy(v209, v45, v46);
    v210 = v47;
  }
  Strides = MIL::IRTensorBufferValueType::GetStrides(v42);
  memset(&v199, 0, sizeof(v199));
  v50 = *(const void **)Strides;
  v49 = *(_QWORD *)(Strides + 8);
  v51 = v49 - *(_QWORD *)Strides;
  if (v49 != *(_QWORD *)Strides)
  {
    if (v51 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v199.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v49 - *(_QWORD *)Strides);
    v199.__r_.__value_.__r.__words[2] = v199.__r_.__value_.__r.__words[0] + 8 * (v51 >> 3);
    memcpy(v199.__r_.__value_.__l.__data_, v50, v51);
    v199.__r_.__value_.__l.__size_ = v199.__r_.__value_.__r.__words[2];
  }
  InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v42);
  memset(&v201, 0, sizeof(v201));
  v54 = *(const void **)InterleaveFactors;
  v53 = *(_QWORD *)(InterleaveFactors + 8);
  v55 = v53 - *(_QWORD *)InterleaveFactors;
  if (v53 != *(_QWORD *)InterleaveFactors)
  {
    if (v55 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v201.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v53 - *(_QWORD *)InterleaveFactors);
    v201.__r_.__value_.__r.__words[2] = v201.__r_.__value_.__r.__words[0] + 8 * (v55 >> 3);
    memcpy(v201.__r_.__value_.__l.__data_, v54, v55);
    v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[2];
  }
  Attributes = MIL::IRTensorBufferValueType::GetAttributes(v42);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&__p, Attributes);
  HasUnknownDims = Espresso::AOT::ShapeHasUnknownDims(&v209);
  v58 = MIL::IRTensorBufferValueType::GetStrides(v42);
  v59 = *(MIL::IRProperty ***)v58;
  v60 = *(MIL::IRProperty ***)(v58 + 8);
  if (*(MIL::IRProperty ***)v58 != v60)
  {
    if (HasUnknownDims)
    {
      while (!MIL::IRProperty::TryAsConstant(*v59))
      {
        if (++v59 == v60)
          goto LABEL_56;
      }
      v195 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v195, "Strides must be unknown if there is any unknown dimension.");
    }
    else
    {
      while (MIL::IRProperty::TryAsConstant(*v59))
      {
        if (++v59 == v60)
          goto LABEL_56;
      }
      v195 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v195, "Strides must be constant if dimensions are all constant.");
    }
LABEL_324:
    v195->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v195, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
LABEL_56:
  v61 = MIL::IRTensorBufferValueType::GetInterleaveFactors(v42);
  v62 = *(MIL::IRProperty ***)v61;
  v63 = *(MIL::IRProperty ***)(v61 + 8);
  if (*(MIL::IRProperty ***)v61 != v63)
  {
    if (HasUnknownDims)
    {
      while (1)
      {
        v64 = *v62;
        if (!MIL::IRProperty::TryAsConstant(*v62))
          goto LABEL_320;
        v65 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v64);
        if (MIL::IRConstantProperty::GetUInt8ScalarValue(v65) != 1)
          break;
        if (++v62 == v63)
          goto LABEL_64;
      }
      v195 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v195, "interleave_factors must be all 1s.");
    }
    else
    {
      while (MIL::IRProperty::TryAsConstant(*v62))
      {
        if (++v62 == v63)
          goto LABEL_64;
      }
LABEL_320:
      v195 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v195, "interleave_factors must be constant.");
    }
    goto LABEL_324;
  }
LABEL_64:
  v66 = *((unsigned __int8 *)a3 + 23);
  v67 = (char)v66;
  if ((v66 & 0x80u) != 0)
    v66 = *((_QWORD *)a3 + 1);
  if (!HasUnknownDims)
  {
    if (v66 == 11)
    {
      if (v67 >= 0)
        v120 = (uint64_t *)a3;
      else
        v120 = *(uint64_t **)a3;
      v121 = *v120;
      v122 = *(uint64_t *)((char *)v120 + 3);
      if (v121 != 0x5F63697373616C63 || v122 != 0x7570635F63697373)
        goto LABEL_215;
    }
    else
    {
      if (v66 != 3)
      {
LABEL_215:
        v32 = MIL::IRTensorBufferValueType::MakeWithShape();
        goto LABEL_216;
      }
      if (v67 >= 0)
        v94 = a3;
      else
        v94 = *(unsigned __int16 **)a3;
      if (*v94 == 28257 && *((_BYTE *)v94 + 2) == 101)
      {
        Espresso::AOT::MakeAneCompatibleStrides(v11, v42, &v198);
        goto LABEL_212;
      }
      v96 = *v94;
      v97 = *((unsigned __int8 *)v94 + 2);
      if (v96 != 26981 || v97 != 114)
        goto LABEL_215;
    }
    Espresso::AOT::MakeDefaultStrides(v11, (uint64_t *)&v209, (uint64_t *)&v201, &v198);
LABEL_212:
    if (v199.__r_.__value_.__r.__words[0])
    {
      v199.__r_.__value_.__l.__size_ = v199.__r_.__value_.__r.__words[0];
      operator delete(v199.__r_.__value_.__l.__data_);
    }
    v199 = v198;
    goto LABEL_215;
  }
  if (v66 == 3)
  {
    if (v67 >= 0)
      v113 = a3;
    else
      v113 = *(unsigned __int16 **)a3;
    v114 = *v113;
    v115 = *((unsigned __int8 *)v113 + 2);
    if (v114 != 26981 || v115 != 114)
      goto LABEL_76;
LABEL_156:
    memset(&v198, 0, sizeof(v198));
    v117 = v210 - v209;
    if (v210 != v209)
    {
      if (v117 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v118 = operator new(v210 - v209);
      v119 = (std::string::size_type)v118 + 8 * (v117 >> 3);
      v198.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
      v198.__r_.__value_.__r.__words[2] = v119;
      memset_pattern16(v118, &xmmword_191A87020, v117 & 0xFFFFFFFFFFFFFFF8);
      v198.__r_.__value_.__l.__size_ = v119;
    }
    v72 = MIL::IRTensorValueType::MakeWithShape();
    goto LABEL_160;
  }
  if (v66 == 11)
  {
    v68 = v67 >= 0 ? a3 : *(unsigned __int16 **)a3;
    v69 = *(_QWORD *)v68;
    v70 = *(_QWORD *)((char *)v68 + 3);
    if (v69 == 0x5F63697373616C63 && v70 == 0x7570635F63697373)
      goto LABEL_156;
  }
LABEL_76:
  Espresso::AOT::Make64ByteAlignmentsVec((uint64_t *)&v209, 0, &v198);
  v72 = MIL::IRTensorBufferValueType::MakeWithShape();
LABEL_160:
  v32 = v72;
  if (v198.__r_.__value_.__r.__words[0])
  {
    v198.__r_.__value_.__l.__size_ = v198.__r_.__value_.__r.__words[0];
    operator delete(v198.__r_.__value_.__l.__data_);
  }
LABEL_216:
  v143 = (void **)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    do
    {
      while (1)
      {
        v144 = (void **)*v143;
        v145 = (std::__shared_weak_count *)v143[6];
        if (v145)
        {
          v146 = (unint64_t *)&v145->__shared_owners_;
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }
        if (*((char *)v143 + 39) < 0)
          break;
        operator delete(v143);
        v143 = v144;
        if (!v144)
          goto LABEL_226;
      }
      operator delete(v143[2]);
      operator delete(v143);
      v143 = v144;
    }
    while (v144);
  }
LABEL_226:
  v148 = (void *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v148)
    operator delete(v148);
  if (v201.__r_.__value_.__r.__words[0])
  {
    v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  if (v199.__r_.__value_.__r.__words[0])
  {
    v199.__r_.__value_.__l.__size_ = v199.__r_.__value_.__r.__words[0];
    operator delete(v199.__r_.__value_.__l.__data_);
  }
  v39 = v209;
  if (v209)
  {
    v210 = v209;
    goto LABEL_234;
  }
LABEL_235:
  v149 = v200;
  v200 = 0;
  if (v149)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v149);
    MEMORY[0x19401CD90]();
  }
  v150 = v203;
  if (v203)
  {
    v151 = (unint64_t *)&v203->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  return v32;
}

void sub_191113FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,MIL::Attributes::FlexibleShapeInfo *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v38 - 144);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(v38 - 128);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::~unique_ptr[abi:ne180100](&a24);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::~pair(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  void *v6;

  v2 = *(char **)(a1 + 40);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (void *)*((_QWORD *)v2 + 5);
      if (v6)
      {
        *((_QWORD *)v2 + 6) = v6;
        operator delete(v6);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    operator delete(v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::unordered_map<std::string,std::vector<std::pair<int,int>>>::at(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a1, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 5;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  _QWORD *v29;
  std::string *v30;
  float v31;
  float v32;
  _QWORD *v33;
  _QWORD *v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  int8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v46[2];
  char v47;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v46, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = v16[1];
            if (v24 == v12)
            {
              v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v16 + 39);
              else
                v26 = v16[3];
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3]))
                    return v16;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return v16;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return v16;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v29 = operator new(0x30uLL);
  v46[0] = v29;
  v46[1] = a1 + 16;
  v47 = 0;
  *v29 = 0;
  v29[1] = v12;
  v30 = (std::string *)(v29 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v29[4] = *(_QWORD *)(a3 + 16);
  }
  v29[5] = *a4;
  v47 = 1;
  v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v32 = *(float *)(a1 + 32);
  if (!v13 || (float)(v32 * (float)v13) < v31)
  {
    v35 = 1;
    if (v13 >= 3)
      v35 = (v13 & (v13 - 1)) != 0;
    v36 = v35 | (2 * v13);
    v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37)
      prime = v37;
    else
      prime = v36;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v39)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v39)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v39 < 3uLL || (v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < *(_QWORD *)&v39)
LABEL_68:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v43 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        v34 = (_QWORD *)v46[0];
        if (v33)
          goto LABEL_57;
      }
      else
      {
        v4 = v12;
        v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        v34 = (_QWORD *)v46[0];
        if (v33)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v43 & v12;
      v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v43 & v12));
      v34 = (_QWORD *)v46[0];
      if (v33)
        goto LABEL_57;
    }
LABEL_81:
    *v34 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v46[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v46[0])
    {
      v44 = *(_QWORD *)(*(_QWORD *)v46[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v44 >= v13)
          v44 %= v13;
      }
      else
      {
        v44 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v46[0];
    }
    goto LABEL_92;
  }
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v34 = (_QWORD *)v46[0];
  if (!v33)
    goto LABEL_81;
LABEL_57:
  *v34 = *v33;
  *v33 = v46[0];
LABEL_92:
  v16 = (uint64_t *)v46[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_19111481C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191114830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_3(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void `anonymous namespace'::ValidateShapeOfMILType(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_3(&dword_190DAF000, (int)a2, a3, "MIL program has non-constant (dynamic) shapes for external input but FlexibleShapeInformation attribute is missing. E5 function will be produced with unknown input shapes and cannot be run without reshaping first.", a1);
}

{
  *a1 = 0;
  *a2 = 0;
  OUTLINED_FUNCTION_0_3(&dword_190DAF000, (int)a2, a3, "MIL program has non-constant (dynamic) shapes with FlexibleShapeInformation attribute. But, it misses Enumerated Shape or Range Shape Config. This may cause problems with some backends. Please consult MIL Framework or milPython on adding this to the MIL text.", a1);
}

_QWORD *Espresso::AOT::EvaluatorClassic::EvaluatorClassic(_QWORD *a1, __int128 *a2)
{
  _QWORD *v4;
  std::string *v5;
  __int128 v6;

  v4 = Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator(a1);
  Espresso::AOT::AbstractValidator::AbstractValidator(v4 + 1);
  *a1 = off_1E2DA0400;
  a1[1] = &unk_1E2DA0448;
  v5 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    a1[4] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[5] = 0;
  return a1;
}

{
  _QWORD *v4;
  std::string *v5;
  __int128 v6;

  v4 = Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator(a1);
  Espresso::AOT::AbstractValidator::AbstractValidator(v4 + 1);
  *a1 = off_1E2DA0400;
  a1[1] = &unk_1E2DA0448;
  v5 = (std::string *)(a1 + 2);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    a1[4] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[5] = 0;
  return a1;
}

void sub_191114944(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractCostEstimator *v1;
  Espresso::AOT::AbstractValidator *v2;

  Espresso::AOT::AbstractValidator::~AbstractValidator(v2);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

void sub_191114960(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractCostEstimator *v1;

  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

void sub_191114A00(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractCostEstimator *v1;
  Espresso::AOT::AbstractValidator *v2;

  Espresso::AOT::AbstractValidator::~AbstractValidator(v2);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

void sub_191114A1C(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractCostEstimator *v1;

  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::EvaluatorClassic::Validate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int16 *v8;
  uint64_t v9;
  Espresso::AOT::EvaluatorClassicStates *v10;
  uint64_t v11;
  uint64_t Function;
  uint64_t v13;
  _QWORD **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *OpMappedLayers;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 IsValid;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  char *v31;
  char *v32;
  void *v33;
  char *v34;
  uint64_t v35;
  int v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  MIL::IRValueType *ParameterType;
  uint64_t v42;
  char v43;
  uint64_t *v45;

  v8 = (unsigned __int16 *)(a1 + 16);
  v9 = operator new();
  Espresso::AOT::EvaluatorClassicStates::EvaluatorClassicStates(v9, a2, a3, v8);
  v45 = a4;
  v10 = *(Espresso::AOT::EvaluatorClassicStates **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  if (v10)
  {
    Espresso::AOT::EvaluatorClassicStates::~EvaluatorClassicStates(v10);
    MEMORY[0x19401CD90](v11);
  }
  Function = MIL::IRProgram::GetFunction();
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v14 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 56))(v15);
  if (*(_QWORD *)(*(_QWORD *)v16 + 8) != **(_QWORD **)v16)
  {
    v17 = 0;
    do
    {
      v20 = *(_QWORD *)(**v14 + 16 * v17);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 64))(v20);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 104))(v21) & 1) != 0)
        goto LABEL_5;
      if (Espresso::AOT::IsFallbackBackend(v8))
      {
        v22 = 1;
      }
      else
      {
        OpMappedLayers = (_QWORD *)Espresso::AOT::EvaluatorClassicStates::GetOpMappedLayers(*(Espresso::AOT::EvaluatorClassicStates **)(a1 + 40), v17);
        v24 = OpMappedLayers[1];
        if (*OpMappedLayers == v24)
        {
          v22 = 0;
        }
        else
        {
          v25 = *OpMappedLayers + 8;
          do
          {
            IsValid = Espresso::AOT::EvaluatorClassicStates::LayerIsValid(*(Espresso::AOT::EvaluatorClassicStates **)(a1 + 40), *(_QWORD *)(v25 - 8));
            v27 = !IsValid || v25 == v24;
            v25 += 8;
          }
          while (!v27);
          v22 = IsValid;
        }
      }
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 56))(v20);
      v29 = *(unsigned __int8 *)(v28 + 23);
      v30 = (v29 & 0x80u) != 0;
      if ((v29 & 0x80u) != 0)
        v29 = *(_QWORD *)(v28 + 8);
      if (v30)
        v31 = *(char **)v28;
      else
        v31 = (char *)v28;
      if (v29 >= 4)
      {
        v32 = &v31[v29];
        v33 = v31;
        do
        {
          v34 = (char *)memchr(v33, 99, v29 - 3);
          if (!v34)
            break;
          if (*(_DWORD *)v34 == 1953718627)
          {
            if (v34 == v32 || v34 - v31 == -1)
              break;
            v35 = *(unsigned __int8 *)(a1 + 39);
            v36 = (char)v35;
            if ((v35 & 0x80u) != 0)
              v35 = *(_QWORD *)(a1 + 24);
            if (v35 != 3)
              break;
            v37 = v36 >= 0 ? v8 : *(unsigned __int16 **)v8;
            v38 = *v37;
            v39 = *((unsigned __int8 *)v37 + 2);
            if (v38 != 28257 || v39 != 101)
              break;
            ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
            v42 = MIL::IRValueType::AsTensorType(ParameterType);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 88))(v42) == 5)
              v43 = 0;
            else
              v43 = v22;
            if ((v43 & 1) != 0)
              goto LABEL_5;
            goto LABEL_6;
          }
          v33 = v34 + 1;
          v29 = v32 - (_BYTE *)v33;
        }
        while (v32 - (_BYTE *)v33 >= 4);
      }
      if (v22)
LABEL_5:
        Espresso::AOT::EvaluatorClassicStates::MarkDispatchUnitAsValid(*(Espresso::AOT::EvaluatorClassicStates **)(a1 + 40), v17);
LABEL_6:
      ++v17;
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 56))(v18);
    }
    while (v17 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v19 + 8) - **(_QWORD **)v19) >> 4);
  }
  return Espresso::AOT::EvaluatorClassicStates::GetValidationResult(*(Espresso::AOT::EvaluatorClassicStates **)(a1 + 40), v45);
}

void sub_191114D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'Espresso::AOT::EvaluatorClassic::Validate@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return Espresso::AOT::EvaluatorClassic::Validate(a1 - 8, a2, a3, a4);
}

uint64_t Espresso::AOT::EvaluatorClassic::EstimateCost@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  const MIL::IROperation ****v6;
  const MIL::IROperation **v7;
  const MIL::IROperation **i;
  _QWORD *Network;
  const MIL::IROperation ****v10;
  const MIL::IROperation **v11;
  _QWORD *v12;
  void **v13;
  double v14;
  uint64_t OpMappedLayers;
  unint64_t *v16;
  unint64_t *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t k;
  int8x8_t v22;
  uint8x8_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  double LocalCost;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  __int128 v50;
  _BYTE *v51;
  _BYTE *v52;
  size_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void **v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  __int128 v67;
  char *v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  void *v74;
  uint64_t v75;
  uint64_t result;
  uint64_t *v77;
  uint64_t v78;
  const MIL::IROperation **v79;
  const MIL::IROperation **v80;
  _QWORD *v81;
  int v82;
  unint64_t *v83;
  unint64_t *v84;
  _QWORD *v85;
  unsigned __int8 *v86;
  uint64_t j;
  uint64_t v88;
  std::__shared_weak_count *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  void *__p[2];
  char *v94;
  char *v95;
  char *v96;
  char *v97;

  if (!*(_QWORD *)(a1 + 40))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("EstimateCost can only be called after Validate");
  v6 = (const MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v7 = **v6;
  for (i = (*v6)[1]; v7 != i; v7 += 2)
  {
    if (!Espresso::AOT::EvaluatorClassicStates::OperationIsValid(*(int8x8_t **)(a1 + 40), *v7))
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Trying to get cost of an invalid op");
  }
  v77 = a3;
  v82 = Espresso::AOT::BackendNameToEspressoPlatform((uint64_t *)(a1 + 16));
  Network = (_QWORD *)Espresso::AOT::EvaluatorClassicStates::GetNetwork(*(Espresso::AOT::EvaluatorClassicStates **)(a1 + 40));
  v10 = (const MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v11 = **v10;
  v79 = (*v10)[1];
  if (v11 != v79)
  {
    v78 = a1;
    v12 = Network + 17;
    v13 = __p;
    v14 = 0.0;
    v81 = Network;
    v85 = Network + 17;
    while (1)
    {
      v80 = v11;
      OpMappedLayers = Espresso::AOT::EvaluatorClassicStates::GetOpMappedLayers(*(Espresso::AOT::EvaluatorClassicStates **)(v78 + 40), *v11);
      v17 = *(unint64_t **)OpMappedLayers;
      v16 = *(unint64_t **)(OpMappedLayers + 8);
      v83 = v16;
      while (v17 != v16)
      {
        v19 = *v17;
        v20 = Network[4];
        if (*v17 >= (Network[5] - v20) >> 4)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        k = *(_QWORD *)(v20 + 16 * v19);
        v95 = 0;
        v96 = 0;
        v97 = 0;
        v22 = (int8x8_t)Network[8];
        if (!*(_QWORD *)&v22)
          goto LABEL_82;
        v23 = (uint8x8_t)vcnt_s8(v22);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          v24 = v19;
          if (v19 >= *(_QWORD *)&v22)
            v24 = v19 % *(_QWORD *)&v22;
        }
        else
        {
          v24 = (*(_QWORD *)&v22 - 1) & v19;
        }
        v25 = *(_QWORD **)(Network[7] + 8 * v24);
        if (!v25 || (v26 = (_QWORD *)*v25) == 0)
LABEL_82:
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        v84 = v17;
        if (v23.u32[0] < 2uLL)
        {
          v27 = *(_QWORD *)&v22 - 1;
          while (1)
          {
            v29 = v26[1];
            if (v19 == v29)
            {
              if (v26[2] == v19)
                goto LABEL_34;
            }
            else if ((v29 & v27) != v24)
            {
              goto LABEL_82;
            }
            v26 = (_QWORD *)*v26;
            if (!v26)
              goto LABEL_82;
          }
        }
        while (1)
        {
          v28 = v26[1];
          if (v19 == v28)
            break;
          if (v28 >= *(_QWORD *)&v22)
            v28 %= *(_QWORD *)&v22;
          if (v28 != v24)
            goto LABEL_82;
LABEL_24:
          v26 = (_QWORD *)*v26;
          if (!v26)
            goto LABEL_82;
        }
        if (v26[2] != v19)
          goto LABEL_24;
LABEL_34:
        v31 = (unsigned __int8 *)v26[3];
        v30 = (unsigned __int8 *)v26[4];
        v86 = v30;
        for (j = k; v31 != v30; v31 += 24)
        {
          v48 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v12, v31);
          if (!v48)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v49 = *((_QWORD *)v48 + 5);
          *v13 = 0;
          v13[1] = 0;
          v13[2] = 0;
          v50 = *(_OWORD *)(v49 + 24);
          v90 = *(_OWORD *)(v49 + 8);
          v91 = v50;
          v92 = *(_QWORD *)(v49 + 40);
          if (v13 == (void **)(v49 + 48))
          {
            v56 = 0;
            v57 = 0;
            v55 = 0;
            v59 = v96;
            v58 = v97;
            if (v96 >= v97)
              goto LABEL_59;
          }
          else
          {
            v52 = *(_BYTE **)(v49 + 48);
            v51 = *(_BYTE **)(v49 + 56);
            v53 = v51 - v52;
            v54 = (v51 - v52) >> 2;
            if (v51 == v52)
            {
              v56 = 0;
              v55 = 0;
              v57 = 4 * v54;
              __p[1] = (void *)(4 * v54);
              v59 = v96;
              v58 = v97;
              if (v96 >= v97)
                goto LABEL_59;
            }
            else
            {
              if ((v53 & 0x8000000000000000) != 0)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v55 = (char *)operator new(v51 - v52);
              __p[0] = v55;
              __p[1] = v55;
              v56 = &v55[4 * v54];
              v94 = v56;
              memcpy(v55, v52, v53);
              v57 = (uint64_t)v56;
              __p[1] = v56;
              v59 = v96;
              v58 = v97;
              if (v96 >= v97)
              {
LABEL_59:
                v60 = v13;
                v61 = v95;
                v62 = (v59 - v95) >> 6;
                v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 58)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v64 = v58 - v95;
                if (v64 >> 5 > v63)
                  v63 = v64 >> 5;
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFC0)
                  v65 = 0x3FFFFFFFFFFFFFFLL;
                else
                  v65 = v63;
                if (v65 >> 58)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v66 = (char *)operator new(v65 << 6);
                v67 = v91;
                v68 = &v66[64 * v62];
                *(_OWORD *)v68 = v90;
                *((_OWORD *)v68 + 1) = v67;
                *((_QWORD *)v68 + 4) = v92;
                v69 = &v66[v59 - v61];
                *((_QWORD *)v69 + 5) = v55;
                *((_QWORD *)v69 + 6) = v57;
                *((_QWORD *)v69 + 7) = v56;
                v13 = v60;
                v60[1] = 0;
                v60[2] = 0;
                v70 = v68 + 64;
                *v60 = 0;
                if (v59 == v61)
                {
                  v95 = v68;
                  v96 = v68 + 64;
                  v97 = &v66[64 * v65];
                  v12 = v85;
                  v30 = v86;
                  k = j;
                }
                else
                {
                  do
                  {
                    v71 = *((_OWORD *)v59 - 4);
                    v72 = *((_OWORD *)v59 - 3);
                    *((_QWORD *)v68 - 4) = *((_QWORD *)v59 - 4);
                    *((_OWORD *)v68 - 4) = v71;
                    *((_OWORD *)v68 - 3) = v72;
                    *(_OWORD *)(v68 - 24) = *(_OWORD *)(v59 - 24);
                    *((_QWORD *)v68 - 1) = *((_QWORD *)v59 - 1);
                    v68 -= 64;
                    *((_QWORD *)v59 - 3) = 0;
                    *((_QWORD *)v59 - 2) = 0;
                    *((_QWORD *)v59 - 1) = 0;
                    v59 -= 64;
                  }
                  while (v59 != v61);
                  v59 = v95;
                  v73 = v96;
                  v95 = v68;
                  v96 = v70;
                  v97 = &v66[64 * v65];
                  v12 = v85;
                  v30 = v86;
                  for (k = j; v73 != v59; v73 -= 64)
                  {
                    v74 = (void *)*((_QWORD *)v73 - 3);
                    if (v74)
                    {
                      *((_QWORD *)v73 - 2) = v74;
                      operator delete(v74);
                    }
                  }
                }
                if (v59)
                  operator delete(v59);
                v96 = v70;
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                continue;
              }
            }
          }
          v46 = v91;
          v47 = v92;
          *(_OWORD *)v59 = v90;
          *((_OWORD *)v59 + 1) = v46;
          *((_QWORD *)v59 + 4) = v47;
          *((_QWORD *)v59 + 5) = 0;
          *((_QWORD *)v59 + 6) = 0;
          *((_QWORD *)v59 + 7) = 0;
          *(_OWORD *)(v59 + 40) = *(_OWORD *)__p;
          *((_QWORD *)v59 + 7) = v94;
          v96 = v59 + 64;
        }
        (*(void (**)(_QWORD, char **, _QWORD))(**(_QWORD **)(k + 64) + 128))(*(_QWORD *)(k + 64), &v95, *(unsigned int *)(k + 12));
        v36 = *(std::__shared_weak_count **)(k + 72);
        v88 = *(_QWORD *)(k + 64);
        v89 = v36;
        if (v36)
        {
          p_shared_owners = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldxr(p_shared_owners);
          while (__stxr(v38 + 1, p_shared_owners));
        }
        Network = v81;
        LocalCost = Espresso::AOT::GetLocalCost(v82, (uint64_t)&v88, v32, v33, v34, v35);
        v40 = v89;
        if (!v89)
          goto LABEL_42;
        v41 = (unint64_t *)&v89->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
          v43 = v95;
          if (v95)
          {
LABEL_43:
            v44 = v96;
            v18 = v43;
            if (v96 != v43)
            {
              do
              {
                v45 = (void *)*((_QWORD *)v44 - 3);
                if (v45)
                {
                  *((_QWORD *)v44 - 2) = v45;
                  operator delete(v45);
                }
                v44 -= 64;
              }
              while (v44 != v43);
              v18 = v95;
            }
            v96 = v43;
            operator delete(v18);
          }
        }
        else
        {
LABEL_42:
          v43 = v95;
          if (v95)
            goto LABEL_43;
        }
        v14 = LocalCost + v14;
        v17 = v84 + 1;
        v16 = v83;
      }
      v11 = v80 + 2;
      if (v80 + 2 == v79)
        goto LABEL_81;
    }
  }
  v14 = 0.0;
LABEL_81:
  v75 = operator new();
  result = Espresso::AOT::CostEstimate::CostEstimate(v75, v14);
  *v77 = v75;
  return result;
}

void sub_191115374(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void sub_191115398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;

  v31 = *(_QWORD *)(v29 - 128);
  if (v31)
  {
    v32 = *(_QWORD *)(v29 - 120);
    v33 = *(void **)(v29 - 128);
    if (v32 != v31)
    {
      do
      {
        v34 = *(void **)(v32 - 24);
        if (v34)
        {
          *(_QWORD *)(v32 - 16) = v34;
          operator delete(v34);
        }
        v32 -= 64;
      }
      while (v32 != v31);
      v33 = *(void **)(v29 - 128);
    }
    *(_QWORD *)(v29 - 120) = v31;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::EvaluatorClassic::EstimateCost@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t *a3@<X8>)
{
  if (!*(_QWORD *)(a1 + 40))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("EstimateCost can only be called after Validate");
  return Espresso::AOT::EstimateTransferCostBetweenBackends((unsigned __int8 *)(a1 + 16), a2, a3);
}

uint64_t Espresso::AOT::EvaluatorClassic::LaunchCost@<X0>(Espresso::AOT::EvaluatorClassic *this@<X0>, uint64_t *a2@<X8>)
{
  return Espresso::AOT::EstimateLaunchCostForBackend((unsigned __int16 *)this + 8, a2);
}

uint64_t Espresso::AOT::EvaluatorClassic::EndCost@<X0>(Espresso::AOT::EvaluatorClassic *this@<X0>, uint64_t *a2@<X8>)
{
  return Espresso::AOT::EstimateEndCostForBackend((unsigned __int16 *)this + 8, a2);
}

void Espresso::AOT::EvaluatorClassic::~EvaluatorClassic(Espresso::AOT::EvaluatorClassic *this)
{
  Espresso::AOT::AbstractValidator *v2;
  Espresso::AOT::EvaluatorClassicStates *v3;

  *(_QWORD *)this = off_1E2DA0400;
  *((_QWORD *)this + 1) = &unk_1E2DA0448;
  v2 = (Espresso::AOT::EvaluatorClassic *)((char *)this + 8);
  v3 = (Espresso::AOT::EvaluatorClassicStates *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    Espresso::AOT::EvaluatorClassicStates::~EvaluatorClassicStates(v3);
    MEMORY[0x19401CD90]();
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  Espresso::AOT::AbstractValidator::~AbstractValidator(v2);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(this);
}

{
  Espresso::AOT::AbstractValidator *v2;
  Espresso::AOT::EvaluatorClassicStates *v3;

  *(_QWORD *)this = off_1E2DA0400;
  *((_QWORD *)this + 1) = &unk_1E2DA0448;
  v2 = (Espresso::AOT::EvaluatorClassic *)((char *)this + 8);
  v3 = (Espresso::AOT::EvaluatorClassicStates *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    Espresso::AOT::EvaluatorClassicStates::~EvaluatorClassicStates(v3);
    MEMORY[0x19401CD90]();
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  Espresso::AOT::AbstractValidator::~AbstractValidator(v2);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(this);
  JUMPOUT(0x19401CD90);
}

void `non-virtual thunk to'Espresso::AOT::EvaluatorClassic::~EvaluatorClassic(Espresso::AOT::EvaluatorClassic *this)
{
  Espresso::AOT::AbstractCostEstimator *v2;
  Espresso::AOT::EvaluatorClassicStates *v3;

  *((_QWORD *)this - 1) = off_1E2DA0400;
  v2 = (Espresso::AOT::EvaluatorClassic *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E2DA0448;
  v3 = (Espresso::AOT::EvaluatorClassicStates *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    Espresso::AOT::EvaluatorClassicStates::~EvaluatorClassicStates(v3);
    MEMORY[0x19401CD90]();
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v2);
}

{
  Espresso::AOT::AbstractCostEstimator *v2;
  Espresso::AOT::EvaluatorClassicStates *v3;

  *((_QWORD *)this - 1) = off_1E2DA0400;
  v2 = (Espresso::AOT::EvaluatorClassic *)((char *)this - 8);
  *(_QWORD *)this = &unk_1E2DA0448;
  v3 = (Espresso::AOT::EvaluatorClassicStates *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    Espresso::AOT::EvaluatorClassicStates::~EvaluatorClassicStates(v3);
    MEMORY[0x19401CD90]();
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v2);
  JUMPOUT(0x19401CD90);
}

void Espresso::AOT::EvaluatorClassicStates::~EvaluatorClassicStates(Espresso::AOT::EvaluatorClassicStates *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void **v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void **v17;

  v2 = (_QWORD *)*((_QWORD *)this + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
    operator delete(v4);
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 12) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    v7 = *((_QWORD *)this + 8);
    v8 = (void *)*((_QWORD *)this + 7);
    if (v7 != v6)
    {
      v9 = *((_QWORD *)this + 8);
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v7 - 16) = v10;
          operator delete(v10);
        }
        v7 = v9;
      }
      while (v9 != v6);
      v8 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v6;
    operator delete(v8);
  }
  v12 = (void **)*((_QWORD *)this + 4);
  if (v12)
  {
    do
    {
      v17 = (void **)*v12;
      if (*((char *)v12 + 39) < 0)
        operator delete(v12[2]);
      operator delete(v12);
      v12 = v17;
    }
    while (v17);
  }
  v13 = (void *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
    operator delete(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void Espresso::AOT::CostEstimate::~CostEstimate(Espresso::AOT::CostEstimate *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::AOT::CostEstimate::CostEstimate(uint64_t this, double a2)
{
  *(_QWORD *)this = &off_1E2DA0278;
  *(double *)(this + 8) = a2;
  return this;
}

{
  *(_QWORD *)this = &off_1E2DA0278;
  *(double *)(this + 8) = a2;
  return this;
}

double Espresso::AOT::CostEstimate::GetRuntime(Espresso::AOT::CostEstimate *this)
{
  return *((double *)this + 1);
}

_QWORD *Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator(_QWORD *this)
{
  *this = off_1E2DA06E8;
  return this;
}

float Espresso::AOT::DTrees::linearAneFp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 106.97;
    if (*(double *)(a1 + 48) > 11.69)
      return 580.45;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 5290.8;
    if (!v2)
      return 13239.0;
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneIp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 106.97;
    if (*(double *)(a1 + 48) > 11.69)
      return 580.45;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 5290.8;
    if (!v2)
      return 13239.0;
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneJp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 106.97;
    if (*(double *)(a1 + 48) > 11.69)
      return 580.45;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 5290.8;
    if (!v2)
      return 13239.0;
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneKp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 106.97;
    if (*(double *)(a1 + 48) > 11.69)
      return 580.45;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 5290.8;
    if (!v2)
      return 13239.0;
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneGp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 106.97;
    if (*(double *)(a1 + 48) > 11.69)
      return 580.45;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 5290.8;
    if (!v2)
      return 13239.0;
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneHp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 106.97;
    if (*(double *)(a1 + 48) > 11.69)
      return 580.45;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 5290.8;
    if (!v2)
      return 13239.0;
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuFp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 59.876;
    if (*(double *)(a1 + 48) > 11.69)
      return 19.6;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 145.85;
    if (!v2)
      return 466.79;
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuIp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 59.876;
    if (*(double *)(a1 + 48) > 11.69)
      return 19.6;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 145.85;
    if (!v2)
      return 466.79;
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuJp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 59.876;
    if (*(double *)(a1 + 48) > 11.69)
      return 19.6;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 145.85;
    if (!v2)
      return 466.79;
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuKp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 59.876;
    if (*(double *)(a1 + 48) > 11.69)
      return 19.6;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 145.85;
    if (!v2)
      return 466.79;
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuGp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 59.876;
    if (*(double *)(a1 + 48) > 11.69)
      return 19.6;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 145.85;
    if (!v2)
      return 466.79;
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuHp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 59.876;
    if (*(double *)(a1 + 48) > 11.69)
      return 19.6;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 145.85;
    if (!v2)
      return 466.79;
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuFp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 286.78;
    if (*(double *)(a1 + 48) > 11.69)
      return 24164.0;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 3620.9;
    if (!v2)
      return 6604.6;
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuIp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 286.78;
    if (*(double *)(a1 + 48) > 11.69)
      return 24164.0;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 3620.9;
    if (!v2)
      return 6604.6;
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuJp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 286.78;
    if (*(double *)(a1 + 48) > 11.69)
      return 24164.0;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 3620.9;
    if (!v2)
      return 6604.6;
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuKp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 286.78;
    if (*(double *)(a1 + 48) > 11.69)
      return 24164.0;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 3620.9;
    if (!v2)
      return 6604.6;
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuGp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 286.78;
    if (*(double *)(a1 + 48) > 11.69)
      return 24164.0;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 3620.9;
    if (!v2)
      return 6604.6;
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuHp(uint64_t a1)
{
  double v1;
  BOOL v2;
  float result;

  v1 = *(double *)(a1 + 40);
  if (v1 <= 0.08863)
  {
    result = 286.78;
    if (*(double *)(a1 + 48) > 11.69)
      return 24164.0;
  }
  else
  {
    v2 = v1 <= 0.6006;
    result = 3620.9;
    if (!v2)
      return 6604.6;
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneCp(uint64_t a1)
{
  double v1;
  float result;
  BOOL v3;

  v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    v3 = v1 <= 13.8;
    result = 66.937;
    if (!v3)
      return 853.74;
  }
  else
  {
    result = 4218.9;
    if (*(double *)(a1 + 88) > 2560.0)
      return 14675.0;
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneDp(uint64_t a1)
{
  double v1;
  float result;
  BOOL v3;

  v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    v3 = v1 <= 13.8;
    result = 67.52;
    if (!v3)
      return 810.1;
  }
  else
  {
    result = 4613.6;
    if (*(double *)(a1 + 88) > 2560.0)
      return 15579.0;
  }
  return result;
}

float Espresso::AOT::DTrees::linearAneEp(uint64_t a1)
{
  double v1;
  float result;
  BOOL v3;

  v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    v3 = v1 <= 13.8;
    result = 88.361;
    if (!v3)
      return 1064.9;
  }
  else
  {
    result = 6038.8;
    if (*(double *)(a1 + 88) > 2560.0)
      return 23123.0;
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuCp(uint64_t a1)
{
  double v1;
  float result;
  BOOL v3;

  v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    v3 = v1 <= 13.8;
    result = 23.088;
    if (!v3)
      return 68.688;
  }
  else
  {
    result = 166.42;
    if (*(double *)(a1 + 88) > 2560.0)
      return 561.95;
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuDp(uint64_t a1)
{
  double v1;
  float result;
  BOOL v3;

  v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    v3 = v1 <= 13.8;
    result = 20.697;
    if (!v3)
      return 117.19;
  }
  else
  {
    result = 196.26;
    if (*(double *)(a1 + 88) > 2560.0)
      return 671.24;
  }
  return result;
}

float Espresso::AOT::DTrees::linearCpuEp(uint64_t a1)
{
  double v1;
  float result;
  BOOL v3;

  v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    v3 = v1 <= 13.8;
    result = 30.574;
    if (!v3)
      return 201.39;
  }
  else
  {
    result = 165.45;
    if (*(double *)(a1 + 88) > 2560.0)
      return 503.8;
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuCp(uint64_t a1)
{
  double v1;
  float result;
  BOOL v3;

  v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    v3 = v1 <= 13.8;
    result = 42.38;
    if (!v3)
      return 233.36;
  }
  else
  {
    result = 662.03;
    if (*(double *)(a1 + 88) > 2560.0)
      return 1309.9;
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuDp(uint64_t a1)
{
  double v1;
  float result;
  BOOL v3;

  v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    v3 = v1 <= 13.8;
    result = 36.552;
    if (!v3)
      return 299.82;
  }
  else
  {
    result = 885.28;
    if (*(double *)(a1 + 88) > 2560.0)
      return 2619.7;
  }
  return result;
}

float Espresso::AOT::DTrees::linearGpuEp(uint64_t a1)
{
  double v1;
  float result;
  BOOL v3;

  v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    v3 = v1 <= 13.8;
    result = 48.86;
    if (!v3)
      return 312.72;
  }
  else
  {
    result = 907.39;
    if (*(double *)(a1 + 88) > 2560.0)
      return 1709.8;
  }
  return result;
}

void Espresso::AOT::MILSegmenterOptions::~MILSegmenterOptions(Espresso::AOT::MILSegmenterOptions *this)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node((_DWORD)this + 64, *((char **)this + 10));
  v2 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    operator delete(v2);
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_7:
    operator delete(*((void **)this + 1));
    return;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    goto LABEL_7;
}

{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node((_DWORD)this + 64, *((char **)this + 10));
  v2 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    operator delete(v2);
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_7:
    operator delete(*((void **)this + 1));
    return;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    goto LABEL_7;
}

uint64_t Espresso::AOT::MILSegmenterOptions::GetOutputBundlePath(Espresso::AOT::MILSegmenterOptions *this)
{
  return (uint64_t)this + 32;
}

uint64_t Espresso::AOT::MILSegmenterOptions::GetOnDeviceCompilation(Espresso::AOT::MILSegmenterOptions *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t Espresso::AOT::MILSegmenterOptions::GetMlcUseBNNSGraph(Espresso::AOT::MILSegmenterOptions *this)
{
  return *((unsigned __int8 *)this + 57);
}

uint64_t Espresso::AOT::MILSegmenterOptions::GetExcludedBackendsPerEntryPoint(Espresso::AOT::MILSegmenterOptions *this)
{
  return (uint64_t)this + 64;
}

uint64_t Espresso::AOT::MILSegmenterOptions::GetSegmentsShouldMerge(Espresso::AOT::MILSegmenterOptions *this)
{
  return *((unsigned __int8 *)this + 58);
}

void E5AOT::Operators::E5ML_ios16::ANEInference::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  void **v43;
  char *v44;
  char *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  void *v53;
  void *v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  _QWORD v60[5];
  void *__p[2];
  uint64_t v62;
  void **v63;
  _QWORD v64[2];
  uint64_t Scalar;
  _QWORD v66[4];
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v62 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v63 = 0;
  v64[0] = 0;
  memset(&v60[1], 0, 32);
  v68 = 0;
  v66[3] = 0;
  MIL::IROperator::Make();
  if (!v66)
    (*(void (**)(void))(v66[0] + 32))();
  v5 = v68;
  if (v68 == v67)
  {
    v6 = 4;
    v5 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  if (SHIBYTE(v62) < 0)
    operator delete(__p[0]);
  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_DWORD *)(v7 + 32) = 1065353216;
  v60[0] = v7;
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v53 = 0;
  v9 = v60[0];
  v60[0] = v8;
  if (v9)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v60, v9);
    v53 = 0;
  }
  v10 = (_QWORD *)v60[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v10, "program_url", (uint64_t *)&v53);
  v12 = v53;
  v53 = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11[5] + 32))(v11[5], 1);
  v16 = (_QWORD *)v60[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v16, "procedure_name", (uint64_t *)&v53);
  v18 = v53;
  v53 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = v58;
  if (v58)
  {
    v20 = (unint64_t *)&v58->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17[5] + 32))(v17[5], 1);
  v22 = (_QWORD *)v60[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "ane_id", (uint64_t *)&v53);
  v24 = v53;
  v53 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v57;
  if (v57)
  {
    v26 = (unint64_t *)&v57->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23[5] + 32))(v23[5], 1);
  v28 = (_QWORD *)v60[0];
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v53 = v30;
  *v30 = v29;
  v54 = v30 + 1;
  v55 = v30 + 1;
  v64[1] = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v28, "mutable_weights", &Scalar);
  v32 = Scalar;
  Scalar = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = v56;
  if (v56)
  {
    v34 = (unint64_t *)&v56->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31[5] + 32))(v31[5], 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31[5] + 48))(v31[5], 1);
  v36 = *a3;
  v51 = v60[0];
  if (v60[0])
  {
    v37 = (std::__shared_weak_count *)operator new();
    v38 = (std::__shared_weak_count_vtbl *)v60[0];
    v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v37->__shared_owners_ = 0;
    v37->__shared_weak_owners_ = 0;
    v37[1].__vftable = v38;
  }
  else
  {
    v37 = 0;
  }
  v52 = v37;
  v60[0] = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v36 + 184))(v36, &v51);
  v39 = v52;
  if (v52)
  {
    v40 = (unint64_t *)&v52->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v60[0];
  v60[0] = 0;
  if (v42)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v60, v42);
  v43 = v63;
  v63 = 0;
  if (v43)
  {
    v44 = (char *)*v43;
    if (*v43)
    {
      v45 = (char *)v43[1];
      v46 = *v43;
      if (v45 != v44)
      {
        do
        {
          v47 = (std::__shared_weak_count *)*((_QWORD *)v45 - 1);
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v45 -= 16;
        }
        while (v45 != v44);
        v46 = *v43;
      }
      v43[1] = v44;
      operator delete(v46);
    }
    MEMORY[0x19401CD90](v43, 0x20C40960023A9);
  }
  v50 = v64[0];
  v64[0] = 0;
  if (v50)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v64, v50);
}

void sub_191116B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a22;
  a22 = 0;
  if (v35)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a22, v35);
    v36 = *v32;
    *v32 = 0;
    if (!v36)
    {
LABEL_4:
      std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v33 - 152));
      v37 = *(_QWORD *)(v33 - 144);
      *(_QWORD *)(v33 - 144) = 0;
      if (v37)
        std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v33 - 144, v37);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v36 = *v32;
    *v32 = 0;
    if (!v36)
      goto LABEL_4;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  goto LABEL_4;
}

void E5AOT::Operators::E5ML_ios16::BNNSInference::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count_vtbl *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  void **v49;
  char *v50;
  char *v51;
  void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  _QWORD v67[5];
  void *__p[2];
  uint64_t v69;
  void **v70;
  _QWORD v71[2];
  uint64_t Scalar;
  _QWORD v73[4];
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v69 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v70 = 0;
  v71[0] = 0;
  memset(&v67[1], 0, 32);
  v75 = 0;
  v73[3] = 0;
  MIL::IROperator::Make();
  if (!v73)
    (*(void (**)(void))(v73[0] + 32))();
  v5 = v75;
  if (v75 == v74)
  {
    v6 = 4;
    v5 = v74;
  }
  else
  {
    if (!v75)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  if (SHIBYTE(v69) < 0)
    operator delete(__p[0]);
  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_DWORD *)(v7 + 32) = 1065353216;
  v67[0] = v7;
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v59 = 0;
  v9 = v67[0];
  v67[0] = v8;
  if (v9)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v67, v9);
    v59 = 0;
  }
  v10 = (_QWORD *)v67[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v10, "mil_program_url", (uint64_t *)&v59);
  v12 = v59;
  v59 = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11[5] + 32))(v11[5], 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11[5] + 48))(v11[5], 1);
  v16 = (_QWORD *)v67[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v16, "bnns_ir_program_url", (uint64_t *)&v59);
  v18 = v59;
  v59 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = v65;
  if (v65)
  {
    v20 = (unint64_t *)&v65->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17[5] + 32))(v17[5], 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17[5] + 48))(v17[5], 1);
  v22 = (_QWORD *)v67[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "function_name", (uint64_t *)&v59);
  v24 = v59;
  v59 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v64;
  if (v64)
  {
    v26 = (unint64_t *)&v64->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23[5] + 32))(v23[5], 1);
  v28 = (_QWORD *)v67[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v28, "allow_reshaping", (uint64_t *)&v59);
  v30 = v59;
  v59 = 0;
  if (v30)
    (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
  v31 = v63;
  if (v63)
  {
    v32 = (unint64_t *)&v63->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29[5] + 32))(v29[5], 1);
  v34 = (_QWORD *)v67[0];
  v35 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v36 = operator new(8uLL);
  v59 = v36;
  *v36 = v35;
  v60 = v36 + 1;
  v61 = v36 + 1;
  v71[1] = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v34, "callee_names", &Scalar);
  v38 = Scalar;
  Scalar = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = v62;
  if (v62)
  {
    v40 = (unint64_t *)&v62->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37[5] + 32))(v37[5], 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37[5] + 48))(v37[5], 1);
  v42 = *a3;
  v57 = v67[0];
  if (v67[0])
  {
    v43 = (std::__shared_weak_count *)operator new();
    v44 = (std::__shared_weak_count_vtbl *)v67[0];
    v43->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v43->__shared_owners_ = 0;
    v43->__shared_weak_owners_ = 0;
    v43[1].__vftable = v44;
  }
  else
  {
    v43 = 0;
  }
  v58 = v43;
  v67[0] = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v42 + 184))(v42, &v57);
  v45 = v58;
  if (v58)
  {
    v46 = (unint64_t *)&v58->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v67[0];
  v67[0] = 0;
  if (v48)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v67, v48);
  v49 = v70;
  v70 = 0;
  if (v49)
  {
    v50 = (char *)*v49;
    if (*v49)
    {
      v51 = (char *)v49[1];
      v52 = *v49;
      if (v51 != v50)
      {
        do
        {
          v53 = (std::__shared_weak_count *)*((_QWORD *)v51 - 1);
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          v51 -= 16;
        }
        while (v51 != v50);
        v52 = *v49;
      }
      v49[1] = v50;
      operator delete(v52);
    }
    MEMORY[0x19401CD90](v49, 0x20C40960023A9);
  }
  v56 = v71[0];
  v71[0] = 0;
  if (v56)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v71, v56);
}

void sub_1911175C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a24;
  a24 = 0;
  if (v37)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a24, v37);
    v38 = *v34;
    *v34 = 0;
    if (!v38)
    {
LABEL_4:
      std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v35 - 152));
      v39 = *(_QWORD *)(v35 - 144);
      *(_QWORD *)(v35 - 144) = 0;
      if (v39)
        std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v35 - 144, v39);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v38 = *v34;
    *v34 = 0;
    if (!v38)
      goto LABEL_4;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  goto LABEL_4;
}

void E5AOT::Operators::E5ML_ios16::CPUInference::Make(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  char *v26;
  char *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  _QWORD v38[5];
  void *__p[2];
  uint64_t v40;
  void **v41;
  uint64_t v42;
  uint64_t Scalar;
  _QWORD v44[4];
  _BYTE v45[24];
  _BYTE *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a1;
  v40 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v41 = 0;
  v42 = 0;
  memset(&v38[1], 0, 32);
  v46 = 0;
  v44[3] = 0;
  MIL::IROperator::Make();
  if (!v44)
    (*(void (**)(void))(v44[0] + 32))();
  v3 = v46;
  if (v46 == v45)
  {
    v4 = 4;
    v3 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_DWORD *)(v5 + 32) = 1065353216;
  v38[0] = v5;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v7 = v38[0];
  v37 = 0;
  v38[0] = v6;
  if (v7)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v38, v7);
    v37 = 0;
  }
  v8 = (_QWORD *)v38[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v8, "model_assets_url", &v37);
  v10 = v37;
  v37 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v36)
  {
    p_shared_owners = &v36->__shared_owners_;
    do
      v12 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v12 - 1, (unint64_t *)p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9[5] + 32))(v9[5], 1);
  v13 = (_QWORD *)v38[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v13, "configuration_name", &v37);
  v15 = v37;
  v37 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v35)
  {
    v16 = &v35->__shared_owners_;
    do
      v17 = __ldaxr((unint64_t *)v16);
    while (__stlxr(v17 - 1, (unint64_t *)v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14[5] + 32))(v14[5], 1);
  v18 = *a2;
  v33 = v38[0];
  if (v38[0])
  {
    v19 = (std::__shared_weak_count *)operator new();
    v20 = (std::__shared_weak_count_vtbl *)v38[0];
    v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v19->__shared_owners_ = 0;
    v19->__shared_weak_owners_ = 0;
    v19[1].__vftable = v20;
  }
  else
  {
    v19 = 0;
  }
  v34 = v19;
  v38[0] = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 184))(v18, &v33);
  v21 = v34;
  if (v34)
  {
    v22 = (unint64_t *)&v34->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v38[0];
  v38[0] = 0;
  if (v24)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v38, v24);
  v25 = v41;
  v41 = 0;
  if (v25)
  {
    v26 = (char *)*v25;
    if (*v25)
    {
      v27 = (char *)v25[1];
      v28 = *v25;
      if (v27 != v26)
      {
        do
        {
          v29 = (std::__shared_weak_count *)*((_QWORD *)v27 - 1);
          if (v29)
          {
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v27 -= 16;
        }
        while (v27 != v26);
        v28 = *v25;
      }
      v25[1] = v26;
      operator delete(v28);
    }
    MEMORY[0x19401CD90](v25, 0x20C40960023A9);
  }
  v32 = v42;
  v42 = 0;
  if (v32)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v42, v32);
}

void sub_191117DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void **a28,uint64_t a29)
{
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a16;
  a16 = 0;
  if (v31)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a16, v31);
  v32 = *v29;
  *v29 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](&a28);
  v33 = a29;
  a29 = 0;
  if (v33)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a29, v33);
  _Unwind_Resume(a1);
}

void E5AOT::Operators::E5ML_ios16::Dequant::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  uint64_t *v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  uint64_t *v55;
  std::__shared_weak_count_vtbl *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count_vtbl *v61;
  MIL::Validation::TensorDTypeConstraints *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  MIL::Validation::TensorSymbolicShapeConstraints *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  uint64_t v108;
  void **v109;
  char *v110;
  char *v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  void *v119;
  char v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void *v123;
  char v124;
  void *v125;
  char v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131;
  char v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  void *v135;
  char v136;
  void *v137;
  char v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  void *__p[2];
  uint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count_vtbl *v155;
  void (__cdecl **v156)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v157;
  std::__shared_weak_count_vtbl *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  uint64_t v163[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v165;
  void (__cdecl **v166)(std::__shared_weak_count *__hidden);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v158 = 0;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v154 = 0;
  v7 = (uint64_t)v158;
  v158 = (std::__shared_weak_count_vtbl *)v6;
  if (v7)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v158, v7);
    v154 = 0;
  }
  v8 = v158;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v154 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v155 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v156 = &v10->~__shared_weak_count_0;
  v167 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v165 = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v166 = &v12->~__shared_weak_count_0;
  v168 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v8, "x", v163);
  v13 = v163[0];
  v163[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v157;
  if (v157)
  {
    p_shared_owners = (unint64_t *)&v157->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    v165 = Scalar;
    operator delete(Scalar);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  v17 = v158;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "scale_factor", (uint64_t *)&v154);
  v19 = v154;
  v154 = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  if (v153)
  {
    v20 = &v153->__shared_owners_;
    do
      v21 = __ldaxr((unint64_t *)v20);
    while (__stlxr(v21 - 1, (unint64_t *)v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18[5] + 32))(v18[5], 1);
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  v152 = (std::__shared_weak_count_vtbl *)v22;
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v22, 1uLL);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v154 = v24;
  v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v23;
  v155 = (std::__shared_weak_count_vtbl *)&v24->~__shared_weak_count_0;
  v156 = &v24->~__shared_weak_count_0;
  v163[0] = MIL::IRTensorValueType::MakeWithShape();
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v26;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v165 = (std::__shared_weak_count_vtbl *)&v26->~__shared_weak_count_0;
  v166 = &v26->~__shared_weak_count_0;
  v163[1] = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v167 = v151;
  if (v151)
  {
    v27 = (_QWORD *)operator new();
    v28 = v151;
    *v27 = &unk_1E2DC2FD0;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = v28;
    v168 = (uint64_t)v27;
    v151 = 0;
    v29 = *(uint64_t **)(v22 + 8);
    if ((unint64_t)v29 < *(_QWORD *)(v22 + 16))
    {
LABEL_23:
      *v29 = v167;
      v29[1] = (uint64_t)v27;
      v167 = 0;
      v168 = 0;
      *(_QWORD *)(v22 + 8) = v29 + 2;
      goto LABEL_30;
    }
  }
  else
  {
    v27 = 0;
    v168 = 0;
    v151 = 0;
    v29 = *(uint64_t **)(v22 + 8);
    if ((unint64_t)v29 < *(_QWORD *)(v22 + 16))
      goto LABEL_23;
  }
  v30 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)v22, (uint64_t)&v167);
  v31 = (std::__shared_weak_count *)v168;
  *(_QWORD *)(v22 + 8) = v30;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_30:
  v34 = v151;
  v151 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (v150)
  {
    v35 = &v150->__shared_owners_;
    do
      v36 = __ldaxr((unint64_t *)v35);
    while (__stlxr(v36 - 1, (unint64_t *)v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  if (Scalar)
  {
    v165 = Scalar;
    operator delete(Scalar);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v149 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v146 = v158;
  if (v158)
  {
    v37 = (std::__shared_weak_count *)operator new();
    v38 = v158;
    v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v37->__shared_owners_ = 0;
    v37->__shared_weak_owners_ = 0;
    v37[1].__vftable = v38;
    v147 = v37;
    v158 = 0;
    v39 = v152;
    v144 = v152;
    if (v152)
    {
LABEL_43:
      v40 = (std::__shared_weak_count *)operator new();
      v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37E8;
      v40->__shared_owners_ = 0;
      v40->__shared_weak_owners_ = 0;
      v40[1].__vftable = v39;
      goto LABEL_46;
    }
  }
  else
  {
    v147 = 0;
    v158 = 0;
    v39 = v152;
    v144 = v152;
    if (v152)
      goto LABEL_43;
  }
  v40 = 0;
LABEL_46:
  v145 = v40;
  v152 = 0;
  v162 = 0;
  v160 = 0;
  MIL::IROperator::Make();
  v41 = v160;
  if (v160 == v159)
  {
    v42 = 4;
    v41 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_51;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_51:
  v43 = v162;
  if (v162 == v161)
  {
    v44 = 4;
    v43 = v161;
    goto LABEL_55;
  }
  if (v162)
  {
    v44 = 5;
LABEL_55:
    (*(void (**)(void))(*v43 + 8 * v44))();
  }
  if (!v145)
    goto LABEL_60;
  v45 = &v145->__shared_owners_;
  do
    v46 = __ldaxr((unint64_t *)v45);
  while (__stlxr(v46 - 1, (unint64_t *)v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
    v47 = v147;
    if (!v147)
      goto LABEL_64;
  }
  else
  {
LABEL_60:
    v47 = v147;
    if (!v147)
      goto LABEL_64;
  }
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    if ((SHIBYTE(v149) & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
LABEL_64:
  if (SHIBYTE(v149) < 0)
LABEL_65:
    operator delete(__p[0]);
LABEL_66:
  v50 = (_OWORD *)operator new();
  *v50 = 0u;
  v50[1] = 0u;
  *((_DWORD *)v50 + 8) = 1065353216;
  v154 = (std::__shared_weak_count_vtbl *)v50;
  v51 = (_OWORD *)operator new();
  *v51 = 0u;
  v51[1] = 0u;
  *((_DWORD *)v51 + 8) = 1065353216;
  Scalar = 0;
  v52 = (uint64_t)v154;
  v154 = (std::__shared_weak_count_vtbl *)v51;
  if (v52)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v154, v52);
    v53 = (uint64_t)Scalar;
    Scalar = 0;
    if (v53)
      std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&Scalar, v53);
  }
  v54 = v154;
  v167 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v54, "execution_device", (uint64_t *)&Scalar);
  v56 = Scalar;
  Scalar = 0;
  if (v56)
    (*((void (**)(std::__shared_weak_count_vtbl *))v56->~__shared_weak_count + 1))(v56);
  if (v143)
  {
    v57 = &v143->__shared_owners_;
    do
      v58 = __ldaxr((unint64_t *)v57);
    while (__stlxr(v58 - 1, (unint64_t *)v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55[5] + 32))(v55[5], 1);
  v59 = *a3;
  v141 = v154;
  if (v154)
  {
    v60 = (std::__shared_weak_count *)operator new();
    v61 = v154;
    v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v60->__shared_owners_ = 0;
    v60->__shared_weak_owners_ = 0;
    v60[1].__vftable = v61;
  }
  else
  {
    v60 = 0;
  }
  v142 = v60;
  v154 = 0;
  v62 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v59 + 184))(v59, &v141);
  v63 = v142;
  if (v142)
  {
    v64 = (unint64_t *)&v142->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  MIL::Validation::TensorDTypeConstraints::Make(v62);
  v66 = Scalar;
  v138 = 1;
  LOWORD(v137) = 120;
  MIL::Validation::OpParameterConstraintTarget::Make();
  v139 = v167;
  if (v167)
  {
    v67 = (std::__shared_weak_count *)operator new();
    v68 = v167;
    v67->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F28;
    v67->__shared_owners_ = 0;
    v67->__shared_weak_owners_ = 0;
    v67[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
  }
  else
  {
    v67 = 0;
  }
  v140 = v67;
  v167 = 0;
  v136 = 1;
  LOWORD(v135) = 84;
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v66->~__shared_weak_count + 3))(v66, &v139, &v135);
  if (v136 < 0)
    operator delete(v135);
  v69 = v140;
  if (v140)
  {
    v70 = (unint64_t *)&v140->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v167;
  v167 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  if (v138 < 0)
    operator delete(v137);
  v73 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v133 = v167;
  if (v167)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v75 = v167;
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2EF0;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = (std::__shared_weak_count_vtbl *)v75;
  }
  else
  {
    v74 = 0;
  }
  v134 = v74;
  v167 = 0;
  v132 = 1;
  LOWORD(v131) = 85;
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v73->~__shared_weak_count + 3))(v73, &v133, &v131);
  if (v132 < 0)
    operator delete(v131);
  v76 = v134;
  if (v134)
  {
    v77 = (unint64_t *)&v134->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v167;
  v167 = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = *a3;
  v129 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2EB8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v130 = v81;
  Scalar = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v80 + 56))(v80, &v129);
  v83 = v130;
  if (v130)
  {
    v84 = (unint64_t *)&v130->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = (MIL::Validation::TensorSymbolicShapeConstraints *)Scalar;
  Scalar = 0;
  if (v86)
    v86 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v86 + 8))(v86);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v86);
  v87 = Scalar;
  v126 = 1;
  LOWORD(v125) = 120;
  MIL::Validation::OpParameterConstraintTarget::Make();
  v127 = v167;
  if (v167)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v167;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F28;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v128 = v88;
  v167 = 0;
  v124 = 1;
  LOWORD(v123) = 68;
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, _QWORD, uint64_t, void **))v87->~__shared_weak_count
   + 4))(v87, &v127, 0, -1, &v123);
  if (v124 < 0)
    operator delete(v123);
  v90 = v128;
  if (v128)
  {
    v91 = (unint64_t *)&v128->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v167;
  v167 = 0;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  if (v126 < 0)
    operator delete(v125);
  v94 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v121 = v167;
  if (v167)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v167;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2EF0;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v122 = v95;
  v167 = 0;
  v120 = 1;
  LOWORD(v119) = 68;
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, _QWORD, uint64_t, void **))v94->~__shared_weak_count
   + 4))(v94, &v121, 0, -1, &v119);
  if (v120 < 0)
    operator delete(v119);
  v97 = v122;
  if (v122)
  {
    v98 = (unint64_t *)&v122->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v167;
  v167 = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v101 = *a3;
  v117 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F60;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v118 = v102;
  Scalar = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v101 + 56))(v101, &v117);
  v104 = v118;
  if (v118)
  {
    v105 = (unint64_t *)&v118->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  v108 = (uint64_t)v154;
  v154 = 0;
  if (v108)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v154, v108);
  v109 = (void **)&v152->~__shared_weak_count;
  v152 = 0;
  if (v109)
  {
    v110 = (char *)*v109;
    if (*v109)
    {
      v111 = (char *)v109[1];
      v112 = *v109;
      if (v111 != v110)
      {
        do
        {
          v113 = (std::__shared_weak_count *)*((_QWORD *)v111 - 1);
          if (v113)
          {
            v114 = (unint64_t *)&v113->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          v111 -= 16;
        }
        while (v111 != v110);
        v112 = *v109;
      }
      v109[1] = v110;
      operator delete(v112);
    }
    MEMORY[0x19401CD90](v109, 0x20C40960023A9);
  }
  v116 = (uint64_t)v158;
  v158 = 0;
  if (v116)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v158, v116);
}

void sub_191118D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,_Unwind_Exception *exception_object,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v51 - 72);
  v53 = *(_QWORD *)(v51 - 256);
  *(_QWORD *)(v51 - 256) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  v54 = *(void **)(v51 - 96);
  if (v54)
  {
    *(_QWORD *)(v51 - 88) = v54;
    operator delete(v54);
  }
  v55 = *(void **)(v51 - 224);
  if (v55)
  {
    *(_QWORD *)(v51 - 216) = v55;
    operator delete(v55);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v51 - 248));
  v56 = *(_QWORD *)(v51 - 184);
  *(_QWORD *)(v51 - 184) = 0;
  if (!v56)
    _Unwind_Resume(a1);
  std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v51 - 184, v56);
  _Unwind_Resume(a1);
}

void sub_1911191E4()
{
  JUMPOUT(0x1911191C0);
}

void E5AOT::Operators::E5ML_ios16::E5MinimalCpu::Make(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void **v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  _QWORD v32[5];
  void *__p[2];
  uint64_t v34;
  void **v35;
  _QWORD v36[2];
  _QWORD v37[4];
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a1;
  v34 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v35 = 0;
  v36[0] = 0;
  memset(&v32[1], 0, 32);
  v39 = 0;
  v37[3] = 0;
  MIL::IROperator::Make();
  if (!v37)
    (*(void (**)(void))(v37[0] + 32))();
  v3 = v39;
  if (v39 == v38)
  {
    v4 = 4;
    v3 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_DWORD *)(v5 + 32) = 1065353216;
  v32[0] = v5;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v7 = v32[0];
  v31 = 0;
  v32[0] = v6;
  if (v7)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v32, v7);
    v31 = 0;
  }
  v8 = (_QWORD *)v32[0];
  v36[1] = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v8, "model_assets_url", &v31);
  v10 = v31;
  v31 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v30)
  {
    p_shared_owners = &v30->__shared_owners_;
    do
      v12 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v12 - 1, (unint64_t *)p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9[5] + 32))(v9[5], 1);
  v13 = *a2;
  v28 = v32[0];
  if (v32[0])
  {
    v14 = (std::__shared_weak_count *)operator new();
    v15 = (std::__shared_weak_count_vtbl *)v32[0];
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v15;
  }
  else
  {
    v14 = 0;
  }
  v29 = v14;
  v32[0] = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 184))(v13, &v28);
  v16 = v29;
  if (v29)
  {
    v17 = (unint64_t *)&v29->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v32[0];
  v32[0] = 0;
  if (v19)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v32, v19);
  v20 = v35;
  v35 = 0;
  if (v20)
  {
    v21 = (char *)*v20;
    if (*v20)
    {
      v22 = (char *)v20[1];
      v23 = *v20;
      if (v22 != v21)
      {
        do
        {
          v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
          if (v24)
          {
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v22 -= 16;
        }
        while (v22 != v21);
        v23 = *v20;
      }
      v20[1] = v21;
      operator delete(v23);
    }
    MEMORY[0x19401CD90](v20, 0x20C40960023A9);
  }
  v27 = v36[0];
  v36[0] = 0;
  if (v27)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v36, v27);
}

void sub_191119640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void **a26,uint64_t a27)
{
  uint64_t *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a14;
  a14 = 0;
  if (v29)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a14, v29);
  v30 = *v27;
  *v27 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](&a26);
  v31 = a27;
  a27 = 0;
  if (v31)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a27, v31);
  _Unwind_Resume(a1);
}

void E5AOT::Operators::E5ML_ios16::EIRInference::Make(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  char *v31;
  char *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  _QWORD v44[5];
  void *__p[2];
  uint64_t v46;
  void **v47;
  uint64_t v48;
  uint64_t Scalar;
  _QWORD v50[4];
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a1;
  v46 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v48 = 0;
  memset(&v44[1], 0, 32);
  v47 = 0;
  v52 = 0;
  v50[3] = 0;
  MIL::IROperator::Make();
  if (!v50)
    (*(void (**)(void))(v50[0] + 32))();
  v3 = v52;
  if (v52 == v51)
  {
    v4 = 4;
    v3 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  if (SHIBYTE(v46) < 0)
    operator delete(__p[0]);
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_DWORD *)(v5 + 32) = 1065353216;
  v44[0] = v5;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v7 = v44[0];
  v43 = 0;
  v44[0] = v6;
  if (v7)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v44, v7);
    v43 = 0;
  }
  v8 = (_QWORD *)v44[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v8, "model_assets_url", &v43);
  v10 = v43;
  v43 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v42)
  {
    p_shared_owners = &v42->__shared_owners_;
    do
      v12 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v12 - 1, (unint64_t *)p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9[5] + 32))(v9[5], 1);
  v13 = (_QWORD *)v44[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v13, "configuration_name", &v43);
  v15 = v43;
  v43 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v41)
  {
    v16 = &v41->__shared_owners_;
    do
      v17 = __ldaxr((unint64_t *)v16);
    while (__stlxr(v17 - 1, (unint64_t *)v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14[5] + 32))(v14[5], 1);
  v18 = (_QWORD *)v44[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v18, "backend_requested", &v43);
  v20 = v43;
  v43 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (v40)
  {
    v21 = &v40->__shared_owners_;
    do
      v22 = __ldaxr((unint64_t *)v21);
    while (__stlxr(v22 - 1, (unint64_t *)v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19[5] + 32))(v19[5], 1);
  v23 = *a2;
  v38 = v44[0];
  if (v44[0])
  {
    v24 = (std::__shared_weak_count *)operator new();
    v25 = (std::__shared_weak_count_vtbl *)v44[0];
    v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v24->__shared_owners_ = 0;
    v24->__shared_weak_owners_ = 0;
    v24[1].__vftable = v25;
  }
  else
  {
    v24 = 0;
  }
  v39 = v24;
  v44[0] = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v23 + 184))(v23, &v38);
  v26 = v39;
  if (v39)
  {
    v27 = (unint64_t *)&v39->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v44[0];
  v44[0] = 0;
  if (v29)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v44, v29);
  v30 = v47;
  v47 = 0;
  if (v30)
  {
    v31 = (char *)*v30;
    if (*v30)
    {
      v32 = (char *)v30[1];
      v33 = *v30;
      if (v32 != v31)
      {
        do
        {
          v34 = (std::__shared_weak_count *)*((_QWORD *)v32 - 1);
          if (v34)
          {
            v35 = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v32 -= 16;
        }
        while (v32 != v31);
        v33 = *v30;
      }
      v30[1] = v31;
      operator delete(v33);
    }
    MEMORY[0x19401CD90](v30, 0x20C40960023A9);
  }
  v37 = v48;
  v48 = 0;
  if (v37)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v48, v37);
}

void sub_191119CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void **a30)
{
  uint64_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a18;
  a18 = 0;
  if (v33)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a18, v33);
  v34 = *v30;
  *v30 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](&a30);
  v35 = *(_QWORD *)(v31 - 136);
  *(_QWORD *)(v31 - 136) = 0;
  if (v35)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v31 - 136, v35);
  _Unwind_Resume(a1);
}

void E5AOT::Operators::E5ML_ios16::JitCall::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  void **v44;
  char *v45;
  char *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  _QWORD v61[5];
  void *__p[2];
  uint64_t v63;
  void **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t Scalar;
  _QWORD v68[4];
  _BYTE v69[24];
  _BYTE *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v63 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v64 = 0;
  v65 = 0;
  memset(&v61[1], 0, 32);
  v70 = 0;
  v68[3] = 0;
  MIL::IROperator::Make();
  if (!v68)
    (*(void (**)(void))(v68[0] + 32))();
  v5 = v70;
  if (v70 == v69)
  {
    v6 = 4;
    v5 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  if (SHIBYTE(v63) < 0)
    operator delete(__p[0]);
  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_DWORD *)(v7 + 32) = 1065353216;
  v61[0] = v7;
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v55 = 0;
  v9 = v61[0];
  v61[0] = v8;
  if (v9)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v61, v9);
    v55 = 0;
  }
  v10 = (_QWORD *)v61[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v10, "program_url", (uint64_t *)&v55);
  v12 = v55;
  v55 = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11[5] + 32))(v11[5], 1);
  v16 = (_QWORD *)v61[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v16, "function_name", (uint64_t *)&v55);
  v18 = v55;
  v55 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = v59;
  if (v59)
  {
    v20 = (unint64_t *)&v59->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17[5] + 32))(v17[5], 1);
  v22 = (_QWORD *)v61[0];
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = operator new(8uLL);
  v55 = v24;
  *v24 = v23;
  v56 = v24 + 1;
  v57 = v24 + 1;
  v66 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "param_names", &Scalar);
  v26 = Scalar;
  Scalar = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v58;
  if (v58)
  {
    v28 = (unint64_t *)&v58->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25[5] + 32))(v25[5], 1);
  v30 = (_QWORD *)v61[0];
  v31 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v32 = operator new(8uLL);
  v55 = v32;
  *v32 = v31;
  v56 = v32 + 1;
  v57 = v32 + 1;
  v66 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v30, "arg_names", &Scalar);
  v34 = Scalar;
  Scalar = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (v54)
  {
    v35 = &v54->__shared_owners_;
    do
      v36 = __ldaxr((unint64_t *)v35);
    while (__stlxr(v36 - 1, (unint64_t *)v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33[5] + 32))(v33[5], 1);
  v37 = *a3;
  v52 = v61[0];
  if (v61[0])
  {
    v38 = (std::__shared_weak_count *)operator new();
    v39 = (std::__shared_weak_count_vtbl *)v61[0];
    v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v38->__shared_owners_ = 0;
    v38->__shared_weak_owners_ = 0;
    v38[1].__vftable = v39;
  }
  else
  {
    v38 = 0;
  }
  v53 = v38;
  v61[0] = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v37 + 184))(v37, &v52);
  v40 = v53;
  if (v53)
  {
    v41 = (unint64_t *)&v53->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v61[0];
  v61[0] = 0;
  if (v43)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v61, v43);
  v44 = v64;
  v64 = 0;
  if (v44)
  {
    v45 = (char *)*v44;
    if (*v44)
    {
      v46 = (char *)v44[1];
      v47 = *v44;
      if (v46 != v45)
      {
        do
        {
          v48 = (std::__shared_weak_count *)*((_QWORD *)v46 - 1);
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v46 -= 16;
        }
        while (v46 != v45);
        v47 = *v44;
      }
      v44[1] = v45;
      operator delete(v47);
    }
    MEMORY[0x19401CD90](v44, 0x20C40960023A9);
  }
  v51 = v65;
  v65 = 0;
  if (v51)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v65, v51);
}

void sub_19111A51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a22;
  a22 = 0;
  if (v35)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a22, v35);
    v36 = *v32;
    *v32 = 0;
    if (!v36)
    {
LABEL_4:
      std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v33 - 152));
      v37 = *(_QWORD *)(v33 - 144);
      *(_QWORD *)(v33 - 144) = 0;
      if (v37)
        std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v33 - 144, v37);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v36 = *v32;
    *v32 = 0;
    if (!v36)
      goto LABEL_4;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  goto LABEL_4;
}

void sub_19111A7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22)
    JUMPOUT(0x19111A7DCLL);
  JUMPOUT(0x19111A78CLL);
}

void sub_19111A808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22)
    JUMPOUT(0x19111A7DCLL);
  JUMPOUT(0x19111A78CLL);
}

void E5AOT::Operators::E5ML_ios16::MLCInference::Make(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void **v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  _QWORD v32[5];
  void *__p[2];
  uint64_t v34;
  void **v35;
  _QWORD v36[2];
  _QWORD v37[4];
  _BYTE v38[24];
  _BYTE *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a1;
  v34 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v35 = 0;
  v36[0] = 0;
  memset(&v32[1], 0, 32);
  v39 = 0;
  v37[3] = 0;
  MIL::IROperator::Make();
  if (!v37)
    (*(void (**)(void))(v37[0] + 32))();
  v3 = v39;
  if (v39 == v38)
  {
    v4 = 4;
    v3 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_DWORD *)(v5 + 32) = 1065353216;
  v32[0] = v5;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v7 = v32[0];
  v31 = 0;
  v32[0] = v6;
  if (v7)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v32, v7);
    v31 = 0;
  }
  v8 = (_QWORD *)v32[0];
  v36[1] = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v8, "mlc_binary_path", &v31);
  v10 = v31;
  v31 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v30)
  {
    p_shared_owners = &v30->__shared_owners_;
    do
      v12 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v12 - 1, (unint64_t *)p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9[5] + 32))(v9[5], 1);
  v13 = *a2;
  v28 = v32[0];
  if (v32[0])
  {
    v14 = (std::__shared_weak_count *)operator new();
    v15 = (std::__shared_weak_count_vtbl *)v32[0];
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14[1].__vftable = v15;
  }
  else
  {
    v14 = 0;
  }
  v29 = v14;
  v32[0] = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 184))(v13, &v28);
  v16 = v29;
  if (v29)
  {
    v17 = (unint64_t *)&v29->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v32[0];
  v32[0] = 0;
  if (v19)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v32, v19);
  v20 = v35;
  v35 = 0;
  if (v20)
  {
    v21 = (char *)*v20;
    if (*v20)
    {
      v22 = (char *)v20[1];
      v23 = *v20;
      if (v22 != v21)
      {
        do
        {
          v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
          if (v24)
          {
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v22 -= 16;
        }
        while (v22 != v21);
        v23 = *v20;
      }
      v20[1] = v21;
      operator delete(v23);
    }
    MEMORY[0x19401CD90](v20, 0x20C40960023A9);
  }
  v27 = v36[0];
  v36[0] = 0;
  if (v27)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v36, v27);
}

void sub_19111AC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void **a26,uint64_t a27)
{
  uint64_t *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a14;
  a14 = 0;
  if (v29)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a14, v29);
  v30 = *v27;
  *v27 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](&a26);
  v31 = a27;
  a27 = 0;
  if (v31)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a27, v31);
  _Unwind_Resume(a1);
}

void E5AOT::Operators::E5ML_ios16::MPSGraphInference::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  void **v43;
  char *v44;
  char *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  void *v53;
  void *v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  _QWORD v60[5];
  void *__p[2];
  uint64_t v62;
  void **v63;
  _QWORD v64[2];
  uint64_t Scalar;
  _QWORD v66[4];
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a2;
  v62 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v63 = 0;
  v64[0] = 0;
  memset(&v60[1], 0, 32);
  v68 = 0;
  v66[3] = 0;
  MIL::IROperator::Make();
  if (!v66)
    (*(void (**)(void))(v66[0] + 32))();
  v5 = v68;
  if (v68 == v67)
  {
    v6 = 4;
    v5 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_8;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_8:
  if (SHIBYTE(v62) < 0)
    operator delete(__p[0]);
  v7 = operator new();
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_DWORD *)(v7 + 32) = 1065353216;
  v60[0] = v7;
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  v53 = 0;
  v9 = v60[0];
  v60[0] = v8;
  if (v9)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v60, v9);
    v53 = 0;
  }
  v10 = (_QWORD *)v60[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v10, "program_url", (uint64_t *)&v53);
  v12 = v53;
  v53 = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  v13 = v59;
  if (v59)
  {
    p_shared_owners = (unint64_t *)&v59->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11[5] + 32))(v11[5], 1);
  v16 = (_QWORD *)v60[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v16, "function_name", (uint64_t *)&v53);
  v18 = v53;
  v53 = 0;
  if (v18)
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  v19 = v58;
  if (v58)
  {
    v20 = (unint64_t *)&v58->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17[5] + 32))(v17[5], 1);
  v22 = (_QWORD *)v60[0];
  Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v22, "gpu_registry_id", (uint64_t *)&v53);
  v24 = v53;
  v53 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  v25 = v57;
  if (v57)
  {
    v26 = (unint64_t *)&v57->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23[5] + 32))(v23[5], 1);
  v28 = (_QWORD *)v60[0];
  v29 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v30 = operator new(8uLL);
  v53 = v30;
  *v30 = v29;
  v54 = v30 + 1;
  v55 = v30 + 1;
  v64[1] = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v28, "callee_names", &Scalar);
  v32 = Scalar;
  Scalar = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = v56;
  if (v56)
  {
    v34 = (unint64_t *)&v56->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31[5] + 32))(v31[5], 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31[5] + 48))(v31[5], 1);
  v36 = *a3;
  v51 = v60[0];
  if (v60[0])
  {
    v37 = (std::__shared_weak_count *)operator new();
    v38 = (std::__shared_weak_count_vtbl *)v60[0];
    v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v37->__shared_owners_ = 0;
    v37->__shared_weak_owners_ = 0;
    v37[1].__vftable = v38;
  }
  else
  {
    v37 = 0;
  }
  v52 = v37;
  v60[0] = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v36 + 184))(v36, &v51);
  v39 = v52;
  if (v52)
  {
    v40 = (unint64_t *)&v52->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v60[0];
  v60[0] = 0;
  if (v42)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v60, v42);
  v43 = v63;
  v63 = 0;
  if (v43)
  {
    v44 = (char *)*v43;
    if (*v43)
    {
      v45 = (char *)v43[1];
      v46 = *v43;
      if (v45 != v44)
      {
        do
        {
          v47 = (std::__shared_weak_count *)*((_QWORD *)v45 - 1);
          if (v47)
          {
            v48 = (unint64_t *)&v47->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v45 -= 16;
        }
        while (v45 != v44);
        v46 = *v43;
      }
      v43[1] = v44;
      operator delete(v46);
    }
    MEMORY[0x19401CD90](v43, 0x20C40960023A9);
  }
  v50 = v64[0];
  v64[0] = 0;
  if (v50)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)v64, v50);
}

void sub_19111B3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a22;
  a22 = 0;
  if (v35)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a22, v35);
    v36 = *v32;
    *v32 = 0;
    if (!v36)
    {
LABEL_4:
      std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v33 - 152));
      v37 = *(_QWORD *)(v33 - 144);
      *(_QWORD *)(v33 - 144) = 0;
      if (v37)
        std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v33 - 144, v37);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v36 = *v32;
    *v32 = 0;
    if (!v36)
      goto LABEL_4;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  goto LABEL_4;
}

void E5AOT::Operators::E5ML_ios16::Quant::Make(MIL::IRUnknownDimension *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count_vtbl *v8;
  uint64_t v9;
  std::__shared_weak_count_vtbl *v10;
  uint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  uint64_t *v18;
  std::__shared_weak_count_vtbl *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  uint64_t v25;
  std::__shared_weak_count_vtbl *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count_vtbl *v54;
  uint64_t *v55;
  std::__shared_weak_count_vtbl *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count_vtbl *v61;
  MIL::Validation::TensorDTypeConstraints *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count_vtbl *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count_vtbl *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  MIL::Validation::TensorSymbolicShapeConstraints *v86;
  std::__shared_weak_count_vtbl *v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  std::__shared_weak_count_vtbl *v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count_vtbl *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count_vtbl *v107;
  uint64_t v108;
  void **v109;
  char *v110;
  char *v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count_vtbl *v117;
  std::__shared_weak_count *v118;
  void *v119;
  char v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void *v123;
  char v124;
  void *v125;
  char v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  std::__shared_weak_count_vtbl *v129;
  std::__shared_weak_count *v130;
  void *v131;
  char v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  void *v135;
  char v136;
  void *v137;
  char v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count_vtbl *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count_vtbl *v146;
  std::__shared_weak_count *v147;
  void *__p[2];
  uint64_t v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  std::__shared_weak_count_vtbl *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count_vtbl *v155;
  void (__cdecl **v156)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v157;
  std::__shared_weak_count_vtbl *v158;
  _BYTE v159[24];
  _BYTE *v160;
  _BYTE v161[24];
  _BYTE *v162;
  uint64_t v163[2];
  std::__shared_weak_count_vtbl *Scalar;
  std::__shared_weak_count_vtbl *v165;
  void (__cdecl **v166)(std::__shared_weak_count *__hidden);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v158 = 0;
  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v154 = 0;
  v7 = (uint64_t)v158;
  v158 = (std::__shared_weak_count_vtbl *)v6;
  if (v7)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v158, v7);
    v154 = 0;
  }
  v8 = v158;
  v9 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v10 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v154 = v10;
  v10->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  v155 = (std::__shared_weak_count_vtbl *)&v10->~__shared_weak_count_0;
  v156 = &v10->~__shared_weak_count_0;
  v167 = MIL::IRTensorValueType::MakeWithShape();
  v11 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v12 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v12;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  v165 = (std::__shared_weak_count_vtbl *)&v12->~__shared_weak_count_0;
  v166 = &v12->~__shared_weak_count_0;
  v168 = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v8, "x", v163);
  v13 = v163[0];
  v163[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v157;
  if (v157)
  {
    p_shared_owners = (unint64_t *)&v157->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (Scalar)
  {
    v165 = Scalar;
    operator delete(Scalar);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  v17 = v158;
  Scalar = (std::__shared_weak_count_vtbl *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v17, "scale_factor", (uint64_t *)&v154);
  v19 = v154;
  v154 = 0;
  if (v19)
    (*((void (**)(std::__shared_weak_count_vtbl *))v19->~__shared_weak_count + 1))(v19);
  if (v153)
  {
    v20 = &v153->__shared_owners_;
    do
      v21 = __ldaxr((unint64_t *)v20);
    while (__stlxr(v21 - 1, (unint64_t *)v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18[5] + 32))(v18[5], 1);
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  v152 = (std::__shared_weak_count_vtbl *)v22;
  std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(v22, 1uLL);
  v23 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v24 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v154 = v24;
  v24->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v23;
  v155 = (std::__shared_weak_count_vtbl *)&v24->~__shared_weak_count_0;
  v156 = &v24->~__shared_weak_count_0;
  v163[0] = MIL::IRTensorValueType::MakeWithShape();
  v25 = MIL::IRUnknownDimension::Make(a1, (MIL::MILContext *)1);
  v26 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  Scalar = v26;
  v26->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v25;
  v165 = (std::__shared_weak_count_vtbl *)&v26->~__shared_weak_count_0;
  v166 = &v26->~__shared_weak_count_0;
  v163[1] = MIL::IRTensorValueType::MakeWithShape();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v167 = v151;
  if (v151)
  {
    v27 = (_QWORD *)operator new();
    v28 = v151;
    *v27 = &unk_1E2DC2FD0;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = v28;
    v168 = (uint64_t)v27;
    v151 = 0;
    v29 = *(uint64_t **)(v22 + 8);
    if ((unint64_t)v29 < *(_QWORD *)(v22 + 16))
    {
LABEL_23:
      *v29 = v167;
      v29[1] = (uint64_t)v27;
      v167 = 0;
      v168 = 0;
      *(_QWORD *)(v22 + 8) = v29 + 2;
      goto LABEL_30;
    }
  }
  else
  {
    v27 = 0;
    v168 = 0;
    v151 = 0;
    v29 = *(uint64_t **)(v22 + 8);
    if ((unint64_t)v29 < *(_QWORD *)(v22 + 16))
      goto LABEL_23;
  }
  v30 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)v22, (uint64_t)&v167);
  v31 = (std::__shared_weak_count *)v168;
  *(_QWORD *)(v22 + 8) = v30;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_30:
  v34 = v151;
  v151 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if (v150)
  {
    v35 = &v150->__shared_owners_;
    do
      v36 = __ldaxr((unint64_t *)v35);
    while (__stlxr(v36 - 1, (unint64_t *)v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }
  if (Scalar)
  {
    v165 = Scalar;
    operator delete(Scalar);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  *(_OWORD *)__p = *(_OWORD *)a2;
  v149 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v146 = v158;
  if (v158)
  {
    v37 = (std::__shared_weak_count *)operator new();
    v38 = v158;
    v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v37->__shared_owners_ = 0;
    v37->__shared_weak_owners_ = 0;
    v37[1].__vftable = v38;
    v147 = v37;
    v158 = 0;
    v39 = v152;
    v144 = v152;
    if (v152)
    {
LABEL_43:
      v40 = (std::__shared_weak_count *)operator new();
      v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37E8;
      v40->__shared_owners_ = 0;
      v40->__shared_weak_owners_ = 0;
      v40[1].__vftable = v39;
      goto LABEL_46;
    }
  }
  else
  {
    v147 = 0;
    v158 = 0;
    v39 = v152;
    v144 = v152;
    if (v152)
      goto LABEL_43;
  }
  v40 = 0;
LABEL_46:
  v145 = v40;
  v152 = 0;
  v162 = 0;
  v160 = 0;
  MIL::IROperator::Make();
  v41 = v160;
  if (v160 == v159)
  {
    v42 = 4;
    v41 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_51;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_51:
  v43 = v162;
  if (v162 == v161)
  {
    v44 = 4;
    v43 = v161;
    goto LABEL_55;
  }
  if (v162)
  {
    v44 = 5;
LABEL_55:
    (*(void (**)(void))(*v43 + 8 * v44))();
  }
  if (!v145)
    goto LABEL_60;
  v45 = &v145->__shared_owners_;
  do
    v46 = __ldaxr((unint64_t *)v45);
  while (__stlxr(v46 - 1, (unint64_t *)v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
    std::__shared_weak_count::__release_weak(v145);
    v47 = v147;
    if (!v147)
      goto LABEL_64;
  }
  else
  {
LABEL_60:
    v47 = v147;
    if (!v147)
      goto LABEL_64;
  }
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    if ((SHIBYTE(v149) & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
LABEL_64:
  if (SHIBYTE(v149) < 0)
LABEL_65:
    operator delete(__p[0]);
LABEL_66:
  v50 = (_OWORD *)operator new();
  *v50 = 0u;
  v50[1] = 0u;
  *((_DWORD *)v50 + 8) = 1065353216;
  v154 = (std::__shared_weak_count_vtbl *)v50;
  v51 = (_OWORD *)operator new();
  *v51 = 0u;
  v51[1] = 0u;
  *((_DWORD *)v51 + 8) = 1065353216;
  Scalar = 0;
  v52 = (uint64_t)v154;
  v154 = (std::__shared_weak_count_vtbl *)v51;
  if (v52)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v154, v52);
    v53 = (uint64_t)Scalar;
    Scalar = 0;
    if (v53)
      std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&Scalar, v53);
  }
  v54 = v154;
  v167 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRParameter::MakeTypeSet();
  MIL::IRParameter::Make();
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(v54, "execution_device", (uint64_t *)&Scalar);
  v56 = Scalar;
  Scalar = 0;
  if (v56)
    (*((void (**)(std::__shared_weak_count_vtbl *))v56->~__shared_weak_count + 1))(v56);
  if (v143)
  {
    v57 = &v143->__shared_owners_;
    do
      v58 = __ldaxr((unint64_t *)v57);
    while (__stlxr(v58 - 1, (unint64_t *)v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55[5] + 32))(v55[5], 1);
  v59 = *a3;
  v141 = v154;
  if (v154)
  {
    v60 = (std::__shared_weak_count *)operator new();
    v61 = v154;
    v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC37B0;
    v60->__shared_owners_ = 0;
    v60->__shared_weak_owners_ = 0;
    v60[1].__vftable = v61;
  }
  else
  {
    v60 = 0;
  }
  v142 = v60;
  v154 = 0;
  v62 = (MIL::Validation::TensorDTypeConstraints *)(*(uint64_t (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v59 + 184))(v59, &v141);
  v63 = v142;
  if (v142)
  {
    v64 = (unint64_t *)&v142->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  MIL::Validation::TensorDTypeConstraints::Make(v62);
  v66 = Scalar;
  v138 = 1;
  LOWORD(v137) = 120;
  MIL::Validation::OpParameterConstraintTarget::Make();
  v139 = v167;
  if (v167)
  {
    v67 = (std::__shared_weak_count *)operator new();
    v68 = v167;
    v67->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F28;
    v67->__shared_owners_ = 0;
    v67->__shared_weak_owners_ = 0;
    v67[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
  }
  else
  {
    v67 = 0;
  }
  v140 = v67;
  v167 = 0;
  v136 = 1;
  LOWORD(v135) = 84;
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v66->~__shared_weak_count + 3))(v66, &v139, &v135);
  if (v136 < 0)
    operator delete(v135);
  v69 = v140;
  if (v140)
  {
    v70 = (unint64_t *)&v140->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v167;
  v167 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  if (v138 < 0)
    operator delete(v137);
  v73 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v133 = v167;
  if (v167)
  {
    v74 = (std::__shared_weak_count *)operator new();
    v75 = v167;
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2EF0;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = (std::__shared_weak_count_vtbl *)v75;
  }
  else
  {
    v74 = 0;
  }
  v134 = v74;
  v167 = 0;
  v132 = 1;
  LOWORD(v131) = 85;
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, void **))v73->~__shared_weak_count + 3))(v73, &v133, &v131);
  if (v132 < 0)
    operator delete(v131);
  v76 = v134;
  if (v134)
  {
    v77 = (unint64_t *)&v134->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v167;
  v167 = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = *a3;
  v129 = Scalar;
  if (Scalar)
  {
    v81 = (std::__shared_weak_count *)operator new();
    v82 = Scalar;
    v81->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2EB8;
    v81->__shared_owners_ = 0;
    v81->__shared_weak_owners_ = 0;
    v81[1].__vftable = v82;
  }
  else
  {
    v81 = 0;
  }
  v130 = v81;
  Scalar = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v80 + 56))(v80, &v129);
  v83 = v130;
  if (v130)
  {
    v84 = (unint64_t *)&v130->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = (MIL::Validation::TensorSymbolicShapeConstraints *)Scalar;
  Scalar = 0;
  if (v86)
    v86 = (MIL::Validation::TensorSymbolicShapeConstraints *)(*(uint64_t (**)(MIL::Validation::TensorSymbolicShapeConstraints *))(*(_QWORD *)v86 + 8))(v86);
  MIL::Validation::TensorSymbolicShapeConstraints::Make(v86);
  v87 = Scalar;
  v126 = 1;
  LOWORD(v125) = 120;
  MIL::Validation::OpParameterConstraintTarget::Make();
  v127 = v167;
  if (v167)
  {
    v88 = (std::__shared_weak_count *)operator new();
    v89 = v167;
    v88->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F28;
    v88->__shared_owners_ = 0;
    v88->__shared_weak_owners_ = 0;
    v88[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  }
  else
  {
    v88 = 0;
  }
  v128 = v88;
  v167 = 0;
  v124 = 1;
  LOWORD(v123) = 68;
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, _QWORD, uint64_t, void **))v87->~__shared_weak_count
   + 4))(v87, &v127, 0, -1, &v123);
  if (v124 < 0)
    operator delete(v123);
  v90 = v128;
  if (v128)
  {
    v91 = (unint64_t *)&v128->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v167;
  v167 = 0;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  if (v126 < 0)
    operator delete(v125);
  v94 = Scalar;
  MIL::Validation::OpOutputConstraintTarget::Make(0);
  v121 = v167;
  if (v167)
  {
    v95 = (std::__shared_weak_count *)operator new();
    v96 = v167;
    v95->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2EF0;
    v95->__shared_owners_ = 0;
    v95->__shared_weak_owners_ = 0;
    v95[1].__vftable = (std::__shared_weak_count_vtbl *)v96;
  }
  else
  {
    v95 = 0;
  }
  v122 = v95;
  v167 = 0;
  v120 = 1;
  LOWORD(v119) = 68;
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t *, _QWORD, uint64_t, void **))v94->~__shared_weak_count
   + 4))(v94, &v121, 0, -1, &v119);
  if (v120 < 0)
    operator delete(v119);
  v97 = v122;
  if (v122)
  {
    v98 = (unint64_t *)&v122->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = v167;
  v167 = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v101 = *a3;
  v117 = Scalar;
  if (Scalar)
  {
    v102 = (std::__shared_weak_count *)operator new();
    v103 = Scalar;
    v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F60;
    v102->__shared_owners_ = 0;
    v102->__shared_weak_owners_ = 0;
    v102[1].__vftable = v103;
  }
  else
  {
    v102 = 0;
  }
  v118 = v102;
  Scalar = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count_vtbl **))(*(_QWORD *)v101 + 56))(v101, &v117);
  v104 = v118;
  if (v118)
  {
    v105 = (unint64_t *)&v118->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = Scalar;
  Scalar = 0;
  if (v107)
    (*((void (**)(std::__shared_weak_count_vtbl *))v107->~__shared_weak_count + 1))(v107);
  v108 = (uint64_t)v154;
  v154 = 0;
  if (v108)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v154, v108);
  v109 = (void **)&v152->~__shared_weak_count;
  v152 = 0;
  if (v109)
  {
    v110 = (char *)*v109;
    if (*v109)
    {
      v111 = (char *)v109[1];
      v112 = *v109;
      if (v111 != v110)
      {
        do
        {
          v113 = (std::__shared_weak_count *)*((_QWORD *)v111 - 1);
          if (v113)
          {
            v114 = (unint64_t *)&v113->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
              std::__shared_weak_count::__release_weak(v113);
            }
          }
          v111 -= 16;
        }
        while (v111 != v110);
        v112 = *v109;
      }
      v109[1] = v110;
      operator delete(v112);
    }
    MEMORY[0x19401CD90](v109, 0x20C40960023A9);
  }
  v116 = (uint64_t)v158;
  v158 = 0;
  if (v116)
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&v158, v116);
}

void sub_19111C4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,_Unwind_Exception *exception_object,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v51 - 72);
  v53 = *(_QWORD *)(v51 - 256);
  *(_QWORD *)(v51 - 256) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  v54 = *(void **)(v51 - 96);
  if (v54)
  {
    *(_QWORD *)(v51 - 88) = v54;
    operator delete(v54);
  }
  v55 = *(void **)(v51 - 224);
  if (v55)
  {
    *(_QWORD *)(v51 - 216) = v55;
    operator delete(v55);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v51 - 248));
  v56 = *(_QWORD *)(v51 - 184);
  *(_QWORD *)(v51 - 184) = 0;
  if (!v56)
    _Unwind_Resume(a1);
  std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v51 - 184, v56);
  _Unwind_Resume(a1);
}

void sub_19111C958()
{
  JUMPOUT(0x19111C934);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8B125)
    return a1 + 24;
  if (((v3 & 0x8000000191A8B125 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8B125))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8B125 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8B1E9)
    return a1 + 24;
  if (((v3 & 0x8000000191A8B1E9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8B1E9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8B1E9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8B2A8)
    return a1 + 24;
  if (((v3 & 0x8000000191A8B2A8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8B2A8))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8B2A8 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8B36DLL)
    return a1 + 24;
  if (((v3 & 0x8000000191A8B36DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8B36DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8B36DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t OUTLINED_FUNCTION_0_4@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8 * a2))(a1);
}

uint64_t E5AOT::Operators::E5ML_ios16::Dequant::Make(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  if ((_QWORD *)*a1 == a2)
  {
    v4 = 4;
    goto LABEL_5;
  }
  if (*a1)
  {
    v4 = 5;
    a2 = (_QWORD *)*a1;
LABEL_5:
    OUTLINED_FUNCTION_0_4(a2, v4);
  }
  return std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a3);
}

void Espresso::AOT::E5AOTCompilerBackend::~E5AOTCompilerBackend(Espresso::AOT::E5AOTCompilerBackend *this)
{
  Espresso::AOT::AOTCompilerOptions *v2;

  *(_QWORD *)this = &off_1E2DA06B8;
  v2 = (Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 184);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 320));
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
}

{
  Espresso::AOT::AOTCompilerOptions *v2;

  *(_QWORD *)this = &off_1E2DA06B8;
  v2 = (Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 184);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 320));
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
}

{
  Espresso::AOT::AOTCompilerOptions *v2;

  *(_QWORD *)this = &off_1E2DA06B8;
  v2 = (Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 184);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 320));
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::AOT::E5AOTCompilerBackend::E5AOTCompilerBackend(_QWORD *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  void **v6;
  void *v7;
  void **v9;
  void *__p[2];
  void *v11;
  __int128 v12[8];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12, a2);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)__p, a3);
  Espresso::AOT::AOTCompilerBackend::AOTCompilerBackend((uint64_t)a1, v12, (uint64_t)__p);
  v6 = (void **)v11;
  if (v11)
  {
    do
    {
      v9 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0)
LABEL_10:
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v6);
      v6 = v9;
    }
    while (v9);
  }
  v7 = __p[0];
  __p[0] = 0;
  if (v7)
    operator delete(v7);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12);
  *a1 = &off_1E2DA06B8;
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(a1 + 23), a2);
  Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 40), a2);
  return a1;
}

void sub_19111CE08(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerBackend *v1;
  Espresso::AOT::AOTCompilerOptions *v2;

  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v1);
  _Unwind_Resume(a1);
}

void sub_19111CE24(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerBackend *v1;

  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v1);
  _Unwind_Resume(a1);
}

void sub_19111CE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  _Unwind_Resume(a1);
}

void sub_19111CE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::E5AOTCompilerBackend::GetOutputBundle(Espresso::AOT::E5AOTCompilerBackend *this)
{
  return Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 320));
}

uint64_t Espresso::AOT::E5AOTCompilerBackend::Run(Espresso::AOT::E5AOTCompilerBackend *this)
{
  const Espresso::AOT::AOTCompilerOptions *v1;
  uint64_t BuildInfo;
  uint64_t v3;
  uint64_t v5;

  v1 = (Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 184);
  BuildInfo = Espresso::AOT::AOTCompilerBackend::GetBuildInfo(this);
  std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForE5,Espresso::AOT::AOTCompilerOptions &,std::unordered_map<std::string,std::string> const&>(v1, BuildInfo, &v5);
  v3 = v5;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

void sub_19111CED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForE5,Espresso::AOT::AOTCompilerOptions &,std::unordered_map<std::string,std::string> const&>(const Espresso::AOT::AOTCompilerOptions *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void **v7;
  void *v8;
  void **v9;
  void *__p[2];
  void *v11;
  _BYTE v12[136];

  v6 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12, a1);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)__p, a2);
  Espresso::AOT::MILCompilerForE5::MILCompilerForE5(v6, v12, __p);
  *a3 = v6;
  v7 = (void **)v11;
  if (v11)
  {
    do
    {
      v9 = (void **)*v7;
      if (*((char *)v7 + 63) < 0)
      {
        operator delete(v7[5]);
        if (*((char *)v7 + 39) < 0)
LABEL_10:
          operator delete(v7[2]);
      }
      else if (*((char *)v7 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v7);
      v7 = v9;
    }
    while (v9);
  }
  v8 = __p[0];
  __p[0] = 0;
  if (v8)
    operator delete(v8);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12);
}

void sub_19111CFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C40D0C0D976);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5AOTCompilerBackend::GetOutputPaths(Espresso::AOT::E5AOTCompilerBackend *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t OutputBundlePath;
  __int128 v4;
  std::string __p;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OutputBundlePath = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 320));
  if (*(char *)(OutputBundlePath + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)OutputBundlePath, *(_QWORD *)(OutputBundlePath + 8));
  }
  else
  {
    v4 = *(_OWORD *)OutputBundlePath;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(OutputBundlePath + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19111D0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::E5AOTCompilerBackendFactory::~E5AOTCompilerBackendFactory(Espresso::AOT::E5AOTCompilerBackendFactory *this)
{
  Espresso::AOT::AOTCompilerBackendFactory::~AOTCompilerBackendFactory(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::AOT::E5AOTCompilerBackendFactory::E5AOTCompilerBackendFactory(Espresso::AOT::E5AOTCompilerBackendFactory *this)
{
  _QWORD *result;

  result = Espresso::AOT::AOTCompilerBackendFactory::AOTCompilerBackendFactory(this);
  *result = &off_1E2DA0920;
  return result;
}

{
  _QWORD *result;

  result = Espresso::AOT::AOTCompilerBackendFactory::AOTCompilerBackendFactory(this);
  *result = &off_1E2DA0920;
  return result;
}

void Espresso::AOT::E5AOTCompilerBackendFactory::RegisterOptions(Espresso::AOT::E5AOTCompilerBackendFactory *this, Espresso::AOT::AOTCompilerOptionsManager *a2)
{
  void *__p;
  __int128 v4;
  void *v5[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9;
  char v10;

  Espresso::AOT::CompilerOptionsForE5::RegisterOptions(a2, a2);
  v10 = 3;
  LODWORD(v9) = 7104877;
  v8 = 12;
  strcpy((char *)v7, "entry-points");
  v6 = 4;
  strcpy((char *)v5, "main");
  __p = operator new(0x30uLL);
  v4 = xmmword_191A71380;
  strcpy((char *)__p, "Comma-separated list of functions to compile");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)a2, (uint64_t)&v9, (uint64_t)v7, 3, (uint64_t)v5, (uint64_t)&__p);
  if (SHIBYTE(v4) < 0)
  {
    operator delete(__p);
    if ((v6 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v8 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v5[0]);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v10 & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(v9);
    return;
  }
LABEL_8:
  operator delete(v7[0]);
  if (v10 < 0)
    goto LABEL_9;
}

void sub_19111D274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v26 - 17) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((*(char *)(v26 - 17) & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::E5AOTCompilerBackendFactory::Instantiate(const Espresso::AOT::AOTCompilerOptions *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  const char *v9;
  void **v10;
  void **v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  void *v17[3];
  _QWORD v18[2];
  void **v19;

  v16 = 2;
  strcpy((char *)__p, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)a1, (uint64_t)__p, (uint64_t)v18);
  if (v16 < 0)
    operator delete(__p[0]);
  HIBYTE(v17[2]) = 21;
  strcpy((char *)v17, "on-device-compilation");
  __p[0] = v17;
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v18, (uint64_t)v17, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  if (*((_DWORD *)v6 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = *((unsigned __int8 *)v6 + 40);
  __p[0] = v17;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (uint64_t)v17, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 5;
  if (v7)
    v9 = "true";
  else
    v9 = "false";
  MEMORY[0x19401C808](v8, v9);
  Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)__p, a1);
  if (Espresso::AOT::CompilerOptionsForE5::GetUseMilE5Compiler((Espresso::AOT::CompilerOptionsForE5 *)__p))
    std::make_unique[abi:ne180100]<Espresso::AOT::E5AOTCompilerBackend,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>((__int128 *)a1, a2, &v14);
  else
    std::make_unique[abi:ne180100]<Espresso::AOT::Classic::ClassicAOTCompilerBackend,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>((__int128 *)a1, a2, &v14);
  *a3 = v14;
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)__p);
  if (SHIBYTE(v17[2]) < 0)
  {
    operator delete(v17[0]);
    v10 = v19;
    if (!v19)
      goto LABEL_20;
  }
  else
  {
    v10 = v19;
    if (!v19)
      goto LABEL_20;
  }
  do
  {
    v11 = (void **)*v10;
    v12 = *((unsigned int *)v10 + 16);
    if ((_DWORD)v12 != -1)
      ((void (*)(void **, void **))*(&off_1E2DD1530 + v12))(__p, v10 + 5);
    *((_DWORD *)v10 + 16) = -1;
    if (*((char *)v10 + 39) < 0)
      operator delete(v10[2]);
    operator delete(v10);
    v10 = v11;
  }
  while (v11);
LABEL_20:
  v13 = (void *)v18[0];
  v18[0] = 0;
  if (v13)
    operator delete(v13);
}

void sub_19111D4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)&__p);
  if (*(char *)(v15 - 89) < 0)
    operator delete(*(void **)(v15 - 112));
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](v15 - 88);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::E5AOTCompilerBackend,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>(__int128 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  void *v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  unint64_t v11;
  void **v12;
  void *v13;
  void **v14;
  void *__p[2];
  void *v16[2];
  int v17;
  _BYTE v18[136];

  v6 = (_QWORD *)operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((uint64_t)v18, a1);
  v7 = *(void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v9 = *(_QWORD **)(a2 + 16);
  __p[0] = v7;
  __p[1] = (void *)v8;
  v10 = *(void **)(a2 + 24);
  v16[0] = v9;
  v16[1] = v10;
  v17 = *(_DWORD *)(a2 + 32);
  if (v10)
  {
    v11 = v9[1];
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v11 >= v8)
        v11 %= v8;
    }
    else
    {
      v11 &= v8 - 1;
    }
    *((_QWORD *)v7 + v11) = v16;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  Espresso::AOT::E5AOTCompilerBackend::E5AOTCompilerBackend(v6, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  *a3 = v6;
  v12 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v12;
      if (*((char *)v12 + 63) < 0)
      {
        operator delete(v12[5]);
        if (*((char *)v12 + 39) < 0)
LABEL_16:
          operator delete(v12[2]);
      }
      else if (*((char *)v12 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v12);
      v12 = v14;
    }
    while (v14);
  }
  v13 = __p[0];
  __p[0] = 0;
  if (v13)
    operator delete(v13);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
}

void sub_19111D66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C402E6D0B92);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::Classic::ClassicAOTCompilerBackend,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  unint64_t v11;
  void **v12;
  void *v13;
  void **v14;
  void *__p[2];
  void *v16[2];
  int v17;
  _BYTE v18[136];

  v6 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((uint64_t)v18, a1);
  v7 = *(void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v9 = *(_QWORD **)(a2 + 16);
  __p[0] = v7;
  __p[1] = (void *)v8;
  v10 = *(void **)(a2 + 24);
  v16[0] = v9;
  v16[1] = v10;
  v17 = *(_DWORD *)(a2 + 32);
  if (v10)
  {
    v11 = v9[1];
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v11 >= v8)
        v11 %= v8;
    }
    else
    {
      v11 &= v8 - 1;
    }
    *((_QWORD *)v7 + v11) = v16;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  Espresso::AOT::Classic::ClassicAOTCompilerBackend::ClassicAOTCompilerBackend(v6, v18, __p);
  *a3 = v6;
  v12 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v12;
      if (*((char *)v12 + 63) < 0)
      {
        operator delete(v12[5]);
        if (*((char *)v12 + 39) < 0)
LABEL_16:
          operator delete(v12[2]);
      }
      else if (*((char *)v12 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v12);
      v12 = v14;
    }
    while (v14);
  }
  v13 = __p[0];
  __p[0] = 0;
  if (v13)
    operator delete(v13);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
}

void sub_19111D7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C402E6D0B92);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5AOTCompilerBackendFactory::GetBackendName(char *a1@<X8>)
{
  a1[23] = 2;
  strcpy(a1, "e5");
}

_QWORD *Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(Espresso::AOT::Backends::CostModel::OpEstimatorRegistry *this)
{
  unsigned __int8 v1;
  char **v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *result;
  uint64_t v54;
  _QWORD *v55;
  _QWORD v56[3];
  _QWORD *v57;
  void *__p[2];
  char v59;
  _QWORD v60[3];
  _QWORD *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load((unsigned __int8 *)&qword_1ECFC45D8);
  if ((v1 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1ECFC45D8))
    {
      v55 = (_QWORD *)operator new();
      *v55 = 0;
      v55[1] = 0;
      v55[2] = 0;
      _MergedGlobals_0 = (uint64_t)v55;
      __cxa_guard_release(&qword_1ECFC45D8);
    }
  }
  v2 = (char **)_MergedGlobals_0;
  v56[0] = &off_1E2DB2790;
  v57 = v56;
  __p[0] = (void *)0x6C6F6F705F677661;
  __p[1] = 0;
  v59 = 8;
  v61 = v60;
  v60[0] = &off_1E2DB2790;
  v3 = v61;
  if (v61 == v60)
  {
    v4 = 4;
    v3 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_7;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v5 = v57;
    if (v57 != v56)
      goto LABEL_9;
LABEL_12:
    v6 = 4;
    v5 = v56;
    goto LABEL_13;
  }
  v5 = v57;
  if (v57 == v56)
    goto LABEL_12;
LABEL_9:
  if (!v5)
    goto LABEL_14;
  v6 = 5;
LABEL_13:
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_14:
  v56[0] = &off_1E2DB27E8;
  v57 = v56;
  __p[0] = (void *)0x6F6E5F6863746162;
  __p[1] = (void *)28018;
  v59 = 10;
  v61 = v60;
  v60[0] = &off_1E2DB27E8;
  v7 = v61;
  if (v61 == v60)
  {
    v8 = 4;
    v7 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_19;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_19:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v9 = v57;
    if (v57 != v56)
      goto LABEL_21;
LABEL_24:
    v10 = 4;
    v9 = v56;
    goto LABEL_25;
  }
  v9 = v57;
  if (v57 == v56)
    goto LABEL_24;
LABEL_21:
  if (!v9)
    goto LABEL_26;
  v10 = 5;
LABEL_25:
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_26:
  v56[0] = &off_1E2DB2840;
  v57 = v56;
  __p[0] = (void *)0x7461636E6F63;
  v59 = 6;
  v61 = v60;
  v60[0] = &off_1E2DB2840;
  v11 = v61;
  if (v61 == v60)
  {
    v12 = 4;
    v11 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_31;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_31:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v13 = v57;
    if (v57 != v56)
      goto LABEL_33;
LABEL_36:
    v14 = 4;
    v13 = v56;
    goto LABEL_37;
  }
  v13 = v57;
  if (v57 == v56)
    goto LABEL_36;
LABEL_33:
  if (!v13)
    goto LABEL_38;
  v14 = 5;
LABEL_37:
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_38:
  v56[0] = &off_1E2DB2898;
  v57 = v56;
  __p[0] = (void *)1986948963;
  v59 = 4;
  v61 = v60;
  v60[0] = &off_1E2DB2898;
  v15 = v61;
  if (v61 == v60)
  {
    v16 = 4;
    v15 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_43;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_43:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v17 = v57;
    if (v57 != v56)
      goto LABEL_45;
LABEL_48:
    v18 = 4;
    v17 = v56;
    goto LABEL_49;
  }
  v17 = v57;
  if (v57 == v56)
    goto LABEL_48;
LABEL_45:
  if (!v17)
    goto LABEL_50;
  v18 = 5;
LABEL_49:
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_50:
  v56[0] = &off_1E2DB28F0;
  v57 = v56;
  strcpy((char *)__p, "conv_transpose");
  HIBYTE(__p[1]) = 0;
  v59 = 14;
  v61 = v60;
  v60[0] = &off_1E2DB28F0;
  v19 = v61;
  if (v61 == v60)
  {
    v20 = 4;
    v19 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_55;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_55:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v21 = v57;
    if (v57 != v56)
      goto LABEL_57;
LABEL_60:
    v22 = 4;
    v21 = v56;
    goto LABEL_61;
  }
  v21 = v57;
  if (v57 == v56)
    goto LABEL_60;
LABEL_57:
  if (!v21)
    goto LABEL_62;
  v22 = 5;
LABEL_61:
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_62:
  v56[0] = &off_1E2DB2948;
  v57 = v56;
  __p[0] = (void *)0x6D75736E6965;
  v59 = 6;
  v61 = v60;
  v60[0] = &off_1E2DB2948;
  v23 = v61;
  if (v61 == v60)
  {
    v24 = 4;
    v23 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_67;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_67:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v25 = v57;
    if (v57 != v56)
      goto LABEL_69;
LABEL_72:
    v26 = 4;
    v25 = v56;
    goto LABEL_73;
  }
  v25 = v57;
  if (v57 == v56)
    goto LABEL_72;
LABEL_69:
  if (!v25)
    goto LABEL_74;
  v26 = 5;
LABEL_73:
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_74:
  v56[0] = &off_1E2DB29A0;
  v57 = v56;
  __p[0] = (void *)7696999;
  v59 = 3;
  v61 = v60;
  v60[0] = &off_1E2DB29A0;
  v27 = v61;
  if (v61 == v60)
  {
    v28 = 4;
    v27 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_79;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_79:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v29 = v57;
    if (v57 != v56)
      goto LABEL_81;
LABEL_84:
    v30 = 4;
    v29 = v56;
    goto LABEL_85;
  }
  v29 = v57;
  if (v57 == v56)
    goto LABEL_84;
LABEL_81:
  if (!v29)
    goto LABEL_86;
  v30 = 5;
LABEL_85:
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_86:
  v56[0] = &off_1E2DB29F8;
  v57 = v56;
  __p[0] = (void *)0x6F6E5F726579616CLL;
  __p[1] = (void *)28018;
  v59 = 10;
  v61 = v60;
  v60[0] = &off_1E2DB29F8;
  v31 = v61;
  if (v61 == v60)
  {
    v32 = 4;
    v31 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_91;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_91:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v33 = v57;
    if (v57 != v56)
      goto LABEL_93;
LABEL_96:
    v34 = 4;
    v33 = v56;
    goto LABEL_97;
  }
  v33 = v57;
  if (v57 == v56)
    goto LABEL_96;
LABEL_93:
  if (!v33)
    goto LABEL_98;
  v34 = 5;
LABEL_97:
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_98:
  v56[0] = &off_1E2DB2A50;
  v57 = v56;
  __p[0] = (void *)1836348268;
  v59 = 4;
  v61 = v60;
  v60[0] = &off_1E2DB2A50;
  v35 = v61;
  if (v61 == v60)
  {
    v36 = 4;
    v35 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_103;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_103:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v37 = v57;
    if (v57 != v56)
      goto LABEL_105;
LABEL_108:
    v38 = 4;
    v37 = v56;
    goto LABEL_109;
  }
  v37 = v57;
  if (v57 == v56)
    goto LABEL_108;
LABEL_105:
  if (!v37)
    goto LABEL_110;
  v38 = 5;
LABEL_109:
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_110:
  v56[0] = &off_1E2DB2AA8;
  v57 = v56;
  __p[0] = (void *)0x7261656E696CLL;
  v59 = 6;
  v61 = v60;
  v60[0] = &off_1E2DB2AA8;
  v39 = v61;
  if (v61 == v60)
  {
    v40 = 4;
    v39 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_115;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_115:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v41 = v57;
    if (v57 != v56)
      goto LABEL_117;
LABEL_120:
    v42 = 4;
    v41 = v56;
    goto LABEL_121;
  }
  v41 = v57;
  if (v57 == v56)
    goto LABEL_120;
LABEL_117:
  if (!v41)
    goto LABEL_122;
  v42 = 5;
LABEL_121:
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_122:
  v56[0] = &off_1E2DB2B00;
  v57 = v56;
  __p[0] = (void *)0x6C756D74616DLL;
  v59 = 6;
  v61 = v60;
  v60[0] = &off_1E2DB2B00;
  v43 = v61;
  if (v61 == v60)
  {
    v44 = 4;
    v43 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_127;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_127:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v45 = v57;
    if (v57 != v56)
      goto LABEL_129;
LABEL_132:
    v46 = 4;
    v45 = v56;
    goto LABEL_133;
  }
  v45 = v57;
  if (v57 == v56)
    goto LABEL_132;
LABEL_129:
  if (!v45)
    goto LABEL_134;
  v46 = 5;
LABEL_133:
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_134:
  v56[0] = &off_1E2DB2B58;
  v57 = v56;
  __p[0] = (void *)0x6C6F6F705F78616DLL;
  __p[1] = 0;
  v59 = 8;
  v61 = v60;
  v60[0] = &off_1E2DB2B58;
  v47 = v61;
  if (v61 == v60)
  {
    v48 = 4;
    v47 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_139;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_139:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    v49 = v57;
    if (v57 != v56)
      goto LABEL_141;
LABEL_144:
    v50 = 4;
    v49 = v56;
    goto LABEL_145;
  }
  v49 = v57;
  if (v57 == v56)
    goto LABEL_144;
LABEL_141:
  if (!v49)
    goto LABEL_146;
  v50 = 5;
LABEL_145:
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_146:
  v56[0] = &off_1E2DB2BB0;
  v57 = v56;
  __p[0] = (void *)7237234;
  v59 = 3;
  v61 = v60;
  v60[0] = &off_1E2DB2BB0;
  v51 = v61;
  if (v61 == v60)
  {
    v52 = 4;
    v51 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_151;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_151:
  if (v59 < 0)
  {
    operator delete(__p[0]);
    result = v57;
    if (v57 != v56)
      goto LABEL_153;
LABEL_156:
    v54 = 4;
    result = v56;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v54))();
  }
  result = v57;
  if (v57 == v56)
    goto LABEL_156;
LABEL_153:
  if (!result)
    return result;
  v54 = 5;
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v54))();
}

void sub_19111E2D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECFC45D8);
  _Unwind_Resume(a1);
}

void sub_19111E2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::pair<std::string const,std::function<float ()(Espresso::AOT::DTrees::CostModelFeature const&)>>::~pair((uint64_t)va);
  if (a5 == v5)
  {
    (*(void (**)(void))(a2 + 32))();
  }
  else if (a5)
  {
    (*(void (**)(void))(*(_QWORD *)a5 + 40))();
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void std::vector<Espresso::AOT::Backends::CostModel::`anonymous namespace'::EstimatorRegisterEntry>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  std::string::value_type *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  std::string *v23;
  const std::string::value_type **v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v5 = a1[1];
  v4 = a1[2];
  if (v5 < v4)
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a1[1], *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v6 = *a2;
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v5 = v6;
    }
    v14 = *((_QWORD *)a2 + 6);
    if (v14)
    {
      if ((__int128 *)v14 == (__int128 *)((char *)a2 + 24))
      {
        *((_QWORD *)v5 + 6) = v5 + 24;
        (*(void (**)(_QWORD))(**((_QWORD **)a2 + 6) + 24))(*((_QWORD *)a2 + 6));
        goto LABEL_26;
      }
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
    *((_QWORD *)v5 + 6) = v14;
LABEL_26:
    v17 = v5 + 56;
    a1[1] = v5 + 56;
    goto LABEL_52;
  }
  v7 = v5 - *a1;
  v8 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 3);
  if ((unint64_t)(v8 + 1) > 0x492492492492492)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3);
  v10 = 2 * v9;
  if (2 * v9 <= v8 + 1)
    v10 = v8 + 1;
  if (v9 >= 0x249249249249249)
    v11 = 0x492492492492492;
  else
    v11 = v10;
  if (v11)
  {
    if (v11 > 0x492492492492492)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(56 * v11);
    v13 = (std::string *)&v12[8 * (v7 >> 3)];
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
      goto LABEL_13;
  }
  else
  {
    v12 = 0;
    v13 = (std::string *)(8 * (v7 >> 3));
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
LABEL_13:
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *a2;
      v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      goto LABEL_21;
    }
  }
  std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
LABEL_21:
  v15 = &v12[v7];
  v16 = *((_QWORD *)a2 + 6);
  if (!v16)
  {
LABEL_24:
    *((_QWORD *)v15 + 6) = v16;
    goto LABEL_28;
  }
  if ((__int128 *)v16 != (__int128 *)((char *)a2 + 24))
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    goto LABEL_24;
  }
  *((_QWORD *)v15 + 6) = v15 + 24;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 24))(v16, v15 + 24);
LABEL_28:
  v18 = &v12[56 * v11];
  v17 = &v13[2].__r_.__value_.__s.__data_[8];
  v20 = *a1;
  v19 = a1[1];
  if (v19 != *a1)
  {
    v21 = 0;
    while (1)
    {
      v23 = (std::string *)((char *)v13 + v21 - 56);
      v24 = (const std::string::value_type **)&v19[v21 - 56];
      if (v19[v21 - 33] < 0)
      {
        std::string::__init_copy_ctor_external(v23, *v24, *(_QWORD *)&v19[v21 - 48]);
      }
      else
      {
        v25 = *(_OWORD *)v24;
        *(_QWORD *)((char *)&v13[-1] + v21 - 16) = *(_QWORD *)&v19[v21 - 40];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v25;
      }
      v26 = (char *)v13 + v21;
      v27 = &v19[v21];
      v22 = *(_QWORD *)&v19[v21 - 8];
      if (v22)
      {
        if (v27 - 32 == (char *)v22)
        {
          v13->__r_.__value_.__r.__words[v21 / 8 - 1] = (std::string::size_type)(v26 - 32);
          (*(void (**)(_QWORD))(**((_QWORD **)v27 - 1) + 24))(*((_QWORD *)v27 - 1));
          goto LABEL_32;
        }
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      }
      *((_QWORD *)v26 - 1) = v22;
LABEL_32:
      v21 -= 56;
      if (&v19[v21] == v20)
      {
        v19 = *a1;
        v28 = a1[1];
        *a1 = (char *)v13 + v21;
        a1[1] = v17;
        a1[2] = v18;
        while (1)
        {
          if (v28 == v19)
            goto LABEL_50;
          v29 = (char *)*((_QWORD *)v28 - 1);
          if (v28 - 32 == v29)
          {
            v29 = v28 - 32;
            v30 = 4;
          }
          else
          {
            if (!v29)
              goto LABEL_47;
            v30 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)v29 + 8 * v30))();
LABEL_47:
          if (*(v28 - 33) < 0)
            operator delete(*((void **)v28 - 7));
          v28 -= 56;
        }
      }
    }
  }
  *a1 = (char *)v13;
  a1[1] = v17;
  a1[2] = v18;
LABEL_50:
  if (v19)
    operator delete(v19);
LABEL_52:
  a1[1] = v17;
}

void sub_19111E794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (!v10)
    _Unwind_Resume(exception_object);
  operator delete(v10);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::CreateEstimator(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  std::string *p_p;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL4 v16;
  uint64_t v18;
  _QWORD *v19;
  std::string __p;

  v4 = atomic_load((unsigned __int8 *)&qword_1ECFC45D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ECFC45D8))
  {
    v19 = (_QWORD *)operator new();
    *v19 = 0;
    v19[1] = 0;
    v19[2] = 0;
    _MergedGlobals_0 = (uint64_t)v19;
    __cxa_guard_release(&qword_1ECFC45D8);
  }
  v5 = *(_QWORD *)_MergedGlobals_0;
  v6 = *(_QWORD *)(_MergedGlobals_0 + 8);
  if (*(_QWORD *)_MergedGlobals_0 == v6)
  {
LABEL_31:
    *a2 = 0;
    return;
  }
  while (1)
  {
    Espresso::AOT::GetOperatorType(a1, &__p);
    v7 = *(unsigned __int8 *)(v5 + 23);
    if ((v7 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(v5 + 23);
    else
      v8 = *(_QWORD *)(v5 + 8);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v8 != size)
    {
      v16 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_26;
LABEL_25:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_26;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v7 & 0x80) != 0)
    {
      v16 = memcmp(*(const void **)v5, p_p, *(_QWORD *)(v5 + 8)) == 0;
      goto LABEL_24;
    }
    if (*(_BYTE *)(v5 + 23))
    {
      v12 = 0;
      v13 = v7 - 1;
      do
      {
        v14 = *(unsigned __int8 *)(v5 + v12);
        v15 = p_p->__r_.__value_.__s.__data_[v12];
        v16 = v14 == v15;
      }
      while (v14 == v15 && v13 != v12++);
LABEL_24:
      if ((v10 & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_25;
    }
    v16 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_25;
LABEL_26:
    if (v16)
      break;
    v5 += 56;
    if (v5 == v6)
      goto LABEL_31;
  }
  v18 = *(_QWORD *)(v5 + 48);
  if (!v18)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18);
}

void sub_19111EA38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECFC45D8);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB2790;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB2790;
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E2DA0B00;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB27E8;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB27E8;
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E2DA0BA0;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB2840;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB2840;
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E2DA0B28;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB2898;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB2898;
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E2DA0AB0;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_3"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB28F0;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB28F0;
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E2DA0AB0;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_4"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB2948;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB2948;
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E2DA0B50;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_5"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB29A0;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB29A0;
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E2DA0A60;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_6")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_6" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_6"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_6" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB29F8;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB29F8;
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E2DA0BA0;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_7")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_7" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_7"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_7" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB2A50;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB2A50;
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E2DA0AD8;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_8")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_8" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_8"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_8" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB2AA8;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB2AA8;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  uint64_t v2;

  std::make_unique[abi:ne180100]<Espresso::AOT::Backends::CostModel::BaseMatmulOpEstimator,char const(&)[7],char const(&)[5]>("weight", "bias", &v2);
  *a1 = v2;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_9")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_9" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_9"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE3$_9" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::make_unique[abi:ne180100]<Espresso::AOT::Backends::CostModel::BaseMatmulOpEstimator,char const(&)[7],char const(&)[5]>(const char *a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  std::string *v18;
  void *v19;
  __int128 v20;
  unint64_t v21;
  __int128 __dst;
  unint64_t v23;

  v6 = operator new();
  v7 = strlen(a1);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v23 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v23) = v7;
  p_dst = &__dst;
  if (v7)
LABEL_8:
    memcpy(p_dst, a1, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v12 = strlen(a2);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&v20 + 1) = v13;
    v21 = v16 | 0x8000000000000000;
    *(_QWORD *)&v20 = v14;
    goto LABEL_16;
  }
  HIBYTE(v21) = v12;
  v14 = &v20;
  if (v12)
LABEL_16:
    memcpy(v14, a2, v13);
  *((_BYTE *)v14 + v13) = 0;
  *(_QWORD *)v6 = off_1E2DA0BC8;
  v17 = SHIBYTE(v23);
  if (SHIBYTE(v23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 8), (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)(v6 + 8) = __dst;
    *(_QWORD *)(v6 + 24) = v23;
  }
  v18 = (std::string *)(v6 + 32);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
    *(_QWORD *)(v6 + 48) = v21;
    *a3 = v6;
    if ((v17 & 0x80000000) == 0)
      return;
LABEL_24:
    operator delete((void *)__dst);
    return;
  }
  v19 = (void *)v20;
  std::string::__init_copy_ctor_external(v18, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  *a3 = v6;
  operator delete(v19);
  if (v17 < 0)
    goto LABEL_24;
}

void sub_19111F710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  char *v20;
  void **v21;
  char v22;

  if (v20[31] < 0)
    operator delete(*v21);
  Espresso::AOT::AbstractMILOpResourceEstimator::~AbstractMILOpResourceEstimator((Espresso::AOT::AbstractMILOpResourceEstimator *)v20);
  operator delete(__p);
  if (v22 < 0)
    operator delete(a15);
  MEMORY[0x19401CD90](v20, 0x1093C403F48558ALL);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB2B00;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB2B00;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()(_QWORD *a1@<X8>)
{
  uint64_t v2;

  std::make_unique[abi:ne180100]<Espresso::AOT::Backends::CostModel::BaseMatmulOpEstimator,char const(&)[2],char const(&)[1]>("y", "", &v2);
  *a1 = v2;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_10")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_10" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_10"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_10" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::make_unique[abi:ne180100]<Espresso::AOT::Backends::CostModel::BaseMatmulOpEstimator,char const(&)[2],char const(&)[1]>(const char *a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  std::string *v18;
  void *v19;
  __int128 v20;
  unint64_t v21;
  __int128 __dst;
  unint64_t v23;

  v6 = operator new();
  v7 = strlen(a1);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v23 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v23) = v7;
  p_dst = &__dst;
  if (v7)
LABEL_8:
    memcpy(p_dst, a1, v8);
  *((_BYTE *)p_dst + v8) = 0;
  v12 = strlen(a2);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&v20 + 1) = v13;
    v21 = v16 | 0x8000000000000000;
    *(_QWORD *)&v20 = v14;
    goto LABEL_16;
  }
  HIBYTE(v21) = v12;
  v14 = &v20;
  if (v12)
LABEL_16:
    memcpy(v14, a2, v13);
  *((_BYTE *)v14 + v13) = 0;
  *(_QWORD *)v6 = off_1E2DA0BC8;
  v17 = SHIBYTE(v23);
  if (SHIBYTE(v23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 8), (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)(v6 + 8) = __dst;
    *(_QWORD *)(v6 + 24) = v23;
  }
  v18 = (std::string *)(v6 + 32);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
    *(_QWORD *)(v6 + 48) = v21;
    *a3 = v6;
    if ((v17 & 0x80000000) == 0)
      return;
LABEL_24:
    operator delete((void *)__dst);
    return;
  }
  v19 = (void *)v20;
  std::string::__init_copy_ctor_external(v18, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  *a3 = v6;
  operator delete(v19);
  if (v17 < 0)
    goto LABEL_24;
}

void sub_19111FA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  char *v20;
  void **v21;
  char v22;

  if (v20[31] < 0)
    operator delete(*v21);
  Espresso::AOT::AbstractMILOpResourceEstimator::~AbstractMILOpResourceEstimator((Espresso::AOT::AbstractMILOpResourceEstimator *)v20);
  operator delete(__p);
  if (v22 < 0)
    operator delete(a15);
  MEMORY[0x19401CD90](v20, 0x1093C403F48558ALL);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB2B58;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB2B58;
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E2DA0B00;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_11")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_11" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_11"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_11" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB2BB0;
  return result;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB2BB0;
}

_QWORD *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_1E2DA0A88;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_12")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_12" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_12"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT8Backends9CostModel19OpEstimatorRegistry17InitAllEstimatorsEvE4$_12" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::target_type()
{
}

_QWORD *Espresso::AOT::Validators::MpsGraphValidator::MpsGraphValidator(_QWORD *a1, __int128 *a2, char a3)
{
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  char __p[23];
  char v11;

  v6 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  *v6 = off_1E2DA0228;
  v7 = *a2;
  *((_OWORD *)v6 + 2) = 0u;
  v8 = (uint64_t)(v6 + 4);
  *(_OWORD *)(v6 + 1) = v7;
  *((_BYTE *)v6 + 24) = a3;
  *((_OWORD *)v6 + 3) = 0u;
  *((_DWORD *)v6 + 16) = 1065353216;
  if ((a3 & 1) != 0)
    return a1;
  strcpy(__p, "pixel_buffer_to_tensor");
  v11 = 22;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)(v6 + 4), (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0)
    operator delete(*(void **)__p);
  strcpy(__p, "tensor_to_pixel_buffer");
  v11 = 22;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0)
    operator delete(*(void **)__p);
  v11 = 10;
  strcpy(__p, "while_loop");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0)
    operator delete(*(void **)__p);
  v11 = 4;
  strcpy(__p, "cond");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if (v11 < 0)
    operator delete(*(void **)__p);
  v11 = 8;
  strcpy(__p, "non_zero");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v8, (uint64_t)__p, (uint64_t)__p);
  if ((v11 & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)__p);
  return a1;
}

void sub_19111FF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  Espresso::AOT::AbstractValidator *v14;
  uint64_t v15;

  if (a14 < 0)
    operator delete(__p);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v15 - 24));
  Espresso::AOT::AbstractValidator::~AbstractValidator(v14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::MpsGraphValidator::Validate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  E5Common::E5PlatformManager *v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  void **v12;
  void *v13;
  void *v14;
  void **v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  void **v20;
  void *v21[2];
  void *v22[2];
  int v23;
  _BYTE v24[24];
  _BYTE *v25;
  char v26;
  void *__p[2];
  void *v28[2];
  int v29;
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 24))
  {
    HIBYTE(v28[0]) = 5;
    strcpy((char *)__p, "ios15");
    v30 = 5;
    strcpy((char *)&v28[1], "ios16");
    v32 = 5;
    strcpy((char *)v31, "ios17");
    v34 = 5;
    strcpy((char *)v33, "ios18");
    *(_OWORD *)v21 = 0u;
    *(_OWORD *)v22 = 0u;
    v23 = 1065353216;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v21, (uint64_t)__p, (uint64_t)__p);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v21, (uint64_t)&v28[1], (uint64_t)&v28[1]);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v21, (uint64_t)v31, (uint64_t)v31);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v21, (uint64_t)v33, (uint64_t)v33);
    v24[0] = 0;
    v26 = 0;
    Espresso::AOT::Utils::OpBlackListValidate((_QWORD *)(a1 + 32), v21, (uint64_t)v24, a4);
    if (!v26)
      goto LABEL_18;
    v16 = v25;
    if (v25 == v24)
    {
      v17 = 4;
      v16 = v24;
    }
    else
    {
      if (!v25)
        goto LABEL_18;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_18:
    v18 = (void **)v22[0];
    if (v22[0])
    {
      do
      {
        v20 = (void **)*v18;
        if (*((char *)v18 + 39) < 0)
          operator delete(v18[2]);
        operator delete(v18);
        v18 = v20;
      }
      while (v20);
    }
    v19 = v21[0];
    v21[0] = 0;
    if (v19)
      operator delete(v19);
    if (v34 < 0)
    {
      operator delete(v33[0]);
      if ((v32 & 0x80000000) == 0)
      {
LABEL_23:
        if ((v30 & 0x80000000) == 0)
          goto LABEL_24;
        goto LABEL_31;
      }
    }
    else if ((v32 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v31[0]);
    if ((v30 & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v28[0]) & 0x80000000) == 0)
        return;
      goto LABEL_32;
    }
LABEL_31:
    operator delete(v28[1]);
    if ((SHIBYTE(v28[0]) & 0x80000000) == 0)
      return;
LABEL_32:
    operator delete(__p[0]);
    return;
  }
  v8 = (E5Common::E5PlatformManager *)objc_msgSend(MEMORY[0x1E0CC7628], "getValidateNetworkSupportedVersion");
  v9 = E5Common::E5PlatformManager::Instance(v8);
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a1 + 8);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v28 = 0u;
  v29 = 1065353216;
  Espresso::AOT::Utils::MakeValidationInput((unint64_t)v8, a2, a3, v10, (uint64_t)__p);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void **)v28[0];
  if (v28[0])
  {
    do
    {
      v15 = (void **)*v12;
      if (*((char *)v12 + 63) < 0)
      {
        operator delete(v12[5]);
        if (*((char *)v12 + 39) < 0)
LABEL_11:
          operator delete(v12[2]);
      }
      else if (*((char *)v12 + 39) < 0)
      {
        goto LABEL_11;
      }
      operator delete(v12);
      v12 = v15;
    }
    while (v15);
  }
  v13 = __p[0];
  __p[0] = 0;
  if (v13)
    operator delete(v13);
  v14 = (void *)objc_msgSend(MEMORY[0x1E0CC7628], "validateNetworkWithParams:apiVersion:", v11, 0);
  Espresso::AOT::Utils::ParseValidationOutput((unint64_t)v8, v14, a4);

}

void sub_191120268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a18)
    Espresso::AOT::Validators::MpsGraphValidator::Validate(&a14);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  if (a42 < 0)
  {
    operator delete(__p);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a30 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a31);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0)
LABEL_12:
      _Unwind_Resume(a1);
LABEL_11:
    operator delete(a19);
    _Unwind_Resume(a1);
  }
LABEL_10:
  operator delete(a25);
  if ((a24 & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

void Espresso::AOT::Validators::MpsGraphValidator::~MpsGraphValidator(Espresso::AOT::Validators::MpsGraphValidator *this)
{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_1E2DA0228;
  v2 = (void **)*((_QWORD *)this + 6);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    operator delete(v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::MpsGraphValidator *)((char *)this + 8));
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
}

{
  void **v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = off_1E2DA0228;
  v2 = (void **)*((_QWORD *)this + 6);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    operator delete(v3);
  E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::MpsGraphValidator *)((char *)this + 8));
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::AOT::Validators::MpsGraphValidator::Validate(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)result[3];
  if (v1 == result)
  {
    v2 = 4;
  }
  else
  {
    if (!v1)
      return result;
    v2 = 5;
    result = (_QWORD *)result[3];
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void Espresso::AOT::MemOptimizer::Algorithms::DSatur::~DSatur(Espresso::AOT::MemOptimizer::Algorithms::DSatur *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v8 = (void *)*(v3 - 5);
        v3 -= 5;
        v7 = v8;
        *v3 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v8 = (void *)*(v3 - 5);
        v3 -= 5;
        v7 = v8;
        *v3 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
}

_QWORD *std::vector<Espresso::AOT::MemOptimizer::Algorithms::DSatur::BlockInfo>::~vector[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v8 = (void *)*(v3 - 5);
        v3 -= 5;
        v7 = v8;
        *v3 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

Espresso::AOT::MemOptimizer::Algorithms::DSatur *Espresso::AOT::MemOptimizer::Algorithms::DSatur::DSatur(Espresso::AOT::MemOptimizer::Algorithms::DSatur *this, const Espresso::AOT::MemOptimizer::InterferenceGraph *a2, unint64_t a3)
{
  _QWORD *v5;
  size_t v6;
  const void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *i;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v28;
  const void *v29;
  unint64_t v30;
  uint64_t **v31;
  unint64_t v32;
  uint64_t *v33;
  size_t v34;
  int v35;
  int v36;
  uint64_t *v37;
  unint64_t v38;
  const void *v39;
  uint64_t **v40;
  unint64_t v41;
  uint64_t *v42;
  size_t v43;
  int v44;
  int v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  std::logic_error *v50;
  std::logic_error *exception;
  _QWORD *v52;
  uint64_t **v53;
  uint64_t **v55;
  _QWORD *v56;
  void *__p;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t *v60;
  int v61;
  void *__dst[2];
  unint64_t v63;
  void *v64;
  _QWORD *v65;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 3) = 0;
  v53 = (uint64_t **)((char *)this + 24);
  *((_QWORD *)this + 2) = (char *)this + 24;
  v55 = (uint64_t **)((char *)this + 16);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  if (!a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid alloc alignment");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  (*(void (**)(void **__return_ptr, const Espresso::AOT::MemOptimizer::InterferenceGraph *))(*(_QWORD *)a2 + 56))(&v64, a2);
  v5 = v65;
  if (v65)
  {
    while (1)
    {
      v7 = (const void *)v5[2];
      v6 = v5[3];
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v6 >= 0x17)
      {
        v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v9 = v6 | 7;
        v10 = v9 + 1;
        v8 = (void **)operator new(v9 + 1);
        __dst[1] = (void *)v6;
        v63 = v10 | 0x8000000000000000;
        __dst[0] = v8;
      }
      else
      {
        HIBYTE(v63) = v5[3];
        v8 = __dst;
        if (!v6)
          goto LABEL_13;
      }
      memmove(v8, v7, v6);
LABEL_13:
      *((_BYTE *)v8 + v6) = 0;
      if ((*(uint64_t (**)(const Espresso::AOT::MemOptimizer::InterferenceGraph *, void **))(*(_QWORD *)a2 + 40))(a2, __dst))
      {
        v50 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v50, "Support for non-zero allocIds not yet implemented");
        v50->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v50, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v11 = (*(uint64_t (**)(const Espresso::AOT::MemOptimizer::InterferenceGraph *, void **))(*(_QWORD *)a2 + 32))(a2, __dst);
      if (v11)
        v12 = (v11 - 1) / a3 + 1;
      else
        v12 = 0;
      __p = v5 + 2;
      v13 = std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(v55, (uint64_t)(v5 + 2), (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
      v13[7] = 0;
      v13[8] = (uint64_t *)v12;
      *((_BYTE *)v13 + 48) = 0;
      (*(void (**)(void **__return_ptr, const Espresso::AOT::MemOptimizer::InterferenceGraph *, void **))(*(_QWORD *)a2 + 64))(&__p, a2, __dst);
      if (v13[14])
      {
        v14 = v13[13];
        if (v14)
        {
          do
          {
            v15 = (uint64_t *)*v14;
            operator delete(v14);
            v14 = v15;
          }
          while (v15);
        }
        v13[13] = 0;
        v16 = v13[12];
        if (v16)
        {
          for (i = 0; i != v16; i = (uint64_t *)((char *)i + 1))
            v13[11][(_QWORD)i] = 0;
        }
        v13[14] = 0;
      }
      v18 = (uint64_t *)__p;
      __p = 0;
      v19 = v13[11];
      v13[11] = v18;
      if (v19)
        operator delete(v19);
      v21 = v58;
      v20 = v59;
      v13[13] = v59;
      v13[12] = v21;
      v58 = 0;
      v22 = v60;
      v13[14] = v60;
      *((_DWORD *)v13 + 30) = v61;
      if (v22)
      {
        v23 = v20[1];
        if (((unint64_t)v21 & ((unint64_t)v21 - 1)) != 0)
        {
          if (v23 >= (unint64_t)v21)
            v23 %= (unint64_t)v21;
        }
        else
        {
          v23 &= (unint64_t)v21 - 1;
        }
        v13[11][v23] = (uint64_t)(v13 + 13);
        v59 = 0;
        v60 = 0;
      }
      else if (v20)
      {
        do
        {
          v24 = (_QWORD *)*v20;
          operator delete(v20);
          v20 = v24;
        }
        while (v24);
      }
      v25 = __p;
      __p = 0;
      if (v25)
        operator delete(v25);
      if (SHIBYTE(v63) < 0)
        operator delete(__dst[0]);
      v5 = (_QWORD *)*v5;
      if (!v5)
      {
        if (!v65)
          break;
        v52 = v65;
        v26 = *v53;
        if (!*v53)
LABEL_82:
          std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
        v27 = v65;
        while (1)
        {
          v29 = (const void *)v27[2];
          v30 = v27[3];
          v31 = (uint64_t **)v26;
          while (1)
          {
            while (1)
            {
              v33 = v31[4];
              v32 = (unint64_t)v31[5];
              v34 = v32 >= v30 ? v30 : (size_t)v31[5];
              v35 = memcmp(v29, v31[4], v34);
              if (v35)
                break;
              if (v30 >= v32)
                goto LABEL_53;
LABEL_45:
              v31 = (uint64_t **)*v31;
              if (!v31)
                goto LABEL_82;
            }
            if (v35 < 0)
              goto LABEL_45;
LABEL_53:
            v36 = memcmp(v33, v29, v34);
            if (v36)
            {
              if ((v36 & 0x80000000) == 0)
                break;
              goto LABEL_57;
            }
            if (v32 >= v30)
              break;
LABEL_57:
            v31 = (uint64_t **)v31[1];
            if (!v31)
              goto LABEL_82;
          }
          v56 = v27;
          v37 = v31[13];
          if (v37)
          {
            v28 = 0;
            while (1)
            {
              v39 = (const void *)v37[2];
              v38 = v37[3];
              v40 = (uint64_t **)v26;
              while (1)
              {
                while (1)
                {
                  v42 = v40[4];
                  v41 = (unint64_t)v40[5];
                  v43 = v41 >= v38 ? v38 : (size_t)v40[5];
                  v44 = memcmp(v39, v40[4], v43);
                  if (v44)
                    break;
                  if (v38 >= v41)
                    goto LABEL_71;
LABEL_63:
                  v40 = (uint64_t **)*v40;
                  if (!v40)
                    goto LABEL_76;
                }
                if (v44 < 0)
                  goto LABEL_63;
LABEL_71:
                v45 = memcmp(v42, v39, v43);
                if (!v45)
                  break;
                if ((v45 & 0x80000000) == 0)
                  goto LABEL_61;
LABEL_75:
                v40 = (uint64_t **)v40[1];
                if (!v40)
LABEL_76:
                  std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
              }
              if (v41 < v38)
                goto LABEL_75;
LABEL_61:
              v28 = (uint64_t *)((char *)v28 + (_QWORD)v40[8]);
              v37 = (uint64_t *)*v37;
              if (!v37)
                goto LABEL_43;
            }
          }
          v28 = 0;
LABEL_43:
          v31[9] = v28;
          v27 = (_QWORD *)*v56;
          if (!*v56)
          {
            v46 = v52;
            do
            {
              v47 = (_QWORD *)*v46;
              operator delete(v46);
              v46 = v47;
            }
            while (v47);
            goto LABEL_79;
          }
        }
      }
    }
  }
LABEL_79:
  v48 = v64;
  v64 = 0;
  if (v48)
    operator delete(v48);
  return this;
}

void sub_191120AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  _QWORD *v27;

  std::vector<Espresso::AOT::MemOptimizer::Algorithms::DSatur::BlockInfo>::~vector[abi:ne180100](v27);
  std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy(a14, *a12);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MemOptimizer::Algorithms::DSatur::ComputeDistinctNeighboringBlocks(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  const void *v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  size_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  const void *v14;
  size_t v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  unint64_t v26;
  void *__p[2];
  __int128 v28;
  int v29;

  v2 = *(uint64_t ***)(a1 + 24);
  if (!v2)
LABEL_16:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v4 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  while (1)
  {
    while (1)
    {
      v6 = v2[4];
      v7 = (unint64_t)v2[5];
      v8 = v7 >= v5 ? v5 : (size_t)v2[5];
      v9 = memcmp(v4, v2[4], v8);
      if (v9)
        break;
      if (v5 >= v7)
        goto LABEL_11;
LABEL_3:
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_16;
    }
    if (v9 < 0)
      goto LABEL_3;
LABEL_11:
    v10 = memcmp(v6, v4, v8);
    if (v10)
    {
      if ((v10 & 0x80000000) == 0)
        break;
      goto LABEL_15;
    }
    if (v7 >= v5)
      break;
LABEL_15:
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_16;
  }
  *(_OWORD *)__p = 0u;
  v28 = 0u;
  v29 = 1065353216;
  v11 = v2[13];
  if (!v11)
  {
    v12 = 0;
    __p[0] = 0;
    return v12;
  }
  while (2)
  {
    v13 = *(uint64_t **)(a1 + 24);
    if (!v13)
LABEL_46:
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    v14 = (const void *)v11[2];
    v15 = v11[3];
    while (2)
    {
      while (2)
      {
        v16 = (const void *)v13[4];
        v17 = v13[5];
        if (v17 >= v15)
          v18 = v15;
        else
          v18 = v13[5];
        v19 = memcmp(v14, (const void *)v13[4], v18);
        if (v19)
        {
          if (v19 < 0)
            goto LABEL_22;
        }
        else if (v15 < v17)
        {
LABEL_22:
          v13 = (uint64_t *)*v13;
          if (!v13)
            goto LABEL_46;
          continue;
        }
        break;
      }
      v20 = memcmp(v16, v14, v18);
      if (v20)
      {
        if ((v20 & 0x80000000) == 0)
          goto LABEL_36;
LABEL_34:
        v13 = (uint64_t *)v13[1];
        if (!v13)
          goto LABEL_46;
        continue;
      }
      break;
    }
    if (v17 < v15)
      goto LABEL_34;
LABEL_36:
    if (*((_BYTE *)v13 + 48) && v13[8])
    {
      v21 = 0;
      do
      {
        v26 = v21 + v13[7];
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t)__p, &v26, &v26);
        ++v21;
      }
      while (v21 < v13[8]);
    }
    v11 = (uint64_t *)*v11;
    if (v11)
      continue;
    break;
  }
  v12 = *((_QWORD *)&v28 + 1);
  v22 = (_QWORD *)v28;
  if ((_QWORD)v28)
  {
    do
    {
      v23 = (_QWORD *)*v22;
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  v24 = __p[0];
  __p[0] = 0;
  if (v24)
    operator delete(v24);
  return v12;
}

void sub_191120D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191120D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *Espresso::AOT::MemOptimizer::Algorithms::DSatur::GetNextNodeToAllocate(Espresso::AOT::MemOptimizer::Algorithms::DSatur *this)
{
  char *v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *result;
  unint64_t v7;
  char *v8;
  char *v9;
  BOOL v10;

  v1 = (char *)*((_QWORD *)this + 2);
  v2 = (char *)this + 24;
  if (v1 == (char *)this + 24)
    return "";
  v3 = 0;
  v4 = 0;
  v5 = 0;
  result = "";
  do
  {
    if (!v1[48])
    {
      v7 = *((_QWORD *)v1 + 10);
      if (v7 > v5 || v7 == v5 && *((_OWORD *)v1 + 4) >= __PAIR128__(v4, v3))
      {
        result = (const char *)*((_QWORD *)v1 + 4);
        v5 = *((_QWORD *)v1 + 10);
        v4 = *((_QWORD *)v1 + 9);
        v3 = *((_QWORD *)v1 + 8);
      }
    }
    v8 = (char *)*((_QWORD *)v1 + 1);
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = *(char **)v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (char *)*((_QWORD *)v1 + 2);
        v10 = *(_QWORD *)v9 == (_QWORD)v1;
        v1 = v9;
      }
      while (!v10);
    }
    v1 = v9;
  }
  while (v9 != v2);
  return result;
}

unint64_t Espresso::AOT::MemOptimizer::Algorithms::DSatur::ComputeBestFit(_QWORD *a1, uint64_t a2)
{
  uint64_t **v2;
  unint64_t v3;
  const void *v4;
  uint64_t *v5;
  unint64_t v6;
  size_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t **v16;
  _QWORD *v17;
  unint64_t v18;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t ***v23;
  uint64_t **v24;
  size_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v38;
  unint64_t v39;
  unint64_t v42;
  int v43;
  unint64_t v44;
  char v46;
  unint64_t v47;
  unint64_t v48;
  char v49;

  v2 = (uint64_t **)a1[3];
  if (!v2)
LABEL_16:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  while (1)
  {
    while (1)
    {
      v5 = v2[4];
      v6 = (unint64_t)v2[5];
      v7 = v6 >= v3 ? v3 : (size_t)v2[5];
      v8 = memcmp(v4, v2[4], v7);
      if (v8)
        break;
      if (v3 >= v6)
        goto LABEL_11;
LABEL_3:
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_16;
    }
    if (v8 < 0)
      goto LABEL_3;
LABEL_11:
    v9 = memcmp(v5, v4, v7);
    if (v9)
    {
      if ((v9 & 0x80000000) == 0)
        break;
      goto LABEL_15;
    }
    if (v6 >= v3)
      break;
LABEL_15:
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_16;
  }
  v10 = a1[5];
  v11 = 0xCCCCCCCCCCCCCCCDLL * ((a1[6] - v10) >> 3);
  if (a1[6] == v10)
  {
    v14 = 0;
    v38 = v2[8] == 0;
  }
  else if (v2[13])
  {
    v44 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v43 = 0;
    v42 = -1;
    do
    {
      v46 = v15;
      v47 = v13;
      v48 = v14;
      v16 = (uint64_t **)v2[13];
      if (v16)
      {
        v17 = (_QWORD *)(v10 + 40 * v12);
        do
        {
          v18 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v49, v16[2], (unint64_t)v16[3]);
          v19 = (int8x8_t)v17[1];
          if (v19)
          {
            v20 = v18;
            v21 = (uint8x8_t)vcnt_s8(v19);
            v21.i16[0] = vaddlv_u8(v21);
            if (v21.u32[0] > 1uLL)
            {
              v22 = v18;
              if (v18 >= *(_QWORD *)&v19)
                v22 = v18 % *(_QWORD *)&v19;
            }
            else
            {
              v22 = (*(_QWORD *)&v19 - 1) & v18;
            }
            v23 = *(uint64_t ****)(*v17 + 8 * v22);
            if (v23)
            {
              v24 = *v23;
              if (*v23)
              {
                v26 = v16[2];
                v25 = (size_t)v16[3];
                if (v21.u32[0] < 2uLL)
                {
                  v27 = *(_QWORD *)&v19 - 1;
                  while (1)
                  {
                    v29 = v24[1];
                    if ((uint64_t *)v20 == v29)
                    {
                      if (v24[3] == (uint64_t *)v25 && !memcmp(v24[2], v26, v25))
                        goto LABEL_49;
                    }
                    else if (((unint64_t)v29 & v27) != v22)
                    {
                      goto LABEL_26;
                    }
                    v24 = (uint64_t **)*v24;
                    if (!v24)
                      goto LABEL_26;
                  }
                }
                do
                {
                  v28 = (unint64_t)v24[1];
                  if (v20 == v28)
                  {
                    if (v24[3] == (uint64_t *)v25 && !memcmp(v24[2], v26, v25))
                    {
LABEL_49:
                      v14 = v48;
                      v30 = v42;
                      v31 = (unint64_t)v2[8];
                      v32 = v43;
                      if (v47 >= v42)
                        v33 = v43;
                      else
                        v33 = 1;
                      if (v47 >= v42)
                        v34 = v42;
                      else
                        v34 = v47;
                      v35 = v44;
                      if (v47 >= v42)
                        v36 = v44;
                      else
                        v36 = v48;
                      v15 = 0;
                      if (v47 >= v31)
                        v32 = v33;
                      v43 = v32;
                      v13 = 0;
                      if (v47 >= v31)
                        v30 = v34;
                      v42 = v30;
                      if (v47 >= v31)
                        v35 = v36;
                      v44 = v35;
                      goto LABEL_23;
                    }
                  }
                  else
                  {
                    if (v28 >= *(_QWORD *)&v19)
                      v28 %= *(_QWORD *)&v19;
                    if (v28 != v22)
                      break;
                  }
                  v24 = (uint64_t **)*v24;
                }
                while (v24);
              }
            }
          }
LABEL_26:
          v16 = (uint64_t **)*v16;
        }
        while (v16);
      }
      v14 = v48;
      if ((v46 & 1) == 0)
        v14 = v12;
      v13 = v47 + 1;
      v15 = 1;
LABEL_23:
      ++v12;
      v10 = a1[5];
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((a1[6] - v10) >> 3);
    }
    while (v12 < v11);
    v38 = v13 >= (unint64_t)v2[8] && v13 < v42;
    if (v13)
      v11 = v14;
    if ((v43 & 1) != 0)
      v11 = v44;
  }
  else
  {
    v14 = 0;
    if (v11 <= 1)
      v39 = 1;
    else
      v39 = 0xCCCCCCCCCCCCCCCDLL * ((a1[6] - v10) >> 3);
    v38 = v39 >= (unint64_t)v2[8] && v39 != -1;
    v11 = 0;
  }
  if (v38)
    return v14;
  else
    return v11;
}

unint64_t Espresso::AOT::MemOptimizer::Algorithms::DSatur::AllocateNode(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  const void *v5;
  unint64_t v6;
  const void *v7;
  unint64_t v8;
  size_t v9;
  int v10;
  int v11;
  unint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  const void *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  size_t v27;
  int v28;
  std::logic_error *exception;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::logic_error *v34;
  std::string __dst;
  std::string v36;
  std::string v37;

  v2 = *(uint64_t **)(a1 + 24);
  if (!v2)
    goto LABEL_45;
  v5 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  while (1)
  {
    while (1)
    {
      v7 = (const void *)v2[4];
      v8 = v2[5];
      v9 = v8 >= v6 ? v6 : v2[5];
      v10 = memcmp(v5, (const void *)v2[4], v9);
      if (v10)
        break;
      if (v6 >= v8)
        goto LABEL_11;
LABEL_3:
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_45;
    }
    if (v10 < 0)
      goto LABEL_3;
LABEL_11:
    v11 = memcmp(v7, v5, v9);
    if (v11)
    {
      if ((v11 & 0x80000000) == 0)
        break;
      goto LABEL_15;
    }
    if (v8 >= v6)
      break;
LABEL_15:
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_45;
  }
  if (*((_BYTE *)v2 + 48))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string<std::string_view,0>(&__dst, a2);
    v30 = std::string::insert(&__dst, 0, "Node ");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v36, " already allocated");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v37);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  result = Espresso::AOT::MemOptimizer::Algorithms::DSatur::ComputeBestFit((_QWORD *)a1, a2);
  if (result > 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3))
  {
    v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v34, "Invalid starting block");
    __cxa_throw(v34, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v13 = result;
  *((_BYTE *)v2 + 48) = 1;
  v2[7] = result;
  if (v2[8])
  {
    v14 = 0;
    v15 = 40 * result;
    do
    {
      v17 = *(_QWORD *)(a1 + 40);
      v18 = *(_QWORD *)(a1 + 48);
      if (v13 + v14 == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v17) >> 3))
      {
        if (v18 >= *(_QWORD *)(a1 + 56))
        {
          v16 = std::vector<Espresso::AOT::MemOptimizer::Algorithms::DSatur::BlockInfo>::__emplace_back_slow_path<>((char **)(a1 + 40));
        }
        else
        {
          *(_QWORD *)(v18 + 32) = 0;
          *(_OWORD *)v18 = 0u;
          *(_OWORD *)(v18 + 16) = 0u;
          v16 = (char *)(v18 + 40);
          *(_DWORD *)(v18 + 32) = 1065353216;
        }
        *(_QWORD *)(a1 + 48) = v16;
        v17 = *(_QWORD *)(a1 + 40);
      }
      result = (unint64_t)std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(v17 + v15, a2, (_OWORD *)a2);
      ++v14;
      v15 += 40;
    }
    while (v14 < v2[8]);
  }
  v19 = (_QWORD *)v2[13];
  if (!v19)
    return result;
  while (2)
  {
    v20 = Espresso::AOT::MemOptimizer::Algorithms::DSatur::ComputeDistinctNeighboringBlocks(a1, (uint64_t)(v19 + 2));
    v21 = *(uint64_t ***)(a1 + 24);
    if (!v21)
LABEL_45:
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    v22 = v20;
    v23 = (const void *)v19[2];
    v24 = v19[3];
    while (1)
    {
      while (1)
      {
        v25 = v21[4];
        v26 = (unint64_t)v21[5];
        v27 = v26 >= v24 ? v24 : (size_t)v21[5];
        v28 = memcmp(v23, v21[4], v27);
        if (v28)
          break;
        if (v24 >= v26)
          goto LABEL_40;
LABEL_32:
        v21 = (uint64_t **)*v21;
        if (!v21)
          goto LABEL_45;
      }
      if (v28 < 0)
        goto LABEL_32;
LABEL_40:
      result = memcmp(v25, v23, v27);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          break;
        goto LABEL_44;
      }
      if (v26 >= v24)
        break;
LABEL_44:
      v21 = (uint64_t **)v21[1];
      if (!v21)
        goto LABEL_45;
    }
    v21[10] = (uint64_t *)v22;
    v19 = (_QWORD *)*v19;
    if (v19)
      continue;
    return result;
  }
}

void sub_1911214B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if (a15 < 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v29 & 1) != 0)
    {
LABEL_10:
      __cxa_free_exception(v28);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  if (v29)
    goto LABEL_10;
  goto LABEL_9;
}

void Espresso::AOT::MemOptimizer::Algorithms::DSatur::Optimize(Espresso::AOT::MemOptimizer::Algorithms::DSatur *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  BOOL v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *__dst[2];
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  void **v29;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v27 = 0;
  v28 = 0;
  v4 = (char *)this + 24;
  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 2);
    if (v5 == v4)
      break;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = "";
    v11 = (char *)*((_QWORD *)this + 2);
    do
    {
      if (!v11[48])
      {
        v12 = *((_QWORD *)v11 + 10);
        if (v12 > v9 || v12 == v9 && *((_OWORD *)v11 + 4) >= __PAIR128__(v8, v7))
        {
          v10 = (const char *)*((_QWORD *)v11 + 4);
          v6 = *((_QWORD *)v11 + 5);
          v9 = *((_QWORD *)v11 + 10);
          v8 = *((_QWORD *)v11 + 9);
          v7 = *((_QWORD *)v11 + 8);
        }
      }
      v13 = (char *)*((_QWORD *)v11 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v11 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v11;
          v11 = v14;
        }
        while (!v15);
      }
      v11 = v14;
    }
    while (v14 != v4);
    v27 = v10;
    v28 = v6;
    if (!v6)
    {
      while (1)
      {
        v16 = *((_QWORD *)v5 + 5);
        if (v16 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v17 = *((_QWORD *)v5 + 7);
        v18 = *((_QWORD *)this + 1);
        v19 = (const void *)*((_QWORD *)v5 + 4);
        if (v16 >= 0x17)
          break;
        HIBYTE(v26) = *((_QWORD *)v5 + 5);
        v20 = __dst;
        if (v16)
          goto LABEL_27;
LABEL_28:
        *((_BYTE *)v20 + v16) = 0;
        v29 = __dst;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__dst, (uint64_t)&std::piecewise_construct, (__int128 **)&v29)+ 5) = v18 * v17;
        if (SHIBYTE(v26) < 0)
        {
          operator delete(__dst[0]);
          v23 = (char *)*((_QWORD *)v5 + 1);
          if (v23)
          {
            do
            {
LABEL_32:
              v24 = v23;
              v23 = *(char **)v23;
            }
            while (v23);
            goto LABEL_19;
          }
        }
        else
        {
          v23 = (char *)*((_QWORD *)v5 + 1);
          if (v23)
            goto LABEL_32;
        }
        do
        {
          v24 = (char *)*((_QWORD *)v5 + 2);
          v15 = *(_QWORD *)v24 == (_QWORD)v5;
          v5 = v24;
        }
        while (!v15);
LABEL_19:
        v5 = v24;
        if (v24 == v4)
          goto LABEL_37;
      }
      v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v21 = v16 | 7;
      v22 = v21 + 1;
      v20 = (void **)operator new(v21 + 1);
      __dst[1] = (void *)v16;
      v26 = v22 | 0x8000000000000000;
      __dst[0] = v20;
LABEL_27:
      memmove(v20, v19, v16);
      goto LABEL_28;
    }
    Espresso::AOT::MemOptimizer::Algorithms::DSatur::AllocateNode((uint64_t)this, (uint64_t)&v27);
  }
LABEL_37:
  *(_QWORD *)(a2 + 40) = 0xCCCCCCCCCCCCCCCDLL
                       * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3)
                       * *((_QWORD *)this + 1);
}

void sub_1911217CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1911217E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1911217F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  if (a2)
  {
    std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::destroy(a1, a2[1]);
    v4 = (_QWORD *)a2[13];
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    v6 = (void *)a2[11];
    a2[11] = 0;
    if (v6)
      operator delete(v6);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,Espresso::AOT::MemOptimizer::Algorithms::DSatur::NodeInfo>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  const void *v8;
  unint64_t v9;
  uint64_t **v10;
  const void *v11;
  unint64_t v12;
  size_t v13;
  int v14;
  int v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t *v19;

  v7 = a1 + 1;
  v6 = a1[1];
  if (!v6)
  {
    v10 = a1 + 1;
    goto LABEL_18;
  }
  v8 = *(const void **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v6;
      v11 = (const void *)v6[4];
      v12 = v6[5];
      v13 = v12 >= v9 ? v9 : v6[5];
      v14 = memcmp(v8, (const void *)v6[4], v13);
      if (v14)
        break;
      if (v9 >= v12)
        goto LABEL_11;
LABEL_3:
      v6 = *v10;
      v7 = v10;
      if (!*v10)
        goto LABEL_18;
    }
    if (v14 < 0)
      goto LABEL_3;
LABEL_11:
    v15 = memcmp(v11, v8, v13);
    if (v15)
    {
      if ((v15 & 0x80000000) == 0)
        return v10;
    }
    else if (v12 >= v9)
    {
      return v10;
    }
    v6 = v10[1];
  }
  while (v6);
  v7 = v10 + 1;
LABEL_18:
  v16 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x80uLL);
  v17 = **a4;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 7) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 2) = v17;
  *((_OWORD *)v10 + 3) = 0u;
  *((_DWORD *)v10 + 30) = 1065353216;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v16;
  *v7 = (uint64_t *)v10;
  v18 = (uint64_t *)**a1;
  v19 = (uint64_t *)v10;
  if (v18)
  {
    *a1 = v18;
    v19 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

char *std::vector<Espresso::AOT::MemOptimizer::Algorithms::DSatur::BlockInfo>::__emplace_back_slow_path<>(char **a1)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;

  v3 = *a1;
  v2 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333)
    v6 = 0x666666666666666;
  else
    v6 = v5;
  if (v6)
  {
    if (v6 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(40 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[40 * v4];
  v9 = &v7[40 * v6];
  *((_QWORD *)v8 + 4) = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_DWORD *)v8 + 8) = 1065353216;
  v10 = v8 + 40;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2)
      return v10;
    goto LABEL_29;
  }
  v11 = 0;
  do
  {
    v13 = &v8[v11];
    v14 = &v2[v11];
    v15 = *(_QWORD *)&v2[v11 - 40];
    *((_QWORD *)v14 - 5) = 0;
    *((_QWORD *)v13 - 5) = v15;
    v16 = *(_QWORD *)&v2[v11 - 32];
    *((_QWORD *)v13 - 4) = v16;
    *((_QWORD *)v14 - 4) = 0;
    v17 = *(_QWORD *)&v2[v11 - 24];
    *((_QWORD *)v13 - 3) = v17;
    v18 = (uint64_t)&v8[v11 - 24];
    v19 = *(_QWORD *)&v2[v11 - 16];
    *(_QWORD *)(v18 + 8) = v19;
    *(_DWORD *)(v18 + 16) = *(_DWORD *)&v2[v11 - 8];
    if (v19)
    {
      v12 = *(_QWORD *)(v17 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v12 >= v16)
          v12 %= v16;
      }
      else
      {
        v12 &= v16 - 1;
      }
      *(_QWORD *)(v15 + 8 * v12) = v18;
      *(_QWORD *)&v2[v11 - 24] = 0;
      *(_QWORD *)&v2[v11 - 16] = 0;
    }
    v11 -= 40;
  }
  while (&v2[v11] != v3);
  v20 = *a1;
  v2 = a1[1];
  *a1 = &v8[v11];
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v20)
  {
    do
    {
      v21 = (_QWORD *)*((_QWORD *)v2 - 3);
      if (v21)
      {
        do
        {
          v22 = (_QWORD *)*v21;
          operator delete(v21);
          v21 = v22;
        }
        while (v22);
      }
      v24 = (void *)*((_QWORD *)v2 - 5);
      v2 -= 40;
      v23 = v24;
      *(_QWORD *)v2 = 0;
      if (v24)
        operator delete(v23);
    }
    while (v2 != v20);
    v2 = v20;
  }
  if (v2)
LABEL_29:
    operator delete(v2);
  return v10;
}

void *std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  void *v12;
  size_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v32;

  v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v32, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v15 = a2;
        v14 = *(uint64_t **)a2;
        v13 = *(_QWORD *)(v15 + 8);
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = *((_QWORD *)v12 + 1);
            if (v17 == v8)
            {
              if (*((_QWORD *)v12 + 3) == v13 && !memcmp(*((const void **)v12 + 2), v14, v13))
                return v12;
            }
            else if ((v17 & (v9 - 1)) != v3)
            {
              goto LABEL_25;
            }
            v12 = *(void **)v12;
            if (!v12)
              goto LABEL_25;
          }
        }
        do
        {
          v16 = *((_QWORD *)v12 + 1);
          if (v16 == v8)
          {
            if (*((_QWORD *)v12 + 3) == v13 && !memcmp(*((const void **)v12 + 2), v14, v13))
              return v12;
          }
          else
          {
            if (v16 >= v9)
              v16 %= v9;
            if (v16 != v3)
              break;
          }
          v12 = *(void **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_25:
  v12 = operator new(0x20uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_OWORD *)v12 + 1) = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v9 && (float)(v19 * (float)v9) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_28:
      *(_QWORD *)v12 = *v21;
LABEL_63:
      *v21 = v12;
      goto LABEL_64;
    }
  }
  else
  {
    v22 = 1;
    if (v9 >= 3)
      v22 = (v9 & (v9 - 1)) != 0;
    v23 = v22 | (2 * v9);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_39;
    if (prime < v9)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v9)
LABEL_39:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v29 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v21)
          goto LABEL_28;
      }
      else
      {
        v3 = v8;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v21)
          goto LABEL_28;
      }
    }
    else
    {
      v3 = v29 & v8;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v8));
      if (v21)
        goto LABEL_28;
    }
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v30 >= v9)
        v30 %= v9;
    }
    else
    {
      v30 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_191121EF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Backends::CostModel::DefaultOpEstimator::EstimateComputeResources(const MIL::IROperation *a1@<X1>, double **a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  _BOOL4 v13;
  double v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _BOOL4 v21;
  uint64_t v22;
  _BOOL4 v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  _BOOL4 v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *i;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  double *v40;
  uint64_t ParameterType;
  MIL::IRValueType *v42;
  uint64_t v43;
  const MIL::IRValueType *v44;
  const MIL::IRValueType *v45;
  MIL::IRValue *Attribute;
  MIL::IRValue *v47;
  uint64_t v48;
  Espresso::AOT *v49;
  const MIL::IRValueType *v50;
  const MIL::IRValueType *v51;
  uint64_t v52;
  Espresso::AOT *v53;
  MIL::IRTensorValueType *v54;
  char IsScalar;
  const MIL::IRValueType *v56;
  double XDimOfTensorFromIRValueType;
  uint64_t OutputType;
  Espresso::AOT *v59;
  MIL::IRTensorValueType *v60;
  const MIL::IRValueType *v61;
  uint64_t v62;
  int v63;
  double v64;
  double *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  double *v69;
  unint64_t v70;
  MIL::IRValueType *v71;
  Espresso::AOT *v72;
  uint64_t v73;
  const MIL::IRValueType *v74;
  double v75;
  double v76;
  void *__p;
  uint64_t v78;
  _BYTE v79[11];

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *a2 = (double *)v5;
  v6 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
  Espresso::AOT::GetOperatorType(v6, (std::string *)&__p);
  if ((v79[7] & 0x80000000) != 0)
  {
    if (v78 != 27)
    {
      operator delete(__p);
      goto LABEL_31;
    }
    v13 = *(_QWORD *)__p != 0x70786574736E6F63
       || *((_QWORD *)__p + 1) != 0x656E696666615F72
       || *((_QWORD *)__p + 2) != 0x746E61757165645FLL
       || *(_QWORD *)((char *)__p + 19) != 0x657A69746E617571;
    operator delete(__p);
    if (v13)
    {
LABEL_31:
      v16 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
      Espresso::AOT::GetOperatorType(v16, (std::string *)&__p);
      if ((v79[7] & 0x80000000) != 0)
      {
        if (v78 != 4)
        {
          operator delete(__p);
          goto LABEL_39;
        }
        v17 = *(_DWORD *)__p;
        operator delete(__p);
        if (v17 != 1970038119)
          goto LABEL_39;
      }
      else if (v79[7] != 4 || (_DWORD)__p != 1970038119)
      {
LABEL_39:
        v18 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
        Espresso::AOT::GetOperatorType(v18, (std::string *)&__p);
        if ((v79[7] & 0x80000000) != 0)
        {
          if (v78 != 5)
          {
            operator delete(__p);
LABEL_57:
            v22 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
            Espresso::AOT::GetOperatorType(v22, (std::string *)&__p);
            if ((v79[7] & 0x80000000) != 0)
            {
              if (v78 != 7)
              {
                operator delete(__p);
                goto LABEL_75;
              }
              v25 = *(_DWORD *)__p != 1952870259 || *(_DWORD *)((char *)__p + 3) != 2019650932;
              operator delete(__p);
              if (v25)
              {
LABEL_75:
                v26 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
                Espresso::AOT::GetOperatorType(v26, (std::string *)&__p);
                if ((v79[7] & 0x80000000) == 0)
                {
                  if (v79[7] != 4 || (_DWORD)__p != 1953657203)
                    goto LABEL_83;
                  goto LABEL_81;
                }
                if (v78 == 4)
                {
                  v27 = *(_DWORD *)__p;
                  operator delete(__p);
                  if (v27 == 1953657203)
                  {
LABEL_81:
                    v14 = 0.000000034;
                    goto LABEL_93;
                  }
                }
                else
                {
                  operator delete(__p);
                }
LABEL_83:
                v28 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a1 + 56))(a1);
                Espresso::AOT::GetOperatorType(v28, (std::string *)&__p);
                if ((v79[7] & 0x80000000) != 0)
                {
                  if (v78 != 4)
                  {
                    operator delete(__p);
LABEL_95:
                    v15 = 0.000000002;
                    v14 = 0.000000002;
                    goto LABEL_96;
                  }
                  v29 = bswap32(*(_DWORD *)__p);
                  v30 = v29 >= 0x74616E68;
                  v31 = v29 > 0x74616E68;
                  v32 = !v30;
                  v33 = v31 - v32;
                  operator delete(__p);
                  if (v33)
                    goto LABEL_95;
                }
                else if (v79[7] != 4 || (_DWORD)__p != 1752064372)
                {
                  goto LABEL_95;
                }
                v14 = 0.000000037;
                goto LABEL_93;
              }
            }
            else
            {
              if (v79[7] != 7)
                goto LABEL_75;
              if ((_DWORD)__p != 1952870259 || *(_DWORD *)((char *)&__p + 3) != 2019650932)
                goto LABEL_75;
            }
            v14 = 0.000000035;
LABEL_93:
            v15 = 0.000000002;
            goto LABEL_96;
          }
          v21 = *(_DWORD *)__p != 1920037746 || *((_BYTE *)__p + 4) != 116;
          operator delete(__p);
          if (v21)
            goto LABEL_57;
        }
        else
        {
          if (v79[7] != 5)
            goto LABEL_57;
          if ((_DWORD)__p != 1920037746 || BYTE4(__p) != 116)
            goto LABEL_57;
        }
        v14 = 0.000000036;
        goto LABEL_93;
      }
      v14 = 0.000000078;
      goto LABEL_93;
    }
  }
  else
  {
    if (v79[7] != 27)
      goto LABEL_31;
    v7 = __p == (void *)0x70786574736E6F63 && v78 == 0x656E696666615F72;
    v8 = v7 && *(_QWORD *)v79 == 0x746E61757165645FLL;
    if (!v8 || *(_QWORD *)&v79[3] != 0x657A69746E617571)
      goto LABEL_31;
  }
  v14 = 0.000000002;
  v15 = 0.000000004;
LABEL_96:
  v34 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a1 + 64))(a1);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 72))(v34);
  if (v35)
  {
    for (i = *(_QWORD **)(v35 + 16); i; i = (_QWORD *)*i)
    {
      ParameterType = MIL::IROperation::TryGetParameterType();
      v42 = (MIL::IRValueType *)ParameterType;
      if (ParameterType)
      {
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)ParameterType + 24))(ParameterType))
        {
          v43 = MIL::IRValueType::AsTensorType(v42);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 88))(v43) != 3)
          {
            *(double *)(v5 + 32) = *(double *)(v5 + 32) + Espresso::AOT::GetSizeInMbForShape(v42, v44);
            *(double *)v5 = *(double *)v5
                          + v14 * (double)(unint64_t)Espresso::AOT::GetNumElementsSkipUnknownDims(v42, v45);
          }
        }
      }
    }
  }
  v37 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a1 + 64))(a1);
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 176))(v37);
  if (v38)
  {
    v39 = *(_QWORD **)(v38 + 16);
    if (v39)
    {
      v40 = *a2;
      do
      {
        Attribute = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
        v47 = Attribute;
        if (Attribute)
        {
          v48 = MIL::IRValue::AsTensor(Attribute);
          v49 = (Espresso::AOT *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 32))(v48);
          if ((*(uint64_t (**)(MIL::IRValue *))(*(_QWORD *)v47 + 40))(v47))
          {
            if ((*(unsigned int (**)(Espresso::AOT *))(*(_QWORD *)v49 + 88))(v49) != 3)
            {
              v40[4] = v40[4] + Espresso::AOT::GetSizeInMbForShape(v49, v50);
              *v40 = *v40 + v15 * (double)(unint64_t)Espresso::AOT::GetNumElementsSkipUnknownDims(v49, v51);
            }
          }
        }
        v39 = (_QWORD *)*v39;
      }
      while (v39);
    }
  }
  v79[7] = 1;
  LOWORD(__p) = 120;
  v52 = MIL::IROperation::TryGetParameterType();
  v53 = (Espresso::AOT *)v52;
  if ((v79[7] & 0x80000000) != 0)
  {
    operator delete(__p);
    if (!v53)
      goto LABEL_118;
  }
  else if (!v52)
  {
    goto LABEL_118;
  }
  v54 = (MIL::IRTensorValueType *)(*(uint64_t (**)(Espresso::AOT *))(*(_QWORD *)v53 + 24))(v53);
  IsScalar = MIL::IRTensorValueType::IsScalar(v54);
  XDimOfTensorFromIRValueType = 1.0;
  if ((IsScalar & 1) == 0)
    XDimOfTensorFromIRValueType = Espresso::AOT::GetXDimOfTensorFromIRValueType(v53, v56);
  (*a2)[7] = XDimOfTensorFromIRValueType;
LABEL_118:
  OutputType = MIL::IROperation::TryGetOutputType(a1);
  v59 = (Espresso::AOT *)OutputType;
  if (OutputType)
  {
    v60 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)OutputType + 24))(OutputType);
    if (!MIL::IRTensorValueType::IsScalar(v60)
      || (v62 = MIL::IRValueType::AsTensorType(v59),
          v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 88))(v62),
          v64 = 1.0,
          v63 == 3))
    {
      v64 = Espresso::AOT::GetXDimOfTensorFromIRValueType(v59, v61);
    }
    v65 = *a2;
    (*a2)[9] = v64;
    v65[5] = Espresso::AOT::GetSizeInMbForShape(v59, v61);
  }
  v66 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a1 + 64))(a1);
  v67 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 88))(v66);
  v68 = v67;
  if (v67)
  {
    v69 = *a2;
    if (v67[1] - *v67 >= 0x11uLL)
    {
      v70 = 1;
      do
      {
        v71 = (MIL::IRValueType *)MIL::IROperation::TryGetOutputType(a1);
        v72 = v71;
        if (v71)
        {
          v73 = MIL::IRValueType::AsTensorType(v71);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 88))(v73) != 3)
            v69[5] = v69[5] + Espresso::AOT::GetSizeInMbForShape(v72, v74);
        }
        ++v70;
      }
      while (v70 < (uint64_t)(v68[1] - *v68) >> 4);
    }
  }
  else
  {
    v69 = *a2;
  }
  v75 = v69[5] + v69[4];
  v69[1] = v75;
  v76 = 0.0;
  if (v75 > 0.0)
    v76 = *v69 * 1000.0 / v75;
  v69[6] = v76;
}

void sub_191122658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t *v15;
  uint64_t v17;

  v17 = *v15;
  *v15 = 0;
  if (v17)
  {
    MEMORY[0x19401CD90](v17, 0x1000C401CC6BE04);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

float Espresso::AOT::DTrees::reduce_argmaxCpuCp(double *a1)
{
  float result;

  if (a1[6] > 1.0195)
    return 30.019;
  if (a1[1] <= 18.235)
    return 1.9405;
  result = 5.0251;
  if (*a1 > 0.0131)
    return 7.4579;
  return result;
}

float Espresso::AOT::DTrees::reduce_argmaxCpuDp(double *a1)
{
  float result;

  if (a1[6] > 1.0195)
    return 30.019;
  if (a1[1] <= 18.235)
    return 1.666;
  result = 5.0403;
  if (*a1 > 0.0131)
    return 15.108;
  return result;
}

float Espresso::AOT::DTrees::reduce_argmaxCpuEp(double *a1)
{
  float result;

  if (a1[6] > 1.0195)
    return 45.028;
  if (a1[1] <= 18.235)
    return 2.0945;
  result = 4.0248;
  if (*a1 > 0.0131)
    return 12.711;
  return result;
}

float Espresso::AOT::DTrees::reduce_argmaxGpuCp(double *a1)
{
  float result;

  if (a1[6] > 1.0195)
    return 18.598;
  if (a1[1] <= 18.235)
    return 2.3366;
  result = 7.4213;
  if (*a1 > 0.0131)
    return 10.051;
  return result;
}

float Espresso::AOT::DTrees::reduce_argmaxGpuDp(double *a1)
{
  float result;

  if (a1[6] > 1.0195)
    return 10.239;
  if (a1[1] <= 18.235)
    return 4.2869;
  result = 14.042;
  if (*a1 > 0.0131)
    return 18.13;
  return result;
}

float Espresso::AOT::DTrees::reduce_argmaxGpuEp(double *a1)
{
  float result;

  if (a1[6] > 1.0195)
    return 16.233;
  if (a1[1] <= 18.235)
    return 4.3152;
  result = 3.6363;
  if (*a1 > 0.0131)
    return 27.195;
  return result;
}

void Espresso::AOT::Classic::ClassicAOTCompilerBackend::DumpE5ForPlatform(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  Espresso::AOT::CompilerOptionsForE5 *v5;
  uint64_t OutputBundlePath;
  int v7;
  size_t v8;
  unint64_t v9;
  const void **v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  _BOOL4 v21;
  BOOL v22;
  std::string *v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL8 v28;
  unsigned int v29;
  EspressoLight *aot_context;
  EspressoLight *v31;
  const void *plan;
  Espresso::EspressoReporterUtilities *v33;
  Espresso::EspressoReporterUtilities *v34;
  char DumpIrOnly;
  uint64_t BuildInfo;
  char *v37;
  char *v38;
  void *v39;
  uint64_t RequireAneResident;
  int v41;
  uint64_t v42;
  uint64_t v44;
  int v46;
  int v47;
  int v48;
  char UseClassicAOTCompilerOldHW;
  E5RT *ComputeUnits;
  int *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  char BuildForProfiling;
  uint64_t AneOptionsPlistPath;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t CpuPreferredBackend;
  uint64_t v63;
  int v64;
  unsigned __int16 *v65;
  int v66;
  int v67;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  E5Common::E5PlatformManager *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  std::string::size_type v78;
  uint64_t v79;
  std::string::size_type v80;
  uint64_t InputPath;
  uint64_t v83;
  char *v84;
  std::string::size_type v85;
  __int128 *v86;
  unint64_t v87;
  uint64_t v88;
  const char *v89;
  Espresso *v90;
  int v91;
  size_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  std::string *v98;
  std::runtime_error *v99;
  std::string *v100;
  __int128 v101;
  std::runtime_error *v102;
  std::runtime_error *exception;
  std::runtime_error *v104;
  std::string *v105;
  __int128 v106;
  std::runtime_error *v107;
  std::runtime_error *v108;
  std::runtime_error *v109;
  const std::string::value_type *v110;
  const std::string::value_type *v111;
  std::runtime_error *v112;
  std::string *v113;
  std::string *v114;
  __int128 v115;
  const std::string::value_type *v116;
  const std::string::value_type *v117;
  std::runtime_error *v118;
  std::string *v119;
  __int128 v120;
  std::runtime_error *v121;
  char v122[8];
  unsigned int v123;
  std::string::size_type v124;
  std::string v125;
  unsigned int v126;
  std::string __p;
  std::string __dst;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  std::string v137;
  uint64_t v138[2];
  char *v139;
  __int128 v140;
  int64_t v141;
  std::string v142;
  _QWORD v143[4];

  v143[1] = *MEMORY[0x1E0C80C00];
  v4 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)a1);
  v5 = (Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320);
  OutputBundlePath = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  v7 = *(char *)(OutputBundlePath + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(OutputBundlePath + 23);
  else
    v8 = *(_QWORD *)(OutputBundlePath + 8);
  v9 = v8 + 1;
  if (v8 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (const void **)OutputBundlePath;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = v8 + 1;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8 + 1;
    if (!v8)
      goto LABEL_15;
  }
  if (v7 >= 0)
    v14 = v10;
  else
    v14 = *v10;
  memmove(p_dst, v14, v8);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v8) = 47;
  v15 = (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)v4 + 24))(v4, a2);
  v16 = *(char *)(v15 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)v15;
  else
    v17 = *(const std::string::value_type **)v15;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v15 + 23);
  else
    v18 = *(_QWORD *)(v15 + 8);
  v19 = std::string::append(&__dst, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v141 = v19->__r_.__value_.__r.__words[2];
  v140 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (espresso_set_compilation_platform((EspressoLight::espresso_aot_plan *)*a2, a2[2]))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error setting compilation platform");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v21 = Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1);
  if (((*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)v4 + 16))(v4, a2) & 1) == 0)
  {
    v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v142, *(_QWORD *)a2);
    v105 = std::string::insert(&v142, 0, "Invalid platform id: ");
    v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v106;
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v104, &__dst);
    __cxa_throw(v104, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  __dst.__r_.__value_.__r.__words[0] = 0;
  LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
  __dst.__r_.__value_.__r.__words[2] = 32789;
  v129 = 0;
  v130 = 28672;
  v131 = 0;
  v132 = 32784;
  v133 = 0;
  v134 = 32785;
  v135 = 0;
  v22 = E5Common::PlatformIdentifier::operator==((uint64_t)&__dst, (uint64_t)a2);
  v23 = &__dst;
  if (!v22)
  {
    v24 = E5Common::PlatformIdentifier::operator==((uint64_t)&__dst.__r_.__value_.__r.__words[2], (uint64_t)a2);
    v23 = (std::string *)&__dst.__r_.__value_.__r.__words[2];
    if (!v24)
    {
      v25 = E5Common::PlatformIdentifier::operator==((uint64_t)&v130, (uint64_t)a2);
      v23 = (std::string *)&v130;
      if (!v25)
      {
        v26 = E5Common::PlatformIdentifier::operator==((uint64_t)&v132, (uint64_t)a2);
        v23 = (std::string *)&v132;
        if (!v26)
        {
          v27 = E5Common::PlatformIdentifier::operator==((uint64_t)&v134, (uint64_t)a2);
          v23 = (std::string *)&v136;
          if (v27)
            v23 = (std::string *)&v134;
        }
      }
    }
  }
  if ((char *)v23 - (char *)&__dst == 80)
  {
    v28 = E5Common::PlatformIdentifier::operator==((uint64_t)a2, 32786);
    if (v28)
      v29 = 50008;
    else
      v29 = 10008;
    if (!v28 && v21)
    {
      if (Espresso::hardware::is_virtual_machine((Espresso::hardware *)v28))
        v29 = 0;
      else
        v29 = 10007;
    }
  }
  else
  {
    v29 = 0;
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v134);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v132);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v130);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&__dst.__r_.__value_.__r.__words[2]);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&__dst);
  aot_context = Espresso::espresso_create_aot_context(v29, 0xFFFFFFFF);
  v31 = aot_context;
  if (!aot_context)
  {
    v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v107, "Error creating context");
    __cxa_throw(v107, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  plan = (const void *)espresso_create_plan(aot_context, 16);
  if (!plan)
  {
    v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v108, "Error creating AOT plan");
    __cxa_throw(v108, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v33)
  {
    v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v109, "Plan is not an AOT plan.");
    __cxa_throw(v109, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v34 = v33;
  DumpIrOnly = Espresso::AOT::CompilerOptionsForE5::GetDumpIrOnly((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  EspressoLight::espresso_aot_plan::set_dump_ir_only((uint64_t)v34, DumpIrOnly);
  BuildInfo = Espresso::AOT::AOTCompilerBackend::GetBuildInfo((Espresso::AOT::AOTCompilerBackend *)a1);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v138, BuildInfo);
  EspressoLight::espresso_aot_plan::set_build_info((uint64_t)v34, v138);
  v37 = v139;
  if (v139)
  {
    while (1)
    {
      v38 = *(char **)v37;
      if (v37[63] < 0)
      {
        operator delete(*((void **)v37 + 5));
        if ((v37[39] & 0x80000000) == 0)
          goto LABEL_46;
LABEL_49:
        operator delete(*((void **)v37 + 2));
        operator delete(v37);
        v37 = v38;
        if (!v38)
          break;
      }
      else
      {
        if (v37[39] < 0)
          goto LABEL_49;
LABEL_46:
        operator delete(v37);
        v37 = v38;
        if (!v38)
          break;
      }
    }
  }
  v39 = (void *)v138[0];
  v138[0] = 0;
  if (v39)
    operator delete(v39);
  RequireAneResident = Espresso::AOT::CompilerOptionsForE5::GetRequireAneResident((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  if (*(char *)(RequireAneResident + 23) < 0)
  {
    v44 = *(_QWORD *)(RequireAneResident + 8);
    if (v44 != 2)
    {
      if (v44 != 6)
      {
        if (v44 == 9
          && **(_QWORD **)RequireAneResident == 0x636E657265666E69
          && *(_BYTE *)(*(_QWORD *)RequireAneResident + 8) == 101)
        {
LABEL_69:
          v46 = 1;
          goto LABEL_81;
        }
LABEL_174:
        v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v102, &__dst);
        __cxa_throw(v102, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v42 = *(_QWORD *)RequireAneResident;
      goto LABEL_73;
    }
    if (**(_WORD **)RequireAneResident != 28526)
      goto LABEL_174;
LABEL_80:
    v46 = 0;
    goto LABEL_81;
  }
  v41 = *(unsigned __int8 *)(RequireAneResident + 23);
  if (v41 == 2)
  {
    if (*(_WORD *)RequireAneResident != 28526)
      goto LABEL_174;
    goto LABEL_80;
  }
  v42 = RequireAneResident;
  if (v41 != 6)
  {
    if (v41 != 9)
      goto LABEL_174;
    if (*(_QWORD *)RequireAneResident != 0x636E657265666E69 || *(_BYTE *)(RequireAneResident + 8) != 101)
      goto LABEL_174;
    goto LABEL_69;
  }
LABEL_73:
  v47 = *(_DWORD *)v42;
  v48 = *(unsigned __int16 *)(v42 + 4);
  if (v47 != 1769108595 || v48 != 29795)
    goto LABEL_174;
  v46 = 2;
LABEL_81:
  EspressoLight::espresso_aot_plan::set_ane_residency_requirement((uint64_t)v34, v46);
  UseClassicAOTCompilerOldHW = Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  EspressoLight::espresso_aot_plan::set_use_classic_aot_old_hw((uint64_t)v34, UseClassicAOTCompilerOldHW);
  ComputeUnits = (E5RT *)Espresso::AOT::CompilerOptionsForE5::GetComputeUnits((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  v52 = *(int **)ComputeUnits;
  v53 = (int *)*((_QWORD *)ComputeUnits + 1);
  if (*(int **)ComputeUnits == v53)
  {
    v54 = 0;
    if (!v21)
      goto LABEL_94;
    goto LABEL_88;
  }
  v54 = 0;
  do
  {
    v55 = *v52;
    if (v55 >= 3)
    {
      v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v142, v55);
      v100 = std::string::insert(&v142, 0, "Unexpected compute unit: ");
      v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v101;
      v100->__r_.__value_.__l.__size_ = 0;
      v100->__r_.__value_.__r.__words[2] = 0;
      v100->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v99, &__dst);
      __cxa_throw(v99, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v54 |= qword_191A8C478[v55];
    ++v52;
  }
  while (v52 != v53);
  if (v21)
  {
LABEL_88:
    if (E5RT::IsAVirtualMachine(ComputeUnits))
    {
      if (v54)
        v56 = (v54 & 1) == 0;
      else
        v56 = 0;
      if (v56)
      {
        v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v121, "On-device compilation within a VM only supports CPU currently.");
        __cxa_throw(v121, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v54 = 1;
    }
  }
LABEL_94:
  EspressoLight::espresso_aot_plan::set_compute_units_requirement((uint64_t)v34, v54);
  BuildForProfiling = Espresso::AOT::CompilerOptionsForE5::GetBuildForProfiling((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  EspressoLight::espresso_aot_plan::set_build_for_profiling((uint64_t)v34, BuildForProfiling);
  AneOptionsPlistPath = Espresso::AOT::CompilerOptionsForE5::GetAneOptionsPlistPath((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  v59 = *(unsigned __int8 *)(AneOptionsPlistPath + 23);
  if ((v59 & 0x80u) != 0)
    v59 = *(_QWORD *)(AneOptionsPlistPath + 8);
  if (v59)
  {
    v60 = Espresso::AOT::CompilerOptionsForE5::GetAneOptionsPlistPath((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
    if (*(char *)(v60 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)v60, *(_QWORD *)(v60 + 8));
    }
    else
    {
      v61 = *(_OWORD *)v60;
      v137.__r_.__value_.__r.__words[2] = *(_QWORD *)(v60 + 16);
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v61;
    }
    EspressoLight::espresso_aot_plan::set_ane_options_plist_path((uint64_t)v34, (__n128 *)&v137);
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v137.__r_.__value_.__l.__data_);
  }
  CpuPreferredBackend = Espresso::AOT::CompilerOptionsForE5::GetCpuPreferredBackend((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  v63 = *(unsigned __int8 *)(CpuPreferredBackend + 23);
  v64 = (char)v63;
  if ((v63 & 0x80u) != 0)
    v63 = *(_QWORD *)(CpuPreferredBackend + 8);
  if (v63 == 3)
  {
    v65 = v64 >= 0 ? (unsigned __int16 *)CpuPreferredBackend : *(unsigned __int16 **)CpuPreferredBackend;
    v66 = *v65;
    v67 = *((unsigned __int8 *)v65 + 2);
    if (v66 == 27757 && v67 == 99)
      goto LABEL_119;
  }
  v69 = Espresso::AOT::CompilerOptionsForE5::GetCpuPreferredBackend((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  v70 = *(unsigned __int8 *)(v69 + 23);
  v71 = (char)v70;
  if ((v70 & 0x80u) != 0)
    v70 = *(_QWORD *)(v69 + 8);
  if (v70 == 8)
  {
    v72 = v71 >= 0 ? (_QWORD *)v69 : *(_QWORD **)v69;
    if (*v72 == 0x736E6E622F636C6DLL)
    {
LABEL_119:
      v73 = (E5Common::E5PlatformManager *)Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&__dst, (const Espresso::AOT::AOTCompilerOptions *)(a1 + 184));
      *((_BYTE *)&v142.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&v142, "e5");
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&__p, "platforms");
      v74 = E5Common::E5PlatformManager::Instance(v73);
      v75 = (*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)v74 + 24))(v74, a2);
      if (*(char *)(v75 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v75, *(_QWORD *)(v75 + 8));
      }
      else
      {
        v76 = *(_OWORD *)v75;
        v125.__r_.__value_.__r.__words[2] = *(_QWORD *)(v75 + 16);
        *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v76;
      }
      v126 = 3;
      Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)&__dst, (__int128 *)&v142, (__int128 *)&__p, (uint64_t)&v125);
      if (v126 != -1)
        ((void (*)(char *, std::string *))*(&off_1E2DD1550 + v126))(v122, &v125);
      v126 = -1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_126;
      }
      else if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_126:
        v77 = Espresso::AOT::AOTCompilerBackend::GetBuildInfo((Espresso::AOT::AOTCompilerBackend *)a1);
        std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions &,std::unordered_map<std::string,std::string> const&>((const Espresso::AOT::AOTCompilerOptions *)&__dst, v77, (uint64_t *)&v142);
        v78 = v142.__r_.__value_.__r.__words[0];
        v142.__r_.__value_.__r.__words[0] = 0;
        v124 = v78;
        EspressoLight::espresso_aot_plan::set_mlc_compiler((uint64_t)v34, (uint64_t *)&v124);
        v79 = v124;
        v124 = 0;
        if (v79)
          (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
        v80 = v142.__r_.__value_.__r.__words[0];
        v142.__r_.__value_.__r.__words[0] = 0;
        if (v80)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v80 + 8))(v80);
        Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&__dst);
        goto LABEL_131;
      }
      operator delete(v142.__r_.__value_.__l.__data_);
      goto LABEL_126;
    }
  }
LABEL_131:
  InputPath = Espresso::AOT::CompilerOptionsForE5::GetInputPath((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 320));
  if (v29 == 50008 || v29 == 0)
    v83 = 65568;
  else
    v83 = 65552;
  if (*(char *)(InputPath + 23) >= 0)
    v84 = (char *)InputPath;
  else
    v84 = *(char **)InputPath;
  if (espresso_plan_add_network(v34, v84, v83, (uint64_t)v122))
  {
    espresso_plan_get_error_info((uint64_t)v34);
    v111 = v110;
    v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v113 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v142, "Error adding network: ");
    v114 = std::string::append(v113, v111);
    v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v115;
    v114->__r_.__value_.__l.__size_ = 0;
    v114->__r_.__value_.__r.__words[2] = 0;
    v114->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v112, &__dst);
    __cxa_throw(v112, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v85 = HIBYTE(v141);
  if (v141 < 0)
    v85 = *((_QWORD *)&v140 + 1);
  __dst.__r_.__value_.__l.__size_ = v85;
  __dst.__r_.__value_.__r.__words[0] = 1;
  v86 = &v140;
  if (v141 < 0)
    v86 = (__int128 *)v140;
  __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)v86;
  v143[0] = &__dst;
  if (espresso_plan_build_with_options(v34, (uint64_t)v143, 1))
  {
    espresso_plan_get_error_info((uint64_t)v34);
    v117 = v116;
    v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Error building plan: ");
    v119 = std::string::append(&__p, v117);
    v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
    v142.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v120;
    v119->__r_.__value_.__l.__size_ = 0;
    v119->__r_.__value_.__r.__words[2] = 0;
    v119->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v118, &v142);
    __cxa_throw(v118, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v87 = v123;
  v88 = Espresso::AOT::CompilerOptionsForE5::GetInputPath(v5);
  if (*(char *)(v88 + 23) >= 0)
    v90 = (Espresso *)v88;
  else
    v90 = *(Espresso **)v88;
  v91 = SHIBYTE(v141);
  if (v141 >= 0)
    v92 = HIBYTE(v141);
  else
    v92 = *((_QWORD *)&v140 + 1);
  v93 = v92 + 7;
  if (v92 + 7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v93 >= 0x17)
  {
    v95 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v93 | 7) != 0x17)
      v95 = v93 | 7;
    v96 = v95 + 1;
    v94 = operator new(v95 + 1);
    v142.__r_.__value_.__l.__size_ = v92 + 7;
    v142.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
    v142.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
  }
  else
  {
    memset(&v142, 0, sizeof(v142));
    v94 = &v142;
    *((_BYTE *)&v142.__r_.__value_.__s + 23) = v92 + 7;
    if (!v92)
      goto LABEL_163;
  }
  if (v91 >= 0)
    v97 = &v140;
  else
    v97 = (__int128 *)v140;
  memmove(v94, v97, v92);
LABEL_163:
  strcpy((char *)v94 + v92, ".bundle");
  if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v98 = &v142;
  else
    v98 = (std::string *)v142.__r_.__value_.__r.__words[0];
  Espresso::EspressoReporterUtilities::send_network_info_to_coreanalytics(v34, (void *)v87, v90, (char *)v98, v89);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  espresso_plan_build_clean(v34);
  espresso_plan_destroy((std::string::size_type)v34);
  espresso_context_destroy(v31);
  if (SHIBYTE(v141) < 0)
    operator delete((void *)v140);
}

void sub_19112369C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void *v50;
  int v51;
  uint64_t v52;

  if (*(char *)(v52 - 121) < 0)
    operator delete(*(void **)(v52 - 144));
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v51 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v52 - 153) < 0)
        operator delete(*(void **)(v52 - 176));
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v50);
  goto LABEL_8;
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions &,std::unordered_map<std::string,std::string> const&>(const Espresso::AOT::AOTCompilerOptions *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void **v7;
  void *v8;
  void **v9;
  void *__p[2];
  void *v11;
  _BYTE v12[136];

  v6 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12, a1);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)__p, a2);
  Espresso::AOT::MILCompilerForMLC::MILCompilerForMLC(v6, v12, __p);
  *a3 = v6;
  v7 = (void **)v11;
  if (v11)
  {
    do
    {
      v9 = (void **)*v7;
      if (*((char *)v7 + 63) < 0)
      {
        operator delete(v7[5]);
        if (*((char *)v7 + 39) < 0)
LABEL_10:
          operator delete(v7[2]);
      }
      else if (*((char *)v7 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v7);
      v7 = v9;
    }
    while (v9);
  }
  v8 = __p[0];
  __p[0] = 0;
  if (v8)
    operator delete(v8);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12);
}

void sub_1911239F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C40CB988097);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::AOT::Classic::ClassicAOTCompilerBackend::ClassicAOTCompilerBackend(_QWORD *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  void **v6;
  void *v7;
  void **v9;
  void *__p[2];
  void *v11;
  __int128 v12[8];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12, a2);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)__p, a3);
  Espresso::AOT::AOTCompilerBackend::AOTCompilerBackend((uint64_t)a1, v12, (uint64_t)__p);
  v6 = (void **)v11;
  if (v11)
  {
    do
    {
      v9 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0)
LABEL_10:
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v6);
      v6 = v9;
    }
    while (v9);
  }
  v7 = __p[0];
  __p[0] = 0;
  if (v7)
    operator delete(v7);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12);
  *a1 = &off_1E2DA0A30;
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(a1 + 23), a2);
  Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 40), a2);
  return a1;
}

void sub_191123B1C(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerBackend *v1;
  Espresso::AOT::AOTCompilerOptions *v2;

  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v1);
  _Unwind_Resume(a1);
}

void sub_191123B38(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerBackend *v1;

  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v1);
  _Unwind_Resume(a1);
}

void sub_191123B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  _Unwind_Resume(a1);
}

void sub_191123B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Classic::ClassicAOTCompilerBackend::GetOutputPaths(Espresso::AOT::Classic::ClassicAOTCompilerBackend *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t OutputBundlePath;
  __int128 v4;
  std::string __p;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OutputBundlePath = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320));
  if (*(char *)(OutputBundlePath + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)OutputBundlePath, *(_QWORD *)(OutputBundlePath + 8));
  }
  else
  {
    v4 = *(_OWORD *)OutputBundlePath;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(OutputBundlePath + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_191123C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::Classic::ClassicAOTCompilerBackend::GetOutputBundle(Espresso::AOT::Classic::ClassicAOTCompilerBackend *this)
{
  return Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320));
}

void Espresso::AOT::Classic::ClassicAOTCompilerBackend::Run(Espresso::AOT::Classic::ClassicAOTCompilerBackend *this)
{
  Espresso::AOT::CompilerOptionsForE5 *v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v2 = (Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320);
  for (i = *(uint64_t **)(Espresso::AOT::CompilerOptionsForE5::GetPlatforms((Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320))
                        + 16); i; i = (uint64_t *)*i)
  {
    v11 = *((_OWORD *)i + 1);
    if (!Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW(v2)
      || Espresso::AOT::Utils::IsPlatformMixANE(v11, v4, v5, v6, v7, v8, v9, v10, v11))
    {
      Espresso::AOT::Classic::ClassicAOTCompilerBackend::DumpE5ForPlatform((uint64_t)this, (unsigned int *)&v11);
    }
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v11);
  }
}

void sub_191123CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a9);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Classic::ClassicAOTCompilerBackend::~ClassicAOTCompilerBackend(Espresso::AOT::Classic::ClassicAOTCompilerBackend *this)
{
  Espresso::AOT::AOTCompilerOptions *v2;

  *(_QWORD *)this = &off_1E2DA0A30;
  v2 = (Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 184);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320));
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
}

{
  Espresso::AOT::AOTCompilerOptions *v2;

  *(_QWORD *)this = &off_1E2DA0A30;
  v2 = (Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 184);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::Classic::ClassicAOTCompilerBackend *)((char *)this + 320));
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
  JUMPOUT(0x19401CD90);
}

void std::array<E5Common::PlatformIdentifier const,5ul>::~array(uint64_t a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(a1 + 64));
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(a1 + 48));
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(a1 + 32));
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(a1 + 16));
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

_QWORD *Espresso::AOT::Validators::E5MinimalCpuValidator::E5MinimalCpuValidator(Espresso::AOT::Validators::E5MinimalCpuValidator *this)
{
  _QWORD *result;

  result = Espresso::AOT::AbstractValidator::AbstractValidator(this);
  *result = &off_1E2DA0250;
  return result;
}

{
  _QWORD *result;

  result = Espresso::AOT::AbstractValidator::AbstractValidator(this);
  *result = &off_1E2DA0250;
  return result;
}

void Espresso::AOT::Validators::E5MinimalCpuValidator::Validate(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t Function;
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  void **v43;
  void *v44;
  char *v45;
  char *v46;
  void *v47;
  void *v48;
  char *v50;
  void *v51;
  char *v52;
  char *v53;
  void *v54;
  char *v55;
  void *__p;
  void **v57;
  uint64_t v58;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  Function = MIL::IRProgram::GetFunction();
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  E5Common::MinimalCpu::MatchAllPatterns(v2, v4, (uint64_t)&v54);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v5 = (char *)v54;
  v50 = v55;
  if (v54 != v55)
  {
    do
    {
      v7 = (_BYTE *)*((_QWORD *)v5 + 1);
      v6 = (_BYTE *)*((_QWORD *)v5 + 2);
      v8 = v6 - v7;
      if ((unint64_t)(v6 - v7) >= 0x10)
      {
        __p = 0;
        v57 = 0;
        v58 = 0;
        if (v6 == v7)
        {
          v10 = 0;
          v9 = 0;
        }
        else
        {
          if (v8 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v9 = operator new(v6 - v7);
          v10 = (char *)&v9[v8 >> 3];
          memcpy(v9, v7, v8);
        }
        std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
        v11 = v10 - (char *)v9;
        if ((unint64_t)(v10 - (char *)v9) >= 0x10)
        {
          v33 = v11 >> 3;
          v34 = (unint64_t)(v11 >> 3) > 2;
          v35 = 2;
          if (v34)
            v35 = v33;
          v36 = v9[1];
          if (v36 != *v9 + 1)
          {
            operator delete(v9);
            goto LABEL_4;
          }
          v37 = 2;
          do
          {
            if (v35 == v37)
              goto LABEL_12;
            v38 = v37;
            v39 = v36 + 1;
            v40 = v9[v37++];
            v36 = v40;
          }
          while (v40 == v39);
          operator delete(v9);
          if (v38 < v33)
            goto LABEL_4;
        }
        else if (v9)
        {
LABEL_12:
          operator delete(v9);
        }
      }
      v12 = (_QWORD *)*((_QWORD *)v5 + 1);
      v13 = (_QWORD *)*((_QWORD *)v5 + 2);
      if (v12 != v13)
      {
        v14 = v52;
        while (v14 < v53)
        {
          *(_QWORD *)v14 = *v12;
          v15 = (uint64_t)(v14 + 8);
LABEL_16:
          v52 = (char *)v15;
          ++v12;
          v14 = (char *)v15;
          if (v12 == v13)
            goto LABEL_4;
        }
        v16 = (char *)v51;
        v17 = v14 - (_BYTE *)v51;
        v18 = (v14 - (_BYTE *)v51) >> 3;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v20 = v53 - (_BYTE *)v51;
        if ((v53 - (_BYTE *)v51) >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = operator new(8 * v21);
          v23 = &v22[8 * v18];
          *v23 = *v12;
          v15 = (uint64_t)(v23 + 1);
          if (v14 == v16)
            goto LABEL_32;
LABEL_29:
          v24 = v14 - 8 - v16;
          if (v24 < 0x168)
          {
            v25 = v14;
            goto LABEL_31;
          }
          if (&v22[v17 - 8 - (v24 & 0xFFFFFFFFFFFFFFF8)] > &v22[v17 - 8])
          {
            v25 = v14;
            goto LABEL_31;
          }
          if (&v14[-(v24 & 0xFFFFFFFFFFFFFFF8) - 8] > v14 - 8)
          {
            v25 = v14;
            goto LABEL_31;
          }
          if ((unint64_t)(v14 - v22 - v17) < 0x20)
          {
            v25 = v14;
            goto LABEL_31;
          }
          v27 = (v24 >> 3) + 1;
          v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
          v25 = &v14[-v28];
          v23 = (_QWORD *)((char *)v23 - v28);
          v29 = &v22[8 * v18 - 16];
          v30 = v14 - 16;
          v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v32 = *(_OWORD *)v30;
            *(v29 - 1) = *((_OWORD *)v30 - 1);
            *v29 = v32;
            v29 -= 2;
            v30 -= 32;
            v31 -= 4;
          }
          while (v31);
          if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_31:
              v26 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *--v23 = v26;
            }
            while (v25 != v16);
          }
        }
        else
        {
          v22 = 0;
          v23 = (_QWORD *)(8 * v18);
          *(_QWORD *)(8 * v18) = *v12;
          v15 = 8 * v18 + 8;
          if (v14 != v16)
            goto LABEL_29;
        }
LABEL_32:
        v51 = v23;
        v52 = (char *)v15;
        v53 = &v22[8 * v21];
        if (v16)
          operator delete(v16);
        goto LABEL_16;
      }
LABEL_4:
      v5 += 32;
    }
    while (v5 != v50);
  }
  __p = 0;
  v57 = 0;
  v58 = 0;
  v41 = operator new();
  Espresso::AOT::ValidationResult::ValidationResult(v41, &v51, &__p);
  *a2 = v41;
  v42 = (void **)__p;
  if (__p)
  {
    v43 = v57;
    v44 = __p;
    if (v57 != __p)
    {
      do
      {
        if (*((char *)v43 - 1) < 0)
          operator delete(*(v43 - 3));
        v43 -= 4;
      }
      while (v43 != v42);
      v44 = __p;
    }
    v57 = v42;
    operator delete(v44);
  }
  if (v51)
  {
    v52 = (char *)v51;
    operator delete(v51);
  }
  v45 = (char *)v54;
  if (v54)
  {
    v46 = v55;
    v47 = v54;
    if (v55 != v54)
    {
      do
      {
        v48 = (void *)*((_QWORD *)v46 - 3);
        if (v48)
        {
          *((_QWORD *)v46 - 2) = v48;
          operator delete(v48);
        }
        v46 -= 32;
      }
      while (v46 != v45);
      v47 = v54;
    }
    v55 = v45;
    operator delete(v47);
  }
}

void sub_191124218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;

  MEMORY[0x19401CD90](v18, 0x10B1C40E94733EDLL);
  std::vector<Espresso::AOT::ValidationMessage>::~vector[abi:ne180100](&a17);
  if (__p)
    operator delete(__p);
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::E5MinimalCpuValidator::~E5MinimalCpuValidator(Espresso::AOT::Validators::E5MinimalCpuValidator *this)
{
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::create_aot_context(int a1@<W0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  int v10;

  v10 = a1;
  Espresso::create_context(&v10, &v8);
  v3 = v8;
  if (v8)
  {
    *(_BYTE *)(v8 + 127) = 1;
    v4 = v9;
    *a2 = v3;
    a2[1] = v4;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void Espresso::create_aot_context(int a1@<W0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  int v11;

  v11 = a1;
  Espresso::create_context(&v11, a2, &v9);
  v4 = v9;
  if (v9)
  {
    *(_BYTE *)(v9 + 127) = 1;
    v5 = v10;
    *a3 = v4;
    a3[1] = v5;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void Espresso::create_context(int *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  Espresso *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  Espresso *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  Espresso::abstract_engine_factory::shared(&v23);
  Espresso::abstract_engine_factory::engine_for_platform(v23, a1, &v21);
  v7 = v24;
  if (!v24)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v10 = v21;
    if (v21)
    {
LABEL_6:
      (*(void (**)(Espresso *, Espresso **, uint64_t))(*(_QWORD *)v10 + 32))(v10, &v21, a2);
      v11 = v22;
      if (!v22)
        return;
      goto LABEL_11;
    }
  }
  else
  {
LABEL_5:
    v10 = v21;
    if (v21)
      goto LABEL_6;
  }
  Espresso::espresso_os_log_subsystem(v10, v6);
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    Espresso::create_context((uint64_t)a1, v12, v13, v14, v15, v16, v17, v18);

    *a3 = 0;
    a3[1] = 0;
    v11 = v22;
    if (!v22)
      return;
  }
  else
  {

    *a3 = 0;
    a3[1] = 0;
    v11 = v22;
    if (!v22)
      return;
  }
LABEL_11:
  v19 = (unint64_t *)&v11->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_191124538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  const char *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;

  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)())v26->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v23 = __cxa_begin_catch(exception_object);
  Espresso::espresso_os_log_subsystem(0, v24);
  v25 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    Espresso::create_context((uint64_t)v23);

  *v18 = 0;
  v18[1] = 0;
  __cxa_end_catch();
}

EspressoLight *Espresso::espresso_create_aot_context(unsigned int a1, unsigned int a2)
{
  EspressoLight *context;
  void *v3;
  EspressoLight *v4;
  EspressoLight *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[2];

  context = (EspressoLight *)espresso_create_context(a1, a2);
  v4 = context;
  if (!context)
    return v4;
  v5 = EspressoLight::espresso_context::unbox(context, v3);
  EspressoLight::espresso_context::get_internal_context((uint64_t)v5, v10);
  v6 = (std::__shared_weak_count *)v10[1];
  *(_BYTE *)(v10[0] + 127) = 1;
  if (!v6)
    return v4;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
    return v4;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return v4;
}

void OUTLINED_FUNCTION_3_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void Espresso::create_context(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_3_2(&dword_190DAF000, a2, a3, "Unsupported Engine type %d.", a5, a6, a7, a8, 0);
}

void Espresso::create_context(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_2_0(a1);
  OUTLINED_FUNCTION_0_0(&dword_190DAF000, v1, v2, "Cannot create context, Caught exception: %s", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_4();
}

void Espresso::AOT::DispatchUnitToBlock(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t Name;
  __int128 v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count_vtbl *v18;
  _QWORD *v19;
  MIL::IRNamedValueType *v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  MIL::UnknownLocation *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count_vtbl *v32;
  char *v33;
  char *v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count_vtbl *v48;
  std::__shared_weak_count_vtbl *v49;
  void **v50;
  void *v51;
  char *v52;
  char *v53;
  char *v54;
  void **v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *__p;
  char *v60;
  void *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count_vtbl *v63;
  std::__shared_weak_count_vtbl *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count_vtbl *v66;
  std::string v67;
  void *v68[2];
  void *v69[2];
  int v70;
  char *v71;
  char *v72;
  unint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v5 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v6 = *(_QWORD *)(**v5 + 16 * *a3);
  v7 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 208))(v6);
  v8 = **v7;
  if ((*v7)[1] != v8)
  {
    (*(void (**)(void))(**(_QWORD **)v8 + 32))();
    return;
  }
  v71 = 0;
  v72 = 0;
  v73 = 0;
  *(_OWORD *)v68 = 0u;
  *(_OWORD *)v69 = 0u;
  v70 = 1065353216;
  v9 = *(_QWORD *)(**v5 + 16 * *a3);
  v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 160))(v9);
  v11 = v10 + 1;
  v12 = (_QWORD *)*v10;
  if ((_QWORD *)*v10 != v10 + 1)
  {
    while (1)
    {
      v13 = v12[7];
      if (((v12[8] - v13) & 0xFFFFFFFF0) != 0)
        break;
LABEL_29:
      v25 = (_QWORD *)v12[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD *)v12[2];
          v27 = *v26 == (_QWORD)v12;
          v12 = v26;
        }
        while (!v27);
      }
      v12 = v26;
      if (v26 == v11)
        goto LABEL_35;
    }
    v14 = 0;
    while (1)
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v13 + 16 * v14) + 16))(*(_QWORD *)(v13 + 16 * v14)))
      {
        Name = MIL::IRArgument::GetName(*(MIL::IRArgument **)(v12[7] + 16 * v14));
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v68, Name))break;
      }
LABEL_9:
      ++v14;
      v13 = v12[7];
      if (v14 >= ((unint64_t)(v12[8] - v13) >> 4))
        goto LABEL_29;
    }
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
    }
    else
    {
      v16 = *(_OWORD *)Name;
      v67.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v16;
    }
    MIL::IROperation::GetParameterType();
    MIL::IRNamedValueType::Make();
    v61 = __p;
    if (__p)
    {
      v17 = (std::__shared_weak_count *)operator new();
      v18 = (std::__shared_weak_count_vtbl *)__p;
      v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3040;
      v17->__shared_owners_ = 0;
      v17->__shared_weak_owners_ = 0;
      v17[1].__vftable = v18;
      v62 = v17;
      __p = 0;
      v19 = v72;
      if ((unint64_t)v72 < v73)
        goto LABEL_17;
    }
    else
    {
      v17 = 0;
      v62 = 0;
      __p = 0;
      v19 = v72;
      if ((unint64_t)v72 < v73)
      {
LABEL_17:
        *v19 = v61;
        v19[1] = v17;
        v61 = 0;
        v62 = 0;
        v72 = (char *)(v19 + 2);
        v20 = (MIL::IRNamedValueType *)__p;
        __p = 0;
        if (v20)
        {
          MIL::IRNamedValueType::~IRNamedValueType(v20);
          MEMORY[0x19401CD90]();
        }
        goto LABEL_26;
      }
    }
    v21 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>(&v71, (uint64_t)&v61);
    v22 = v62;
    v72 = v21;
    if (!v62)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v62->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      __p = 0;
    }
    else
    {
LABEL_24:
      __p = 0;
    }
LABEL_26:
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v68, Name, Name);
    goto LABEL_9;
  }
LABEL_35:
  v28 = (MIL::UnknownLocation *)(*(_QWORD *(**)(std::__shared_weak_count_vtbl **__return_ptr))(**(_QWORD **)(**v5 + 16 * *a3) + 32))(&v66);
  MIL::UnknownLocation::Make(v28);
  v64 = v63;
  if (v63)
  {
    v29 = (std::__shared_weak_count *)operator new();
    v30 = v63;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3008;
    v29->__shared_owners_ = 0;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v30;
  }
  else
  {
    v29 = 0;
  }
  v65 = v29;
  v63 = 0;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(**v5 + 16 * *a3) + 200))(&v61);
  v74 = v66;
  if (v66)
  {
    v31 = (std::__shared_weak_count *)operator new();
    v32 = v66;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2F98;
    v31->__shared_owners_ = 0;
    v31->__shared_weak_owners_ = 0;
    v31[1].__vftable = v32;
  }
  else
  {
    v31 = 0;
  }
  v75 = v31;
  v66 = 0;
  std::vector<std::shared_ptr<MIL::IROperation>>::vector[abi:ne180100](&__p, &v74, 1uLL);
  MIL::IRBlock::Make();
  v33 = (char *)__p;
  if (__p)
  {
    v34 = v60;
    v35 = __p;
    if (v60 != __p)
    {
      do
      {
        v36 = (std::__shared_weak_count *)*((_QWORD *)v34 - 1);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v34 -= 16;
      }
      while (v34 != v33);
      v35 = __p;
    }
    v60 = v33;
    operator delete(v35);
  }
  v39 = v75;
  if (v75)
  {
    v40 = (unint64_t *)&v75->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)v61;
  if (v61)
  {
    v43 = v62;
    v44 = v61;
    if (v62 != v61)
    {
      do
      {
        if (SHIBYTE(v43[-1].__shared_weak_owners_) < 0)
          operator delete(v43[-1].__vftable);
        --v43;
      }
      while (v43 != v42);
      v44 = v61;
    }
    v62 = v42;
    operator delete(v44);
  }
  v45 = v65;
  if (v65)
  {
    v46 = (unint64_t *)&v65->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v63;
  v63 = 0;
  if (v48)
    (*((void (**)(std::__shared_weak_count_vtbl *))v48->~__shared_weak_count + 1))(v48);
  v49 = v66;
  v66 = 0;
  if (v49)
    (*((void (**)(std::__shared_weak_count_vtbl *))v49->~__shared_weak_count + 1))(v49);
  v50 = (void **)v69[0];
  if (v69[0])
  {
    do
    {
      v55 = (void **)*v50;
      if (*((char *)v50 + 39) < 0)
        operator delete(v50[2]);
      operator delete(v50);
      v50 = v55;
    }
    while (v55);
  }
  v51 = v68[0];
  v68[0] = 0;
  if (v51)
    operator delete(v51);
  v52 = v71;
  if (v71)
  {
    v53 = v72;
    v54 = v71;
    if (v72 != v71)
    {
      do
      {
        v56 = (std::__shared_weak_count *)*((_QWORD *)v53 - 1);
        if (v56)
        {
          v57 = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v53 -= 16;
      }
      while (v53 != v52);
      v54 = v71;
    }
    v72 = v52;
    operator delete(v54);
  }
}

void sub_191124E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  v28 = a15;
  a15 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = a18;
  a18 = 0;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a26);
    std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v26 - 136));
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a26);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v26 - 136));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<MIL::IROperation>>::vector[abi:ne180100](_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_191124FF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<MIL::UnknownLocation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::UnknownLocation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000191A8C4D0)
    return a1 + 24;
  if (((v3 & 0x8000000191A8C4D0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000191A8C4D0))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000191A8C4D0 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

float Espresso::AOT::DTrees::gatherCpuFp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherCpuIp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherCpuJp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherCpuKp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherCpuGp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherCpuHp()
{
  return 20.0;
}

float Espresso::AOT::DTrees::gatherGpuFp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherGpuIp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherGpuJp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherGpuKp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherGpuGp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherGpuHp()
{
  return 25.0;
}

float Espresso::AOT::DTrees::gatherCpuCp()
{
  return 8.0;
}

float Espresso::AOT::DTrees::gatherCpuDp()
{
  return 8.0;
}

float Espresso::AOT::DTrees::gatherCpuEp()
{
  return 8.0;
}

float Espresso::AOT::DTrees::gatherGpuCp()
{
  return 14.0;
}

float Espresso::AOT::DTrees::gatherGpuDp()
{
  return 14.0;
}

float Espresso::AOT::DTrees::gatherGpuEp()
{
  return 14.0;
}

_QWORD *Espresso::AOT::AbstractSegmenter::AbstractSegmenter(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  result = Espresso::AOT::AbstractMILPass::AbstractMILPass(a1);
  v4 = *a2;
  *a2 = 0;
  *result = off_1E2DA04D0;
  result[1] = v4;
  result[2] = a2[1];
  a2[1] = 0;
  v7 = a2[2];
  v6 = a2 + 2;
  v5 = v7;
  result[3] = v7;
  v8 = v6[1];
  result[4] = v8;
  *((_DWORD *)result + 10) = *((_DWORD *)v6 + 4);
  if (v8)
  {
    v9 = *(_QWORD *)(v5 + 8);
    v10 = result[2];
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v9 %= v10;
    }
    else
    {
      v9 &= v10 - 1;
    }
    *(_QWORD *)(v4 + 8 * v9) = result + 3;
    *v6 = 0;
    v6[1] = 0;
  }
  return result;
}

void Espresso::AOT::AbstractSegmenter::~AbstractSegmenter(Espresso::AOT::AbstractSegmenter *this)
{
  *(_QWORD *)this = off_1E2DA04D0;
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::~__hash_table((uint64_t)this + 8);
  Espresso::AOT::AbstractMILPass::~AbstractMILPass(this);
}

Espresso::AOT::GroupTagger *Espresso::AOT::GroupTagger::GroupTagger(Espresso::AOT::GroupTagger *this, MIL::Builder::BlockBuilder *a2)
{
  unint64_t *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  char *v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  int v38;
  MIL::IRValue *v39;
  std::__shared_weak_count *v40;
  void *v41[2];
  void *__p[2];
  int v43;
  void *v44;
  char *v45;

  MIL::Builder::BlockBuilder::GetContext(a2);
  if (v41[1])
  {
    v4 = (unint64_t *)((char *)v41[1] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      (*(void (**)(void *))(*(_QWORD *)v41[1] + 16))(v41[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v41[1]);
    }
  }
  *(void **)this = v41[0];
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  strcpy((char *)this + 104, "groupId");
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 127) = 7;
  MIL::Builder::BlockBuilder::GetOperations(a2);
  v6 = (char *)v44;
  v7 = v45;
  if (v44 != v45)
  {
    while (1)
    {
      *(_OWORD *)v41 = 0u;
      *(_OWORD *)__p = 0u;
      v43 = 1065353216;
      MIL::Builder::OperationBuilder::TryGetAttribute();
      if (v39)
      {
        E5Common::Utils::MILDictToCpp<unsigned int,unsigned long long>(v39, (uint64_t)&v34);
        if (__p[1])
        {
          v8 = __p[0];
          if (__p[0])
          {
            do
            {
              v9 = (_QWORD *)*v8;
              operator delete(v8);
              v8 = v9;
            }
            while (v9);
          }
          __p[0] = 0;
          v10 = (char *)v41[1];
          if (v41[1])
          {
            v11 = 0;
            do
              *((_QWORD *)v41[0] + (_QWORD)v11++) = 0;
            while (v10 != v11);
          }
          __p[1] = 0;
        }
        v12 = v34;
        v34 = 0;
        v13 = v41[0];
        v41[0] = v12;
        if (v13)
          operator delete(v13);
        v15 = v35;
        v14 = v36;
        v35 = 0;
        __p[0] = v36;
        __p[1] = v37;
        v43 = v38;
        v41[1] = (void *)v15;
        if (v37)
        {
          v16 = v36[1];
          if ((v15 & (v15 - 1)) != 0)
          {
            if (v16 >= v15)
              v16 %= v15;
          }
          else
          {
            v16 &= v15 - 1;
          }
          *((_QWORD *)v41[0] + v16) = __p;
          v36 = 0;
          v37 = 0;
        }
        else if (v36)
        {
          do
          {
            v17 = (_QWORD *)*v14;
            operator delete(v14);
            v14 = v17;
          }
          while (v17);
        }
        v18 = v34;
        v34 = 0;
        if (v18)
          operator delete(v18);
        v34 = v6;
        v19 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)this + 16, (uint64_t *)v6, (uint64_t)&std::piecewise_construct, (_QWORD **)&v34);
        if (v19 + 4 != v41)
        {
          *((_DWORD *)v19 + 16) = v43;
          std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned int,unsigned long long>,void *> *>>(v19 + 4, (uint64_t *)__p[0], 0);
        }
      }
      v20 = v40;
      if (!v40)
        goto LABEL_36;
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        v23 = __p[0];
        if (__p[0])
        {
          do
          {
LABEL_41:
            v24 = v23[3];
            v34 = v23 + 3;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)this + 56, v23 + 3, (uint64_t)&std::piecewise_construct, (_QWORD **)&v34)[3] = v24;
            if (*((_QWORD *)this + 12) <= v23[3])
              *((_QWORD *)this + 12) = v23[3] + 1;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
          v25 = __p[0];
          if (__p[0])
          {
            do
            {
              v26 = (_QWORD *)*v25;
              operator delete(v25);
              v25 = v26;
            }
            while (v26);
          }
        }
      }
      else
      {
LABEL_36:
        v23 = __p[0];
        if (__p[0])
          goto LABEL_41;
      }
      v27 = v41[0];
      v41[0] = 0;
      if (v27)
        operator delete(v27);
      v6 += 16;
      if (v6 == v7)
      {
        v6 = (char *)v44;
        break;
      }
    }
  }
  if (v6)
  {
    v28 = v45;
    v29 = v6;
    if (v45 != v6)
    {
      do
      {
        v30 = (std::__shared_weak_count *)*((_QWORD *)v28 - 1);
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v28 -= 16;
      }
      while (v28 != v6);
      v29 = v44;
    }
    v45 = v6;
    operator delete(v29);
  }
  return this;
}

void sub_1911255C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if (*(char *)(v11 + 127) < 0)
    operator delete(*v13);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v12);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

uint64_t E5Common::Utils::MILDictToCpp<unsigned int,unsigned long long>@<X0>(MIL::IRValue *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::IRDictionaryValue *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v3 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(a1);
  v4 = MIL::IRDictionaryValue::begin(v3);
  result = MIL::IRDictionaryValue::end(v3);
  for (i = result; v4 != i; v4 = *(_QWORD *)v4)
  {
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 32));
    v7 = MIL::IRValue::GetScalar<unsigned long long>();
    MIL::IRValue::AsTensor(*(MIL::IRValue **)(v4 + 16));
    v8 = MIL::IRValue::GetScalar<unsigned int>();
    v9 = &v8;
    result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a2, &v8, (uint64_t)&std::piecewise_construct, &v9);
    *(_QWORD *)(result + 24) = v7;
  }
  return result;
}

void sub_1911256E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1911256F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191125708(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19112571C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191125730(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::GroupTagger::FindRootGroup(int8x8_t *this, unint64_t a2)
{
  int8x8_t *v3;
  _QWORD *v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  unint64_t *v15;

  v3 = this + 7;
  do
  {
    v14 = a2;
    v5 = this[8];
    if (!*(_QWORD *)&v5)
      goto LABEL_25;
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a2;
      if (a2 >= *(_QWORD *)&v5)
        v7 = a2 % *(_QWORD *)&v5;
    }
    else
    {
      v7 = (*(_QWORD *)&v5 - 1) & a2;
    }
    v8 = *(_QWORD **)(*(_QWORD *)v3 + 8 * v7);
    if (!v8 || (v9 = (_QWORD *)*v8) == 0)
LABEL_25:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Invalid group id %lu", &v14);
    if (v6.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v5 - 1;
      while (1)
      {
        v12 = v9[1];
        if (v12 == a2)
        {
          if (v9[2] == a2)
            goto LABEL_2;
        }
        else if ((v12 & v10) != v7)
        {
          goto LABEL_25;
        }
        v9 = (_QWORD *)*v9;
        if (!v9)
          goto LABEL_25;
      }
    }
    while (1)
    {
      v11 = v9[1];
      if (v11 == a2)
        break;
      if (v11 >= *(_QWORD *)&v5)
        v11 %= *(_QWORD *)&v5;
      if (v11 != v7)
        goto LABEL_25;
LABEL_13:
      v9 = (_QWORD *)*v9;
      if (!v9)
        goto LABEL_25;
    }
    if (v9[2] != a2)
      goto LABEL_13;
LABEL_2:
    v15 = &v14;
    v4 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v3, &v14, (uint64_t)&std::piecewise_construct, &v15);
    a2 = v4[3];
  }
  while (a2 != v14);
  return v4[3];
}

void Espresso::AOT::GroupTagger::AssignGroupId(_QWORD *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v8;
  unsigned int *v9[3];

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v8 = (unsigned int *)operator new(4uLL);
    *v8 = a3;
    v9[1] = v8 + 1;
    v9[2] = v8 + 1;
    v9[0] = v8;
    Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a1, 0, ((unint64_t)(v4 - v3) >> 4) - 1, a2, v9);
    operator delete(v8);
  }
}

void sub_19112592C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(_QWORD *result, int a2, int a3, _QWORD *a4, unsigned int **a5)
{
  unsigned int *v5;
  unsigned int *v6;
  int8x8_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int8x8_t v28;
  uint8x8_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t *v43;

  v6 = *a5;
  v5 = a5[1];
  if (*a5 == v5)
    return result;
  v7 = (int8x8_t *)result;
  v8 = result + 12;
  v9 = result + 7;
  if (a2 > a3)
  {
    v10 = *v8;
    do
    {
      v43 = (unint64_t *)v8;
      result = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v9, (unint64_t *)v8, (uint64_t)&std::piecewise_construct, &v43);
      result[3] = v10;
      v10 = *v8 + 1;
      *v8 = v10;
      ++v6;
    }
    while (v6 != v5);
    return result;
  }
  v37 = a2;
  v38 = (uint64_t)(result + 2);
  v11 = a3 + 1;
  v12 = *v8;
  v36 = a5[1];
  while (2)
  {
    v43 = (unint64_t *)v8;
    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v9, (unint64_t *)v8, (uint64_t)&std::piecewise_construct, &v43)[3] = v12;
    v13 = v37;
    while (2)
    {
      v41 = *v6;
      v43 = (unint64_t *)(*a4 + 16 * v13);
      v16 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(v38, (uint64_t *)v43, (uint64_t)&std::piecewise_construct, &v43);
      v17 = v16 + 4;
      v18 = v16[5];
      if (!v18)
        goto LABEL_10;
      v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] > 1uLL)
      {
        v20 = v41;
        if (v18 <= v41)
          v20 = v41 % v18;
      }
      else
      {
        v20 = ((_DWORD)v18 - 1) & v41;
      }
      v21 = *(uint64_t ***)(*v17 + 8 * v20);
      if (!v21)
        goto LABEL_10;
      v22 = *v21;
      if (!v22)
        goto LABEL_10;
      if (v19.u32[0] < 2uLL)
      {
        v23 = v18 - 1;
        while (1)
        {
          v25 = v22[1];
          if (v25 == v41)
          {
            if (*((_DWORD *)v22 + 4) == v41)
              goto LABEL_32;
          }
          else if ((v25 & v23) != v20)
          {
            goto LABEL_10;
          }
          v22 = (uint64_t *)*v22;
          if (!v22)
            goto LABEL_10;
        }
      }
      while (1)
      {
        v24 = v22[1];
        if (v24 == v41)
          break;
        if (v24 >= v18)
          v24 %= v18;
        if (v24 != v20)
          goto LABEL_10;
LABEL_21:
        v22 = (uint64_t *)*v22;
        if (!v22)
          goto LABEL_10;
      }
      if (*((_DWORD *)v22 + 4) != v41)
        goto LABEL_21;
LABEL_32:
      v40 = 0;
      v43 = (unint64_t *)&v41;
      v26 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)(v16 + 4), &v41, (uint64_t)&std::piecewise_construct, (_DWORD **)&v43)[3];
      while (2)
      {
        v42 = v26;
        v28 = v7[8];
        if (!*(_QWORD *)&v28)
          goto LABEL_55;
        v29 = (uint8x8_t)vcnt_s8(v28);
        v29.i16[0] = vaddlv_u8(v29);
        if (v29.u32[0] > 1uLL)
        {
          v30 = v26;
          if (v26 >= *(_QWORD *)&v28)
            v30 = v26 % *(_QWORD *)&v28;
        }
        else
        {
          v30 = (*(_QWORD *)&v28 - 1) & v26;
        }
        v31 = *(_QWORD **)(*v9 + 8 * v30);
        if (!v31 || (v32 = (_QWORD *)*v31) == 0)
LABEL_55:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Invalid group id %lu", &v42);
        if (v29.u32[0] < 2uLL)
        {
          v33 = *(_QWORD *)&v28 - 1;
          while (1)
          {
            v35 = v32[1];
            if (v35 == v26)
            {
              if (v32[2] == v26)
                goto LABEL_33;
            }
            else if ((v35 & v33) != v30)
            {
              goto LABEL_55;
            }
            v32 = (_QWORD *)*v32;
            if (!v32)
              goto LABEL_55;
          }
        }
        while (2)
        {
          v34 = v32[1];
          if (v34 != v26)
          {
            if (v34 >= *(_QWORD *)&v28)
              v34 %= *(_QWORD *)&v28;
            if (v34 != v30)
              goto LABEL_55;
            goto LABEL_44;
          }
          if (v32[2] != v26)
          {
LABEL_44:
            v32 = (_QWORD *)*v32;
            if (!v32)
              goto LABEL_55;
            continue;
          }
          break;
        }
LABEL_33:
        v43 = &v42;
        v27 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v9, &v42, (uint64_t)&std::piecewise_construct, &v43);
        v26 = v27[3];
        if (v26 != v42)
          continue;
        break;
      }
      v40 = v27[3];
      v14 = *v8;
      v43 = &v40;
      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v9, &v40, (uint64_t)&std::piecewise_construct, &v43)[3] = v14;
LABEL_10:
      v15 = *v8;
      v43 = (unint64_t *)&v41;
      result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v17, &v41, (uint64_t)&std::piecewise_construct, (_DWORD **)&v43);
      result[3] = v15;
      if (v11 != (_DWORD)++v13)
        continue;
      break;
    }
    v12 = *v8 + 1;
    *v8 = v12;
    if (++v6 != v36)
      continue;
    return result;
  }
}

_QWORD *Espresso::AOT::GroupTagger::AssignGroupIds(_QWORD *result, _QWORD *a2, unsigned int **a3)
{
  uint64_t v3;

  v3 = a2[1];
  if (*a2 != v3)
    return Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(result, 0, ((unint64_t)(v3 - *a2) >> 4) - 1, a2, a3);
  return result;
}

void Espresso::AOT::GroupTagger::MoveOpsAndAssignGroupIdsForInterval(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, unsigned int **a7)
{
  MIL::Builder::BlockBuilder **v9;
  MIL::Builder::BlockBuilder *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  MIL::Builder::OperationBuilder **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t Operator;
  uint64_t v18;
  MIL::IRMemoryEffect *v19;
  uint64_t v20;
  MIL::IRMemoryEffect *v21;
  MIL::Builder::Variable *ArgumentForParameter;
  void *Name;
  uint64_t *v24;
  uint64_t *v25;
  MIL::Builder::OperationBuilder *v26;
  unint64_t v27;
  MIL::Builder::OperationBuilder **v28;
  MIL::Builder::OperationBuilder ***v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  MIL::Builder::OperationBuilder **v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  MIL::Builder::OperationBuilder **v41;
  char *v42;
  MIL::Builder::OperationBuilder **v43;
  uint64_t v44;
  __int128 v45;
  MIL::Builder::OperationBuilder *v46;
  uint64_t *v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  int v59;
  MIL::Builder::OperationBuilder *v60;
  uint64_t v61;
  MIL::IRMemoryEffect *v62;
  uint64_t v63;
  MIL::IRMemoryEffect *v64;
  uint64_t v65;
  unint64_t v66;
  MIL::Builder::OperationBuilder *v67;
  uint64_t v68;
  MIL::IRMemoryEffect *v69;
  uint64_t v70;
  MIL::IRMemoryEffect *v71;
  _QWORD *v72;
  char *v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int64x2_t *v80;
  int64x2_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  int64x2_t v85;
  int64x2_t *v86;
  uint64_t v87;
  uint64_t v88;
  int64x2_t *v89;
  int64x2_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  int64x2_t v95;
  int64x2_t *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t i;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  char *v110;
  void *v111;
  _QWORD *v112;
  void *v113;
  char *v114;
  char *v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  char *v120;
  char *v121;
  void *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint8x8_t v131;
  unint64_t v132;
  uint8x8_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  int64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _BYTE *v152;
  unint64_t *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  _OWORD *v164;
  char *v165;
  uint64_t v166;
  __int128 v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t *v174;
  unint64_t v175;
  _QWORD *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint8x8_t v180;
  unint64_t v181;
  uint64_t ***v182;
  uint64_t **v183;
  unint64_t v184;
  uint64_t *v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  int v190;
  char *v191;
  char *v192;
  unint64_t v193;
  uint64_t *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t *v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  unint64_t *v202;
  unint64_t v203;
  char *v204;
  int64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  _OWORD *v213;
  char *v214;
  uint64_t v215;
  __int128 v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  MIL::Builder::BlockBuilder **v223;
  _QWORD *v226;
  _QWORD *v227;
  std::__shared_weak_count *v228;
  void *v229[2];
  void *v230[2];
  int v231;
  void *v232;
  char *v233;
  char *v234;
  void *v235;
  char *v236;
  unint64_t v237;
  void *v238;
  char *v239;
  unint64_t v240;
  void *__p[2];
  char v242;
  uint64_t *v243;
  uint64_t *v244;
  __int128 v245;
  __int128 v246;
  int v247;

  v9 = (MIL::Builder::BlockBuilder **)a4;
  v238 = 0;
  v239 = 0;
  v240 = 0;
  v235 = 0;
  v236 = 0;
  v237 = 0;
  v232 = 0;
  v233 = 0;
  v234 = 0;
  v10 = *(MIL::Builder::BlockBuilder **)a4;
  v11 = *(std::__shared_weak_count **)(a4 + 8);
  v228 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  *(_OWORD *)v229 = 0u;
  *(_OWORD *)v230 = 0u;
  v231 = 1065353216;
  v245 = 0u;
  v246 = 0u;
  v247 = 1065353216;
  MIL::Builder::BlockBuilder::GetOperations(v10);
  v14 = (MIL::Builder::OperationBuilder **)v243;
  v15 = v244;
  v226 = a5;
  v227 = a6;
  v223 = v9;
  if (v243 != v244)
  {
    while (1)
    {
      Operator = MIL::Builder::OperationBuilder::GetOperator(*v14);
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 240))(Operator))
        goto LABEL_8;
      v18 = MIL::Builder::OperationBuilder::GetOperator(*v14);
      v19 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 240))(v18);
      if (!MIL::IRMemoryEffect::TryAsStateReadEffect(v19))
      {
        v20 = MIL::Builder::OperationBuilder::GetOperator(*v14);
        v21 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 240))(v20);
        if (!MIL::IRMemoryEffect::TryAsStateWriteEffect(v21))
          goto LABEL_8;
      }
      v242 = 5;
      strcpy((char *)__p, "input");
      ArgumentForParameter = (MIL::Builder::Variable *)MIL::Builder::OperationBuilder::GetArgumentForParameter();
      if (v242 < 0)
        operator delete(__p[0]);
      Name = (void *)MIL::Builder::Variable::TryGetName(ArgumentForParameter);
      if (!Name)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("State input needs to have a name.");
      __p[0] = Name;
      v24 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v245, (uint64_t)Name, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      v25 = v24;
      v26 = *v14;
      v28 = (MIL::Builder::OperationBuilder **)v24[6];
      v27 = v24[7];
      if ((unint64_t)v28 >= v27)
        break;
      *v28 = v26;
      v16 = (uint64_t)(v28 + 1);
LABEL_7:
      v25[6] = v16;
LABEL_8:
      v14 += 2;
      if (v14 == (MIL::Builder::OperationBuilder **)v15)
      {
        v14 = (MIL::Builder::OperationBuilder **)v243;
        goto LABEL_38;
      }
    }
    v29 = (MIL::Builder::OperationBuilder ***)(v24 + 5);
    v30 = (char *)v24[5];
    v31 = ((char *)v28 - v30) >> 3;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v33 = v27 - (_QWORD)v30;
    if (v33 >> 2 > v32)
      v32 = v33 >> 2;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v35 = v34;
      v36 = (char *)operator new(8 * v34);
      v34 = v35;
      v37 = (MIL::Builder::OperationBuilder **)&v36[8 * v31];
      *v37 = v26;
      v16 = (uint64_t)(v37 + 1);
      if (v28 == (MIL::Builder::OperationBuilder **)v30)
        goto LABEL_35;
    }
    else
    {
      v36 = 0;
      v37 = (MIL::Builder::OperationBuilder **)(8 * v31);
      *(_QWORD *)(8 * v31) = v26;
      v16 = 8 * v31 + 8;
      if (v28 == (MIL::Builder::OperationBuilder **)v30)
      {
LABEL_35:
        v25[5] = (uint64_t)v37;
        v25[6] = v16;
        v25[7] = (uint64_t)&v36[8 * v34];
        a5 = v226;
        a6 = v227;
        v9 = v223;
        if (v28)
          operator delete(v28);
        goto LABEL_7;
      }
    }
    v38 = (char *)(v28 - 1) - v30;
    if (v38 < 0x58)
      goto LABEL_358;
    if ((unint64_t)(v30 - v36) < 0x20)
      goto LABEL_358;
    v39 = (v38 >> 3) + 1;
    v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
    v41 = &v28[v40 / 0xFFFFFFFFFFFFFFF8];
    v37 = (MIL::Builder::OperationBuilder **)((char *)v37 - v40);
    v42 = &v36[8 * v31 - 16];
    v43 = v28 - 2;
    v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *(_OWORD *)v43;
      *((_OWORD *)v42 - 1) = *((_OWORD *)v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 4;
      v44 -= 4;
    }
    while (v44);
    v28 = v41;
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_358:
      do
      {
        v46 = *--v28;
        *--v37 = v46;
      }
      while (v28 != (MIL::Builder::OperationBuilder **)v30);
    }
    v28 = *v29;
    goto LABEL_35;
  }
LABEL_38:
  if (v14)
  {
    v47 = v244;
    v48 = (uint64_t *)v14;
    if (v244 != (uint64_t *)v14)
    {
      do
      {
        v49 = (std::__shared_weak_count *)*(v47 - 1);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v47 -= 2;
      }
      while (v47 != (uint64_t *)v14);
      v48 = v243;
    }
    v244 = (uint64_t *)v14;
    operator delete(v48);
  }
  v52 = (_QWORD *)v246;
  if ((_QWORD)v246)
  {
    while (1)
    {
      v53 = v52[5];
      v54 = v52[6];
      if (v54 != v53)
        break;
LABEL_51:
      v52 = (_QWORD *)*v52;
      if (!v52)
      {
        v73 = (char *)v246;
        a5 = v226;
        a6 = v227;
        v9 = v223;
        if ((_QWORD)v246)
        {
          do
          {
            v110 = *(char **)v73;
            v111 = (void *)*((_QWORD *)v73 + 5);
            if (v111)
            {
              *((_QWORD *)v73 + 6) = v111;
              operator delete(v111);
            }
            if (v73[39] < 0)
              operator delete(*((void **)v73 + 2));
            operator delete(v73);
            v73 = v110;
          }
          while (v110);
        }
        goto LABEL_73;
      }
    }
    v55 = 0;
    v56 = 1;
    while (1)
    {
      __p[0] = 0;
      __p[0] = *(void **)(v53 + 8 * v55);
      if ((int)v55 < 1)
      {
        v57 = 0;
        if (++v55 < (v54 - v53) >> 3)
          goto LABEL_62;
      }
      else
      {
        v57 = 0;
        v58 = v55 - 1;
        v59 = v56;
        do
        {
          v60 = *(MIL::Builder::OperationBuilder **)(v52[5] + 8 * v58);
          v61 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)__p[0]);
          v62 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 240))(v61);
          if (!MIL::IRMemoryEffect::TryAsStateReadEffect(v62)
            || (v63 = MIL::Builder::OperationBuilder::GetOperator(v60),
                v64 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 240))(v63),
                !MIL::IRMemoryEffect::TryAsStateReadEffect(v64)))
          {
            v57 = *(_QWORD *)(v52[5] + 8 * v58);
          }
          --v59;
          --v58;
        }
        while (v59 > 1);
        v53 = v52[5];
        if (++v55 < (v52[6] - v53) >> 3)
        {
LABEL_62:
          v65 = 0;
          v66 = v55;
          do
          {
            while (1)
            {
              v67 = *(MIL::Builder::OperationBuilder **)(v53 + 8 * v66);
              v68 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)__p[0]);
              v69 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v68 + 240))(v68);
              if (MIL::IRMemoryEffect::TryAsStateReadEffect(v69))
              {
                v70 = MIL::Builder::OperationBuilder::GetOperator(v67);
                v71 = (MIL::IRMemoryEffect *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 240))(v70);
                if (MIL::IRMemoryEffect::TryAsStateReadEffect(v71))
                  break;
              }
              v53 = v52[5];
              v65 = *(_QWORD *)(v53 + 8 * v66++);
              if (v66 >= (v52[6] - v53) >> 3)
                goto LABEL_70;
            }
            v53 = v52[5];
            ++v66;
          }
          while (v66 < (v52[6] - v53) >> 3);
          goto LABEL_70;
        }
      }
      v65 = 0;
LABEL_70:
      v243 = (uint64_t *)__p;
      v72 = std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder * const&>,std::tuple<>>((uint64_t)v229, (uint64_t *)__p, (uint64_t)&std::piecewise_construct, &v243);
      v72[3] = v57;
      v72[4] = v65;
      v53 = v52[5];
      v54 = v52[6];
      ++v56;
      if (v55 >= (v54 - v53) >> 3)
        goto LABEL_51;
    }
  }
LABEL_73:
  v74 = (void *)v245;
  *(_QWORD *)&v245 = 0;
  if (v74)
    operator delete(v74);
  if (!v228)
    goto LABEL_79;
  v75 = (unint64_t *)&v228->__shared_owners_;
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v76 - 1, v75));
  if (!v76)
  {
    ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
    std::__shared_weak_count::__release_weak(v228);
    v77 = (int)a2;
    v78 = (int)a3;
    if (a2 > a3)
      goto LABEL_80;
  }
  else
  {
LABEL_79:
    v77 = (int)a2;
    v78 = (int)a3;
    if (a2 > a3)
      goto LABEL_80;
  }
  v126 = v77;
  while (2)
  {
    MIL::Builder::BlockBuilder::GetOperation(*v9);
    v128 = 0x9DDFEA08EB382D69 * (((8 * v245) + 8) ^ DWORD1(v245));
    v129 = 0x9DDFEA08EB382D69 * (DWORD1(v245) ^ (v128 >> 47) ^ v128);
    v130 = 0x9DDFEA08EB382D69 * (v129 ^ (v129 >> 47));
    if (!v127)
    {
      if (!v229[1])
        goto LABEL_310;
      v133 = (uint8x8_t)vcnt_s8((int8x8_t)v229[1]);
      v133.i16[0] = vaddlv_u8(v133);
      if (v133.u32[0] > 1uLL)
      {
        v134 = v130;
        if ((void *)v130 >= v229[1])
          v134 = v130 % (unint64_t)v229[1];
      }
      else
      {
        v134 = v130 & ((unint64_t)v229[1] - 1);
      }
      v155 = (_QWORD *)*((_QWORD *)v229[0] + v134);
      if (!v155)
        goto LABEL_310;
      v156 = (_QWORD *)*v155;
      if (!*v155)
        goto LABEL_310;
      v157 = (unint64_t)v229[1] - 1;
      if (v133.u32[0] < 2uLL)
      {
        while (1)
        {
          v158 = v156[1];
          if (v130 == v158)
          {
            if (v156[2] == (_QWORD)v245)
              goto LABEL_228;
          }
          else if ((v158 & v157) != v134)
          {
            goto LABEL_310;
          }
          v156 = (_QWORD *)*v156;
          if (!v156)
            goto LABEL_310;
        }
      }
      while (1)
      {
        v159 = v156[1];
        if (v130 == v159)
        {
          if (v156[2] == (_QWORD)v245)
          {
LABEL_228:
            v243 = 0;
            if (v133.u32[0] > 1uLL)
            {
              v170 = v130;
              if ((void *)v130 >= v229[1])
                v170 = v130 % (unint64_t)v229[1];
            }
            else
            {
              v170 = v130 & v157;
            }
            v186 = (_QWORD *)*((_QWORD *)v229[0] + v170);
            if (!v186 || (v187 = (_QWORD *)*v186) == 0)
LABEL_346:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            if (v133.u32[0] < 2uLL)
            {
              while (1)
              {
                v188 = v187[1];
                if (v188 == v130)
                {
                  if (v187[2] == (_QWORD)v245)
                    goto LABEL_284;
                }
                else if ((v188 & v157) != v170)
                {
                  goto LABEL_346;
                }
                v187 = (_QWORD *)*v187;
                if (!v187)
                  goto LABEL_346;
              }
            }
            while (1)
            {
              v193 = v187[1];
              if (v193 == v130)
              {
                if (v187[2] == (_QWORD)v245)
                {
LABEL_284:
                  v243 = (uint64_t *)v187[3];
                  if (v243)
                  {
                    v189 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v227, (uint64_t *)&v243);
                    if (!v189)
                      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                    v190 = *((_DWORD *)v189 + 6);
                    if (v190 == (_DWORD)a2)
                      goto LABEL_338;
                    if (v190 > (int)a2)
                    {
                      v191 = (char *)v238;
                      v192 = v239;
                      if (v238 == v239)
                        goto LABEL_338;
                      do
                      {
                        v194 = *(uint64_t **)v191;
                        v195 = (std::__shared_weak_count *)*((_QWORD *)v191 + 1);
                        if (v195)
                        {
                          v196 = (unint64_t *)&v195->__shared_owners_;
                          do
                            v197 = __ldxr(v196);
                          while (__stxr(v197 + 1, v196));
                          v198 = v243;
                          do
                            v199 = __ldaxr(v196);
                          while (__stlxr(v199 - 1, v196));
                          if (!v199)
                          {
                            ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                            std::__shared_weak_count::__release_weak(v195);
                          }
                          if (v194 == v198)
                            goto LABEL_309;
                        }
                        else if (v194 == v243)
                        {
                          goto LABEL_309;
                        }
                        v191 += 16;
                      }
                      while (v191 != v192);
                      v191 = v192;
LABEL_309:
                      if (v191 == v239)
                        goto LABEL_338;
                    }
                  }
LABEL_310:
                  v200 = v239;
                  if ((unint64_t)v239 >= v240)
                  {
                    v204 = (char *)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v238, &v245);
                  }
                  else
                  {
                    *(_QWORD *)v239 = v245;
                    v201 = *((_QWORD *)&v245 + 1);
                    *((_QWORD *)v200 + 1) = *((_QWORD *)&v245 + 1);
                    if (v201)
                    {
                      v202 = (unint64_t *)(v201 + 8);
                      do
                        v203 = __ldxr(v202);
                      while (__stxr(v203 + 1, v202));
                    }
                    v204 = v200 + 16;
                  }
                  v239 = v204;
                  v145 = v233;
                  if (v233 < v234)
                  {
LABEL_317:
                    *(_QWORD *)v145 = v126;
                    v154 = (uint64_t)(v145 + 8);
                    goto LABEL_337;
                  }
                  v146 = (char *)v232;
                  v205 = v233 - (_BYTE *)v232;
                  v206 = (v233 - (_BYTE *)v232) >> 3;
                  v207 = v206 + 1;
                  if (!((unint64_t)(v206 + 1) >> 61))
                  {
                    v208 = v234 - (_BYTE *)v232;
                    if ((v234 - (_BYTE *)v232) >> 2 > v207)
                      v207 = v208 >> 2;
                    if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFF8)
                      v151 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v151 = v207;
                    if (!v151)
                    {
                      v152 = 0;
                      v153 = (unint64_t *)(8 * v206);
                      *(_QWORD *)(8 * v206) = v126;
                      v154 = 8 * v206 + 8;
                      if (v145 == v146)
                        goto LABEL_335;
                      goto LABEL_329;
                    }
                    if (!(v151 >> 61))
                    {
                      v152 = operator new(8 * v151);
                      v153 = (unint64_t *)&v152[8 * v206];
                      *v153 = v126;
                      v154 = (uint64_t)(v153 + 1);
                      if (v145 == v146)
                      {
LABEL_335:
                        v232 = v153;
                        v233 = (char *)v154;
                        v234 = &v152[8 * v151];
                        if (v146)
                          operator delete(v146);
LABEL_337:
                        v233 = (char *)v154;
LABEL_338:
                        v9 = v223;
                        goto LABEL_339;
                      }
LABEL_329:
                      v209 = v145 - 8 - v146;
                      if (v209 < 0x58)
                        goto LABEL_359;
                      if ((unint64_t)(v145 - &v152[v205]) < 0x20)
                        goto LABEL_359;
                      v210 = (v209 >> 3) + 1;
                      v211 = 8 * (v210 & 0x3FFFFFFFFFFFFFFCLL);
                      v212 = &v145[-v211];
                      v153 = (unint64_t *)((char *)v153 - v211);
                      v213 = &v152[8 * v206 - 16];
                      v214 = v145 - 16;
                      v215 = v210 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v216 = *(_OWORD *)v214;
                        *(v213 - 1) = *((_OWORD *)v214 - 1);
                        *v213 = v216;
                        v213 -= 2;
                        v214 -= 32;
                        v215 -= 4;
                      }
                      while (v215);
                      v145 = v212;
                      if (v210 != (v210 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_359:
                        do
                        {
                          v217 = *((_QWORD *)v145 - 1);
                          v145 -= 8;
                          *--v153 = v217;
                        }
                        while (v145 != v146);
                      }
                      goto LABEL_335;
                    }
LABEL_351:
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
LABEL_349:
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
              }
              else
              {
                if ((void *)v193 >= v229[1])
                  v193 %= (unint64_t)v229[1];
                if (v193 != v170)
                  goto LABEL_346;
              }
              v187 = (_QWORD *)*v187;
              if (!v187)
                goto LABEL_346;
            }
          }
        }
        else
        {
          if ((void *)v159 >= v229[1])
            v159 %= (unint64_t)v229[1];
          if (v159 != v134)
            goto LABEL_310;
        }
        v156 = (_QWORD *)*v156;
        if (!v156)
          goto LABEL_310;
      }
    }
    if (!v229[1])
      goto LABEL_183;
    v131 = (uint8x8_t)vcnt_s8((int8x8_t)v229[1]);
    v131.i16[0] = vaddlv_u8(v131);
    if (v131.u32[0] > 1uLL)
    {
      v132 = v130;
      if ((void *)v130 >= v229[1])
        v132 = v130 % (unint64_t)v229[1];
    }
    else
    {
      v132 = v130 & ((unint64_t)v229[1] - 1);
    }
    v135 = (_QWORD *)*((_QWORD *)v229[0] + v132);
    if (!v135 || (v136 = (_QWORD *)*v135) == 0)
    {
LABEL_183:
      v140 = v236;
      if ((unint64_t)v236 >= v237)
      {
        v144 = (char *)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v235, &v245);
      }
      else
      {
        *(_QWORD *)v236 = v245;
        v141 = *((_QWORD *)&v245 + 1);
        *((_QWORD *)v140 + 1) = *((_QWORD *)&v245 + 1);
        if (v141)
        {
          v142 = (unint64_t *)(v141 + 8);
          do
            v143 = __ldxr(v142);
          while (__stxr(v143 + 1, v142));
        }
        v144 = v140 + 16;
      }
      v236 = v144;
      v145 = v233;
      if (v233 < v234)
        goto LABEL_317;
      v146 = (char *)v232;
      v147 = v233 - (_BYTE *)v232;
      v148 = (v233 - (_BYTE *)v232) >> 3;
      v149 = v148 + 1;
      if (!((unint64_t)(v148 + 1) >> 61))
      {
        v150 = v234 - (_BYTE *)v232;
        if ((v234 - (_BYTE *)v232) >> 2 > v149)
          v149 = v150 >> 2;
        if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8)
          v151 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v151 = v149;
        if (v151)
        {
          if (v151 >> 61)
            goto LABEL_351;
          v152 = operator new(8 * v151);
          v153 = (unint64_t *)&v152[8 * v148];
          *v153 = v126;
          v154 = (uint64_t)(v153 + 1);
          if (v145 == v146)
            goto LABEL_335;
        }
        else
        {
          v152 = 0;
          v153 = (unint64_t *)(8 * v148);
          *(_QWORD *)(8 * v148) = v126;
          v154 = 8 * v148 + 8;
          if (v145 == v146)
            goto LABEL_335;
        }
        v160 = v145 - 8 - v146;
        if (v160 < 0x58)
          goto LABEL_360;
        if ((unint64_t)(v145 - &v152[v147]) < 0x20)
          goto LABEL_360;
        v161 = (v160 >> 3) + 1;
        v162 = 8 * (v161 & 0x3FFFFFFFFFFFFFFCLL);
        v163 = &v145[-v162];
        v153 = (unint64_t *)((char *)v153 - v162);
        v164 = &v152[8 * v148 - 16];
        v165 = v145 - 16;
        v166 = v161 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v167 = *(_OWORD *)v165;
          *(v164 - 1) = *((_OWORD *)v165 - 1);
          *v164 = v167;
          v164 -= 2;
          v165 -= 32;
          v166 -= 4;
        }
        while (v166);
        v145 = v163;
        if (v161 != (v161 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_360:
          do
          {
            v168 = *((_QWORD *)v145 - 1);
            v145 -= 8;
            *--v153 = v168;
          }
          while (v145 != v146);
        }
        goto LABEL_335;
      }
      goto LABEL_349;
    }
    v137 = (unint64_t)v229[1] - 1;
    if (v131.u32[0] < 2uLL)
    {
      while (1)
      {
        v138 = v136[1];
        if (v130 == v138)
        {
          if (v136[2] == (_QWORD)v245)
            goto LABEL_226;
        }
        else if ((v138 & v137) != v132)
        {
          goto LABEL_183;
        }
        v136 = (_QWORD *)*v136;
        if (!v136)
          goto LABEL_183;
      }
    }
    while (1)
    {
      v139 = v136[1];
      if (v130 == v139)
        break;
      if ((void *)v139 >= v229[1])
        v139 %= (unint64_t)v229[1];
      if (v139 != v132)
        goto LABEL_183;
LABEL_178:
      v136 = (_QWORD *)*v136;
      if (!v136)
        goto LABEL_183;
    }
    if (v136[2] != (_QWORD)v245)
      goto LABEL_178;
LABEL_226:
    v243 = 0;
    if (v131.u32[0] > 1uLL)
    {
      v169 = v130;
      if ((void *)v130 >= v229[1])
        v169 = v130 % (unint64_t)v229[1];
    }
    else
    {
      v169 = v130 & v137;
    }
    v171 = (_QWORD *)*((_QWORD *)v229[0] + v169);
    if (!v171 || (v172 = (_QWORD *)*v171) == 0)
LABEL_345:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v131.u32[0] < 2uLL)
    {
      while (1)
      {
        v173 = v172[1];
        if (v173 == v130)
        {
          if (v172[2] == (_QWORD)v245)
            goto LABEL_240;
        }
        else if ((v173 & v137) != v169)
        {
          goto LABEL_345;
        }
        v172 = (_QWORD *)*v172;
        if (!v172)
          goto LABEL_345;
      }
    }
    while (2)
    {
      v175 = v172[1];
      if (v175 != v130)
      {
        if ((void *)v175 >= v229[1])
          v175 %= (unint64_t)v229[1];
        if (v175 != v169)
          goto LABEL_345;
        goto LABEL_242;
      }
      if (v172[2] != (_QWORD)v245)
      {
LABEL_242:
        v172 = (_QWORD *)*v172;
        if (!v172)
          goto LABEL_345;
        continue;
      }
      break;
    }
LABEL_240:
    v174 = (uint64_t *)v172[4];
LABEL_249:
    v243 = v174;
    if (!v174)
      goto LABEL_183;
    v176 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v227, (uint64_t *)&v243);
    if (!v176)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (*((_DWORD *)v176 + 6) > (int)a3)
      goto LABEL_183;
    {
      if (!v229[1])
        goto LABEL_344;
      v177 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)v243) + 8) ^ ((unint64_t)v243 >> 32));
      v178 = 0x9DDFEA08EB382D69 * (((unint64_t)v243 >> 32) ^ (v177 >> 47) ^ v177);
      v179 = 0x9DDFEA08EB382D69 * (v178 ^ (v178 >> 47));
      v180 = (uint8x8_t)vcnt_s8((int8x8_t)v229[1]);
      v180.i16[0] = vaddlv_u8(v180);
      if (v180.u32[0] > 1uLL)
      {
        v181 = v179;
        if ((void *)v179 >= v229[1])
          v181 = v179 % (unint64_t)v229[1];
      }
      else
      {
        v181 = v179 & ((unint64_t)v229[1] - 1);
      }
      v182 = (uint64_t ***)*((_QWORD *)v229[0] + v181);
      if (!v182 || (v183 = *v182) == 0)
LABEL_344:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (v180.u32[0] < 2uLL)
      {
        while (1)
        {
          v185 = v183[1];
          if (v185 == (uint64_t *)v179)
          {
            if (v183[2] == v243)
              goto LABEL_248;
          }
          else if (((unint64_t)v185 & ((unint64_t)v229[1] - 1)) != v181)
          {
            goto LABEL_344;
          }
          v183 = (uint64_t **)*v183;
          if (!v183)
            goto LABEL_344;
        }
      }
      while (1)
      {
        v184 = (unint64_t)v183[1];
        if (v184 == v179)
        {
          if (v183[2] == v243)
          {
LABEL_248:
            v174 = v183[4];
            goto LABEL_249;
          }
        }
        else
        {
          if ((void *)v184 >= v229[1])
            v184 %= (unint64_t)v229[1];
          if (v184 != v181)
            goto LABEL_344;
        }
        v183 = (uint64_t **)*v183;
        if (!v183)
          goto LABEL_344;
      }
    }
LABEL_339:
    v218 = (std::__shared_weak_count *)*((_QWORD *)&v245 + 1);
    if (*((_QWORD *)&v245 + 1))
    {
      v219 = (unint64_t *)(*((_QWORD *)&v245 + 1) + 8);
      do
        v220 = __ldaxr(v219);
      while (__stlxr(v220 - 1, v219));
      if (!v220)
      {
        ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
        std::__shared_weak_count::__release_weak(v218);
      }
    }
    ++v126;
    a5 = v226;
    a6 = v227;
    if (v126 <= v78)
      continue;
    break;
  }
LABEL_80:
  if (v232 != v233)
  {
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
    MIL::Builder::BlockBuilder::RemoveOperations();
  }
  if (v238 != v239)
  {
    v245 = 0uLL;
    *(_QWORD *)&v246 = 0;
    v79 = v239 - (_BYTE *)v238;
    if (v239 - (_BYTE *)v238 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v80 = (int64x2_t *)operator new((unint64_t)v79 >> 1);
    v81 = v80;
    v82 = ((v79 >> 4) - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v83 = (unint64_t *)v80;
    if (v82 < 3)
      goto LABEL_361;
    v84 = v82 + 1;
    v83 = (unint64_t *)v80 + (v84 & 0x3FFFFFFFFFFFFFFCLL);
    v85 = vdupq_n_s64(v77);
    v86 = v80 + 1;
    v87 = v84 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v86[-1] = v85;
      *v86 = v85;
      v86 += 2;
      v87 -= 4;
    }
    while (v87);
    if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_361:
      do
        *v83++ = v77;
      while (v83 != (unint64_t *)((char *)v80 + 8 * (v79 >> 4)));
    }
    MIL::Builder::BlockBuilder::InsertOperations();
    LODWORD(a2) = ((unint64_t)v79 >> 4) + a2;
    operator delete(v81);
  }
  if (v235 != v236)
  {
    v88 = v236 - (_BYTE *)v235;
    v245 = 0uLL;
    *(_QWORD *)&v246 = 0;
    if (v236 - (_BYTE *)v235 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v89 = (int64x2_t *)operator new((unint64_t)v88 >> 1);
    v90 = v89;
    v91 = v78 - (v88 >> 4) + 1;
    v92 = ((v88 >> 4) - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v93 = (unint64_t *)v89;
    if (v92 < 3)
      goto LABEL_362;
    v94 = v92 + 1;
    v93 = (unint64_t *)v89 + (v94 & 0x3FFFFFFFFFFFFFFCLL);
    v95 = vdupq_n_s64(v91);
    v96 = v89 + 1;
    v97 = v94 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v96[-1] = v95;
      *v96 = v95;
      v96 += 2;
      v97 -= 4;
    }
    while (v97);
    if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_362:
      do
        *v93++ = v91;
      while (v93 != (unint64_t *)((char *)v89 + 8 * (v88 >> 4)));
    }
    MIL::Builder::BlockBuilder::InsertOperations();
    operator delete(v90);
    a3 = v78 - (v88 >> 4);
  }
  MIL::Builder::BlockBuilder::GetOperations(*v9);
  Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a1, a2, a3, &v245, a7);
  if (v227[3])
  {
    v98 = (_QWORD *)v227[2];
    if (v98)
    {
      do
      {
        v99 = (_QWORD *)*v98;
        operator delete(v98);
        v98 = v99;
      }
      while (v99);
    }
    v227[2] = 0;
    v100 = v227[1];
    if (v100)
    {
      for (i = 0; i != v100; ++i)
        *(_QWORD *)(*v227 + 8 * i) = 0;
    }
    v227[3] = 0;
  }
  v102 = (char *)*((_QWORD *)&v245 + 1);
  v103 = (char *)v245;
  if (*((_QWORD *)&v245 + 1) == (_QWORD)v245)
  {
    v103 = (char *)*((_QWORD *)&v245 + 1);
    if (*((_QWORD *)&v245 + 1))
      goto LABEL_109;
LABEL_126:
    v106 = v230[0];
    if (!v230[0])
      goto LABEL_128;
    goto LABEL_127;
  }
  v104 = 0;
  v105 = 0;
  do
  {
    __p[0] = *(void **)&v103[v104];
    v243 = (uint64_t *)__p;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::hash<MIL::Builder::OperationBuilder const*>,std::equal_to<MIL::Builder::OperationBuilder const*>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::equal_to<MIL::Builder::OperationBuilder const*>,std::hash<MIL::Builder::OperationBuilder const*>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder const*,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder const*&&>,std::tuple<>>((uint64_t)v227, (uint64_t *)__p, (uint64_t)&std::piecewise_construct, &v243)+ 6) = v105++;
    v102 = (char *)*((_QWORD *)&v245 + 1);
    v103 = (char *)v245;
    v104 += 16;
  }
  while (v105 < (uint64_t)(*((_QWORD *)&v245 + 1) - v245) >> 4);
  if (!(_QWORD)v245)
    goto LABEL_126;
LABEL_109:
  if (v102 == v103)
  {
    *((_QWORD *)&v245 + 1) = v103;
    operator delete(v102);
    v106 = v230[0];
    if (!v230[0])
      goto LABEL_128;
    do
    {
LABEL_127:
      v112 = (_QWORD *)*v106;
      operator delete(v106);
      v106 = v112;
    }
    while (v112);
  }
  else
  {
    do
    {
      v107 = (std::__shared_weak_count *)*((_QWORD *)v102 - 1);
      if (v107)
      {
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v102 -= 16;
    }
    while (v102 != v103);
    *((_QWORD *)&v245 + 1) = v103;
    operator delete((void *)v245);
    v106 = v230[0];
    if (v230[0])
      goto LABEL_127;
  }
LABEL_128:
  v113 = v229[0];
  v229[0] = 0;
  if (v113)
    operator delete(v113);
  if (v232)
  {
    v233 = (char *)v232;
    operator delete(v232);
  }
  v114 = (char *)v235;
  if (v235)
  {
    v115 = v236;
    v116 = v235;
    if (v236 != v235)
    {
      do
      {
        v117 = (std::__shared_weak_count *)*((_QWORD *)v115 - 1);
        if (v117)
        {
          v118 = (unint64_t *)&v117->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
        v115 -= 16;
      }
      while (v115 != v114);
      v116 = v235;
    }
    v236 = v114;
    operator delete(v116);
  }
  v120 = (char *)v238;
  if (v238)
  {
    v121 = v239;
    v122 = v238;
    if (v239 != v238)
    {
      do
      {
        v123 = (std::__shared_weak_count *)*((_QWORD *)v121 - 1);
        if (v123)
        {
          v124 = (unint64_t *)&v123->__shared_owners_;
          do
            v125 = __ldaxr(v124);
          while (__stlxr(v125 - 1, v124));
          if (!v125)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }
        v121 -= 16;
      }
      while (v121 != v120);
      v122 = v238;
    }
    v239 = v120;
    operator delete(v122);
  }
}

void sub_191127048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v38 - 144);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a19);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a27);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a30);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::ConsumerOfTag(MIL::Builder::OperationBuilder **a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v10;
  int v11;
  MIL::Builder::Variable *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  void *v22[2];
  void *__p;

  v22[0] = *a1;
  v10 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)v22);
  if (!v10)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((_DWORD *)v10 + 6) < (int)a5)
  {
    LOBYTE(v11) = 0;
    return v11 & 1;
  }
  v22[0] = *a1;
  if (std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::find<MIL::Builder::OperationBuilder *>(a3, v22))
  {
    LOBYTE(v11) = 1;
    return v11 & 1;
  }
  MIL::Builder::OperationBuilder::GetInputArguments(*a1);
  v12 = (MIL::Builder::Variable *)__p;
  if (!__p)
  {
    LOBYTE(v11) = 0;
    v18 = v22[0];
    v22[0] = 0;
    if (!v18)
      return v11 & 1;
    goto LABEL_20;
  }
  v11 = 0;
  do
  {
    if (MIL::Builder::Variable::TryGetName(*((MIL::Builder::Variable **)v12 + 2)))
    {
      MIL::Builder::BlockBuilder::TryGetOperation();
      if (v20)
      v13 = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    v12 = *(MIL::Builder::Variable **)v12;
  }
  while (v12);
  v16 = __p;
  if (__p)
  {
    do
    {
      v17 = (_QWORD *)*v16;
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v18 = v22[0];
  v22[0] = 0;
  if (v18)
LABEL_20:
    operator delete(v18);
  return v11 & 1;
}

void sub_19112736C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_191127388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19112739C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::ProducerOfTag(MIL::Builder::OperationBuilder **a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  void *v18[2];
  void *__p;

  v18[0] = *a1;
  v8 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a3, (uint64_t *)v18);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((_DWORD *)v8 + 6) <= (int)a4)
  {
    v18[0] = *a1;
    if (std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::find<MIL::Builder::OperationBuilder *>(a2, v18))
    {
      LOBYTE(v9) = 1;
    }
    else
    {
      MIL::Builder::OperationBuilder::GetChildOperations(*a1);
      v10 = __p;
      if (__p)
      {
        v9 = 0;
        do
        {
          v10 = (_QWORD *)*v10;
        }
        while (v10);
        v11 = __p;
        if (__p)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
            v13 = (std::__shared_weak_count *)v12[3];
            if (v13)
            {
              p_shared_owners = (unint64_t *)&v13->__shared_owners_;
              do
                v15 = __ldaxr(p_shared_owners);
              while (__stlxr(v15 - 1, p_shared_owners));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
            operator delete(v12);
          }
          while (v11);
        }
      }
      else
      {
        LOBYTE(v9) = 0;
      }
      v16 = v18[0];
      v18[0] = 0;
      if (v16)
        operator delete(v16);
    }
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  return v9 & 1;
}

void sub_1911274F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::GroupTagger::Finalize(Espresso::AOT::GroupTagger *this)
{
  _QWORD *v1;
  _QWORD *v3;
  std::string *v4;
  _QWORD *v5;
  unint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  std::string v28;
  std::__shared_weak_count *v29;
  void *v30[2];
  void *__p[2];
  int v32;
  unint64_t v33;
  unint64_t *v34;

  v1 = (_QWORD *)*((_QWORD *)this + 4);
  if (v1)
  {
    v3 = (_QWORD *)((char *)this + 56);
    v4 = (std::string *)((char *)this + 104);
    do
    {
      *(_OWORD *)v30 = 0u;
      *(_OWORD *)__p = 0u;
      v32 = 1065353216;
      v5 = (_QWORD *)v1[6];
      if (!v5)
        goto LABEL_28;
      do
      {
        v6 = v5[3];
        do
        {
          v33 = v6;
          v7 = *(int8x8_t *)((char *)this + 64);
          if (!*(_QWORD *)&v7)
            goto LABEL_54;
          v8 = (uint8x8_t)vcnt_s8(v7);
          v8.i16[0] = vaddlv_u8(v8);
          if (v8.u32[0] > 1uLL)
          {
            v9 = v6;
            if (v6 >= *(_QWORD *)&v7)
              v9 = v6 % *(_QWORD *)&v7;
          }
          else
          {
            v9 = (*(_QWORD *)&v7 - 1) & v6;
          }
          v10 = *(_QWORD **)(*v3 + 8 * v9);
          if (!v10 || (v11 = (_QWORD *)*v10) == 0)
LABEL_54:
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Invalid group id %lu", &v33);
          if (v8.u32[0] < 2uLL)
          {
            v12 = *(_QWORD *)&v7 - 1;
            while (1)
            {
              v14 = v11[1];
              if (v14 == v6)
              {
                if (v11[2] == v6)
                  goto LABEL_26;
              }
              else if ((v14 & v12) != v9)
              {
                goto LABEL_54;
              }
              v11 = (_QWORD *)*v11;
              if (!v11)
                goto LABEL_54;
            }
          }
          while (1)
          {
            v13 = v11[1];
            if (v13 == v6)
              break;
            if (v13 >= *(_QWORD *)&v7)
              v13 %= *(_QWORD *)&v7;
            if (v13 != v9)
              goto LABEL_54;
LABEL_16:
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_54;
          }
          if (v11[2] != v6)
            goto LABEL_16;
LABEL_26:
          v34 = &v33;
          v6 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v3, &v33, (uint64_t)&std::piecewise_construct, &v34)[3];
        }
        while (v6 != v33);
        v34 = v5 + 2;
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)v30, (unsigned int *)v5 + 4, (uint64_t)&std::piecewise_construct, (_DWORD **)&v34)[3] = v6;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
LABEL_28:
      if (*((char *)this + 127) < 0)
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
      else
        v28 = *v4;
      E5Common::Utils::MILDictFromCpp<unsigned int,unsigned long long>((uint64_t)v30, (void **)&v34);
      if (v34)
      {
        v15 = (std::__shared_weak_count *)operator new();
        v16 = v34;
        v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2C50;
        v15->__shared_owners_ = 0;
        v15->__shared_weak_owners_ = 0;
        v15[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
      }
      else
      {
        v15 = 0;
      }
      v27 = v15;
      v34 = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v17 = v29;
      if (!v29)
        goto LABEL_38;
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        v20 = v27;
        if (v27)
        {
LABEL_39:
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      else
      {
LABEL_38:
        v20 = v27;
        if (v27)
          goto LABEL_39;
      }
      v23 = v34;
      v34 = 0;
      if (v23)
        (*(void (**)(unint64_t *))(*v23 + 8))(v23);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v28.__r_.__value_.__l.__data_);
        v24 = __p[0];
        if (__p[0])
          goto LABEL_48;
      }
      else
      {
        v24 = __p[0];
        if (__p[0])
        {
          do
          {
LABEL_48:
            v25 = (_QWORD *)*v24;
            operator delete(v24);
            v24 = v25;
          }
          while (v25);
        }
      }
      v26 = v30[0];
      v30[0] = 0;
      if (v26)
        operator delete(v26);
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
}

void sub_191127848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19112785C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;
  uint64_t v22;

  v22 = *(_QWORD *)(v20 - 88);
  *(_QWORD *)(v20 - 88) = 0;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a20);
      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1911278D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1911278E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1911278F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5Common::Utils::MILDictFromCpp<unsigned int,unsigned long long>(uint64_t a1@<X1>, void **a2@<X8>)
{
  uint64_t Scalar;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count_vtbl *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count_vtbl *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *__p;
  void *v34;
  _DWORD *v35;
  std::__shared_weak_count_vtbl *v36;
  std::__shared_weak_count_vtbl *v37;
  std::__shared_weak_count *v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43[2];
  void *v44[2];
  int v45;
  std::__shared_weak_count_vtbl **v46;

  Scalar = MIL::IRTensorValueType::MakeScalar();
  v4 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRDictionaryValueType::Make();
  *(_OWORD *)v43 = 0u;
  *(_OWORD *)v44 = 0u;
  v45 = 1065353216;
  for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
  {
    v6 = i[3];
    v7 = operator new(8uLL);
    v39 = v7;
    *v7 = v6;
    v40 = v7 + 1;
    v41 = v7 + 1;
    Espresso::MILUtil::MakeTensorValue<unsigned long long>(&v42, v4, &v39);
    LODWORD(v6) = *((_DWORD *)i + 4);
    v8 = operator new(4uLL);
    __p = v8;
    *v8 = v6;
    v34 = v8 + 1;
    v35 = v8 + 1;
    Espresso::MILUtil::MakeTensorValue<unsigned int>(&v36, Scalar, &__p);
    v37 = v36;
    if (v36)
    {
      v9 = (std::__shared_weak_count *)operator new();
      v10 = v36;
      v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
      v9->__shared_owners_ = 0;
      v9->__shared_weak_owners_ = 0;
      v9[1].__vftable = v10;
    }
    else
    {
      v9 = 0;
    }
    v38 = v9;
    v36 = 0;
    v46 = &v37;
    v11 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v43, (uint64_t)&v37, (uint64_t)&std::piecewise_construct, (_OWORD **)&v46);
    v12 = v42;
    if (v42)
    {
      v13 = (_QWORD *)operator new();
      v14 = v42;
      *v13 = &unk_1E2DC2BE0;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = v14;
      v42 = 0;
      v15 = (std::__shared_weak_count *)v11[5];
      v11[4] = v12;
      v11[5] = v13;
      if (!v15)
        goto LABEL_14;
    }
    else
    {
      v42 = 0;
      v15 = (std::__shared_weak_count *)v11[5];
      v11[4] = 0;
      v11[5] = 0;
      if (!v15)
        goto LABEL_14;
    }
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (v17)
    {
LABEL_14:
      v18 = v38;
      if (v38)
        goto LABEL_15;
      goto LABEL_20;
    }
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = v38;
    if (v38)
    {
LABEL_15:
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
LABEL_20:
    v21 = v36;
    v36 = 0;
    if (v21)
      (*((void (**)(std::__shared_weak_count_vtbl *))v21->~__shared_weak_count + 1))(v21);
    if (__p)
    {
      v34 = __p;
      operator delete(__p);
    }
    v22 = v42;
    v42 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (v39)
    {
      v40 = v39;
      operator delete(v39);
    }
  }
  MIL::IRDictionaryValueType::MakeValue();
  *a2 = v39;
  v23 = v44[0];
  if (v44[0])
  {
    do
    {
      v25 = v23;
      v23 = (_QWORD *)*v23;
      v26 = (std::__shared_weak_count *)v25[5];
      if (!v26)
        goto LABEL_37;
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v29 = (std::__shared_weak_count *)v25[3];
        if (v29)
        {
LABEL_38:
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
      else
      {
LABEL_37:
        v29 = (std::__shared_weak_count *)v25[3];
        if (v29)
          goto LABEL_38;
      }
      operator delete(v25);
    }
    while (v23);
  }
  v24 = v43[0];
  v43[0] = 0;
  if (v24)
    operator delete(v24);
}

void sub_191127C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_191127CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x191127CBCLL);
}

_QWORD *Espresso::AOT::AbstractGroupMatcher::AbstractGroupMatcher(_QWORD *this)
{
  *this = off_1E2DA0690;
  return this;
}

uint64_t Espresso::AOT::E5RTGroupMatcher::E5RTGroupMatcher(uint64_t a1, uint64_t a2, int a3, char a4, char a5, char a6)
{
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E2DA03D8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v12 = *(const void **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v13 = v11 - *(_QWORD *)a2;
  if (v11 != *(_QWORD *)a2)
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - *(_QWORD *)a2);
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v14;
    v15 = &v14[4 * (v13 >> 2)];
    *(_QWORD *)(a1 + 24) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 16) = v15;
  }
  *(_BYTE *)(a1 + 55) = 7;
  strcpy((char *)(a1 + 32), "isQuant");
  *(_DWORD *)(a1 + 56) = a3;
  *(_BYTE *)(a1 + 60) = a4;
  *(_BYTE *)(a1 + 61) = a5;
  *(_BYTE *)(a1 + 62) = a6;
  return a1;
}

{
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E2DA03D8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v12 = *(const void **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v13 = v11 - *(_QWORD *)a2;
  if (v11 != *(_QWORD *)a2)
  {
    if (v13 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - *(_QWORD *)a2);
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v14;
    v15 = &v14[4 * (v13 >> 2)];
    *(_QWORD *)(a1 + 24) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 16) = v15;
  }
  *(_BYTE *)(a1 + 55) = 7;
  strcpy((char *)(a1 + 32), "isQuant");
  *(_DWORD *)(a1 + 56) = a3;
  *(_BYTE *)(a1 + 60) = a4;
  *(_BYTE *)(a1 + 61) = a5;
  *(_BYTE *)(a1 + 62) = a6;
  return a1;
}

void sub_191127E3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_191127F30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::E5RTGroupMatcher::TagE5MinimalCpuGroupsInProgram(uint64_t a1, MIL::Builder::FunctionBuilder **a2, MIL::Builder::BlockBuilder **a3, _QWORD *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  _DWORD *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *i;
  void *v35;
  uint64_t result;
  void *__p;
  std::__shared_weak_count *v38;
  __int128 v39;
  _DWORD *v40;
  uint64_t v41;
  __int128 v42;
  _DWORD *v43;

  MIL::Builder::FunctionBuilder::CreateFunction(*a2);
  v39 = 0uLL;
  v40 = 0;
  if (*(_BYTE *)(a1 + 62))
  {
    MIL::Builder::FunctionBuilder::GetContext(*a2);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 48))(v41);
    E5Common::MinimalCpu::MatchStatePatterns((uint64_t)__p, v8, (uint64_t)&v42);
    v9 = v38;
    v39 = v42;
    v40 = v43;
    v43 = 0;
    v42 = 0uLL;
    if (!v38)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
  }
  else
  {
    MIL::Builder::FunctionBuilder::GetContext(*a2);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 48))(v41);
    E5Common::MinimalCpu::MatchAllPatterns((uint64_t)__p, v12, (uint64_t)&v42);
    v9 = v38;
    v39 = v42;
    v40 = v43;
    v43 = 0;
    v42 = 0uLL;
    if (!v38)
      goto LABEL_10;
    v13 = (unint64_t *)&v38->__shared_owners_;
    do
      v11 = __ldaxr(v13);
    while (__stlxr(v11 - 1, v13));
  }
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v15 = (_QWORD *)*((_QWORD *)&v39 + 1);
    v14 = (_QWORD *)v39;
    if ((_QWORD)v39 == *((_QWORD *)&v39 + 1))
      goto LABEL_41;
LABEL_15:
    while (1)
    {
      std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector(&__p, (uint64_t)(v14[2] - v14[1]) >> 3);
      v17 = v14[1];
      v18 = v14[2];
      if (v17 != v18)
        break;
LABEL_29:
      v27 = (std::__shared_weak_count *)__p;
      v28 = v38;
      if (__p != v38)
      {
        v29 = operator new(4uLL);
        *v29 = 9;
        *((_QWORD *)&v42 + 1) = v29 + 1;
        v43 = v29 + 1;
        *(_QWORD *)&v42 = v29;
        Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a4, 0, ((unint64_t)((char *)v28 - (char *)v27) >> 4) - 1, &__p, (unsigned int **)&v42);
        operator delete(v29);
        v27 = (std::__shared_weak_count *)__p;
      }
      if (v27)
      {
        v30 = v38;
        v16 = v27;
        if (v38 != v27)
        {
          do
          {
            shared_weak_owners = (std::__shared_weak_count *)v30[-1].__shared_weak_owners_;
            if (shared_weak_owners)
            {
              v32 = (unint64_t *)&shared_weak_owners->__shared_owners_;
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
                std::__shared_weak_count::__release_weak(shared_weak_owners);
              }
            }
            v30 = (std::__shared_weak_count *)((char *)v30 - 16);
          }
          while (v30 != v27);
          v16 = __p;
        }
        v38 = v27;
        operator delete(v16);
      }
      v14 += 4;
      if (v14 == v15)
      {
        v14 = (_QWORD *)v39;
        goto LABEL_41;
      }
    }
    v19 = (char *)__p;
    while (1)
    {
      MIL::Builder::BlockBuilder::GetOperation(*a3);
      v20 = v42;
      v42 = 0uLL;
      v21 = (std::__shared_weak_count *)*((_QWORD *)v19 + 1);
      *(_OWORD *)v19 = v20;
      if (!v21)
        goto LABEL_22;
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
        if (*((_QWORD *)&v42 + 1))
        {
LABEL_23:
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      else
      {
LABEL_22:
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
        if (*((_QWORD *)&v42 + 1))
          goto LABEL_23;
      }
      v17 += 8;
      v19 += 16;
      if (v17 == v18)
        goto LABEL_29;
    }
  }
LABEL_10:
  v15 = (_QWORD *)*((_QWORD *)&v39 + 1);
  v14 = (_QWORD *)v39;
  if ((_QWORD)v39 != *((_QWORD *)&v39 + 1))
    goto LABEL_15;
LABEL_41:
  if (v14)
  {
    for (i = (_QWORD *)*((_QWORD *)&v39 + 1); i != v14; i -= 4)
    {
      v35 = (void *)*(i - 3);
      if (v35)
      {
        *(i - 2) = v35;
        operator delete(v35);
      }
    }
    operator delete(v14);
  }
  result = v41;
  v41 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1911282B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;

  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](&a13);
  v17 = a16;
  a16 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = 16 * a2;
    v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * a2];
    bzero(v5, 16 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1911283A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::E5RTGroupMatcher::TagE5RTEnforcedGroupsInBlock(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v7;
  MIL::Builder::Variable **v8;
  uint64_t Type;
  uint64_t v10;
  unsigned int v11;
  MIL::Builder::BlockBuilder **v13;
  char *v14;
  unint64_t v15;
  MIL::Builder::Variable **v16;
  MIL::Builder::Variable **v17;
  int v18;
  MIL::Builder::Variable *v19;
  uint64_t v20;
  MIL::Builder::OperationBuilder *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  int8x8_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  MIL::Builder::BlockBuilder *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t Value;
  uint64_t v64;
  MIL::Builder::BlockBuilder *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t OperationsByInput;
  _QWORD *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  MIL::Builder::BlockBuilder *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  int8x8_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint8x8_t v83;
  unint64_t v84;
  uint64_t **v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  MIL::Builder::OperationBuilder *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  int v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  int8x8_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint8x8_t v115;
  unint64_t v116;
  uint64_t **v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  _QWORD *v125;
  MIL::Builder::BlockBuilder *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  char *v134;
  void *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  char *v139;
  unsigned int **v140;
  MIL::Builder::OperationBuilder **v142;
  unint64_t v143;
  MIL::Builder::BlockBuilder *v144;
  std::__shared_weak_count *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  MIL::Builder::BlockBuilder *v148;
  std::__shared_weak_count *v149;
  MIL::Builder::BlockBuilder **v150;
  MIL::Builder::Variable **v151;
  void *__p;
  void *v153;
  void *v154;
  char *v155;
  MIL::Builder::BlockBuilder *v156;
  std::__shared_weak_count *v157;
  _QWORD *v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  MIL::Builder::BlockBuilder::GetOperations(*(MIL::Builder::BlockBuilder **)a2);
  v156 = *(MIL::Builder::BlockBuilder **)a2;
  v7 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)&v156);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Builder::BlockBuilder::GetOutputs(*(MIL::Builder::BlockBuilder **)a2);
  v8 = (MIL::Builder::Variable **)__p;
  if (__p != v153)
  {
    do
    {
      Type = MIL::Builder::Variable::TryGetType(*v8);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Type + 24))(Type);
      if (v10)
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
        if ((v11 & 0xFFFFFFFA) != 0xA && (v11 > 0x10 || ((1 << v11) & 0x10234) == 0))
        {
          MIL::IRDataTypeToString();
          if (SHIBYTE(v158) >= 0)
            v13 = &v156;
          else
            v13 = (MIL::Builder::BlockBuilder **)v156;
          v150 = v13;
          Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("Unsupported function output dtype %s", &v150);
        }
      }
      ++v8;
    }
    while (v8 != v153);
  }
  v14 = v155;
  if (v155 != v154)
  {
    v15 = 0;
    v140 = (unsigned int **)(a1 + 8);
    v14 = (char *)v154;
    while (1)
    {
      v142 = (MIL::Builder::OperationBuilder **)&v14[16 * v15];
      MIL::Builder::OperationBuilder::GetOutputs(*v142);
      v17 = v150;
      v16 = v151;
      if (v150 != v151)
        break;
LABEL_211:
      if (v17)
      {
        v151 = v17;
        operator delete(v17);
      }
      ++v15;
      v14 = (char *)v154;
      if (v15 >= (v155 - (_BYTE *)v154) >> 4)
        goto LABEL_213;
    }
    v143 = v15;
    v139 = &v14[16 * v15];
    while (1)
    {
      v19 = *v17;
      v20 = MIL::Builder::Variable::TryGetType(*v17);
      if (!v20 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20))
        goto LABEL_87;
      v21 = *v142;
      v156 = *v142;
      v22 = (std::__shared_weak_count *)*((_QWORD *)v139 + 1);
      v157 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
      }
      v25 = operator new(0x10uLL);
      *v25 = v21;
      v25[1] = v22;
      if (!v22)
        goto LABEL_34;
      v26 = (unint64_t *)&v22->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      do
        v28 = __ldaxr(v26);
      while (__stlxr(v28 - 1, v26));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        v29 = *(std::__shared_weak_count **)(a2 + 8);
        v148 = *(MIL::Builder::BlockBuilder **)a2;
        v149 = v29;
        if (!v29)
          goto LABEL_37;
      }
      else
      {
LABEL_34:
        v29 = *(std::__shared_weak_count **)(a2 + 8);
        v148 = *(MIL::Builder::BlockBuilder **)a2;
        v149 = v29;
        if (!v29)
          goto LABEL_37;
      }
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
LABEL_37:
      MIL::Builder::Variable::GetName(v19);
      if (!v29)
        goto LABEL_41;
      v32 = (unint64_t *)&v29->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (v33)
      {
LABEL_41:
        v34 = v158;
        if (v158)
          goto LABEL_42;
        goto LABEL_77;
      }
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      v34 = v158;
      if (v158)
      {
LABEL_42:
        v35 = -1;
        while (1)
        {
          v36 = v34[2];
          v37 = (std::__shared_weak_count *)v34[3];
          v146 = v36;
          v147 = v37;
          if (v37)
          {
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          v40 = (int8x8_t)v7[4];
          if (!*(_QWORD *)&v40)
            goto LABEL_227;
          v41 = 0x9DDFEA08EB382D69 * (((8 * v36) + 8) ^ HIDWORD(v36));
          v42 = 0x9DDFEA08EB382D69 * (HIDWORD(v36) ^ (v41 >> 47) ^ v41);
          v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
          v44 = (uint8x8_t)vcnt_s8(v40);
          v44.i16[0] = vaddlv_u8(v44);
          if (v44.u32[0] > 1uLL)
          {
            v45 = v43;
            if (v43 >= *(_QWORD *)&v40)
              v45 = v43 % *(_QWORD *)&v40;
          }
          else
          {
            v45 = (*(_QWORD *)&v40 - 1) & v43;
          }
          v46 = *(uint64_t ***)(v7[3] + 8 * v45);
          if (!v46 || (v47 = *v46) == 0)
LABEL_227:
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (v44.u32[0] < 2uLL)
          {
            v48 = *(_QWORD *)&v40 - 1;
            while (1)
            {
              v50 = v47[1];
              if (v43 == v50)
              {
                if (v47[2] == v36)
                  goto LABEL_67;
              }
              else if ((v50 & v48) != v45)
              {
                goto LABEL_227;
              }
              v47 = (uint64_t *)*v47;
              if (!v47)
                goto LABEL_227;
            }
          }
          while (1)
          {
            v49 = v47[1];
            if (v43 == v49)
              break;
            if (v49 >= *(_QWORD *)&v40)
              v49 %= *(_QWORD *)&v40;
            if (v49 != v45)
              goto LABEL_227;
LABEL_57:
            v47 = (uint64_t *)*v47;
            if (!v47)
              goto LABEL_227;
          }
          if (v47[2] != v36)
            goto LABEL_57;
LABEL_67:
          if (v35 <= *((_DWORD *)v47 + 6))
            v35 = *((_DWORD *)v47 + 6);
          v51 = v147;
          if (v147)
          {
            v52 = (unint64_t *)&v147->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v34 = (_QWORD *)*v34;
          if (!v34)
            goto LABEL_78;
        }
      }
LABEL_77:
      v35 = -1;
LABEL_78:
      Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a3, v143, v35, &v154, v140);
      v54 = v158;
      while (v54)
      {
        v71 = v54;
        v54 = (_QWORD *)*v54;
        v72 = (std::__shared_weak_count *)v71[3];
        if (v72)
        {
          v73 = (unint64_t *)&v72->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        operator delete(v71);
      }
      v55 = v156;
      v156 = 0;
      if (v55)
        operator delete(v55);
      v56 = (std::__shared_weak_count *)v25[1];
      if (v56)
      {
        v57 = (unint64_t *)&v56->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      operator delete(v25);
LABEL_87:
      v59 = MIL::Builder::Variable::TryGetType(v19);
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
      if (!v60)
        goto LABEL_93;
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 88))(v60);
      if ((v61 & 0xFFFFFFFA) == 0xA)
        goto LABEL_93;
      if (v61 <= 0x10 && ((1 << v61) & 0x10234) != 0)
        goto LABEL_93;
      v92 = *v142;
      v156 = *v142;
      v93 = (std::__shared_weak_count *)*((_QWORD *)v139 + 1);
      v157 = v93;
      if (v93)
      {
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
      v96 = operator new(0x10uLL);
      *v96 = v92;
      v96[1] = v93;
      if (!v93)
        goto LABEL_149;
      v97 = (unint64_t *)&v93->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
      do
        v99 = __ldaxr(v97);
      while (__stlxr(v99 - 1, v97));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
        v100 = *(std::__shared_weak_count **)(a2 + 8);
        v144 = *(MIL::Builder::BlockBuilder **)a2;
        v145 = v100;
        if (!v100)
          goto LABEL_152;
      }
      else
      {
LABEL_149:
        v100 = *(std::__shared_weak_count **)(a2 + 8);
        v144 = *(MIL::Builder::BlockBuilder **)a2;
        v145 = v100;
        if (!v100)
          goto LABEL_152;
      }
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
LABEL_152:
      MIL::Builder::Variable::GetName(v19);
      if (!v100)
        goto LABEL_156;
      v103 = (unint64_t *)&v100->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (v104)
      {
LABEL_156:
        v105 = v158;
        if (v158)
          goto LABEL_157;
        goto LABEL_194;
      }
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
      v105 = v158;
      if (v158)
      {
LABEL_157:
        v106 = -1;
        while (1)
        {
          v107 = v105[2];
          v108 = (std::__shared_weak_count *)v105[3];
          v146 = v107;
          v147 = v108;
          if (v108)
          {
            v109 = (unint64_t *)&v108->__shared_owners_;
            do
              v110 = __ldxr(v109);
            while (__stxr(v110 + 1, v109));
          }
          v111 = (int8x8_t)v7[4];
          if (!*(_QWORD *)&v111)
            goto LABEL_229;
          v112 = 0x9DDFEA08EB382D69 * (((8 * v107) + 8) ^ HIDWORD(v107));
          v113 = 0x9DDFEA08EB382D69 * (HIDWORD(v107) ^ (v112 >> 47) ^ v112);
          v114 = 0x9DDFEA08EB382D69 * (v113 ^ (v113 >> 47));
          v115 = (uint8x8_t)vcnt_s8(v111);
          v115.i16[0] = vaddlv_u8(v115);
          if (v115.u32[0] > 1uLL)
          {
            v116 = v114;
            if (v114 >= *(_QWORD *)&v111)
              v116 = v114 % *(_QWORD *)&v111;
          }
          else
          {
            v116 = (*(_QWORD *)&v111 - 1) & v114;
          }
          v117 = *(uint64_t ***)(v7[3] + 8 * v116);
          if (!v117 || (v118 = *v117) == 0)
LABEL_229:
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (v115.u32[0] < 2uLL)
          {
            v119 = *(_QWORD *)&v111 - 1;
            while (1)
            {
              v121 = v118[1];
              if (v114 == v121)
              {
                if (v118[2] == v107)
                  goto LABEL_182;
              }
              else if ((v121 & v119) != v116)
              {
                goto LABEL_229;
              }
              v118 = (uint64_t *)*v118;
              if (!v118)
                goto LABEL_229;
            }
          }
          while (1)
          {
            v120 = v118[1];
            if (v114 == v120)
              break;
            if (v120 >= *(_QWORD *)&v111)
              v120 %= *(_QWORD *)&v111;
            if (v120 != v116)
              goto LABEL_229;
LABEL_172:
            v118 = (uint64_t *)*v118;
            if (!v118)
              goto LABEL_229;
          }
          if (v118[2] != v107)
            goto LABEL_172;
LABEL_182:
          if (v106 <= *((_DWORD *)v118 + 6))
            v106 = *((_DWORD *)v118 + 6);
          v122 = v147;
          if (v147)
          {
            v123 = (unint64_t *)&v147->__shared_owners_;
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
              std::__shared_weak_count::__release_weak(v122);
            }
          }
          v105 = (_QWORD *)*v105;
          if (!v105)
            goto LABEL_195;
        }
      }
LABEL_194:
      v106 = -1;
LABEL_195:
      Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a3, v143, v106, &v154, v140);
      v125 = v158;
      while (v125)
      {
        v130 = v125;
        v125 = (_QWORD *)*v125;
        v131 = (std::__shared_weak_count *)v130[3];
        if (v131)
        {
          v132 = (unint64_t *)&v131->__shared_owners_;
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 - 1, v132));
          if (!v133)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        operator delete(v130);
      }
      v126 = v156;
      v156 = 0;
      if (v126)
        operator delete(v126);
      v127 = (std::__shared_weak_count *)v96[1];
      if (v127)
      {
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
      operator delete(v96);
LABEL_93:
      Value = MIL::Builder::Variable::TryGetValue(v19);
      if (Value)
      {
        v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Value + 40))(Value);
        if (v64)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 120))(v64) & 1) != 0)
            goto LABEL_101;
          MIL::Builder::OperationBuilder::TryGetConstant(*v142);
          v65 = v156;
          v66 = v157;
          if (!v157)
            goto LABEL_100;
          v67 = (unint64_t *)&v157->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
            if (v65)
            {
LABEL_101:
              MIL::Builder::Variable::GetName(v19);
              OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
              if (*(_QWORD *)(OperationsByInput + 24))
              {
                v70 = *(_QWORD **)(OperationsByInput + 16);
                if (v70)
                {
                  v18 = -1;
                  while (1)
                  {
                    v75 = (MIL::Builder::BlockBuilder *)v70[2];
                    v76 = (std::__shared_weak_count *)v70[3];
                    v156 = v75;
                    v157 = v76;
                    if (v76)
                    {
                      v77 = (unint64_t *)&v76->__shared_owners_;
                      do
                        v78 = __ldxr(v77);
                      while (__stxr(v78 + 1, v77));
                    }
                    v79 = (int8x8_t)v7[4];
                    if (!*(_QWORD *)&v79)
                      goto LABEL_228;
                    v80 = 0x9DDFEA08EB382D69
                        * (((8 * (_DWORD)v75) + 8) ^ ((unint64_t)v75 >> 32));
                    v81 = 0x9DDFEA08EB382D69 * (((unint64_t)v75 >> 32) ^ (v80 >> 47) ^ v80);
                    v82 = 0x9DDFEA08EB382D69 * (v81 ^ (v81 >> 47));
                    v83 = (uint8x8_t)vcnt_s8(v79);
                    v83.i16[0] = vaddlv_u8(v83);
                    if (v83.u32[0] > 1uLL)
                    {
                      v84 = v82;
                      if (v82 >= *(_QWORD *)&v79)
                        v84 = v82 % *(_QWORD *)&v79;
                    }
                    else
                    {
                      v84 = (*(_QWORD *)&v79 - 1) & v82;
                    }
                    v85 = *(uint64_t ***)(v7[3] + 8 * v84);
                    if (!v85 || (v86 = *v85) == 0)
LABEL_228:
                      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                    if (v83.u32[0] < 2uLL)
                    {
                      v87 = *(_QWORD *)&v79 - 1;
                      while (1)
                      {
                        v89 = v86[1];
                        if (v82 == v89)
                        {
                          if ((MIL::Builder::BlockBuilder *)v86[2] == v75)
                            goto LABEL_134;
                        }
                        else if ((v89 & v87) != v84)
                        {
                          goto LABEL_228;
                        }
                        v86 = (uint64_t *)*v86;
                        if (!v86)
                          goto LABEL_228;
                      }
                    }
                    while (1)
                    {
                      v88 = v86[1];
                      if (v82 == v88)
                        break;
                      if (v88 >= *(_QWORD *)&v79)
                        v88 %= *(_QWORD *)&v79;
                      if (v88 != v84)
                        goto LABEL_228;
LABEL_124:
                      v86 = (uint64_t *)*v86;
                      if (!v86)
                        goto LABEL_228;
                    }
                    if ((MIL::Builder::BlockBuilder *)v86[2] != v75)
                      goto LABEL_124;
LABEL_134:
                    if (v18 <= *((_DWORD *)v86 + 6))
                      v18 = *((_DWORD *)v86 + 6);
                    if (v76)
                    {
                      v90 = (unint64_t *)&v76->__shared_owners_;
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                        std::__shared_weak_count::__release_weak(v76);
                      }
                    }
                    v70 = (_QWORD *)*v70;
                    if (!v70)
                      goto LABEL_22;
                  }
                }
                v18 = -1;
LABEL_22:
                Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a3, v143, v18, &v154, v140);
              }
            }
          }
          else
          {
LABEL_100:
            if (v65)
              goto LABEL_101;
          }
        }
      }
      if (++v17 == v16)
      {
        v17 = v150;
        v15 = v143;
        goto LABEL_211;
      }
    }
  }
LABEL_213:
  if (__p)
  {
    v153 = __p;
    operator delete(__p);
    v14 = (char *)v154;
  }
  if (v14)
  {
    v134 = v155;
    v135 = v14;
    if (v155 != v14)
    {
      do
      {
        v136 = (std::__shared_weak_count *)*((_QWORD *)v134 - 1);
        if (v136)
        {
          v137 = (unint64_t *)&v136->__shared_owners_;
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        v134 -= 16;
      }
      while (v134 != v14);
      v135 = v154;
    }
    v155 = v14;
    operator delete(v135);
  }
}

void sub_191128F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char *a27,char *a28)
{
  uint64_t v28;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  if (*(char *)(v28 - 113) < 0)
    operator delete(*(void **)(v28 - 136));
  if (__p)
    operator delete(__p);
  if (!a27)
    _Unwind_Resume(exception_object);
  v30 = a28;
  if (a28 == a27)
  {
    operator delete(a27);
    _Unwind_Resume(exception_object);
  }
  while (1)
  {
    v31 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v30 -= 16;
    if (v30 == a27)
    {
      operator delete(a27);
      _Unwind_Resume(exception_object);
    }
  }
}

void `anonymous namespace'::GetConsumers(uint64_t a1, MIL::Builder::BlockBuilder **a2)
{
  uint64_t OperationsByInput;
  MIL::Builder::OperationBuilder **v5;
  MIL::Builder::OperationBuilder **v6;
  void *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  size_t prime;
  void *v13;
  BOOL v14;
  unint64_t v15;
  uint8x8_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD **v21;
  size_t v22;
  size_t v23;
  size_t v24;
  _QWORD *v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  size_t v37;
  void *v38;
  char *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  MIL::Builder::OperationBuilder **v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *v48[2];
  void *v49[2];
  float v50;
  void *__p;
  char *v52;
  void *v53;
  MIL::Builder::OperationBuilder **v54;

  OperationsByInput = MIL::Builder::BlockBuilder::GetOperationsByInput();
  std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set(a1, OperationsByInput);
  MIL::Builder::BlockBuilder::GetOperations(*a2);
  v5 = (MIL::Builder::OperationBuilder **)v53;
  v6 = v54;
  if (v53 != v54)
  {
LABEL_6:
    MIL::Builder::OperationBuilder::GetBlocks(*v5);
    v8 = (char *)__p;
    v9 = v52;
    if (__p == v52)
    {
      if (__p)
        goto LABEL_70;
      goto LABEL_5;
    }
    while (1)
    {
      v10 = MIL::Builder::BlockBuilder::GetOperationsByInput();
      v11 = v10;
      *(_OWORD *)v48 = 0u;
      *(_OWORD *)v49 = 0u;
      v50 = *(float *)(v10 + 32);
      prime = *(_QWORD *)(v10 + 8);
      if (prime == 1)
      {
        prime = 2;
        goto LABEL_28;
      }
      if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(*(_QWORD *)(v10 + 8));
        v13 = v48[1];
        v14 = (void *)prime >= v48[1];
        if ((void *)prime > v48[1])
          break;
      }
      else
      {
        v13 = 0;
        v14 = 1;
        if (prime)
          break;
      }
      if (v14)
        goto LABEL_44;
      v15 = vcvtps_u32_f32((float)(unint64_t)v49[1] / v50);
      if ((unint64_t)v13 < 3
        || (v16 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v16.i16[0] = vaddlv_u8(v16), v16.u32[0] > 1uLL))
      {
        v15 = std::__next_prime(v15);
      }
      else
      {
        v17 = 1 << -(char)__clz(v15 - 1);
        if (v15 >= 2)
          v15 = v17;
      }
      if (prime <= v15)
        prime = v15;
      if (prime >= (unint64_t)v13)
        goto LABEL_44;
      if (prime)
        break;
      v38 = v48[0];
      v48[0] = 0;
      if (v38)
        operator delete(v38);
      v48[1] = 0;
      v29 = *(_QWORD **)(v11 + 16);
      if (v29)
        goto LABEL_45;
LABEL_46:
      if (v49[1])
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a1, v5, v5);
      v30 = v49[0];
      if (v49[0])
      {
        do
        {
          v32 = v30;
          v30 = (_QWORD *)*v30;
          v33 = (std::__shared_weak_count *)v32[3];
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldaxr(p_shared_owners);
            while (__stlxr(v35 - 1, p_shared_owners));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          operator delete(v32);
        }
        while (v30);
      }
      v31 = v48[0];
      v48[0] = 0;
      if (v31)
        operator delete(v31);
      v8 += 16;
      if (v8 == v9)
      {
        v8 = (char *)__p;
        if (__p)
        {
LABEL_70:
          v39 = v52;
          v7 = v8;
          if (v52 != v8)
          {
            do
            {
              v40 = (std::__shared_weak_count *)*((_QWORD *)v39 - 1);
              if (v40)
              {
                v41 = (unint64_t *)&v40->__shared_owners_;
                do
                  v42 = __ldaxr(v41);
                while (__stlxr(v42 - 1, v41));
                if (!v42)
                {
                  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                  std::__shared_weak_count::__release_weak(v40);
                }
              }
              v39 -= 16;
            }
            while (v39 != v8);
            v7 = __p;
          }
          v52 = v8;
          operator delete(v7);
        }
LABEL_5:
        v5 += 2;
        if (v5 == v6)
        {
          v5 = (MIL::Builder::OperationBuilder **)v53;
          goto LABEL_79;
        }
        goto LABEL_6;
      }
    }
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
LABEL_28:
    v18 = operator new(8 * prime);
    v19 = v48[0];
    v48[0] = v18;
    if (v19)
      operator delete(v19);
    v20 = 0;
    v48[1] = (void *)prime;
    do
      *((_QWORD *)v48[0] + v20++) = 0;
    while (prime != v20);
    v21 = (_QWORD **)v49[0];
    if (!v49[0])
      goto LABEL_44;
    v22 = *((_QWORD *)v49[0] + 1);
    v23 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v24 = v22 & v23;
      *((_QWORD *)v48[0] + v24) = v49;
      while (1)
      {
        v25 = *v21;
        if (!*v21)
          break;
        v26 = v25[1] & v23;
        if (v26 == v24)
        {
          v21 = (_QWORD **)*v21;
        }
        else if (*((_QWORD *)v48[0] + v26))
        {
          *v21 = (_QWORD *)*v25;
          v27 = 8 * v26;
          *v25 = **(_QWORD **)((char *)v48[0] + v27);
          **(_QWORD **)((char *)v48[0] + v27) = v25;
        }
        else
        {
          *((_QWORD *)v48[0] + v26) = v21;
          v21 = (_QWORD **)v25;
          v24 = v26;
        }
      }
      goto LABEL_44;
    }
    if (v22 >= prime)
      v22 %= prime;
    *((_QWORD *)v48[0] + v22) = v49;
    v28 = *v21;
    if (!*v21)
    {
LABEL_44:
      v29 = *(_QWORD **)(v11 + 16);
      if (!v29)
        goto LABEL_46;
      do
      {
LABEL_45:
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v48, v29 + 2, v29 + 2);
        v29 = (_QWORD *)*v29;
      }
      while (v29);
      goto LABEL_46;
    }
    while (1)
    {
      v37 = v28[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v22)
        goto LABEL_58;
      if (*((_QWORD *)v48[0] + v37))
      {
        *v21 = (_QWORD *)*v28;
        v36 = 8 * v37;
        *v28 = **(_QWORD **)((char *)v48[0] + v36);
        **(_QWORD **)((char *)v48[0] + v36) = v28;
        v28 = v21;
LABEL_58:
        v21 = (_QWORD **)v28;
        v28 = (_QWORD *)*v28;
        if (!v28)
          goto LABEL_44;
      }
      else
      {
        *((_QWORD *)v48[0] + v37) = v21;
        v21 = (_QWORD **)v28;
        v28 = (_QWORD *)*v28;
        v22 = v37;
        if (!v28)
          goto LABEL_44;
      }
    }
  }
LABEL_79:
  if (v5)
  {
    v43 = v54;
    v44 = v5;
    if (v54 != v5)
    {
      do
      {
        v45 = (std::__shared_weak_count *)*(v43 - 1);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v43 -= 2;
      }
      while (v43 != v5);
      v44 = v53;
    }
    v54 = v5;
    operator delete(v44);
  }
}

void sub_191129774(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191129788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void sub_1911297A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  uint64_t v18;

  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100]((uint64_t)&a9);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a15);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a18);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlockWithShrinking(uint64_t a1, MIL::Builder::BlockBuilder **a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t Operator;
  uint64_t v12;
  uint64_t v13;
  MIL::Builder::OperationBuilder **v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  MIL::Builder::OperationBuilder **v18;
  void **v19;
  std::string::size_type size;
  std::string::size_type v21;
  std::__shared_weak_count *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  MIL::Builder::OperationBuilder **v43;
  _QWORD *v44;
  _QWORD *v45;
  void **v46;
  void *v47;
  void **v48;
  _QWORD *v49;
  _QWORD *v50;
  int8x8_t v51;
  uint8x8_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t **v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t **v68;
  uint64_t *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  void *v77;
  std::__shared_weak_count *v78;
  std::string::size_type v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::string::size_type v86;
  _QWORD *v87;
  void *v88;
  MIL::Builder::OperationBuilder **v89;
  MIL::Builder::OperationBuilder **v90;
  MIL::Builder::OperationBuilder **v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::runtime_error *exception;
  MIL::Location *Location;
  std::string *v101;
  __int128 v102;
  MIL::Builder::OperationBuilder **v103;
  unsigned int v104;
  unsigned int v105;
  std::__shared_weak_count *v106;
  std::string v107;
  std::__shared_weak_count *v108;
  void *__p[2];
  void *v110[2];
  int v111;
  void *v112;
  void *v113;
  uint64_t v114;
  void *v115[2];
  void *v116[2];
  int v117;
  _BYTE v118[32];
  int v119;
  void *v120;
  std::__shared_weak_count *v121;
  MIL::Builder::OperationBuilder **v122;
  MIL::Builder::OperationBuilder **v123;
  unint64_t v124;
  std::string v125;
  char *v126;
  __int128 v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 56) < a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    Location = (MIL::Location *)MIL::Builder::BlockBuilder::GetLocation(*a2);
    MIL::Location::GetDescription(Location);
    v101 = std::string::insert((std::string *)v118, 0, "reached max supported Block nesting level at ");
    v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v102;
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v101->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v125);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = 0;
  v122 = 0;
  v123 = 0;
  v10 = (a5 + 1);
  v124 = 0;
  while (MIL::Builder::BlockBuilder::GetNumOperations(*a2) > v9)
  {
    MIL::Builder::BlockBuilder::GetOperation(*a2);
    Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)v118);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
    Espresso::AOT::GetOperatorType(v12, &v125);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v125.__r_.__value_.__l.__size_ != 8)
      {
        operator delete(v125.__r_.__value_.__l.__data_);
        goto LABEL_19;
      }
      v13 = *(_QWORD *)v125.__r_.__value_.__l.__data_;
      operator delete(v125.__r_.__value_.__l.__data_);
      if (v13 != 0x657A69746E617571)
        goto LABEL_19;
    }
    else if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) != 8
           || v125.__r_.__value_.__r.__words[0] != 0x657A69746E617571)
    {
      goto LABEL_19;
    }
    v14 = v123;
    if ((unint64_t)v123 >= v124)
    {
      v18 = (MIL::Builder::OperationBuilder **)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v122, (__int128 *)v118);
    }
    else
    {
      *v123 = *(MIL::Builder::OperationBuilder **)v118;
      v15 = *(_QWORD *)&v118[8];
      v14[1] = *(MIL::Builder::OperationBuilder **)&v118[8];
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = v14 + 2;
    }
    v123 = v18;
LABEL_19:
    MIL::Builder::OperationBuilder::GetBlocks(*(MIL::Builder::OperationBuilder **)v118);
    size = v125.__r_.__value_.__l.__size_;
    v19 = (void **)v125.__r_.__value_.__r.__words[0];
    if (v125.__r_.__value_.__r.__words[0] == v125.__r_.__value_.__l.__size_)
    {
      if (!v125.__r_.__value_.__r.__words[0])
        goto LABEL_50;
      goto LABEL_21;
    }
    do
    {
      v23 = *v19;
      v24 = (std::__shared_weak_count *)v19[1];
      v115[0] = *v19;
      v115[1] = v24;
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(p_shared_owners);
        while (__stxr(v26 + 1, p_shared_owners));
        v120 = v23;
        v121 = v24;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
      }
      else
      {
        v120 = v23;
        v121 = 0;
      }
      Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlockWithShrinking(a1, &v120, a3, a4, v10);
      if (!v24)
        goto LABEL_36;
      v28 = (unint64_t *)&v24->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        v30 = (std::__shared_weak_count *)v115[1];
        if (!v115[1])
          goto LABEL_24;
      }
      else
      {
LABEL_36:
        v30 = (std::__shared_weak_count *)v115[1];
        if (!v115[1])
          goto LABEL_24;
      }
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
LABEL_24:
      v19 += 2;
    }
    while (v19 != (void **)size);
    v19 = (void **)v125.__r_.__value_.__r.__words[0];
    if (!v125.__r_.__value_.__r.__words[0])
    {
LABEL_50:
      v22 = *(std::__shared_weak_count **)&v118[8];
      if (!*(_QWORD *)&v118[8])
        goto LABEL_3;
LABEL_53:
      v36 = (unint64_t *)&v22->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      goto LABEL_3;
    }
LABEL_21:
    v21 = v125.__r_.__value_.__l.__size_;
    if ((void **)v125.__r_.__value_.__l.__size_ == v19)
    {
      v125.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
      operator delete(v19);
      v22 = *(std::__shared_weak_count **)&v118[8];
      if (!*(_QWORD *)&v118[8])
        goto LABEL_3;
      goto LABEL_53;
    }
    do
    {
      v33 = *(std::__shared_weak_count **)(v21 - 8);
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v21 -= 16;
    }
    while ((void **)v21 != v19);
    v125.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    operator delete(v125.__r_.__value_.__l.__data_);
    v22 = *(std::__shared_weak_count **)&v118[8];
    if (*(_QWORD *)&v118[8])
      goto LABEL_53;
LABEL_3:
    ++v9;
  }
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)*a2;
  v38 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)&v125);
  if (!v38)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Builder::BlockBuilder::GetContext(*a2);
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  v40 = (std::__shared_weak_count *)v125.__r_.__value_.__l.__size_;
  if (v125.__r_.__value_.__l.__size_)
  {
    v41 = (unint64_t *)(v125.__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  memset(v118, 0, sizeof(v118));
  v119 = 1065353216;
  v43 = v122;
  v103 = v123;
  if (v122 == v123)
  {
    *(_QWORD *)v118 = 0;
  }
  else
  {
    v44 = v38 + 3;
    do
    {
      *(_OWORD *)v115 = 0u;
      *(_OWORD *)v116 = 0u;
      v117 = 1065353216;
      v125.__r_.__value_.__r.__words[0] = (std::string::size_type)*v43;
      v45 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v44, (uint64_t *)&v125);
      if (!v45)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v105 = *((_DWORD *)v45 + 6);
      v112 = 0;
      v113 = 0;
      v114 = 0;
      *((_BYTE *)&v125.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v125, "dequantize");
      v126 = (char *)operator new(0x20uLL);
      v127 = xmmword_191A78340;
      strcpy(v126, "constexpr_affine_dequantize");
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v110 = 0u;
      v111 = 1065353216;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)&v125, (uint64_t)&v125);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)&v126, (uint64_t)&v126);
      v46 = (void **)v110[0];
      if (v110[0])
      {
        do
        {
          v48 = (void **)*v46;
          if (*((char *)v46 + 39) < 0)
            operator delete(v46[2]);
          operator delete(v46);
          v46 = v48;
        }
        while (v48);
      }
      v47 = __p[0];
      __p[0] = 0;
      if (v47)
        operator delete(v47);
      if (SHIBYTE(v127) < 0)
      {
        operator delete(v126);
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_78:
          operator delete(v125.__r_.__value_.__l.__data_);
          if (!v116[1])
            goto LABEL_128;
LABEL_79:
          v49 = v116[0];
          if (!v116[0])
            goto LABEL_125;
          v50 = *(_QWORD **)v116[0];
          if (!*(_QWORD *)v116[0])
            goto LABEL_125;
          v51 = (int8x8_t)v38[4];
          v52 = (uint8x8_t)vcnt_s8(v51);
          v52.i16[0] = vaddlv_u8(v52);
          v53 = *(_QWORD *)&v51 - 1;
LABEL_85:
          if (!*(_QWORD *)&v51)
            goto LABEL_177;
          v54 = v50[2];
          v55 = 0x9DDFEA08EB382D69 * (((8 * v54) + 8) ^ HIDWORD(v54));
          v56 = 0x9DDFEA08EB382D69 * (HIDWORD(v54) ^ (v55 >> 47) ^ v55);
          v57 = 0x9DDFEA08EB382D69 * (v56 ^ (v56 >> 47));
          if (v52.u32[0] > 1uLL)
          {
            v58 = 0x9DDFEA08EB382D69 * (v56 ^ (v56 >> 47));
            if (v57 >= *(_QWORD *)&v51)
              v58 = v57 % *(_QWORD *)&v51;
          }
          else
          {
            v58 = v57 & v53;
          }
          v59 = *(uint64_t ***)(*v44 + 8 * v58);
          if (!v59)
            goto LABEL_177;
          v60 = *v59;
          if (!*v59)
            goto LABEL_177;
          v61 = v49[2];
          if (v52.u32[0] < 2uLL)
          {
            while (1)
            {
              v62 = v60[1];
              if (v62 == v57)
              {
                if (v60[2] == v54)
                  goto LABEL_98;
              }
              else if ((v62 & v53) != v58)
              {
                goto LABEL_177;
              }
              v60 = (uint64_t *)*v60;
              if (!v60)
                goto LABEL_177;
            }
          }
          while (1)
          {
            v67 = v60[1];
            if (v67 == v57)
            {
              if (v60[2] == v54)
              {
LABEL_98:
                v63 = 0x9DDFEA08EB382D69 * (((8 * v61) + 8) ^ HIDWORD(v61));
                v64 = 0x9DDFEA08EB382D69 * (HIDWORD(v61) ^ (v63 >> 47) ^ v63);
                v65 = 0x9DDFEA08EB382D69 * (v64 ^ (v64 >> 47));
                if (v52.u32[0] > 1uLL)
                {
                  v66 = v65;
                  if (v65 >= *(_QWORD *)&v51)
                    v66 = v65 % *(_QWORD *)&v51;
                }
                else
                {
                  v66 = v65 & v53;
                }
                v68 = *(uint64_t ***)(*v44 + 8 * v66);
                if (v68)
                {
                  v69 = *v68;
                  if (v69)
                  {
                    v70 = *((_DWORD *)v60 + 6);
                    if (v52.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v71 = v69[1];
                        if (v71 == v65)
                        {
                          if (v69[2] == v61)
                            goto LABEL_82;
                        }
                        else if ((v71 & v53) != v66)
                        {
                          goto LABEL_177;
                        }
                        v69 = (uint64_t *)*v69;
                        if (!v69)
                          goto LABEL_177;
                      }
                    }
                    do
                    {
                      v72 = v69[1];
                      if (v72 == v65)
                      {
                        if (v69[2] == v61)
                        {
LABEL_82:
                          if (v70 < *((_DWORD *)v69 + 6))
                            v49 = v50;
                          v50 = (_QWORD *)*v50;
                          if (v50)
                            goto LABEL_85;
LABEL_125:
                          v73 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v44, v49 + 2);
                          if (!v73)
                            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                          v104 = *((_DWORD *)v73 + 6);
                          v74 = v116[0];
                          if (!v116[0])
                          {
LABEL_127:
                            Espresso::AOT::GroupTagger::MoveOpsAndAssignGroupIdsForInterval(a3, v104, v105, (uint64_t)a2, v115, v44, (unsigned int **)(a1 + 8));
                            goto LABEL_128;
                          }
                          while (2)
                          {
                            if (*(char *)(a1 + 55) < 0)
                              std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
                            else
                              v107 = *(std::string *)(a1 + 32);
                            MIL::IRTensorValueType::MakeBoolValue(Scalar);
                            if (v125.__r_.__value_.__r.__words[0])
                            {
                              v78 = (std::__shared_weak_count *)operator new();
                              v79 = v125.__r_.__value_.__r.__words[0];
                              v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
                              v78->__shared_owners_ = 0;
                              v78->__shared_weak_owners_ = 0;
                              v78[1].__vftable = (std::__shared_weak_count_vtbl *)v79;
                            }
                            else
                            {
                              v78 = 0;
                            }
                            v106 = v78;
                            v125.__r_.__value_.__r.__words[0] = 0;
                            MIL::Builder::OperationBuilder::SetAttribute();
                            v80 = v108;
                            if (!v108)
                              goto LABEL_145;
                            v81 = (unint64_t *)&v108->__shared_owners_;
                            do
                              v82 = __ldaxr(v81);
                            while (__stlxr(v82 - 1, v81));
                            if (!v82)
                            {
                              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                              std::__shared_weak_count::__release_weak(v80);
                              v83 = v106;
                              if (v106)
                              {
LABEL_146:
                                v84 = (unint64_t *)&v83->__shared_owners_;
                                do
                                  v85 = __ldaxr(v84);
                                while (__stlxr(v85 - 1, v84));
                                if (!v85)
                                {
                                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                                  std::__shared_weak_count::__release_weak(v83);
                                }
                              }
                            }
                            else
                            {
LABEL_145:
                              v83 = v106;
                              if (v106)
                                goto LABEL_146;
                            }
                            v86 = v125.__r_.__value_.__r.__words[0];
                            v125.__r_.__value_.__r.__words[0] = 0;
                            if (v86)
                              (*(void (**)(std::string::size_type))(*(_QWORD *)v86 + 8))(v86);
                            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v107.__r_.__value_.__l.__data_);
                            v74 = (_QWORD *)*v74;
                            if (!v74)
                              goto LABEL_127;
                            continue;
                          }
                        }
                      }
                      else
                      {
                        if (v72 >= *(_QWORD *)&v51)
                          v72 %= *(_QWORD *)&v51;
                        if (v72 != v66)
                          break;
                      }
                      v69 = (uint64_t *)*v69;
                    }
                    while (v69);
                  }
                }
LABEL_177:
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
            }
            else
            {
              if (v67 >= *(_QWORD *)&v51)
                v67 %= *(_QWORD *)&v51;
              if (v67 != v58)
                goto LABEL_177;
            }
            v60 = (uint64_t *)*v60;
            if (!v60)
              goto LABEL_177;
          }
        }
      }
      else if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_78;
      }
      if (v116[1])
        goto LABEL_79;
LABEL_128:
      if (v112)
      {
        v113 = v112;
        operator delete(v112);
      }
      v75 = v116[0];
      if (v116[0])
      {
        do
        {
          v76 = (_QWORD *)*v75;
          operator delete(v75);
          v75 = v76;
        }
        while (v76);
      }
      v77 = v115[0];
      v115[0] = 0;
      if (v77)
        operator delete(v77);
      v43 += 2;
    }
    while (v43 != v103);
    v87 = *(_QWORD **)&v118[16];
    if (*(_QWORD *)&v118[16])
    {
      do
      {
        v95 = v87;
        v87 = (_QWORD *)*v87;
        v96 = (std::__shared_weak_count *)v95[3];
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        operator delete(v95);
      }
      while (v87);
    }
    v88 = *(void **)v118;
    *(_QWORD *)v118 = 0;
    if (v88)
      operator delete(v88);
  }
  v89 = v122;
  if (v122)
  {
    v90 = v123;
    v91 = v122;
    if (v123 != v122)
    {
      do
      {
        v92 = (std::__shared_weak_count *)*(v90 - 1);
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        v90 -= 2;
      }
      while (v90 != v89);
      v91 = v122;
    }
    v123 = v89;
    operator delete(v91);
  }
}

void sub_19112A2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;

  if (*(char *)(v37 - 121) < 0)
    operator delete(*(void **)(v37 - 144));
  if (*(char *)(v37 - 201) < 0)
  {
    operator delete(*(void **)(v37 - 224));
    if ((v36 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  _Unwind_Resume(a1);
}

void sub_19112A474(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 224);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_19112A490(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  v27 = *(_QWORD *)(v26 - 144);
  *(_QWORD *)(v26 - 144) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x19112A510);
}

void sub_19112A4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 184);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v35 - 144));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35 - 224);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v35 - 168));
  _Unwind_Resume(a1);
}

void sub_19112A50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (__p)
    operator delete(__p);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a35);
  std::unordered_set<std::shared_ptr<E5RT::AsyncEvent const>>::~unordered_set[abi:ne180100](v35 - 224);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v35 - 168));
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::RecursiveBackwardTag(MIL::Builder::OperationBuilder **a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, MIL::Builder::OperationBuilder ***a6)
{
  int v12;
  uint64_t Operator;
  uint64_t v14;
  MIL::Builder::OperationBuilder *v15;
  unint64_t v16;
  MIL::Builder::OperationBuilder **v17;
  uint64_t v18;
  MIL::Builder::Variable *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  MIL::Builder::OperationBuilder **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  MIL::Builder::OperationBuilder **v30;
  MIL::Builder::OperationBuilder **v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  MIL::Builder::OperationBuilder **v39;
  _OWORD *v40;
  MIL::Builder::OperationBuilder **v41;
  uint64_t v42;
  __int128 v43;
  MIL::Builder::OperationBuilder *v44;
  uint64_t v46;
  std::__shared_weak_count *v47;
  void *v48[2];
  void *__p;
  std::string v50;

  if (std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)a1))
  {
    v48[0] = a1;
    LOBYTE(v12) = *((_BYTE *)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)a4, (uint64_t *)a1, (uint64_t)&std::piecewise_construct, (_QWORD **)v48)+ 32) != 0;
    return v12 & 1;
  }
  Operator = MIL::Builder::OperationBuilder::GetOperator(*a1);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
  Espresso::AOT::GetOperatorType(v14, &v50);
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a5, (uint64_t)&v50))
  {
    v48[0] = *a1;
    std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>(a3, (uint64_t *)v48, v48);
    v15 = *a1;
    v17 = a6[1];
    v16 = (unint64_t)a6[2];
    if ((unint64_t)v17 < v16)
    {
      *v17 = v15;
      v18 = (uint64_t)(v17 + 1);
      goto LABEL_47;
    }
    v23 = *a6;
    v24 = (char *)v17 - (char *)*a6;
    v25 = v24 >> 3;
    v26 = (v24 >> 3) + 1;
    if (v26 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v27 = v16 - (_QWORD)v23;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v29 = operator new(8 * v28);
      v30 = (MIL::Builder::OperationBuilder **)&v29[8 * v25];
      v31 = (MIL::Builder::OperationBuilder **)&v29[8 * v28];
      *v30 = v15;
      v18 = (uint64_t)(v30 + 1);
      v32 = (char *)((char *)v17 - (char *)v23);
      if (v17 == v23)
        goto LABEL_45;
    }
    else
    {
      v29 = 0;
      v30 = (MIL::Builder::OperationBuilder **)(8 * v25);
      v31 = 0;
      *(_QWORD *)(8 * v25) = v15;
      v18 = 8 * v25 + 8;
      v32 = (char *)((char *)v17 - (char *)v23);
      if (v17 == v23)
      {
LABEL_45:
        *a6 = v30;
        a6[1] = (MIL::Builder::OperationBuilder **)v18;
        a6[2] = v31;
        if (v17)
          operator delete(v17);
LABEL_47:
        a6[1] = (MIL::Builder::OperationBuilder **)v18;
        v48[0] = a1;
        LOBYTE(v12) = 1;
        *((_BYTE *)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)a4, (uint64_t *)a1, (uint64_t)&std::piecewise_construct, (_QWORD **)v48)+ 32) = 1;
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v12 & 1;
LABEL_48:
        operator delete(v50.__r_.__value_.__l.__data_);
        return v12 & 1;
      }
    }
    v36 = (unint64_t)(v32 - 8);
    if (v36 < 0x58)
      goto LABEL_54;
    if ((unint64_t)((char *)v17 - v29 - v24) < 0x20)
      goto LABEL_54;
    v37 = (v36 >> 3) + 1;
    v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v17[v38 / 0xFFFFFFFFFFFFFFF8];
    v30 = (MIL::Builder::OperationBuilder **)((char *)v30 - v38);
    v40 = &v29[8 * v25 - 16];
    v41 = v17 - 2;
    v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = *(_OWORD *)v41;
      *(v40 - 1) = *((_OWORD *)v41 - 1);
      *v40 = v43;
      v40 -= 2;
      v41 -= 4;
      v42 -= 4;
    }
    while (v42);
    v17 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_54:
      do
      {
        v44 = *--v17;
        *--v30 = v44;
      }
      while (v17 != v23);
    }
    v17 = *a6;
    goto LABEL_45;
  }
  MIL::Builder::OperationBuilder::GetInputArguments(*a1);
  v19 = (MIL::Builder::Variable *)__p;
  if (__p)
  {
    v12 = 0;
    do
    {
      if (MIL::Builder::Variable::TryGetName(*((MIL::Builder::Variable **)v19 + 2)))
      {
        MIL::Builder::BlockBuilder::TryGetOperation();
        if (v46)
        v20 = v47;
        if (v47)
        {
          p_shared_owners = (unint64_t *)&v47->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
      v19 = *(MIL::Builder::Variable **)v19;
    }
    while (v19);
    v33 = __p;
    if (__p)
    {
      do
      {
        v34 = (_QWORD *)*v33;
        operator delete(v33);
        v33 = v34;
      }
      while (v34);
    }
    v35 = v48[0];
    v48[0] = 0;
    if (v35)
      goto LABEL_30;
  }
  else
  {
    LOBYTE(v12) = 0;
    v35 = v48[0];
    v48[0] = 0;
    if (v35)
LABEL_30:
      operator delete(v35);
  }
  if ((v12 & 1) != 0)
  {
    v48[0] = *a1;
    std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>(a3, (uint64_t *)v48, v48);
  }
  v48[0] = a1;
  *((_BYTE *)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>((uint64_t)a4, (uint64_t *)a1, (uint64_t)&std::piecewise_construct, (_QWORD **)v48)+ 32) = v12 & 1;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_48;
  return v12 & 1;
}

void sub_19112A8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(uint64_t a1, MIL::Builder::BlockBuilder **a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t Operator;
  uint64_t v11;
  _BOOL4 v14;
  MIL::Builder::OperationBuilder **v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  MIL::Builder::OperationBuilder **v19;
  void **v20;
  void **v21;
  void **v22;
  std::__shared_weak_count *v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int8x8_t *v39;
  MIL::Builder::OperationBuilder **v40;
  int8x8_t *v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  void *v45;
  void **v46;
  MIL::Builder::OperationBuilder **v47;
  MIL::Builder::OperationBuilder **v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  int8x8_t v58;
  uint8x8_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t **v75;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  void *v83;
  _QWORD *v84;
  void *v85;
  MIL::Builder::OperationBuilder **v86;
  MIL::Builder::OperationBuilder **v87;
  MIL::Builder::OperationBuilder **v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::runtime_error *exception;
  MIL::Location *Location;
  std::string *v98;
  __int128 v99;
  int8x8_t *v100;
  unsigned int **v101;
  MIL::Builder::OperationBuilder **v102;
  void *v104[2];
  void *v105[2];
  int v106;
  void *v107;
  MIL::Builder::OperationBuilder **v108;
  uint64_t v109;
  _BYTE v110[32];
  int v111;
  void *__p[2];
  __int128 v113;
  int v114;
  void *v115;
  std::__shared_weak_count *v116;
  MIL::Builder::OperationBuilder **v117;
  MIL::Builder::OperationBuilder **v118;
  unint64_t v119;
  uint64_t v120[2];
  char v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 56) < a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    Location = (MIL::Location *)MIL::Builder::BlockBuilder::GetLocation(*a2);
    MIL::Location::GetDescription(Location);
    v98 = std::string::insert((std::string *)v110, 0, "reached max supported Block nesting level at ");
    v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    *(_QWORD *)&v113 = *((_QWORD *)&v98->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v8 = 0;
  v117 = 0;
  v118 = 0;
  v9 = (a5 + 1);
  v119 = 0;
  while (MIL::Builder::BlockBuilder::GetNumOperations(*a2) > v8)
  {
    MIL::Builder::BlockBuilder::GetOperation(*a2);
    Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)v110);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
    Espresso::AOT::GetOperatorType(v11, (std::string *)__p);
    if ((SBYTE7(v113) & 0x80000000) == 0)
    {
      if (SBYTE7(v113) != 11)
        goto LABEL_29;
      if (__p[0] != (void *)0x74735F6574697277 || *(void **)((char *)__p + 3) != (void *)0x65746174735F6574)
        goto LABEL_29;
LABEL_21:
      v15 = v118;
      if ((unint64_t)v118 >= v119)
      {
        v19 = (MIL::Builder::OperationBuilder **)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v117, (__int128 *)v110);
      }
      else
      {
        *v118 = *(MIL::Builder::OperationBuilder **)v110;
        v16 = *(_QWORD *)&v110[8];
        v15[1] = *(MIL::Builder::OperationBuilder **)&v110[8];
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        v19 = v15 + 2;
      }
      v118 = v19;
      goto LABEL_29;
    }
    if (__p[1] != (void *)11)
    {
      operator delete(__p[0]);
      goto LABEL_29;
    }
    v14 = *(_QWORD *)__p[0] != 0x74735F6574697277 || *(_QWORD *)((char *)__p[0] + 3) != 0x65746174735F6574;
    operator delete(__p[0]);
    if (!v14)
      goto LABEL_21;
LABEL_29:
    MIL::Builder::OperationBuilder::GetBlocks(*(MIL::Builder::OperationBuilder **)v110);
    v21 = (void **)__p[0];
    v20 = (void **)__p[1];
    if (__p[0] == __p[1])
    {
      if (!__p[0])
        goto LABEL_60;
      goto LABEL_31;
    }
    do
    {
      v24 = *v21;
      v25 = (std::__shared_weak_count *)v21[1];
      v104[0] = *v21;
      v104[1] = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
        v115 = v24;
        v116 = v25;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      else
      {
        v115 = v24;
        v116 = 0;
      }
      Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(a1, &v115, a3, a4, v9);
      if (!v25)
        goto LABEL_46;
      v29 = (unint64_t *)&v25->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        v31 = (std::__shared_weak_count *)v104[1];
        if (!v104[1])
          goto LABEL_34;
      }
      else
      {
LABEL_46:
        v31 = (std::__shared_weak_count *)v104[1];
        if (!v104[1])
          goto LABEL_34;
      }
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
LABEL_34:
      v21 += 2;
    }
    while (v21 != v20);
    v21 = (void **)__p[0];
    if (!__p[0])
    {
LABEL_60:
      v23 = *(std::__shared_weak_count **)&v110[8];
      if (!*(_QWORD *)&v110[8])
        goto LABEL_3;
LABEL_63:
      v37 = (unint64_t *)&v23->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      goto LABEL_3;
    }
LABEL_31:
    v22 = (void **)__p[1];
    if (__p[1] == v21)
    {
      __p[1] = v21;
      operator delete(v21);
      v23 = *(std::__shared_weak_count **)&v110[8];
      if (!*(_QWORD *)&v110[8])
        goto LABEL_3;
      goto LABEL_63;
    }
    do
    {
      v34 = (std::__shared_weak_count *)*(v22 - 1);
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v22 -= 2;
    }
    while (v22 != v21);
    __p[1] = v21;
    operator delete(__p[0]);
    v23 = *(std::__shared_weak_count **)&v110[8];
    if (*(_QWORD *)&v110[8])
      goto LABEL_63;
LABEL_3:
    ++v8;
  }
  __p[0] = *a2;
  v39 = (int8x8_t *)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)__p);
  if (!v39)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  *(_OWORD *)__p = 0u;
  v113 = 0u;
  v114 = 1065353216;
  v40 = v117;
  v102 = v118;
  if (v117 == v118)
  {
    __p[0] = 0;
    goto LABEL_153;
  }
  v41 = v39 + 3;
  v100 = v39;
  v101 = (unsigned int **)(a1 + 8);
  while (2)
  {
    memset(v110, 0, sizeof(v110));
    v111 = 1065353216;
    v104[0] = *v40;
    v42 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v41, (uint64_t *)v104);
    if (!v42)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v43 = *((unsigned int *)v42 + 6);
    v107 = 0;
    v108 = 0;
    v109 = 0;
    v121 = 10;
    strcpy((char *)v120, "read_state");
    *(_OWORD *)v104 = 0u;
    *(_OWORD *)v105 = 0u;
    v106 = 1065353216;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v104, (uint64_t)v120, (uint64_t)v120);
    v44 = (void **)v105[0];
    if (v105[0])
    {
      do
      {
        v46 = (void **)*v44;
        if (*((char *)v44 + 39) < 0)
          operator delete(v44[2]);
        operator delete(v44);
        v44 = v46;
      }
      while (v46);
    }
    v45 = v104[0];
    v104[0] = 0;
    if (v45)
      operator delete(v45);
    if (v121 < 0)
    {
      operator delete((void *)v120[0]);
      if (!*(_QWORD *)&v110[24])
        goto LABEL_144;
    }
    else if (!*(_QWORD *)&v110[24])
    {
      goto LABEL_144;
    }
    v48 = (MIL::Builder::OperationBuilder **)v107;
    v47 = v108;
    while (v48 != v47)
    {
      MIL::Builder::OperationBuilder::GetChildOperations(*v48);
      v49 = v105[0];
      if (v105[0])
      {
        do
        {
          v120[0] = v49[2];
          std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>((uint64_t)v110, v120, v120);
          v49 = (_QWORD *)*v49;
        }
        while (v49);
        v50 = v105[0];
        if (v105[0])
        {
          do
          {
            v52 = v50;
            v50 = (_QWORD *)*v50;
            v53 = (std::__shared_weak_count *)v52[3];
            if (v53)
            {
              v54 = (unint64_t *)&v53->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            operator delete(v52);
          }
          while (v50);
        }
      }
      v51 = v104[0];
      v104[0] = 0;
      if (v51)
        operator delete(v51);
      ++v48;
    }
    v56 = *(_QWORD **)&v110[16];
    if (!*(_QWORD *)&v110[16])
      goto LABEL_142;
    v57 = **(_QWORD ***)&v110[16];
    if (!**(_QWORD **)&v110[16])
      goto LABEL_142;
    v58 = v100[4];
    v59 = (uint8x8_t)vcnt_s8(v58);
    v59.i16[0] = vaddlv_u8(v59);
    v60 = *(_QWORD *)&v58 - 1;
    while (2)
    {
      if (!*(_QWORD *)&v58)
        goto LABEL_172;
      v61 = v57[2];
      v62 = 0x9DDFEA08EB382D69 * (((8 * v61) + 8) ^ HIDWORD(v61));
      v63 = 0x9DDFEA08EB382D69 * (HIDWORD(v61) ^ (v62 >> 47) ^ v62);
      v64 = 0x9DDFEA08EB382D69 * (v63 ^ (v63 >> 47));
      if (v59.u32[0] > 1uLL)
      {
        v65 = 0x9DDFEA08EB382D69 * (v63 ^ (v63 >> 47));
        if (v64 >= *(_QWORD *)&v58)
          v65 = v64 % *(_QWORD *)&v58;
      }
      else
      {
        v65 = v64 & v60;
      }
      v66 = *(uint64_t ***)(*(_QWORD *)v41 + 8 * v65);
      if (!v66 || (v67 = *v66) == 0)
LABEL_172:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v68 = v56[2];
      if (v59.u32[0] < 2uLL)
      {
        while (1)
        {
          v69 = v67[1];
          if (v69 == v64)
          {
            if (v67[2] == v61)
              goto LABEL_115;
          }
          else if ((v69 & v60) != v65)
          {
            goto LABEL_172;
          }
          v67 = (uint64_t *)*v67;
          if (!v67)
            goto LABEL_172;
        }
      }
      while (2)
      {
        v74 = v67[1];
        if (v74 != v64)
        {
          if (v74 >= *(_QWORD *)&v58)
            v74 %= *(_QWORD *)&v58;
          if (v74 != v65)
            goto LABEL_172;
          goto LABEL_118;
        }
        if (v67[2] != v61)
        {
LABEL_118:
          v67 = (uint64_t *)*v67;
          if (!v67)
            goto LABEL_172;
          continue;
        }
        break;
      }
LABEL_115:
      v70 = 0x9DDFEA08EB382D69 * (((8 * v68) + 8) ^ HIDWORD(v68));
      v71 = 0x9DDFEA08EB382D69 * (HIDWORD(v68) ^ (v70 >> 47) ^ v70);
      v72 = 0x9DDFEA08EB382D69 * (v71 ^ (v71 >> 47));
      if (v59.u32[0] > 1uLL)
      {
        v73 = v72;
        if (v72 >= *(_QWORD *)&v58)
          v73 = v72 % *(_QWORD *)&v58;
      }
      else
      {
        v73 = v72 & v60;
      }
      v75 = *(uint64_t ***)(*(_QWORD *)v41 + 8 * v73);
      if (!v75)
        goto LABEL_172;
      v76 = *v75;
      if (!v76)
        goto LABEL_172;
      v77 = *((_DWORD *)v67 + 6);
      if (v59.u32[0] < 2uLL)
      {
        while (1)
        {
          v78 = v76[1];
          if (v78 == v72)
          {
            if (v76[2] == v68)
              goto LABEL_99;
          }
          else if ((v78 & v60) != v73)
          {
            goto LABEL_172;
          }
          v76 = (uint64_t *)*v76;
          if (!v76)
            goto LABEL_172;
        }
      }
      while (2)
      {
        v79 = v76[1];
        if (v79 != v72)
        {
          if (v79 >= *(_QWORD *)&v58)
            v79 %= *(_QWORD *)&v58;
          if (v79 != v73)
            goto LABEL_172;
LABEL_136:
          v76 = (uint64_t *)*v76;
          if (!v76)
            goto LABEL_172;
          continue;
        }
        break;
      }
      if (v76[2] != v68)
        goto LABEL_136;
LABEL_99:
      if (v77 < *((_DWORD *)v76 + 6))
        v56 = v57;
      v57 = (_QWORD *)*v57;
      if (v57)
        continue;
      break;
    }
LABEL_142:
    v80 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(v41, v56 + 2);
    if (!v80)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    Espresso::AOT::GroupTagger::MoveOpsAndAssignGroupIdsForInterval(a3, *((unsigned int *)v80 + 6), v43, (uint64_t)a2, v110, v41, v101);
LABEL_144:
    if (v107)
    {
      v108 = (MIL::Builder::OperationBuilder **)v107;
      operator delete(v107);
    }
    v81 = *(_QWORD **)&v110[16];
    if (*(_QWORD *)&v110[16])
    {
      do
      {
        v82 = (_QWORD *)*v81;
        operator delete(v81);
        v81 = v82;
      }
      while (v82);
    }
    v83 = *(void **)v110;
    *(_QWORD *)v110 = 0;
    if (v83)
      operator delete(v83);
    v40 += 2;
    if (v40 != v102)
      continue;
    break;
  }
  v84 = (_QWORD *)v113;
  while (v84)
  {
    v92 = v84;
    v84 = (_QWORD *)*v84;
    v93 = (std::__shared_weak_count *)v92[3];
    if (v93)
    {
      v94 = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    operator delete(v92);
  }
  v85 = __p[0];
  __p[0] = 0;
  if (v85)
    operator delete(v85);
LABEL_153:
  v86 = v117;
  if (v117)
  {
    v87 = v118;
    v88 = v117;
    if (v118 != v117)
    {
      do
      {
        v89 = (std::__shared_weak_count *)*(v87 - 1);
        if (v89)
        {
          v90 = (unint64_t *)&v89->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v87 -= 2;
      }
      while (v87 != v86);
      v88 = v117;
    }
    v118 = v86;
    operator delete(v88);
  }
}

void sub_19112B2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  int v36;

  if (a35 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v36 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlock(uint64_t a1, MIL::Builder::BlockBuilder **a2, _QWORD *a3, _QWORD *a4, int a5)
{
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  MIL::Builder::OperationBuilder **v14;
  uint64_t Operator;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int8x8_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  int v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t *v68;
  unint64_t v69;
  char *v70;
  __int128 v71;
  char *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL4 v80;
  int8x8_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint8x8_t v85;
  unint64_t v86;
  uint64_t **v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint8x8_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  void *v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  void *v123;
  char *v124;
  char *v125;
  _QWORD *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  char *v134;
  std::__shared_weak_count *v135;
  std::string::size_type v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::string::size_type v143;
  char *v144;
  char *v145;
  char *v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  _OWORD *v150;
  _OWORD *v151;
  void *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::runtime_error *exception;
  MIL::Location *Location;
  std::string *v158;
  __int128 v159;
  _OWORD *v160;
  int v161;
  _QWORD *v162;
  int8x8_t *v163;
  int8x8_t *v164;
  MIL::IRTensorValueType *Scalar;
  __int128 v166;
  std::__shared_weak_count *v167;
  std::string v168;
  std::__shared_weak_count *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  std::string v172;
  void *__p[2];
  __int128 v174;
  int64x2_t v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  char *v181;
  char *v182;
  _QWORD *v183;
  _OWORD *v184;
  unint64_t v185;
  _BYTE v186[32];
  int v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 56) < a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    Location = (MIL::Location *)MIL::Builder::BlockBuilder::GetLocation(*a2);
    MIL::Location::GetDescription(Location);
    v158 = std::string::insert((std::string *)v186, 0, "reached max supported Block nesting level at ");
    v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
    *(_QWORD *)&v174 = *((_QWORD *)&v158->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v159;
    v158->__r_.__value_.__l.__size_ = 0;
    v158->__r_.__value_.__r.__words[2] = 0;
    v158->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v183 = 0;
  v184 = 0;
  v185 = 0;
  MIL::Builder::BlockBuilder::GetOperations(*a2);
  v10 = v181;
  if (v182 != v181)
  {
    v11 = 0;
    v12 = (a5 + 1);
    do
    {
      v14 = (MIL::Builder::OperationBuilder **)&v10[16 * v11];
      Operator = MIL::Builder::OperationBuilder::GetOperator(*v14);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Operator + 16))(Operator);
      Espresso::AOT::GetOperatorType(v16, (std::string *)__p);
      if (SBYTE7(v174) < 0)
      {
        if (__p[1] != (void *)8)
        {
          operator delete(__p[0]);
          goto LABEL_21;
        }
        v17 = *(_QWORD *)__p[0];
        operator delete(__p[0]);
        if (v17 != 0x657A69746E617571)
          goto LABEL_21;
      }
      else if (SBYTE7(v174) != 8 || __p[0] != (void *)0x657A69746E617571)
      {
        goto LABEL_21;
      }
      v18 = v184;
      if ((unint64_t)v184 >= v185)
      {
        v22 = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v183, (__int128 *)v14);
      }
      else
      {
        v19 = *(_OWORD *)v14;
        *v184 = *(_OWORD *)v14;
        if (*((_QWORD *)&v19 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v22 = v18 + 1;
      }
      v184 = v22;
LABEL_21:
      MIL::Builder::OperationBuilder::GetBlocks(*v14);
      v23 = (uint64_t *)__p[0];
      v24 = (uint64_t *)__p[1];
      if (__p[0] == __p[1])
      {
        if (__p[0])
          goto LABEL_44;
        goto LABEL_6;
      }
      do
      {
        v25 = *v23;
        v26 = (std::__shared_weak_count *)v23[1];
        *(_QWORD *)v186 = *v23;
        *(_QWORD *)&v186[8] = v26;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(p_shared_owners);
          while (__stxr(v28 + 1, p_shared_owners));
          v179 = v25;
          v180 = v26;
          do
            v29 = __ldxr(p_shared_owners);
          while (__stxr(v29 + 1, p_shared_owners));
        }
        else
        {
          v179 = v25;
          v180 = 0;
        }
        Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlock(a1, &v179, a3, a4, v12);
        if (!v26)
          goto LABEL_36;
        v30 = (unint64_t *)&v26->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          v32 = *(std::__shared_weak_count **)&v186[8];
          if (!*(_QWORD *)&v186[8])
            goto LABEL_24;
        }
        else
        {
LABEL_36:
          v32 = *(std::__shared_weak_count **)&v186[8];
          if (!*(_QWORD *)&v186[8])
            goto LABEL_24;
        }
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
LABEL_24:
        v23 += 2;
      }
      while (v23 != v24);
      v23 = (uint64_t *)__p[0];
      if (__p[0])
      {
LABEL_44:
        v35 = (uint64_t *)__p[1];
        v13 = v23;
        if (__p[1] != v23)
        {
          do
          {
            v36 = (std::__shared_weak_count *)*(v35 - 1);
            if (v36)
            {
              v37 = (unint64_t *)&v36->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            v35 -= 2;
          }
          while (v35 != v23);
          v13 = (uint64_t *)__p[0];
        }
        __p[1] = v23;
        operator delete(v13);
      }
LABEL_6:
      ++v11;
      v10 = v181;
    }
    while (v11 < (v182 - v181) >> 4);
  }
  __p[0] = *a2;
  v39 = (int8x8_t *)std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(a4, (uint64_t *)__p);
  if (!v39)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  MIL::Builder::BlockBuilder::GetContext(*a2);
  v163 = v39;
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  v40 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_57;
  v41 = (unint64_t *)((char *)__p[1] + 8);
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    v43 = v183;
    v160 = v184;
    if (v183 != (_QWORD *)v184)
    {
LABEL_58:
      v164 = v39 + 3;
      while (1)
      {
        v176 = 0;
        v177 = 0;
        v178 = 0;
        v45 = v43[1];
        *(_QWORD *)v186 = *v43;
        *(_QWORD *)&v186[8] = v45;
        if (v45)
        {
          v46 = (unint64_t *)(v45 + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v174 = 0u;
        v175 = 0u;
        *(_OWORD *)__p = 0u;
        std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__append_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> const*>(__p, v186, 1uLL);
        v48 = *(std::__shared_weak_count **)&v186[8];
        if (*(_QWORD *)&v186[8])
        {
          v49 = (unint64_t *)(*(_QWORD *)&v186[8] + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        memset(v186, 0, sizeof(v186));
        v187 = 1065353216;
        v172.__r_.__value_.__r.__words[0] = *v43;
        v51 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>(v164, (uint64_t *)&v172);
        v162 = v43;
        if (!v51)
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (v175.i64[1])
          break;
LABEL_203:
        v122 = *(_QWORD **)&v186[16];
        if (*(_QWORD *)&v186[16])
        {
          do
          {
            v126 = v122;
            v122 = (_QWORD *)*v122;
            v127 = (std::__shared_weak_count *)v126[3];
            if (v127)
            {
              v128 = (unint64_t *)&v127->__shared_owners_;
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
            operator delete(v126);
          }
          while (v122);
        }
        v123 = *(void **)v186;
        *(_QWORD *)v186 = 0;
        if (v123)
          operator delete(v123);
        std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::~deque[abi:ne180100]((uint64_t)__p);
        v124 = v176;
        if (v176)
        {
          v125 = v177;
          v44 = v176;
          if (v177 != v176)
          {
            do
            {
              v130 = (std::__shared_weak_count *)*((_QWORD *)v125 - 1);
              if (v130)
              {
                v131 = (unint64_t *)&v130->__shared_owners_;
                do
                  v132 = __ldaxr(v131);
                while (__stlxr(v132 - 1, v131));
                if (!v132)
                {
                  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                  std::__shared_weak_count::__release_weak(v130);
                }
              }
              v125 -= 16;
            }
            while (v125 != v124);
            v44 = v176;
          }
          v177 = v124;
          operator delete(v44);
        }
        v43 = v162 + 2;
        if (v162 + 2 == (_QWORD *)v160)
          goto LABEL_245;
      }
      v52 = *((_DWORD *)v51 + 6);
      v161 = v52;
      while (1)
      {
        v53 = *(_OWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v175.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v175.u8[0]);
        v166 = v53;
        v54 = *(std::__shared_weak_count **)(*(_QWORD *)((char *)__p[1]
                                                       + (((unint64_t)v175.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                                           + 16 * v175.u8[0]
                                           + 8);
        if (*((_QWORD *)&v53 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
          v58 = v177;
          v57 = v178;
          if (v177 >= v178)
          {
LABEL_83:
            v61 = v176;
            v62 = (v58 - v176) >> 4;
            v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 60)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v64 = v57 - v176;
            if (v64 >> 3 > v63)
              v63 = v64 >> 3;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
              v65 = 0xFFFFFFFFFFFFFFFLL;
            else
              v65 = v63;
            if (v65 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v66 = (char *)operator new(16 * v65);
            v67 = &v66[16 * v62];
            *(_OWORD *)v67 = v166;
            if (v54)
            {
              v68 = (unint64_t *)&v54->__shared_owners_;
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
              v58 = v177;
            }
            v70 = &v66[16 * v65];
            v60 = v67 + 16;
            if (v58 == v61)
            {
              v176 = v67;
              v177 = v67 + 16;
              v178 = &v66[16 * v65];
            }
            else
            {
              do
              {
                v71 = *((_OWORD *)v58 - 1);
                v58 -= 16;
                *((_OWORD *)v67 - 1) = v71;
                v67 -= 16;
                *(_QWORD *)v58 = 0;
                *((_QWORD *)v58 + 1) = 0;
              }
              while (v58 != v61);
              v61 = v176;
              v72 = v177;
              v176 = v67;
              v177 = v60;
              v178 = v70;
              while (v72 != v61)
              {
                v73 = (std::__shared_weak_count *)*((_QWORD *)v72 - 1);
                if (v73)
                {
                  v74 = (unint64_t *)&v73->__shared_owners_;
                  do
                    v75 = __ldaxr(v74);
                  while (__stlxr(v75 - 1, v74));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
                v72 -= 16;
              }
            }
            if (v61)
              operator delete(v61);
            goto LABEL_107;
          }
          *(_OWORD *)v177 = v53;
          do
            v59 = __ldxr(v55);
          while (__stxr(v59 + 1, v55));
          v60 = v58 + 16;
        }
        else
        {
          v58 = v177;
          v57 = v178;
          if (v177 >= v178)
            goto LABEL_83;
          *(_OWORD *)v177 = (unint64_t)v53;
          v60 = v58 + 16;
        }
LABEL_107:
        v177 = v60;
        v76 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v166);
        v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 16))(v76);
        Espresso::AOT::GetOperatorType(v77, &v172);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v172.__r_.__value_.__l.__size_ == 10)
          {
            v80 = *(_QWORD *)v172.__r_.__value_.__l.__data_ != 0x69746E6175716564
               || *(_WORD *)(v172.__r_.__value_.__r.__words[0] + 8) != 25978;
            operator delete(v172.__r_.__value_.__l.__data_);
            if (!v80)
            {
LABEL_123:
              v81 = v163[4];
              if (!*(_QWORD *)&v81)
                goto LABEL_268;
              v82 = 0x9DDFEA08EB382D69 * (((8 * v166) + 8) ^ DWORD1(v166));
              v83 = 0x9DDFEA08EB382D69 * (DWORD1(v166) ^ (v82 >> 47) ^ v82);
              v84 = 0x9DDFEA08EB382D69 * (v83 ^ (v83 >> 47));
              v85 = (uint8x8_t)vcnt_s8(v81);
              v85.i16[0] = vaddlv_u8(v85);
              if (v85.u32[0] > 1uLL)
              {
                v86 = v84;
                if (v84 >= *(_QWORD *)&v81)
                  v86 = v84 % *(_QWORD *)&v81;
              }
              else
              {
                v86 = (*(_QWORD *)&v81 - 1) & v84;
              }
              v112 = *(uint64_t ***)(*(_QWORD *)v164 + 8 * v86);
              if (!v112 || (v113 = *v112) == 0)
LABEL_268:
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              if (v85.u32[0] < 2uLL)
              {
                v114 = *(_QWORD *)&v81 - 1;
                while (1)
                {
                  v116 = v113[1];
                  if (v84 == v116)
                  {
                    if (v113[2] == (_QWORD)v166)
                      goto LABEL_188;
                  }
                  else if ((v116 & v114) != v86)
                  {
                    goto LABEL_268;
                  }
                  v113 = (uint64_t *)*v113;
                  if (!v113)
                    goto LABEL_268;
                }
              }
              while (1)
              {
                v115 = v113[1];
                if (v84 == v115)
                {
                  if (v113[2] == (_QWORD)v166)
                  {
LABEL_188:
                    if (*((_DWORD *)v113 + 6) < v52)
                      v52 = *((_DWORD *)v113 + 6);
                    goto LABEL_190;
                  }
                }
                else
                {
                  if (v115 >= *(_QWORD *)&v81)
                    v115 %= *(_QWORD *)&v81;
                  if (v115 != v86)
                    goto LABEL_268;
                }
                v113 = (uint64_t *)*v113;
                if (!v113)
                  goto LABEL_268;
              }
            }
          }
          else
          {
            operator delete(v172.__r_.__value_.__l.__data_);
          }
        }
        else if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) == 10
               && v172.__r_.__value_.__r.__words[0] == 0x69746E6175716564
               && LOWORD(v172.__r_.__value_.__r.__words[1]) == 25978)
        {
          goto LABEL_123;
        }
        MIL::Builder::OperationBuilder::GetInputArguments((MIL::Builder::OperationBuilder *)v166);
        v87 = (uint64_t **)v172.__r_.__value_.__r.__words[2];
        if (v172.__r_.__value_.__r.__words[2])
        {
          do
          {
            if (MIL::Builder::Variable::TryGetName((MIL::Builder::Variable *)v87[2]))
            {
              MIL::Builder::BlockBuilder::TryGetOperation();
              v88 = v170;
              if (v170)
              {
                if (*(_QWORD *)&v186[8])
                {
                  v89 = 0x9DDFEA08EB382D69 * (((8 * v170) + 8) ^ HIDWORD(v170));
                  v90 = 0x9DDFEA08EB382D69 * (HIDWORD(v170) ^ (v89 >> 47) ^ v89);
                  v91 = 0x9DDFEA08EB382D69 * (v90 ^ (v90 >> 47));
                  v92 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v186[8]);
                  v92.i16[0] = vaddlv_u8(v92);
                  if (v92.u32[0] > 1uLL)
                  {
                    v93 = v91;
                    if (v91 >= *(_QWORD *)&v186[8])
                      v93 = v91 % *(_QWORD *)&v186[8];
                  }
                  else
                  {
                    v93 = (*(_QWORD *)&v186[8] - 1) & v91;
                  }
                  v94 = *(_QWORD **)(*(_QWORD *)v186 + 8 * v93);
                  if (v94)
                  {
                    v95 = (_QWORD *)*v94;
                    if (v95)
                    {
                      if (v92.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v97 = v95[1];
                          if (v91 == v97)
                          {
                            if (v95[2] == v170)
                              goto LABEL_162;
                          }
                          else if ((v97 & (*(_QWORD *)&v186[8] - 1)) != v93)
                          {
                            goto LABEL_152;
                          }
                          v95 = (_QWORD *)*v95;
                          if (!v95)
                            goto LABEL_152;
                        }
                      }
                      do
                      {
                        v96 = v95[1];
                        if (v91 == v96)
                        {
                          if (v95[2] == v170)
                            goto LABEL_162;
                        }
                        else
                        {
                          if (v96 >= *(_QWORD *)&v186[8])
                            v96 %= *(_QWORD *)&v186[8];
                          if (v96 != v93)
                            break;
                        }
                        v95 = (_QWORD *)*v95;
                      }
                      while (v95);
                    }
                  }
                }
LABEL_152:
                v98 = (char *)__p[1];
                if ((void *)v174 == __p[1])
                  v99 = 0;
                else
                  v99 = 32 * (v174 - (unint64_t)__p[1]) - 1;
                v100 = v175.i64[1];
                v101 = v175.i64[1] + v175.i64[0];
                if (v99 == v175.i64[1] + v175.i64[0])
                {
                  std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__add_back_capacity((uint64_t)__p);
                  v98 = (char *)__p[1];
                  v100 = v175.i64[1];
                  v101 = v175.i64[1] + v175.i64[0];
                  v88 = v170;
                }
                v102 = (unint64_t *)(*(_QWORD *)&v98[(v101 >> 5) & 0x7FFFFFFFFFFFFF8]
                                          + 16 * v101);
                *v102 = v88;
                v103 = v171;
                v102[1] = (unint64_t)v171;
                if (v103)
                {
                  v104 = (unint64_t *)&v103->__shared_owners_;
                  do
                    v105 = __ldxr(v104);
                  while (__stxr(v105 + 1, v104));
                  v100 = v175.i64[1];
                }
                v175.i64[1] = v100 + 1;
                std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v186, &v170, &v170);
              }
LABEL_162:
              v106 = v171;
              if (v171)
              {
                v107 = (unint64_t *)&v171->__shared_owners_;
                do
                  v108 = __ldaxr(v107);
                while (__stlxr(v108 - 1, v107));
                if (!v108)
                {
                  ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                  std::__shared_weak_count::__release_weak(v106);
                }
              }
            }
            v87 = (uint64_t **)*v87;
          }
          while (v87);
          v109 = (_QWORD *)v172.__r_.__value_.__r.__words[2];
          if (v172.__r_.__value_.__r.__words[2])
          {
            do
            {
              v110 = (_QWORD *)*v109;
              operator delete(v109);
              v109 = v110;
            }
            while (v110);
          }
        }
        v111 = (void *)v172.__r_.__value_.__r.__words[0];
        v172.__r_.__value_.__r.__words[0] = 0;
        if (v111)
          operator delete(v111);
LABEL_190:
        v117 = *(std::__shared_weak_count **)(*(_QWORD *)((char *)__p[1]
                                                        + (((unint64_t)v175.i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                                            + 16 * v175.u8[0]
                                            + 8);
        if (v117)
        {
          v118 = (unint64_t *)&v117->__shared_owners_;
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
        v175 = vaddq_s64(v175, (int64x2_t)xmmword_191A82A90);
        if (v175.i64[0] >= 0x200uLL)
        {
          operator delete(*(void **)__p[1]);
          __p[1] = (char *)__p[1] + 8;
          v175.i64[0] -= 256;
        }
        if (v54)
        {
          v120 = (unint64_t *)&v54->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        if (!v175.i64[1])
        {
          if (v52 == v161)
            goto LABEL_203;
          Espresso::AOT::GroupTagger::AssignGroupIdsForInterval(a3, v52, v161, &v181, (unsigned int **)(a1 + 8));
          v133 = v176;
          v134 = v177;
          while (2)
          {
            if (v133 == v134)
              goto LABEL_203;
            if (*(char *)(a1 + 55) < 0)
              std::string::__init_copy_ctor_external(&v168, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
            else
              v168 = *(std::string *)(a1 + 32);
            MIL::IRTensorValueType::MakeBoolValue(Scalar);
            if (v172.__r_.__value_.__r.__words[0])
            {
              v135 = (std::__shared_weak_count *)operator new();
              v136 = v172.__r_.__value_.__r.__words[0];
              v135->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
              v135->__shared_owners_ = 0;
              v135->__shared_weak_owners_ = 0;
              v135[1].__vftable = (std::__shared_weak_count_vtbl *)v136;
            }
            else
            {
              v135 = 0;
            }
            v167 = v135;
            v172.__r_.__value_.__r.__words[0] = 0;
            MIL::Builder::OperationBuilder::SetAttribute();
            v137 = v169;
            if (!v169)
              goto LABEL_234;
            v138 = (unint64_t *)&v169->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
              v140 = v167;
              if (v167)
              {
LABEL_235:
                v141 = (unint64_t *)&v140->__shared_owners_;
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
            }
            else
            {
LABEL_234:
              v140 = v167;
              if (v167)
                goto LABEL_235;
            }
            v143 = v172.__r_.__value_.__r.__words[0];
            v172.__r_.__value_.__r.__words[0] = 0;
            if (v143)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v143 + 8))(v143);
            if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v168.__r_.__value_.__l.__data_);
            v133 += 16;
            continue;
          }
        }
      }
    }
  }
  else
  {
LABEL_57:
    v43 = v183;
    v160 = v184;
    if (v183 != (_QWORD *)v184)
      goto LABEL_58;
  }
LABEL_245:
  v144 = v181;
  if (v181)
  {
    v145 = v182;
    v146 = v181;
    if (v182 != v181)
    {
      do
      {
        v147 = (std::__shared_weak_count *)*((_QWORD *)v145 - 1);
        if (v147)
        {
          v148 = (unint64_t *)&v147->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        v145 -= 16;
      }
      while (v145 != v144);
      v146 = v181;
    }
    v182 = v144;
    operator delete(v146);
  }
  v150 = v183;
  if (v183)
  {
    v151 = v184;
    v152 = v183;
    if (v184 != (_OWORD *)v183)
    {
      do
      {
        v153 = (std::__shared_weak_count *)*((_QWORD *)v151 - 1);
        if (v153)
        {
          v154 = (unint64_t *)&v153->__shared_owners_;
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
        }
        --v151;
      }
      while (v151 != v150);
      v152 = v183;
    }
    v184 = v150;
    operator delete(v152);
  }
}

void sub_19112C404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  int v46;
  uint64_t v47;

  if (a45 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 121) < 0)
  {
    operator delete(*(void **)(v47 - 144));
    if ((v46 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v46)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v45);
  _Unwind_Resume(a1);
}

BOOL Espresso::AOT::E5RTGroupMatcher::HasBackend(uint64_t a1, int a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)(a1 + 8);
  v3 = *(_DWORD **)(a1 + 16);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_DWORD **)(a1 + 16);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

uint64_t Espresso::AOT::E5RTGroupMatcher::TagGroups(uint64_t a1, MIL::Transform::ProgramTransformer *a2, uint64_t *a3)
{
  uint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  MIL::Builder::OperationBuilder **v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  MIL::Builder::OperationBuilder **v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  MIL::Builder::BlockBuilder *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  void *v81;
  uint64_t *v82;
  uint64_t *v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v102;
  _QWORD *Functions;
  uint64_t v104;
  __int128 v106;
  MIL::Builder::FunctionBuilder *v107;
  std::__shared_weak_count *v108;
  __int128 v109;
  MIL::Builder::BlockBuilder *v110;
  std::__shared_weak_count *v111;
  MIL::Builder::BlockBuilder *v112;
  std::__shared_weak_count *v113;
  __int128 v114;
  uint64_t v115;
  void *v116;
  uint64_t *v117;
  void *__p;
  MIL::Builder::OperationBuilder **v119;
  MIL::Builder::BlockBuilder *v120;
  void *v121[2];
  void *v122[2];
  int v123;
  void *v124;
  uint64_t *v125;
  unint64_t v126;
  MIL::Builder::ProgramBuilder *v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  char v133;
  __int128 v134;
  MIL::Builder::FunctionBuilder *v135;
  std::__shared_weak_count *v136;
  _QWORD *v137[2];

  kdebug_trace();
  MIL::Transform::ProgramTransformer::GetProgramBuilder(a2);
  if (v128)
  {
    p_shared_owners = &v128->__shared_owners_;
    do
      v6 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v6 - 1, (unint64_t *)p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  Functions = (_QWORD *)MIL::Builder::ProgramBuilder::GetFunctions(v127);
  v7 = *a3;
  v102 = a3[1];
  if (*a3 != v102)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(Functions, v7))goto LABEL_9;
      v104 = v7;
      MIL::Builder::ProgramBuilder::GetFunction();
      MIL::Builder::FunctionBuilder::SelectedSpecialization(v135);
      MIL::Builder::FunctionBuilder::GetBlock();
      Espresso::AOT::GroupTagger::GroupTagger((Espresso::AOT::GroupTagger *)&v127, (MIL::Builder::BlockBuilder *)v134);
      v124 = 0;
      v125 = 0;
      v126 = 0;
      v8 = (uint64_t *)std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v124, &v134);
      v9 = (uint64_t *)v124;
      v125 = v8;
      *(_OWORD *)v121 = 0u;
      *(_OWORD *)v122 = 0u;
      v123 = 1065353216;
      while (v9 != v8)
      {
        v120 = 0;
        v120 = (MIL::Builder::BlockBuilder *)*(v8 - 2);
        MIL::Builder::BlockBuilder::GetOperations(v120);
        v11 = v125;
        v12 = (std::__shared_weak_count *)*(v125 - 1);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
            v125 = v11 - 2;
            v15 = (MIL::Builder::OperationBuilder **)__p;
            v10 = v119;
            if (v119 == __p)
              goto LABEL_71;
LABEL_21:
            v16 = 0;
            while (2)
            {
              MIL::Builder::OperationBuilder::GetBlocks(v15[2 * v16]);
              v18 = (uint64_t *)v116;
              v17 = v117;
              if (v116 == v117)
              {
                if (!v116)
                  goto LABEL_67;
LABEL_57:
                v40 = v117;
                v41 = v18;
                if (v117 != v18)
                {
                  do
                  {
                    v42 = (std::__shared_weak_count *)*(v40 - 1);
                    if (v42)
                    {
                      v43 = (unint64_t *)&v42->__shared_owners_;
                      do
                        v44 = __ldaxr(v43);
                      while (__stlxr(v44 - 1, v43));
                      if (!v44)
                      {
                        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                        std::__shared_weak_count::__release_weak(v42);
                      }
                    }
                    v40 -= 2;
                  }
                  while (v40 != v18);
                  v41 = v116;
                }
                v117 = v18;
                operator delete(v41);
              }
              else
              {
                do
                {
                  v115 = *v18;
                  v137[0] = &v115;
                  std::__hash_table<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::__unordered_map_hasher<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::hash<MIL::Builder::BlockBuilder *>,std::equal_to<MIL::Builder::BlockBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::equal_to<MIL::Builder::BlockBuilder *>,std::hash<MIL::Builder::BlockBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>>>::__emplace_unique_key_args<MIL::Builder::BlockBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::BlockBuilder *&&>,std::tuple<>>((uint64_t)v121, &v115, (uint64_t)&std::piecewise_construct, v137);
                  v20 = v125;
                  if ((unint64_t)v125 >= v126)
                  {
                    v24 = (uint64_t *)v124;
                    v25 = ((char *)v125 - (_BYTE *)v124) >> 4;
                    v26 = v25 + 1;
                    if ((unint64_t)(v25 + 1) >> 60)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v27 = v126 - (_QWORD)v124;
                    if ((uint64_t)(v126 - (_QWORD)v124) >> 3 > v26)
                      v26 = v27 >> 3;
                    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
                      v28 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v28 = v26;
                    if (v28 >> 60)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v29 = (char *)operator new(16 * v28);
                    v30 = &v29[16 * v25];
                    v31 = *(_OWORD *)v18;
                    *(_OWORD *)v30 = *(_OWORD *)v18;
                    if (*((_QWORD *)&v31 + 1))
                    {
                      v32 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
                      do
                        v33 = __ldxr(v32);
                      while (__stxr(v33 + 1, v32));
                      v20 = v125;
                    }
                    v34 = &v29[16 * v28];
                    v19 = (uint64_t *)(v30 + 16);
                    if (v20 == v24)
                    {
                      v124 = &v29[16 * v25];
                      v125 = (uint64_t *)(v30 + 16);
                      v126 = (unint64_t)v34;
                    }
                    else
                    {
                      do
                      {
                        v35 = *((_OWORD *)v20 - 1);
                        v20 -= 2;
                        *((_OWORD *)v30 - 1) = v35;
                        v30 -= 16;
                        *v20 = 0;
                        v20[1] = 0;
                      }
                      while (v20 != v24);
                      v24 = (uint64_t *)v124;
                      v36 = v125;
                      v124 = v30;
                      v125 = v19;
                      v126 = (unint64_t)v34;
                      while (v36 != v24)
                      {
                        v37 = (std::__shared_weak_count *)*(v36 - 1);
                        if (v37)
                        {
                          v38 = (unint64_t *)&v37->__shared_owners_;
                          do
                            v39 = __ldaxr(v38);
                          while (__stlxr(v39 - 1, v38));
                          if (!v39)
                          {
                            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                            std::__shared_weak_count::__release_weak(v37);
                          }
                        }
                        v36 -= 2;
                      }
                    }
                    if (v24)
                      operator delete(v24);
                  }
                  else
                  {
                    *v125 = *v18;
                    v21 = v18[1];
                    v20[1] = v21;
                    if (v21)
                    {
                      v22 = (unint64_t *)(v21 + 8);
                      do
                        v23 = __ldxr(v22);
                      while (__stxr(v23 + 1, v22));
                    }
                    v19 = v20 + 2;
                  }
                  v125 = v19;
                  v18 += 2;
                }
                while (v18 != v17);
                v18 = (uint64_t *)v116;
                if (v116)
                  goto LABEL_57;
              }
LABEL_67:
              v116 = &v120;
              v45 = std::__hash_table<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::__unordered_map_hasher<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::hash<MIL::Builder::BlockBuilder *>,std::equal_to<MIL::Builder::BlockBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::equal_to<MIL::Builder::BlockBuilder *>,std::hash<MIL::Builder::BlockBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>>>::__emplace_unique_key_args<MIL::Builder::BlockBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::BlockBuilder *&&>,std::tuple<>>((uint64_t)v121, (uint64_t *)&v120, (uint64_t)&std::piecewise_construct, (_QWORD **)&v116);
              v137[0] = *((_QWORD **)__p + 2 * v16);
              v116 = v137;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::hash<MIL::Builder::OperationBuilder const*>,std::equal_to<MIL::Builder::OperationBuilder const*>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::equal_to<MIL::Builder::OperationBuilder const*>,std::hash<MIL::Builder::OperationBuilder const*>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder const*,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder const*&&>,std::tuple<>>((uint64_t)(v45 + 24), (uint64_t *)v137, (uint64_t)&std::piecewise_construct, (_QWORD **)&v116)+ 6) = v16++;
              v15 = (MIL::Builder::OperationBuilder **)__p;
              v10 = v119;
              if (v16 >= ((char *)v119 - (_BYTE *)__p) >> 4)
              {
                if (!__p)
                  goto LABEL_14;
                goto LABEL_72;
              }
              continue;
            }
          }
        }
        v125 = v11 - 2;
        v15 = (MIL::Builder::OperationBuilder **)__p;
        v10 = v119;
        if (v119 != __p)
          goto LABEL_21;
LABEL_71:
        v15 = v10;
        if (!v10)
          goto LABEL_14;
LABEL_72:
        if (v10 != v15)
        {
          do
          {
            v46 = (std::__shared_weak_count *)*(v10 - 1);
            if (v46)
            {
              v47 = (unint64_t *)&v46->__shared_owners_;
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            v10 -= 2;
          }
          while (v10 != v15);
          v10 = (MIL::Builder::OperationBuilder **)__p;
        }
        v119 = v15;
        operator delete(v10);
LABEL_14:
        v9 = (uint64_t *)v124;
        v8 = v125;
      }
      v114 = v134;
      if (*((_QWORD *)&v134 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      Espresso::AOT::E5RTGroupMatcher::TagE5RTEnforcedGroupsInBlock(a1, (uint64_t)&v114, &v127, v121);
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_87;
      v52 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
        v54 = (MIL::Builder::BlockBuilder *)v134;
        if (*(_BYTE *)(a1 + 60))
        {
LABEL_88:
          v112 = v54;
          v113 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
          if (*((_QWORD *)&v134 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlockWithShrinking(a1, &v112, &v127, v121, 0);
          v57 = v113;
          if (!v113)
            goto LABEL_103;
          v58 = (unint64_t *)&v113->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          goto LABEL_102;
        }
      }
      else
      {
LABEL_87:
        v54 = (MIL::Builder::BlockBuilder *)v134;
        if (*(_BYTE *)(a1 + 60))
          goto LABEL_88;
      }
      v110 = v54;
      v111 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
      if (*((_QWORD *)&v134 + 1))
      {
        v60 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      Espresso::AOT::E5RTGroupMatcher::TagQuantizationGroupsInBlock(a1, &v110, &v127, v121, 0);
      v57 = v111;
      if (!v111)
        goto LABEL_103;
      v62 = (unint64_t *)&v111->__shared_owners_;
      do
        v59 = __ldaxr(v62);
      while (__stlxr(v59 - 1, v62));
LABEL_102:
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
        if (!*(_BYTE *)(a1 + 61))
          goto LABEL_114;
        goto LABEL_104;
      }
LABEL_103:
      if (!*(_BYTE *)(a1 + 61))
        goto LABEL_114;
LABEL_104:
      v109 = v134;
      if (*((_QWORD *)&v134 + 1))
      {
        v63 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(a1, (MIL::Builder::BlockBuilder **)&v109, &v127, v121, 0);
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
      if (*((_QWORD *)&v109 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
          v68 = *(_DWORD **)(a1 + 8);
          v69 = *(_DWORD **)(a1 + 16);
          if (v68 != v69)
            goto LABEL_115;
          goto LABEL_118;
        }
      }
LABEL_114:
      v68 = *(_DWORD **)(a1 + 8);
      v69 = *(_DWORD **)(a1 + 16);
      if (v68 != v69)
      {
LABEL_115:
        while (*v68 != 9)
        {
          if (++v68 == v69)
          {
            v68 = v69;
            break;
          }
        }
      }
LABEL_118:
      if (v68 == v69)
        goto LABEL_135;
      v107 = v135;
      v108 = v136;
      if (v136)
      {
        v70 = (unint64_t *)&v136->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      v106 = v134;
      if (*((_QWORD *)&v134 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      Espresso::AOT::E5RTGroupMatcher::TagE5MinimalCpuGroupsInProgram(a1, &v107, (MIL::Builder::BlockBuilder **)&v106, &v127);
      v74 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (!*((_QWORD *)&v106 + 1))
        goto LABEL_129;
      v75 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
        v77 = v108;
        if (!v108)
          goto LABEL_135;
      }
      else
      {
LABEL_129:
        v77 = v108;
        if (!v108)
          goto LABEL_135;
      }
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
LABEL_135:
      Espresso::AOT::GroupTagger::Finalize((Espresso::AOT::GroupTagger *)&v127);
      v80 = v122[0];
      if (v122[0])
      {
        do
        {
          v85 = (_QWORD *)*v80;
          v86 = (_QWORD *)v80[5];
          if (v86)
          {
            do
            {
              v87 = (_QWORD *)*v86;
              operator delete(v86);
              v86 = v87;
            }
            while (v87);
          }
          v88 = (void *)v80[3];
          v80[3] = 0;
          if (v88)
            operator delete(v88);
          operator delete(v80);
          v80 = v85;
        }
        while (v85);
      }
      v81 = v121[0];
      v121[0] = 0;
      if (v81)
        operator delete(v81);
      v82 = (uint64_t *)v124;
      if (v124)
      {
        v83 = v125;
        v84 = v124;
        if (v125 != v124)
        {
          do
          {
            v89 = (std::__shared_weak_count *)*(v83 - 1);
            if (v89)
            {
              v90 = (unint64_t *)&v89->__shared_owners_;
              do
                v91 = __ldaxr(v90);
              while (__stlxr(v91 - 1, v90));
              if (!v91)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
            v83 -= 2;
          }
          while (v83 != v82);
          v84 = v124;
        }
        v125 = v82;
        operator delete(v84);
      }
      if (v133 < 0)
      {
        operator delete(v132);
        v92 = v131;
        if (!v131)
          goto LABEL_157;
      }
      else
      {
        v92 = v131;
        if (!v131)
          goto LABEL_157;
      }
      do
      {
        v93 = (_QWORD *)*v92;
        operator delete(v92);
        v92 = v93;
      }
      while (v93);
LABEL_157:
      v94 = v130;
      v130 = 0;
      if (v94)
        operator delete(v94);
      std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::~__hash_table((uint64_t)&v129);
      v95 = (std::__shared_weak_count *)*((_QWORD *)&v134 + 1);
      if (!*((_QWORD *)&v134 + 1))
        goto LABEL_163;
      v96 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
        v98 = v136;
        if (v136)
        {
LABEL_164:
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
      }
      else
      {
LABEL_163:
        v98 = v136;
        if (v136)
          goto LABEL_164;
      }
      v7 = v104;
LABEL_9:
      v7 += 24;
    }
    while (v7 != v102);
  }
  return kdebug_trace();
}

void sub_19112D1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  kdebug_trace();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::pair<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x28uLL);
  *v18 = 0;
  v18[1] = v10;
  v19 = **a4;
  v18[3] = 0;
  v18[4] = 0;
  v18[2] = v19;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_26:
      *v18 = *v23;
LABEL_61:
      *v23 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v23)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v23)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v31 & v10;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v10));
      if (v23)
        goto LABEL_26;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v32 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v32 >= v11)
        v32 %= v11;
    }
    else
    {
      v32 &= v11 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_19112D98C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x28uLL);
  v14 = v18;
  *v18 = 0;
  v18[1] = v10;
  v19 = *a4;
  v18[2] = **a4;
  v20 = v19[1];
  v18[3] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_BYTE *)v18 + 32) = 0;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (v11 && (float)(v24 * (float)v11) >= v23)
  {
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v26)
    {
LABEL_29:
      *v14 = *v26;
LABEL_64:
      *v26 = v14;
      goto LABEL_65;
    }
  }
  else
  {
    v27 = 1;
    if (v11 >= 3)
      v27 = (v11 & (v11 - 1)) != 0;
    v28 = v27 | (2 * v11);
    v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v31)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v31)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v31 < 3uLL || (v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < *(_QWORD *)&v31)
LABEL_40:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v35 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v26)
          goto LABEL_29;
      }
      else
      {
        v4 = v10;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v26)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v35 & v10;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v35 & v10));
      if (v26)
        goto LABEL_29;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v25 + 8 * v4) = v17;
  if (*v14)
  {
    v36 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11)
        v36 %= v11;
    }
    else
    {
      v36 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19112DD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<E5RT::AsyncEvent const>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *a2;
  v7 = HIDWORD(*a2);
  v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_23;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  v17 = operator new(0x18uLL);
  *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *v17 = *v21;
LABEL_61:
      *v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_37;
    if (prime < v10)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v10)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v3 = v9;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v29 & v9;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v9));
      if (v21)
        goto LABEL_26;
    }
  }
  *v17 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v17;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    v30 = *(_QWORD *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10)
        v30 %= v10;
    }
    else
    {
      v30 &= v10 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v17;
}

void sub_19112E070(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (_QWORD *)v5[6];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    v8 = (void *)v5[4];
    v5[4] = 0;
    if (v8)
      operator delete(v8);
    v9 = (std::__shared_weak_count *)v5[3];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19112E430(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x48uLL);
  v14 = v18;
  *v18 = 0;
  v18[1] = v10;
  v19 = *a4;
  v18[2] = **a4;
  v20 = v19[1];
  v18[3] = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *((_DWORD *)v18 + 16) = 1065353216;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (v11 && (float)(v24 * (float)v11) >= v23)
  {
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v26)
    {
LABEL_29:
      *v14 = *v26;
LABEL_64:
      *v26 = v14;
      goto LABEL_65;
    }
  }
  else
  {
    v27 = 1;
    if (v11 >= 3)
      v27 = (v11 & (v11 - 1)) != 0;
    v28 = v27 | (2 * v11);
    v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v31)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v31)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v31 < 3uLL || (v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < *(_QWORD *)&v31)
LABEL_40:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v35 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v26)
          goto LABEL_29;
      }
      else
      {
        v4 = v10;
        v25 = *(_QWORD *)a1;
        v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v26)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v35 & v10;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v35 & v10));
      if (v26)
        goto LABEL_29;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v25 + 8 * v4) = v17;
  if (*v14)
  {
    v36 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11)
        v36 %= v11;
    }
    else
    {
      v36 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19112E7C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_map<unsigned int,unsigned long long>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[6];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[4];
      v2[4] = 0;
      if (v5)
        operator delete(v5);
      v6 = (std::__shared_weak_count *)v2[3];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned int,unsigned long long>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t *v9;
  _OWORD *v10;
  uint64_t *v11;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      v8[3] = a2[3];
      v9 = (uint64_t *)*v8;
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__node_insert_multi(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v11 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x20uLL);
      *(_QWORD *)v10 = 0;
      v10[1] = *((_OWORD *)a2 + 1);
      *((_QWORD *)v10 + 1) = *((unsigned int *)v10 + 4);
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__node_insert_multi(a1, (unsigned int *)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_19112E968(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_19112E988(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_19112E99C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned int *std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__node_insert_multi(_QWORD *a1, unsigned int *a2)
{
  unint64_t v4;
  int *v5;
  uint64_t *inserted;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;

  v5 = (int *)(a2 + 4);
  v4 = a2[4];
  *((_QWORD *)v5 - 1) = v4;
  inserted = std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__node_insert_multi_prepare((uint64_t)a1, v4, v5);
  v7 = (int8x8_t)a1[1];
  v8 = *((_QWORD *)v5 - 1);
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  if (!inserted)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_19;
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(_QWORD *)a2 = *inserted;
  *inserted = (uint64_t)a2;
  if (*(_QWORD *)a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
    if (v10 != v8)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  uint64_t *v10;
  char v11;
  int v12;
  char v13;
  uint64_t *result;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  size_t v20;
  uint8x8_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0)
      goto LABEL_4;
    goto LABEL_36;
  }
  v16 = 1;
  if (v6 >= 3)
    v16 = (v6 & (v6 - 1)) != 0;
  v17 = v16 | (2 * v6);
  v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v6)
    goto LABEL_22;
  if (prime < v6)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
        if (prime <= v20)
          prime = v20;
        if (prime >= v6)
          goto LABEL_35;
LABEL_22:
        std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__do_rehash<false>(a1, prime);
        goto LABEL_35;
      }
    }
    v23 = std::__next_prime(v20);
    if (prime <= v23)
      prime = v23;
    if (prime < v6)
      goto LABEL_22;
  }
LABEL_35:
  v6 = *(_QWORD *)(a1 + 8);
  v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    v10 = *(uint64_t **)(*(_QWORD *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      v11 = 0;
      v12 = *a3;
      while (1)
      {
        result = v10;
        v10 = (uint64_t *)*v10;
        if (!v10)
          break;
        v15 = v10[1];
        if ((v15 & v9) != (v9 & a2))
          break;
        if (v15 == a2)
        {
          v13 = v11 & (*((_DWORD *)v10 + 4) != v12);
          v11 |= *((_DWORD *)v10 + 4) == v12;
          if ((v13 & 1) != 0)
            return result;
        }
        else if ((v11 & 1) != 0)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  v24 = a2;
  if (v6 <= a2)
    v24 = a2 % v6;
  v25 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v24);
  if (!v25)
    return 0;
  v26 = 0;
  v27 = *a3;
  while (1)
  {
    result = v25;
    v25 = (uint64_t *)*v25;
    if (!v25)
      break;
    v29 = v25[1];
    v30 = v29;
    if (v29 >= v6)
      v30 = v29 % v6;
    if (v30 != v24)
      break;
    if (v29 == a2)
    {
      v28 = v26 & (*((_DWORD *)v25 + 4) != v27);
      v26 |= *((_DWORD *)v25 + 4) == v27;
      if (v28 == 1)
        return result;
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v8 = a1 + 16;
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v9 = v7[1];
      v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2)
          v9 %= a2;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
        while (1)
        {
          v18 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v19 = v18[1];
          if (v19 >= a2)
            v19 %= a2;
          if (v19 == v9)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v20 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v19))
            {
              do
              {
                v21 = v20;
                v20 = (_QWORD *)*v20;
              }
              while (v20 && *((_DWORD *)v18 + 4) == *((_DWORD *)v20 + 4));
              *v7 = v20;
              v22 = 8 * v19;
              *v21 = **(_QWORD **)(*(_QWORD *)a1 + v22);
              **(_QWORD **)(*(_QWORD *)a1 + v22) = v18;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v7;
              v7 = v18;
              v9 = v19;
            }
          }
        }
      }
      else
      {
        v11 = v9 & v10;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
        while (1)
        {
          v12 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v13 = v12[1] & v10;
          if (v13 == v11)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v14 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              do
              {
                v15 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14 && *((_DWORD *)v12 + 4) == *((_DWORD *)v14 + 4));
              *v7 = v14;
              v16 = 8 * v13;
              *v15 = **(_QWORD **)(*(_QWORD *)a1 + v16);
              **(_QWORD **)(*(_QWORD *)a1 + v16) = v12;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              v7 = v12;
              v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    v17 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v17)
      operator delete(v17);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_19112F23C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::hash<MIL::Builder::OperationBuilder const*>,std::equal_to<MIL::Builder::OperationBuilder const*>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder const*,std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>,std::equal_to<MIL::Builder::OperationBuilder const*>,std::hash<MIL::Builder::OperationBuilder const*>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder const*,int>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder const*,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder const*&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  *((_DWORD *)v18 + 6) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v18 = *v22;
LABEL_61:
      *v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
      if (v22)
        goto LABEL_26;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v31 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_19112F59C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__append_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> const*>(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = 32 * (v7 - v6) - 1;
  v9 = a1[5];
  v10 = v9 + a1[4];
  v11 = v8 - v10;
  if (a3 > v11)
  {
    std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__add_back_capacity((uint64_t)a1, a3 - v11);
    v9 = a1[5];
    v6 = a1[1];
    v7 = a1[2];
    v10 = a1[4] + v9;
  }
  v12 = (_QWORD *)(v6 + 8 * (v10 >> 8));
  if (v7 == v6)
  {
    v13 = 0;
    if (a3)
      goto LABEL_8;
LABEL_11:
    v16 = v13;
    v15 = v12;
    goto LABEL_27;
  }
  v13 = *v12 + 16 * v10;
  if (!a3)
    goto LABEL_11;
LABEL_8:
  v14 = a3 + ((v13 - *v12) >> 4);
  if (v14 < 1)
  {
    v17 = 255 - v14;
    LOBYTE(v14) = ~(-1 - v14);
    v15 = &v12[-(v17 >> 8)];
  }
  else
  {
    v15 = &v12[(unint64_t)v14 >> 8];
  }
  v16 = *v15 + 16 * v14;
LABEL_27:
  while (v13 != v16)
  {
    v18 = v16;
    if (v12 != v15)
      v18 = *v12 + 4096;
    if (v13 == v18)
    {
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    else
    {
      v19 = (_QWORD *)v13;
      do
      {
        v20 = a2[1];
        *v19 = *a2;
        v19[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v19 += 2;
        a2 += 2;
      }
      while (v19 != (_QWORD *)v18);
      v9 = a1[5] + ((v18 - v13) >> 4);
      a1[5] = v9;
      if (v12 == v15)
        return;
    }
    v23 = v12[1];
    ++v12;
    v13 = v23;
  }
}

void std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__add_back_capacity(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  int64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t i;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  int64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;

  v3 = *(char **)(a1 + 16);
  v4 = (uint64_t)&v3[-*(_QWORD *)(a1 + 8)];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((_BYTE)v5)
    v6 = (v5 >> 8) + 1;
  else
    v6 = v5 >> 8;
  v7 = *(_QWORD *)(a1 + 32);
  if (v6 >= v7 >> 8)
    v8 = v7 >> 8;
  else
    v8 = v6;
  if (v6 <= v7 >> 8)
  {
    *(_QWORD *)(a1 + 32) = v7 - (v8 << 8);
    if (!v8)
      return;
    while (1)
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = (char *)(v15 + 1);
      v17 = *v15;
      *(_QWORD *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(_QWORD *)a1)
        {
          v24 = (v3 - v18) >> 2;
          if (v3 == v18)
            v24 = 1;
          if (v24 >> 61)
            goto LABEL_159;
          v25 = v24 >> 2;
          v26 = 8 * v24;
          v27 = (char *)operator new(8 * v24);
          v28 = &v27[8 * v25];
          v30 = v3 - v16;
          v29 = v3 == v16;
          v3 = v28;
          if (!v29)
          {
            v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20)
              goto LABEL_165;
            v33 = (v31 >> 3) + 1;
            v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            v32 = &v28[v34];
            v16 += v34;
            v35 = (__int128 *)(v15 + 3);
            v36 = &v27[8 * v25 + 16];
            v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_165:
              do
              {
LABEL_39:
                v39 = *(_QWORD *)v16;
                v16 += 8;
                *(_QWORD *)v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(_QWORD *)a1 = v27;
          *(_QWORD *)(a1 + 8) = v28;
          *(_QWORD *)(a1 + 16) = v3;
          *(_QWORD *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        v19 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v19 >= -1)
          v20 = v19 + 1;
        else
          v20 = v19 + 2;
        v21 = v20 >> 1;
        v22 = &v16[-8 * (v20 >> 1)];
        v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          v3 = *(char **)(a1 + 8);
        }
        v14 = &v3[-8 * v21];
        v3 = &v22[v23];
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(_QWORD *)v3 = v17;
      v3 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v3;
      if (!--v8)
        return;
    }
  }
  v9 = v6 - v8;
  v10 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  v11 = v4 >> 3;
  if (v9 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
      {
        v145 = operator new(0x1000uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v145);
        if (!--v9)
          goto LABEL_134;
      }
      for (i = 0; i != v9; ++i)
      {
        v145 = operator new(0x1000uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v145);
        if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
          v116 = 255;
        else
          v116 = 256;
        v117 = v116 + *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v117;
      }
      v8 += v9;
      *(_QWORD *)(a1 + 32) = v117 - (v8 << 8);
      if (!v8)
        return;
    }
    else
    {
LABEL_134:
      *(_QWORD *)(a1 + 32) -= v8 << 8;
      if (!v8)
        return;
    }
    v118 = *(char **)(a1 + 16);
    while (1)
    {
      v120 = *(_QWORD **)(a1 + 8);
      v121 = (char *)(v120 + 1);
      v122 = *v120;
      *(_QWORD *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(_QWORD *)a1)
        {
          v129 = (v118 - v123) >> 2;
          if (v118 == v123)
            v129 = 1;
          if (v129 >> 61)
            goto LABEL_159;
          v130 = v129 >> 2;
          v131 = 8 * v129;
          v132 = (char *)operator new(8 * v129);
          v133 = &v132[8 * v130];
          v134 = v118 - v121;
          v29 = v118 == v121;
          v118 = v133;
          if (!v29)
          {
            v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              v136 = &v132[8 * v130];
              goto LABEL_155;
            }
            v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20)
              goto LABEL_166;
            v137 = (v135 >> 3) + 1;
            v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v133[v138];
            v121 += v138;
            v139 = (__int128 *)(v120 + 3);
            v140 = &v132[8 * v130 + 16];
            v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_166:
              do
              {
LABEL_155:
                v143 = *(_QWORD *)v121;
                v121 += 8;
                *(_QWORD *)v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(_QWORD *)a1 = v132;
          *(_QWORD *)(a1 + 8) = v133;
          *(_QWORD *)(a1 + 16) = v118;
          *(_QWORD *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            v118 = *(char **)(a1 + 16);
          }
          goto LABEL_137;
        }
        v124 = (uint64_t)&v121[-*(_QWORD *)a1] >> 3;
        if (v124 >= -1)
          v125 = v124 + 1;
        else
          v125 = v124 + 2;
        v126 = v125 >> 1;
        v127 = &v121[-8 * (v125 >> 1)];
        v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          v118 = *(char **)(a1 + 8);
        }
        v119 = &v118[-8 * v126];
        v118 = &v127[v128];
        *(_QWORD *)(a1 + 8) = v119;
        *(_QWORD *)(a1 + 16) = &v127[v128];
      }
LABEL_137:
      *(_QWORD *)v118 = v122;
      v118 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v118;
      if (!--v8)
        return;
    }
  }
  if (v10 >> 2 <= v9 + v11)
    v12 = v9 + v11;
  else
    v12 = v10 >> 2;
  if (v12)
  {
    if (v12 >> 61)
LABEL_159:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
  }
  else
  {
    v13 = 0;
  }
  v144 = v8 << 8;
  v40 = &v13[8 * (v11 - v8)];
  v41 = &v13[8 * v12];
  v42 = v40;
  v43 = v13;
  do
  {
    v44 = operator new(0x1000uLL);
    if (v42 != v41)
      goto LABEL_49;
    if (v40 > v43)
    {
      v45 = v43;
      v46 = (v40 - v43) >> 3;
      if (v46 >= -1)
        v47 = v46 + 1;
      else
        v47 = v46 + 2;
      v48 = v47 >> 1;
      v49 = &v40[-8 * (v47 >> 1)];
      v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        v50 = v40;
      }
      v42 = &v49[v41 - v40];
      v40 = &v50[-8 * v48];
      v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43)
      v51 = 1;
    else
      v51 = (v41 - v43) >> 2;
    if (v51 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v52 = (char *)operator new(8 * v51);
    v53 = v43;
    v54 = v51 >> 2;
    v55 = &v52[8 * (v51 >> 2)];
    v42 = v55;
    v56 = v41 - v40;
    if (v41 != v40)
    {
      v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      v57 = v56 - 8;
      if (v57 >= 0x38 && (v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        v62 = (v57 >> 3) + 1;
        v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        v59 = &v55[v63];
        v60 = &v40[v63];
        v64 = (__int128 *)(v40 + 16);
        v65 = &v52[v58 + 16];
        v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v59 = &v52[8 * (v51 >> 2)];
        v60 = v40;
      }
      do
      {
        v61 = *(_QWORD *)v60;
        v60 += 8;
        *(_QWORD *)v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    v41 = &v52[8 * v51];
    if (v53)
      operator delete(v53);
    v40 = &v52[8 * (v51 >> 2)];
    v43 = v52;
LABEL_49:
    *(_QWORD *)v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  v68 = *(_QWORD **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43)
            v78 = 1;
          else
            v78 = (v41 - v43) >> 2;
          if (v78 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v79 = (char *)operator new(8 * v78);
          v80 = v79;
          v81 = v78 >> 2;
          v69 = &v79[8 * (v78 >> 2)];
          v42 = v69;
          v82 = v41 - v40;
          if (v41 != v40)
          {
            v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            v83 = v82 - 8;
            if (v83 < 0x38 || (v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              v85 = &v79[8 * (v78 >> 2)];
              v86 = v40;
              goto LABEL_96;
            }
            v88 = (v83 >> 3) + 1;
            v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            v85 = &v69[v89];
            v86 = &v40[v89];
            v90 = (__int128 *)(v40 + 16);
            v91 = &v79[v84 + 16];
            v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_96:
                v87 = *(_QWORD *)v86;
                v86 += 8;
                *(_QWORD *)v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          v41 = &v79[8 * v78];
          if (v43)
            operator delete(v43);
          v43 = v80;
          goto LABEL_79;
        }
        v72 = v43;
        v73 = (v40 - v43) >> 3;
        if (v73 >= -1)
          v74 = v73 + 1;
        else
          v74 = v73 + 2;
        v75 = v74 >> 1;
        v76 = &v40[-8 * (v74 >> 1)];
        v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          v77 = v40;
        }
        v42 = &v76[v41 - v40];
        v69 = &v77[-8 * v75];
        v43 = v72;
      }
      else
      {
        v69 = v40;
      }
LABEL_79:
      *(_QWORD *)v42 = *v68;
      v42 += 8;
      v68 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v68;
      v40 = v69;
      if (!--v8)
        goto LABEL_75;
    }
  }
  v69 = v40;
LABEL_75:
  v70 = *(_QWORD **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43)
            v100 = 1;
          else
            v100 = (v41 - v43) >> 2;
          if (v100 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v101 = (char *)operator new(8 * v100);
          v97 = v101;
          v102 = (v100 + 3) >> 2;
          v69 = &v101[8 * v102];
          v103 = v42 - v43;
          v29 = v42 == v43;
          v42 = v69;
          if (!v29)
          {
            v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            v104 = v103 - 8;
            v105 = &v101[8 * v102];
            v106 = v43;
            if (v104 < 0x38)
              goto LABEL_167;
            v107 = 8 * v102;
            v105 = &v101[8 * v102];
            v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20)
              goto LABEL_167;
            v108 = (v104 >> 3) + 1;
            v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            v105 = &v69[v109];
            v106 = &v43[v109];
            v110 = (__int128 *)(v43 + 16);
            v111 = &v101[v107 + 16];
            v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                v114 = *(_QWORD *)v106;
                v106 += 8;
                *(_QWORD *)v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          v41 = &v101[8 * v100];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v95 = (v41 - v42) >> 3;
          if (v95 >= -1)
            v96 = v95 + 1;
          else
            v96 = v95 + 2;
          v97 = v43;
          v98 = v96 >> 1;
          v69 = &v97[8 * (v96 >> 1)];
          v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            v99 = v42;
          }
          v42 = &v99[8 * v98];
        }
        v43 = v97;
      }
      v94 = *--v70;
      *((_QWORD *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(_QWORD **)(a1 + 8));
  }
  v71 = *(char **)a1;
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 8) = v69;
  *(_QWORD *)(a1 + 16) = v42;
  *(_QWORD *)(a1 + 24) = v41;
  *(_QWORD *)(a1 + 32) -= v144;
  if (v71)
    operator delete(v71);
}

void sub_19113000C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_191130058()
{
  __cxa_end_catch();
  JUMPOUT(0x191130060);
}

uint64_t std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v12 = 0;
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 >> 8];
  v6 = (uint64_t)*v5 + 16 * v4;
  v7 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
     + 16 * (*(_BYTE *)(a1 + 40) + v4);
  if (v6 == v7)
    goto LABEL_14;
  do
  {
    v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (!v8)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
LABEL_9:
      v6 += 16;
      if (v6 - (_QWORD)*v5 != 4096)
        continue;
LABEL_10:
      v11 = (uint64_t)v5[1];
      ++v5;
      v6 = v11;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v6 += 16;
    if (v6 - (_QWORD)*v5 == 4096)
      goto LABEL_10;
  }
  while (v6 != v7);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_14:
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_16:
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 128;
LABEL_21:
    *(_QWORD *)(a1 + 32) = v14;
  }
  else if (v13 == 2)
  {
    v14 = 256;
    goto LABEL_21;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::deque<std::shared_ptr<MIL::Builder::OperationBuilder>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_191130780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_19113079C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1911307B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1911307C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::__unordered_map_hasher<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::hash<MIL::Builder::BlockBuilder *>,std::equal_to<MIL::Builder::BlockBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::BlockBuilder *,std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>,std::equal_to<MIL::Builder::BlockBuilder *>,std::hash<MIL::Builder::BlockBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::BlockBuilder *,std::unordered_map<MIL::Builder::OperationBuilder const*,int>>>>::__emplace_unique_key_args<MIL::Builder::BlockBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::BlockBuilder *&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v14 + 1);
            if (v16 == v10)
            {
              if (*((_QWORD *)v14 + 2) == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_QWORD *)v14 + 2) == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x40uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *(_QWORD *)v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*(_QWORD *)v14)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_191130B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<E5RT::AsyncEvent const*,std::unordered_set<unsigned long long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmenterShortestPath::~SegmenterShortestPath(Espresso::AOT::SegmenterShortestPath *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Espresso::AOT::MILSegmenterOptions *v5;

  *(_QWORD *)this = off_1E2DA0798;
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = (void *)*((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    operator delete(v4);
  }
  v5 = (Espresso::AOT::MILSegmenterOptions *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    Espresso::AOT::MILSegmenterOptions::~MILSegmenterOptions(v5);
    MEMORY[0x19401CD90]();
  }
  Espresso::AOT::AbstractSegmenter::~AbstractSegmenter(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Espresso::AOT::MILSegmenterOptions *v5;

  *(_QWORD *)this = off_1E2DA0798;
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = (void *)*((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    operator delete(v4);
  }
  v5 = (Espresso::AOT::MILSegmenterOptions *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    Espresso::AOT::MILSegmenterOptions::~MILSegmenterOptions(v5);
    MEMORY[0x19401CD90]();
  }
  Espresso::AOT::AbstractSegmenter::~AbstractSegmenter(this);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Espresso::AOT::MILSegmenterOptions *v5;

  *(_QWORD *)this = off_1E2DA0798;
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *((_QWORD *)this + 8);
    v4 = (void *)*((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    operator delete(v4);
  }
  v5 = (Espresso::AOT::MILSegmenterOptions *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    Espresso::AOT::MILSegmenterOptions::~MILSegmenterOptions(v5);
    MEMORY[0x19401CD90]();
  }
  Espresso::AOT::AbstractSegmenter::~AbstractSegmenter(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::AOT::SegmenterShortestPath::SegmenterShortestPath(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void **v9;
  void *v10;
  std::vector<std::string> v12;

  v5 = Espresso::AOT::AbstractSegmenter::AbstractSegmenter((_QWORD *)a1, a2);
  *v5 = off_1E2DA0798;
  v6 = *a3;
  *a3 = 0;
  v5[6] = v6;
  v5[7] = 0;
  v7 = (void **)(v5 + 7);
  v5[8] = 0;
  v5[9] = 0;
  Espresso::AOT::BackendRegistry::GetBackends((Espresso::AOT::BackendRegistry *)(v5 + 1), &v12);
  v8 = (void **)*v7;
  if (*v7)
  {
    v9 = *(void ***)(a1 + 64);
    v10 = *v7;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = *v7;
    }
    *(_QWORD *)(a1 + 64) = v8;
    operator delete(v10);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(std::vector<std::string> *)(a1 + 56) = v12;
  return a1;
}

void sub_191130E18(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractSegmenter *v1;
  void **v2;
  Espresso::AOT::MILSegmenterOptions **v3;

  std::vector<std::string>::~vector[abi:ne180100](v2);
  std::unique_ptr<Espresso::AOT::MILSegmenterOptions>::~unique_ptr[abi:ne180100](v3);
  Espresso::AOT::AbstractSegmenter::~AbstractSegmenter(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmenterShortestPath::Run(uint64_t a1@<X0>, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *a2@<X1>, uint64_t *a3@<X2>, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset **a4@<X8>)
{
  char *v8;
  char *v9;
  const char *v10;
  NSObject *v11;
  char *v12;
  const char *v13;
  NSObject *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count *v29;
  std::__shared_weak_count_vtbl *v30;
  _QWORD *v31;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v32;
  unint64_t v33;
  uint64_t Function;
  uint64_t v35;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  MIL::Builder::ProgramBuilder *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v73;
  std::__shared_weak_count *v74;
  uint64_t ShouldMerge;
  Espresso::AOT::SegmentsLowerer *v76;
  void **v77;
  void **v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  char *v84;
  void *v85;
  char *v86;
  void *v87;
  std::logic_error *exception;
  uint64_t *v89;
  BOOL v90;
  std::__shared_weak_count_vtbl *v91;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v92;
  std::__shared_weak_count *v93;
  void *__p[2];
  void *v95[2];
  int v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  MIL::Builder::BlockBuilder *v104;
  std::__shared_weak_count *v105;
  MIL::Builder::FunctionBuilder *v106;
  std::__shared_weak_count *v107;
  _DWORD v108[2];
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  MIL::Builder::ProgramBuilder *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  __int128 buf;
  char v117;
  void *v118[2];
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v97 = 0x2B23828400000000;
  v98 = 0u;
  v99 = 0u;
  kdebug_trace();
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v95 = 0u;
  v96 = 1065353216;
  v89 = a3;
  v9 = (char *)*a3;
  v8 = (char *)a3[1];
  if (v9 == v8)
  {
    v90 = 0;
  }
  else
  {
    v90 = 0;
    do
    {
      if ((Espresso::AOT::IsFunctionSegmented(a2) & 1) == 0)
      {
        v11 = Espresso::espresso_os_log_subsystem(0, v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v12 = v9;
          if (v9[23] < 0)
            v12 = *(char **)v9;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v12;
          _os_log_impl(&dword_190DAF000, v11, OS_LOG_TYPE_INFO, "Start segmenting function: %s", (uint8_t *)&buf, 0xCu);
        }
        Espresso::AOT::SegmenterShortestPath::SegmentFunction(a1, (unint64_t)a2, v9, (uint64_t)&buf);
        std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::string const&,std::vector<unsigned long>>((uint64_t)__p, (uint64_t)v9, (uint64_t)v9, (uint64_t)&buf);
        v90 = v117 != 0;
        v14 = Espresso::espresso_os_log_subsystem(0, v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          v15 = v9;
          if (v9[23] < 0)
            v15 = *(char **)v9;
          LODWORD(v118[0]) = 136315138;
          *(void **)((char *)v118 + 4) = v15;
          _os_log_impl(&dword_190DAF000, v14, OS_LOG_TYPE_INFO, "Finished segmenting function: %s", (uint8_t *)v118, 0xCu);
        }
        if ((_QWORD)buf)
        {
          *((_QWORD *)&buf + 1) = buf;
          operator delete((void *)buf);
        }
      }
      v9 += 24;
    }
    while (v9 != v8);
  }
  v93 = 0;
  v17 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
  if (v17 == v16)
  {
LABEL_41:
    v32 = 0;
    goto LABEL_114;
  }
  v18 = *(_QWORD *)(a1 + 56);
  do
  {
    if (*(char *)(v18 + 23) < 0)
    {
      v22 = *(uint64_t **)v18;
      if (*(_QWORD *)(v18 + 8) != 14)
        goto LABEL_22;
    }
    else
    {
      v22 = (uint64_t *)v18;
      if (*(_BYTE *)(v18 + 23) != 14)
        goto LABEL_22;
    }
    v19 = *v22;
    v20 = *(uint64_t *)((char *)v22 + 6);
    if (v19 == 0x6D696E696D5F3565 && v20 == 0x7570635F6C616D69)
      goto LABEL_29;
LABEL_22:
    v18 += 24;
  }
  while (v18 != v16);
  v18 = *(_QWORD *)(a1 + 64);
LABEL_29:
  if (v18 == v16)
    goto LABEL_41;
  (*(void (**)(uint64_t *__return_ptr, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(_QWORD *)a2 + 48))(&v114, a2);
  v111 = v114;
  v112 = v115;
  if (v115)
  {
    p_shared_owners = (unint64_t *)&v115->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::Make();
  v25 = v112;
  if (v112)
  {
    v26 = (unint64_t *)&v112->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRTensorValueType::MakeBoolValue(Scalar);
  v109 = buf;
  if ((_QWORD)buf)
  {
    v29 = (std::__shared_weak_count *)operator new();
    v30 = (std::__shared_weak_count_vtbl *)buf;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
    v29->__shared_owners_ = 0;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v30;
    v110 = v29;
    v31 = v95[0];
    if (!v95[0])
      goto LABEL_98;
LABEL_43:
    v33 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 3);
    while (2)
    {
      MIL::Builder::ProgramBuilder::GetFunction();
      MIL::Builder::FunctionBuilder::SelectedSpecialization(v106);
      MIL::Builder::FunctionBuilder::GetBlock();
      Function = MIL::IRProgram::GetFunction();
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
      v36 = a2;
      E5Common::MinimalCpu::MatchAllPatterns(v114, v35, (uint64_t)&buf);
      v37 = (_QWORD *)*((_QWORD *)&buf + 1);
      v38 = (_QWORD *)buf;
      if ((_QWORD)buf == *((_QWORD *)&buf + 1))
      {
        if (!(_QWORD)buf)
          goto LABEL_85;
LABEL_47:
        v39 = (_QWORD *)*((_QWORD *)&buf + 1);
        if (*((_QWORD **)&buf + 1) == v38)
        {
          *((_QWORD *)&buf + 1) = v38;
          operator delete(v38);
          v40 = v105;
          a2 = v36;
          if (!v105)
            goto LABEL_91;
          goto LABEL_88;
        }
        do
        {
          v60 = (void *)*(v39 - 3);
          if (v60)
          {
            *(v39 - 2) = v60;
            operator delete(v60);
          }
          v39 -= 4;
        }
        while (v39 != v38);
        *((_QWORD *)&buf + 1) = v38;
        operator delete((void *)buf);
        v40 = v105;
        a2 = v36;
        if (v105)
          goto LABEL_88;
LABEL_91:
        v63 = v107;
        if (!v107)
          goto LABEL_44;
LABEL_92:
        v64 = (unint64_t *)&v63->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
        goto LABEL_44;
      }
LABEL_51:
      v41 = (unint64_t *)v38[1];
      v42 = (unint64_t *)v38[2];
      v43 = v41 + 1;
      if (v41 != v42 && v43 != v42)
      {
        v45 = *v41;
        v46 = v41 + 1;
        do
        {
          v48 = *v46++;
          v47 = v48;
          if (v48 < v45)
          {
            v45 = v47;
            v41 = v43;
          }
          v43 = v46;
        }
        while (v46 != v42);
      }
      if (*(_QWORD *)(v31[5] + 8 * *v41) == v33)
      {
        MIL::Builder::BlockBuilder::GetOperation(v104);
        strcpy((char *)v118, "EndOfSegment");
        BYTE5(v118[1]) = 0;
        HIWORD(v118[1]) = 0;
        LODWORD(v119) = v108[0];
        *(_DWORD *)((char *)&v119 + 3) = *(_DWORD *)((char *)v108 + 3);
        HIBYTE(v119) = 12;
        v100 = v109;
        v101 = v110;
        if (v110)
        {
          v49 = (unint64_t *)&v110->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        MIL::Builder::OperationBuilder::SetAttribute();
        v51 = v103;
        if (!v103)
          goto LABEL_67;
        v52 = (unint64_t *)&v103->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
          v54 = v101;
          if (v101)
          {
LABEL_68:
            v55 = (unint64_t *)&v54->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
        else
        {
LABEL_67:
          v54 = v101;
          if (v101)
            goto LABEL_68;
        }
        if (SHIBYTE(v119) < 0)
        {
          operator delete(v118[0]);
          v57 = v102;
          if (!v102)
            goto LABEL_50;
        }
        else
        {
          v57 = v102;
          if (!v102)
            goto LABEL_50;
        }
        v58 = (unint64_t *)&v57->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
LABEL_50:
      v38 += 4;
      if (v38 == v37)
      {
        v38 = (_QWORD *)buf;
        if ((_QWORD)buf)
          goto LABEL_47;
LABEL_85:
        v40 = v105;
        a2 = v36;
        if (!v105)
          goto LABEL_91;
LABEL_88:
        v61 = (unint64_t *)&v40->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (v62)
          goto LABEL_91;
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        v63 = v107;
        if (v107)
          goto LABEL_92;
LABEL_44:
        v31 = (_QWORD *)*v31;
        if (!v31)
          goto LABEL_98;
        continue;
      }
      goto LABEL_51;
    }
  }
  v110 = 0;
  v31 = v95[0];
  if (v95[0])
    goto LABEL_43;
LABEL_98:
  MIL::Builder::ProgramBuilder::CreateProgramWithoutValidation(v113);
  v66 = v110;
  if (v110)
  {
    v67 = (unint64_t *)&v110->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v113;
  v113 = 0;
  if (v69)
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(_QWORD *)v69 + 8))(v69);
  v70 = v115;
  if (!v115)
    goto LABEL_109;
  v71 = (unint64_t *)&v115->__shared_owners_;
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 - 1, v71));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
    std::__shared_weak_count::__release_weak(v70);
    v73 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)v91;
    if (!v91)
      goto LABEL_112;
LABEL_110:
    v74 = (std::__shared_weak_count *)operator new();
    v74->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3120;
    v74->__shared_owners_ = 0;
    v74->__shared_weak_owners_ = 0;
    v74[1].__vftable = v91;
    v92 = v73;
    v93 = v74;
  }
  else
  {
LABEL_109:
    v73 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)v91;
    if (v91)
      goto LABEL_110;
LABEL_112:
    v92 = v73;
    v93 = 0;
  }
  v32 = v92;
  v17 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(a1 + 64);
LABEL_114:
  if (v32)
    a2 = v32;
  v118[0] = 0;
  v118[1] = 0;
  v119 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v118, v17, v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 3));
  ShouldMerge = Espresso::AOT::MILSegmenterOptions::GetSegmentsShouldMerge(*(Espresso::AOT::MILSegmenterOptions **)(a1 + 48));
  v76 = (Espresso::AOT::SegmentsLowerer *)Espresso::AOT::SegmentsLowerer::SegmentsLowerer(&buf, a2, __p, v118, ShouldMerge, v90);
  Espresso::AOT::SegmentsLowerer::Run(v76, a4);
  Espresso::AOT::SegmentsLowerer::~SegmentsLowerer((Espresso::AOT::SegmentsLowerer *)&buf);
  v77 = (void **)v118[0];
  if (v118[0])
  {
    v78 = (void **)v118[1];
    v79 = v118[0];
    if (v118[1] != v118[0])
    {
      do
      {
        if (*((char *)v78 - 1) < 0)
          operator delete(*(v78 - 3));
        v78 -= 3;
      }
      while (v78 != v77);
      v79 = v118[0];
    }
    v118[1] = v77;
    operator delete(v79);
  }
  v81 = *v89;
  v80 = v89[1];
  if (*v89 != v80)
  {
    do
    {
      if ((Espresso::AOT::IsFunctionSegmented(*a4) & 1) == 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Invalid e5backend program: Invalid segments.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v81 += 24;
    }
    while (v81 != v80);
  }
  if (v93)
  {
    v82 = (unint64_t *)&v93->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v84 = (char *)v95[0];
  if (v95[0])
  {
    do
    {
      v86 = *(char **)v84;
      v87 = (void *)*((_QWORD *)v84 + 5);
      if (v87)
      {
        *((_QWORD *)v84 + 6) = v87;
        operator delete(v87);
      }
      if (v84[39] < 0)
        operator delete(*((void **)v84 + 2));
      operator delete(v84);
      v84 = v86;
    }
    while (v86);
  }
  v85 = __p[0];
  __p[0] = 0;
  if (v85)
    operator delete(v85);
  if (E5RT::g_trace_analysis_level >= v97)
    kdebug_trace();
}

void sub_191131848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va2);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::AOT::SegmenterShortestPath::SegmentFunction@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v7;
  uint64_t v8;
  _QWORD v9[7];
  _QWORD v10[3];
  uint64_t v11;
  char v12;

  Espresso::AOT::SegmenterShortestPath::BuildStateGraph(a1, a2, a3, (uint64_t)v9);
  Espresso::AOT::SegmenterShortestPath::StateGraph::FindOpToBackend((Espresso::AOT::SegmenterShortestPath::StateGraph *)v9, &v7);
  Espresso::AOT::SegmenterShortestPath::ValidateGroup((uint64_t)&v7, v10);
  Espresso::AOT::SegmenterShortestPath::WriteAnalytics(a1, &v11, &v7);
  *(_OWORD *)a4 = v7;
  *(_QWORD *)(a4 + 16) = v8;
  *(_BYTE *)(a4 + 24) = v12;
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,Espresso::AOT::SegmenterShortestPath::StateGraph,std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>,std::unique_ptr<Espresso::AOT::MILSegmenterAnalytics>,BOOL>::~__tuple_impl(v9);
}

void sub_191131A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,Espresso::AOT::SegmenterShortestPath::StateGraph,std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>,std::unique_ptr<Espresso::AOT::MILSegmenterAnalytics>,BOOL>::~__tuple_impl((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191131A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,Espresso::AOT::SegmenterShortestPath::StateGraph,std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>,std::unique_ptr<Espresso::AOT::MILSegmenterAnalytics>,BOOL>::~__tuple_impl(&a13);
  _Unwind_Resume(a1);
}

Espresso::AOT::SegmenterShortestPath::StateGraph *Espresso::AOT::SegmenterShortestPath::StateGraph::StateGraph(Espresso::AOT::SegmenterShortestPath::StateGraph *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v4 = a2 + a2 * a3;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v4 + 1;
  std::vector<Espresso::AOT::CostGraph::Node>::vector((_QWORD *)this + 4, v4 + 2);
  return this;
}

{
  uint64_t v4;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v4 = a2 + a2 * a3;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v4 + 1;
  std::vector<Espresso::AOT::CostGraph::Node>::vector((_QWORD *)this + 4, v4 + 2);
  return this;
}

_QWORD *std::vector<Espresso::AOT::CostGraph::Node>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_191131B8C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<Espresso::AOT::CostGraph::Node>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdge(Espresso::AOT::SegmenterShortestPath::StateGraph *a1, _QWORD *a2, _QWORD *a3, double a4)
{
  Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdge(a1, *a2 + (*((_QWORD *)a1 + 1) + 1) * a2[1] + 1, *a3 + a3[1] * (*((_QWORD *)a1 + 1) + 1) + 1, a4);
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdge(Espresso::AOT::SegmenterShortestPath::StateGraph *this, uint64_t a2, uint64_t a3, double a4)
{
  double **v6;
  unint64_t v7;
  double *v8;
  double *v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  double *v16;

  v6 = (double **)(*((_QWORD *)this + 4) + 24 * a2);
  v8 = v6[1];
  v7 = (unint64_t)v6[2];
  if ((unint64_t)v8 >= v7)
  {
    v10 = *v6;
    v11 = ((char *)v8 - (char *)*v6) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(16 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (double *)&v15[16 * v11];
    *(_QWORD *)v16 = a3;
    v16[1] = a4;
    v9 = v16 + 2;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 2;
        v8 -= 2;
      }
      while (v8 != v10);
      v8 = *v6;
    }
    *v6 = v16;
    v6[1] = v9;
    v6[2] = (double *)&v15[16 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v8 = a3;
    v8[1] = a4;
    v9 = v8 + 2;
  }
  v6[1] = v9;
}

uint64_t Espresso::AOT::SegmenterShortestPath::StateGraph::GetNodeIdx(uint64_t a1, _QWORD *a2)
{
  return *a2 + a2[1] + a2[1] * *(_QWORD *)(a1 + 8) + 1;
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdgeFromSI(Espresso::AOT::SegmenterShortestPath::StateGraph *a1, _QWORD *a2, double a3)
{
  Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdge(a1, *((_QWORD *)a1 + 2), *a2 + a2[1] + a2[1] * *((_QWORD *)a1 + 1) + 1, a3);
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdgeToSO(Espresso::AOT::SegmenterShortestPath::StateGraph *a1, _QWORD *a2, double a3)
{
  Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdge(a1, *a2 + a2[1] + a2[1] * *((_QWORD *)a1 + 1) + 1, *((_QWORD *)a1 + 3), a3);
}

unint64_t Espresso::AOT::SegmenterShortestPath::StateGraph::GetBEIdx(Espresso::AOT::SegmenterShortestPath::StateGraph *this, unint64_t a2)
{
  if (*((_QWORD *)this + 2) >= a2 || *((_QWORD *)this + 3) <= a2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("node idx out of range");
  return (a2 - 1) / (*((_QWORD *)this + 1) + 1);
}

unint64_t Espresso::AOT::SegmenterShortestPath::StateGraph::GetOpIdx(Espresso::AOT::SegmenterShortestPath::StateGraph *this, unint64_t a2)
{
  if (*((_QWORD *)this + 2) >= a2 || *((_QWORD *)this + 3) <= a2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("node idx out of range");
  return (a2 - 1) % (*((_QWORD *)this + 1) + 1);
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::FindOpToBackend(Espresso::AOT::SegmenterShortestPath::StateGraph *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  char *v37;
  void *v38;
  char *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  unint64_t **v43;
  unint64_t v44;
  char *v45;
  char *v46;
  void *__p;
  char *v48;

  Espresso::AOT::CostGraph::CostGraph((uint64_t **)&__p, (uint64_t)this + 32);
  Espresso::AOT::CostGraph::FindShortestPath((Espresso::AOT::CostGraph *)&__p, *((_QWORD *)this + 2), *((_QWORD *)this + 3), &v45);
  v4 = v45;
  v5 = v46;
  if (v45 == v46)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Segmenter failed: No valid segmentation can be generated for this model. It should not reach here, please file a radar to Espresso | all.");
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((int)((unint64_t)(v5 - v4) >> 3) > 3)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *((_QWORD *)this + 2);
    v10 = 1;
    v43 = (unint64_t **)a2;
    while (1)
    {
      v11 = *(_QWORD *)&v4[8 * v10];
      if (v9 >= v11 || (v12 = *((_QWORD *)this + 3), v12 <= v11))
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("node idx out of range");
      v13 = *(_QWORD *)&v4[8 * v10 + 8];
      if (v9 >= v13 || v12 <= v13)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("node idx out of range");
      v14 = v11 - 1;
      v15 = *((_QWORD *)this + 1);
      v44 = v14 / (v15 + 1);
      if (v44 == (v13 - 1) / (v15 + 1))
        break;
LABEL_5:
      if (++v10 >= (((v5 - v4) << 29) - 0x200000000) >> 32)
        goto LABEL_43;
    }
    v42 = v10;
    if (v9 >= v13)
LABEL_55:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("node idx out of range");
    v16 = v14 % (v15 + 1);
    while (1)
    {
      if (*((_QWORD *)this + 3) <= v13)
        goto LABEL_55;
      v15 = *((_QWORD *)this + 1);
      if (v16 >= (v13 - 1) % (v15 + 1))
      {
        v4 = v45;
        v5 = v46;
        v10 = v42;
        goto LABEL_5;
      }
      if (v8 < v6)
      {
        *(_QWORD *)v8 = v44;
        v17 = (uint64_t)(v8 + 8);
      }
      else
      {
        v18 = (char *)*a2;
        v19 = (uint64_t)&v8[-*a2];
        v20 = v19 >> 3;
        v21 = (v19 >> 3) + 1;
        if (v21 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v6 - v18) >> 2 > v21)
          v21 = (v6 - v18) >> 2;
        if ((unint64_t)(v6 - v18) >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
        {
          if (v22 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = v22;
          v24 = operator new(8 * v22);
          v22 = v23;
          v7 = (unint64_t *)&v24[8 * v20];
          *v7 = v44;
          v17 = (uint64_t)(v7 + 1);
          if (v8 != v18)
          {
LABEL_27:
            v25 = v8 - 8 - v18;
            if (v25 < 0x168
              || &v24[v19 - 8 - (v25 & 0xFFFFFFFFFFFFFFF8)] > &v24[v19 - 8]
              || &v8[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8
              || (unint64_t)(v8 - v24 - v19) < 0x20)
            {
              v26 = v8;
              a2 = v43;
            }
            else
            {
              v30 = (v25 >> 3) + 1;
              v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
              v26 = &v8[-v31];
              v7 = (unint64_t *)((char *)v7 - v31);
              v32 = &v24[8 * v20 - 16];
              v33 = v8 - 16;
              v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v35 = *(_OWORD *)v33;
                *(v32 - 1) = *((_OWORD *)v33 - 1);
                *v32 = v35;
                v32 -= 2;
                v33 -= 32;
                v34 -= 4;
              }
              while (v34);
              a2 = v43;
              if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_30:
                v6 = &v24[8 * v22];
                *a2 = v7;
                a2[1] = v17;
                a2[2] = v6;
                if (!v18)
                  goto LABEL_14;
LABEL_34:
                v28 = v18;
                v29 = v6;
                operator delete(v28);
                v6 = v29;
                goto LABEL_14;
              }
            }
            do
            {
              v27 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *--v7 = v27;
            }
            while (v26 != v18);
            goto LABEL_30;
          }
        }
        else
        {
          v24 = 0;
          v7 = (unint64_t *)(8 * v20);
          *(_QWORD *)(8 * v20) = v44;
          v17 = 8 * v20 + 8;
          if (v8 != v18)
            goto LABEL_27;
        }
        a2 = v43;
        v6 = &v24[8 * v22];
        *v43 = v7;
        v43[1] = (unint64_t *)v17;
        v43[2] = (unint64_t *)v6;
        if (v18)
          goto LABEL_34;
      }
LABEL_14:
      a2[1] = v17;
      ++v16;
      v9 = *((_QWORD *)this + 2);
      v8 = (char *)v17;
      if (v9 >= v13)
        goto LABEL_55;
    }
  }
  v7 = 0;
  v8 = 0;
  v15 = *((_QWORD *)this + 1);
LABEL_43:
  if (v15 != (v8 - (char *)v7) >> 3)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Segmenter failed: invalid shortest path generated");
  if (v4)
  {
    v46 = v4;
    operator delete(v4);
  }
  v36 = (char *)__p;
  if (__p)
  {
    v37 = v48;
    v38 = __p;
    if (v48 != __p)
    {
      v39 = v48;
      do
      {
        v41 = (void *)*((_QWORD *)v39 - 3);
        v39 -= 24;
        v40 = v41;
        if (v41)
        {
          *((_QWORD *)v37 - 2) = v40;
          operator delete(v40);
        }
        v37 = v39;
      }
      while (v39 != v36);
      v38 = __p;
    }
    v48 = v36;
    operator delete(v38);
  }
}

void sub_1911321D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  void *v18;
  void *v19;

  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
    v19 = __p;
    if (!__p)
    {
LABEL_3:
      Espresso::AOT::CostGraph::~CostGraph((Espresso::AOT::CostGraph *)&a16);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v19 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v19);
  Espresso::AOT::CostGraph::~CostGraph((Espresso::AOT::CostGraph *)&a16);
  _Unwind_Resume(a1);
}

void Espresso::AOT::CostGraph::~CostGraph(Espresso::AOT::CostGraph *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(void **)this;
    if (v3 != v2)
    {
      v5 = *((_QWORD *)this + 1);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v2;
    operator delete(v4);
  }
}

uint64_t Espresso::AOT::SegmenterShortestPath::StateGraph::GetNodes(Espresso::AOT::SegmenterShortestPath::StateGraph *this)
{
  return (uint64_t)this + 32;
}

uint64_t Espresso::AOT::SegmenterShortestPath::OpCostMap::DeleteDispatchUnit(uint64_t result, unsigned __int8 **a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  char v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v22 = a3;
  v3 = *(_QWORD *)(result + 24);
  v4 = *(_QWORD *)(result + 32);
  if (v3 == v4)
    return result;
  v6 = (_QWORD *)result;
  v7 = 0;
  v8 = *((_BYTE *)a2 + 23);
  if (v8 >= 0)
    v9 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  if (v8 >= 0)
    v10 = (unsigned __int8 *)a2;
  else
    v10 = *a2;
  while (1)
  {
    v11 = *(unsigned __int8 *)(v3 + 23);
    if ((v11 & 0x80u) == 0)
      v12 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
    else
      v12 = *(unsigned __int8 **)(v3 + 8);
    if (v12 != v9)
      goto LABEL_9;
    if ((v11 & 0x80) == 0)
      break;
    result = memcmp(*(const void **)v3, v10, *(_QWORD *)(v3 + 8));
    if (!(_DWORD)result)
      goto LABEL_19;
LABEL_9:
    ++v7;
    v3 += 24;
    if (v3 == v4)
      return result;
  }
  if (*(_BYTE *)(v3 + 23))
  {
    v13 = 0;
    while (*(unsigned __int8 *)(v3 + v13) == v10[v13])
    {
      if (v11 == ++v13)
        goto LABEL_19;
    }
    goto LABEL_9;
  }
LABEL_19:
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6[1] - *v6) >> 3) <= v7)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  result = *v6 + 40 * v7;
  v14 = *(int8x8_t *)(result + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8(v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v16 = a3;
      if (*(_QWORD *)&v14 <= a3)
        v16 = a3 % *(_QWORD *)&v14;
    }
    else
    {
      v16 = (*(_QWORD *)&v14 - 1) & a3;
    }
    v17 = *(_QWORD **)(*(_QWORD *)result + 8 * v16);
    if (v17)
    {
      v18 = (_QWORD *)*v17;
      if (v18)
      {
        if (v15.u32[0] < 2uLL)
        {
          v19 = *(_QWORD *)&v14 - 1;
          while (1)
          {
            v21 = v18[1];
            if (v21 == a3)
            {
              if (v18[2] == a3)
                return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((_QWORD *)result, &v22);
            }
            else if ((v21 & v19) != v16)
            {
              return result;
            }
            v18 = (_QWORD *)*v18;
            if (!v18)
              return result;
          }
        }
        do
        {
          v20 = v18[1];
          if (v20 == a3)
          {
            if (v18[2] == a3)
              return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>((_QWORD *)result, &v22);
          }
          else
          {
            if (v20 >= *(_QWORD *)&v14)
              v20 %= *(_QWORD *)&v14;
            if (v20 != v16)
              return result;
          }
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
    }
  }
  return result;
}

uint64_t Espresso::AOT::SegmenterShortestPath::OpCostMap::FindBackendID(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = *((_BYTE *)a2 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v6 = a2[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a2;
    else
      v7 = *a2;
    do
    {
      v8 = *(unsigned __int8 *)(v2 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 23);
      else
        v9 = *(unsigned __int8 **)(v2 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v2, v7, *(_QWORD *)(v2 + 8)))
            return v4;
        }
        else
        {
          if (!*(_BYTE *)(v2 + 23))
            return v4;
          v10 = 0;
          while (*(unsigned __int8 *)(v2 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v4;
          }
        }
      }
      ++v4;
      v2 += 24;
    }
    while (v2 != v3);
  }
  return 0;
}

void Espresso::AOT::SegmenterShortestPath::OpCostMap::PruneOpToCostBasedOnAttribs(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t Function;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  NSObject *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  void **v22;
  uint64_t Attribute;
  uint64_t v24;
  MIL::IRValue *v25;
  const char *v26;
  void **v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  int8x8_t v40;
  uint8x8_t v41;
  unint64_t v42;
  NSObject *v43;
  void **v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  std::string *v50;
  unint64_t v51;
  __int128 v52;
  _QWORD *v53;
  int8x8_t v54;
  uint8x8_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  char v65;
  void *v66;
  unsigned __int8 *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char *v71;
  unsigned __int8 *v72;
  void **v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  signed __int8 v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  int8x8_t v85;
  uint8x8_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void **v93;
  void **v94;
  void **v95;
  std::__shared_weak_count *v96;
  unint64_t *p_shared_owners;
  unint64_t v98;
  uint64_t v99;
  _QWORD v100[2];
  __int128 v101;
  void *v102;
  unsigned __int8 *v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t v107;
  __int128 buf;
  unint64_t v109;
  void *__p[2];
  char v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  Function = MIL::IRProgram::GetFunction();
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v8 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  v9 = **v8;
  v10 = (*v8)[1];
  if (v9 != v10)
  {
    v11 = *(void **)"IntendedBackend";
    v12 = *(void **)"dBackend";
    while (1)
    {
      v111 = 15;
      strcpy((char *)__p, "IntendedBackend");
      if (MIL::IRObject::TryGetAttribute())
        break;
      v9 += 16;
      if (v9 == v10)
        return;
    }
    v14 = Espresso::espresso_os_log_subsystem(0, v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      if (a3[23] >= 0)
        v15 = a3;
      else
        v15 = *(char **)a3;
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v15;
      _os_log_impl(&dword_190DAF000, v14, OS_LOG_TYPE_INFO, "[SegmenterShortestPath::OpCostMap] Prune OpToCost Mapping for function: %s", (uint8_t *)__p, 0xCu);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v105, a2);
    v16 = MIL::IRProgram::GetFunction();
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
    v20 = v18;
    if (*(_QWORD *)(*(_QWORD *)v18 + 8) != **(_QWORD **)v18)
    {
      v21 = 0;
      *(_QWORD *)&v19 = 136315138;
      v101 = v19;
      qmemcpy(v100, "dBackendIntended", sizeof(v100));
      v99 = v18;
      do
      {
        v111 = 15;
        __p[0] = v11;
        *(void **)((char *)__p + 7) = v12;
        HIBYTE(__p[1]) = 0;
        Attribute = MIL::IRObject::TryGetAttribute();
        v24 = Attribute;
        if (v111 < 0)
        {
          operator delete(__p[0]);
          if (!v24)
            goto LABEL_16;
        }
        else if (!Attribute)
        {
          goto LABEL_16;
        }
        if (v21 >= (uint64_t)(*(_QWORD *)(*(_QWORD *)v20 + 8) - **(_QWORD **)v20) >> 4)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        HIBYTE(v109) = 15;
        *(_QWORD *)&buf = v11;
        *(_QWORD *)((char *)&buf + 7) = v12;
        HIBYTE(buf) = 0;
        v25 = (MIL::IRValue *)MIL::IRObject::GetAttribute();
        E5Common::Utils::MILListToCpp<std::string>(v25, (uint64_t)__p);
        if ((SHIBYTE(v109) & 0x80000000) == 0)
        {
          v28 = (void **)__p[0];
          v27 = (void **)__p[1];
          if (__p[0] != __p[1])
            goto LABEL_30;
LABEL_26:
          v20 = v99;
          v12 = (void *)v100[0];
          if (v28)
            goto LABEL_195;
          goto LABEL_15;
        }
        operator delete((void *)buf);
        v28 = (void **)__p[0];
        v27 = (void **)__p[1];
        if (__p[0] == __p[1])
          goto LABEL_26;
        while (1)
        {
LABEL_30:
          v30 = a1[3];
          v29 = a1[4];
          if (v30 == v29)
          {
LABEL_52:
            v43 = Espresso::espresso_os_log_subsystem(0, v26);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              v44 = v28;
              if (*((char *)v28 + 23) < 0)
                v44 = (void **)*v28;
              LODWORD(buf) = v101;
              *(_QWORD *)((char *)&buf + 4) = v44;
              _os_log_impl(&dword_190DAF000, v43, OS_LOG_TYPE_INFO, "[SegmenterShortestPath::OpCostMap] Backend: %s not passed as an option for segmentation or backward compat path in use", (uint8_t *)&buf, 0xCu);
            }
            goto LABEL_29;
          }
          v31 = 0;
          v32 = *((_BYTE *)v28 + 23);
          if (v32 >= 0)
            v33 = (void *)*((unsigned __int8 *)v28 + 23);
          else
            v33 = v28[1];
          if (v32 >= 0)
            v34 = (unsigned __int8 *)v28;
          else
            v34 = (unsigned __int8 *)*v28;
          v35 = a1[3];
          while (1)
          {
            v36 = *(unsigned __int8 *)(v35 + 23);
            v37 = (v36 & 0x80u) == 0 ? (void *)*(unsigned __int8 *)(v35 + 23) : *(void **)(v35 + 8);
            if (v37 == v33)
              break;
LABEL_39:
            ++v31;
            v35 += 24;
            if (v35 == v29)
              goto LABEL_52;
          }
          if ((v36 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v35, v34, *(_QWORD *)(v35 + 8)))
              goto LABEL_49;
            goto LABEL_39;
          }
          if (*(_BYTE *)(v35 + 23))
          {
            v38 = 0;
            while (*(unsigned __int8 *)(v35 + v38) == v34[v38])
            {
              if (v36 == ++v38)
                goto LABEL_49;
            }
            goto LABEL_39;
          }
LABEL_49:
          v39 = (_QWORD *)(*a1 + 40 * v31);
          v40 = (int8x8_t)v39[1];
          if (v40)
          {
            v41 = (uint8x8_t)vcnt_s8(v40);
            v41.i16[0] = vaddlv_u8(v41);
            if (v41.u32[0] > 1uLL)
            {
              v42 = v21;
              if (v21 >= *(_QWORD *)&v40)
                v42 = v21 % *(_QWORD *)&v40;
            }
            else
            {
              v42 = (*(_QWORD *)&v40 - 1) & v21;
            }
            v45 = *(_QWORD **)(*v39 + 8 * v42);
            if (v45)
            {
              v46 = (_QWORD *)*v45;
              if (v46)
                break;
            }
          }
LABEL_29:
          v28 += 3;
          if (v28 == v27)
            goto LABEL_194;
        }
        if (v41.u32[0] < 2uLL)
        {
          v47 = *(_QWORD *)&v40 - 1;
          while (1)
          {
            v49 = v46[1];
            if (v49 == v21)
            {
              if (v46[2] == v21)
                goto LABEL_73;
            }
            else if ((v49 & v47) != v42)
            {
              goto LABEL_29;
            }
            v46 = (_QWORD *)*v46;
            if (!v46)
              goto LABEL_29;
          }
        }
        while (1)
        {
          v48 = v46[1];
          if (v48 == v21)
            break;
          if (v48 >= *(_QWORD *)&v40)
            v48 %= *(_QWORD *)&v40;
          if (v48 != v42)
            goto LABEL_29;
LABEL_62:
          v46 = (_QWORD *)*v46;
          if (!v46)
            goto LABEL_29;
        }
        if (v46[2] != v21)
          goto LABEL_62;
LABEL_73:
        v50 = 0;
        v51 = 0;
        buf = 0uLL;
        v109 = 0;
        do
        {
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= v51)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v53 = (_QWORD *)(*a1 + 40 * v51);
          v54 = (int8x8_t)v53[1];
          if (v54)
          {
            v55 = (uint8x8_t)vcnt_s8(v54);
            v55.i16[0] = vaddlv_u8(v55);
            if (v55.u32[0] > 1uLL)
            {
              v56 = v21;
              if (v21 >= *(_QWORD *)&v54)
                v56 = v21 % *(_QWORD *)&v54;
            }
            else
            {
              v56 = (*(_QWORD *)&v54 - 1) & v21;
            }
            v57 = *(_QWORD **)(*v53 + 8 * v56);
            if (v57)
            {
              v58 = (_QWORD *)*v57;
              if (v58)
              {
                if (v55.u32[0] < 2uLL)
                {
                  v59 = *(_QWORD *)&v54 - 1;
                  while (1)
                  {
                    v61 = v58[1];
                    if (v61 == v21)
                    {
                      if (v58[2] == v21)
                        goto LABEL_101;
                    }
                    else if ((v61 & v59) != v56)
                    {
                      goto LABEL_78;
                    }
                    v58 = (_QWORD *)*v58;
                    if (!v58)
                      goto LABEL_78;
                  }
                }
                do
                {
                  v60 = v58[1];
                  if (v60 == v21)
                  {
                    if (v58[2] == v21)
                    {
LABEL_101:
                      v62 = v30 + 24 * v51;
                      if ((unint64_t)v50 < v109)
                      {
                        if (*(char *)(v62 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)v62, *(_QWORD *)(v62 + 8));
                        }
                        else
                        {
                          v52 = *(_OWORD *)v62;
                          v50->__r_.__value_.__r.__words[2] = *(_QWORD *)(v62 + 16);
                          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v52;
                        }
                        ++v50;
                      }
                      else
                      {
                        v50 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&buf, v62);
                      }
                      *((_QWORD *)&buf + 1) = v50;
                      v30 = a1[3];
                      v29 = a1[4];
                      break;
                    }
                  }
                  else
                  {
                    if (v60 >= *(_QWORD *)&v54)
                      v60 %= *(_QWORD *)&v54;
                    if (v60 != v56)
                      break;
                  }
                  v58 = (_QWORD *)*v58;
                }
                while (v58);
              }
            }
          }
LABEL_78:
          ++v51;
        }
        while (v51 < 0xAAAAAAAAAAAAAAABLL * ((v29 - v30) >> 3));
        v102 = 0;
        v103 = 0;
        v104 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v102, buf, (uint64_t)v50, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v50 - buf) >> 3));
        v63 = (unsigned __int8 *)v102;
        v64 = v103;
        if (v102 == v103)
        {
LABEL_122:
          if (v63 + 24 != v64)
            goto LABEL_126;
        }
        else
        {
          v65 = *((_BYTE *)v28 + 23);
          if (v65 >= 0)
            v66 = (void *)*((unsigned __int8 *)v28 + 23);
          else
            v66 = v28[1];
          if (v65 >= 0)
            v67 = (unsigned __int8 *)v28;
          else
            v67 = (unsigned __int8 *)*v28;
          do
          {
            v68 = v63[23];
            if ((v68 & 0x80u) == 0)
              v69 = (void *)v63[23];
            else
              v69 = (void *)*((_QWORD *)v63 + 1);
            if (v69 == v66)
            {
              if ((v68 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v63, v67, *((_QWORD *)v63 + 1)))
                  goto LABEL_122;
              }
              else
              {
                if (!v63[23])
                  goto LABEL_122;
                v70 = 0;
                while (v63[v70] == v67[v70])
                {
                  if (v68 == ++v70)
                    goto LABEL_122;
                }
              }
            }
            v63 += 24;
          }
          while (v63 != v64);
          v63 = v64;
          do
          {
LABEL_126:
            if ((char)v63[23] < 0)
              operator delete(*(void **)v63);
            *(_OWORD *)v63 = *(_OWORD *)(v63 + 24);
            *((_QWORD *)v63 + 2) = *((_QWORD *)v63 + 5);
            v63[47] = 0;
            v71 = (char *)(v63 + 48);
            v63[24] = 0;
            v63 += 24;
          }
          while (v71 != (char *)v64);
          v64 = v103;
        }
        while (v64 != v63)
        {
          if ((char)*(v64 - 1) < 0)
            operator delete(*((void **)v64 - 3));
          v64 -= 24;
        }
        v103 = v63;
        v72 = (unsigned __int8 *)v102;
        if (v102 == v63)
        {
          if (!v63)
            goto LABEL_184;
          goto LABEL_135;
        }
        while (2)
        {
          v107 = v21;
          v76 = a1[3];
          v75 = a1[4];
          if (v76 == v75)
            goto LABEL_142;
          v77 = 0;
          v78 = v72[23];
          if (v78 >= 0)
            v79 = v72[23];
          else
            v79 = *((_QWORD *)v72 + 1);
          if (v78 >= 0)
            v80 = v72;
          else
            v80 = *(unsigned __int8 **)v72;
          while (2)
          {
            v81 = *(unsigned __int8 *)(v76 + 23);
            if ((v81 & 0x80u) == 0)
              v82 = *(unsigned __int8 *)(v76 + 23);
            else
              v82 = *(_QWORD *)(v76 + 8);
            if (v82 != v79)
            {
LABEL_151:
              ++v77;
              v76 += 24;
              if (v76 == v75)
                goto LABEL_142;
              continue;
            }
            break;
          }
          if ((v81 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v76, v80, *(_QWORD *)(v76 + 8)))
              goto LABEL_161;
            goto LABEL_151;
          }
          if (*(_BYTE *)(v76 + 23))
          {
            v83 = 0;
            while (*(unsigned __int8 *)(v76 + v83) == v80[v83])
            {
              if (v81 == ++v83)
                goto LABEL_161;
            }
            goto LABEL_151;
          }
LABEL_161:
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= v77)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v84 = (_QWORD *)(*a1 + 40 * v77);
          v85 = (int8x8_t)v84[1];
          if (v85)
          {
            v86 = (uint8x8_t)vcnt_s8(v85);
            v86.i16[0] = vaddlv_u8(v86);
            if (v86.u32[0] > 1uLL)
            {
              v87 = v21;
              if (*(_QWORD *)&v85 <= v21)
                v87 = v21 % *(_QWORD *)&v85;
            }
            else
            {
              v87 = (*(_QWORD *)&v85 - 1) & v21;
            }
            v88 = *(_QWORD **)(*v84 + 8 * v87);
            if (v88)
            {
              v89 = (_QWORD *)*v88;
              if (v89)
              {
                if (v86.u32[0] < 2uLL)
                {
                  v90 = *(_QWORD *)&v85 - 1;
                  while (1)
                  {
                    v92 = v89[1];
                    if (v92 == v21)
                    {
                      if (v89[2] == v21)
                        goto LABEL_141;
                    }
                    else if ((v92 & v90) != v87)
                    {
                      goto LABEL_142;
                    }
                    v89 = (_QWORD *)*v89;
                    if (!v89)
                      goto LABEL_142;
                  }
                }
                do
                {
                  v91 = v89[1];
                  if (v91 == v21)
                  {
                    if (v89[2] == v21)
                    {
LABEL_141:
                      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>(v84, &v107);
                      break;
                    }
                  }
                  else
                  {
                    if (v91 >= *(_QWORD *)&v85)
                      v91 %= *(_QWORD *)&v85;
                    if (v91 != v87)
                      break;
                  }
                  v89 = (_QWORD *)*v89;
                }
                while (v89);
              }
            }
          }
LABEL_142:
          v72 += 24;
          if (v72 != v63)
            continue;
          break;
        }
        v63 = (unsigned __int8 *)v102;
        if (!v102)
        {
LABEL_184:
          v74 = (void **)buf;
          if (!(_QWORD)buf)
            goto LABEL_194;
LABEL_187:
          v93 = (void **)*((_QWORD *)&buf + 1);
          v94 = v74;
          if (*((void ***)&buf + 1) != v74)
          {
            do
            {
              if (*((char *)v93 - 1) < 0)
                operator delete(*(v93 - 3));
              v93 -= 3;
            }
            while (v93 != v74);
            v94 = (void **)buf;
          }
          *((_QWORD *)&buf + 1) = v74;
          operator delete(v94);
          goto LABEL_194;
        }
LABEL_135:
        v73 = (void **)v103;
        if (v103 == v63)
        {
          v103 = v63;
          operator delete(v63);
          v74 = (void **)buf;
          if (!(_QWORD)buf)
            goto LABEL_194;
          goto LABEL_187;
        }
        do
        {
          if (*((char *)v73 - 1) < 0)
            operator delete(*(v73 - 3));
          v73 -= 3;
        }
        while (v73 != (void **)v63);
        v103 = v63;
        operator delete(v102);
        v74 = (void **)buf;
        if ((_QWORD)buf)
          goto LABEL_187;
LABEL_194:
        v28 = (void **)__p[0];
        v20 = v99;
        v12 = (void *)v100[0];
        if (__p[0])
        {
LABEL_195:
          v95 = (void **)__p[1];
          v22 = v28;
          if (__p[1] != v28)
          {
            do
            {
              if (*((char *)v95 - 1) < 0)
                operator delete(*(v95 - 3));
              v95 -= 3;
            }
            while (v95 != v28);
            v22 = (void **)__p[0];
          }
          __p[1] = v28;
          operator delete(v22);
        }
LABEL_15:
        v11 = (void *)v100[1];
LABEL_16:
        ++v21;
      }
      while (v21 < (uint64_t)(*(_QWORD *)(*(_QWORD *)v20 + 8) - **(_QWORD **)v20) >> 4);
    }
    v96 = v106;
    if (v106)
    {
      p_shared_owners = (unint64_t *)&v106->__shared_owners_;
      do
        v98 = __ldaxr(p_shared_owners);
      while (__stlxr(v98 - 1, p_shared_owners));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
}

void sub_191132FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::vector<std::string>::~vector[abi:ne180100](&a21);
  std::vector<std::string>::~vector[abi:ne180100](&__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void E5Common::Utils::MILListToCpp<std::string>(MIL::IRValue *a1@<X0>, uint64_t a2@<X8>)
{
  MIL::IRListValue *v3;
  uint64_t Values;
  uint64_t v5;
  MIL::IRValue **v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  char *v10;
  int v11;
  void *__p[2];
  uint64_t v13;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = (MIL::IRListValue *)MIL::IRValue::AsList(a1);
  Values = MIL::IRListValue::GetValues(v3);
  if (v5)
  {
    v6 = (MIL::IRValue **)Values;
    v7 = 16 * v5;
    do
    {
      MIL::IRValue::AsTensor(*v6);
      MIL::IRValue::GetScalar<std::string>();
      v9 = *(_QWORD *)(a2 + 8);
      if (v9 < *(_QWORD *)(a2 + 16))
      {
        v8 = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 16) = v13;
        *(_OWORD *)v9 = v8;
        *(_QWORD *)(a2 + 8) = v9 + 24;
      }
      else
      {
        v10 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)__p);
        v11 = SHIBYTE(v13);
        *(_QWORD *)(a2 + 8) = v10;
        if (v11 < 0)
          operator delete(__p[0]);
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
}

void sub_191133144(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191133158(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19113316C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  if (a15 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](v15);
    _Unwind_Resume(a1);
  }
  std::vector<std::string>::~vector[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmenterShortestPath::BuildStateGraph(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t Function;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  MIL::Attributes::FlexibleShapeInfo *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  void *v18;
  unsigned __int8 *SaveSegmentationData;
  uint64_t *v20;
  _QWORD *ExcludedBackendsPerEntryPoint;
  uint64_t *v22;
  __int128 v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  char *v27;
  const char *v28;
  NSObject *v29;
  void **v30;
  NSObject *v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  Espresso::AOT::ValidationResult *v41;
  _OWORD *v42;
  unsigned int v43;
  int v44;
  uint64_t ValidDispatchUnits;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  double Runtime;
  Espresso::AOT::CostEstimate *v54;
  void *v55;
  Espresso::AOT::ValidationMessage **v56;
  unint64_t *v57;
  unint64_t v58;
  const char *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  NSObject *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  Espresso::AOT::ValidationResult *v68;
  uint64_t v69;
  _QWORD **v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  MIL::IRValue *Attribute;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t *v88;
  char *v89;
  _QWORD *v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  _QWORD *v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  _OWORD *v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  _QWORD *v113;
  _QWORD *v114;
  void *v115;
  void *v116;
  void *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  _BYTE *v122;
  _BYTE *v123;
  int64_t v124;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  Espresso::AOT::CostEstimate **v130;
  Espresso::AOT::CostEstimate **v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  Espresso::AOT::SegmenterShortestPath *v142;
  _QWORD *v143;
  void *v144;
  _QWORD *v145;
  _QWORD *v146;
  void *v147;
  void *v148;
  _QWORD *v149;
  _QWORD *v150;
  void *v151;
  _QWORD *v152;
  _QWORD *v153;
  void *v154;
  void *v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  double v160;
  double v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  Espresso::AOT::SegmenterShortestPath *v165;
  uint64_t **v166;
  void **v167;
  int8x8_t v168;
  uint8x8_t v169;
  unint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  int8x8_t v176;
  uint8x8_t v177;
  unint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  unint64_t **v189;
  unint64_t v190;
  unint64_t *v191;
  uint64_t *v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  int8x8_t v196;
  unint64_t v197;
  uint8x8_t v198;
  unint64_t v199;
  unint64_t v200;
  void ***v201;
  void **v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  double v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t *v212;
  unint64_t v213;
  double *v214;
  uint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  double *v220;
  unint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  unint64_t *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char *v229;
  double *v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  unint64_t *v241;
  uint64_t v242;
  unint64_t v243;
  double v244;
  Espresso::AOT::CostEstimate *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint8x8_t v251;
  unint64_t v252;
  _QWORD **v253;
  _QWORD *v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  double *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  double v265;
  Espresso::AOT::CostEstimate *v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  void *v270;
  unint64_t v271;
  unint64_t v272;
  uint8x8_t v273;
  unint64_t v274;
  _QWORD **v275;
  _QWORD *v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  _QWORD *v281;
  _QWORD *v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  _QWORD *v287;
  _QWORD *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t **i;
  int v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  Espresso::AOT::CostEstimate **v300;
  __int128 v301;
  Espresso::AOT::MILSegmenterAnalytics *v302;
  _QWORD *v303;
  _QWORD *v304;
  void *v305;
  char *v306;
  char *v307;
  void *v308;
  char *v309;
  void *v310;
  void *v311;
  _QWORD *v312;
  _QWORD *v313;
  void *v314;
  _QWORD *v315;
  void *v316;
  void *v317;
  _QWORD *v318;
  void *v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  void **v323;
  void *v324;
  void **v325;
  void **v326;
  void **v327;
  void *v328;
  void **v329;
  std::__shared_weak_count *v330;
  std::__shared_weak_count *v331;
  void *v332;
  std::__shared_weak_count_vtbl *v333;
  void (__cdecl *v334)(std::__shared_weak_count *__hidden);
  void *v335;
  void *shared_owners;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  std::logic_error *exception;
  std::runtime_error *v344;
  _QWORD **v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _OWORD v349[2];
  uint64_t v350;
  uint64_t v351;
  int v352;
  __int128 v353;
  uint64_t v354;
  unint64_t v355;
  void *v356;
  unint64_t v357;
  __int128 v358;
  __int128 v359;
  unint64_t v360;
  char *v361;
  uint64_t *v362;
  uint64_t **v363;
  Espresso::AOT::SegmenterShortestPath *v364;
  Espresso::AOT::CostEstimate *v365[2];
  char v366;
  Espresso::AOT::CostEstimate *v367[2];
  __int128 v368;
  int v369;
  unint64_t v370;
  void *v371[2];
  void *v372[2];
  int v373;
  Espresso::AOT::ValidationResult *v374[2];
  char v375;
  uint64_t v376;
  void *v377;
  void *v378;
  uint64_t v379;
  std::__shared_weak_count *v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  uint64_t v383;
  std::__shared_weak_count *v384;
  __int128 v385;
  __int128 v386;
  int v387;
  Espresso::AOT::MILSegmenterAnalytics *v388;
  void *v389;
  void **v390;
  uint64_t v391;
  void *v392;
  std::__shared_weak_count *v393;
  void *v394;
  void **v395;
  uint64_t v396;
  std::__shared_weak_count *v397;
  uint64_t v398;
  std::__shared_weak_count *v399;
  void *__p[4];
  int v401;
  __int128 buf;
  __int128 v403;
  char *v404;
  char *v405;
  uint64_t v406;

  v406 = *MEMORY[0x1E0C80C00];
  v361 = a3;
  Function = MIL::IRProgram::GetFunction();
  v360 = a2;
  (*(void (**)(uint64_t *__return_ptr, unint64_t))(*(_QWORD *)a2 + 48))(&v398, a2);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_191A71250;
  strcpy((char *)__p[0], "FlexibleShapeInformation");
  MIL::IRObject::TryGetAttributeSharedPtr();
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!v396)
    {
LABEL_16:
      v350 = 0;
      v8 = v360;
      v13 = Function;
      goto LABEL_17;
    }
  }
  else if (!v396)
  {
    goto LABEL_16;
  }
  MIL::Attributes::FlexibleShapeInfo::Make();
  MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes(v374[0]);
  if (!v392)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "MIL program has non-constant (dynamic) shapes with FlexibleShapeInformation attribute. But, it misses Default Shape Please consult MIL Framework or milPython on adding this to the MIL text.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  MEMORY[0x19401BA88](&v385, v360);
  MIL::Passes::PropagateInputTensorShapes();
  if ((MIL::Passes::TypeInferenceResult::IsGood((MIL::Passes::TypeInferenceResult *)__p) & 1) == 0)
  {
    v344 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)__p);
    std::operator+<char>();
    std::runtime_error::runtime_error(v344, (const std::string *)&buf);
    __cxa_throw(v344, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)&v385);
  v8 = buf;
  MEMORY[0x19401B5D8](__p);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&v385);
  v9 = v393;
  if (v393)
  {
    p_shared_owners = (unint64_t *)&v393->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v374[0];
  v374[0] = 0;
  if (v12)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v12);
    MEMORY[0x19401CD90]();
  }
  if (!v8)
    goto LABEL_16;
  v13 = MIL::IRProgram::GetFunction();
  v350 = v8;
LABEL_17:
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a1 + 64);
  v390 = 0;
  v391 = 0;
  v389 = 0;
  v357 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v389, v14, v15, v357);
  v362 = (uint64_t *)(a1 + 56);
  Espresso::AOT::SegmenterShortestPath::OpCostMap::OpCostMap((char **)&v392, (uint64_t *)&v389);
  v16 = (void **)v389;
  if (v389)
  {
    v17 = v390;
    v18 = v389;
    if (v390 != v389)
    {
      do
      {
        if (*((char *)v17 - 1) < 0)
          operator delete(*(v17 - 3));
        v17 -= 3;
      }
      while (v17 != v16);
      v18 = v389;
    }
    v390 = v16;
    operator delete(v18);
  }
  SaveSegmentationData = (unsigned __int8 *)Espresso::AOT::MILSegmenterOptions::GetSaveSegmentationData(*(Espresso::AOT::MILSegmenterOptions **)(a1 + 48));
  v20 = v362;
  std::make_unique[abi:ne180100]<Espresso::AOT::MILSegmenterAnalytics,BOOL const&,MIL::IRProgram const&,std::vector<std::string> const&,std::string const&>(SaveSegmentationData, v8, v362, (uint64_t)v361, (uint64_t *)&v388);
  ExcludedBackendsPerEntryPoint = (_QWORD *)Espresso::AOT::MILSegmenterOptions::GetExcludedBackendsPerEntryPoint(*(Espresso::AOT::MILSegmenterOptions **)(a1 + 48));
  v385 = 0u;
  v386 = 0u;
  v387 = 1065353216;
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(ExcludedBackendsPerEntryPoint, (uint64_t)v361);
  if (v22 && &v385 != (__int128 *)(v22 + 5))
  {
    v387 = *((_DWORD *)v22 + 18);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&v385, (uint64_t *)v22[7], 0);
  }
  __p[0] = operator new(0x20uLL);
  v353 = xmmword_191A7C2C0;
  *(_OWORD *)&__p[1] = xmmword_191A7C2C0;
  strcpy((char *)__p[0], "NeuralEngineOptimizedIOBuffer");
  qmemcpy(v349, "ptimizedIOBufferNeuralEngineOpti", sizeof(v349));
  MIL::IRObject::TryGetAttributeSharedPtr();
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v355 = v14;
    v356 = (void *)v8;
    v351 = a4;
    v354 = v15;
    v364 = (Espresso::AOT::SegmenterShortestPath *)a1;
    if (v15 != v14)
      goto LABEL_30;
  }
  else
  {
    v355 = v14;
    v356 = (void *)v8;
    v351 = a4;
    v354 = v15;
    v364 = (Espresso::AOT::SegmenterShortestPath *)a1;
    if (v15 != v14)
    {
LABEL_30:
      v24 = 0;
      v352 = 0;
      v25 = (_QWORD *)(a1 + 8);
      v26 = v357;
      if (v357 <= 1)
        v26 = 1;
      v363 = (uint64_t **)v26;
      *(_QWORD *)&v23 = 136315138;
      v359 = v23;
      *(_QWORD *)&v23 = 136315394;
      v358 = v23;
      while (1)
      {
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v385, *v20 + 24 * v24))
        {
          v29 = Espresso::espresso_os_log_subsystem(0, v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            v30 = (void **)(*v20 + 24 * v24);
            if (*((char *)v30 + 23) < 0)
              v30 = (void **)*v30;
            if (v361[23] >= 0)
              v27 = v361;
            else
              v27 = *(char **)v361;
            LODWORD(__p[0]) = v358;
            *(void **)((char *)__p + 4) = v30;
            WORD2(__p[1]) = 2080;
            *(void **)((char *)&__p[1] + 6) = v27;
            _os_log_impl(&dword_190DAF000, v29, OS_LOG_TYPE_INFO, "[BuildStateGraph] Skipping backend: %s for entry point: %s", (uint8_t *)__p, 0x16u);
          }
          goto LABEL_37;
        }
        v31 = Espresso::espresso_os_log_subsystem(0, v28);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          v32 = (void **)(*v20 + 24 * v24);
          if (*((char *)v32 + 23) < 0)
            v32 = (void **)*v32;
          LODWORD(__p[0]) = v359;
          *(void **)((char *)__p + 4) = v32;
          _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "[BuildStateGraph] Start building state graph for backend: %s", (uint8_t *)__p, 0xCu);
        }
        Espresso::AOT::BackendRegistry::GetValidator(v25, *v20 + 24 * v24, __p);
        (*(void (**)(Espresso::AOT::ValidationResult **__return_ptr, void *, unint64_t, char *))(*(_QWORD *)__p[0] + 16))(v374, __p[0], v360, v361);
        v33 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_50;
        v34 = (unint64_t *)((char *)__p[1] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
          v36 = *v20;
          if (!v383)
            goto LABEL_67;
        }
        else
        {
LABEL_50:
          v36 = *v20;
          if (!v383)
            goto LABEL_67;
        }
        v37 = (unsigned __int16 *)(v36 + 24 * v24);
        if (*((char *)v37 + 23) < 0)
        {
          v37 = *(unsigned __int16 **)v37;
          if (*(_QWORD *)(v36 + 24 * v24 + 8) != 3)
            goto LABEL_67;
        }
        else if (*((_BYTE *)v37 + 23) != 3)
        {
          goto LABEL_67;
        }
        v38 = *v37;
        v39 = *((unsigned __int8 *)v37 + 2);
        if (v38 == 28257 && v39 == 101)
        {
          v41 = v374[0];
          v42 = operator new(0x20uLL);
          __p[0] = v42;
          *(_OWORD *)&__p[1] = v353;
          *v42 = v349[1];
          *(_OWORD *)((char *)v42 + 13) = v349[0];
          *((_BYTE *)v42 + 29) = 0;
          v43 = Espresso::AOT::ValidationResult::IsFeatureSupported((uint64_t)v41, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          v44 = v352;
          if (v43)
            v44 = 1;
          v352 = v44;
          v36 = *v20;
        }
LABEL_67:
        Espresso::AOT::BackendRegistry::GetCostEstimator(v25, v36 + 24 * v24, __p);
        ValidDispatchUnits = Espresso::AOT::ValidationResult::GetValidDispatchUnits(v374[0]);
        v47 = *(unint64_t **)ValidDispatchUnits;
        v46 = *(unint64_t **)(ValidDispatchUnits + 8);
        while (v47 != v46)
        {
          v381 = v398;
          v382 = v399;
          if (v399)
          {
            v48 = (unint64_t *)&v399->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          Espresso::AOT::DispatchUnitToBlock((uint64_t)&v381, v13, v47);
          v50 = v382;
          if (v382)
          {
            v51 = (unint64_t *)&v382->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          (*(void (**)(Espresso::AOT::CostEstimate **__return_ptr, void *, void *))(*(_QWORD *)__p[0] + 16))(v367, __p[0], v371[0]);
          Runtime = Espresso::AOT::CostEstimate::GetRuntime(v367[0]);
          *(_QWORD *)&buf = v47;
          *((double *)std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v392 + 40 * v24, v47, (uint64_t)&std::piecewise_construct, (_QWORD **)&buf)+ 3) = Runtime;
          v54 = v367[0];
          v367[0] = 0;
          if (v54)
            (*(void (**)(Espresso::AOT::CostEstimate *))(*(_QWORD *)v54 + 8))(v54);
          v55 = v371[0];
          v371[0] = 0;
          if (v55)
            (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
          ++v47;
        }
        v56 = (Espresso::AOT::ValidationMessage **)v388;
        v379 = v398;
        v380 = v399;
        if (v399)
        {
          v57 = (unint64_t *)&v399->__shared_owners_;
          do
            v58 = __ldxr(v57);
          while (__stxr(v58 + 1, v57));
        }
        Espresso::AOT::MILSegmenterAnalytics::UpdateWithValidationResults(v56, &v379, v13, v374, __p, v24);
        v60 = v380;
        if (v380)
        {
          v61 = (unint64_t *)&v380->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v63 = Espresso::espresso_os_log_subsystem(0, v59);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
        {
          v64 = *v20 + 24 * v24;
          if (*(char *)(v64 + 23) < 0)
            v64 = *(_QWORD *)v64;
          LODWORD(buf) = v359;
          *(_QWORD *)((char *)&buf + 4) = v64;
          _os_log_impl(&dword_190DAF000, v63, OS_LOG_TYPE_INFO, "[BuildStateGraph] Finish building state graph for backend: %s", (uint8_t *)&buf, 0xCu);
        }
        v65 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v66 = (unint64_t *)((char *)__p[1] + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
            v68 = v374[0];
            v374[0] = 0;
            if (!v68)
              goto LABEL_37;
LABEL_99:
            (*(void (**)(Espresso::AOT::ValidationResult *))(*(_QWORD *)v68 + 8))(v68);
            goto LABEL_37;
          }
        }
        v68 = v374[0];
        v374[0] = 0;
        if (v68)
          goto LABEL_99;
LABEL_37:
        if ((uint64_t **)++v24 == v363)
          goto LABEL_104;
      }
    }
  }
  v352 = 0;
LABEL_104:
  Espresso::AOT::SegmenterShortestPath::OpCostMap::PruneOpToCostBasedOnAttribs(&v392, (uint64_t)v356, v361);
  v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  v70 = (_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 56))(v69);
  *(_QWORD *)&v359 = (*v70)[1];
  *(_QWORD *)&v358 = **v70;
  v72 = *((_QWORD *)v364 + 7);
  v71 = *((_QWORD *)v364 + 8);
  std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::vector((char **)&v377, 0xAAAAAAAAAAAAAAABLL * ((v71 - v72) >> 3));
  memset(__p, 0, sizeof(__p));
  v401 = 1065353216;
  v73 = *((_QWORD *)v364 + 7);
  if (*((_QWORD *)v364 + 8) != v73)
  {
    v74 = 0;
    v75 = 0;
    do
    {
      v76 = v73 + v74;
      if (*(char *)(v76 + 23) < 0)
      {
        v78 = *(_QWORD *)v76;
        v77 = *(_QWORD *)(v76 + 8);
      }
      else
      {
        v77 = *(unsigned __int8 *)(v76 + 23);
        v78 = v76;
      }
      LODWORD(v374[0]) = Espresso::AOT::GetBackendIdentifier(v78, v77);
      *(_QWORD *)&buf = v374;
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)__p, (unsigned int *)v374, (uint64_t)&std::piecewise_construct, (_DWORD **)&buf)[3] = v75++;
      v73 = *((_QWORD *)v364 + 7);
      v74 += 24;
    }
    while (v75 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v364 + 8) - v73) >> 3));
  }
  v375 = 7;
  strcpy((char *)v374, "groupId");
  v363 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 56))(v69);
  v371[0] = 0;
  v371[1] = 0;
  v372[0] = 0;
  if (v71 == v72)
  {
    v79 = 0;
    v82 = **v363;
    v83 = (*v363)[1];
    *(_QWORD *)&v349[0] = v69;
    if (v83 == v82)
      goto LABEL_147;
  }
  else
  {
    if ((0xAAAAAAAAAAAAAAABLL * ((v71 - v72) >> 3)) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v79 = (char *)operator new(0x5555555555555558 * ((v71 - v72) >> 3));
    v371[0] = v79;
    v372[0] = &v79[0x5555555555555558 * ((v71 - v72) >> 3)];
    bzero(v79, 0x5555555555555558 * ((v71 - v72) >> 3));
    v371[1] = &v79[0x5555555555555558 * ((v71 - v72) >> 3)];
    v80 = **v363;
    v81 = (*v363)[1];
    *(_QWORD *)&v349[0] = v69;
    if (v81 == v80)
      goto LABEL_147;
  }
  v84 = 0;
  while (2)
  {
    Attribute = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
    if (!Attribute)
      goto LABEL_116;
    E5Common::Utils::MILDictToCpp<unsigned int,unsigned long long>(Attribute, (uint64_t)&buf);
    v86 = (uint64_t *)v403;
    if (!(_QWORD)v403)
      goto LABEL_144;
    do
    {
      LODWORD(v365[0]) = *((_DWORD *)v86 + 4);
      v367[0] = (Espresso::AOT::CostEstimate *)v365;
      v88 = std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t)__p, (unsigned int *)v365, (uint64_t)&std::piecewise_construct, (_DWORD **)v367);
      v89 = (char *)v377 + 40 * v88[3];
      v367[0] = (Espresso::AOT::CostEstimate *)(v86 + 3);
      v90 = std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v89, (unint64_t *)v86 + 3, (uint64_t)&std::piecewise_construct, (uint64_t **)v367);
      v92 = (char *)v90[4];
      v91 = v90[5];
      if ((unint64_t)v92 < v91)
      {
        *(_QWORD *)v92 = v84;
        v87 = v92 + 8;
        goto LABEL_121;
      }
      v93 = (char *)v90[3];
      v94 = (v92 - v93) >> 3;
      v95 = v94 + 1;
      if ((unint64_t)(v94 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v96 = v91 - (_QWORD)v93;
      if (v96 >> 2 > v95)
        v95 = v96 >> 2;
      if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
        v97 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v97 = v95;
      if (v97)
      {
        if (v97 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v98 = operator new(8 * v97);
        v99 = &v98[8 * v94];
        *v99 = v84;
        v87 = v99 + 1;
        if (v92 == v93)
          goto LABEL_140;
LABEL_134:
        v101 = v92 - 8 - v93;
        if (v101 < 0x58)
          goto LABEL_591;
        if ((unint64_t)(v93 - v98) < 0x20)
          goto LABEL_591;
        v102 = (v101 >> 3) + 1;
        v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
        v104 = &v92[-v103];
        v99 = (_QWORD *)((char *)v99 - v103);
        v105 = &v98[v92 - v93 - 16];
        v106 = v92 - 16;
        v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v108 = *(_OWORD *)v106;
          *(v105 - 1) = *((_OWORD *)v106 - 1);
          *v105 = v108;
          v105 -= 2;
          v106 -= 32;
          v107 -= 4;
        }
        while (v107);
        v92 = v104;
        if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_591:
          do
          {
            v109 = *((_QWORD *)v92 - 1);
            v92 -= 8;
            *--v99 = v109;
          }
          while (v92 != v93);
        }
        goto LABEL_140;
      }
      v98 = 0;
      v99 = (_QWORD *)(8 * v94);
      v100 = (_QWORD *)(8 * v94);
      *v100 = v84;
      v87 = v100 + 1;
      if (v92 != v93)
        goto LABEL_134;
LABEL_140:
      v90[3] = v99;
      v90[4] = v87;
      v90[5] = &v98[8 * v97];
      if (v93)
        operator delete(v93);
LABEL_121:
      v90[4] = v87;
      v86 = (uint64_t *)*v86;
    }
    while (v86);
    v110 = (_QWORD *)v403;
    if ((_QWORD)v403)
    {
      do
      {
        v111 = (_QWORD *)*v110;
        operator delete(v110);
        v110 = v111;
      }
      while (v111);
    }
LABEL_144:
    v112 = (void *)buf;
    *(_QWORD *)&buf = 0;
    if (v112)
      operator delete(v112);
LABEL_116:
    if (++v84 < (unint64_t)(((*v363)[1] - **v363) >> 4))
      continue;
    break;
  }
  v79 = (char *)v371[0];
LABEL_147:
  if (v79)
  {
    v371[1] = v79;
    operator delete(v79);
  }
  if (v375 < 0)
    operator delete(v374[0]);
  v113 = __p[2];
  if (__p[2])
  {
    do
    {
      v114 = (_QWORD *)*v113;
      operator delete(v113);
      v113 = v114;
    }
    while (v114);
  }
  v115 = __p[0];
  __p[0] = 0;
  if (v115)
    operator delete(v115);
  v117 = v377;
  v116 = v378;
  v118 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)v378 - (_BYTE *)v377) >> 3);
  std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::vector((char **)__p, v118);
  std::vector<std::unordered_map<unsigned long,unsigned long long>>::vector((char **)&buf, v118);
  if (v116 != v117)
  {
    v119 = 0;
    if (v118 <= 1)
      v120 = 1;
    else
      v120 = v118;
    v363 = (uint64_t **)v120;
    while (1)
    {
      v121 = (_QWORD *)*((_QWORD *)v377 + 5 * v119 + 2);
      if (v121)
        break;
LABEL_160:
      if ((uint64_t **)++v119 == v363)
        goto LABEL_182;
    }
    while (2)
    {
      v371[0] = 0;
      v371[1] = 0;
      v372[0] = 0;
      v123 = (_BYTE *)v121[3];
      v122 = (_BYTE *)v121[4];
      v124 = v122 - v123;
      if (v122 == v123)
        goto LABEL_169;
      if (v124 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v125 = operator new(v122 - v123);
      v126 = v124 >> 3;
      v371[0] = v125;
      v372[0] = &v125[v124 >> 3];
      memcpy(v125, v123, v124);
      if ((unint64_t)v124 < 0x10)
        goto LABEL_168;
      if (v126 <= 2)
        v133 = 2;
      else
        v133 = v124 >> 3;
      v134 = v125[1];
      if (v134 == *v125 + 1)
      {
        v135 = 2;
        while (v133 != v135)
        {
          v136 = v135;
          v137 = v134 + 1;
          v138 = v125[v135++];
          v134 = v138;
          if (v138 != v137)
          {
            v371[1] = v125;
            operator delete(v125);
            if (v136 < v126)
              goto LABEL_164;
            goto LABEL_169;
          }
        }
LABEL_168:
        v371[1] = v125;
        operator delete(v125);
LABEL_169:
        v127 = *(_QWORD *)v121[3];
        v128 = *(_QWORD *)(v121[4] - 8);
        v367[0] = (Espresso::AOT::CostEstimate *)(v121 + 2);
        v129 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)__p[0] + 40 * v119, v121 + 2, (uint64_t)&std::piecewise_construct, (_QWORD **)v367);
        v129[3] = v127;
        v129[4] = v128;
        v130 = (Espresso::AOT::CostEstimate **)v121[3];
        v131 = (Espresso::AOT::CostEstimate **)v121[4];
        while (v130 != v131)
        {
          v365[0] = 0;
          v365[0] = *v130;
          v132 = v121[2];
          v367[0] = (Espresso::AOT::CostEstimate *)v365;
          std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(buf + 40 * v119, (unint64_t *)v365, (uint64_t)&std::piecewise_construct, (_QWORD **)v367)[3] = v132;
          ++v130;
        }
      }
      else
      {
        v371[1] = v125;
        operator delete(v125);
      }
LABEL_164:
      v121 = (_QWORD *)*v121;
      if (!v121)
        goto LABEL_160;
      continue;
    }
  }
LABEL_182:
  std::pair<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>,std::vector<std::unordered_map<unsigned long,unsigned long long>>>::pair[abi:ne180100]<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>&,std::vector<std::unordered_map<unsigned long,unsigned long long>>&,0>(v374, (uint64_t *)__p, (uint64_t *)&buf);
  v139 = (uint64_t)(v359 - v358) >> 4;
  v140 = (_QWORD *)buf;
  v141 = v351;
  v142 = v364;
  if ((_QWORD)buf)
  {
    v143 = (_QWORD *)*((_QWORD *)&buf + 1);
    v144 = (void *)buf;
    if (*((_QWORD *)&buf + 1) != (_QWORD)buf)
    {
      do
      {
        v145 = (_QWORD *)*(v143 - 3);
        if (v145)
        {
          do
          {
            v146 = (_QWORD *)*v145;
            operator delete(v145);
            v145 = v146;
          }
          while (v146);
        }
        v148 = (void *)*(v143 - 5);
        v143 -= 5;
        v147 = v148;
        *v143 = 0;
        if (v148)
          operator delete(v147);
      }
      while (v143 != v140);
      v144 = (void *)buf;
    }
    *((_QWORD *)&buf + 1) = v140;
    operator delete(v144);
  }
  v149 = __p[0];
  if (__p[0])
  {
    v150 = __p[1];
    v151 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v152 = (_QWORD *)*(v150 - 3);
        if (v152)
        {
          do
          {
            v153 = (_QWORD *)*v152;
            operator delete(v152);
            v152 = v153;
          }
          while (v153);
        }
        v155 = (void *)*(v150 - 5);
        v150 -= 5;
        v154 = v155;
        *v150 = 0;
        if (v155)
          operator delete(v154);
      }
      while (v150 != v149);
      v151 = __p[0];
    }
    __p[1] = v149;
    operator delete(v151);
  }
  *(_QWORD *)&buf = v357;
  *((_QWORD *)&buf + 1) = v139;
  v156 = (v139 + 1) * v357;
  *(_QWORD *)&v403 = 0;
  *((_QWORD *)&v403 + 1) = v156 + 1;
  v157 = (uint64_t *)&v404;
  std::vector<Espresso::AOT::CostGraph::Node>::vector(&v404, v156 + 2);
  if (v354 == v355)
  {
    *(_OWORD *)v371 = 0u;
    *(_OWORD *)v372 = 0u;
    v373 = 1065353216;
    goto LABEL_506;
  }
  *(_QWORD *)&v349[1] = &v404;
  v158 = 0;
  if (v357 <= 1)
    v159 = 1;
  else
    v159 = v357;
  do
  {
    v160 = Espresso::AOT::SegmenterShortestPath::EstimateLaunchCost(v142, v158);
    Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdge((Espresso::AOT::SegmenterShortestPath::StateGraph *)&buf, v403, v158 + v158 * *((_QWORD *)&buf + 1) + 1, v160);
    v161 = Espresso::AOT::SegmenterShortestPath::EstimateEndCost(v142, v158);
    Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdge((Espresso::AOT::SegmenterShortestPath::StateGraph *)&buf, v158 + v158 * *((_QWORD *)&buf + 1) + v139 + 1, *((uint64_t *)&v403 + 1), v161);
    ++v158;
  }
  while (v159 != v158);
  v162 = 0;
  v357 = (unint64_t)v372;
  *(_OWORD *)v371 = 0u;
  *(_OWORD *)v372 = 0u;
  v373 = 1065353216;
  v163 = (_QWORD *)((char *)v142 + 8);
  v355 = v159;
  v360 = v139;
  *(_QWORD *)&v353 = (char *)v142 + 8;
  while (2)
  {
    v370 = 0;
    if ((_QWORD)v359 != (_QWORD)v358)
    {
      v164 = 0;
      v165 = (Espresso::AOT::SegmenterShortestPath *)((char *)v392 + 40 * v162);
      v166 = (uint64_t **)(v376 + 40 * v162);
      v361 = (char *)v374[0] + 40 * v162;
      v363 = v166;
      v364 = v165;
      do
      {
        v168 = (int8x8_t)v166[1];
        if (v168)
        {
          v169 = (uint8x8_t)vcnt_s8(v168);
          v169.i16[0] = vaddlv_u8(v169);
          if (v169.u32[0] > 1uLL)
          {
            v170 = v164;
            if (v164 >= *(_QWORD *)&v168)
              v170 = v164 % *(_QWORD *)&v168;
          }
          else
          {
            v170 = (*(_QWORD *)&v168 - 1) & v164;
          }
          v171 = (_QWORD *)(*v166)[v170];
          if (v171)
          {
            v172 = (_QWORD *)*v171;
            if (*v171)
            {
              v173 = *(_QWORD *)&v168 - 1;
              if (v169.u32[0] < 2uLL)
              {
                while (1)
                {
                  v174 = v172[1];
                  if (v164 == v174)
                  {
                    if (v172[2] == v164)
                      goto LABEL_255;
                  }
                  else if ((v174 & v173) != v170)
                  {
                    goto LABEL_234;
                  }
                  v172 = (_QWORD *)*v172;
                  if (!v172)
                    goto LABEL_234;
                }
              }
              do
              {
                v175 = v172[1];
                if (v164 == v175)
                {
                  if (v172[2] == v164)
                  {
LABEL_255:
                    if (v169.u32[0] > 1uLL)
                    {
                      v184 = v164;
                      if (v164 >= *(_QWORD *)&v168)
                        v184 = v164 % *(_QWORD *)&v168;
                    }
                    else
                    {
                      v184 = v173 & v164;
                    }
                    v193 = (_QWORD *)(*v166)[v184];
                    if (v193)
                    {
                      v194 = (_QWORD *)*v193;
                      if (v194)
                      {
                        if (v169.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v195 = v194[1];
                            if (v164 == v195)
                            {
                              if (v194[2] == v164)
                                goto LABEL_270;
                            }
                            else if ((v195 & v173) != v184)
                            {
                              goto LABEL_575;
                            }
                            v194 = (_QWORD *)*v194;
                            if (!v194)
                              goto LABEL_575;
                          }
                        }
                        do
                        {
                          v200 = v194[1];
                          if (v164 == v200)
                          {
                            if (v194[2] == v164)
                            {
LABEL_270:
                              v196 = *(int8x8_t *)(v361 + 8);
                              if (!*(_QWORD *)&v196)
                                goto LABEL_574;
                              v197 = v194[3];
                              v198 = (uint8x8_t)vcnt_s8(v196);
                              v198.i16[0] = vaddlv_u8(v198);
                              if (v198.u32[0] > 1uLL)
                              {
                                v199 = v194[3];
                                if (v197 >= *(_QWORD *)&v196)
                                  v199 = v197 % *(_QWORD *)&v196;
                              }
                              else
                              {
                                v199 = (*(_QWORD *)&v196 - 1) & v197;
                              }
                              v201 = *(void ****)(*(_QWORD *)v361 + 8 * v199);
                              if (!v201 || (v202 = *v201) == 0)
LABEL_574:
                                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                              if (v198.u32[0] < 2uLL)
                              {
                                v203 = *(_QWORD *)&v196 - 1;
                                while (1)
                                {
                                  v205 = (unint64_t)v202[1];
                                  if (v197 == v205)
                                  {
                                    if (v202[2] == (void *)v197)
                                      goto LABEL_297;
                                  }
                                  else if ((v205 & v203) != v199)
                                  {
                                    goto LABEL_574;
                                  }
                                  v202 = (void **)*v202;
                                  if (!v202)
                                    goto LABEL_574;
                                }
                              }
                              while (1)
                              {
                                v204 = (unint64_t)v202[1];
                                if (v197 == v204)
                                {
                                  if (v202[2] == (void *)v197)
                                  {
LABEL_297:
                                    v167 = v202 + 4;
                                    v206 = (unint64_t)v202[4];
                                    v207 = (unint64_t)v202[3];
                                    v208 = 0.0;
                                    if (v207 <= v206)
                                    {
                                      v216 = *((_QWORD *)v165 + 1);
                                      if (v216)
                                      {
                                        v217 = *(_QWORD *)v165;
                                        v218 = v216 - 1;
                                        if ((v216 & (v216 - 1)) != 0)
                                        {
                                          v258 = (unint64_t)v202[3];
                                          while (1)
                                          {
                                            v259 = v258;
                                            if (v258 >= v216)
                                              v259 = v258 % v216;
                                            v260 = *(double **)(v217 + 8 * v259);
                                            if (!v260)
                                              break;
                                            do
                                            {
                                              while (1)
                                              {
                                                v260 = *(double **)v260;
                                                if (!v260)
                                                  goto LABEL_387;
                                                v261 = *((_QWORD *)v260 + 1);
                                                if (v258 == v261)
                                                  break;
                                                if (v261 >= v216)
                                                  v261 %= v216;
                                                if (v261 != v259)
                                                  goto LABEL_387;
                                              }
                                            }
                                            while (*((_QWORD *)v260 + 2) != v258);
                                            v208 = v260[3] + v208;
                                            if (++v258 > v206)
                                              goto LABEL_298;
                                          }
                                        }
                                        else
                                        {
                                          v219 = (unint64_t)v202[3];
                                          while (1)
                                          {
                                            v220 = *(double **)(v217 + 8 * (v219 & v218));
                                            if (!v220)
                                              break;
                                            do
                                            {
                                              while (1)
                                              {
                                                v220 = *(double **)v220;
                                                if (!v220)
                                                  goto LABEL_387;
                                                v221 = *((_QWORD *)v220 + 1);
                                                if (v219 == v221)
                                                  break;
                                                if ((v221 & v218) != (v219 & v218))
                                                  goto LABEL_387;
                                              }
                                            }
                                            while (*((_QWORD *)v220 + 2) != v219);
                                            v208 = v220[3] + v208;
                                            if (++v219 > v206)
                                              goto LABEL_298;
                                          }
                                        }
                                      }
LABEL_387:
                                      if (v162)
                                      {
                                        v139 = v360;
                                      }
                                      else
                                      {
                                        __p[0] = v202[3];
                                        v139 = v360;
                                        do
                                        {
                                          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v371, (unint64_t *)__p, __p);
                                          ++__p[0];
                                        }
                                        while (__p[0] <= *v167);
                                      }
                                      goto LABEL_213;
                                    }
LABEL_298:
                                    v209 = v162 + v162 * *((_QWORD *)&buf + 1);
                                    v210 = v206 + v209 + 2;
                                    v211 = &v404[24 * v209 + 24 * v207];
                                    v212 = (uint64_t *)(v211 + 24);
                                    v214 = (double *)*((_QWORD *)v211 + 4);
                                    v213 = *((_QWORD *)v211 + 5);
                                    if ((unint64_t)v214 < v213)
                                    {
                                      *(_QWORD *)v214 = v210;
                                      v214[1] = v208;
                                      v212[1] = (uint64_t)(v214 + 2);
                                      v215 = v362;
                                      if (!v207)
                                        goto LABEL_411;
LABEL_398:
                                      v263 = 0;
                                      v264 = v207 + 1;
                                      do
                                      {
                                        if (v263 != v162)
                                        {
                                          Espresso::AOT::BackendRegistry::GetCostEstimator(v163, *v215 + 24 * v263, v367);
                                          memset(__p, 0, 24);
                                          (*(void (**)(Espresso::AOT::CostEstimate **__return_ptr, Espresso::AOT::CostEstimate *, void **, uint64_t))(*(_QWORD *)v367[0] + 24))(v365, v367[0], __p, *v215 + 24 * v162);
                                          v265 = Espresso::AOT::CostEstimate::GetRuntime(v365[0]);
                                          v266 = v365[0];
                                          v365[0] = 0;
                                          if (v266)
                                            (*(void (**)(Espresso::AOT::CostEstimate *))(*(_QWORD *)v266 + 8))(v266);
                                          if (__p[0])
                                          {
                                            __p[1] = __p[0];
                                            operator delete(__p[0]);
                                          }
                                          v267 = (std::__shared_weak_count *)v367[1];
                                          if (v367[1])
                                          {
                                            v268 = (unint64_t *)((char *)v367[1] + 8);
                                            do
                                              v269 = __ldaxr(v268);
                                            while (__stlxr(v269 - 1, v268));
                                            if (!v269)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                                              std::__shared_weak_count::__release_weak(v267);
                                            }
                                          }
                                          Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdge((Espresso::AOT::SegmenterShortestPath::StateGraph *)&buf, v264 + (*((_QWORD *)&buf + 1) + 1) * v263, v264 + (*((_QWORD *)&buf + 1) + 1) * v162, v265);
                                        }
                                        ++v263;
                                      }
                                      while (v263 != v159);
LABEL_411:
                                      v271 = (unint64_t)v202[3];
                                      v270 = v202[4];
                                      if (v271 <= (unint64_t)v270)
                                      {
                                        v139 = v360;
                                        v166 = v363;
                                        v165 = v364;
LABEL_417:
                                        v272 = (unint64_t)v371[1];
                                        if (!v371[1])
                                          goto LABEL_416;
                                        v273 = (uint8x8_t)vcnt_s8((int8x8_t)v371[1]);
                                        v273.i16[0] = vaddlv_u8(v273);
                                        if (v273.u32[0] > 1uLL)
                                        {
                                          v274 = v271;
                                          if ((void *)v271 >= v371[1])
                                            v274 = v271 % (unint64_t)v371[1];
                                        }
                                        else
                                        {
                                          v274 = ((unint64_t)v371[1] - 1) & v271;
                                        }
                                        v275 = (_QWORD **)*((_QWORD *)v371[0] + v274);
                                        if (!v275)
                                          goto LABEL_416;
                                        v276 = *v275;
                                        if (!*v275)
                                          goto LABEL_416;
                                        v277 = (unint64_t)v371[1] - 1;
                                        if (v273.u32[0] < 2uLL)
                                        {
                                          while (1)
                                          {
                                            v278 = v276[1];
                                            if (v278 == v271)
                                            {
                                              if (v276[2] == v271)
                                                goto LABEL_438;
                                            }
                                            else if ((v278 & v277) != v274)
                                            {
                                              goto LABEL_416;
                                            }
                                            v276 = (_QWORD *)*v276;
                                            if (!v276)
                                              goto LABEL_416;
                                          }
                                        }
                                        while (1)
                                        {
                                          v279 = v276[1];
                                          if (v279 == v271)
                                          {
                                            if (v276[2] == v271)
                                            {
LABEL_438:
                                              if (v273.u32[0] > 1uLL)
                                              {
                                                v280 = v271;
                                                if ((void *)v271 >= v371[1])
                                                  v280 = v271 % (unint64_t)v371[1];
                                              }
                                              else
                                              {
                                                v280 = v271 & v277;
                                              }
                                              v281 = (_QWORD *)*((_QWORD *)v371[0] + v280);
                                              do
                                              {
                                                v282 = v281;
                                                v281 = (_QWORD *)*v281;
                                              }
                                              while (v281 != v276);
                                              if (v282 == (_QWORD *)v357)
                                                goto LABEL_455;
                                              v283 = v282[1];
                                              if (v273.u32[0] > 1uLL)
                                              {
                                                if ((void *)v283 >= v371[1])
                                                  v283 %= (unint64_t)v371[1];
                                              }
                                              else
                                              {
                                                v283 &= v277;
                                              }
                                              if (v283 != v280)
                                              {
LABEL_455:
                                                if (!*v276)
                                                  goto LABEL_456;
                                                v284 = *(_QWORD *)(*v276 + 8);
                                                if (v273.u32[0] > 1uLL)
                                                {
                                                  if ((void *)v284 >= v371[1])
                                                    v284 %= (unint64_t)v371[1];
                                                }
                                                else
                                                {
                                                  v284 &= v277;
                                                }
                                                if (v284 != v280)
LABEL_456:
                                                  *((_QWORD *)v371[0] + v280) = 0;
                                              }
                                              v285 = *v276;
                                              if (*v276)
                                              {
                                                v286 = *(_QWORD *)(v285 + 8);
                                                if (v273.u32[0] > 1uLL)
                                                {
                                                  if (v286 >= v272)
                                                    v286 %= v272;
                                                }
                                                else
                                                {
                                                  v286 &= v277;
                                                }
                                                if (v286 != v280)
                                                {
                                                  *((_QWORD *)v371[0] + v286) = v282;
                                                  v285 = *v276;
                                                }
                                              }
                                              *v282 = v285;
                                              *v276 = 0;
                                              --v372[1];
                                              operator delete(v276);
                                              v270 = *v167;
LABEL_416:
                                              if (++v271 > (unint64_t)v270)
                                                goto LABEL_213;
                                              goto LABEL_417;
                                            }
                                          }
                                          else
                                          {
                                            if ((void *)v279 >= v371[1])
                                              v279 %= (unint64_t)v371[1];
                                            if (v279 != v274)
                                              goto LABEL_416;
                                          }
                                          v276 = (_QWORD *)*v276;
                                          if (!v276)
                                            goto LABEL_416;
                                        }
                                      }
                                      v139 = v360;
LABEL_413:
                                      v166 = v363;
                                      v165 = v364;
                                      goto LABEL_213;
                                    }
                                    v230 = (double *)*v212;
                                    v231 = ((uint64_t)v214 - *v212) >> 4;
                                    v232 = v231 + 1;
                                    if ((unint64_t)(v231 + 1) >> 60)
                                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                                    v233 = v213 - (_QWORD)v230;
                                    if (v233 >> 3 > v232)
                                      v232 = v233 >> 3;
                                    if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFF0)
                                      v234 = 0xFFFFFFFFFFFFFFFLL;
                                    else
                                      v234 = v232;
                                    v356 = v202[3];
                                    if (v234)
                                    {
                                      v354 = v210;
                                      if (v234 >> 60)
                                        std::__throw_bad_array_new_length[abi:ne180100]();
                                      v235 = v234;
                                      v236 = (char *)operator new(16 * v234);
                                      v234 = v235;
                                      v163 = (_QWORD *)v353;
                                      v237 = (uint64_t)&v236[16 * v231];
                                      *(_QWORD *)v237 = v354;
                                      *(double *)(v237 + 8) = v208;
                                      v238 = v237;
                                      if (v214 == v230)
                                      {
LABEL_395:
                                        v262 = v237 + 16;
                                        *v212 = v238;
                                        v212[1] = v237 + 16;
                                        v212[2] = (uint64_t)&v236[16 * v234];
                                        if (v214)
                                          operator delete(v214);
                                        v207 = (unint64_t)v356;
                                        v212[1] = v262;
                                        v215 = v362;
                                        if (v356)
                                          goto LABEL_398;
                                        goto LABEL_411;
                                      }
                                    }
                                    else
                                    {
                                      v236 = 0;
                                      v237 = 16 * v231;
                                      *(_QWORD *)v237 = v210;
                                      *(double *)(v237 + 8) = v208;
                                      v238 = 16 * v231;
                                      if (v214 == v230)
                                        goto LABEL_395;
                                    }
                                    do
                                    {
                                      *(_OWORD *)(v238 - 16) = *((_OWORD *)v214 - 1);
                                      v238 -= 16;
                                      v214 -= 2;
                                    }
                                    while (v214 != v230);
                                    v214 = (double *)*v212;
                                    goto LABEL_395;
                                  }
                                }
                                else
                                {
                                  if (v204 >= *(_QWORD *)&v196)
                                    v204 %= *(_QWORD *)&v196;
                                  if (v204 != v199)
                                    goto LABEL_574;
                                }
                                v202 = (void **)*v202;
                                if (!v202)
                                  goto LABEL_574;
                              }
                            }
                          }
                          else
                          {
                            if (v200 >= *(_QWORD *)&v168)
                              v200 %= *(_QWORD *)&v168;
                            if (v200 != v184)
                              break;
                          }
                          v194 = (_QWORD *)*v194;
                        }
                        while (v194);
                      }
                    }
LABEL_575:
                    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                  }
                }
                else
                {
                  if (v175 >= *(_QWORD *)&v168)
                    v175 %= *(_QWORD *)&v168;
                  if (v175 != v170)
                    break;
                }
                v172 = (_QWORD *)*v172;
              }
              while (v172);
            }
          }
        }
LABEL_234:
        v176 = *(int8x8_t *)((char *)v165 + 8);
        if (!*(_QWORD *)&v176)
          goto LABEL_211;
        v177 = (uint8x8_t)vcnt_s8(v176);
        v177.i16[0] = vaddlv_u8(v177);
        if (v177.u32[0] > 1uLL)
        {
          v178 = v164;
          if (v164 >= *(_QWORD *)&v176)
            v178 = v164 % *(_QWORD *)&v176;
        }
        else
        {
          v178 = (*(_QWORD *)&v176 - 1) & v164;
        }
        v179 = *(_QWORD **)(*(_QWORD *)v165 + 8 * v178);
        if (!v179 || (v180 = (_QWORD *)*v179) == 0)
        {
LABEL_211:
          v167 = (void **)&v370;
          if (!v162)
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v371, &v370, &v370);
          goto LABEL_213;
        }
        if (v177.u32[0] < 2uLL)
        {
          v181 = *(_QWORD *)&v176 - 1;
          while (1)
          {
            v183 = v180[1];
            if (v164 == v183)
            {
              if (v180[2] == v164)
                goto LABEL_257;
            }
            else if ((v183 & v181) != v178)
            {
              goto LABEL_211;
            }
            v180 = (_QWORD *)*v180;
            if (!v180)
              goto LABEL_211;
          }
        }
        while (1)
        {
          v182 = v180[1];
          if (v164 == v182)
            break;
          if (v182 >= *(_QWORD *)&v176)
            v182 %= *(_QWORD *)&v176;
          if (v182 != v178)
            goto LABEL_211;
LABEL_244:
          v180 = (_QWORD *)*v180;
          if (!v180)
            goto LABEL_211;
        }
        if (v180[2] != v164)
          goto LABEL_244;
LABEL_257:
        v185 = v180[3];
        v186 = v162 + v162 * *((_QWORD *)&buf + 1) + v164;
        v187 = v186 + 2;
        v188 = &v404[24 * v186];
        v189 = (unint64_t **)(v188 + 24);
        v191 = (unint64_t *)*((_QWORD *)v188 + 4);
        v190 = *((_QWORD *)v188 + 5);
        if ((unint64_t)v191 >= v190)
        {
          v222 = v163;
          v223 = v139;
          v224 = *v189;
          v225 = ((char *)v191 - (char *)*v189) >> 4;
          v226 = v225 + 1;
          if ((unint64_t)(v225 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v227 = v190 - (_QWORD)v224;
          if (v227 >> 3 > v226)
            v226 = v227 >> 3;
          if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFF0)
            v228 = 0xFFFFFFFFFFFFFFFLL;
          else
            v228 = v226;
          if (v228)
          {
            if (v228 >> 60)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v229 = (char *)operator new(16 * v228);
          }
          else
          {
            v229 = 0;
          }
          v239 = &v229[16 * v225];
          *(_QWORD *)v239 = v187;
          *((_QWORD *)v239 + 1) = v185;
          v240 = v239;
          v139 = v223;
          if (v191 != v224)
          {
            do
            {
              *((_OWORD *)v240 - 1) = *((_OWORD *)v191 - 1);
              v240 -= 16;
              v191 -= 2;
            }
            while (v191 != v224);
            v191 = *v189;
          }
          v163 = v222;
          v241 = (unint64_t *)(v239 + 16);
          *v189 = (unint64_t *)v240;
          v189[1] = (unint64_t *)(v239 + 16);
          v189[2] = (unint64_t *)&v229[16 * v228];
          v159 = v355;
          if (v191)
            operator delete(v191);
          v189[1] = v241;
          v192 = v362;
          if (v164)
            goto LABEL_338;
        }
        else
        {
          *v191 = v187;
          v191[1] = v185;
          v189[1] = v191 + 2;
          v192 = v362;
          if (!v164)
            goto LABEL_351;
LABEL_338:
          v242 = 0;
          v243 = v164 + 1;
          do
          {
            if (v242 != v162)
            {
              Espresso::AOT::BackendRegistry::GetCostEstimator(v163, *v192 + 24 * v242, v367);
              memset(__p, 0, 24);
              (*(void (**)(Espresso::AOT::CostEstimate **__return_ptr, Espresso::AOT::CostEstimate *, void **, uint64_t))(*(_QWORD *)v367[0] + 24))(v365, v367[0], __p, *v192 + 24 * v162);
              v244 = Espresso::AOT::CostEstimate::GetRuntime(v365[0]);
              v245 = v365[0];
              v365[0] = 0;
              if (v245)
                (*(void (**)(Espresso::AOT::CostEstimate *))(*(_QWORD *)v245 + 8))(v245);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              v246 = (std::__shared_weak_count *)v367[1];
              if (v367[1])
              {
                v247 = (unint64_t *)((char *)v367[1] + 8);
                do
                  v248 = __ldaxr(v247);
                while (__stlxr(v248 - 1, v247));
                if (!v248)
                {
                  ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                  std::__shared_weak_count::__release_weak(v246);
                }
              }
              Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdge((Espresso::AOT::SegmenterShortestPath::StateGraph *)&buf, v243 + (*((_QWORD *)&buf + 1) + 1) * v242, v243 + (*((_QWORD *)&buf + 1) + 1) * v162, v244);
            }
            ++v242;
          }
          while (v242 != v159);
        }
LABEL_351:
        v249 = (unint64_t)v371[1];
        if (!v371[1])
        {
          v167 = (void **)&v370;
          goto LABEL_413;
        }
        v250 = v370;
        v251 = (uint8x8_t)vcnt_s8((int8x8_t)v371[1]);
        v251.i16[0] = vaddlv_u8(v251);
        v166 = v363;
        v165 = v364;
        if (v251.u32[0] > 1uLL)
        {
          v252 = v370;
          if ((void *)v370 >= v371[1])
            v252 = v370 % (unint64_t)v371[1];
        }
        else
        {
          v252 = ((unint64_t)v371[1] - 1) & v370;
        }
        v253 = (_QWORD **)*((_QWORD *)v371[0] + v252);
        if (!v253 || (v254 = *v253) == 0)
        {
LABEL_372:
          v167 = (void **)&v370;
          goto LABEL_213;
        }
        v255 = (unint64_t)v371[1] - 1;
        if (v251.u32[0] < 2uLL)
        {
          while (1)
          {
            v256 = v254[1];
            if (v256 == v370)
            {
              if (v254[2] == v370)
                goto LABEL_464;
            }
            else if ((v256 & v255) != v252)
            {
              goto LABEL_372;
            }
            v254 = (_QWORD *)*v254;
            v167 = (void **)&v370;
            if (!v254)
              goto LABEL_213;
          }
        }
        while (2)
        {
          v257 = v254[1];
          if (v257 != v370)
          {
            if ((void *)v257 >= v371[1])
              v257 %= (unint64_t)v371[1];
            if (v257 != v252)
              goto LABEL_372;
            goto LABEL_367;
          }
          if (v254[2] != v370)
          {
LABEL_367:
            v254 = (_QWORD *)*v254;
            v167 = (void **)&v370;
            if (!v254)
              goto LABEL_213;
            continue;
          }
          break;
        }
LABEL_464:
        if (v251.u32[0] > 1uLL)
        {
          if ((void *)v370 >= v371[1])
            v250 = v370 % (unint64_t)v371[1];
        }
        else
        {
          v250 = v370 & v255;
        }
        v287 = (_QWORD *)*((_QWORD *)v371[0] + v250);
        do
        {
          v288 = v287;
          v287 = (_QWORD *)*v287;
        }
        while (v287 != v254);
        if (v288 == (_QWORD *)v357)
          goto LABEL_481;
        v289 = v288[1];
        if (v251.u32[0] > 1uLL)
        {
          if ((void *)v289 >= v371[1])
            v289 %= (unint64_t)v371[1];
        }
        else
        {
          v289 &= v255;
        }
        if (v289 != v250)
        {
LABEL_481:
          if (!*v254)
            goto LABEL_482;
          v290 = *(_QWORD *)(*v254 + 8);
          if (v251.u32[0] > 1uLL)
          {
            if ((void *)v290 >= v371[1])
              v290 %= (unint64_t)v371[1];
          }
          else
          {
            v290 &= v255;
          }
          if (v290 != v250)
LABEL_482:
            *((_QWORD *)v371[0] + v250) = 0;
        }
        v291 = *v254;
        if (*v254)
        {
          v292 = *(_QWORD *)(v291 + 8);
          if (v251.u32[0] > 1uLL)
          {
            if (v292 >= v249)
              v292 %= v249;
          }
          else
          {
            v292 &= v255;
          }
          if (v292 != v250)
          {
            *((_QWORD *)v371[0] + v292) = v288;
            v291 = *v254;
          }
        }
        *v288 = v291;
        *v254 = 0;
        --v372[1];
        operator delete(v254);
        v167 = (void **)&v370;
LABEL_213:
        v164 = (unint64_t)*v167 + 1;
        v370 = v164;
      }
      while (v164 < v139);
    }
    if (++v162 != v159)
      continue;
    break;
  }
  v141 = v351;
  v157 = *(uint64_t **)&v349[1];
  if (v372[1])
  {
    v293 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v349[0] + 56))(*(_QWORD *)&v349[0]);
    *(_OWORD *)v367 = 0u;
    v368 = 0u;
    v369 = 1065353216;
    v294 = v372[0];
    if (v372[0])
    {
      v345 = (_QWORD **)v293;
      do
      {
        v346 = *(_QWORD *)(**v345 + 16 * v294[2]);
        v347 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v346 + 64))(v346);
        v348 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v347 + 16))(v347);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v367, v348, v348);
        v294 = (_QWORD *)*v294;
      }
      while (v294);
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Segmenter failed: No valid segmentation can be generated for this model. There are ops in the model that are not supported by any of the specified backend(s): ", 159);
    for (i = (uint64_t **)v368; i; i = (uint64_t **)*i)
    {
      v296 = *((char *)i + 39);
      if (v296 >= 0)
        v297 = (uint64_t)(i + 2);
      else
        v297 = (uint64_t)i[2];
      if (v296 >= 0)
        v298 = *((unsigned __int8 *)i + 39);
      else
        v298 = (uint64_t)i[3];
      v299 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v297, v298);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v299, (uint64_t)" ", 1);
    }
    std::stringbuf::str();
    if (v366 >= 0)
      v300 = v365;
    else
      v300 = (Espresso::AOT::CostEstimate **)v365[0];
    Espresso::throw_exception_selector<Espresso::invalid_state_error>((const char *)v300);
  }
LABEL_506:
  v301 = v403;
  *(_OWORD *)v141 = buf;
  *(_OWORD *)(v141 + 16) = v301;
  std::vector<Espresso::AOT::CostGraph::Node>::vector((_QWORD *)(v141 + 32), v157);
  *(_QWORD *)(v141 + 56) = 0;
  *(_QWORD *)(v141 + 64) = 0;
  *(_QWORD *)(v141 + 72) = 0;
  std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long long,std::vector<unsigned long>>*,std::unordered_map<unsigned long long,std::vector<unsigned long>>*>(v141 + 56, (uint64_t)v377, (uint64_t)v378, 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)v378 - (_BYTE *)v377) >> 3));
  v302 = v388;
  v388 = 0;
  *(_QWORD *)(v141 + 80) = v302;
  *(_BYTE *)(v141 + 88) = v352;
  v303 = v372[0];
  if (v372[0])
  {
    do
    {
      v304 = (_QWORD *)*v303;
      operator delete(v303);
      v303 = v304;
    }
    while (v304);
  }
  v305 = v371[0];
  v371[0] = 0;
  if (v305)
    operator delete(v305);
  v306 = v404;
  if (v404)
  {
    v307 = v405;
    v308 = v404;
    if (v405 != v404)
    {
      v309 = v405;
      do
      {
        v311 = (void *)*((_QWORD *)v309 - 3);
        v309 -= 24;
        v310 = v311;
        if (v311)
        {
          *((_QWORD *)v307 - 2) = v310;
          operator delete(v310);
        }
        v307 = v309;
      }
      while (v309 != v306);
      v308 = v404;
    }
    v405 = v306;
    operator delete(v308);
  }
  std::pair<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>,std::vector<std::unordered_map<unsigned long,unsigned long long>>>::~pair(v374);
  v312 = v377;
  if (v377)
  {
    v313 = v378;
    v314 = v377;
    if (v378 != v377)
    {
      do
      {
        v315 = (_QWORD *)*(v313 - 3);
        if (v315)
        {
          do
          {
            v318 = (_QWORD *)*v315;
            v319 = (void *)v315[3];
            if (v319)
            {
              v315[4] = v319;
              operator delete(v319);
            }
            operator delete(v315);
            v315 = v318;
          }
          while (v318);
        }
        v317 = (void *)*(v313 - 5);
        v313 -= 5;
        v316 = v317;
        *v313 = 0;
        if (v317)
          operator delete(v316);
      }
      while (v313 != v312);
      v314 = v377;
    }
    v378 = v312;
    operator delete(v314);
  }
  v320 = v384;
  if (v384)
  {
    v321 = (unint64_t *)&v384->__shared_owners_;
    do
      v322 = __ldaxr(v321);
    while (__stlxr(v322 - 1, v321));
    if (!v322)
    {
      ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
      std::__shared_weak_count::__release_weak(v320);
    }
  }
  v323 = (void **)v386;
  if ((_QWORD)v386)
  {
    do
    {
      v329 = (void **)*v323;
      if (*((char *)v323 + 39) < 0)
        operator delete(v323[2]);
      operator delete(v323);
      v323 = v329;
    }
    while (v329);
  }
  v324 = (void *)v385;
  *(_QWORD *)&v385 = 0;
  if (v324)
    operator delete(v324);
  v325 = (void **)v388;
  v388 = 0;
  if (v325)
  {
    Espresso::AOT::MILSegmenterAnalytics::~MILSegmenterAnalytics(v325);
    MEMORY[0x19401CD90]();
  }
  v326 = (void **)v394;
  if (v394)
  {
    v327 = v395;
    v328 = v394;
    if (v395 != v394)
    {
      do
      {
        if (*((char *)v327 - 1) < 0)
          operator delete(*(v327 - 3));
        v327 -= 3;
      }
      while (v327 != v326);
      v328 = v394;
    }
    v395 = v326;
    operator delete(v328);
  }
  v330 = (std::__shared_weak_count *)v392;
  if (v392)
  {
    v331 = v393;
    v332 = v392;
    if (v393 != v392)
    {
      do
      {
        v333 = v331[-1].__vftable;
        if (v333)
        {
          do
          {
            v334 = v333->~__shared_weak_count;
            operator delete(v333);
            v333 = (std::__shared_weak_count_vtbl *)v334;
          }
          while (v334);
        }
        shared_owners = (void *)v331[-2].__shared_owners_;
        v331 = (std::__shared_weak_count *)((char *)v331 - 40);
        v335 = shared_owners;
        v331->__vftable = 0;
        if (shared_owners)
          operator delete(v335);
      }
      while (v331 != v330);
      v332 = v392;
    }
    v393 = v330;
    operator delete(v332);
  }
  v337 = v397;
  if (v397)
  {
    v338 = (unint64_t *)&v397->__shared_owners_;
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
    }
  }
  if (v350)
    (*(void (**)(uint64_t))(*(_QWORD *)v350 + 8))(v350);
  v340 = v399;
  if (v399)
  {
    v341 = (unint64_t *)&v399->__shared_owners_;
    do
      v342 = __ldaxr(v341);
    while (__stlxr(v342 - 1, v341));
    if (!v342)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
}

void sub_1911353E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a64;
  void **a70;
  char a72;
  uint64_t v72;

  if (a37 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x240]);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a38);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a44);
  Espresso::AOT::SegmenterShortestPath::StateGraph::~StateGraph((Espresso::AOT::SegmenterShortestPath::StateGraph *)(v72 - 176));
  std::pair<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>,std::vector<std::unordered_map<unsigned long,unsigned long long>>>::~pair(&a49);
  std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::~vector[abi:ne180100](&a55);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a64);
  std::unique_ptr<Espresso::AOT::MILSegmenterAnalytics>::~unique_ptr[abi:ne180100](&a70);
  Espresso::AOT::SegmenterShortestPath::OpCostMap::~OpCostMap((Espresso::AOT::SegmenterShortestPath::OpCostMap *)&a72);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

char **Espresso::AOT::SegmenterShortestPath::OpCostMap::OpCostMap(char **a1, uint64_t *a2)
{
  char **v4;

  v4 = std::vector<std::unordered_map<unsigned long,double>>::vector(a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v4[3] = 0;
  v4[4] = 0;
  v4 += 3;
  v4[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  return a1;
}

void sub_1911358B8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    Espresso::AOT::SegmenterShortestPath::OpCostMap::OpCostMap((uint64_t)v1, *v1);
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILSegmenterAnalytics,BOOL const&,MIL::IRProgram const&,std::vector<std::string> const&,std::string const&>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  int v11;
  void **v12;
  void **v13;
  void *v14;
  std::string __p;
  void *v16;
  void **v17;
  uint64_t v18;

  v10 = operator new();
  v11 = *a1;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  Espresso::AOT::MILSegmenterAnalytics::MILSegmenterAnalytics(v10, v11 != 0, a2, (uint64_t *)&v16, (__int128 *)&__p);
  *a5 = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = (void **)v16;
  if (v16)
  {
    v13 = v17;
    v14 = v16;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v13 - 1) < 0)
          operator delete(*(v13 - 3));
        v13 -= 3;
      }
      while (v13 != v12);
      v14 = v16;
    }
    v17 = v12;
    operator delete(v14);
  }
}

void sub_191135A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  std::vector<std::string>::~vector[abi:ne180100](&a15);
  MEMORY[0x19401CD90](v15, 0x1032C4077945F96);
  _Unwind_Resume(a1);
}

double Espresso::AOT::SegmenterShortestPath::EstimateLaunchCost(Espresso::AOT::SegmenterShortestPath *this, uint64_t a2)
{
  double Runtime;
  Espresso::AOT::CostEstimate *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  Espresso::AOT::CostEstimate *v10;

  Espresso::AOT::BackendRegistry::GetCostEstimator((_QWORD *)this + 1, *((_QWORD *)this + 7) + 24 * a2, &v8);
  (*(void (**)(Espresso::AOT::CostEstimate **__return_ptr))(*(_QWORD *)v8 + 32))(&v10);
  Runtime = Espresso::AOT::CostEstimate::GetRuntime(v10);
  v3 = v10;
  v10 = 0;
  if (v3)
    (*(void (**)(Espresso::AOT::CostEstimate *))(*(_QWORD *)v3 + 8))(v3);
  v4 = v9;
  if (!v9)
    return Runtime;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return Runtime;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return Runtime;
}

void sub_191135B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

double Espresso::AOT::SegmenterShortestPath::EstimateEndCost(Espresso::AOT::SegmenterShortestPath *this, uint64_t a2)
{
  double Runtime;
  Espresso::AOT::CostEstimate *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  Espresso::AOT::CostEstimate *v10;

  Espresso::AOT::BackendRegistry::GetCostEstimator((_QWORD *)this + 1, *((_QWORD *)this + 7) + 24 * a2, &v8);
  (*(void (**)(Espresso::AOT::CostEstimate **__return_ptr))(*(_QWORD *)v8 + 40))(&v10);
  Runtime = Espresso::AOT::CostEstimate::GetRuntime(v10);
  v3 = v10;
  v10 = 0;
  if (v3)
    (*(void (**)(Espresso::AOT::CostEstimate *))(*(_QWORD *)v3 + 8))(v3);
  v4 = v9;
  if (!v9)
    return Runtime;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return Runtime;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return Runtime;
}

void sub_191135C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::~StateGraph(Espresso::AOT::SegmenterShortestPath::StateGraph *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      v5 = *((_QWORD *)this + 5);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
}

_QWORD *std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::~vector[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  void *v9;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v8 = (_QWORD *)*v5;
            v9 = (void *)v5[3];
            if (v9)
            {
              v5[4] = v9;
              operator delete(v9);
            }
            operator delete(v5);
            v5 = v8;
          }
          while (v8);
        }
        v7 = (void *)*(v3 - 5);
        v3 -= 5;
        v6 = v7;
        *v3 = 0;
        if (v7)
          operator delete(v6);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***std::unique_ptr<Espresso::AOT::MILSegmenterAnalytics>::~unique_ptr[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    Espresso::AOT::MILSegmenterAnalytics::~MILSegmenterAnalytics(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void Espresso::AOT::SegmenterShortestPath::OpCostMap::~OpCostMap(Espresso::AOT::SegmenterShortestPath::OpCostMap *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v6 = (_QWORD *)*((_QWORD *)this + 1);
    v7 = *(void **)this;
    if (v6 != v5)
    {
      do
      {
        v8 = (_QWORD *)*(v6 - 3);
        if (v8)
        {
          do
          {
            v9 = (_QWORD *)*v8;
            operator delete(v8);
            v8 = v9;
          }
          while (v9);
        }
        v11 = (void *)*(v6 - 5);
        v6 -= 5;
        v10 = v11;
        *v6 = 0;
        if (v11)
          operator delete(v10);
      }
      while (v6 != v5);
      v7 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v5;
    operator delete(v7);
  }
}

void Espresso::AOT::SegmenterShortestPath::ValidateGroup(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *i;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *(uint64_t **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = v3 - *(_QWORD *)a1;
  if (v3 == *(_QWORD *)a1)
  {
    v6 = 0;
    MEMORY[0] = 0;
    if ((unint64_t)v5 < 9)
      goto LABEL_12;
    goto LABEL_6;
  }
  if (v5 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v6 = operator new(v3 - (_QWORD)v4);
  bzero(v6, v5);
  *v6 = 0;
  if ((unint64_t)v5 >= 9)
  {
LABEL_6:
    v7 = 0;
    v8 = 2;
    if ((unint64_t)(v5 >> 3) > 2)
      v8 = v5 >> 3;
    v9 = v4 + 1;
    v10 = *v4;
    v11 = v8 - 1;
    v12 = v6 + 1;
    do
    {
      v14 = *v9++;
      v13 = v14;
      if (v14 != v10)
        ++v7;
      *v12++ = v7;
      v10 = v13;
      --v11;
    }
    while (v11);
  }
LABEL_12:
  v15 = a2[1];
  v16 = v15 - *a2;
  if (v15 != *a2)
  {
    v17 = 0;
    v18 = v16 / 40;
    if (v18 <= 1)
      v18 = 1;
    do
    {
      for (i = *(_QWORD **)(*a2 + 16 + 40 * v17); i; i = (_QWORD *)*i)
      {
        v20 = (char *)i[3];
        v21 = (char *)i[4];
        v22 = v20;
        if (v20 != v21)
        {
          while (v4[*(_QWORD *)v22] != v17)
          {
            v22 += 8;
            if (v22 == v21)
              goto LABEL_19;
          }
          v23 = v21 - v20;
          if ((unint64_t)v23 >= 9)
          {
            v24 = v23 >> 3;
            if (v24 <= 2)
              v25 = 2;
            else
              v25 = v24;
            v27 = *(_QWORD *)v20;
            v26 = (uint64_t *)(v20 + 8);
            v28 = v6[v27];
            v29 = v25 - 1;
            do
            {
              v30 = *v26++;
              if (v6[v30] != v28)
                Espresso::throw_exception_selector<Espresso::not_implemented_error>("Segmentation failed: ops in a op group fall in different segments");
              --v29;
            }
            while (v29);
          }
        }
LABEL_19:
        ;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  operator delete(v6);
}

void sub_19113603C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::SegmenterShortestPath::WriteAnalytics(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t OutputBundlePath;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double Runtime;
  std::string::size_type v16;
  std::__shared_weak_count *size;
  unint64_t *v18;
  unint64_t v19;
  Espresso::AOT::MILSegmenterAnalytics *v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  std::__fs::filesystem::path v24;
  std::string v25;
  std::__fs::filesystem::path __p;

  if (*(_BYTE *)Espresso::AOT::MILSegmenterOptions::GetSaveSegmentationData(*(Espresso::AOT::MILSegmenterOptions **)(a1 + 48)))
  {
    OutputBundlePath = Espresso::AOT::MILSegmenterOptions::GetOutputBundlePath(*(Espresso::AOT::MILSegmenterOptions **)(a1 + 48));
    v7 = *(unsigned __int8 *)(OutputBundlePath + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(OutputBundlePath + 8);
    if (!v7)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("If saving analytics was enabled, an output path should be specified");
    if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56))
    {
      v8 = 0;
      do
      {
        v9 = *a2;
        v10 = Espresso::AOT::SegmenterShortestPath::EstimateLaunchCost((Espresso::AOT::SegmenterShortestPath *)a1, v8);
        Espresso::AOT::MILSegmenterAnalytics::UpdateLaunchCost(v9, v10);
        v12 = *(_QWORD *)(a1 + 56);
        v11 = *(_QWORD *)(a1 + 64);
        if (v11 == v12)
          break;
        v13 = 0;
        do
        {
          if (v13 != v8)
          {
            Espresso::AOT::BackendRegistry::GetCostEstimator((_QWORD *)(a1 + 8), v12 + 24 * v13, &v25);
            memset(&__p, 0, sizeof(__p));
            (*(void (**)(std::__fs::filesystem::path *__return_ptr, std::string::size_type, std::__fs::filesystem::path *, unint64_t))(*(_QWORD *)v25.__r_.__value_.__l.__data_ + 24))(&v24, v25.__r_.__value_.__r.__words[0], &__p, *(_QWORD *)(a1 + 56) + 24 * v8);
            Runtime = Espresso::AOT::CostEstimate::GetRuntime((Espresso::AOT::CostEstimate *)v24.__pn_.__r_.__value_.__l.__data_);
            v16 = v24.__pn_.__r_.__value_.__r.__words[0];
            v24.__pn_.__r_.__value_.__r.__words[0] = 0;
            if (v16)
              (*(void (**)(std::string::size_type))(*(_QWORD *)v16 + 8))(v16);
            if (__p.__pn_.__r_.__value_.__r.__words[0])
            {
              __p.__pn_.__r_.__value_.__l.__size_ = __p.__pn_.__r_.__value_.__r.__words[0];
              operator delete(__p.__pn_.__r_.__value_.__l.__data_);
            }
            size = (std::__shared_weak_count *)v25.__r_.__value_.__l.__size_;
            if (v25.__r_.__value_.__l.__size_)
            {
              v18 = (unint64_t *)(v25.__r_.__value_.__l.__size_ + 8);
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            Espresso::AOT::MILSegmenterAnalytics::UpdateTransferCost(*a2, Runtime, *(_QWORD *)(a1 + 56) + 24 * v13, *(_QWORD *)(a1 + 56) + 24 * v8);
            v12 = *(_QWORD *)(a1 + 56);
            v11 = *(_QWORD *)(a1 + 64);
          }
          ++v13;
          v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
        }
        while (v13 < v14);
        ++v8;
      }
      while (v8 < v14);
    }
    Espresso::AOT::MILSegmenterAnalytics::UpdateWithOpToBackend(*a2, a3);
    v20 = (Espresso::AOT::MILSegmenterAnalytics *)*a2;
    v21 = Espresso::AOT::MILSegmenterOptions::GetOutputBundlePath(*(Espresso::AOT::MILSegmenterOptions **)(a1 + 48));
    memset(&v25, 0, sizeof(v25));
    v22 = *(unsigned __int8 *)(v21 + 23);
    if ((v22 & 0x80u) == 0)
      v23 = (std::string *)v21;
    else
      v23 = *(std::string **)v21;
    if ((v22 & 0x80u) != 0)
      v22 = *(_QWORD *)(v21 + 8);
    std::string::append[abi:ne180100]<char const*,0>(&v25, v23, (std::string *)((char *)v23 + v22));
    memset(&v24, 0, sizeof(v24));
    std::string::append[abi:ne180100]<char const*,0>(&v24.__pn_, (std::string *)"analytics.mil", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100](&v24, (uint64_t)&v25, &__p);
    Espresso::AOT::MILSegmenterAnalytics::Serialize(v20, &__p);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_29:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
LABEL_33:
        operator delete(v25.__r_.__value_.__l.__data_);
        return;
      }
    }
    else if ((SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_29;
    }
    operator delete(v24.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_33;
  }
}

void sub_1911362FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(a22);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_19113636C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0)
    JUMPOUT(0x191136320);
  JUMPOUT(0x191136318);
}

void sub_19113637C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v18;

  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    v18 = __p;
    if (!__p)
    {
LABEL_3:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v18 = __p;
    if (!__p)
      goto LABEL_3;
  }
  a17 = (uint64_t)v18;
  operator delete(v18);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

double Espresso::AOT::SegmenterShortestPath::EstimateTransferCost(Espresso::AOT::SegmenterShortestPath *this, uint64_t a2, uint64_t a3, const unint64_t *a4)
{
  double Runtime;
  Espresso::AOT::CostEstimate *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  Espresso::AOT::CostEstimate *v17;

  Espresso::AOT::BackendRegistry::GetCostEstimator((_QWORD *)this + 1, *((_QWORD *)this + 7) + 24 * a2, &v15);
  __p = 0;
  v13 = 0;
  v14 = 0;
  (*(void (**)(Espresso::AOT::CostEstimate **__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)v15 + 24))(&v17, v15, &__p, *((_QWORD *)this + 7) + 24 * a3);
  Runtime = Espresso::AOT::CostEstimate::GetRuntime(v17);
  v7 = v17;
  v17 = 0;
  if (v7)
    (*(void (**)(Espresso::AOT::CostEstimate *))(*(_QWORD *)v7 + 8))(v7);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return Runtime;
}

void sub_1911364C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  void *v16;

  v15 = a14;
  a14 = 0;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = __p;
    if (!__p)
    {
LABEL_3:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v16 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v16);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::~SegmentsLowerer(Espresso::AOT::SegmentsLowerer *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void **)*((_QWORD *)this + 7);
    if (v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (void **)*((_QWORD *)this + 7);
    if (v5)
    {
      do
      {
        while (1)
        {
LABEL_11:
          v6 = (void **)*v5;
          v7 = (std::__shared_weak_count *)v5[6];
          if (v7)
          {
            v8 = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(v8);
            while (__stlxr(v9 - 1, v8));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          if (*((char *)v5 + 39) < 0)
            break;
          operator delete(v5);
          v5 = v6;
          if (!v6)
            goto LABEL_17;
        }
        operator delete(v5[2]);
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
  }
LABEL_17:
  v10 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    operator delete(v10);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

char **std::vector<std::unordered_map<unsigned long,double>>::vector(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(40 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[40 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_DWORD *)v4 + 8) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1911366FC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<std::unordered_map<unsigned long,double>>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

char **std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::vector(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(40 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[40 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_DWORD *)v4 + 8) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1911367A8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::vector();
  _Unwind_Resume(exception_object);
}

void ***std::__exception_guard_exceptions<std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  void *v10;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (_QWORD *)*(v4 - 3);
          if (v6)
          {
            do
            {
              v9 = (_QWORD *)*v6;
              v10 = (void *)v6[3];
              if (v10)
              {
                v6[4] = v10;
                operator delete(v10);
              }
              operator delete(v6);
              v6 = v9;
            }
            while (v9);
          }
          v8 = (void *)*(v4 - 5);
          v4 -= 5;
          v7 = v8;
          *v4 = 0;
          if (v8)
            operator delete(v7);
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v11 = *v19;
LABEL_61:
      *v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    v28 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_191136C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

char **std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::vector(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(40 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[40 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_DWORD *)v4 + 8) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_191136D04(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<std::unordered_map<unsigned long,double>>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

char **std::vector<std::unordered_map<unsigned long,unsigned long long>>::vector(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(40 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[40 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_DWORD *)v4 + 8) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_191136DB0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<std::unordered_map<unsigned long,double>>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>,std::vector<std::unordered_map<unsigned long,unsigned long long>>>::pair[abi:ne180100]<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>&,std::vector<std::unordered_map<unsigned long,unsigned long long>>&,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*,std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*>((uint64_t)a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::unordered_map<unsigned long,unsigned long long>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long,unsigned long long>*,std::unordered_map<unsigned long,unsigned long long>*>((uint64_t)(a1 + 3), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_191136E44(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    Espresso::AOT::SegmenterShortestPath::OpCostMap::OpCostMap((uint64_t)v1, *v1);
  _Unwind_Resume(exception_object);
}

void ***std::__exception_guard_exceptions<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = **result;
    if (v3)
    {
      v4 = v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (_QWORD *)*(v4 - 3);
          if (v6)
          {
            do
            {
              v7 = (_QWORD *)*v6;
              operator delete(v6);
              v6 = v7;
            }
            while (v7);
          }
          v9 = (void *)*(v4 - 5);
          v4 -= 5;
          v8 = v9;
          *v4 = 0;
          if (v9)
            operator delete(v8);
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v15[3] = 0;
  v15[4] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_191137228(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*,std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x666666666666667)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    result = (uint64_t)operator new(40 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 40 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::unordered_map(v8 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1911372FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::pair<unsigned long long,unsigned long long>> const&>(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_191137454(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191137468(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::pair<unsigned long long,unsigned long long>> const&>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x28uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  v14[4] = *(_QWORD *)(a3 + 16);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_191137790(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<unsigned long,unsigned long long>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long,unsigned long long>*,std::unordered_map<unsigned long,unsigned long long>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x666666666666667)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    result = (uint64_t)operator new(40 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 40 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = std::unordered_map<unsigned long,unsigned long long>::unordered_map(v8 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_191137864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long,unsigned long long>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long long> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_1911379BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1911379D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long long> const&>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_191137CF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Espresso::AOT::CostGraph::Node>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  _QWORD *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::AOT::CostGraph::Node>,Espresso::AOT::CostGraph::Node*,Espresso::AOT::CostGraph::Node*,Espresso::AOT::CostGraph::Node*>(v3, v4, v5, v8);
  }
  return a1;
}

void sub_191137DAC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;

  v1[1] = v2;
  if (*v1)
    std::vector<Espresso::AOT::CostGraph::Node>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::AOT::CostGraph::Node>,Espresso::AOT::CostGraph::Node*,Espresso::AOT::CostGraph::Node*,Espresso::AOT::CostGraph::Node*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[16 * (v10 >> 4)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_191137EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::AOT::CostGraph::Node>,Espresso::AOT::CostGraph::Node*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191137EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::AOT::CostGraph::Node>,Espresso::AOT::CostGraph::Node*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::AOT::CostGraph::Node>,Espresso::AOT::CostGraph::Node*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

uint64_t std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long long,std::vector<unsigned long>>*,std::unordered_map<unsigned long long,std::vector<unsigned long>>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x666666666666667)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    result = (uint64_t)operator new(40 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 40 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = std::unordered_map<unsigned long long,std::vector<unsigned long>>::unordered_map(v8 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_191138004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned long long,std::vector<unsigned long>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::vector<unsigned long>> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_19113815C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_191138170(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::vector<unsigned long>> const&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = (_QWORD *)*v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == v5)
            {
              if (result[2] == v5)
                return result;
            }
            else if ((v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::__construct_node_hash<std::pair<unsigned long long const,std::vector<unsigned long>> const&>(a1, *a2, a3, (uint64_t)&v25);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    v23 = v6 - 1;
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v23 & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v23 & v5));
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v25)
    {
      v24 = *(_QWORD *)(*v25 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v24 >= v6)
          v24 %= v6;
      }
      else
      {
        v24 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v25;
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *v25 = *v14;
  *v14 = v25;
LABEL_61:
  result = v25;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_191138498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::__construct_node_hash<std::pair<unsigned long long const,std::vector<unsigned long>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;

  v7 = a1 + 16;
  result = operator new(0x30uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *result = 0;
  result[1] = a2;
  v9 = (_BYTE *)a3[1];
  result[2] = *a3;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  v10 = (_BYTE *)a3[2];
  v11 = v10 - v9;
  if (v10 != v9)
  {
    v12 = result;
    if (v11 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v10 - v9);
    v12[3] = v13;
    v12[4] = v13;
    v14 = &v13[8 * (v11 >> 3)];
    v12[5] = v14;
    result = memcpy(v13, v9, v11);
    v12[4] = v14;
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_19113855C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>,std::vector<std::unordered_map<unsigned long,unsigned long long>>>::~pair(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void *v15;

  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = (_QWORD *)*(v3 - 3);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v8 = (void *)*(v3 - 5);
        v3 -= 5;
        v7 = v8;
        *v3 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v9 = (_QWORD *)*a1;
  if (*a1)
  {
    v10 = (_QWORD *)a1[1];
    v11 = (_QWORD *)*a1;
    if (v10 != v9)
    {
      do
      {
        v12 = (_QWORD *)*(v10 - 3);
        if (v12)
        {
          do
          {
            v13 = (_QWORD *)*v12;
            operator delete(v12);
            v12 = v13;
          }
          while (v13);
        }
        v15 = (void *)*(v10 - 5);
        v10 -= 5;
        v14 = v15;
        *v10 = 0;
        if (v15)
          operator delete(v14);
      }
      while (v10 != v9);
      v11 = (_QWORD *)*a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

_QWORD *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,Espresso::AOT::SegmenterShortestPath::StateGraph,std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>,std::unique_ptr<Espresso::AOT::MILSegmenterAnalytics>,BOOL>::~__tuple_impl(_QWORD *a1)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v2 = (void **)a1[10];
  a1[10] = 0;
  if (v2)
  {
    Espresso::AOT::MILSegmenterAnalytics::~MILSegmenterAnalytics(v2);
    MEMORY[0x19401CD90]();
  }
  v3 = (_QWORD *)a1[7];
  if (v3)
  {
    v4 = (_QWORD *)a1[8];
    v5 = (void *)a1[7];
    if (v4 != v3)
    {
      do
      {
        v6 = (_QWORD *)*(v4 - 3);
        if (v6)
        {
          do
          {
            v9 = (_QWORD *)*v6;
            v10 = (void *)v6[3];
            if (v10)
            {
              v6[4] = v10;
              operator delete(v10);
            }
            operator delete(v6);
            v6 = v9;
          }
          while (v9);
        }
        v8 = (void *)*(v4 - 5);
        v4 -= 5;
        v7 = v8;
        *v4 = 0;
        if (v8)
          operator delete(v7);
      }
      while (v4 != v3);
      v5 = (void *)a1[7];
    }
    a1[8] = v3;
    operator delete(v5);
  }
  v11 = a1[4];
  if (v11)
  {
    v12 = a1[5];
    v13 = (void *)a1[4];
    if (v12 != v11)
    {
      v14 = a1[5];
      do
      {
        v16 = *(void **)(v14 - 24);
        v14 -= 24;
        v15 = v16;
        if (v16)
        {
          *(_QWORD *)(v12 - 16) = v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v11);
      v13 = (void *)a1[4];
    }
    a1[5] = v11;
    operator delete(v13);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::string const&,std::vector<unsigned long>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  char *v29;
  std::string *v30;
  float v31;
  float v32;
  _QWORD *v33;
  _QWORD *v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  int8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v46[2];
  char v47;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v46, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = v16[1];
            if (v24 == v12)
            {
              v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0)
                v26 = *((unsigned __int8 *)v16 + 39);
              else
                v26 = v16[3];
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3]))
                    return v16;
                }
                else
                {
                  if (!*((_BYTE *)v16 + 39))
                    return v16;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return v16;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = v16[1];
          if (v19 == v12)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v29 = (char *)operator new(0x40uLL);
  v46[0] = v29;
  v46[1] = a1 + 16;
  v47 = 0;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = v12;
  v30 = (std::string *)(v29 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v29 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v29 + 40) = *(_OWORD *)a4;
  *((_QWORD *)v29 + 7) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v47 = 1;
  v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v32 = *(float *)(a1 + 32);
  if (!v13 || (float)(v32 * (float)v13) < v31)
  {
    v35 = 1;
    if (v13 >= 3)
      v35 = (v13 & (v13 - 1)) != 0;
    v36 = v35 | (2 * v13);
    v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37)
      prime = v37;
    else
      prime = v36;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v39)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v39)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v39 < 3uLL || (v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < *(_QWORD *)&v39)
LABEL_68:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v43 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        v34 = (_QWORD *)v46[0];
        if (v33)
          goto LABEL_57;
      }
      else
      {
        v4 = v12;
        v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        v34 = (_QWORD *)v46[0];
        if (v33)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v43 & v12;
      v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v43 & v12));
      v34 = (_QWORD *)v46[0];
      if (v33)
        goto LABEL_57;
    }
LABEL_81:
    *v34 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v46[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v46[0])
    {
      v44 = *(_QWORD *)(*(_QWORD *)v46[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v44 >= v13)
          v44 %= v13;
      }
      else
      {
        v44 &= v13 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v46[0];
    }
    goto LABEL_92;
  }
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v34 = (_QWORD *)v46[0];
  if (!v33)
    goto LABEL_81;
LABEL_57:
  *v34 = *v33;
  *v33 = v46[0];
LABEL_92:
  v16 = (uint64_t *)v46[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_191138BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191138BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILSegmenterAnalytics::MILSegmenterAnalytics(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, __int128 *a5)
{
  std::string *v8;
  __int128 v9;

  *(_BYTE *)a1 = a2;
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)(a1 + 16), *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  v8 = (std::string *)(a1 + 40);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v9 = *a5;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_191138CBC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v4;

  if (*v2)
    Espresso::AOT::MILSegmenterAnalytics::MILSegmenterAnalytics();
  v4 = *v1;
  *v1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0_5(void *__p)
{
  operator delete(__p);
}

uint64_t OUTLINED_FUNCTION_5_0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_6(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_7_0(void *__p)
{
  operator delete(__p);
}

void OUTLINED_FUNCTION_8_1(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 16) = __p;
  operator delete(__p);
}

void std::vector<Espresso::AOT::CostGraph::Node>::vector(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  void **v5;
  uint64_t v6;
  char v7;
  void **v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = (void *)OUTLINED_FUNCTION_5_0(a1, a2);
  if (!v7)
  {
    v8 = v5;
    v9 = v6;
    do
    {
      v11 = *(void **)(v9 - 24);
      v9 -= 24;
      v10 = v11;
      if (v11)
        OUTLINED_FUNCTION_8_1(v10, v6);
      v6 = v9;
    }
    while (v9 != v2);
    v4 = *v8;
  }
  *v3 = v2;
  OUTLINED_FUNCTION_0_5(v4);
}

void Espresso::AOT::SegmenterShortestPath::BuildStateGraph()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  OUTLINED_FUNCTION_4_1();
  v4 = *(_QWORD *)(v3 + 40);
  v6 = v5;
  if ((void *)v4 != v5)
  {
    v7 = v2;
    v8 = v4;
    do
    {
      v10 = *(void **)(v8 - 24);
      v8 -= 24;
      v9 = v10;
      if (v10)
        OUTLINED_FUNCTION_8_1(v9, v4);
      v4 = v8;
    }
    while (v8 != v0);
    v6 = *v7;
  }
  *(_QWORD *)(v1 + 40) = v0;
  operator delete(v6);
  OUTLINED_FUNCTION_10();
}

void Espresso::AOT::SegmenterShortestPath::OpCostMap::OpCostMap(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *v10;

  v5 = (void *)OUTLINED_FUNCTION_6(a1, a2);
  if (!v6)
  {
    do
    {
      v7 = (_QWORD *)*(v4 - 3);
      if (v7)
      {
        do
        {
          v8 = (_QWORD *)*v7;
          operator delete(v7);
          v7 = v8;
        }
        while (v8);
      }
      v10 = (void *)*(v4 - 5);
      v4 -= 5;
      v9 = v10;
      *v4 = 0;
      if (v10)
        operator delete(v9);
    }
    while (v4 != v2);
    v5 = *(void **)v3;
  }
  *(_QWORD *)(v3 + 8) = v2;
  OUTLINED_FUNCTION_0_5(v5);
}

void std::vector<std::unordered_map<unsigned long,double>>::vector(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void **v7;
  char v8;
  void **v9;
  void *v10;
  void *v11;
  void *v12;

  v6 = (void *)OUTLINED_FUNCTION_10_0(a1, a2);
  if (!v8)
  {
    v9 = v7;
    do
    {
      v10 = (void *)*(v4 - 3);
      if (v10)
      {
        do
        {
          OUTLINED_FUNCTION_7_0(v10);
          v10 = v5;
        }
        while (v5);
      }
      v12 = (void *)*(v4 - 5);
      v4 -= 5;
      v11 = v12;
      *v4 = 0;
      if (v12)
        operator delete(v11);
    }
    while (v4 != v2);
    v6 = *v9;
  }
  *v3 = v2;
  OUTLINED_FUNCTION_0_2(v6);
}

void std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::vector()
{
  _QWORD *v0;
  _QWORD *v1;
  void **v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;

  OUTLINED_FUNCTION_4_1();
  v4 = *v3;
  v6 = v5;
  if (v4 != v5)
  {
    v7 = v2;
    do
    {
      v8 = (_QWORD *)*(v4 - 3);
      if (v8)
      {
        do
        {
          v9 = (_QWORD *)*v8;
          v10 = (void *)v8[3];
          if (v10)
          {
            v8[4] = v10;
            operator delete(v10);
          }
          operator delete(v8);
          v8 = v9;
        }
        while (v9);
      }
      v12 = (void *)*(v4 - 5);
      v4 -= 5;
      v11 = v12;
      *v4 = 0;
      if (v12)
        operator delete(v11);
    }
    while (v4 != v0);
    v6 = *v7;
  }
  *v1 = v0;
  OUTLINED_FUNCTION_0_2(v6);
}

void std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*,std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*>()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  OUTLINED_FUNCTION_4_1();
  do
  {
    v2 = (_QWORD *)*(v1 - 3);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v5 = (void *)*(v1 - 5);
    v1 -= 5;
    v4 = v5;
    *v1 = 0;
    if (v5)
      operator delete(v4);
  }
  while (v1 != v0);
  OUTLINED_FUNCTION_10();
}

void std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long long,std::vector<unsigned long>>*,std::unordered_map<unsigned long long,std::vector<unsigned long>>*>()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;

  OUTLINED_FUNCTION_4_1();
  do
  {
    v2 = (_QWORD *)*(v1 - 3);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        v4 = (void *)v2[3];
        if (v4)
        {
          v2[4] = v4;
          operator delete(v4);
        }
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v6 = (void *)*(v1 - 5);
    v1 -= 5;
    v5 = v6;
    *v1 = 0;
    if (v6)
      operator delete(v5);
  }
  while (v1 != v0);
  OUTLINED_FUNCTION_10();
}

void Espresso::AOT::MILSegmenterAnalytics::MILSegmenterAnalytics()
{
  void **v0;
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void *v6;
  void **v7;

  OUTLINED_FUNCTION_4_1();
  v4 = *(void ***)(v3 + 24);
  v6 = v5;
  if (v4 != v5)
  {
    v7 = v2;
    do
    {
      if (*((char *)v4 - 1) < 0)
        operator delete(*(v4 - 3));
      v4 -= 3;
    }
    while (v4 != v0);
    v6 = *v7;
  }
  *(_QWORD *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_0_5(v6);
}

float Espresso::AOT::DTrees::convAneFp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 16152.0;
  if (v1 <= 11.675)
    return 471.18;
  result = 7160.8;
  if (*(double *)(a1 + 24) > 0.8961)
    return 661.28;
  return result;
}

float Espresso::AOT::DTrees::convAneIp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 11582.0;
  if (v1 <= 11.675)
    return 436.78;
  result = 5980.9;
  if (*(double *)(a1 + 24) > 0.8961)
    return 489.77;
  return result;
}

float Espresso::AOT::DTrees::convAneJp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 12136.0;
  if (v1 <= 11.675)
    return 200.0;
  result = 5733.2;
  if (*(double *)(a1 + 24) > 0.8961)
    return 499.4;
  return result;
}

float Espresso::AOT::DTrees::convAneKp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 12136.0;
  if (v1 <= 11.675)
    return 474.91;
  result = 5638.0;
  if (*(double *)(a1 + 24) > 0.8961)
    return 498.64;
  return result;
}

float Espresso::AOT::DTrees::convAneGp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 6871.0;
  if (v1 <= 11.675)
    return 300.0;
  result = 3159.3;
  if (*(double *)(a1 + 24) > 0.8961)
    return 591.06;
  return result;
}

float Espresso::AOT::DTrees::convAneHp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 7500.0;
  if (v1 <= 11.675)
    return 300.0;
  result = 3138.9;
  if (*(double *)(a1 + 24) > 0.8961)
    return 569.43;
  return result;
}

float Espresso::AOT::DTrees::convCpuFp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 655.96;
  if (v1 <= 11.675)
    return 23.548;
  result = 337.38;
  if (*(double *)(a1 + 24) > 0.8961)
    return 150.0;
  return result;
}

float Espresso::AOT::DTrees::convCpuIp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 633.97;
  if (v1 <= 11.675)
    return 27.277;
  result = 259.17;
  if (*(double *)(a1 + 24) > 0.8961)
    return 100.0;
  return result;
}

float Espresso::AOT::DTrees::convCpuJp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 1253.0;
  if (v1 <= 11.675)
    return 23.877;
  result = 387.06;
  if (*(double *)(a1 + 24) > 0.8961)
    return 302.44;
  return result;
}

float Espresso::AOT::DTrees::convCpuKp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 1002.3;
  if (v1 <= 11.675)
    return 24.405;
  result = 381.07;
  if (*(double *)(a1 + 24) > 0.8961)
    return 200.0;
  return result;
}

float Espresso::AOT::DTrees::convCpuGp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 1461.6;
  if (v1 <= 11.675)
    return 25.749;
  result = 516.01;
  if (*(double *)(a1 + 24) > 0.8961)
    return 321.0;
  return result;
}

float Espresso::AOT::DTrees::convCpuHp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 1371.7;
  if (v1 <= 11.675)
    return 28.893;
  result = 407.71;
  if (*(double *)(a1 + 24) > 0.8961)
    return 385.77;
  return result;
}

float Espresso::AOT::DTrees::convGpuFp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 2402.1;
  if (v1 <= 11.675)
    return 137.37;
  result = 781.21;
  if (*(double *)(a1 + 24) > 0.8961)
    return 177.81;
  return result;
}

float Espresso::AOT::DTrees::convGpuIp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 1572.2;
  if (v1 <= 11.675)
    return 114.07;
  result = 737.86;
  if (*(double *)(a1 + 24) > 0.8961)
    return 133.18;
  return result;
}

float Espresso::AOT::DTrees::convGpuJp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 5491.8;
  if (v1 <= 11.675)
    return 80.0;
  result = 1269.4;
  if (*(double *)(a1 + 24) > 0.8961)
    return 454.65;
  return result;
}

float Espresso::AOT::DTrees::convGpuKp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 2940.1;
  if (v1 <= 11.675)
    return 183.69;
  result = 894.78;
  if (*(double *)(a1 + 24) > 0.8961)
    return 234.7;
  return result;
}

float Espresso::AOT::DTrees::convGpuGp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 3630.9;
  if (v1 <= 11.675)
    return 204.98;
  result = 1534.4;
  if (*(double *)(a1 + 24) > 0.8961)
    return 321.53;
  return result;
}

float Espresso::AOT::DTrees::convGpuHp(uint64_t a1)
{
  double v1;
  float result;

  v1 = *(double *)(a1 + 48);
  if (v1 > 67.145)
    return 6400.7;
  if (v1 <= 11.675)
    return 232.02;
  result = 1791.8;
  if (*(double *)(a1 + 24) > 0.8961)
    return 491.87;
  return result;
}

float Espresso::AOT::DTrees::convAneCp(uint64_t a1)
{
  double v1;
  float v2;
  float v3;

  v1 = *(double *)(a1 + 48);
  v2 = 294.93;
  if (v1 > 10.265)
    v2 = 3117.3;
  v3 = 5231.1;
  if (v1 > 70.08)
    v3 = 10637.0;
  if (v1 <= 43.685)
    return v2;
  else
    return v3;
}

float Espresso::AOT::DTrees::convAneDp(uint64_t a1)
{
  double v1;
  float v2;
  float v3;

  v1 = *(double *)(a1 + 48);
  v2 = 299.15;
  if (v1 > 10.265)
    v2 = 2954.7;
  v3 = 6423.1;
  if (v1 > 70.08)
    v3 = 11304.0;
  if (v1 <= 43.685)
    return v2;
  else
    return v3;
}

float Espresso::AOT::DTrees::convAneEp(uint64_t a1)
{
  double v1;
  float v2;
  float v3;

  v1 = *(double *)(a1 + 48);
  v2 = 344.43;
  if (v1 > 10.265)
    v2 = 3491.2;
  v3 = 6674.3;
  if (v1 > 70.08)
    v3 = 13916.0;
  if (v1 <= 43.685)
    return v2;
  else
    return v3;
}

float Espresso::AOT::DTrees::convCpuCp(uint64_t a1)
{
  double v1;
  float v2;
  float v3;

  v1 = *(double *)(a1 + 48);
  v2 = 17.071;
  if (v1 > 10.265)
    v2 = 237.49;
  v3 = 415.06;
  if (v1 > 70.08)
    v3 = 561.91;
  if (v1 <= 43.685)
    return v2;
  else
    return v3;
}

float Espresso::AOT::DTrees::convCpuDp(uint64_t a1)
{
  double v1;
  float v2;
  float v3;

  v1 = *(double *)(a1 + 48);
  v2 = 19.277;
  if (v1 > 10.265)
    v2 = 226.81;
  v3 = 465.12;
  if (v1 > 70.08)
    v3 = 753.67;
  if (v1 <= 43.685)
    return v2;
  else
    return v3;
}

float Espresso::AOT::DTrees::convCpuEp(uint64_t a1)
{
  double v1;
  float v2;
  float v3;

  v1 = *(double *)(a1 + 48);
  v2 = 18.202;
  if (v1 > 10.265)
    v2 = 249.23;
  v3 = 503.91;
  if (v1 > 70.08)
    v3 = 621.17;
  if (v1 <= 43.685)
    return v2;
  else
    return v3;
}

float Espresso::AOT::DTrees::convGpuCp(uint64_t a1)
{
  double v1;
  float v2;
  float v3;

  v1 = *(double *)(a1 + 48);
  v2 = 53.286;
  if (v1 > 10.265)
    v2 = 287.96;
  v3 = 441.59;
  if (v1 > 70.08)
    v3 = 646.2;
  if (v1 <= 43.685)
    return v2;
  else
    return v3;
}

float Espresso::AOT::DTrees::convGpuDp(uint64_t a1)
{
  double v1;
  float v2;
  float v3;

  v1 = *(double *)(a1 + 48);
  v2 = 57.443;
  if (v1 > 10.265)
    v2 = 400.99;
  v3 = 665.41;
  if (v1 > 70.08)
    v3 = 918.48;
  if (v1 <= 43.685)
    return v2;
  else
    return v3;
}

float Espresso::AOT::DTrees::convGpuEp(uint64_t a1)
{
  double v1;
  float v2;
  float v3;

  v1 = *(double *)(a1 + 48);
  v2 = 68.757;
  if (v1 > 10.265)
    v2 = 466.06;
  v3 = 678.01;
  if (v1 > 70.08)
    v3 = 815.2;
  if (v1 <= 43.685)
    return v2;
  else
    return v3;
}

void Espresso::AOT::Backends::CostModel::PoolOpEstimator::EstimateComputeResources(const MIL::IROperation *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  Espresso::AOT *ParameterType;
  Espresso::AOT *OutputType;
  Espresso::AOT *ParameterValue;
  const MIL::IRValueType *v9;
  const MIL::IRValueType *v10;
  const MIL::IRValueType *v11;
  unint64_t NumElementsSkipUnknownDims;
  const MIL::IRValue *v13;
  const MIL::IRValue *v14;
  const MIL::IRValueType *v15;
  Espresso::AOT *v16;
  const MIL::IRValueType *v17;
  const MIL::IRValueType *v18;
  double SizeInMbForShape;
  double v20;
  double v21;
  void *__p[2];
  char v23;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *a2 = v5;
  ParameterType = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  OutputType = (Espresso::AOT *)MIL::IROperation::GetOutputType(a1);
  v23 = 12;
  strcpy((char *)__p, "kernel_sizes");
  ParameterValue = (Espresso::AOT *)MIL::IROperation::TryGetParameterValue();
  *(double *)(v5 + 56) = Espresso::AOT::GetXDimOfTensorFromIRValueType(ParameterType, v9);
  *(double *)(v5 + 72) = Espresso::AOT::GetXDimOfTensorFromIRValueType(OutputType, v10);
  NumElementsSkipUnknownDims = Espresso::AOT::GetNumElementsSkipUnknownDims(OutputType, v11);
  *(double *)v5 = (double)NumElementsSkipUnknownDims
                * (0.000000001
                 * Espresso::AOT::GetNumberOfElementsFromShapeValue(ParameterValue, v13));
  *(double *)(v5 + 24) = Espresso::AOT::GetNumberOfElementsFromShapeValue(ParameterValue, v14) * 0.00000381469727;
  *(double *)(v5 + 32) = Espresso::AOT::GetSizeInMbForShape(ParameterType, v15);
  v16 = (Espresso::AOT *)MIL::IROperation::GetOutputType(a1);
  SizeInMbForShape = Espresso::AOT::GetSizeInMbForShape(v16, v17);
  *(double *)(v5 + 40) = SizeInMbForShape;
  v20 = *(double *)(v5 + 24) + SizeInMbForShape + *(double *)(v5 + 32);
  *(double *)(v5 + 8) = v20;
  v21 = 0.0;
  if (v20 > 0.0)
    v21 = *(double *)v5 * 1000.0 / v20;
  *(double *)(v5 + 48) = v21;
  *(double *)(v5 + 136) = Espresso::AOT::GetWU16EfficiencyForInputType(ParameterType, v18);
}

void sub_191139DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  *v15 = 0;
  MEMORY[0x19401CD90](v16, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

void E5AOT::Operators::ValidationUtils::ValidateHasStringAttribute(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  uint64_t *LocationPtr;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  void *v20[2];
  std::string::size_type v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string v24;
  void *__p[2];
  std::string::size_type v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  if (!MIL::IRObject::TryGetAttribute())
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    v5 = (std::__shared_weak_count *)LocationPtr[1];
    v27 = *LocationPtr;
    v28 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    std::operator+<char>();
    v8 = std::string::append(&v24, "' is a required attribute.");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v26 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x19401B320](a2, &v27, 321, __p);
    if (SHIBYTE(v26) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_9:
        v10 = v28;
        if (!v28)
          return;
LABEL_20:
        v17 = (unint64_t *)&v10->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        goto LABEL_27;
      }
    }
    else if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v24.__r_.__value_.__l.__data_);
    v10 = v28;
    if (!v28)
      return;
    goto LABEL_20;
  }
  if (MEMORY[0x19401C3DC]())
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  v11 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  v12 = (std::__shared_weak_count *)v11[1];
  v22 = *v11;
  v23 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  std::operator+<char>();
  v15 = std::string::append(&v24, "' must be a string.");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v21 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)v20 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x19401B320](a2, &v22, 307, v20);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_24:
    operator delete(v24.__r_.__value_.__l.__data_);
    v10 = v23;
    if (!v23)
      return;
    goto LABEL_25;
  }
  operator delete(v20[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_24;
LABEL_16:
  v10 = v23;
  if (!v23)
    return;
LABEL_25:
  v19 = (unint64_t *)&v10->__shared_owners_;
  do
    v18 = __ldaxr(v19);
  while (__stlxr(v18 - 1, v19));
LABEL_27:
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_19113A008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_19113A058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v25 - 48);
  _Unwind_Resume(a1);
}

void sub_19113A094(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::AOT::ValidationMessage::ValidationMessage(_QWORD *a1, _QWORD *a2, __int128 *a3)
{
  std::string *v4;
  __int128 v5;

  *a1 = *a2;
  v4 = (std::string *)(a1 + 1);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

{
  std::string *v4;
  __int128 v5;

  *a1 = *a2;
  v4 = (std::string *)(a1 + 1);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

uint64_t Espresso::AOT::ValidationMessage::GetDispatchUnit(Espresso::AOT::ValidationMessage *this)
{
  return *(_QWORD *)this;
}

void Espresso::AOT::ValidationMessage::GetMessage(Espresso::AOT::ValidationMessage *this@<X0>, uint64_t a2@<X8>)
{
  const std::string::value_type **v2;
  std::string::size_type v3;

  v2 = (const std::string::value_type **)((char *)this + 8);
  if (*((char *)this + 31) < 0)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *v2, v3);
      return;
    }
  }
  else if (*((_BYTE *)this + 31))
  {
    *(_OWORD *)a2 = *(_OWORD *)v2;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 3);
    return;
  }
  *(_BYTE *)(a2 + 23) = 21;
  strcpy((char *)a2, "No validation message");
}

void Espresso::AOT::ValidationResult::~ValidationResult(Espresso::AOT::ValidationResult *this)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **v7;
  void *v8;

  *(_QWORD *)this = &off_1E2DA04B0;
  v2 = (void **)*((_QWORD *)this + 9);
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    operator delete(v3);
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *((_QWORD *)this + 5);
    v6 = (void *)*((_QWORD *)this + 4);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v5 -= 32;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v4;
    operator delete(v6);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
}

{
  Espresso::AOT::ValidationResult::~ValidationResult(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::AOT::ValidationResult::ValidationResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E2DA04B0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *(_QWORD *)(a1 + 24) = v7;
    memcpy(v6, v4, v5);
    *(_QWORD *)(a1 + 16) = v7;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  return a1;
}

{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E2DA04B0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *(_QWORD *)(a1 + 24) = v7;
    memcpy(v6, v4, v5);
    *(_QWORD *)(a1 + 16) = v7;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  return a1;
}

void sub_19113A350(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_19113A408(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::ValidationResult::ValidationResult(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E2DA04B0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    if (v7 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - *(_QWORD *)a2);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<Espresso::AOT::ValidationMessage>::__init_with_size[abi:ne180100]<Espresso::AOT::ValidationMessage*,Espresso::AOT::ValidationMessage*>((_QWORD *)(a1 + 32), *a3, a3[1], (a3[1] - *a3) >> 5);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  return a1;
}

void sub_19113A4E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::ValidationResult::GetValidDispatchUnits(Espresso::AOT::ValidationResult *this)
{
  return (uint64_t)this + 8;
}

uint64_t Espresso::AOT::ValidationResult::GetValidationMessages(Espresso::AOT::ValidationResult *this)
{
  return (uint64_t)this + 32;
}

uint64_t *Espresso::AOT::ValidationResult::IsFeatureSupported(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t *result;
  uint64_t *v5;

  v3 = (_QWORD *)(a1 + 56);
  result = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(a1 + 56), a2);
  if (result)
  {
    v5 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v3, a2);
    if (!v5)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return (uint64_t *)(*((_BYTE *)v5 + 40) != 0);
  }
  return result;
}

char *Espresso::AOT::ValidationResult::SetFeature(uint64_t a1, __int128 *a2, char a3)
{
  char *result;
  __int128 *v5;

  v5 = a2;
  result = std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 56, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v5);
  result[40] = a3;
  return result;
}

_QWORD *Espresso::AOT::AbstractValidator::AbstractValidator(_QWORD *this)
{
  *this = off_1E2DA04F8;
  return this;
}

void Espresso::AOT::AOTCompilerDriver::~AOTCompilerDriver(Espresso::AOT::AOTCompilerDriver *this)
{
  char *v2;
  void *v3;
  char *v4;
  uint64_t v5;

  v2 = (char *)*((_QWORD *)this + 2);
  if (v2)
  {
    do
    {
      v4 = *(char **)v2;
      v5 = *((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v3)
    operator delete(v3);
}

{
  char *v2;
  void *v3;
  char *v4;
  uint64_t v5;

  v2 = (char *)*((_QWORD *)this + 2);
  if (v2)
  {
    do
    {
      v4 = *(char **)v2;
      v5 = *((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)this;
  *(_QWORD *)this = 0;
  if (v3)
    operator delete(v3);
}

Espresso::AOT::AOTCompilerDriver *Espresso::AOT::AOTCompilerDriver::AOTCompilerDriver(Espresso::AOT::AOTCompilerDriver *this)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *__p;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;

  Espresso::AOT::AOTCompilerDriver::MakeDefaultBackendRegistry((uint64_t)&__p);
  v2 = __p;
  v3 = v12;
  __p = 0;
  v12 = 0;
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = v3;
  v5 = v13;
  v4 = v14;
  *((_QWORD *)this + 2) = v13;
  *((_QWORD *)this + 3) = v4;
  *((_DWORD *)this + 8) = v15;
  if (v4)
  {
    v6 = *((_QWORD *)v5 + 1);
    if ((v3 & (v3 - 1)) != 0)
    {
      if (v6 >= v3)
        v6 %= v3;
    }
    else
    {
      v6 &= v3 - 1;
    }
    v2[v6] = (char *)this + 16;
    v13 = 0;
    v14 = 0;
  }
  else if (v5)
  {
    do
    {
      v7 = *(char **)v5;
      v8 = *((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (v5[39] < 0)
        operator delete(*((void **)v5 + 2));
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v9 = __p;
  __p = 0;
  if (v9)
    operator delete(v9);
  return this;
}

{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *__p;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;

  Espresso::AOT::AOTCompilerDriver::MakeDefaultBackendRegistry((uint64_t)&__p);
  v2 = __p;
  v3 = v12;
  __p = 0;
  v12 = 0;
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = v3;
  v5 = v13;
  v4 = v14;
  *((_QWORD *)this + 2) = v13;
  *((_QWORD *)this + 3) = v4;
  *((_DWORD *)this + 8) = v15;
  if (v4)
  {
    v6 = *((_QWORD *)v5 + 1);
    if ((v3 & (v3 - 1)) != 0)
    {
      if (v6 >= v3)
        v6 %= v3;
    }
    else
    {
      v6 &= v3 - 1;
    }
    v2[v6] = (char *)this + 16;
    v13 = 0;
    v14 = 0;
  }
  else if (v5)
  {
    do
    {
      v7 = *(char **)v5;
      v8 = *((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      if (v5[39] < 0)
        operator delete(*((void **)v5 + 2));
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v9 = __p;
  __p = 0;
  if (v9)
    operator delete(v9);
  return this;
}

Espresso::AOT::E5AOTCompilerBackendFactory *Espresso::AOT::AOTCompilerDriver::MakeDefaultBackendRegistry@<X0>(uint64_t a1@<X8>)
{
  Espresso::AOT::E5AOTCompilerBackendFactory *v3;
  char v4;
  char v5;
  Espresso::AOT::E5AOTCompilerBackendFactory *result;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  Espresso::AOT::E5AOTCompilerBackendFactory *v12;
  std::string v13;
  std::string v14;
  std::string __p;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v3 = (Espresso::AOT::E5AOTCompilerBackendFactory *)operator new();
  Espresso::AOT::E5AOTCompilerBackendFactory::E5AOTCompilerBackendFactory(v3);
  v12 = v3;
  (*(void (**)(std::string *__return_ptr, Espresso::AOT::E5AOTCompilerBackendFactory *))(*(_QWORD *)v3 + 32))(&__p, v3);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>>>::__emplace_unique_key_args<std::string,std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>(a1, (uint64_t)&__p, (uint64_t)&__p, (uint64_t *)&v12);
  v5 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v12 + 32))(&v13);
    v8 = std::string::insert(&v13, 0, "Failed to add ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v14, " to backend registry.");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = v12;
  v12 = 0;
  if (result)
    return (Espresso::AOT::E5AOTCompilerBackendFactory *)(*(uint64_t (**)(Espresso::AOT::E5AOTCompilerBackendFactory *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19113A91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void *v29;
  int v30;

  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if (a15 < 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v30 & 1) == 0)
    {
LABEL_10:
      if (a9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
        std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100](v28);
        _Unwind_Resume(a1);
      }
      std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100](v28);
      _Unwind_Resume(a1);
    }
LABEL_9:
    __cxa_free_exception(v29);
    goto LABEL_10;
  }
LABEL_8:
  if (!v30)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t Espresso::AOT::AOTCompilerDriver::AOTCompilerDriver(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t Espresso::AOT::AOTCompilerDriver::Run(_QWORD *a1, int a2, const char **a3, _QWORD *a4)
{
  const char *v8;
  size_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  Espresso::AOT::Utils *QueryE5Platforms;
  std::__fs::filesystem::path *v18;
  std::string::size_type size;
  Espresso::AOT::Utils *QueryE5PlatformFamilies;
  _QWORD *v21;
  void *v22;
  uint64_t **v23;
  _QWORD *v24;
  _QWORD *v25;
  _BYTE *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  _OWORD *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  char *v38;
  uint64_t v39;
  char *v40;
  void *v41;
  char *v42;
  BOOL v43;
  std::string::size_type v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  char *p_str;
  uint64_t v50;
  uint64_t v51;
  std::string::size_type v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  std::string *v58;
  std::string *v59;
  uint64_t **v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t Backend;
  uint64_t v65;
  uint64_t *v66;
  __int128 v67;
  void **v68;
  void **v69;
  uint64_t v70;
  void *v71;
  uint64_t *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  void *v76;
  const char *v77;
  size_t v78;
  std::string::size_type v79;
  _BYTE *v80;
  _QWORD *v81;
  std::string *v82;
  std::string::size_type v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t ***v86;
  _QWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t **i;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const std::string::value_type **v99;
  unsigned __int8 *v100;
  std::string::size_type v101;
  char *v102;
  char *v103;
  void *v104;
  std::string *v105;
  std::string *v106;
  std::string::size_type v107;
  std::string *v108;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v109;
  std::__shared_weak_count *v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v117;
  const std::__fs::filesystem::directory_entry *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *cntrl;
  uint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::string *v128;
  void *v129;
  char *v130;
  char *v131;
  void *v132;
  _QWORD *v133;
  void *v134;
  std::string *v135;
  void *v136[2];
  char *v137;
  _BYTE v138[136];
  _BYTE v139[32];
  int v140;
  std::__fs::filesystem::path v141;
  _BYTE v142[136];
  void *__p;
  __int128 v144;
  void *__dst[2];
  unint64_t v146;
  char *v147;
  std::string __str;
  std::string v149;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v150;
  std::__shared_weak_count *v151;
  std::__fs::filesystem::directory_iterator v152;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v153;
  std::__shared_weak_count *v154;

  v8 = *a3;
  v9 = strlen(*a3);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    v146 = v13 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_8;
  }
  HIBYTE(v146) = v9;
  v11 = __dst;
  if (v9)
LABEL_8:
    memmove(v11, v8, (size_t)v10);
  *((_BYTE *)v10 + (_QWORD)v11) = 0;
  __p = operator new(0x20uLL);
  v144 = xmmword_191A71230;
  strcpy((char *)__p, "Espresso ahead-of-time compiler");
  Espresso::AOT::AOTCompilerOptionsManager::AOTCompilerOptionsManager(&v147, (uint64_t)__dst, (uint64_t)&__p);
  if ((SHIBYTE(v144) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v146) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_26:
    operator delete(__dst[0]);
    v14 = (uint64_t **)a1[2];
    if (!v14)
      goto LABEL_13;
    goto LABEL_12;
  }
  operator delete(__p);
  if (SHIBYTE(v146) < 0)
    goto LABEL_26;
LABEL_11:
  v14 = (uint64_t **)a1[2];
  if (!v14)
    goto LABEL_13;
  do
  {
LABEL_12:
    (*(void (**)(uint64_t *, char **))(*v14[5] + 16))(v14[5], &v147);
    v14 = (uint64_t **)*v14;
  }
  while (v14);
LABEL_13:
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v142);
  Espresso::AOT::AOTCompilerOptionsManager::Parse((Espresso::AOT::AOTCompilerOptionsManager::Impl **)&v147, (char **)a3, a2, (Espresso::AOT::AOTCompilerOptions *)&v141);
  Espresso::AOT::AOTCompilerOptions::operator=((uint64_t)v142, (__int128 *)&v141);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&v141);
  if (Espresso::AOT::AOTCompilerOptions::GetShowVersion((Espresso::AOT::AOTCompilerOptions *)v142))
  {
    Espresso::AOT::GetToolchainInfo((uint64_t)&v141);
    v139[23] = 17;
    strcpy(v139, "espressoc-version");
    v15 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&v141, (uint64_t)v139);
    v16 = v15;
    if ((v139[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v139);
      if (v16)
      {
LABEL_16:
        if (*((char *)v16 + 63) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v139, (const std::string::value_type *)v16[5], v16[6]);
        }
        else
        {
          *(_OWORD *)v139 = *(_OWORD *)(v16 + 5);
          *(_QWORD *)&v139[16] = v16[7];
        }
LABEL_43:
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"Espresso ahead-of-time compiler", 31);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\nVersion: ", 10);
        if (v139[23] >= 0)
          v26 = v139;
        else
          v26 = *(_BYTE **)v139;
        if (v139[23] >= 0)
          v27 = v139[23];
        else
          v27 = *(_QWORD *)&v139[8];
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
        v149.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)&v149, 1);
        v149.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v149.__r_.__value_.__l.__data_ = (unint64_t)&v149.__r_.__value_.__l.__size_;
        v29 = (uint64_t *)v141.__pn_.__r_.__value_.__r.__words[2];
        if (!v141.__pn_.__r_.__value_.__r.__words[2])
          goto LABEL_121;
        v133 = a4;
        while (1)
        {
          v30 = v29 + 2;
          v31 = *((unsigned __int8 *)v29 + 39);
          if (*((char *)v29 + 39) < 0)
          {
            v32 = (uint64_t *)v29[2];
            if (v29[3] != 17)
              break;
          }
          else
          {
            v32 = v29 + 2;
            if (v31 != 17)
              break;
          }
          v33 = *v32;
          v34 = v32[1];
          v35 = *((unsigned __int8 *)v32 + 16);
          v36 = v33 == 0x6F73736572707365 && v34 == 0x6F69737265762D63;
          if (!v36 || v35 != 110)
            break;
LABEL_51:
          v29 = (uint64_t *)*v29;
          if (!v29)
          {
            if (v149.__r_.__value_.__r.__words[2])
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"Components:\n", 12);
              v52 = v149.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v149.__r_.__value_.__l.__data_ != &v149.__r_.__value_.__r.__words[1])
              {
                do
                {
                  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"  ", 2);
                  v54 = *(char *)(v52 + 55);
                  if (v54 >= 0)
                    v55 = v52 + 32;
                  else
                    v55 = *(_QWORD *)(v52 + 32);
                  if (v54 >= 0)
                    v56 = *(unsigned __int8 *)(v52 + 55);
                  else
                    v56 = *(_QWORD *)(v52 + 40);
                  v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
                  __str.__r_.__value_.__s.__data_[0] = 10;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)&__str, 1);
                  v58 = *(std::string **)(v52 + 8);
                  if (v58)
                  {
                    do
                    {
                      v59 = v58;
                      v58 = (std::string *)v58->__r_.__value_.__r.__words[0];
                    }
                    while (v58);
                  }
                  else
                  {
                    do
                    {
                      v59 = *(std::string **)(v52 + 16);
                      v36 = v59->__r_.__value_.__r.__words[0] == v52;
                      v52 = (std::string::size_type)v59;
                    }
                    while (!v36);
                  }
                  v52 = (std::string::size_type)v59;
                }
                while (v59 != (std::string *)&v149.__r_.__value_.__r.__words[1]);
              }
            }
LABEL_121:
            std::__tree<std::string>::destroy((uint64_t)&v149, (char *)v149.__r_.__value_.__l.__size_);
            if ((v139[23] & 0x80000000) != 0)
              operator delete(*(void **)v139);
            v60 = (uint64_t **)v141.__pn_.__r_.__value_.__r.__words[2];
            if (!v141.__pn_.__r_.__value_.__r.__words[2])
            {
LABEL_130:
              v22 = (void *)v141.__pn_.__r_.__value_.__r.__words[0];
              v141.__pn_.__r_.__value_.__r.__words[0] = 0;
              if (v22)
LABEL_131:
                operator delete(v22);
              goto LABEL_132;
            }
            while (1)
            {
              v61 = *v60;
              if (*((char *)v60 + 63) < 0)
              {
                operator delete(v60[5]);
                if ((*((char *)v60 + 39) & 0x80000000) == 0)
                  goto LABEL_126;
              }
              else if ((*((char *)v60 + 39) & 0x80000000) == 0)
              {
LABEL_126:
                operator delete(v60);
                v60 = (uint64_t **)v61;
                if (!v61)
                  goto LABEL_130;
                continue;
              }
              operator delete(v60[2]);
              operator delete(v60);
              v60 = (uint64_t **)v61;
              if (!v61)
                goto LABEL_130;
            }
          }
        }
        if ((v31 & 0x80) != 0)
        {
          v38 = (char *)v29[2];
          v39 = v29[3];
          if (v39 < 20)
            goto LABEL_84;
        }
        else
        {
          v38 = (char *)(v29 + 2);
          v39 = *((unsigned __int8 *)v29 + 39);
          if ((unint64_t)v39 < 0x14)
          {
LABEL_84:
            if ((v31 & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v29[2], v29[3]);
            }
            else
            {
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v30;
              __str.__r_.__value_.__r.__words[2] = v29[4];
            }
            goto LABEL_87;
          }
        }
        v40 = &v38[v39];
        v41 = v38;
        while (1)
        {
          v42 = (char *)memchr(v41, 101, v39 - 19);
          if (!v42)
            goto LABEL_84;
          v43 = *(_QWORD *)v42 == 0x6F73736572707365 && *((_QWORD *)v42 + 1) == 0x6E6F706D6F632D63;
          if (v43 && *((_DWORD *)v42 + 4) == 762605157)
            break;
          v41 = v42 + 1;
          v39 = v40 - (_BYTE *)v41;
          if (v40 - (_BYTE *)v41 < 20)
            goto LABEL_84;
        }
        if (v42 == v40 || v42 != v38)
          goto LABEL_84;
        if ((v31 & 0x80) != 0)
        {
          v31 = v29[3];
          if (v31 < 0x14)
LABEL_278:
            std::string::__throw_out_of_range[abi:ne180100]();
          v30 = *(_OWORD **)v30;
          v45 = v31 - 20;
          if (v31 - 20 > 0x7FFFFFFFFFFFFFF7)
LABEL_277:
            std::string::__throw_length_error[abi:ne180100]();
        }
        else
        {
          if (v31 <= 0x13)
            goto LABEL_278;
          v45 = v31 - 20;
          if (v31 - 20 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_277;
        }
        if (v45 >= 0x17)
        {
          v50 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v45 | 7) != 0x17)
            v50 = v45 | 7;
          v51 = v50 + 1;
          p_str = (char *)operator new(v50 + 1);
          __str.__r_.__value_.__l.__size_ = v45;
          __str.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
        }
        else
        {
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = v45;
          p_str = (char *)&__str;
          if (!v45)
            goto LABEL_104;
        }
        memmove(p_str, (char *)v30 + 20, v45);
LABEL_104:
        p_str[v31 - 20] = 0;
LABEL_87:
        std::string::push_back(&__str, 45);
        v46 = *((char *)v29 + 63);
        if (v46 >= 0)
          v47 = (const std::string::value_type *)(v29 + 5);
        else
          v47 = (const std::string::value_type *)v29[5];
        if (v46 >= 0)
          v48 = *((unsigned __int8 *)v29 + 63);
        else
          v48 = v29[6];
        std::string::append(&__str, v47, v48);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v149, &__str, (uint64_t)&__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_51;
      }
    }
    else if (v15)
    {
      goto LABEL_16;
    }
    v139[23] = 9;
    strcpy(v139, "(unknown)");
    goto LABEL_43;
  }
  QueryE5Platforms = (Espresso::AOT::Utils *)Espresso::AOT::AOTCompilerOptions::GetQueryE5Platforms((Espresso::AOT::AOTCompilerOptions *)v142);
  if (!(_DWORD)QueryE5Platforms)
  {
    QueryE5PlatformFamilies = (Espresso::AOT::Utils *)Espresso::AOT::AOTCompilerOptions::GetQueryE5PlatformFamilies((Espresso::AOT::AOTCompilerOptions *)v142);
    if ((_DWORD)QueryE5PlatformFamilies)
    {
      Espresso::AOT::Utils::GetSupportedPlatformFamiliesStr(QueryE5PlatformFamilies);
      if ((v141.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v141;
      else
        v18 = (std::__fs::filesystem::path *)v141.__pn_.__r_.__value_.__r.__words[0];
      if ((v141.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v141.__pn_.__r_.__value_.__r.__words[2]);
      else
        size = v141.__pn_.__r_.__value_.__l.__size_;
      goto LABEL_35;
    }
    v139[23] = 12;
    strcpy(v139, "experimental");
    Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)v142, (uint64_t)v139, (uint64_t)&v141);
    if ((v139[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v139);
      v23 = (uint64_t **)a1[2];
      if (v23)
        goto LABEL_138;
    }
    else
    {
      v23 = (uint64_t **)a1[2];
      if (v23)
      {
LABEL_138:
        while (1)
        {
          v65 = (uint64_t)(v23 + 2);
          v66 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(&v141, (uint64_t)(v23 + 2));
          if (v66)
          {
            if (*((_DWORD *)v66 + 16))
              std::__throw_bad_variant_access[abi:ne180100]();
            if (*((_BYTE *)v66 + 40))
              break;
          }
          v23 = (uint64_t **)*v23;
          if (!v23)
            goto LABEL_135;
        }
        if (*((char *)v23 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&v149, (const std::string::value_type *)v23[2], (std::string::size_type)v23[3]);
LABEL_143:
          v68 = (void **)v141.__pn_.__r_.__value_.__r.__words[2];
          if (v141.__pn_.__r_.__value_.__r.__words[2])
          {
            do
            {
              v69 = (void **)*v68;
              v70 = *((unsigned int *)v68 + 16);
              if ((_DWORD)v70 != -1)
                ((void (*)(_BYTE *, void **))*(&off_1E2DD1570 + v70))(v139, v68 + 5);
              *((_DWORD *)v68 + 16) = -1;
              if (*((char *)v68 + 39) < 0)
                operator delete(v68[2]);
              operator delete(v68);
              v68 = v69;
            }
            while (v69);
          }
          v71 = (void *)v141.__pn_.__r_.__value_.__r.__words[0];
          v141.__pn_.__r_.__value_.__r.__words[0] = 0;
          if (v71)
            operator delete(v71);
          v72 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a1, (uint64_t)&v149);
          if (v72)
          {
            v73 = v72[5];
            if (v73)
            {
              memset(v139, 0, sizeof(v139));
              v140 = 1065353216;
              Espresso::AOT::GetToolchainInfo((uint64_t)&v141);
              std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign((uint64_t)v139, (uint64_t *)&v141);
              v74 = (char *)v141.__pn_.__r_.__value_.__r.__words[2];
              if (!v141.__pn_.__r_.__value_.__r.__words[2])
              {
LABEL_161:
                v76 = (void *)v141.__pn_.__r_.__value_.__r.__words[0];
                v141.__pn_.__r_.__value_.__r.__words[0] = 0;
                if (v76)
                  operator delete(v76);
                v77 = *a3;
                v78 = strlen(*a3);
                if (v78 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v79 = v78;
                if (v78 >= 0x17)
                {
                  v96 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v78 | 7) != 0x17)
                    v96 = v78 | 7;
                  v97 = v96 + 1;
                  v80 = operator new(v96 + 1);
                  __str.__r_.__value_.__l.__size_ = v79;
                  __str.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
                }
                else
                {
                  *((_BYTE *)&__str.__r_.__value_.__s + 23) = v78;
                  v80 = &__str;
                  if (!v78)
                  {
LABEL_194:
                    v80[v79] = 0;
                    if (a2 >= 2)
                    {
                      v98 = a2 - 1;
                      v99 = a3 + 1;
                      do
                      {
                        std::string::append(&__str, " ");
                        std::string::append(&__str, *v99++);
                        --v98;
                      }
                      while (v98);
                    }
                    *((_BYTE *)&v141.__pn_.__r_.__value_.__s + 23) = 19;
                    strcpy((char *)&v141, "compilation-command");
                    v134 = &v141;
                    v100 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v139, (uint64_t)&v141, (uint64_t)&std::piecewise_construct, (__int128 **)&v134);
                    std::string::operator=((std::string *)(v100 + 40), &__str);
                    if (SHIBYTE(v141.__pn_.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v141.__pn_.__r_.__value_.__l.__data_);
                    Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v138, (const Espresso::AOT::AOTCompilerOptions *)v142);
                    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v136, (uint64_t)v139);
                    (*(void (**)(std::__fs::filesystem::path *__return_ptr, uint64_t, _BYTE *, void **))(*(_QWORD *)v73 + 24))(&v141, v73, v138, v136);
                    v101 = v141.__pn_.__r_.__value_.__r.__words[0];
                    v141.__pn_.__r_.__value_.__r.__words[0] = 0;
                    v102 = v137;
                    if (!v137)
                    {
LABEL_206:
                      v104 = v136[0];
                      v136[0] = 0;
                      if (v104)
                        operator delete(v104);
                      Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v138);
                      (*(void (**)(void **__return_ptr, std::string::size_type))(*(_QWORD *)v101 + 24))(&v134, v101);
                      v105 = (std::string *)v134;
                      v106 = v135;
                      if (v134 == v135)
                      {
LABEL_251:
                        if (v105)
                        {
                          v128 = v135;
                          v129 = v105;
                          if (v135 != v105)
                          {
                            do
                            {
                              if (SHIBYTE(v128[-1].__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v128[-1].__r_.__value_.__l.__data_);
                              --v128;
                            }
                            while (v128 != v105);
                            v129 = v134;
                          }
                          v135 = v105;
                          operator delete(v129);
                        }
                        (*(void (**)(std::string::size_type))(*(_QWORD *)v101 + 16))(v101);
                        v62 = 0;
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__str.__r_.__value_.__l.__data_);
                        v130 = *(char **)&v139[16];
                        if (!*(_QWORD *)&v139[16])
                        {
LABEL_268:
                          v132 = *(void **)v139;
                          *(_QWORD *)v139 = 0;
                          if (v132)
                            operator delete(v132);
                          if (v101)
                            (*(void (**)(std::string::size_type))(*(_QWORD *)v101 + 8))(v101);
                          goto LABEL_272;
                        }
                        while (1)
                        {
                          v131 = *(char **)v130;
                          if (v130[63] < 0)
                          {
                            operator delete(*((void **)v130 + 5));
                            if ((v130[39] & 0x80000000) == 0)
                              goto LABEL_264;
LABEL_267:
                            operator delete(*((void **)v130 + 2));
                            operator delete(v130);
                            v130 = v131;
                            if (!v131)
                              goto LABEL_268;
                          }
                          else
                          {
                            if (v130[39] < 0)
                              goto LABEL_267;
LABEL_264:
                            operator delete(v130);
                            v130 = v131;
                            if (!v131)
                              goto LABEL_268;
                          }
                        }
                      }
                      while (1)
                      {
                        memset(&v141, 0, sizeof(v141));
                        v107 = HIBYTE(v105->__r_.__value_.__r.__words[2]);
                        if ((v107 & 0x80u) == 0)
                          v108 = v105;
                        else
                          v108 = (std::string *)v105->__r_.__value_.__r.__words[0];
                        if ((v107 & 0x80u) != 0)
                          v107 = v105->__r_.__value_.__l.__size_;
                        std::string::append[abi:ne180100]<char const*,0>(&v141.__pn_, v108, (std::string *)((char *)v108 + v107));
                        std::__fs::filesystem::__status(&v141, 0);
                        if (v153 != 2)
                          goto LABEL_210;
                        MEMORY[0x19401CB5C](&v153, &v141, 0, 0);
                        v109 = v153;
                        v110 = v154;
                        if (v154)
                        {
                          p_shared_owners = (unint64_t *)&v154->__shared_owners_;
                          do
                            v112 = __ldxr(p_shared_owners);
                          while (__stxr(v112 + 1, p_shared_owners));
                          v113 = v154;
                          v152.__imp_.__ptr_ = v109;
                          v152.__imp_.__cntrl_ = v110;
                          if (v154)
                          {
                            v114 = (unint64_t *)&v154->__shared_owners_;
                            do
                              v115 = __ldxr(v114);
                            while (__stxr(v115 + 1, v114));
                            v150 = 0;
                            v151 = 0;
                            do
                              v116 = __ldaxr(v114);
                            while (__stlxr(v116 - 1, v114));
                            if (!v116)
                            {
                              ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                              std::__shared_weak_count::__release_weak(v113);
                            }
                            goto LABEL_232;
                          }
                        }
                        else
                        {
                          v152.__imp_.__ptr_ = v153;
                          v152.__imp_.__cntrl_ = 0;
                        }
                        v150 = 0;
                        v151 = 0;
LABEL_232:
                        v117 = v150;
                        while (v152.__imp_.__ptr_ != v117)
                        {
                          v118 = std::__fs::filesystem::directory_iterator::__dereference(&v152);
                          std::__fs::filesystem::__remove_all(&v118->__p_, 0);
                          std::__fs::filesystem::directory_iterator::__increment(&v152, 0);
                        }
                        v119 = v151;
                        if (v151)
                        {
                          v120 = (unint64_t *)&v151->__shared_owners_;
                          do
                            v121 = __ldaxr(v120);
                          while (__stlxr(v121 - 1, v120));
                          if (!v121)
                          {
                            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                            std::__shared_weak_count::__release_weak(v119);
                          }
                        }
                        cntrl = v152.__imp_.__cntrl_;
                        if (v152.__imp_.__cntrl_)
                        {
                          v123 = &v152.__imp_.__cntrl_->__shared_owners_;
                          do
                            v124 = __ldaxr((unint64_t *)v123);
                          while (__stlxr(v124 - 1, (unint64_t *)v123));
                          if (!v124)
                          {
                            ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
                            std::__shared_weak_count::__release_weak(cntrl);
                          }
                        }
                        v125 = v154;
                        if (v154)
                        {
                          v126 = (unint64_t *)&v154->__shared_owners_;
                          do
                            v127 = __ldaxr(v126);
                          while (__stlxr(v127 - 1, v126));
                          if (!v127)
                          {
                            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                            std::__shared_weak_count::__release_weak(v125);
                          }
                        }
LABEL_210:
                        if (SHIBYTE(v141.__pn_.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(v141.__pn_.__r_.__value_.__l.__data_);
                          if (++v105 == v106)
                          {
LABEL_250:
                            v105 = (std::string *)v134;
                            goto LABEL_251;
                          }
                        }
                        else if (++v105 == v106)
                        {
                          goto LABEL_250;
                        }
                      }
                    }
                    while (1)
                    {
                      v103 = *(char **)v102;
                      if (v102[63] < 0)
                      {
                        operator delete(*((void **)v102 + 5));
                        if ((v102[39] & 0x80000000) == 0)
                          goto LABEL_202;
LABEL_205:
                        operator delete(*((void **)v102 + 2));
                        operator delete(v102);
                        v102 = v103;
                        if (!v103)
                          goto LABEL_206;
                      }
                      else
                      {
                        if (v102[39] < 0)
                          goto LABEL_205;
LABEL_202:
                        operator delete(v102);
                        v102 = v103;
                        if (!v103)
                          goto LABEL_206;
                      }
                    }
                  }
                }
                memmove(v80, v77, v79);
                goto LABEL_194;
              }
              while (1)
              {
                v75 = *(char **)v74;
                if (v74[63] < 0)
                {
                  operator delete(*((void **)v74 + 5));
                  if ((v74[39] & 0x80000000) == 0)
                    goto LABEL_157;
LABEL_160:
                  operator delete(*((void **)v74 + 2));
                  operator delete(v74);
                  v74 = v75;
                  if (!v75)
                    goto LABEL_161;
                }
                else
                {
                  if (v74[39] < 0)
                    goto LABEL_160;
LABEL_157:
                  operator delete(v74);
                  v74 = v75;
                  if (!v75)
                    goto LABEL_161;
                }
              }
            }
          }
          else
          {
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)"Unknown backend ", 16);
            if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v82 = &v149;
            else
              v82 = (std::string *)v149.__r_.__value_.__r.__words[0];
            if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v83 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
            else
              v83 = v149.__r_.__value_.__l.__size_;
            v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v82, v83);
            v141.__pn_.__r_.__value_.__s.__data_[0] = 10;
            v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)&v141, 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"Available backends:", 19);
            v86 = (uint64_t ***)a1[2];
            if (v86)
            {
              v141.__pn_.__r_.__value_.__s.__data_[0] = 32;
              v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)&v141, 1);
              v88 = *((char *)v86 + 39);
              v89 = v88 >= 0 ? (uint64_t)(v86 + 2) : (uint64_t)v86[2];
              v90 = v88 >= 0 ? *((unsigned __int8 *)v86 + 39) : (uint64_t)v86[3];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, v89, v90);
              for (i = *v86; i; i = (uint64_t **)*i)
              {
                v141.__pn_.__r_.__value_.__s.__data_[0] = 44;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)&v141, 1);
                v141.__pn_.__r_.__value_.__s.__data_[0] = 32;
                v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)&v141, 1);
                v93 = *((char *)i + 39);
                if (v93 >= 0)
                  v94 = (uint64_t)(i + 2);
                else
                  v94 = (uint64_t)i[2];
                if (v93 >= 0)
                  v95 = *((unsigned __int8 *)i + 39);
                else
                  v95 = (uint64_t)i[3];
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, v94, v95);
              }
            }
            v141.__pn_.__r_.__value_.__s.__data_[0] = 10;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)&v141, 1);
          }
          v62 = 1;
LABEL_272:
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v149.__r_.__value_.__l.__data_);
          goto LABEL_133;
        }
LABEL_142:
        v67 = *(_OWORD *)v65;
        v149.__r_.__value_.__r.__words[2] = *(_QWORD *)(v65 + 16);
        *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v67;
        goto LABEL_143;
      }
    }
LABEL_135:
    Backend = Espresso::AOT::AOTCompilerOptions::GetBackend((Espresso::AOT::AOTCompilerOptions *)v142);
    v65 = Backend;
    if (*(char *)(Backend + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v149, *(const std::string::value_type **)Backend, *(_QWORD *)(Backend + 8));
      goto LABEL_143;
    }
    goto LABEL_142;
  }
  Espresso::AOT::Utils::GetSupportedPlatformsStr(QueryE5Platforms);
  if ((v141.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v141;
  else
    v18 = (std::__fs::filesystem::path *)v141.__pn_.__r_.__value_.__r.__words[0];
  if ((v141.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v141.__pn_.__r_.__value_.__r.__words[2]);
  else
    size = v141.__pn_.__r_.__value_.__l.__size_;
LABEL_35:
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)v18, size);
  v139[0] = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v139, 1);
  if (SHIBYTE(v141.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    v22 = (void *)v141.__pn_.__r_.__value_.__r.__words[0];
    goto LABEL_131;
  }
LABEL_132:
  v62 = 0;
LABEL_133:
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v142);
  Espresso::AOT::AOTCompilerOptionsManager::~AOTCompilerOptionsManager((cxxopts::Options **)&v147);
  return v62;
}

void sub_19113BB00(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  void *v63;
  _QWORD *v64;
  const char *v65;
  size_t v66;
  _QWORD *v67;

  if (a2 == 1)
  {
    v63 = __cxa_begin_catch(a1);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Compilation error: ", 19);
    v65 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v63 + 16))(v63);
    v66 = strlen(v65);
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
    a10 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)&a10, 1);
    __cxa_end_catch();
    if (*(char *)(v61 - 185) < 0)
      JUMPOUT(0x19113BA24);
    JUMPOUT(0x19113BA2CLL);
  }
  if (*(char *)(v61 - 185) < 0)
  {
    operator delete(*(void **)(v61 - 208));
    std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a35);
    if (v59)
      goto LABEL_4;
  }
  else
  {
    std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a35);
    if (v59)
    {
LABEL_4:
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
      if ((*(char *)(v61 - 153) & 0x80000000) == 0)
      {
LABEL_9:
        Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a59);
        Espresso::AOT::AOTCompilerOptionsManager::~AOTCompilerOptionsManager((cxxopts::Options **)(v61 - 216));
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(*(void **)(v61 - 176));
      goto LABEL_9;
    }
  }
  if ((*(char *)(v61 - 153) & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

void sub_19113C128()
{
  JUMPOUT(0x19113BF90);
}

void sub_19113C130()
{
  __cxa_end_catch();
  JUMPOUT(0x19113BF90);
}

uint64_t Espresso::AOT::AOTCompilerDriver::Run(_QWORD *a1, uint64_t a2, std::string **a3, _QWORD *a4)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  std::string::size_type v12;
  std::string::size_type v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  std::string::size_type v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  const char **v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  _QWORD *v37;
  _QWORD *v38;
  void *__p;
  int v40[2];
  std::string v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v41 = *(std::string *)a2;
  std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)&v41, 1uLL);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&__p, *(uint64_t *)v40, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  memset(&v41, 0, sizeof(v41));
  v8 = __p;
  v7 = *(_QWORD *)v40;
  if (*(void **)v40 == __p)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v40 - (_QWORD)__p) >> 3);
    if (v9 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(0x5555555555555558 * ((uint64_t)(*(_QWORD *)v40 - (_QWORD)__p) >> 3));
    v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    v41.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
    v41.__r_.__value_.__r.__words[2] = (std::string::size_type)&v10[8 * v9];
    if ((_QWORD *)v7 != v8)
    {
      v37 = a1;
      v38 = a4;
      while (1)
      {
        while (1)
        {
          v11 = v8;
          if ((*((char *)v8 + 23) & 0x80000000) == 0)
            break;
          v11 = (_QWORD *)*v8;
          v12 = v41.__r_.__value_.__r.__words[2];
          if ((unint64_t)v10 >= v41.__r_.__value_.__r.__words[2])
            goto LABEL_15;
LABEL_10:
          *(_QWORD *)v10 = v11;
          v10 += 8;
          v41.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
          v8 += 3;
          if (v8 == (_QWORD *)v7)
            goto LABEL_44;
        }
        v12 = v41.__r_.__value_.__r.__words[2];
        if ((unint64_t)v10 < v41.__r_.__value_.__r.__words[2])
          goto LABEL_10;
LABEL_15:
        v13 = v41.__r_.__value_.__r.__words[0];
        v14 = &v10[-v41.__r_.__value_.__r.__words[0]];
        v15 = (uint64_t)&v10[-v41.__r_.__value_.__r.__words[0]] >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v17 = v12 - v41.__r_.__value_.__r.__words[0];
        if (v17 >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v19 = operator new(8 * v18);
          v20 = &v19[8 * v15];
          *v20 = v11;
          v21 = (std::string::size_type)(v20 + 1);
          if (v10 != (char *)v13)
          {
LABEL_29:
            v22 = (unint64_t)&v10[-v13 - 8];
            if (v22 < 0x168)
            {
              v23 = v10;
              goto LABEL_31;
            }
            if (&v14[(_QWORD)v19 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v14[(_QWORD)v19 - 8])
            {
              v23 = v10;
              goto LABEL_31;
            }
            if (&v10[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v10 - 8)
            {
              v23 = v10;
              goto LABEL_31;
            }
            if ((unint64_t)(v10 - v19 - (_QWORD)v14) < 0x20)
            {
              v23 = v10;
              goto LABEL_31;
            }
            v25 = (v22 >> 3) + 1;
            v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
            v23 = &v10[-v26];
            v20 = (_QWORD *)((char *)v20 - v26);
            v27 = &v19[8 * v15 - 16];
            v28 = v10 - 16;
            v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v30 = *(_OWORD *)v28;
              *(v27 - 1) = *((_OWORD *)v28 - 1);
              *v27 = v30;
              v27 -= 2;
              v28 -= 32;
              v29 -= 4;
            }
            while (v29);
            if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_31:
                v24 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *--v20 = v24;
              }
              while (v23 != (char *)v13);
            }
            v10 = (char *)v41.__r_.__value_.__r.__words[0];
            v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
            v41.__r_.__value_.__l.__size_ = v21;
            v41.__r_.__value_.__r.__words[2] = (std::string::size_type)&v19[8 * v18];
            if (!v10)
              goto LABEL_26;
LABEL_25:
            operator delete(v10);
            goto LABEL_26;
          }
        }
        else
        {
          v19 = 0;
          v20 = (_QWORD *)(8 * v15);
          *(_QWORD *)(8 * v15) = v11;
          v21 = 8 * v15 + 8;
          if (v10 != (char *)v13)
            goto LABEL_29;
        }
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
        v41.__r_.__value_.__l.__size_ = v21;
        v41.__r_.__value_.__r.__words[2] = (std::string::size_type)&v19[8 * v18];
        if (v10)
          goto LABEL_25;
LABEL_26:
        v10 = (char *)v21;
        v41.__r_.__value_.__l.__size_ = v21;
        v8 += 3;
        if (v8 == (_QWORD *)v7)
        {
LABEL_44:
          v31 = (const char **)v41.__r_.__value_.__r.__words[0];
          a1 = v37;
          a4 = v38;
          goto LABEL_47;
        }
      }
    }
  }
  v31 = (const char **)v10;
LABEL_47:
  v32 = Espresso::AOT::AOTCompilerDriver::Run(a1, (unint64_t)(v10 - (char *)v31) >> 3, v31, a4);
  if (v41.__r_.__value_.__r.__words[0])
  {
    v41.__r_.__value_.__l.__size_ = v41.__r_.__value_.__r.__words[0];
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  v33 = __p;
  if (__p)
  {
    v34 = *(_QWORD *)v40;
    v35 = __p;
    if (*(void **)v40 != __p)
    {
      do
      {
        if (*(char *)(v34 - 1) < 0)
          operator delete(*(void **)(v34 - 24));
        v34 -= 24;
      }
      while ((void *)v34 != v33);
      v35 = __p;
    }
    *(_QWORD *)v40 = v33;
    operator delete(v35);
  }
  return v32;
}

void sub_19113C4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::AOTCompilerDriver::GetBackendRegistrySize(Espresso::AOT::AOTCompilerDriver *this)
{
  return *((_QWORD *)this + 3);
}

void Espresso::AOT::AOTCompilerDriver::GetRegisteredBackendNames(Espresso::AOT::AOTCompilerDriver *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t *v4;
  std::string *end;
  __int128 v6;
  __int128 *v7;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a2, *((_QWORD *)this + 3));
  v4 = (uint64_t *)*((_QWORD *)this + 2);
  if (v4)
  {
    end = a2->__end_;
    do
    {
      while (1)
      {
        v7 = (__int128 *)(v4 + 2);
        if (end < a2->__end_cap_.__value_)
          break;
        end = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)v7);
        a2->__end_ = end;
        v4 = (uint64_t *)*v4;
        if (!v4)
          return;
      }
      if (*((char *)v4 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v4[2], v4[3]);
      }
      else
      {
        v6 = *v7;
        end->__r_.__value_.__r.__words[2] = v4[4];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v6;
      }
      a2->__end_ = ++end;
      a2->__end_ = end;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
}

void sub_19113C5F4(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19113C608(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  std::vector<std::string>::~vector[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void sub_19113C620(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>>>::__emplace_unique_key_args<std::string,std::string,std::unique_ptr<Espresso::AOT::AOTCompilerBackendFactory>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  void **v15;
  unsigned __int8 *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = *((_QWORD *)v16 + 1);
            if (v24 == v12)
            {
              v25 = v16[39];
              if ((v25 & 0x80u) == 0)
                v26 = v16[39];
              else
                v26 = *((_QWORD *)v16 + 3);
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 16);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, *((_QWORD *)v16 + 3)))
                    return v16;
                }
                else
                {
                  if (!v16[39])
                    return v16;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return v16;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = *(unsigned __int8 **)v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = *((_QWORD *)v16 + 1);
          if (v19 == v12)
          {
            v20 = v16[39];
            if ((v20 & 0x80u) == 0)
              v21 = v16[39];
            else
              v21 = *((_QWORD *)v16 + 3);
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 16);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, *((_QWORD *)v16 + 3)))
                  return v16;
              }
              else
              {
                if (!v16[39])
                  return v16;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v29 = (_QWORD *)(a1 + 16);
  v16 = (unsigned __int8 *)operator new(0x30uLL);
  v47[0] = v16;
  v47[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v12;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  v30 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v31 = *a4;
  *a4 = 0;
  *((_QWORD *)v16 + 4) = v30;
  *((_QWORD *)v16 + 5) = v31;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (v13 && (float)(v33 * (float)v13) >= v32)
  {
    v34 = *(_QWORD *)a1;
    v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v35)
    {
LABEL_54:
      *(_QWORD *)v16 = *v35;
LABEL_89:
      *v35 = v16;
      goto LABEL_90;
    }
  }
  else
  {
    v36 = 1;
    if (v13 >= 3)
      v36 = (v13 & (v13 - 1)) != 0;
    v37 = v36 | (2 * v13);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v44 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v34 = *(_QWORD *)a1;
        v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        if (v35)
          goto LABEL_54;
      }
      else
      {
        v4 = v12;
        v34 = *(_QWORD *)a1;
        v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        if (v35)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v44 & v12;
      v34 = *(_QWORD *)a1;
      v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v12));
      if (v35)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v16 = *v29;
  *v29 = v16;
  *(_QWORD *)(v34 + 8 * v4) = v29;
  if (*(_QWORD *)v16)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v45 >= v13)
        v45 %= v13;
    }
    else
    {
      v45 &= v13 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_19113CA50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::AOT::MILCompilerForMPSGraph::MILCompilerForMPSGraph(_QWORD *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  void *v16[2];
  int v17;
  _BYTE v18[136];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  v6 = *(void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = *(_QWORD **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((_QWORD *)v6 + v10) = v16;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0)
LABEL_16:
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *a1 = &off_1E2DA07E8;
  Espresso::AOT::MILCompilerForMPSGraph::ExtractOptions(a2, (uint64_t)(a1 + 33));
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  return a1;
}

void sub_19113CB9C(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler *v1;

  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_19113CBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForMPSGraph::ExtractOptions(Espresso::AOT::MILCompilerForMPSGraph *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Output;
  __int128 v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  void *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  void *v25;
  void **v26;
  void **v27;
  uint64_t v28;
  void *v29;
  std::logic_error *exception;
  void *v31[3];
  void *v32[2];
  void **v33;
  void *__p[5];
  _QWORD v35[2];
  void **v36;

  Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)Output, *(_QWORD *)(Output + 8));
  }
  else
  {
    v6 = *(_OWORD *)Output;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(Output + 16);
    *(_OWORD *)a2 = v6;
  }
  *(_BYTE *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 25) = 0;
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "experimental");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)__p, (uint64_t)v35);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  strcpy((char *)__p, "enable-mpsgraphpackage");
  HIBYTE(__p[2]) = 22;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v35, (uint64_t)__p);
  v8 = v7;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!v8)
      goto LABEL_12;
  }
  else if (!v7)
  {
    goto LABEL_12;
  }
  if (*((_DWORD *)v8 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_BYTE *)(a2 + 24) = *((_BYTE *)v8 + 40);
LABEL_12:
  HIBYTE(v33) = 2;
  strcpy((char *)v32, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)v32, (uint64_t)__p);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
  HIBYTE(v33) = 12;
  strcpy((char *)v32, "dump-ir-only");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v32);
  v10 = v9;
  if (SHIBYTE(v33) < 0)
  {
    operator delete(v32[0]);
    if (!v10)
      goto LABEL_20;
  }
  else if (!v9)
  {
    goto LABEL_20;
  }
  if (*((_DWORD *)v10 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_BYTE *)(a2 + 25) = *((_BYTE *)v10 + 40);
LABEL_20:
  HIBYTE(v31[2]) = 8;
  strcpy((char *)v31, "mpsgraph");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)v31, (uint64_t)v32);
  if (SHIBYTE(v31[2]) < 0)
    operator delete(v31[0]);
  strcpy((char *)v31, "disable-type-inference");
  HIBYTE(v31[2]) = 22;
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v32, (uint64_t)v31);
  v12 = v11;
  if (SHIBYTE(v31[2]) < 0)
  {
    operator delete(v31[0]);
    if (!v12)
      goto LABEL_28;
  }
  else if (!v11)
  {
    goto LABEL_28;
  }
  if (*((_DWORD *)v12 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_BYTE *)(a2 + 26) = *((_BYTE *)v12 + 40);
LABEL_28:
  HIBYTE(v31[2]) = 20;
  strcpy((char *)v31, "enable-gpu-quant-ops");
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v32, (uint64_t)v31);
  v14 = v13;
  if (SHIBYTE(v31[2]) < 0)
  {
    operator delete(v31[0]);
    if (!v14)
      goto LABEL_34;
  }
  else if (!v13)
  {
    goto LABEL_34;
  }
  if (*((_DWORD *)v14 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_BYTE *)(a2 + 27) = *((_BYTE *)v14 + 40);
LABEL_34:
  strcpy((char *)v31, "enable-parallel-encode");
  HIBYTE(v31[2]) = 22;
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v32, (uint64_t)v31);
  v16 = v15;
  if (SHIBYTE(v31[2]) < 0)
  {
    operator delete(v31[0]);
    if (!v16)
      goto LABEL_40;
  }
  else if (!v15)
  {
    goto LABEL_40;
  }
  if (*((_DWORD *)v16 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_BYTE *)(a2 + 28) = *((_BYTE *)v16 + 40);
LABEL_40:
  v17 = *(unsigned __int8 *)(a2 + 23);
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a2 + 8);
  if (!v17)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "--output is required and must be non-empty.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v18 = v33;
  if (v33)
  {
    do
    {
      v19 = (void **)*v18;
      v20 = *((unsigned int *)v18 + 16);
      if ((_DWORD)v20 != -1)
        ((void (*)(void **, void **))*(&off_1E2DD1590 + v20))(v31, v18 + 5);
      *((_DWORD *)v18 + 16) = -1;
      if (*((char *)v18 + 39) < 0)
        operator delete(v18[2]);
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
  }
  v21 = v32[0];
  v32[0] = 0;
  if (v21)
    operator delete(v21);
  v22 = (void **)__p[2];
  if (__p[2])
  {
    do
    {
      v23 = (void **)*v22;
      v24 = *((unsigned int *)v22 + 16);
      if ((_DWORD)v24 != -1)
        ((void (*)(void **, void **))*(&off_1E2DD1590 + v24))(v32, v22 + 5);
      *((_DWORD *)v22 + 16) = -1;
      if (*((char *)v22 + 39) < 0)
        operator delete(v22[2]);
      operator delete(v22);
      v22 = v23;
    }
    while (v23);
  }
  v25 = __p[0];
  __p[0] = 0;
  if (v25)
    operator delete(v25);
  v26 = v36;
  if (v36)
  {
    do
    {
      v27 = (void **)*v26;
      v28 = *((unsigned int *)v26 + 16);
      if ((_DWORD)v28 != -1)
        ((void (*)(void **, void **))*(&off_1E2DD1590 + v28))(__p, v26 + 5);
      *((_DWORD *)v26 + 16) = -1;
      if (*((char *)v26 + 39) < 0)
        operator delete(v26[2]);
      operator delete(v26);
      v26 = v27;
    }
    while (v27);
  }
  v29 = (void *)v35[0];
  v35[0] = 0;
  if (v29)
    operator delete(v29);
}

void sub_19113D090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void *v29;
  uint64_t v30;

  __cxa_free_exception(v29);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a15);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a23);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](v30 - 72);
  if (*(char *)(v28 + 23) < 0)
  {
    operator delete(*(void **)v28);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForMPSGraph::Options::AssertValid(uint64_t this)
{
  std::logic_error *exception;

  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(this + 23))
      return this;
LABEL_5:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (!*(_QWORD *)(this + 8))
    goto LABEL_5;
  return this;
}

void sub_19113D20C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForMPSGraph::Run(uint64_t a1, uint64_t a2, std::string::size_type *a3)
{
  std::string::size_type v6;
  char *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  std::string *v16;
  uint64_t v17;
  std::string::size_type v18;
  char v19;
  std::string *v20;
  uint64_t v21;
  uint64_t Function;
  uint64_t v23;
  const char *v24;
  _QWORD *v25;
  uint64_t v26;
  MIL::IRMemoryLayoutValueType *v27;
  MIL::IRTensorBufferValueType *v28;
  uint64_t Shape;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  void *v33;
  NSObject *v34;
  void *v35;
  _QWORD *BuildInfo;
  uint64_t *v37;
  _QWORD *v38;
  int v39;
  std::__fs::filesystem::path::__string_view v40;
  std::string *v41;
  std::basic_string_view<_CharT, _Traits>::size_type v42;
  std::basic_string_view<_CharT, _Traits>::size_type v43;
  std::string::value_type *v44;
  std::string::size_type v45;
  char v46;
  uint64_t v47;
  unsigned __int8 v48;
  int v49;
  void **v50;
  uint64_t v51;
  void **v52;
  void **v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  _BOOL4 v58;
  const void *v59;
  void *v60;
  int v61;
  size_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  std::string::size_type v68;
  std::__fs::filesystem::path *v69;
  std::__fs::filesystem::path::__string_view v70;
  std::string *v71;
  std::basic_string_view<_CharT, _Traits>::size_type v72;
  std::basic_string_view<_CharT, _Traits>::size_type v73;
  void *v74;
  std::string *v75;
  void *v76;
  void *v77;
  std::runtime_error *v78;
  std::logic_error *exception;
  void *v80;
  std::string v81;
  std::string v82;
  std::string pn;
  std::__fs::filesystem::path __base;
  std::__fs::filesystem::path v85;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v87;
  _DWORD v88[2];
  std::__fs::filesystem::path v89;
  std::__fs::filesystem::path v90;
  uint64_t v91;
  _QWORD v92[2];
  void **v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  std::string __dst[2];

  v94 = 0x2B2381A000000000;
  v95 = 0u;
  v96 = 0u;
  kdebug_trace();
  v6 = *a3;
  if (a3[1] - *a3 != 24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one entry point is supported.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  Espresso::AOT::GetCallees(a2, (uint64_t)v92);
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string::size_type))(*(_QWORD *)a2 + 64))(__dst, a2, v6);
  v90.__pn_.__r_.__value_.__r.__words[0] = v6;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v92, (unsigned __int8 *)v6, (uint64_t)&std::piecewise_construct, (__int128 **)&v90);
  v8 = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
  *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = 0uLL;
  v9 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
  *(_OWORD *)(v7 + 40) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  size = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
  if (__dst[0].__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  Espresso::AOT::MakeIRProgramWithFunctions((uint64_t)v92, 0, &v91);
  memset(&v90, 0, sizeof(v90));
  v15 = *(_BYTE *)(a1 + 287);
  if (v15 >= 0)
    v16 = (std::string *)(a1 + 264);
  else
    v16 = *(std::string **)(a1 + 264);
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 287);
  else
    v17 = *(_QWORD *)(a1 + 272);
  std::string::append[abi:ne180100]<char const*,0>(&v90.__pn_, v16, (std::string *)((char *)v16 + v17));
  v18 = *a3;
  if (a3[1] == *a3)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  memset(__dst, 0, 24);
  v19 = *(_BYTE *)(v18 + 23);
  if (v19 >= 0)
    v20 = (std::string *)v18;
  else
    v20 = *(std::string **)v18;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(v18 + 23);
  else
    v21 = *(_QWORD *)(v18 + 8);
  std::string::append[abi:ne180100]<char const*,0>(__dst, v20, (std::string *)((char *)v20 + v21));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)__dst, (uint64_t)&v90, &v89);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[0].__r_.__value_.__l.__data_);
  std::__fs::filesystem::__create_directories(&v89, 0);
  if (!*(_BYTE *)(a1 + 288))
    goto LABEL_46;
  Function = MIL::IRProgram::GetFunction();
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)Function + 160))(__dst, Function);
  v25 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 88))(v23);
  if (v25[1] == *v25)
  {
LABEL_119:
    v32 = 1;
    v33 = (void *)__dst[0].__r_.__value_.__r.__words[0];
    if (__dst[0].__r_.__value_.__r.__words[0])
    {
LABEL_38:
      __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v33;
      operator delete(v33);
    }
  }
  else
  {
    v26 = 0;
    while (1)
    {
      v27 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(*(MIL::IRValueType **)(__dst[0].__r_.__value_.__r.__words[0] + 8 * v26));
      if (v27)
      {
        v28 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v27);
        if (v28)
        {
          Shape = MIL::IRTensorBufferValueType::GetShape(v28);
          v30 = *(_QWORD **)Shape;
          v31 = *(_QWORD **)(Shape + 8);
          if (*(_QWORD **)Shape != v31)
            break;
        }
      }
LABEL_30:
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25[1] - *v25) >> 3) <= ++v26)
        goto LABEL_119;
    }
    while (!(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v30 + 24))(*v30))
    {
      if (++v30 == v31)
        goto LABEL_30;
    }
    v32 = 0;
    v33 = (void *)__dst[0].__r_.__value_.__r.__words[0];
    if (__dst[0].__r_.__value_.__r.__words[0])
      goto LABEL_38;
  }
  if (!v32)
  {
LABEL_46:
    *(_DWORD *)((char *)v88 + 3) = 0;
    v88[0] = 0;
    goto LABEL_47;
  }
  Espresso::espresso_os_log_subsystem(0, v24);
  v34 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
  {
    Espresso::AOT::MILCompilerForMPSGraph::Run(v34);

    *(_DWORD *)((char *)v88 + 3) = 0;
    v88[0] = 0;
    if (!*(_BYTE *)(a1 + 289))
    {
LABEL_42:
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      BuildInfo = (_QWORD *)Espresso::AOT::AOTCompilerBackend::GetBuildInfo((Espresso::AOT::AOTCompilerBackend *)a1);
      *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = 19;
      strcpy((char *)__dst, "built-for-profiling");
      v37 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(BuildInfo, (uint64_t)__dst);
      if (!v37)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v38 = v37 + 5;
      v39 = *((char *)v37 + 63);
      if (v39 < 0)
      {
        if (v37[6] != 4)
          goto LABEL_125;
        v38 = (_QWORD *)*v38;
      }
      else if (v39 != 4)
      {
LABEL_125:
        v58 = 0;
        if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_127;
        goto LABEL_126;
      }
      v58 = *(_DWORD *)v38 == 1702195828;
      if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_127;
LABEL_126:
      operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_127:
      if (v58)
        objc_msgSend(v35, "setObject:forKeyedSubscript:", &unk_1E2DEDA18, E5Common::kMpsgGraphEnableShaderProfilingStrKey[0]);
      v59 = (const void *)v6;
      if (*(char *)(v6 + 23) < 0)
        v59 = *(const void **)v6;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v60, E5Common::kMpsgGraphFunctionNameStrKey[0]);

      if (*(_BYTE *)(a1 + 290))
        objc_msgSend(v35, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], E5Common::kMpsgGraphDisableTypeInferenceStrKey[0]);
      if (*(_BYTE *)(a1 + 291))
        objc_msgSend(v35, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], E5Common::kMpsgGraphEnableGPUQuantOpsStrKey[0]);
      if (*(_BYTE *)(a1 + 292))
        objc_msgSend(v35, "setObject:forKeyedSubscript:", &unk_1E2DEDA30, E5Common::kMpsgGraphMaximumNumberOfEncodingThreadsStrKey[0]);
      E5Common::CreateMPSGraphExecutableFromMIL(v91, (uint64_t *)v6, v35);
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = *(char *)(v6 + 23);
      if (v61 >= 0)
        v62 = *(unsigned __int8 *)(v6 + 23);
      else
        v62 = *(_QWORD *)(v6 + 8);
      v63 = v62 + 16;
      if (v62 + 16 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v63 >= 0x17)
      {
        v65 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v63 | 7) != 0x17)
          v65 = v63 | 7;
        v66 = v65 + 1;
        v64 = operator new(v65 + 1);
        v87.__pn_.__r_.__value_.__l.__size_ = v62 + 16;
        v87.__pn_.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
        v87.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
      }
      else
      {
        memset(&v87, 0, sizeof(v87));
        v64 = &v87;
        *((_BYTE *)&v87.__pn_.__r_.__value_.__s + 23) = v62 + 16;
        if (!v62)
          goto LABEL_151;
      }
      if (v61 >= 0)
        v67 = (const void *)v6;
      else
        v67 = *(const void **)v6;
      memmove(v64, v67, v62);
LABEL_151:
      strcpy((char *)v64 + v62, ".mpsgraphpackage");
      v68 = HIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]);
      if ((v87.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v69 = &v87;
      else
        v69 = (std::__fs::filesystem::path *)v87.__pn_.__r_.__value_.__r.__words[0];
      memset(__dst, 0, 24);
      if ((v87.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v68 = v87.__pn_.__r_.__value_.__l.__size_;
      std::string::append[abi:ne180100]<char const*,0>(__dst, &v69->__pn_, (std::string *)((char *)&v69->__pn_ + v68));
      std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)__dst, (uint64_t)&v89, &__p);
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst[0].__r_.__value_.__l.__data_);
      v70 = std::__fs::filesystem::path::__parent_path(&v90);
      if (v70.__size_ > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v70.__size_ >= 0x17)
      {
        v72 = (v70.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v70.__size_ | 7) != 0x17)
          v72 = v70.__size_ | 7;
        v73 = v72 + 1;
        v71 = (std::string *)operator new(v72 + 1);
        __dst[0].__r_.__value_.__l.__size_ = v70.__size_;
        __dst[0].__r_.__value_.__r.__words[2] = v73 | 0x8000000000000000;
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
      }
      else
      {
        *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v70.__size_;
        v71 = __dst;
        if (!v70.__size_)
        {
LABEL_166:
          v71->__r_.__value_.__s.__data_[v70.__size_] = 0;
          __base = (std::__fs::filesystem::path)__dst[0];
          std::__fs::filesystem::path::lexically_relative(&v85, &__p, &__base);
          v45 = v85.__pn_.__r_.__value_.__l.__size_;
          v44 = (std::string::value_type *)v85.__pn_.__r_.__value_.__r.__words[0];
          v88[0] = v85.__pn_.__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v88 + 3) = *(_DWORD *)((char *)&v85.__pn_.__r_.__value_.__r.__words[2] + 3);
          v46 = HIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]);
          *((_BYTE *)&v85.__pn_.__r_.__value_.__s + 23) = 0;
          v85.__pn_.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__base.__pn_.__r_.__value_.__l.__data_);
          v74 = (void *)MEMORY[0x1E0CB3940];
          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(__dst, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
          else
            __dst[0] = __p.__pn_;
          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = __dst;
          else
            v75 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
          objc_msgSend(v74, "stringWithUTF8String:", v75);
          v76 = (void *)objc_claimAutoreleasedReturnValue();
          if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst[0].__r_.__value_.__l.__data_);
          objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v76);
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v80, "serializeToMPSGraphPackageAtURL:descriptor:", v77, 0);

          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__pn_.__r_.__value_.__l.__data_);
          if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v87.__pn_.__r_.__value_.__l.__data_);

            if (v46 < 0)
              goto LABEL_92;
          }
          else
          {

            if (v46 < 0)
              goto LABEL_92;
          }
LABEL_89:
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
          __dst[0].__r_.__value_.__l.__size_ = v45;
          LODWORD(__dst[0].__r_.__value_.__r.__words[2]) = v88[0];
          *(_DWORD *)((char *)&__dst[0].__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v88 + 3);
          *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v46;
          goto LABEL_93;
        }
      }
      memmove(v71, v70.__data_, v70.__size_);
      goto LABEL_166;
    }
  }
  else
  {

    *(_DWORD *)((char *)v88 + 3) = 0;
    v88[0] = 0;
    if (!*(_BYTE *)(a1 + 289))
      goto LABEL_42;
  }
LABEL_47:
  memset(__dst, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>(__dst, (std::string *)"mps_graph_program.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)__dst, (uint64_t)&v89, &v87);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[0].__r_.__value_.__l.__data_);
  memset(__dst, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>(__dst, (std::string *)"weights.bin", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)__dst, (uint64_t)&v89, &__p);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst[0].__r_.__value_.__l.__data_);
  v40 = std::__fs::filesystem::path::__parent_path(&v90);
  if (v40.__size_ > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v40.__size_ >= 0x17)
  {
    v42 = (v40.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40.__size_ | 7) != 0x17)
      v42 = v40.__size_ | 7;
    v43 = v42 + 1;
    v41 = (std::string *)operator new(v42 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v40.__size_;
    __dst[0].__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    goto LABEL_58;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v40.__size_;
  v41 = __dst;
  if (v40.__size_)
LABEL_58:
    memmove(v41, v40.__data_, v40.__size_);
  v41->__r_.__value_.__s.__data_[v40.__size_] = 0;
  __base = (std::__fs::filesystem::path)__dst[0];
  std::__fs::filesystem::path::lexically_relative(&v85, &v87, &__base);
  v45 = v85.__pn_.__r_.__value_.__l.__size_;
  v44 = (std::string::value_type *)v85.__pn_.__r_.__value_.__r.__words[0];
  v88[0] = v85.__pn_.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v88 + 3) = *(_DWORD *)((char *)&v85.__pn_.__r_.__value_.__r.__words[2] + 3);
  v46 = HIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]);
  *((_BYTE *)&v85.__pn_.__r_.__value_.__s + 23) = 0;
  v85.__pn_.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    v47 = v91;
    if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_61;
  }
  else
  {
    v47 = v91;
    if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_61:
      pn = v87.__pn_;
      goto LABEL_64;
    }
  }
  std::string::__init_copy_ctor_external(&pn, v87.__pn_.__r_.__value_.__l.__data_, v87.__pn_.__r_.__value_.__l.__size_);
LABEL_64:
  if (SHIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v82, v89.__pn_.__r_.__value_.__l.__data_, v89.__pn_.__r_.__value_.__l.__size_);
  else
    v82 = v89.__pn_;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v81, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
  else
    v81 = __p.__pn_;
  Espresso::MILUtil::SerializeProgram(v47, (uint64_t)&pn, (uint64_t)&v82, (uint64_t)&v81, 0x100000004, 0);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v81.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_72:
      if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_73;
LABEL_77:
      operator delete(pn.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_74;
      goto LABEL_78;
    }
  }
  else if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_77;
LABEL_73:
  if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_74:
    v85 = v87;
    goto LABEL_79;
  }
LABEL_78:
  std::string::__init_copy_ctor_external(&v85.__pn_, v87.__pn_.__r_.__value_.__l.__data_, v87.__pn_.__r_.__value_.__l.__size_);
LABEL_79:
  __dst[0] = v85.__pn_;
  memset(&v85, 0, sizeof(v85));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__dst, 0);
  v48 = __base.__pn_.__r_.__value_.__s.__data_[0];
  if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_81;
LABEL_84:
    operator delete(v85.__pn_.__r_.__value_.__l.__data_);
    v49 = v48;
    if (v48 == 255)
      goto LABEL_185;
    goto LABEL_85;
  }
  operator delete(__dst[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_84;
LABEL_81:
  v49 = v48;
  if (v48 == 255)
  {
LABEL_185:
    v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v78, "Failed in serializing MPSGraph MIL program on disk.");
    __cxa_throw(v78, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_85:
  if (!v49)
    goto LABEL_185;
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_88;
LABEL_91:
    operator delete(v87.__pn_.__r_.__value_.__l.__data_);
    if ((v46 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_92;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_91;
LABEL_88:
  if ((v46 & 0x80) == 0)
    goto LABEL_89;
LABEL_92:
  std::string::__init_copy_ctor_external(__dst, v44, v45);
LABEL_93:
  v50 = (void **)(a1 + 296);
  if (*(char *)(a1 + 319) < 0)
  {
    operator delete(*v50);
    *(_OWORD *)v50 = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 312) = *((_QWORD *)&__dst[0].__r_.__value_.__l + 2);
    if ((v46 & 0x80) == 0)
    {
LABEL_95:
      if ((SHIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_96;
      goto LABEL_116;
    }
  }
  else
  {
    *(_OWORD *)v50 = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 312) = *((_QWORD *)&__dst[0].__r_.__value_.__l + 2);
    if ((v46 & 0x80) == 0)
      goto LABEL_95;
  }
  operator delete(v44);
  if ((SHIBYTE(v89.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_96:
    if ((SHIBYTE(v90.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_117;
  }
LABEL_116:
  operator delete(v89.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v90.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_97:
    v51 = v91;
    v91 = 0;
    if (!v51)
      goto LABEL_99;
    goto LABEL_98;
  }
LABEL_117:
  operator delete(v90.__pn_.__r_.__value_.__l.__data_);
  v51 = v91;
  v91 = 0;
  if (v51)
LABEL_98:
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
LABEL_99:
  v52 = v93;
  if (v93)
  {
    do
    {
      while (1)
      {
        v53 = (void **)*v52;
        v54 = (std::__shared_weak_count *)v52[6];
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        if (*((char *)v52 + 39) < 0)
          break;
        operator delete(v52);
        v52 = v53;
        if (!v53)
          goto LABEL_109;
      }
      operator delete(v52[2]);
      operator delete(v52);
      v52 = v53;
    }
    while (v53);
  }
LABEL_109:
  v57 = (void *)v92[0];
  v92[0] = 0;
  if (v57)
    operator delete(v57);
  if (E5RT::g_trace_analysis_level >= v94)
    kdebug_trace();
}

void sub_19113DEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void *v49;
  void *v50;
  char v51;
  uint64_t v52;
  uint64_t v54;

  if (a36 < 0)
  {
    operator delete(__p);
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a42 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a37);
LABEL_6:

  if (v51 < 0)
    operator delete(v50);
  if (a49 < 0)
    operator delete(a44);
  if (*(char *)(v52 - 217) < 0)
    operator delete(*(void **)(v52 - 240));
  v54 = *(_QWORD *)(v52 - 216);
  *(_QWORD *)(v52 - 216) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v52 - 208);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v52 - 168));
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForMPSGraph::GetOptions(Espresso::AOT::MILCompilerForMPSGraph *this)
{
  return (uint64_t)this + 264;
}

void Espresso::AOT::MILCompilerForMPSGraph::GetOutputPaths(Espresso::AOT::MILCompilerForMPSGraph *this@<X0>, _QWORD *a2@<X8>)
{
  std::string __p;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 319) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 37), *((_QWORD *)this + 38));
  else
    __p = *(std::string *)((char *)this + 296);
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19113E338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForMPSGraph::~MILCompilerForMPSGraph(void **this)
{
  Espresso::AOT::MILCompilerForMPSGraph::~MILCompilerForMPSGraph(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;
  void **v3;
  void *v4;

  *this = &off_1E2DA07E8;
  if (*((char *)this + 319) < 0)
  {
    operator delete(this[37]);
    if ((*((char *)this + 287) & 0x80000000) == 0)
    {
LABEL_3:
      *this = off_1E2DA0650;
      v2 = (void **)this[29];
      if (!v2)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[33]);
  *this = off_1E2DA0650;
  v2 = (void **)this[29];
  if (!v2)
  {
LABEL_4:
    if ((*((char *)this + 231) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_17:
    operator delete(this[26]);
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_18:
    operator delete(this[23]);
    Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
    return;
  }
LABEL_10:
  v3 = (void **)this[30];
  if (v3 == v2)
  {
    this[30] = v2;
    operator delete(v2);
    if (*((char *)this + 231) < 0)
      goto LABEL_17;
  }
  else
  {
    do
    {
      if (*((char *)v3 - 1) < 0)
        operator delete(*(v3 - 3));
      v3 -= 3;
    }
    while (v3 != v2);
    v4 = this[29];
    this[30] = v2;
    operator delete(v4);
    if (*((char *)this + 231) < 0)
      goto LABEL_17;
  }
LABEL_5:
  if (*((char *)this + 207) < 0)
    goto LABEL_18;
LABEL_6:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
}

void Espresso::AOT::MILCompilerForMPSGraph::Run(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl(&dword_190DAF000, log, OS_LOG_TYPE_DEBUG, "MILCompilerForMPSGraph:: MPSGraphPackage precompilation is enabled.", v1, 2u);
}

void Espresso::AOT::ValidateE5RTProgram(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *v4;
  const char *OpsetName;
  unint64_t v6;
  const char *v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  _QWORD *v13;
  size_t v14;
  void **v15;
  int v16;
  size_t v17;
  uint64_t *v18;
  size_t v19;
  int v20;
  BOOL v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD ***v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  __int128 *v37;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v53;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v70;
  std::__shared_weak_count *size;
  unint64_t *v72;
  unint64_t v73;
  std::string *v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  std::logic_error *v91;
  const std::string::value_type *v92;
  const std::string::value_type *v93;
  const std::string::value_type *v94;
  int v95;
  const std::string::value_type *v96;
  std::string::size_type v97;
  std::string *v98;
  __int128 v99;
  std::string *v100;
  __int128 v101;
  unint64_t v102;
  std::logic_error *v103;
  std::string *v104;
  __int128 v105;
  int v106;
  const std::string::value_type *v107;
  std::string::size_type v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  __int128 v112;
  std::logic_error *v113;
  std::string *v114;
  __int128 v115;
  const std::string::value_type *v116;
  std::string::size_type v117;
  std::string *v118;
  __int128 v119;
  std::string *v120;
  __int128 v121;
  std::logic_error *v122;
  uint64_t v123;
  int v124;
  const std::string::value_type *v125;
  std::string::size_type v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  __int128 v130;
  std::logic_error *v131;
  std::logic_error *exception;
  void *__p[2];
  char v134;
  void **__dst;
  size_t v136;
  int64_t v137;
  _BYTE v138[32];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  std::string v146;
  std::string v147;
  std::string v148;
  std::string v149;
  std::string v150;

  v1 = *a1;
  if (!v1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Null MIL<E5RT> program supplied.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v2 = *(_QWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1) + 16);
  if (!v2)
    return;
  do
  {
    while (2)
    {
      v3 = v2[5];
      v4 = (E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
      OpsetName = E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOpsetName(v4);
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v7 = OpsetName;
      v8 = v6;
      if (v6 >= 0x17)
      {
        v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v10 = v6 | 7;
        v11 = v10 + 1;
        p_dst = (void **)operator new(v10 + 1);
        v136 = v8;
        v137 = v11 | 0x8000000000000000;
        __dst = p_dst;
LABEL_13:
        memmove(p_dst, v7, v8);
        goto LABEL_14;
      }
      HIBYTE(v137) = v6;
      p_dst = (void **)&__dst;
      if (v6)
        goto LABEL_13;
LABEL_14:
      *((_BYTE *)p_dst + v8) = 0;
      if (*((_QWORD *)v4 + 2) != 1 || (v12 = (uint64_t **)*((_QWORD *)v4 + 1)) == 0)
      {
LABEL_174:
        v113 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v114 = std::string::append(&v148, ": Unsupported specialization(s). Only ");
        v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        v149.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        if (v137 >= 0)
          v116 = (const std::string::value_type *)&__dst;
        else
          v116 = (const std::string::value_type *)__dst;
        if (v137 >= 0)
          v117 = HIBYTE(v137);
        else
          v117 = v136;
        v118 = std::string::append(&v149, v116, v117);
        v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
        v150.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v119;
        v118->__r_.__value_.__l.__size_ = 0;
        v118->__r_.__value_.__r.__words[2] = 0;
        v118->__r_.__value_.__r.__words[0] = 0;
        v120 = std::string::append(&v150, " supported.");
        v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
        *(_QWORD *)&v138[16] = *((_QWORD *)&v120->__r_.__value_.__l + 2);
        *(_OWORD *)v138 = v121;
        v120->__r_.__value_.__l.__size_ = 0;
        v120->__r_.__value_.__r.__words[2] = 0;
        v120->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v113, (const std::string *)v138);
        v113->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v113, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v13 = v2;
      if (v137 >= 0)
        v14 = HIBYTE(v137);
      else
        v14 = v136;
      if (v137 >= 0)
        v15 = (void **)&__dst;
      else
        v15 = __dst;
      while (1)
      {
        v16 = *((char *)v12 + 55);
        if (v16 >= 0)
          v17 = *((unsigned __int8 *)v12 + 55);
        else
          v17 = (size_t)v12[5];
        if (v16 >= 0)
          v18 = (uint64_t *)(v12 + 4);
        else
          v18 = v12[4];
        if (v17 >= v14)
          v19 = v14;
        else
          v19 = v17;
        v20 = memcmp(v15, v18, v19);
        v21 = v14 < v17;
        if (v20)
          v21 = v20 < 0;
        if (v21)
          goto LABEL_23;
        v22 = memcmp(v18, v15, v19);
        v23 = v17 < v14;
        if (v22)
          v23 = v22 < 0;
        if (!v23)
          break;
        ++v12;
LABEL_23:
        v12 = (uint64_t **)*v12;
        if (!v12)
          goto LABEL_174;
      }
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      std::operator+<char>();
      v25 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      if (v25[1] != *v25)
      {
        v131 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": Block inputs not supported.", (const void **)__p, v138);
        std::logic_error::logic_error(v131, (const std::string *)v138);
        v131->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v131, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v26 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 56))(v24);
      v27 = **v26;
      v28 = (*v26)[1];
      while (v27 != v28)
      {
        v29 = *v27;
        (*(void (**)(std::string *__return_ptr, _QWORD))(*(_QWORD *)*v27 + 80))(&v147, *v27);
        v30 = v147.__r_.__value_.__r.__words[0];
        v139 = xmmword_1E2DD15D0;
        v140 = *(_OWORD *)&off_1E2DD15E0;
        v144 = *(_OWORD *)&off_1E2DD1620;
        v145 = xmmword_1E2DD1630;
        v141 = xmmword_1E2DD15F0;
        v142 = *(_OWORD *)&off_1E2DD1600;
        v143 = xmmword_1E2DD1610;
        *(_OWORD *)v138 = xmmword_1E2DD15B0;
        *(_OWORD *)&v138[16] = *(_OWORD *)&off_1E2DD15C0;
        v31 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v147.__r_.__value_.__l.__data_ + 16))(v147.__r_.__value_.__r.__words[0]);
        v32 = *(_QWORD *)(v31 + 8);
        if (*(char *)(v31 + 23) < 0)
        {
          v33 = *(_QWORD *)v31;
        }
        else
        {
          v32 = *(unsigned __int8 *)(v31 + 23);
          v33 = v31;
        }
        switch(v32)
        {
          case 15:
            v34 = *(_QWORD *)v33;
            v35 = *(_QWORD *)(v33 + 7);
            v36 = v34 == 0x736F695F4C4D3545 && v35 == 0x747361632E363173;
            v37 = &v142;
            if (v36)
              goto LABEL_125;
            goto LABEL_124;
          case 19:
            v49 = *(_QWORD *)v33;
            v50 = *(_QWORD *)(v33 + 8);
            v51 = *(_QWORD *)(v33 + 11);
            v53 = v49 == 0x736F695F4C4D3545 && v50 == 0x635F74696A2E3631 && v51 == 0x6C6C61635F74696ALL;
            v37 = &v143;
            if (!v53)
              goto LABEL_124;
            goto LABEL_125;
          case 24:
            if (*(_QWORD *)v33 == 0x736F695F4C4D3545
              && *(_QWORD *)(v33 + 8) == 0x695F7570632E3631
              && *(_QWORD *)(v33 + 16) == 0x65636E657265666ELL)
            {
              goto LABEL_126;
            }
            v41 = *(_QWORD *)v33 == 0x736F695F4C4D3545
               && *(_QWORD *)(v33 + 8) == 0x695F7269652E3631
               && *(_QWORD *)(v33 + 16) == 0x65636E657265666ELL;
            v37 = (__int128 *)&v138[16];
            if (!v41)
            {
              v42 = *(_QWORD *)v33 == 0x736F695F4C4D3545 && *(_QWORD *)(v33 + 8) == 0x695F656E612E3631;
              v43 = v42 && *(_QWORD *)(v33 + 16) == 0x65636E657265666ELL;
              v37 = &v139;
              if (!v43)
              {
                v44 = *(_QWORD *)v33;
                v45 = *(_QWORD *)(v33 + 8);
                v46 = *(_QWORD *)(v33 + 16);
                v47 = v44 == 0x736F695F4C4D3545 && v45 == 0x695F636C6D2E3631;
                v48 = v47 && v46 == 0x65636E657265666ELL;
                v37 = &v141;
                if (!v48)
LABEL_124:
                  v37 = (__int128 *)&v146;
              }
            }
LABEL_125:
            if ((char *)v37 - v138 == 144)
            {
              v122 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(": Unsupported operation ", (const void **)__p, &v148);
              v123 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v30 + 16))(v30);
              v124 = *(char *)(v123 + 23);
              if (v124 >= 0)
                v125 = (const std::string::value_type *)v123;
              else
                v125 = *(const std::string::value_type **)v123;
              if (v124 >= 0)
                v126 = *(unsigned __int8 *)(v123 + 23);
              else
                v126 = *(_QWORD *)(v123 + 8);
              v127 = std::string::append(&v148, v125, v126);
              v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
              v149.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v128;
              v127->__r_.__value_.__l.__size_ = 0;
              v127->__r_.__value_.__r.__words[2] = 0;
              v127->__r_.__value_.__r.__words[0] = 0;
              v129 = std::string::append(&v149, ".");
              v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
              v150.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v130;
              v129->__r_.__value_.__l.__size_ = 0;
              v129->__r_.__value_.__r.__words[2] = 0;
              v129->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(v122, &v150);
              v122->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
              __cxa_throw(v122, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
            }
LABEL_126:
            size = (std::__shared_weak_count *)v147.__r_.__value_.__l.__size_;
            if (v147.__r_.__value_.__l.__size_)
            {
              v72 = (unint64_t *)(v147.__r_.__value_.__l.__size_ + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            std::operator+<char>();
            v74 = std::string::append(&v148, ", ");
            v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            v149.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 56))(v29);
            v77 = *(char *)(v76 + 23);
            if (v77 >= 0)
              v78 = (const std::string::value_type *)v76;
            else
              v78 = *(const std::string::value_type **)v76;
            if (v77 >= 0)
              v79 = *(unsigned __int8 *)(v76 + 23);
            else
              v79 = *(_QWORD *)(v76 + 8);
            v80 = std::string::append(&v149, v78, v79);
            v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
            v150.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v81;
            v80->__r_.__value_.__l.__size_ = 0;
            v80->__r_.__value_.__r.__words[2] = 0;
            v80->__r_.__value_.__r.__words[0] = 0;
            v82 = std::string::append(&v150, "]: ");
            v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
            *(_QWORD *)&v138[16] = *((_QWORD *)&v82->__r_.__value_.__l + 2);
            *(_OWORD *)v138 = v83;
            v82->__r_.__value_.__l.__size_ = 0;
            v82->__r_.__value_.__r.__words[2] = 0;
            v82->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v150.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_139:
                if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_140;
                goto LABEL_154;
              }
            }
            else if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_139;
            }
            operator delete(v149.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v148.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_140;
LABEL_154:
            operator delete(v148.__r_.__value_.__l.__data_);
LABEL_140:
            v84 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 160))(v29);
            v85 = v84 + 1;
            v86 = (_QWORD *)*v84;
            if ((_QWORD *)*v84 != v84 + 1)
            {
              do
              {
                v87 = (_QWORD *)v86[7];
                v88 = v86[8] - (_QWORD)v87;
                if (v88 != 16)
                {
                  v102 = v88 >> 4;
                  v103 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::to_string(&v146, v102);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v146, (uint64_t)v138, &v147);
                  v104 = std::string::append(&v147, " arguments bound to param \"");
                  v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
                  v148.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v105;
                  v104->__r_.__value_.__l.__size_ = 0;
                  v104->__r_.__value_.__r.__words[2] = 0;
                  v104->__r_.__value_.__r.__words[0] = 0;
                  v106 = *((char *)v86 + 55);
                  if (v106 >= 0)
                    v107 = (const std::string::value_type *)(v86 + 4);
                  else
                    v107 = (const std::string::value_type *)v86[4];
                  if (v106 >= 0)
                    v108 = *((unsigned __int8 *)v86 + 55);
                  else
                    v108 = v86[5];
                  v109 = std::string::append(&v148, v107, v108);
                  v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
                  v149.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v110;
                  v109->__r_.__value_.__l.__size_ = 0;
                  v109->__r_.__value_.__r.__words[2] = 0;
                  v109->__r_.__value_.__r.__words[0] = 0;
                  v111 = std::string::append(&v149, "\"");
                  v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
                  v150.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v112;
                  v111->__r_.__value_.__l.__size_ = 0;
                  v111->__r_.__value_.__r.__words[2] = 0;
                  v111->__r_.__value_.__r.__words[0] = 0;
                  std::logic_error::logic_error(v103, &v150);
                  v103->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
                  __cxa_throw(v103, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
                }
                if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v87 + 16))(*v87) & 1) == 0)
                {
                  v91 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Non-name argument bound to param \"", (const void **)v138, &v148);
                  v94 = (const std::string::value_type *)v86[4];
                  v93 = (const std::string::value_type *)(v86 + 4);
                  v92 = v94;
                  v95 = v93[23];
                  if (v95 >= 0)
                    v96 = v93;
                  else
                    v96 = v92;
                  if (v95 >= 0)
                    v97 = *((unsigned __int8 *)v93 + 23);
                  else
                    v97 = *((_QWORD *)v93 + 1);
                  v98 = std::string::append(&v148, v96, v97);
                  v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
                  v149.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v99;
                  v98->__r_.__value_.__l.__size_ = 0;
                  v98->__r_.__value_.__r.__words[2] = 0;
                  v98->__r_.__value_.__r.__words[0] = 0;
                  v100 = std::string::append(&v149, "\"");
                  v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
                  v150.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v101;
                  v100->__r_.__value_.__l.__size_ = 0;
                  v100->__r_.__value_.__r.__words[2] = 0;
                  v100->__r_.__value_.__r.__words[0] = 0;
                  std::logic_error::logic_error(v91, &v150);
                  v91->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
                  __cxa_throw(v91, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
                }
                v89 = (_QWORD *)v86[1];
                if (v89)
                {
                  do
                  {
                    v90 = v89;
                    v89 = (_QWORD *)*v89;
                  }
                  while (v89);
                }
                else
                {
                  do
                  {
                    v90 = (_QWORD *)v86[2];
                    v36 = *v90 == (_QWORD)v86;
                    v86 = v90;
                  }
                  while (!v36);
                }
                v86 = v90;
              }
              while (v90 != v85);
            }
            if ((v138[23] & 0x80000000) != 0)
              operator delete(*(void **)v138);
            v27 += 2;
            break;
          case 25:
            v56 = *(_QWORD *)v33 == 0x736F695F4C4D3545
               && *(_QWORD *)(v33 + 8) == 0x5F736E6E622E3631
               && *(_QWORD *)(v33 + 16) == 0x636E657265666E69
               && *(_BYTE *)(v33 + 24) == 101;
            v37 = &v144;
            if (!v56)
            {
              v57 = *(_QWORD *)v33;
              v58 = *(_QWORD *)(v33 + 8);
              v59 = *(_QWORD *)(v33 + 16);
              v60 = *(unsigned __int8 *)(v33 + 24);
              v61 = v57 == 0x736F695F4C4D3545 && v58 == 0x696D5F35652E3631;
              v62 = v61 && v59 == 0x70635F6C616D696ELL;
              v63 = v62 && v60 == 117;
              v37 = &v145;
              if (!v63)
                goto LABEL_124;
            }
            goto LABEL_125;
          case 30:
            v64 = *(_QWORD *)v33;
            v65 = *(_QWORD *)(v33 + 8);
            v66 = *(_QWORD *)(v33 + 16);
            v67 = *(_QWORD *)(v33 + 22);
            v70 = v64 == 0x736F695F4C4D3545
               && v65 == 0x675F73706D2E3631
               && v66 == 0x666E695F68706172
               && v67 == 0x65636E657265666ELL;
            v37 = &v140;
            if (!v70)
              goto LABEL_124;
            goto LABEL_125;
          default:
            goto LABEL_124;
        }
      }
      if (v134 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v137) < 0)
          goto LABEL_158;
LABEL_5:
        v2 = (_QWORD *)*v13;
        if (!*v13)
          return;
        continue;
      }
      break;
    }
    if ((SHIBYTE(v137) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_158:
    operator delete(__dst);
    v2 = (_QWORD *)*v13;
  }
  while (*v13);
}

void sub_19113F018(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19113F02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;

  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0)
    {
LABEL_6:
      if (a24 < 0)
        operator delete(a19);
      if (a30 < 0)
        operator delete(a25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

void Espresso::AOT::BuildTensorDescriptor(uint64_t a1@<X0>, uint64_t a2@<X1>, MIL::Attributes::FlexibleShapeInfo **a3@<X2>, _QWORD *a4@<X8>)
{
  int v8;
  int v9;
  unint64_t v10;
  unsigned int E5RTPackType;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  MIL::IRValue *v18;
  MIL::IRValue *v19;
  uint64_t *Data;
  _QWORD *v21;
  MIL::Attributes::FlexibleShapeInfo *v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::runtime_error *exception;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  void **v32;
  void *v33[3];
  void *v34;
  char *v35;
  char *v36;
  E5RT::TensorDataType::Impl *v37[2];

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
  E5RT::TensorDataType::TensorDataType(v37, v9, E5RTPackType);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v14 = *(const void **)v12;
  v13 = *(_QWORD *)(v12 + 8);
  v15 = v13 - *(_QWORD *)v12;
  if (v13 == *(_QWORD *)v12)
  {
    v17 = 0;
    v16 = 0;
  }
  else
  {
    if (v15 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v16 = (char *)operator new(v13 - *(_QWORD *)v12);
    v17 = &v16[8 * (v15 >> 3)];
    v34 = v16;
    v36 = v17;
    memcpy(v16, v14, v15);
    v35 = v17;
  }
  *a4 = 0;
  v32 = v33;
  v31 = 10;
  strcpy((char *)__p, "alignments");
  v18 = (MIL::IRValue *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 64))(a2, __p);
  if (v31 < 0)
    operator delete(__p[0]);
  v31 = 10;
  strcpy((char *)__p, "total_size");
  v19 = (MIL::IRValue *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 64))(a2, __p);
  if (v31 < 0)
  {
    operator delete(__p[0]);
    if (!v18)
      goto LABEL_13;
  }
  else if (!v18)
  {
    goto LABEL_13;
  }
  if (v19)
  {
    Espresso::AOT::BuildTensorDescriptor(std::string const&,MIL::IRTensorValueType const&,std::shared_ptr<MIL::Attributes::FlexibleShapeInfo>)::$_0::operator()(__p, (uint64_t)&v32, v18);
    MIL::IRValue::AsTensor(v19);
    Data = (uint64_t *)MIL::IRTensorValue::GetDataView<unsigned long long>();
    E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignmentsAndSize(v37, (uint64_t *)v33, __p, *Data, &v28);
    goto LABEL_15;
  }
LABEL_13:
  if (!v18)
  {
    if (v19)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Creating tensor descriptors using total size without alignments is not supported yet.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    E5RT::TensorDescriptor::CreateTensorDesc(v37, (uint64_t *)v33, __p);
    v21 = __p[0];
    *a4 = __p[0];
    v22 = *a3;
    if (*a3)
      goto LABEL_18;
    goto LABEL_29;
  }
  Espresso::AOT::BuildTensorDescriptor(std::string const&,MIL::IRTensorValueType const&,std::shared_ptr<MIL::Attributes::FlexibleShapeInfo>)::$_0::operator()(__p, (uint64_t)&v32, v18);
  E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignments(v37, (uint64_t *)v33, __p, &v28);
LABEL_15:
  v21 = v28;
  *a4 = v28;
  v28 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v22 = *a3;
  if (*a3)
  {
LABEL_18:
    MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes(v22);
    if (v28)
    {
      v23 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v28, a1);
      if (v23)
      {
        E5RT::TensorDescriptor::SetDefaultTensorShape((uint64_t)v21, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
    v24 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
LABEL_29:
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v34)
    operator delete(v34);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v37);
}

void sub_19113F720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  _QWORD *v22;
  uint64_t v23;
  void *v25;

  *v22 = 0;
  if (__p)
  {
    operator delete(__p);
    v25 = a21;
    if (!a21)
      goto LABEL_6;
  }
  else
  {
    v25 = a21;
    if (!a21)
    {
LABEL_6:
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)(v23 - 80));
      _Unwind_Resume(a1);
    }
  }
  operator delete(v25);
  goto LABEL_6;
}

uint64_t `anonymous namespace'::BuildE5RTComponentDtype(int a1)
{
  int v1;
  std::runtime_error *exception;
  std::string v4;

  v1 = a1 - 2;
  if ((a1 - 2) >= 0xF || ((0x738Du >> v1) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v4);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return dword_191A8C6D8[v1];
}

void sub_19113F940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::BuildE5RTTensorComponentSize(int a1)
{
  int v1;
  std::runtime_error *exception;
  std::string v4;

  v1 = a1 - 2;
  if ((a1 - 2) >= 0xF || ((0x738Du >> v1) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v4);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return qword_191A8C718[v1];
}

void sub_19113FA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::GetE5RTPackType(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int *v4;
  std::runtime_error *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::runtime_error *exception;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;

  if (a2 > 8 || ((1 << a2) & 0x116) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v28, a2);
    v19 = std::string::insert(&v28, 0, "Unsupported interleave (");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v29, ") for operand ");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = (const std::string::value_type *)a3;
    else
      v24 = *(const std::string::value_type **)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    v26 = std::string::append(&v30, v24, v25);
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v31);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a1 == 4)
  {
    if (a2 - 1 < 8 && ((0x8Bu >> (a2 - 1)) & 1) != 0)
    {
      v4 = (unsigned int *)&unk_191A8C7D0;
      return v4[a2 - 1];
    }
    goto LABEL_16;
  }
  if (a1 == 2)
  {
    if (a2 - 1 < 8 && ((0x8Bu >> (a2 - 1)) & 1) != 0)
    {
      v4 = (unsigned int *)&unk_191A8C7B0;
      return v4[a2 - 1];
    }
LABEL_16:
    v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v28, a1);
    v8 = std::string::insert(&v28, 0, "Unsupported component size (");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v29, ") for operand ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = *(char *)(a3 + 23);
    if (v12 >= 0)
      v13 = (const std::string::value_type *)a3;
    else
      v13 = *(const std::string::value_type **)a3;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a3 + 23);
    else
      v14 = *(_QWORD *)(a3 + 8);
    v15 = std::string::append(&v30, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v7, &v31);
    __cxa_throw(v7, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a1 != 1 || a2 - 1 >= 8 || ((0x8Bu >> (a2 - 1)) & 1) == 0)
    goto LABEL_16;
  v4 = (unsigned int *)&unk_191A8C790;
  return v4[a2 - 1];
}

void sub_19113FCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  char v29;
  uint64_t v30;

  if (*(char *)(v30 - 41) < 0)
  {
    operator delete(*(void **)(v30 - 64));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      if (a21 < 0)
      {
LABEL_10:
        operator delete(a16);
        if ((a15 & 0x80000000) == 0)
          goto LABEL_11;
        goto LABEL_13;
      }
LABEL_8:
      if ((a15 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v29 & 1) == 0)
LABEL_15:
          _Unwind_Resume(a1);
LABEL_14:
        __cxa_free_exception(v28);
        goto LABEL_15;
      }
LABEL_13:
      operator delete(a10);
      if ((v29 & 1) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  if (a21 < 0)
    goto LABEL_10;
  goto LABEL_8;
}

void `anonymous namespace'::MakeVectorFromMILShape(uint64_t **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
        if (v9)
          break;
        v10 = -1;
        if (v8 >= v7)
          goto LABEL_8;
LABEL_3:
        *v8++ = v10;
        a1[1] = v8;
        if (++v4 == v3)
          return;
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      if (v8 < v7)
        goto LABEL_3;
LABEL_8:
      v11 = v8 - v6;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      if (((char *)v7 - (char *)v6) >> 2 > v12)
        v12 = ((char *)v7 - (char *)v6) >> 2;
      if ((unint64_t)((char *)v7 - (char *)v6) >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        if (v13 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v14 = operator new(8 * v13);
        v15 = (uint64_t *)&v14[8 * v11];
        *v15 = v10;
        v16 = (uint64_t)(v15 + 1);
        if (v8 == v6)
          goto LABEL_22;
      }
      else
      {
        v14 = 0;
        v15 = (uint64_t *)(8 * v11);
        *(_QWORD *)(8 * v11) = v10;
        v16 = 8 * v11 + 8;
        if (v8 == v6)
          goto LABEL_22;
      }
      v17 = (char *)(v8 - 1) - (char *)v6;
      if (v17 < 0x168)
      {
        v18 = v8;
        goto LABEL_21;
      }
      if (&v14[(char *)v8 - (char *)v6 - 8 - (v17 & 0xFFFFFFFFFFFFFFF8)] > &v14[(char *)v8 - (char *)v6 - 8])
      {
        v18 = v8;
        do
        {
LABEL_21:
          v19 = *--v18;
          *--v15 = v19;
        }
        while (v18 != v6);
        goto LABEL_22;
      }
      if ((uint64_t *)((char *)v8 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8) > v8 - 1)
      {
        v18 = v8;
        goto LABEL_21;
      }
      if ((unint64_t)((char *)v6 - v14) < 0x20)
      {
        v18 = v8;
        goto LABEL_21;
      }
      v20 = (v17 >> 3) + 1;
      v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      v18 = &v8[v21 / 0xFFFFFFFFFFFFFFF8];
      v15 = (uint64_t *)((char *)v15 - v21);
      v22 = &v14[8 * v11 - 16];
      v23 = v8 - 2;
      v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *(_OWORD *)v23;
        *(v22 - 1) = *((_OWORD *)v23 - 1);
        *v22 = v25;
        v22 -= 2;
        v23 -= 4;
        v24 -= 4;
      }
      while (v24);
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_21;
LABEL_22:
      v7 = (uint64_t *)&v14[8 * v13];
      *a1 = v15;
      a1[1] = (uint64_t *)v16;
      a1[2] = v7;
      if (v6)
        operator delete(v6);
      v6 = v15;
      v3 = a3;
      a1[1] = (uint64_t *)v16;
      ++v4;
      v8 = (uint64_t *)v16;
    }
    while (v4 != a3);
  }
}

void sub_19114005C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::BuildTensorDescriptor(std::string const&,MIL::IRTensorValueType const&,std::shared_ptr<MIL::Attributes::FlexibleShapeInfo>)::$_0::operator()(_QWORD *a1, uint64_t a2, MIL::IRValue *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  std::runtime_error *exception;
  char *v19;
  char *v20;

  Espresso::AOT::MakeVectorFromMILValue<unsigned long long>(a3, &v19);
  v5 = v19;
  v6 = v20;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v7 = v6 - v5;
  if (v6 == v5)
  {
    if (*(_QWORD *)(*(_QWORD *)a2 + 8) == **(_QWORD **)a2)
      goto LABEL_9;
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Number of alignments should be the same as the number of dimensions.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v7 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v8 = (char *)operator new(v6 - v5);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = &v8[8 * (v7 >> 3)];
  v9 = v5;
  v10 = v8;
  if ((unint64_t)(v7 - 8) < 0x18)
    goto LABEL_17;
  v11 = ((unint64_t)(v7 - 8) >> 3) + 1;
  v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
  v9 = &v5[v12];
  v10 = &v8[v12];
  v13 = v8 + 16;
  v14 = (__int128 *)(v5 + 16);
  v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v16 = *v14;
    *(v13 - 1) = *(v14 - 1);
    *v13 = v16;
    v13 += 2;
    v14 += 2;
    v15 -= 4;
  }
  while (v15);
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_17:
    do
    {
      v17 = *(_QWORD *)v9;
      v9 += 8;
      *(_QWORD *)v10 = v17;
      v10 += 8;
    }
    while (v9 != v6);
  }
  a1[1] = v10;
  if (*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2 != v10 - v8)
    goto LABEL_13;
LABEL_9:
  if (v5)
  {
    v20 = v5;
    operator delete(v5);
  }
}

void sub_1911401E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v12;

  if (v12)
  {
    *(_QWORD *)(v11 + 8) = v12;
    operator delete(v12);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::BuildTensorDescriptor(MIL::IRTensorBufferValueType *this@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  int DataType;
  int v7;
  unint64_t v8;
  _QWORD **Shape;
  uint64_t *InterleaveFactors;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  MIL::IRConstantProperty *v16;
  int UInt8ScalarValue;
  int v18;
  std::logic_error *exception;
  unsigned int E5RTPackType;
  uint64_t *Strides;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  MIL::IRConstantProperty *v27;
  void *__p;
  char *v29;
  char *v30;
  E5RT::TensorDataType::Impl *v31[2];
  void *v32[3];

  DataType = MIL::IRTensorBufferValueType::GetDataType(this);
  Shape = (_QWORD **)MIL::IRTensorBufferValueType::GetShape(this);
  InterleaveFactors = (uint64_t *)MIL::IRTensorBufferValueType::GetInterleaveFactors(this);
  v11 = *InterleaveFactors;
  if (InterleaveFactors[1] == *InterleaveFactors)
  {
    v14 = 0;
    v15 = 1;
  }
  else
  {
    v12 = InterleaveFactors;
    v13 = 0;
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(v11 + 8 * v13));
      UInt8ScalarValue = MIL::IRConstantProperty::GetUInt8ScalarValue(v16);
      if (UInt8ScalarValue != 1)
      {
        v18 = v15;
        v15 = UInt8ScalarValue;
        v14 = v13;
        if (v18 != 1)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only one interleave factor of larger than 1 is supported.");
          __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
      }
      ++v13;
      v11 = *v12;
    }
    while (v13 < (v12[1] - *v12) >> 3);
  }
  if (v15 > 1u)
    *((_QWORD *)v32[0] + v14) = vcvtps_u32_f32((float)*((unint64_t *)v32[0] + v14) / (float)v15);
  E5RT::TensorDataType::TensorDataType(v31, v7, E5RTPackType);
  Strides = (uint64_t *)MIL::IRTensorBufferValueType::GetStrides(this);
  v23 = *Strides;
  v22 = Strides[1];
  __p = 0;
  v29 = 0;
  v30 = 0;
  v24 = v22 - v23;
  if (v22 != v23)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    __p = operator new(v22 - v23);
    v30 = (char *)__p + 8 * (v24 >> 3);
    bzero(__p, v24);
    v29 = (char *)__p + v24;
  }
  v25 = *Strides;
  if (Strides[1] != *Strides)
  {
    v26 = 0;
    do
    {
      while (1)
      {
        v27 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(*(MIL::IRProperty **)(v25 + 8 * v26));
        if (v27)
          break;
        *((_QWORD *)__p + v26++) = 0x7FFFFFFFFFFFFFFFLL;
        v25 = *Strides;
        if (v26 >= (Strides[1] - *Strides) >> 3)
          goto LABEL_18;
      }
      *((_QWORD *)__p + v26++) = MIL::IRConstantProperty::GetInt64ScalarValue(v27) * v8;
      v25 = *Strides;
    }
    while (v26 < (Strides[1] - *Strides) >> 3);
  }
LABEL_18:
  E5RT::TensorDescriptor::CreateTensorDescriptorWithStridesComponentAxis(v31, (uint64_t *)v32, &__p, v14, a3);
  if (__p)
  {
    v29 = (char *)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v31);
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
}

void sub_1911404AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a12);
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::BuildSurfaceDescriptor(MIL::IRPixelBufferValueType *this@<X1>, _QWORD *a2@<X8>)
{
  unsigned int PixelFormatType;
  uint64_t Shape;
  uint64_t v6;
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t BytesPerRow;
  uint64_t v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  MIL::IRConstantProperty *v21;
  std::logic_error *v22;
  std::logic_error *exception;
  void *__p;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  char *v34;

  PixelFormatType = MIL::IRPixelBufferValueType::GetPixelFormatType(this);
  switch(PixelFormatType)
  {
    case 1u:
      break;
    case 2u:
      PixelFormatType = 7;
      break;
    case 3u:
      PixelFormatType = 13;
      break;
    case 4u:
      PixelFormatType = 4;
      break;
    case 5u:
      PixelFormatType = 6;
      break;
    case 6u:
      PixelFormatType = 31;
      break;
    case 0xBu:
      PixelFormatType = 8;
      break;
    case 0xCu:
      PixelFormatType = 2;
      break;
    case 0xDu:
      PixelFormatType = 3;
      break;
    case 0xEu:
      PixelFormatType = 11;
      break;
    case 0xFu:
      PixelFormatType = 10;
      break;
    case 0x15u:
    case 0x16u:
      PixelFormatType = 0;
      break;
    case 0x17u:
    case 0x18u:
      PixelFormatType = 14;
      break;
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
      PixelFormatType = 15;
      break;
    case 0x1Cu:
    case 0x1Du:
      PixelFormatType = 5;
      break;
    case 0x29u:
      PixelFormatType = 17;
      break;
    case 0x2Au:
      PixelFormatType = 18;
      break;
    case 0x2Bu:
      PixelFormatType = 19;
      break;
    case 0x2Cu:
      PixelFormatType = 20;
      break;
    case 0x2Du:
      PixelFormatType = 21;
      break;
    case 0x33u:
      PixelFormatType = 22;
      break;
    case 0x34u:
      PixelFormatType = 23;
      break;
    case 0x35u:
      PixelFormatType = 24;
      break;
    case 0x36u:
      PixelFormatType = 25;
      break;
    case 0x37u:
      PixelFormatType = 26;
      break;
    case 0x38u:
      PixelFormatType = 27;
      break;
    case 0x39u:
      PixelFormatType = 28;
      break;
    case 0x3Au:
      PixelFormatType = 29;
      break;
    case 0x46u:
    case 0x47u:
      PixelFormatType = 30;
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported IRPixelFormatType.");
      __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  Shape = MIL::IRPixelBufferValueType::GetShape(this);
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v7 = *(const void **)Shape;
  v6 = *(_QWORD *)(Shape + 8);
  v8 = v6 - *(_QWORD *)Shape;
  if (v6 == *(_QWORD *)Shape)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v6 - *(_QWORD *)Shape);
    v10 = &v9[8 * (v8 >> 3)];
    v32 = v9;
    v34 = v10;
    memcpy(v9, v7, v8);
    v33 = v10;
  }
  if (v31 - (_BYTE *)v30 != 16)
  {
    v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "A surface must have two dimensions.");
    v22->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v22, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v11 = *(_QWORD *)v30;
  v12 = *((_QWORD *)v30 + 1);
  if (MIL::IRPixelBufferValueType::TryGetBytesPerRow(this))
  {
    BytesPerRow = MIL::IRPixelBufferValueType::GetBytesPerRow(this);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v15 = *(const void **)BytesPerRow;
    v14 = *(_QWORD *)(BytesPerRow + 8);
    v16 = v14 - *(_QWORD *)BytesPerRow;
    if (v14 == *(_QWORD *)BytesPerRow)
    {
      v17 = 0;
      __p = 0;
      v25 = 0;
      v26 = 0;
    }
    else
    {
      if (v16 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v17 = (char *)operator new(v14 - *(_QWORD *)BytesPerRow);
      v27 = v17;
      v28 = v17;
      v29 = &v17[8 * (v16 >> 3)];
      memcpy(v17, v15, v16);
      v18 = (char *)operator new(v16);
      v19 = 8 * (v16 >> 3);
      __p = v18;
      v26 = &v18[v19];
      bzero(v18, v16);
      v20 = 0;
      v25 = &v18[v16];
      do
      {
        v21 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)&v17[v20]);
        *(_QWORD *)&v18[v20] = MIL::IRConstantProperty::GetInt64ScalarValue(v21);
        v20 += 8;
      }
      while (v19 != v20);
    }
    E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(PixelFormatType, v12, v11, &__p, a2);
    if (__p)
    {
      v25 = (char *)__p;
      operator delete(__p);
    }
    if (v17)
      operator delete(v17);
  }
  else
  {
    E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(PixelFormatType, v12, v11, a2);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v9)
    operator delete(v9);
}

void sub_191140890(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911408A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  void *v19;
  void *v20;

  if (__p)
    operator delete(__p);
  operator delete(v20);
  if (a15)
    operator delete(a15);
  if (v19)
    operator delete(v19);
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

float Espresso::AOT::GetEngineGflopsPerS(int a1)
{
  float result;
  int v2;
  int v3;

  v3 = a1;
  if ((a1 - 10006) < 6 && ((0x2Fu >> (a1 - 22)) & 1) != 0)
    return 800.0;
  if ((a1 & 0xFFFFFFFD) == 5)
    return 300.0;
  v2 = is_gpu(&v3);
  result = 120.0;
  if (!v2)
    return 20.0;
  return result;
}

float Espresso::AOT::GetEngineBwGbPerS(int a1)
{
  float result;
  int v2;
  int v3;

  v3 = a1;
  if ((a1 - 10006) < 6 && ((0x2Fu >> (a1 - 22)) & 1) != 0)
    return 50.0;
  if ((a1 & 0xFFFFFFFD) == 5)
    return 40.0;
  v2 = is_gpu(&v3);
  result = 40.0;
  if (!v2)
    return 10.0;
  return result;
}

BOOL Espresso::AOT::IsFallbackBackend(unsigned __int16 *a1)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v8;
  int v9;
  int v10;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (v1 == 3)
  {
    if (v2 >= 0)
      v8 = a1;
    else
      v8 = *(unsigned __int16 **)a1;
    v9 = *v8;
    v10 = *((unsigned __int8 *)v8 + 2);
    return v9 == 27757 && v10 == 99;
  }
  else if (v1 == 11)
  {
    if (v2 >= 0)
      v3 = (uint64_t *)a1;
    else
      v3 = *(uint64_t **)a1;
    v4 = *v3;
    v5 = *(uint64_t *)((char *)v3 + 3);
    return v4 == 0x5F63697373616C63 && v5 == 0x7570635F63697373;
  }
  else
  {
    return 0;
  }
}

double Espresso::AOT::GetLocalCost(int a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  float v30;
  unint64_t *v31;
  int v32;
  int v33;
  float v34;
  char v35;
  int v36;
  int v37;
  float v38;
  void *v40;
  std::__shared_weak_count *v41;
  int v42;

  v42 = a1;
  if (is_gpu(&v42))
  {
    if (!*(_QWORD *)a2)
      goto LABEL_35;
    if (!v11)
      goto LABEL_35;
    v12 = v11;
    v13 = *(std::__shared_weak_count **)(a2 + 8);
    v40 = v11;
    v41 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    if (*(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v11 + 384))(v11) + 92) > 4
      || *(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v12 + 384))(v12) + 94) >= 5)
    {
      v16 = *(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v12 + 384))(v12) + 92);
      v17 = *(__int16 *)((*(uint64_t (**)(void *))(*(_QWORD *)v12 + 384))(v12) + 94) * v16;
      if (v17 <= 1)
        v17 = 1;
      a3 = a3 * (float)v17;
    }
    if (!v13)
      goto LABEL_35;
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
  }
  else
  {
    if (!is_cpu(&v42))
      goto LABEL_35;
    if (!*(_QWORD *)a2)
      goto LABEL_35;
    if (!v20)
      goto LABEL_35;
    v21 = v20;
    v13 = *(std::__shared_weak_count **)(a2 + 8);
    v40 = v20;
    v41 = v13;
    if (v13)
    {
      v22 = (unint64_t *)&v13->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = *(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v20 + 384))(v20) + 96);
    v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 384))(v21);
    v26 = v24;
    if (v24 <= 1)
      v26 = 1;
    v27 = *(__int16 *)(v25 + 98);
    if (v27 <= 1)
      v27 = 1;
    v28 = v27 * v26;
    if (v28 >= 0x10)
      v29 = 16;
    else
      v29 = v28;
    v30 = (float)v29;
    if (v28 <= 4)
      v30 = 1.0;
    a3 = a3 * v30;
    if (!v13)
      goto LABEL_35;
    v31 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v31);
    while (__stlxr(v19 - 1, v31));
  }
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    v32 = v42;
    LODWORD(v40) = v42;
    v33 = v42 - 10006;
    if ((v42 - 10006) >= 6)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_35:
  v32 = v42;
  LODWORD(v40) = v42;
  v33 = v42 - 10006;
  if ((v42 - 10006) >= 6)
    goto LABEL_37;
LABEL_36:
  if (((0x2Fu >> v33) & 1) != 0)
  {
    v32 = dword_191A8C7F4[v33];
    v34 = 800.0;
    LODWORD(v40) = v32;
    v35 = v32 - 22;
    if ((v32 - 10006) >= 6)
      goto LABEL_47;
    goto LABEL_46;
  }
LABEL_37:
  if ((v32 & 0xFFFFFFFD) == 5)
  {
    v34 = 300.0;
    LODWORD(v40) = v32;
    v35 = v32 - 22;
    if ((v32 - 10006) >= 6)
      goto LABEL_47;
  }
  else
  {
    if (is_gpu((int *)&v40))
      v34 = 120.0;
    else
      v34 = 20.0;
    v32 = v42;
    LODWORD(v40) = v42;
    v35 = v42 - 22;
    if ((v42 - 10006) >= 6)
      goto LABEL_47;
  }
LABEL_46:
  if (((0x2Fu >> v35) & 1) != 0)
  {
    v36 = 1112014848;
    goto LABEL_53;
  }
LABEL_47:
  if ((v32 & 0xFFFFFFFD) == 5)
  {
    v36 = 1109393408;
LABEL_53:
    v38 = *(float *)&v36;
    return (float)((float)((float)((float)((float)((float)(a4 + a5) + a6) * 0.00097656) / v38) + (float)(a3 / v34))
                 * 1000.0);
  }
  v37 = is_gpu((int *)&v40);
  v38 = 40.0;
  if (!v37)
    v38 = 10.0;
  return (float)((float)((float)((float)((float)((float)(a4 + a5) + a6) * 0.00097656) / v38) + (float)(a3 / v34))
               * 1000.0);
}

void sub_191140ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191140EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191140EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191140F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::BackendNameToEspressoPlatform(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v16;

  v1 = *((char *)a1 + 23);
  v2 = a1[1];
  if (v1 >= 0)
    v2 = *((unsigned __int8 *)a1 + 23);
  if (v2 == 11)
  {
    v7 = (uint64_t *)*a1;
    if (v1 >= 0)
      v8 = a1;
    else
      v8 = (uint64_t *)*a1;
    v9 = *v8;
    v10 = *(uint64_t *)((char *)v8 + 3);
    if (v9 == 0x5F63697373616C63 && v10 == 0x7570635F63697373)
      return 100;
LABEL_37:
    if (v1 >= 0)
      v3 = a1;
    else
      v3 = v7;
    goto LABEL_40;
  }
  if (v2 != 3)
  {
    v7 = (uint64_t *)*a1;
    if (v2 == 9)
    {
      v12 = v1 >= 0 ? a1 : (uint64_t *)*a1;
      v13 = *v12;
      v14 = *((unsigned __int8 *)v12 + 8);
      if (v13 == 0x706172675F73706DLL && v14 == 104)
        return 50008;
    }
    goto LABEL_37;
  }
  if (v1 >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if (*(_WORD *)v3 == 27757 && *((_BYTE *)v3 + 2) == 99)
    return 100;
  if (*(_WORD *)v3 != 28257 || *((_BYTE *)v3 + 2) != 101)
  {
LABEL_40:
    v16 = v3;
    Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("Unsupported backend %s", &v16);
  }
  return 10008;
}

_QWORD *Espresso::AOT::EvaluatorClassicStates::EvaluatorClassicStates(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t Function;
  std::__shared_weak_count *v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t **v41;
  int v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t **v46;
  uint64_t **v47;
  int v48;
  _DWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  const char *v59;
  uint64_t v60;
  _BYTE __p[24];
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  _OWORD *v68;

  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_DWORD *)a1 + 12) = 1065353216;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  v8 = Espresso::AOT::BackendNameToEspressoPlatform((uint64_t *)a4);
  *(_OWORD *)(a1 + 11) = 0u;
  *((_DWORD *)a1 + 20) = v8;
  *((_BYTE *)a1 + 84) = 0;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  a1[17] = 0;
  *((_DWORD *)a1 + 36) = 1065353216;
  Function = MIL::IRProgram::GetFunction();
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(__p, a2);
  v64 = *(_QWORD *)__p;
  if (*(_QWORD *)__p)
  {
    v10 = (std::__shared_weak_count *)operator new();
    v11 = *(std::__shared_weak_count_vtbl **)__p;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3120;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v11;
  }
  else
  {
    v10 = 0;
  }
  v65 = v10;
  *(_QWORD *)__p = 0;
  Espresso::MILTranslator::TranslateProgram((MIL::PassManager *)&v64, a3, 0, 0, 0, 1, &v66);
  v12 = v65;
  if (v65)
  {
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *(_QWORD *)__p;
  *(_QWORD *)__p = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (!v66)
  {
    v59 = "Failed to translate MIL program";
    goto LABEL_77;
  }
  if (*(_QWORD *)(v66 + 32) == *(_QWORD *)(v66 + 40))
  {
    v59 = "Translated EIR network has no layers";
LABEL_77:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v59);
  }
  Espresso::create_context((int *)a1 + 20, &v62);
  v16 = v66;
  *(_QWORD *)__p = operator new(0x38uLL);
  *(_OWORD *)&__p[8] = xmmword_191A764A0;
  strcpy(*(char **)__p, "espresso.dispatch.fallback_only_when_unavailable");
  v68 = __p;
  v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v16 + 472), __p, (uint64_t)&std::piecewise_construct, &v68);
  MEMORY[0x19401C808]((char *)v17 + 56, "1");
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_BYTE *)(v62 + 137) = 1;
  Espresso::reload_network_on_context(&v66, &v62, *(unsigned int *)(**(_QWORD **)(v66 + 32) + 12), (uint64_t *)__p);
  v18 = *(_OWORD *)__p;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[8] = 0;
  v19 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v18;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v60 = Function;
  v25 = v67;
  v66 = 0;
  v67 = 0;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *a1;
  v29 = *(unsigned __int8 *)(a4 + 23);
  v30 = (char)v29;
  if ((v29 & 0x80u) != 0)
    v29 = *(_QWORD *)(a4 + 8);
  if (v29 == 11)
  {
    if (v30 >= 0)
      v35 = (uint64_t *)a4;
    else
      v35 = *(uint64_t **)a4;
    v36 = *v35;
    v37 = *(uint64_t *)((char *)v35 + 3);
    if (v36 != 0x5F63697373616C63 || v37 != 0x7570635F63697373)
      goto LABEL_64;
  }
  else
  {
    if (v29 != 3)
      goto LABEL_64;
    v31 = v30 >= 0 ? (unsigned __int16 *)a4 : *(unsigned __int16 **)a4;
    v32 = *v31;
    v33 = *((unsigned __int8 *)v31 + 2);
    if (v32 != 27757 || v33 != 99)
      goto LABEL_64;
  }
  v39 = *(_QWORD **)(v28 + 32);
  v40 = *(_QWORD **)(v28 + 40);
  if (v39 != v40)
  {
    v41 = (uint64_t **)(*(_QWORD *)(*a1 + 712) + 72);
    v42 = *((_DWORD *)a1 + 20);
    do
    {
      while (1)
      {
        *(_QWORD *)__p = *v39 + 16;
        v43 = std::__tree<std::__value_type<std::string,std::map<Espresso::platform,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<Espresso::platform,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<Espresso::platform,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, *(_QWORD **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        v44 = v43;
        v46 = v43 + 8;
        v45 = v43[8];
        if (v45)
          break;
        v47 = v43 + 8;
LABEL_61:
        v49 = operator new(0x28uLL);
        v49[7] = v42;
        v49[8] = 0;
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0;
        *((_QWORD *)v49 + 2) = v47;
        *v46 = (uint64_t *)v49;
        v50 = (uint64_t *)*v44[7];
        v51 = (uint64_t *)v49;
        if (v50)
        {
          v44[7] = v50;
          v51 = *v46;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v44[8], v51);
        v44[9] = (uint64_t *)((char *)v44[9] + 1);
        v49[8] = 1;
        v39 += 2;
        if (v39 == v40)
          goto LABEL_64;
      }
      while (1)
      {
        while (1)
        {
          v47 = (uint64_t **)v45;
          v48 = *((_DWORD *)v45 + 7);
          if (v48 <= v42)
            break;
          v45 = *v47;
          v46 = v47;
          if (!*v47)
            goto LABEL_61;
        }
        if (v48 >= v42)
          break;
        v45 = v47[1];
        if (!v45)
        {
          v46 = v47 + 1;
          goto LABEL_61;
        }
      }
      *((_DWORD *)v47 + 8) = 1;
      v39 += 2;
    }
    while (v39 != v40);
  }
LABEL_64:
  Espresso::AOT::EvaluatorClassicStates::PopulateOpLocationToIdx((uint64_t)a1, v60);
  Espresso::AOT::EvaluatorClassicStates::PopulateOpToLayers(a1, v60);
  v52 = v63;
  if (v63)
  {
    v53 = (unint64_t *)&v63->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v67;
  if (v67)
  {
    v56 = (unint64_t *)&v67->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  return a1;
}

void sub_191141598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, Espresso::AOT::CostGraph *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;
  void *v26;

  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)(a10 + 3));
  v26 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v24 + 96) = v26;
    operator delete(v26);
  }
  Espresso::AOT::CostGraph::~CostGraph(a11);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v24 + 16);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::EvaluatorClassicStates::GetIsValidOnPlatform(Espresso::AOT::EvaluatorClassicStates *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 712) + 72;
}

void Espresso::AOT::EvaluatorClassicStates::PopulateOpLocationToIdx(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  MIL::IRObject ****v4;
  MIL::IRObject **v5;
  MIL::IRObject **v6;
  uint64_t v7;
  uint64_t Location;
  char v9;
  void *__p[2];
  char v11;
  uint64_t v12;

  v12 = 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v4 = (MIL::IRObject ****)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v5 = **v4;
  v6 = (*v4)[1];
  if (v5 != v6)
  {
    v7 = a1 + 16;
    do
    {
      Location = MIL::IRObject::GetLocation(*v5);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)Location + 24))(__p);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::string,unsigned long &>(v7, (uint64_t)__p, (uint64_t)__p, &v12);
      if (!v9)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Ops have duplicated location");
      ++v12;
      if (v11 < 0)
        operator delete(__p[0]);
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_19114174C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::EvaluatorClassicStates::PopulateOpToLayers(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  std::string::size_type size;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  _OWORD *v38;
  unint64_t *v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  _QWORD *v43;
  std::string __p;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v5 = (uint64_t)(*(_QWORD *)(*(_QWORD *)v4 + 8) - **(_QWORD **)v4) >> 4;
  v7 = a1[7];
  v6 = a1[8];
  v8 = a1 + 7;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
  if (v5 <= v9)
  {
    if (v5 < v9)
    {
      v10 = v7 + 24 * v5;
      if (v6 != v10)
      {
        v11 = a1[8];
        do
        {
          v13 = *(void **)(v11 - 24);
          v11 -= 24;
          v12 = v13;
          if (v13)
          {
            *(_QWORD *)(v6 - 16) = v12;
            operator delete(v12);
          }
          v6 = v11;
        }
        while (v11 != v10);
      }
      a1[8] = v10;
    }
  }
  else
  {
    std::vector<std::vector<unsigned long>>::__append((uint64_t)(a1 + 7), v5 - v9);
  }
  v14 = *(_QWORD *)(*a1 + 32);
  if (*(_QWORD *)(*a1 + 40) != v14)
  {
    v15 = 0;
    v16 = a1 + 2;
    v43 = a1 + 7;
    while (1)
    {
      Espresso::layer::debug_name(*(Espresso::layer **)(v14 + 16 * v15), &__p);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (!size)
        goto LABEL_41;
      v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v16, (uint64_t)&__p);
      if (!v18)
        goto LABEL_41;
      v19 = *v8 + 24 * v18[5];
      v21 = *(unint64_t **)(v19 + 8);
      v20 = *(_QWORD *)(v19 + 16);
      if ((unint64_t)v21 >= v20)
        break;
      *v21 = v15;
      v22 = (uint64_t)(v21 + 1);
LABEL_40:
      *(_QWORD *)(v19 + 8) = v22;
LABEL_41:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v15;
      v14 = *(_QWORD *)(*a1 + 32);
      if (v15 >= (*(_QWORD *)(*a1 + 40) - v14) >> 4)
        return;
    }
    v23 = a1;
    v24 = v16;
    v25 = *(unint64_t **)v19;
    v26 = (uint64_t)v21 - *(_QWORD *)v19;
    v27 = v26 >> 3;
    v28 = (v26 >> 3) + 1;
    if (v28 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v29 = v20 - (_QWORD)v25;
    if (v29 >> 2 > v28)
      v28 = v29 >> 2;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
      v30 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    if (v30)
    {
      if (v30 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v31 = operator new(8 * v30);
      v32 = (unint64_t *)&v31[8 * v27];
      *v32 = v15;
      v22 = (uint64_t)(v32 + 1);
      if (v21 != v25)
        goto LABEL_28;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t *)(8 * v27);
      *(_QWORD *)(8 * v27) = v15;
      v22 = 8 * v27 + 8;
      if (v21 != v25)
      {
LABEL_28:
        v33 = (char *)(v21 - 1) - (char *)v25;
        if (v33 >= 0x58)
        {
          v34 = (char *)v21 - &v31[v26];
          v16 = v24;
          a1 = v23;
          if (v34 >= 0x20)
          {
            v35 = (v33 >> 3) + 1;
            v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
            v37 = &v21[v36 / 0xFFFFFFFFFFFFFFF8];
            v32 = (unint64_t *)((char *)v32 - v36);
            v38 = &v31[8 * v27 - 16];
            v39 = v21 - 2;
            v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v41 = *(_OWORD *)v39;
              *(v38 - 1) = *((_OWORD *)v39 - 1);
              *v38 = v41;
              v38 -= 2;
              v39 -= 4;
              v40 -= 4;
            }
            while (v40);
            v21 = v37;
            if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_37;
          }
        }
        else
        {
          v16 = v24;
          a1 = v23;
        }
        do
        {
          v42 = *--v21;
          *--v32 = v42;
        }
        while (v21 != v25);
LABEL_37:
        *(_QWORD *)v19 = v32;
        *(_QWORD *)(v19 + 8) = v22;
        *(_QWORD *)(v19 + 16) = &v31[8 * v30];
        if (v25)
          operator delete(v25);
        v8 = v43;
        goto LABEL_40;
      }
    }
    v16 = v24;
    a1 = v23;
    goto LABEL_37;
  }
}

void sub_191141A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::EvaluatorClassicStates::GetNetwork(Espresso::AOT::EvaluatorClassicStates *this)
{
  return *(_QWORD *)this;
}

uint64_t Espresso::AOT::EvaluatorClassicStates::GetOpMappedLayers(Espresso::AOT::EvaluatorClassicStates *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 7);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v2) >> 3) <= a2)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Op index out of range");
  return v2 + 24 * a2;
}

uint64_t Espresso::AOT::EvaluatorClassicStates::GetOpMappedLayers(Espresso::AOT::EvaluatorClassicStates *this, const MIL::IROperation *a2)
{
  uint64_t Location;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;

  Location = MIL::IRObject::GetLocation(a2);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)Location + 24))(__p);
  v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((_QWORD *)this + 2, (uint64_t)__p);
  if (!v4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find operation index");
  v5 = v4[5];
  if (v9 < 0)
    operator delete(__p[0]);
  v6 = *((_QWORD *)this + 7);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 8) - v6) >> 3) <= v5)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Op index out of range");
  return v6 + 24 * v5;
}

void sub_191141B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::EvaluatorClassicStates::GetOpIndex(Espresso::AOT::EvaluatorClassicStates *this, const MIL::IROperation *a2)
{
  uint64_t Location;
  uint64_t *v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  Location = MIL::IRObject::GetLocation(a2);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)Location + 24))(__p);
  v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((_QWORD *)this + 2, (uint64_t)__p);
  if (!v4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find operation index");
  v5 = v4[5];
  if ((v8 & 0x80000000) == 0)
    return v4[5];
  operator delete(__p[0]);
  return v5;
}

void sub_191141C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL Espresso::AOT::EvaluatorClassicStates::LayerIsValid(Espresso::AOT::EvaluatorClassicStates *this, uint64_t a2)
{
  uint64_t **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  size_t v9;
  const void *v10;
  int v11;
  size_t v12;
  uint64_t *v13;
  size_t v14;
  int v15;
  _BOOL4 v16;
  int v17;
  _BOOL4 v18;
  uint64_t *v19;
  int v20;
  int v21;

  v2 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)this + 712) + 80);
  if (!v2)
    goto LABEL_32;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 16 * a2);
  v7 = *(_QWORD *)(v4 + 16);
  v5 = v4 + 16;
  v6 = v7;
  v8 = *(char *)(v5 + 23);
  v9 = v8 >= 0 ? *(unsigned __int8 *)(v5 + 23) : *(_QWORD *)(v5 + 8);
  v10 = (const void *)(v8 >= 0 ? v5 : v6);
  while (1)
  {
    while (1)
    {
      v11 = *((char *)v2 + 55);
      if (v11 >= 0)
        v12 = *((unsigned __int8 *)v2 + 55);
      else
        v12 = (size_t)v2[5];
      if (v11 >= 0)
        v13 = (uint64_t *)(v2 + 4);
      else
        v13 = v2[4];
      if (v12 >= v9)
        v14 = v9;
      else
        v14 = v12;
      v15 = memcmp(v10, v13, v14);
      v16 = v9 < v12;
      if (v15)
        v16 = v15 < 0;
      if (!v16)
        break;
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_32;
    }
    v17 = memcmp(v13, v10, v14);
    v18 = v12 < v9;
    if (v17)
      v18 = v17 < 0;
    if (!v18)
      break;
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_32;
  }
  v19 = v2[8];
  if (!v19)
LABEL_32:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v20 = *((_DWORD *)this + 20);
  while (1)
  {
    while (1)
    {
      v21 = *((_DWORD *)v19 + 7);
      if (v20 >= v21)
        break;
      v19 = (uint64_t *)*v19;
      if (!v19)
        goto LABEL_32;
    }
    if (v21 >= v20)
      return *((_DWORD *)v19 + 8) != 0;
    v19 = (uint64_t *)v19[1];
    if (!v19)
      goto LABEL_32;
  }
}

void Espresso::AOT::EvaluatorClassicStates::MarkDispatchUnitAsValid(Espresso::AOT::EvaluatorClassicStates *this, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (char *)*((_QWORD *)this + 12);
  v4 = *((_QWORD *)this + 13);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  v8 = (char *)*((_QWORD *)this + 11);
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = a2;
    v7 = (uint64_t)(v14 + 1);
    v16 = v5 - v8;
    if (v5 == v8)
      goto LABEL_20;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (_QWORD *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = a2;
  v7 = 8 * v9 + 8;
  v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    v17 = v16 - 8;
    if (v17 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 = (_QWORD *)((char *)v14 - v19);
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  *((_QWORD *)this + 11) = v14;
  *((_QWORD *)this + 12) = v7;
  *((_QWORD *)this + 13) = v15;
  if (v8)
    operator delete(v8);
LABEL_22:
  *((_QWORD *)this + 12) = v7;
}

BOOL Espresso::AOT::EvaluatorClassicStates::OperationIsValid(int8x8_t *this, const MIL::IROperation *a2)
{
  uint64_t Location;
  uint64_t *v4;
  unint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v15;

  if (!this[10].i8[4])
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("DispatchUnitIsValid can be called only after validation is done");
  Location = MIL::IRObject::GetLocation(a2);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)Location + 24))(__p);
  v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&this[2], (uint64_t)__p);
  if (!v4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find operation index");
  v5 = v4[5];
  if ((v15 & 0x80000000) == 0)
  {
    v6 = this[15];
    if (v6)
      goto LABEL_5;
LABEL_8:
    v9 = 0;
    return v9 != 0;
  }
  operator delete(__p[0]);
  v6 = this[15];
  if (!*(_QWORD *)&v6)
    goto LABEL_8;
LABEL_5:
  v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v5;
    if (v5 >= *(_QWORD *)&v6)
      v8 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v8 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v9 = *(_QWORD **)(*(_QWORD *)&this[14] + 8 * v8);
  if (v9)
  {
    v9 = (_QWORD *)*v9;
    if (v9)
    {
      if (v7.u32[0] < 2uLL)
      {
        v10 = *(_QWORD *)&v6 - 1;
        while (1)
        {
          v12 = v9[1];
          if (v5 == v12)
          {
            if (v9[2] == v5)
              return v9 != 0;
          }
          else if ((v12 & v10) != v8)
          {
            return 0;
          }
          v9 = (_QWORD *)*v9;
          if (!v9)
            return v9 != 0;
        }
      }
      do
      {
        v11 = v9[1];
        if (v5 == v11)
        {
          if (v9[2] == v5)
            return v9 != 0;
        }
        else
        {
          if (v11 >= *(_QWORD *)&v6)
            v11 %= *(_QWORD *)&v6;
          if (v11 != v8)
            return 0;
        }
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
  }
  return v9 != 0;
}

void sub_191142074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::EvaluatorClassicStates::GetValidationResult@<X0>(Espresso::AOT::EvaluatorClassicStates *this@<X0>, uint64_t *a2@<X8>)
{
  char *v3;
  unint64_t *v4;
  unint64_t *i;
  uint64_t v6;
  uint64_t result;

  v3 = (char *)this + 88;
  v4 = (unint64_t *)*((_QWORD *)this + 11);
  *((_BYTE *)this + 84) = 1;
  for (i = (unint64_t *)*((_QWORD *)this + 12); v4 != i; ++v4)
    std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)(v3 + 24), v4, v4);
  v6 = operator new();
  result = Espresso::AOT::ValidationResult::ValidationResult(v6, (uint64_t)v3);
  *a2 = v6;
  return result;
}

void sub_191142120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10B1C40E94733EDLL);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::EvaluatorClassicStates::OpLocationToIndex(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((_QWORD *)(a1 + 16), a2);
  if (!v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find operation index");
  return v2[5];
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::string,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  _BYTE *v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  void **v15;
  unsigned __int8 *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unsigned __int8 *j;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  unsigned __int8 *i;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v7 = (_BYTE *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v10 = v9;
  }
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v10);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v13)
        v4 = v11 % v13;
    }
    else
    {
      v4 = (v13 - 1) & v11;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        v17 = v7[23];
        if (v17 >= 0)
          v18 = v7[23];
        else
          v18 = *((_QWORD *)v7 + 1);
        if (v17 < 0)
          v7 = *(_BYTE **)v7;
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v24 = *((_QWORD *)v16 + 1);
            if (v24 == v12)
            {
              v25 = v16[39];
              if ((v25 & 0x80u) == 0)
                v26 = v16[39];
              else
                v26 = *((_QWORD *)v16 + 3);
              if (v26 == v18)
              {
                v27 = (const void **)(v16 + 16);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, *((_QWORD *)v16 + 3)))
                    return v16;
                }
                else
                {
                  if (!v16[39])
                    return v16;
                  for (i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    v27 = (const void **)((char *)v27 + 1);
                    if (!--v25)
                      return v16;
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v16 = *(unsigned __int8 **)v16;
            if (!v16)
              goto LABEL_51;
          }
        }
        do
        {
          v19 = *((_QWORD *)v16 + 1);
          if (v19 == v12)
          {
            v20 = v16[39];
            if ((v20 & 0x80u) == 0)
              v21 = v16[39];
            else
              v21 = *((_QWORD *)v16 + 3);
            if (v21 == v18)
            {
              v22 = (const void **)(v16 + 16);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, *((_QWORD *)v16 + 3)))
                  return v16;
              }
              else
              {
                if (!v16[39])
                  return v16;
                for (j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  v22 = (const void **)((char *)v22 + 1);
                  if (!--v20)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v19 >= v13)
              v19 %= v13;
            if (v19 != v4)
              break;
          }
          v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  v29 = (_QWORD *)(a1 + 16);
  v16 = (unsigned __int8 *)operator new(0x30uLL);
  v47[0] = v16;
  v47[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v12;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  v30 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v31 = *a4;
  *((_QWORD *)v16 + 4) = v30;
  *((_QWORD *)v16 + 5) = v31;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (v13 && (float)(v33 * (float)v13) >= v32)
  {
    v34 = *(_QWORD *)a1;
    v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v35)
    {
LABEL_54:
      *(_QWORD *)v16 = *v35;
LABEL_89:
      *v35 = v16;
      goto LABEL_90;
    }
  }
  else
  {
    v36 = 1;
    if (v13 >= 3)
      v36 = (v13 & (v13 - 1)) != 0;
    v37 = v36 | (2 * v13);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_65:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v13 = *(_QWORD *)(a1 + 8);
    v44 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        v4 = v12 % v13;
        v34 = *(_QWORD *)a1;
        v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v12 % v13));
        if (v35)
          goto LABEL_54;
      }
      else
      {
        v4 = v12;
        v34 = *(_QWORD *)a1;
        v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
        if (v35)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v44 & v12;
      v34 = *(_QWORD *)a1;
      v35 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v12));
      if (v35)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v16 = *v29;
  *v29 = v16;
  *(_QWORD *)(v34 + 8 * v4) = v29;
  if (*(_QWORD *)v16)
  {
    v45 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v45 >= v13)
        v45 %= v13;
    }
    else
    {
      v45 &= v13 - 1;
    }
    v35 = (_QWORD *)(*(_QWORD *)a1 + 8 * v45);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_191142588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Backends::CostModel::LSTMOpEstimator::EstimateComputeResources(const MIL::IROperation *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  Espresso::AOT *ParameterType;
  uint64_t v7;
  int v8;
  const MIL::IRValueType *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Espresso::AOT *v13;
  const MIL::IRValueType *v14;
  double YDimOfTensorFromIRValueType;
  uint64_t ParameterValue;
  _QWORD *v17;
  const std::string::value_type **v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double FlopCountForActivation;
  _QWORD *v24;
  char *v25;
  double FlopCountForMatMul;
  _QWORD *v27;
  char *v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  _QWORD *v35;
  const std::string::value_type **v36;
  __int128 v37;
  double v38;
  uint64_t v39;
  _QWORD *v40;
  const std::string::value_type **v41;
  __int128 v42;
  const MIL::IRValueType *v43;
  double v44;
  uint64_t v45;
  _QWORD *v46;
  const std::string::value_type **v47;
  __int128 v48;
  double v49;
  double v50;
  double v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  double v58;
  _QWORD *v59;
  double SizeInMbForDims;
  _QWORD *v61;
  double v62;
  _QWORD *v63;
  unint64_t v64;
  double v65;
  _QWORD *v66;
  const MIL::IRValueType *v67;
  double v68;
  double v69;
  double v70;
  _QWORD *v71;
  double v72;
  _QWORD *v73;
  double v74;
  const MIL::IRValueType *v75;
  const MIL::IRValueType *v76;
  double SizeInMbForShape;
  double v78;
  double v79;
  void *v80;
  const MIL::IRValueType *v81;
  unint64_t v82;
  unint64_t v83;
  Espresso::AOT *OutputType;
  _QWORD v85[3];
  _QWORD v86[3];
  _QWORD v87[3];
  _QWORD v88[3];
  char *v89[4];
  std::string __p;
  void *v91[2];
  char v92;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *a2 = v5;
  v92 = 1;
  LOWORD(v91[0]) = 120;
  ParameterType = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  if (!(*(uint64_t (**)(Espresso::AOT *))(*(_QWORD *)ParameterType + 24))(ParameterType))
    return;
  v7 = (*(uint64_t (**)(Espresso::AOT *))(*(_QWORD *)ParameterType + 24))(ParameterType);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  OutputType = (Espresso::AOT *)MIL::IROperation::GetOutputType(a1);
  Espresso::AOT::GetDimsOfTensorFromIRValueType(ParameterType, v9, v91);
  v10 = *(_QWORD *)v91[0];
  v11 = *((_QWORD *)v91[0] + 1);
  v12 = *((_QWORD *)v91[0] + 2);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "weight_ih");
  v13 = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  YDimOfTensorFromIRValueType = Espresso::AOT::GetYDimOfTensorFromIRValueType(v13, v14);
  HIBYTE(v89[2]) = 20;
  strcpy((char *)v89, "recurrent_activation");
  memset(v88, 0, sizeof(v88));
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue)
    ParameterValue = MEMORY[0x19401C3DC](ParameterValue);
  v17 = v88;
  if (ParameterValue)
    v18 = (const std::string::value_type **)ParameterValue;
  else
    v18 = (const std::string::value_type **)v88;
  if (*((char *)v18 + 23) < 0)
  {
    if (ParameterValue)
      v17 = (_QWORD *)ParameterValue;
    std::string::__init_copy_ctor_external(&__p, *v18, v17[1]);
  }
  else
  {
    v19 = *(_OWORD *)v18;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v18[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
  }
  v83 = v10;
  v20 = (unint64_t)YDimOfTensorFromIRValueType;
  v21 = (unint64_t)YDimOfTensorFromIRValueType >> 2;
  if (SHIBYTE(v89[2]) < 0)
    operator delete(v89[0]);
  v22 = v21 * v11;
  FlopCountForActivation = Espresso::AOT::GetFlopCountForActivation((uint64_t *)&__p, v21 * v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = operator new(0x10uLL);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v24 + 2);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v24 + 2);
  *v24 = v11;
  v24[1] = v12;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
  v25 = (char *)operator new(0x10uLL);
  v89[1] = v25 + 16;
  v89[2] = v25 + 16;
  *(_QWORD *)v25 = v12;
  *((_QWORD *)v25 + 1) = v21;
  v89[0] = v25;
  FlopCountForMatMul = Espresso::AOT::GetFlopCountForMatMul(&__p.__r_.__value_.__l.__data_, 0, v89, 0);
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v27 = operator new(0x10uLL);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v27 + 2);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v27 + 2);
  *v27 = v12;
  v27[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v28 = (char *)operator new(0x10uLL);
  v89[1] = v28 + 16;
  v89[2] = v28 + 16;
  *(_QWORD *)v28 = v21;
  *((_QWORD *)v28 + 1) = v21;
  v89[0] = v28;
  v29 = Espresso::AOT::GetFlopCountForMatMul(&__p.__r_.__value_.__l.__data_, 0, v89, 0);
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
  v82 = v20;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "bias");
  v30 = MIL::IROperation::TryGetParameterValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v30)
    v31 = (double)v22;
  else
    v31 = 0.0;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&__p, "peephole");
  v32 = MIL::IROperation::TryGetParameterValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v32)
    v33 = (double)v22;
  else
    v33 = 0.0;
  HIBYTE(v89[2]) = 15;
  strcpy((char *)v89, "cell_activation");
  memset(v87, 0, sizeof(v87));
  v34 = MIL::IROperation::TryGetParameterValue();
  if (v34)
    v34 = MEMORY[0x19401C3DC](v34);
  v35 = v87;
  if (v34)
    v36 = (const std::string::value_type **)v34;
  else
    v36 = (const std::string::value_type **)v87;
  if (*((char *)v36 + 23) < 0)
  {
    if (v34)
      v35 = (_QWORD *)v34;
    std::string::__init_copy_ctor_external(&__p, *v36, v35[1]);
  }
  else
  {
    v37 = *(_OWORD *)v36;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v36[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
  }
  if (SHIBYTE(v89[2]) < 0)
    operator delete(v89[0]);
  v38 = Espresso::AOT::GetFlopCountForActivation((uint64_t *)&__p, v21 * v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  HIBYTE(v89[2]) = 10;
  strcpy((char *)v89, "activation");
  memset(v86, 0, sizeof(v86));
  v39 = MIL::IROperation::TryGetParameterValue();
  if (v39)
    v39 = MEMORY[0x19401C3DC](v39);
  v40 = v86;
  if (v39)
    v41 = (const std::string::value_type **)v39;
  else
    v41 = (const std::string::value_type **)v86;
  if (*((char *)v41 + 23) < 0)
  {
    if (v39)
      v40 = (_QWORD *)v39;
    std::string::__init_copy_ctor_external(&__p, *v41, v40[1]);
  }
  else
  {
    v42 = *(_OWORD *)v41;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v41[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v42;
  }
  if (SHIBYTE(v89[2]) < 0)
    operator delete(v89[0]);
  v44 = Espresso::AOT::GetFlopCountForActivation((uint64_t *)&__p, v21 * v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(double *)(v5 + 56) = (double)v12;
  *(double *)(v5 + 72) = Espresso::AOT::GetXDimOfTensorFromIRValueType(OutputType, v43);
  HIBYTE(v89[2]) = 9;
  strcpy((char *)v89, "direction");
  memset(v85, 0, sizeof(v85));
  v45 = MIL::IROperation::TryGetParameterValue();
  if (v45)
    v45 = MEMORY[0x19401C3DC](v45);
  v46 = v85;
  if (v45)
    v47 = (const std::string::value_type **)v45;
  else
    v47 = (const std::string::value_type **)v85;
  if (*((char *)v47 + 23) < 0)
  {
    if (v45)
      v46 = (_QWORD *)v45;
    std::string::__init_copy_ctor_external(&__p, *v47, v46[1]);
  }
  else
  {
    v48 = *(_OWORD *)v47;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v47[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
  }
  v49 = FlopCountForActivation + (double)v22 + v33;
  v50 = v44 + v38 + (v29 + FlopCountForMatMul + v31) * 4.0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v51 = 1.0;
    if (__p.__r_.__value_.__l.__size_ == 13)
    {
      v55 = 0x6269646972656374;
      v56 = bswap64(*(_QWORD *)__p.__r_.__value_.__l.__data_);
      if (v56 == 0x6269646972656374
        && (v55 = 0x656374696F6E616CLL,
            v56 = bswap64(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 5)),
            v56 == 0x656374696F6E616CLL))
      {
        v57 = 0;
      }
      else if (v56 < v55)
      {
        v57 = -1;
      }
      else
      {
        v57 = 1;
      }
      if (v57)
        v51 = 1.0;
      else
        v51 = 2.0;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    v58 = v50 + v49 * 3.0;
    if ((SHIBYTE(v89[2]) & 0x80000000) == 0)
      goto LABEL_88;
  }
  else
  {
    v51 = 1.0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 13)
    {
      v52 = 0x6269646972656374;
      v53 = bswap64(__p.__r_.__value_.__r.__words[0]);
      if (v53 == 0x6269646972656374
        && (v52 = 0x656374696F6E616CLL,
            v53 = bswap64(*(unint64_t *)((char *)__p.__r_.__value_.__r.__words + 5)),
            v53 == 0x656374696F6E616CLL))
      {
        v54 = 0;
      }
      else if (v53 < v52)
      {
        v54 = -1;
      }
      else
      {
        v54 = 1;
      }
      if (v54)
        v51 = 1.0;
      else
        v51 = 2.0;
    }
    v58 = v50 + v49 * 3.0;
    if ((SHIBYTE(v89[2]) & 0x80000000) == 0)
      goto LABEL_88;
  }
  operator delete(v89[0]);
LABEL_88:
  *(double *)v5 = (double)v83 * 0.000000001 * v51 * v58;
  v59 = operator new(0x10uLL);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v59 + 2);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v59 + 2);
  *v59 = v11;
  v59[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
  SizeInMbForDims = Espresso::AOT::GetSizeInMbForDims(&__p.__r_.__value_.__l.__data_, v8);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v61 = operator new(0x10uLL);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v61 + 2);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v61 + 2);
  *v61 = v11;
  v61[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
  v62 = Espresso::AOT::GetSizeInMbForDims(&__p.__r_.__value_.__l.__data_, v8);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v63 = operator new(0x10uLL);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v63 + 2);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v63 + 2);
  v64 = v82 & 0xFFFFFFFFFFFFFFFCLL;
  *v63 = v82 & 0xFFFFFFFFFFFFFFFCLL;
  v63[1] = v12;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
  v65 = Espresso::AOT::GetSizeInMbForDims(&__p.__r_.__value_.__l.__data_, v8);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v66 = operator new(0x10uLL);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v66 + 2);
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v66 + 2);
  *v66 = v64;
  v66[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
  v68 = Espresso::AOT::GetSizeInMbForDims(&__p.__r_.__value_.__l.__data_, v8);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v69 = 0.0;
  v70 = 0.0;
  if (v32)
  {
    v71 = operator new(8uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
    *v71 = 3 * v21;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v71 + 1);
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v71 + 1);
    v72 = Espresso::AOT::GetSizeInMbForDims(&__p.__r_.__value_.__l.__data_, v8);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v70 = v72 * v51;
  }
  if (v30)
  {
    v73 = operator new(8uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
    *v73 = v64;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v73 + 1);
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v73 + 1);
    v74 = Espresso::AOT::GetSizeInMbForDims(&__p.__r_.__value_.__l.__data_, v8);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v69 = v74 * v51;
  }
  *(double *)(v5 + 24) = v70 + (v62 + SizeInMbForDims + v65 + v68) * v51 + v69;
  *(double *)(v5 + 32) = Espresso::AOT::GetSizeInMbForShape(ParameterType, v67);
  SizeInMbForShape = Espresso::AOT::GetSizeInMbForShape(OutputType, v75);
  *(double *)(v5 + 40) = SizeInMbForShape;
  v78 = *(double *)(v5 + 32) + SizeInMbForShape + *(double *)(v5 + 24);
  *(double *)(v5 + 8) = v78;
  v79 = 0.0;
  if (v78 > 0.0)
    v79 = *(double *)v5 * 1000.0 / v78;
  *(double *)(v5 + 48) = v79;
  Espresso::AOT::GetDimsOfTensorFromIRValueType(OutputType, v76, &__p);
  v80 = (void *)__p.__r_.__value_.__r.__words[0];
  *(double *)(v5 + 88) = (double)*(unint64_t *)__p.__r_.__value_.__l.__data_;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v80;
  operator delete(v80);
  *(double *)(v5 + 16) = *(double *)(v5 + 24) * 1024.0 / *(double *)(v5 + 88);
  *(double *)(v5 + 136) = Espresso::AOT::GetWU16EfficiencyForInputType(ParameterType, v81);
  if (v91[0])
  {
    v91[1] = v91[0];
    operator delete(v91[0]);
  }
}

void sub_191142EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void *v39;
  uint64_t v40;

  if (__p)
    operator delete(__p);
  v39 = *(void **)(v37 - 176);
  if (v39)
  {
    *(_QWORD *)(v37 - 168) = v39;
    operator delete(v39);
    v40 = *a9;
    *a9 = 0;
    if (!v40)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v40 = *a9;
    *a9 = 0;
    if (!v40)
      goto LABEL_5;
  }
  MEMORY[0x19401CD90](v40, 0x1000C401CC6BE04);
  _Unwind_Resume(exception_object);
}

float Espresso::AOT::DTrees::reluAneFp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneIp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneJp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneKp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneGp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneHp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuFp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuIp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuJp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuKp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuGp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuHp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuFp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuIp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuJp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuKp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuGp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuHp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneCp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneDp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluAneEp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuCp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuDp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluCpuEp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuCp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuDp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::reluGpuEp()
{
  return 50.0;
}

__n128 Espresso::AOT::Validators::BnnsValidator::BnnsValidator(_QWORD *a1, __n128 *a2, char a3)
{
  _QWORD *v5;
  __n128 result;

  v5 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  *v5 = &off_1E2DA01D8;
  result = *a2;
  *(__n128 *)(v5 + 1) = *a2;
  *((_BYTE *)v5 + 24) = a3;
  return result;
}

{
  _QWORD *v5;
  __n128 result;

  v5 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  *v5 = &off_1E2DA01D8;
  result = *a2;
  *(__n128 *)(v5 + 1) = *a2;
  *((_BYTE *)v5 + 24) = a3;
  return result;
}

void Espresso::AOT::Validators::BnnsValidator::Validate(E5Common::E5PlatformManager *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void **v11;
  void *v12;
  void *v13;
  void **v14;
  void *__p[2];
  void *v16[2];
  int v17;
  std::string v18;

  if (*((_BYTE *)a1 + 24))
  {
    *((_BYTE *)&v18.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v18, "local");
  }
  else
  {
    v8 = E5Common::E5PlatformManager::Instance(a1);
    v9 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 24))(v8, (_BYTE *)a1 + 8);
    if (*(char *)(v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
    }
    else
    {
      v10 = *(_OWORD *)v9;
      v18.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
    }
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v16 = 0u;
  v17 = 1065353216;
  Espresso::AOT::Utils::MakeValidationInput(0, a2, a3, (uint64_t *)&v18, (uint64_t)__p);
  v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0)
LABEL_16:
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  v13 = (void *)BNNSGraphE5Validate();
  Espresso::AOT::Utils::ParseValidationOutput(0, v13, a4);

  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_191143374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::BnnsValidator::~BnnsValidator(Espresso::AOT::Validators::BnnsValidator *this)
{
  *(_QWORD *)this = &off_1E2DA01D8;
  E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::BnnsValidator *)((char *)this + 8));
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
}

{
  *(_QWORD *)this = &off_1E2DA01D8;
  E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::BnnsValidator *)((char *)this + 8));
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
  JUMPOUT(0x19401CD90);
}

float Espresso::AOT::DTrees::max_poolAneCp(uint64_t a1)
{
  float result;

  result = 26.428;
  if (*(double *)(a1 + 48) > 1.8035)
    return 33.926;
  return result;
}

float Espresso::AOT::DTrees::max_poolAneDp(uint64_t a1)
{
  float result;

  result = 28.924;
  if (*(double *)(a1 + 48) > 1.8035)
    return 253.04;
  return result;
}

float Espresso::AOT::DTrees::max_poolAneEp(uint64_t a1)
{
  float result;

  result = 26.154;
  if (*(double *)(a1 + 48) > 1.8035)
    return 48.755;
  return result;
}

float Espresso::AOT::DTrees::max_poolCpuCp(uint64_t a1)
{
  float result;

  result = 12.169;
  if (*(double *)(a1 + 48) > 1.8035)
    return 11.406;
  return result;
}

float Espresso::AOT::DTrees::max_poolCpuDp(uint64_t a1)
{
  float result;

  result = 12.17;
  if (*(double *)(a1 + 48) > 1.8035)
    return 11.793;
  return result;
}

float Espresso::AOT::DTrees::max_poolCpuEp(uint64_t a1)
{
  float result;

  result = 18.255;
  if (*(double *)(a1 + 48) > 1.8035)
    return 13.36;
  return result;
}

float Espresso::AOT::DTrees::max_poolGpuCp(uint64_t a1)
{
  float result;

  result = 10.934;
  if (*(double *)(a1 + 48) > 1.8035)
    return 25.255;
  return result;
}

float Espresso::AOT::DTrees::max_poolGpuDp(uint64_t a1)
{
  float result;

  result = 14.604;
  if (*(double *)(a1 + 48) > 1.8035)
    return 33.889;
  return result;
}

float Espresso::AOT::DTrees::max_poolGpuEp(uint64_t a1)
{
  float result;

  result = 16.677;
  if (*(double *)(a1 + 48) > 1.8035)
    return 37.063;
  return result;
}

_QWORD *Espresso::AOT::E5BackendToE5RTLoweringPass::E5BackendToE5RTLoweringPass(_QWORD *a1, const Espresso::AOT::AOTCompilerOptions *a2)
{
  _QWORD *v4;

  v4 = Espresso::AOT::AbstractMILPass::AbstractMILPass(a1);
  *v4 = &off_1E2DA0958;
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(v4 + 1), a2);
  return a1;
}

{
  _QWORD *v4;

  v4 = Espresso::AOT::AbstractMILPass::AbstractMILPass(a1);
  *v4 = &off_1E2DA0958;
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(v4 + 1), a2);
  return a1;
}

void sub_19114360C(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILPass *v1;

  Espresso::AOT::AbstractMILPass::~AbstractMILPass(v1);
  _Unwind_Resume(a1);
}

void sub_19114365C(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILPass *v1;

  Espresso::AOT::AbstractMILPass::~AbstractMILPass(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5BackendToE5RTLoweringPass::RunCompilerBackend(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  std::string::size_type v11;
  std::runtime_error *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::logic_error *exception;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  _QWORD v23[2];
  std::string __dst;
  std::string v25;
  std::string v26;
  std::string v27;
  _BYTE v28[136];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v28, (const Espresso::AOT::AOTCompilerOptions *)(a1 + 8));
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v27 = *(std::string *)a5;
  Espresso::AOT::AOTCompilerOptions::SetOutput((uint64_t)v28, (__n128 *)&v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  switch(a2)
  {
    case 2u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForANE,Espresso::AOT::AOTCompilerOptions &>((const Espresso::AOT::AOTCompilerOptions *)v28, (uint64_t *)&v26);
      break;
    case 3u:
    case 6u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForClassicCpu,Espresso::AOT::AOTCompilerOptions &>((const Espresso::AOT::AOTCompilerOptions *)v28, (uint64_t *)&v26);
      break;
    case 4u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions &>((const Espresso::AOT::AOTCompilerOptions *)v28, (uint64_t *)&v26);
      break;
    case 5u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMPSGraph,Espresso::AOT::AOTCompilerOptions &>((const Espresso::AOT::AOTCompilerOptions *)v28, (uint64_t *)&v26);
      break;
    case 7u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForJitCall,Espresso::AOT::AOTCompilerOptions &>((const Espresso::AOT::AOTCompilerOptions *)v28, (uint64_t *)&v26);
      break;
    case 8u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForBnns,Espresso::AOT::AOTCompilerOptions &>((const Espresso::AOT::AOTCompilerOptions *)v28, (uint64_t *)&v26);
      break;
    case 9u:
      std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForE5MinimalCpu,Espresso::AOT::AOTCompilerOptions &>((const Espresso::AOT::AOTCompilerOptions *)v28, (uint64_t *)&v26);
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v23[0] = Espresso::AOT::GetBackendName(a2);
      v23[1] = v18;
      std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)v23);
      v19 = std::string::insert(&__dst, 0, "Found unsupported backend: ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v25, ".");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v26);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v11 = v26.__r_.__value_.__r.__words[0];
  (*(void (**)(std::string::size_type, uint64_t, uint64_t))(*(_QWORD *)v26.__r_.__value_.__l.__data_ + 32))(v26.__r_.__value_.__r.__words[0], a3, a4);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v11 + 24))(v11);
  if (a6[1] - *a6 != 24)
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&__dst, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[1] - *a6) >> 3));
    v13 = std::string::insert(&__dst, 0, "Expected one artifact (");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v25, " != 1).");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v12, &v26);
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  (*(void (**)(std::string::size_type))(*(_QWORD *)v11 + 8))(v11);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v28);
}

void sub_191143954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  void *v38;
  int v39;

  if (a30 < 0)
  {
    operator delete(a25);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if (a17 < 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if (a17 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v39 & 1) == 0)
    {
LABEL_10:
      Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a38);
      _Unwind_Resume(a1);
    }
LABEL_9:
    __cxa_free_exception(v38);
    Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a38);
    _Unwind_Resume(a1);
  }
LABEL_8:
  if (!v39)
    goto LABEL_10;
  goto LABEL_9;
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForClassicCpu,Espresso::AOT::AOTCompilerOptions &>(const Espresso::AOT::AOTCompilerOptions *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *__p[2];
  void *v9[2];
  int v10;
  _BYTE v11[136];

  v4 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11, a1);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 1065353216;
  Espresso::AOT::MILCompilerForClassicCpu::MILCompilerForClassicCpu(v4, v11, __p);
  *a2 = v4;
  v5 = (void **)v9[0];
  if (v9[0])
  {
    do
    {
      v7 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0)
LABEL_10:
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11);
}

void sub_191143C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C40BA349698);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForBnns,Espresso::AOT::AOTCompilerOptions &>(const Espresso::AOT::AOTCompilerOptions *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *__p[2];
  void *v9[2];
  int v10;
  _BYTE v11[136];

  v4 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11, a1);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 1065353216;
  Espresso::AOT::MILCompilerForBnns::MILCompilerForBnns(v4, v11, __p);
  *a2 = v4;
  v5 = (void **)v9[0];
  if (v9[0])
  {
    do
    {
      v7 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0)
LABEL_10:
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11);
}

void sub_191143D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C4030463251);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForE5MinimalCpu,Espresso::AOT::AOTCompilerOptions &>(const Espresso::AOT::AOTCompilerOptions *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *__p[2];
  void *v9[2];
  int v10;
  _BYTE v11[136];

  v4 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11, a1);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 1065353216;
  Espresso::AOT::MILCompilerForE5MinimalCpu::MILCompilerForE5MinimalCpu(v4, v11, __p);
  *a2 = v4;
  v5 = (void **)v9[0];
  if (v9[0])
  {
    do
    {
      v7 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0)
LABEL_10:
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11);
}

void sub_191143E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C408EF31D99);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMPSGraph,Espresso::AOT::AOTCompilerOptions &>(const Espresso::AOT::AOTCompilerOptions *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *__p[2];
  void *v9[2];
  int v10;
  _BYTE v11[136];

  v4 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11, a1);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 1065353216;
  Espresso::AOT::MILCompilerForMPSGraph::MILCompilerForMPSGraph(v4, v11, __p);
  *a2 = v4;
  v5 = (void **)v9[0];
  if (v9[0])
  {
    do
    {
      v7 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0)
LABEL_10:
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11);
}

void sub_191143FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C406EAB50E7);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions &>(const Espresso::AOT::AOTCompilerOptions *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *__p[2];
  void *v9[2];
  int v10;
  _BYTE v11[136];

  v4 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11, a1);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 1065353216;
  Espresso::AOT::MILCompilerForMLC::MILCompilerForMLC(v4, v11, __p);
  *a2 = v4;
  v5 = (void **)v9[0];
  if (v9[0])
  {
    do
    {
      v7 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0)
LABEL_10:
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11);
}

void sub_1911440C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C40CB988097);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForJitCall,Espresso::AOT::AOTCompilerOptions &>(const Espresso::AOT::AOTCompilerOptions *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *__p[2];
  void *v9[2];
  int v10;
  _BYTE v11[136];

  v4 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11, a1);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 1065353216;
  Espresso::AOT::MILCompilerForJitCall::MILCompilerForJitCall(v4, v11, __p);
  *a2 = v4;
  v5 = (void **)v9[0];
  if (v9[0])
  {
    do
    {
      v7 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0)
LABEL_10:
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11);
}

void sub_1911441DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C408EF31D99);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForANE,Espresso::AOT::AOTCompilerOptions &>(const Espresso::AOT::AOTCompilerOptions *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *__p[2];
  void *v9[2];
  int v10;
  _BYTE v11[136];

  v4 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11, a1);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 1065353216;
  Espresso::AOT::MILCompilerForANE::MILCompilerForANE(v4, v11, __p);
  *a2 = v4;
  v5 = (void **)v9[0];
  if (v9[0])
  {
    do
    {
      v7 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0)
LABEL_10:
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v5);
      v5 = v7;
    }
    while (v7);
  }
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v11);
}

void sub_1911442F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x19401CD90](v14, 0x10F3C401F567A0FLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5BackendToE5RTLoweringPass::MakeE5RTInferenceOp(int a1@<W2>, MIL::IRObject *a2@<X3>, std::string **a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, const std::string **a6@<X7>, _QWORD *a7@<X8>)
{
  MIL::IRObject *v10;
  uint64_t v13;
  E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *v14;
  const char *OpsetName;
  unint64_t v16;
  const char *v17;
  void *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  MIL::IRTensorValueType *Scalar;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  std::string *v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  MIL::IRValue *Attribute;
  MIL::IRValue *v38;
  std::string *v39;
  __int128 v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  std::string *v46;
  __int128 v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  std::string *v53;
  __int128 v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  unint64_t *v58;
  unint64_t v59;
  std::string *v60;
  __int128 v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  std::string *v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  __int128 v71;
  uint64_t *v72;
  unint64_t v73;
  std::string *v74;
  __int128 v75;
  MIL::IRTensorValueType *v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 v79;
  unint64_t *v80;
  unint64_t v81;
  std::string *v82;
  char v83;
  std::string *v84;
  std::string::size_type v85;
  std::__fs::filesystem::path::__string_view v86;
  std::string *v87;
  std::basic_string_view<_CharT, _Traits>::size_type v88;
  std::basic_string_view<_CharT, _Traits>::size_type v89;
  std::__fs::filesystem::path::__string_view v90;
  int v91;
  std::string *v92;
  __int128 v93;
  std::__shared_weak_count *v94;
  std::string::size_type v95;
  std::__shared_weak_count *v96;
  std::string::size_type v97;
  std::__shared_weak_count *v98;
  std::string::size_type v99;
  std::__shared_weak_count *v100;
  std::string::size_type v101;
  std::__shared_weak_count *v102;
  std::string::size_type v103;
  std::__shared_weak_count *v104;
  std::string::size_type v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::string::size_type v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::string::size_type v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::string::size_type v128;
  std::__shared_weak_count *v129;
  unint64_t *p_shared_owners;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::string::size_type v135;
  uint64_t v136;
  const std::string *v137;
  char *v138;
  int64_t v139;
  uint64_t v140;
  int v141;
  const std::string *v142;
  int64_t size;
  char *v144;
  int v145;
  void *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  int v150;
  std::string::size_type v151;
  int v152;
  size_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::string::size_type v163;
  const std::string *v164;
  std::string *v165;
  std::__shared_weak_count *v166;
  std::string::size_type v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::string::size_type v174;
  uint64_t v175;
  uint64_t Function;
  uint64_t v177;
  char ***v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::string::size_type v192;
  MIL::IRListValue *v193;
  _QWORD *Values;
  std::__shared_weak_count *v195;
  std::string::size_type v196;
  std::__shared_weak_count *v197;
  std::string::size_type v198;
  std::string *v199;
  __int128 v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::string::size_type v207;
  std::__shared_weak_count *v208;
  std::string::size_type v209;
  uint64_t *v210;
  unint64_t v211;
  uint64_t *v212;
  unint64_t v213;
  std::string::size_type v214;
  std::string::size_type v215;
  std::string *v216;
  __int128 v217;
  __int128 *v218;
  _QWORD *v219;
  std::__shared_weak_count *v220;
  std::string::size_type v221;
  std::__shared_weak_count *v222;
  std::string::size_type v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::string::size_type v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  std::string *v234;
  __int128 v235;
  std::string *v236;
  uint64_t Name;
  std::string *v238;
  __int128 v239;
  char *v240;
  _QWORD *v241;
  char *v242;
  _QWORD *v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  BOOL v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  unint64_t j;
  std::string *v253;
  uint64_t v254;
  std::string *v255;
  __int128 v256;
  std::string *v257;
  uint64_t v258;
  std::string *v259;
  __int128 v260;
  std::string *v261;
  _BYTE *v262;
  char *v263;
  std::__shared_weak_count *v264;
  std::__shared_weak_count_vtbl *v265;
  uint64_t *v266;
  unint64_t v267;
  uint64_t *v268;
  unint64_t v269;
  std::string::size_type v270;
  std::string::size_type v271;
  std::string::size_type v272;
  void *v273;
  void **v274;
  void **v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  void *v279;
  unint64_t *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  void *v287;
  std::__shared_weak_count *v288;
  std::__shared_weak_count_vtbl *v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count_vtbl *v296;
  std::string::size_type v297;
  std::string::size_type v298;
  void *v299;
  std::string *v300;
  std::string *v301;
  void *v302;
  std::string *v303;
  std::string *v304;
  void *v305;
  unint64_t *v306;
  __int128 v307;
  uint64_t v308;
  uint64_t v309;
  std::string *v310;
  std::string *p_p;
  std::string *v312;
  __int128 v313;
  std::__shared_weak_count *v314;
  std::string::size_type v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::string::size_type v322;
  char *v323;
  uint64_t *v324;
  unint64_t v325;
  uint64_t *v326;
  unint64_t v327;
  std::string::size_type v328;
  MIL::IRListValue *v329;
  std::string::size_type *v330;
  uint64_t v331;
  uint64_t v332;
  std::string::size_type *v333;
  std::string::size_type v334;
  std::string::size_type v335;
  unint64_t *v336;
  unint64_t v337;
  int v338;
  _QWORD *v339;
  std::string::size_type v340;
  _QWORD *v341;
  std::string::size_type v342;
  std::string::size_type v343;
  char *v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  char *v348;
  unint64_t *v349;
  char *v350;
  unint64_t *v351;
  std::string::size_type v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  _QWORD *v356;
  std::string::size_type v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  MIL::IRListValue *v364;
  std::string::size_type v365;
  std::string::size_type v366;
  void *v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  std::string *v371;
  __int128 *v372;
  __int128 v373;
  std::__shared_weak_count *v374;
  std::string::size_type v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  std::string::size_type v382;
  std::__shared_weak_count *v383;
  std::string::size_type v384;
  uint64_t *v385;
  unint64_t v386;
  uint64_t *v387;
  unint64_t v388;
  std::string::size_type v389;
  MIL::UnknownLocation *v390;
  std::__shared_weak_count *v391;
  std::string::size_type v392;
  unint64_t *p_size;
  unint64_t v394;
  void **v395;
  void **v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  void *v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  uint64_t *v404;
  unint64_t v405;
  std::string::size_type v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  uint64_t *i;
  std::string::size_type v411;
  std::string::size_type v412;
  _QWORD *v413;
  std::__shared_weak_count *v414;
  std::string::size_type v415;
  std::string *v416;
  std::string::size_type v417;
  std::string::size_type v418;
  int v419;
  uint64_t v420;
  unsigned __int8 *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  __int128 *v425;
  _OWORD *v426;
  __int128 v427;
  uint64_t *v428;
  unint64_t v429;
  uint64_t *v430;
  unint64_t v431;
  std::string::size_type v432;
  std::string::size_type v433;
  void *v434;
  MIL::Attributes::BlobFileMutabilityInfo *v435;
  std::string::size_type v436;
  std::string::size_type v437;
  void *v438;
  void *v439;
  std::string *v440;
  unint64_t *v441;
  unint64_t v442;
  unint64_t *v443;
  std::__shared_weak_count *v444;
  std::string::size_type v445;
  std::__shared_weak_count *v446;
  unint64_t *v447;
  unint64_t v448;
  std::__shared_weak_count *v449;
  unint64_t *v450;
  unint64_t v451;
  std::string::size_type v452;
  uint64_t v453;
  std::__shared_weak_count *v454;
  std::string::size_type v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  std::__shared_weak_count *v459;
  unint64_t *v460;
  unint64_t v461;
  std::string::size_type v462;
  uint64_t v463;
  std::__shared_weak_count *v464;
  std::string::size_type v465;
  std::__shared_weak_count *v466;
  std::string::size_type v467;
  uint64_t *v468;
  unint64_t v469;
  uint64_t *v470;
  unint64_t v471;
  std::string::size_type v472;
  char *v473;
  uint64_t *v474;
  unint64_t v475;
  uint64_t *v476;
  unint64_t v477;
  std::string::size_type v478;
  std::string::size_type v479;
  std::string *v480;
  __int128 v481;
  __int128 *v482;
  _QWORD *v483;
  std::__shared_weak_count *v484;
  std::string::size_type v485;
  uint64_t *v486;
  unint64_t v487;
  uint64_t *v488;
  unint64_t v489;
  std::string::size_type v490;
  std::string::size_type v491;
  std::string::size_type v492;
  void *v493;
  void **v494;
  void **v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  void *v499;
  unint64_t *v500;
  std::__shared_weak_count *v501;
  std::string::size_type v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  unint64_t v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  std::string::size_type v509;
  unint64_t *v510;
  std::__shared_weak_count *v511;
  std::string::size_type v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  std::string::size_type v519;
  unint64_t *v520;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  uint64_t *v525;
  unint64_t v526;
  _QWORD *v527;
  _QWORD *v528;
  _QWORD *v529;
  uint64_t v530;
  MIL::IRNamedValueType **v531;
  MIL::IRNamedValueType **v532;
  uint64_t v533;
  __int128 v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  _OWORD *v540;
  std::string::size_type v541;
  MIL::IRArgument *v542;
  unint64_t *v543;
  unint64_t v544;
  uint64_t v545;
  __int128 v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  std::__shared_weak_count *v550;
  unint64_t *v551;
  unint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  std::string *v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  _QWORD *v560;
  _QWORD *v561;
  std::logic_error *v562;
  std::logic_error *exception;
  std::string *v564;
  __int128 v565;
  std::logic_error *v566;
  std::logic_error *v567;
  std::string::size_type v568;
  std::string *v569;
  std::string *v570;
  __int128 v571;
  std::string *v572;
  __int128 v573;
  std::runtime_error *v574;
  std::runtime_error *v575;
  std::runtime_error *v576;
  std::runtime_error *v577;
  std::runtime_error *v578;
  std::runtime_error *v579;
  std::runtime_error *v580;
  std::runtime_error *v581;
  std::runtime_error *v582;
  std::runtime_error *v583;
  std::logic_error *v584;
  std::string *v585;
  __int128 v586;
  uint64_t v588;
  MIL::IRObject *v589;
  std::string v590;
  std::__shared_weak_count *v591;
  uint64_t v592;
  std::__shared_weak_count *v593;
  std::string v594;
  std::__shared_weak_count *v595;
  std::string v596;
  std::string v597;
  std::__shared_weak_count *v598;
  uint64_t v599;
  std::__shared_weak_count *v600;
  std::string v601;
  std::string::size_type v602;
  std::__shared_weak_count *v603;
  void *v604[3];
  std::__shared_weak_count *v605;
  __int128 v606;
  std::string::size_type v607;
  std::__shared_weak_count *v608;
  void *v609[2];
  char v610;
  std::__shared_weak_count *v611;
  std::string::size_type v612;
  std::__shared_weak_count *v613;
  char v614[23];
  char v615;
  std::__shared_weak_count *v616;
  std::string::size_type v617;
  std::__shared_weak_count *v618;
  char v619[23];
  char v620;
  std::__shared_weak_count *v621;
  std::string v622;
  std::string::size_type v623;
  std::__shared_weak_count *v624;
  void *v625[2];
  char v626;
  std::__shared_weak_count *v627;
  std::string v628;
  std::string::size_type v629;
  std::__shared_weak_count *v630;
  char v631[32];
  std::__shared_weak_count *v632;
  std::string v633;
  std::string::size_type v634;
  std::__shared_weak_count *v635;
  char v636[23];
  char v637;
  std::__shared_weak_count *v638;
  __int128 v639;
  uint64_t v640;
  std::__shared_weak_count *v641;
  uint64_t v642;
  std::__shared_weak_count *v643;
  std::string v644;
  std::string::size_type v645;
  std::__shared_weak_count *v646;
  void *v647[2];
  char v648;
  std::__shared_weak_count *v649;
  __int128 v650;
  std::string::size_type v651;
  std::__shared_weak_count *v652;
  void *v653[2];
  char v654;
  std::__shared_weak_count *v655;
  std::string::size_type v656;
  std::__shared_weak_count *v657;
  uint64_t v658;
  std::__shared_weak_count *v659;
  void *v660;
  char v661;
  std::string::size_type v662;
  std::__shared_weak_count *v663;
  void *v664[2];
  char v665;
  std::__shared_weak_count *v666;
  std::string v667;
  std::string::size_type v668;
  std::__shared_weak_count *v669;
  void *v670[2];
  char v671;
  std::__shared_weak_count *v672;
  std::string v673;
  std::string::size_type v674;
  std::__shared_weak_count *v675;
  void *v676[2];
  char v677;
  std::__shared_weak_count *v678;
  __int128 v679;
  std::string::size_type v680;
  std::__shared_weak_count *v681;
  void *v682[2];
  char v683;
  std::__shared_weak_count *v684;
  void *v685;
  char v686;
  std::string::size_type v687;
  std::__shared_weak_count *v688;
  void *v689[2];
  char v690;
  std::__shared_weak_count *v691;
  std::string pn;
  std::string::size_type v693;
  std::__shared_weak_count *v694;
  void *v695[2];
  char v696;
  std::__shared_weak_count *v697;
  std::string v698;
  std::string::size_type v699;
  std::__shared_weak_count *v700;
  void *v701[2];
  char v702;
  std::__shared_weak_count *v703;
  __int128 v704;
  std::string v705;
  std::string::size_type v706;
  std::__shared_weak_count *v707;
  void *v708[3];
  std::__shared_weak_count *v709;
  std::string v710;
  std::string::size_type v711;
  std::__shared_weak_count *v712;
  void *v713[3];
  std::__shared_weak_count *v714;
  __int128 v715;
  std::string v716;
  std::string::size_type v717;
  std::__shared_weak_count *v718;
  void *v719[3];
  std::__shared_weak_count *v720;
  std::string::size_type v721;
  std::__shared_weak_count *v722;
  void *v723[3];
  std::__shared_weak_count *v724;
  std::string v725;
  std::string::size_type v726;
  std::__shared_weak_count *v727;
  void *v728[3];
  std::__shared_weak_count *v729;
  __int128 v730;
  void *__dst[2];
  unint64_t v732;
  std::__shared_weak_count_vtbl *v733;
  std::__shared_weak_count_vtbl *v734;
  std::__shared_weak_count *v735;
  void *v736[2];
  char v737;
  std::__shared_weak_count *v738;
  void *v739;
  std::__shared_weak_count *v740;
  std::__shared_weak_count *v741;
  MIL::Attributes::BlobFileMutabilityInfo *v742[2];
  char *v743;
  std::string __p;
  void *v745;
  char *v746;
  void *v747;
  std::string *v748;
  unint64_t v749;
  void *v750;
  std::string *v751;
  unint64_t v752;
  std::string v753;
  std::string::size_type v754;
  std::__shared_weak_count *v755;
  std::string v756;
  std::__shared_weak_count *v757;
  std::string v758;
  std::__fs::filesystem::path v759;
  std::string::size_type v760;
  std::__shared_weak_count *v761;
  std::__shared_weak_count *v762;
  std::__fs::filesystem::path v763;
  void *v764;
  std::string *v765;
  uint64_t v766;

  v10 = a2;
  v766 = *MEMORY[0x1E0C80C00];
  v13 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)a2 + 64))(a2);
  v14 = (E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 128))(v13);
  if ((v14 & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(MIL::IRObject *))(*(_QWORD *)v10 + 56))(v10);
    std::operator+<char>();
    v564 = std::string::append(&v763.__pn_, ".");
    v565 = *(_OWORD *)&v564->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v564->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v565;
    v564->__r_.__value_.__l.__size_ = 0;
    v564->__r_.__value_.__r.__words[2] = 0;
    v564->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if ((char *)a3[1] - (char *)*a3 != 24)
  {
    v566 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v566, "Found more than one asset.");
    __cxa_throw(v566, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  OpsetName = E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOpsetName(v14);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = OpsetName;
  v18 = (void *)v16;
  v588 = a5;
  v589 = v10;
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v19 = (void **)operator new(v20 + 1);
    v22 = v21 | 0x8000000000000000;
    v10 = v589;
    v732 = v22;
    __dst[0] = v19;
    __dst[1] = v18;
  }
  else
  {
    HIBYTE(v732) = v16;
    v19 = __dst;
    if (!v16)
      goto LABEL_11;
  }
  memmove(v19, v17, (size_t)v18);
LABEL_11:
  *((_BYTE *)v18 + (_QWORD)v19) = 0;
  MIL::MILContext::GetOpset();
  *a7 = 0;
  a7[1] = 0;
  MIL::IRTensorValueType::MakeScalar();
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  v24 = MIL::IRTensorValueType::MakeScalar();
  switch(a1)
  {
    case 2:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "ane_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v753.__r_.__value_.__r.__words[0])
      {
        v574 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v574, "Operator ane_inference is missing in E5RT opset.");
        __cxa_throw(v574, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v679 = *(_OWORD *)&v753.__r_.__value_.__l.__data_;
      if (v753.__r_.__value_.__l.__size_)
      {
        v25 = (unint64_t *)(v753.__r_.__value_.__l.__size_ + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      MIL::Builder::OperationBuilder::Make();
      v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v27;
      if (*((_QWORD *)&v679 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v679 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v679 + 1) + 16))(*((_QWORD *)&v679 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v679 + 1));
        }
      }
      v677 = 11;
      strcpy((char *)v676, "program_url");
      v30 = *a3;
      if (a3[1] == *a3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v673, v30->__r_.__value_.__l.__data_, v30->__r_.__value_.__l.__size_);
      }
      else
      {
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v673.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v673.__r_.__value_.__l.__data_ = v31;
      }
      MIL::IRTensorValueType::MakeStringValue();
      v674 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v100 = (std::__shared_weak_count *)operator new();
        v101 = __p.__r_.__value_.__r.__words[0];
        v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v100->__shared_owners_ = 0;
        v100->__shared_weak_owners_ = 0;
        v100[1].__vftable = (std::__shared_weak_count_vtbl *)v101;
      }
      else
      {
        v100 = 0;
      }
      v675 = v100;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v129 = v678;
      if (v678)
      {
        p_shared_owners = (unint64_t *)&v678->__shared_owners_;
        do
          v131 = __ldaxr(p_shared_owners);
        while (__stlxr(v131 - 1, p_shared_owners));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      v132 = v675;
      if (v675)
      {
        v133 = (unint64_t *)&v675->__shared_owners_;
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      v135 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v135)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v135 + 8))(v135);
      if (SHIBYTE(v673.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v673.__r_.__value_.__l.__data_);
      if (v677 < 0)
        operator delete(v676[0]);
      v136 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v10 + 64))(v10);
      (*(void (**)(std::string *__return_ptr, uint64_t, MIL::IRObject *))(*(_QWORD *)v136 + 120))(&v758, v136, v10);
      v137 = *a6;
      v138 = (char *)a6[1];
      if (*a6 == (const std::string *)v138)
      {
        if (SHIBYTE(v758.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v756, v758.__r_.__value_.__l.__data_, v758.__r_.__value_.__l.__size_);
        else
          v756 = v758;
        v155 = a5;
        goto LABEL_727;
      }
      memset(&__p, 0, sizeof(__p));
      do
      {
        v139 = *(unsigned __int8 *)(a4 + 23);
        if ((v139 & 0x80u) == 0)
          v140 = a4;
        else
          v140 = *(_QWORD *)a4;
        v141 = SHIBYTE(v137->__r_.__value_.__r.__words[2]);
        if (v141 >= 0)
          v142 = v137;
        else
          v142 = (const std::string *)v137->__r_.__value_.__r.__words[0];
        if (v141 >= 0)
          size = HIBYTE(v137->__r_.__value_.__r.__words[2]);
        else
          size = v137->__r_.__value_.__l.__size_;
        if (size)
        {
          if ((v139 & 0x80u) != 0)
            v139 = *(_QWORD *)(a4 + 8);
          if (v139 >= size)
          {
            v144 = (char *)(v140 + v139);
            v145 = v142->__r_.__value_.__s.__data_[0];
            v146 = (void *)v140;
            do
            {
              v147 = v139 - size;
              if (v147 == -1)
                break;
              v148 = (char *)memchr(v146, v145, v147 + 1);
              if (!v148)
                break;
              v149 = v148;
              if (!memcmp(v148, v142, size))
              {
                if (v149 != v144 && &v149[-v140] != (char *)-1)
                  goto LABEL_243;
                break;
              }
              v146 = v149 + 1;
              v139 = v144 - (v149 + 1);
            }
            while (v139 >= size);
          }
        }
        else
        {
LABEL_243:
          std::string::operator=(&__p, v137);
        }
        ++v137;
      }
      while (v137 != (const std::string *)v138);
      v150 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v151 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v151 = __p.__r_.__value_.__l.__size_;
      if (!v151)
      {
        v584 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v585 = std::string::append(&v759.__pn_, ".");
        v586 = *(_OWORD *)&v585->__r_.__value_.__l.__data_;
        v763.__pn_.__r_.__value_.__r.__words[2] = v585->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v763.__pn_.__r_.__value_.__l.__data_ = v586;
        v585->__r_.__value_.__l.__size_ = 0;
        v585->__r_.__value_.__r.__words[2] = 0;
        v585->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v584, &v763.__pn_);
        v584->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v584, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v152 = SHIBYTE(v758.__r_.__value_.__r.__words[2]);
      if ((v758.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v153 = HIBYTE(v758.__r_.__value_.__r.__words[2]);
      else
        v153 = v758.__r_.__value_.__l.__size_;
      v154 = v153 + 1;
      v155 = v588;
      if (v153 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v154 >= 0x17)
      {
        v308 = (v154 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v154 | 7) != 0x17)
          v308 = v154 | 7;
        v309 = v308 + 1;
        v156 = (char *)operator new(v308 + 1);
        v763.__pn_.__r_.__value_.__l.__size_ = v153 + 1;
        v763.__pn_.__r_.__value_.__r.__words[2] = v309 | 0x8000000000000000;
        v763.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
      }
      else
      {
        memset(&v763, 0, sizeof(v763));
        v156 = (char *)&v763;
        *((_BYTE *)&v763.__pn_.__r_.__value_.__s + 23) = v153 + 1;
        if (!v153)
          goto LABEL_607;
      }
      if (v152 >= 0)
        v310 = &v758;
      else
        v310 = (std::string *)v758.__r_.__value_.__r.__words[0];
      memmove(v156, v310, v153);
LABEL_607:
      v10 = v589;
      *(_WORD *)&v156[v153] = 95;
      if (v150 >= 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v312 = std::string::append(&v763.__pn_, (const std::string::value_type *)p_p, v151);
      v313 = *(_OWORD *)&v312->__r_.__value_.__l.__data_;
      v756.__r_.__value_.__r.__words[2] = v312->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v756.__r_.__value_.__l.__data_ = v313;
      v312->__r_.__value_.__l.__size_ = 0;
      v312->__r_.__value_.__r.__words[2] = 0;
      v312->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v763.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v763.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_727:
      v671 = 14;
      strcpy((char *)v670, "procedure_name");
      if (SHIBYTE(v756.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v667, v756.__r_.__value_.__l.__data_, v756.__r_.__value_.__l.__size_);
      else
        v667 = v756;
      MIL::IRTensorValueType::MakeStringValue();
      v668 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v374 = (std::__shared_weak_count *)operator new();
        v375 = __p.__r_.__value_.__r.__words[0];
        v374->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v374->__shared_owners_ = 0;
        v374->__shared_weak_owners_ = 0;
        v374[1].__vftable = (std::__shared_weak_count_vtbl *)v375;
      }
      else
      {
        v374 = 0;
      }
      v669 = v374;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v376 = v672;
      if (v672)
      {
        v377 = (unint64_t *)&v672->__shared_owners_;
        do
          v378 = __ldaxr(v377);
        while (__stlxr(v378 - 1, v377));
        if (!v378)
        {
          ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
          std::__shared_weak_count::__release_weak(v376);
        }
      }
      v379 = v669;
      if (v669)
      {
        v380 = (unint64_t *)&v669->__shared_owners_;
        do
          v381 = __ldaxr(v380);
        while (__stlxr(v381 - 1, v380));
        if (!v381)
        {
          ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
          std::__shared_weak_count::__release_weak(v379);
        }
      }
      v382 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v382)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v382 + 8))(v382);
      if (SHIBYTE(v667.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v667.__r_.__value_.__l.__data_);
      if (v671 < 0)
        operator delete(v670[0]);
      v665 = 6;
      strcpy((char *)v664, "ane_id");
      v661 = 1;
      LOWORD(v660) = 48;
      MIL::IRTensorValueType::MakeStringValue();
      v662 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v383 = (std::__shared_weak_count *)operator new();
        v384 = __p.__r_.__value_.__r.__words[0];
        v383->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v383->__shared_owners_ = 0;
        v383->__shared_weak_owners_ = 0;
        v383[1].__vftable = (std::__shared_weak_count_vtbl *)v384;
      }
      else
      {
        v383 = 0;
      }
      v663 = v383;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      if (v666)
      {
        v385 = &v666->__shared_owners_;
        do
          v386 = __ldaxr((unint64_t *)v385);
        while (__stlxr(v386 - 1, (unint64_t *)v385));
        if (!v386)
        {
          ((void (*)(std::__shared_weak_count *))v666->__on_zero_shared)(v666);
          std::__shared_weak_count::__release_weak(v666);
        }
      }
      if (v663)
      {
        v387 = &v663->__shared_owners_;
        do
          v388 = __ldaxr((unint64_t *)v387);
        while (__stlxr(v388 - 1, (unint64_t *)v387));
        if (!v388)
        {
          ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
          std::__shared_weak_count::__release_weak(v663);
        }
      }
      v389 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v389)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v389 + 8))(v389);
      if (v661 < 0)
        operator delete(v660);
      if (v665 < 0)
        operator delete(v664[0]);
      (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v155 + 64))(&v750, v155, &v758);
      v390 = (MIL::UnknownLocation *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v155 + 48))(&v658, v155);
      MIL::UnknownLocation::Make(v390);
      v656 = v759.__pn_.__r_.__value_.__r.__words[0];
      if (v759.__pn_.__r_.__value_.__r.__words[0])
      {
        v391 = (std::__shared_weak_count *)operator new();
        v392 = v759.__pn_.__r_.__value_.__r.__words[0];
        v391->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3008;
        v391->__shared_owners_ = 0;
        v391->__shared_weak_owners_ = 0;
        v391[1].__vftable = (std::__shared_weak_count_vtbl *)v392;
        v657 = v391;
        v759.__pn_.__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v758.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_770:
          v763 = (std::__fs::filesystem::path)v758;
          goto LABEL_773;
        }
      }
      else
      {
        v657 = 0;
        v759.__pn_.__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v758.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_770;
      }
      std::string::__init_copy_ctor_external(&v763.__pn_, v758.__r_.__value_.__l.__data_, v758.__r_.__value_.__l.__size_);
LABEL_773:
      v764 = v750;
      v765 = v751;
      if (v751)
      {
        p_size = &v751->__r_.__value_.__l.__size_;
        do
          v394 = __ldxr(p_size);
        while (__stxr(v394 + 1, p_size));
      }
      std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((uint64_t)&__p, (uint64_t)&v763, 1);
      MIL::IRProgram::Make();
      v395 = (void **)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        do
        {
          while (1)
          {
            v396 = (void **)*v395;
            v397 = (std::__shared_weak_count *)v395[6];
            if (v397)
            {
              v398 = (unint64_t *)&v397->__shared_owners_;
              do
                v399 = __ldaxr(v398);
              while (__stlxr(v399 - 1, v398));
              if (!v399)
              {
                ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                std::__shared_weak_count::__release_weak(v397);
              }
            }
            if (*((char *)v395 + 39) < 0)
              break;
            operator delete(v395);
            v395 = v396;
            if (!v396)
              goto LABEL_786;
          }
          operator delete(v395[2]);
          operator delete(v395);
          v395 = v396;
        }
        while (v396);
      }
LABEL_786:
      v400 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v400)
        operator delete(v400);
      v401 = (std::__shared_weak_count *)v765;
      if (v765)
      {
        v402 = &v765->__r_.__value_.__l.__size_;
        do
          v403 = __ldaxr(v402);
        while (__stlxr(v403 - 1, v402));
        if (!v403)
        {
          ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
          std::__shared_weak_count::__release_weak(v401);
        }
      }
      if (SHIBYTE(v763.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v763.__pn_.__r_.__value_.__l.__data_);
      if (v657)
      {
        v404 = &v657->__shared_owners_;
        do
          v405 = __ldaxr((unint64_t *)v404);
        while (__stlxr(v405 - 1, (unint64_t *)v404));
        if (!v405)
        {
          ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
          std::__shared_weak_count::__release_weak(v657);
        }
      }
      v406 = v759.__pn_.__r_.__value_.__r.__words[0];
      v759.__pn_.__r_.__value_.__r.__words[0] = 0;
      if (v406)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v406 + 8))(v406);
      v407 = v659;
      if (v659)
      {
        v408 = (unint64_t *)&v659->__shared_owners_;
        do
          v409 = __ldaxr(v408);
        while (__stlxr(v409 - 1, v408));
        if (!v409)
        {
          ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
          std::__shared_weak_count::__release_weak(v407);
        }
      }
      MIL::Util::FindBlobFilePaths();
      (*(void (**)(void *, uint64_t))(*(_QWORD *)v750 + 184))(v750, v155);
      MIL::Attributes::BlobFileMutabilityInfo::Make();
      memset(&v763, 0, sizeof(v763));
      for (i = *(uint64_t **)(MIL::Attributes::BlobFileMutabilityInfo::GetAllPaths(v742[0]) + 16); i; i = (uint64_t *)*i)
      {
        v418 = __p.__r_.__value_.__l.__size_;
        v417 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
        {
          v419 = *((char *)i + 63);
          if (v419 >= 0)
            v420 = *((unsigned __int8 *)i + 63);
          else
            v420 = i[6];
          if (v419 >= 0)
            v421 = (unsigned __int8 *)(i + 5);
          else
            v421 = (unsigned __int8 *)i[5];
          while (1)
          {
            v422 = *(unsigned __int8 *)(v417 + 23);
            if ((v422 & 0x80u) == 0)
              v423 = *(unsigned __int8 *)(v417 + 23);
            else
              v423 = *(_QWORD *)(v417 + 8);
            if (v423 == v420)
            {
              if ((v422 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v417, v421, *(_QWORD *)(v417 + 8)))
                  break;
              }
              else
              {
                if (!*(_BYTE *)(v417 + 23))
                  break;
                v424 = 0;
                while (*(unsigned __int8 *)(v417 + v424) == v421[v424])
                {
                  if (v422 == ++v424)
                    goto LABEL_834;
                }
              }
            }
            v417 += 24;
            if (v417 == v418)
              goto LABEL_815;
          }
        }
LABEL_834:
        if (v417 != v418)
        {
          v425 = (__int128 *)(i + 2);
          v426 = (_OWORD *)v763.__pn_.__r_.__value_.__l.__size_;
          if (v763.__pn_.__r_.__value_.__l.__size_ >= v763.__pn_.__r_.__value_.__r.__words[2])
          {
            v416 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v763.__pn_.__r_.__value_.__l.__data_, (uint64_t)v425);
          }
          else
          {
            if (*((char *)i + 39) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v763.__pn_.__r_.__value_.__l.__size_, (const std::string::value_type *)i[2], i[3]);
            }
            else
            {
              v427 = *v425;
              *(_QWORD *)(v763.__pn_.__r_.__value_.__l.__size_ + 16) = i[4];
              *v426 = v427;
            }
            v416 = (std::string *)((char *)v426 + 24);
          }
          v763.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v416;
        }
LABEL_815:
        ;
      }
      v412 = v763.__pn_.__r_.__value_.__l.__size_;
      v411 = v763.__pn_.__r_.__value_.__r.__words[0];
      if (v763.__pn_.__r_.__value_.__r.__words[0] != v763.__pn_.__r_.__value_.__l.__size_)
      {
        v413 = operator new(8uLL);
        v759.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v413;
        *v413 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v412 - v411) >> 3);
        v759.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)(v413 + 1);
        v759.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)(v413 + 1);
        MIL::IRTensorValueType::Make();
        if (v759.__pn_.__r_.__value_.__r.__words[0])
        {
          v759.__pn_.__r_.__value_.__l.__size_ = v759.__pn_.__r_.__value_.__r.__words[0];
          operator delete(v759.__pn_.__r_.__value_.__l.__data_);
        }
        v654 = 15;
        strcpy((char *)v653, "mutable_weights");
        MIL::IRTensorValueType::MakeStringValue();
        v651 = v759.__pn_.__r_.__value_.__r.__words[0];
        if (v759.__pn_.__r_.__value_.__r.__words[0])
        {
          v414 = (std::__shared_weak_count *)operator new();
          v415 = v759.__pn_.__r_.__value_.__r.__words[0];
          v414->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
          v414->__shared_owners_ = 0;
          v414->__shared_weak_owners_ = 0;
          v414[1].__vftable = (std::__shared_weak_count_vtbl *)v415;
        }
        else
        {
          v414 = 0;
        }
        v652 = v414;
        v759.__pn_.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::OperationBuilder::SetAttribute();
        if (v655)
        {
          v428 = &v655->__shared_owners_;
          do
            v429 = __ldaxr((unint64_t *)v428);
          while (__stlxr(v429 - 1, (unint64_t *)v428));
          if (!v429)
          {
            ((void (*)(std::__shared_weak_count *))v655->__on_zero_shared)(v655);
            std::__shared_weak_count::__release_weak(v655);
          }
        }
        if (v652)
        {
          v430 = &v652->__shared_owners_;
          do
            v431 = __ldaxr((unint64_t *)v430);
          while (__stlxr(v431 - 1, (unint64_t *)v430));
          if (!v431)
          {
            ((void (*)(std::__shared_weak_count *))v652->__on_zero_shared)(v652);
            std::__shared_weak_count::__release_weak(v652);
          }
        }
        v432 = v759.__pn_.__r_.__value_.__r.__words[0];
        v759.__pn_.__r_.__value_.__r.__words[0] = 0;
        if (v432)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v432 + 8))(v432);
        if (v654 < 0)
          operator delete(v653[0]);
        v411 = v763.__pn_.__r_.__value_.__r.__words[0];
      }
      if (v411)
      {
        v433 = v763.__pn_.__r_.__value_.__l.__size_;
        v434 = (void *)v411;
        if (v763.__pn_.__r_.__value_.__l.__size_ != v411)
        {
          do
          {
            if (*(char *)(v433 - 1) < 0)
              operator delete(*(void **)(v433 - 24));
            v433 -= 24;
          }
          while (v433 != v411);
          v434 = (void *)v763.__pn_.__r_.__value_.__r.__words[0];
        }
        v763.__pn_.__r_.__value_.__l.__size_ = v411;
        operator delete(v434);
      }
      v435 = v742[0];
      v742[0] = 0;
      if (v435)
      {
        MIL::Attributes::BlobFileMutabilityInfo::~BlobFileMutabilityInfo(v435);
        MEMORY[0x19401CD90]();
      }
      v436 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v437 = __p.__r_.__value_.__l.__size_;
        v438 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v437 - 1) < 0)
              operator delete(*(void **)(v437 - 24));
            v437 -= 24;
          }
          while (v437 != v436);
          v438 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v436;
        operator delete(v438);
      }
      v439 = v747;
      v747 = 0;
      if (v439)
        (*(void (**)(void *))(*(_QWORD *)v439 + 8))(v439);
      v440 = v751;
      if (v751)
      {
        v441 = &v751->__r_.__value_.__l.__size_;
        do
          v442 = __ldaxr(v441);
        while (__stlxr(v442 - 1, v441));
        if (!v442)
        {
          (*(void (**)(std::string *))(v440->__r_.__value_.__r.__words[0] + 16))(v440);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v440);
        }
      }
      if (SHIBYTE(v756.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v756.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v758.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_884:
          v113 = (std::__shared_weak_count *)v753.__r_.__value_.__l.__size_;
          if (!v753.__r_.__value_.__l.__size_)
            goto LABEL_1077;
          goto LABEL_888;
        }
      }
      else if ((SHIBYTE(v758.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_884;
      }
      operator delete(v758.__r_.__value_.__l.__data_);
      v113 = (std::__shared_weak_count *)v753.__r_.__value_.__l.__size_;
      if (!v753.__r_.__value_.__l.__size_)
        goto LABEL_1077;
LABEL_888:
      v443 = (unint64_t *)&v113->__shared_owners_;
      do
        v184 = __ldaxr(v443);
      while (__stlxr(v184 - 1, v443));
      goto LABEL_1075;
    case 3:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "cpu_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v763.__pn_.__r_.__value_.__r.__words[0])
      {
        v579 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v579, "Operator cpu_inference is missing in E5RT opset.");
        __cxa_throw(v579, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v715 = *(_OWORD *)&v763.__pn_.__r_.__value_.__l.__data_;
      if (v763.__pn_.__r_.__value_.__l.__size_)
      {
        v62 = (unint64_t *)(v763.__pn_.__r_.__value_.__l.__size_ + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      MIL::Builder::OperationBuilder::Make();
      v64 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v64;
      if (*((_QWORD *)&v715 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v715 + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v715 + 1) + 16))(*((_QWORD *)&v715 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v715 + 1));
        }
      }
      HIBYTE(v713[2]) = 16;
      strcpy((char *)v713, "model_assets_url");
      v67 = *a3;
      if (a3[1] == *a3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      if (SHIBYTE(v67->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v710, v67->__r_.__value_.__l.__data_, v67->__r_.__value_.__l.__size_);
      }
      else
      {
        v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v710.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v710.__r_.__value_.__l.__data_ = v68;
      }
      MIL::IRTensorValueType::MakeStringValue();
      v711 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v102 = (std::__shared_weak_count *)operator new();
        v103 = __p.__r_.__value_.__r.__words[0];
        v102->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v102->__shared_owners_ = 0;
        v102->__shared_weak_owners_ = 0;
        v102[1].__vftable = (std::__shared_weak_count_vtbl *)v103;
      }
      else
      {
        v102 = 0;
      }
      v712 = v102;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v157 = v714;
      if (v714)
      {
        v158 = (unint64_t *)&v714->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      v160 = v712;
      if (v712)
      {
        v161 = (unint64_t *)&v712->__shared_owners_;
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      v163 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v163)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v163 + 8))(v163);
      if (SHIBYTE(v710.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v710.__r_.__value_.__l.__data_);
      if (SHIBYTE(v713[2]) < 0)
        operator delete(v713[0]);
      HIBYTE(v708[2]) = 18;
      strcpy((char *)v708, "configuration_name");
      v165 = (std::string *)*a6;
      v164 = a6[1];
      if (*a6 == v164)
        goto LABEL_298;
      while (!E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)a4, (unsigned __int8 *)v165))
      {
        if (++v165 == v164)
        {
LABEL_298:
          *((_BYTE *)&v705.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v705, "default");
          goto LABEL_1027;
        }
      }
      if (SHIBYTE(v165->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v705, v165->__r_.__value_.__l.__data_, v165->__r_.__value_.__l.__size_);
      }
      else
      {
        v307 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
        v705.__r_.__value_.__r.__words[2] = v165->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v705.__r_.__value_.__l.__data_ = v307;
      }
LABEL_1027:
      MIL::IRTensorValueType::MakeStringValue();
      v706 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v501 = (std::__shared_weak_count *)operator new();
        v502 = __p.__r_.__value_.__r.__words[0];
        v501->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v501->__shared_owners_ = 0;
        v501->__shared_weak_owners_ = 0;
        v501[1].__vftable = (std::__shared_weak_count_vtbl *)v502;
      }
      else
      {
        v501 = 0;
      }
      v707 = v501;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v503 = v709;
      if (v709)
      {
        v504 = (unint64_t *)&v709->__shared_owners_;
        do
          v505 = __ldaxr(v504);
        while (__stlxr(v505 - 1, v504));
        if (!v505)
        {
          ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
          std::__shared_weak_count::__release_weak(v503);
        }
      }
      v506 = v707;
      if (v707)
      {
        v507 = (unint64_t *)&v707->__shared_owners_;
        do
          v508 = __ldaxr(v507);
        while (__stlxr(v508 - 1, v507));
        if (!v508)
        {
          ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
          std::__shared_weak_count::__release_weak(v506);
        }
      }
      v509 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v509)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v509 + 8))(v509);
      if (SHIBYTE(v705.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v705.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v708[2]) & 0x80000000) == 0)
        {
LABEL_1044:
          v113 = (std::__shared_weak_count *)v763.__pn_.__r_.__value_.__l.__size_;
          if (!v763.__pn_.__r_.__value_.__l.__size_)
            goto LABEL_1077;
          goto LABEL_1048;
        }
      }
      else if ((SHIBYTE(v708[2]) & 0x80000000) == 0)
      {
        goto LABEL_1044;
      }
      operator delete(v708[0]);
      v113 = (std::__shared_weak_count *)v763.__pn_.__r_.__value_.__l.__size_;
      if (!v763.__pn_.__r_.__value_.__l.__size_)
        goto LABEL_1077;
LABEL_1048:
      v510 = (unint64_t *)&v113->__shared_owners_;
      do
        v184 = __ldaxr(v510);
      while (__stlxr(v184 - 1, v510));
      goto LABEL_1075;
    case 4:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "mlc_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v763.__pn_.__r_.__value_.__r.__words[0])
      {
        v576 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v576, "Operator mlc_inference is missing in E5RT opset.");
        __cxa_throw(v576, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v650 = *(_OWORD *)&v763.__pn_.__r_.__value_.__l.__data_;
      if (v763.__pn_.__r_.__value_.__l.__size_)
      {
        v41 = (unint64_t *)(v763.__pn_.__r_.__value_.__l.__size_ + 8);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      MIL::Builder::OperationBuilder::Make();
      v43 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v43;
      if (*((_QWORD *)&v650 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v650 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v650 + 1) + 16))(*((_QWORD *)&v650 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v650 + 1));
        }
      }
      v648 = 15;
      strcpy((char *)v647, "mlc_binary_path");
      v46 = *a3;
      if (a3[1] == *a3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      if (SHIBYTE(v46->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v644, v46->__r_.__value_.__l.__data_, v46->__r_.__value_.__l.__size_);
      }
      else
      {
        v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v644.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v644.__r_.__value_.__l.__data_ = v47;
      }
      MIL::IRTensorValueType::MakeStringValue();
      v645 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v94 = (std::__shared_weak_count *)operator new();
        v95 = __p.__r_.__value_.__r.__words[0];
        v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v94->__shared_owners_ = 0;
        v94->__shared_weak_owners_ = 0;
        v94[1].__vftable = (std::__shared_weak_count_vtbl *)v95;
      }
      else
      {
        v94 = 0;
      }
      v646 = v94;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v106 = v649;
      if (v649)
      {
        v107 = (unint64_t *)&v649->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v109 = v646;
      if (v646)
      {
        v110 = (unint64_t *)&v646->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      v112 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v112)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v112 + 8))(v112);
      if (SHIBYTE(v644.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v644.__r_.__value_.__l.__data_);
        if ((v648 & 0x80000000) == 0)
        {
LABEL_186:
          v113 = (std::__shared_weak_count *)v763.__pn_.__r_.__value_.__l.__size_;
          if (!v763.__pn_.__r_.__value_.__l.__size_)
            goto LABEL_1077;
          goto LABEL_327;
        }
      }
      else if ((v648 & 0x80000000) == 0)
      {
        goto LABEL_186;
      }
      operator delete(v647[0]);
      v113 = (std::__shared_weak_count *)v763.__pn_.__r_.__value_.__l.__size_;
      if (!v763.__pn_.__r_.__value_.__l.__size_)
        goto LABEL_1077;
LABEL_327:
      v183 = (unint64_t *)&v113->__shared_owners_;
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      goto LABEL_1075;
    case 5:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&__p, "mps_graph_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v756.__r_.__value_.__r.__words[0])
      {
        v577 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v577, "Operator mps_graph_inference is missing in E5RT opset.");
        __cxa_throw(v577, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v704 = *(_OWORD *)&v756.__r_.__value_.__l.__data_;
      if (v756.__r_.__value_.__l.__size_)
      {
        v48 = (unint64_t *)(v756.__r_.__value_.__l.__size_ + 8);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      MIL::Builder::OperationBuilder::Make();
      v50 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v50;
      if (*((_QWORD *)&v704 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v704 + 1) + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v704 + 1) + 16))(*((_QWORD *)&v704 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v704 + 1));
        }
      }
      v702 = 11;
      strcpy((char *)v701, "program_url");
      v53 = *a3;
      if (a3[1] == *a3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      if (SHIBYTE(v53->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v698, v53->__r_.__value_.__l.__data_, v53->__r_.__value_.__l.__size_);
      }
      else
      {
        v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        v698.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v698.__r_.__value_.__l.__data_ = v54;
      }
      MIL::IRTensorValueType::MakeStringValue();
      v699 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v96 = (std::__shared_weak_count *)operator new();
        v97 = __p.__r_.__value_.__r.__words[0];
        v96->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v96->__shared_owners_ = 0;
        v96->__shared_weak_owners_ = 0;
        v96[1].__vftable = (std::__shared_weak_count_vtbl *)v97;
      }
      else
      {
        v96 = 0;
      }
      v700 = v96;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v114 = v703;
      if (v703)
      {
        v115 = (unint64_t *)&v703->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v117 = v700;
      if (v700)
      {
        v118 = (unint64_t *)&v700->__shared_owners_;
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      v120 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v120)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v120 + 8))(v120);
      if (SHIBYTE(v698.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v698.__r_.__value_.__l.__data_);
      if (v702 < 0)
        operator delete(v701[0]);
      v121 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v10 + 64))(v10);
      (*(void (**)(std::__fs::filesystem::path *__return_ptr, uint64_t, MIL::IRObject *))(*(_QWORD *)v121
                                                                                                  + 120))(&v763, v121, v10);
      v696 = 13;
      strcpy((char *)v695, "function_name");
      if (SHIBYTE(v763.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&pn, v763.__pn_.__r_.__value_.__l.__data_, v763.__pn_.__r_.__value_.__l.__size_);
      else
        pn = v763.__pn_;
      MIL::IRTensorValueType::MakeStringValue();
      v693 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v197 = (std::__shared_weak_count *)operator new();
        v198 = __p.__r_.__value_.__r.__words[0];
        v197->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v197->__shared_owners_ = 0;
        v197->__shared_weak_owners_ = 0;
        v197[1].__vftable = (std::__shared_weak_count_vtbl *)v198;
      }
      else
      {
        v197 = 0;
      }
      v694 = v197;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v201 = v697;
      if (v697)
      {
        v202 = (unint64_t *)&v697->__shared_owners_;
        do
          v203 = __ldaxr(v202);
        while (__stlxr(v203 - 1, v202));
        if (!v203)
        {
          ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
          std::__shared_weak_count::__release_weak(v201);
        }
      }
      v204 = v694;
      if (v694)
      {
        v205 = (unint64_t *)&v694->__shared_owners_;
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
        }
      }
      v207 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v207)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v207 + 8))(v207);
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
        operator delete(pn.__r_.__value_.__l.__data_);
      if (v696 < 0)
        operator delete(v695[0]);
      v690 = 15;
      strcpy((char *)v689, "gpu_registry_id");
      v686 = 1;
      LOWORD(v685) = 48;
      MIL::IRTensorValueType::MakeStringValue();
      v687 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v208 = (std::__shared_weak_count *)operator new();
        v209 = __p.__r_.__value_.__r.__words[0];
        v208->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v208->__shared_owners_ = 0;
        v208->__shared_weak_owners_ = 0;
        v208[1].__vftable = (std::__shared_weak_count_vtbl *)v209;
      }
      else
      {
        v208 = 0;
      }
      v688 = v208;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      if (v691)
      {
        v210 = &v691->__shared_owners_;
        do
          v211 = __ldaxr((unint64_t *)v210);
        while (__stlxr(v211 - 1, (unint64_t *)v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v691->__on_zero_shared)(v691);
          std::__shared_weak_count::__release_weak(v691);
        }
      }
      if (v688)
      {
        v212 = &v688->__shared_owners_;
        do
          v213 = __ldaxr((unint64_t *)v212);
        while (__stlxr(v213 - 1, (unint64_t *)v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v688->__on_zero_shared)(v688);
          std::__shared_weak_count::__release_weak(v688);
        }
      }
      v214 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v214)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v214 + 8))(v214);
      if (v686 < 0)
        operator delete(v685);
      if (v690 < 0)
        operator delete(v689[0]);
      Espresso::AOT::GetCallees(a5, (uint64_t)&__p);
      memset(&v759, 0, sizeof(v759));
      v215 = __p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v216 = 0;
        do
        {
          v218 = (__int128 *)(v215 + 16);
          if ((unint64_t)v216 < v759.__pn_.__r_.__value_.__r.__words[2])
          {
            if (*(char *)(v215 + 39) < 0)
            {
              std::string::__init_copy_ctor_external(v216, *(const std::string::value_type **)(v215 + 16), *(_QWORD *)(v215 + 24));
            }
            else
            {
              v217 = *v218;
              v216->__r_.__value_.__r.__words[2] = *(_QWORD *)(v215 + 32);
              *(_OWORD *)&v216->__r_.__value_.__l.__data_ = v217;
            }
            ++v216;
          }
          else
          {
            v216 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v759.__pn_.__r_.__value_.__l.__data_, (uint64_t)v218);
          }
          v759.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v216;
          v215 = *(_QWORD *)v215;
        }
        while (v215);
        v215 = v759.__pn_.__r_.__value_.__r.__words[0];
      }
      else
      {
        v216 = 0;
      }
      v219 = operator new(8uLL);
      v758.__r_.__value_.__r.__words[0] = (std::string::size_type)v219;
      *v219 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v216 - v215) >> 3);
      v758.__r_.__value_.__l.__size_ = (std::string::size_type)(v219 + 1);
      v758.__r_.__value_.__r.__words[2] = (std::string::size_type)(v219 + 1);
      MIL::IRTensorValueType::Make();
      if (v758.__r_.__value_.__r.__words[0])
      {
        v758.__r_.__value_.__l.__size_ = v758.__r_.__value_.__r.__words[0];
        operator delete(v758.__r_.__value_.__l.__data_);
      }
      v683 = 12;
      strcpy((char *)v682, "callee_names");
      MIL::IRTensorValueType::MakeStringValue();
      v680 = v758.__r_.__value_.__r.__words[0];
      if (v758.__r_.__value_.__r.__words[0])
      {
        v220 = (std::__shared_weak_count *)operator new();
        v221 = v758.__r_.__value_.__r.__words[0];
        v220->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v220->__shared_owners_ = 0;
        v220->__shared_weak_owners_ = 0;
        v220[1].__vftable = (std::__shared_weak_count_vtbl *)v221;
      }
      else
      {
        v220 = 0;
      }
      v681 = v220;
      v758.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      if (v684)
      {
        v266 = &v684->__shared_owners_;
        do
          v267 = __ldaxr((unint64_t *)v266);
        while (__stlxr(v267 - 1, (unint64_t *)v266));
        if (!v267)
        {
          ((void (*)(std::__shared_weak_count *))v684->__on_zero_shared)(v684);
          std::__shared_weak_count::__release_weak(v684);
        }
      }
      if (v681)
      {
        v268 = &v681->__shared_owners_;
        do
          v269 = __ldaxr((unint64_t *)v268);
        while (__stlxr(v269 - 1, (unint64_t *)v268));
        if (!v269)
        {
          ((void (*)(std::__shared_weak_count *))v681->__on_zero_shared)(v681);
          std::__shared_weak_count::__release_weak(v681);
        }
      }
      v270 = v758.__r_.__value_.__r.__words[0];
      v758.__r_.__value_.__r.__words[0] = 0;
      if (v270)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v270 + 8))(v270);
      if (v683 < 0)
        operator delete(v682[0]);
      v271 = v759.__pn_.__r_.__value_.__r.__words[0];
      if (v759.__pn_.__r_.__value_.__r.__words[0])
      {
        v272 = v759.__pn_.__r_.__value_.__l.__size_;
        v273 = (void *)v759.__pn_.__r_.__value_.__r.__words[0];
        if (v759.__pn_.__r_.__value_.__l.__size_ != v759.__pn_.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v272 - 1) < 0)
              operator delete(*(void **)(v272 - 24));
            v272 -= 24;
          }
          while (v272 != v271);
          v273 = (void *)v759.__pn_.__r_.__value_.__r.__words[0];
        }
        v759.__pn_.__r_.__value_.__l.__size_ = v271;
        operator delete(v273);
      }
      v274 = (void **)__p.__r_.__value_.__r.__words[2];
      if (!__p.__r_.__value_.__r.__words[2])
        goto LABEL_528;
      do
      {
        while (1)
        {
          v275 = (void **)*v274;
          v276 = (std::__shared_weak_count *)v274[6];
          if (v276)
          {
            v277 = (unint64_t *)&v276->__shared_owners_;
            do
              v278 = __ldaxr(v277);
            while (__stlxr(v278 - 1, v277));
            if (!v278)
            {
              ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
              std::__shared_weak_count::__release_weak(v276);
            }
          }
          if (*((char *)v274 + 39) < 0)
            break;
          operator delete(v274);
          v274 = v275;
          if (!v275)
            goto LABEL_528;
        }
        operator delete(v274[2]);
        operator delete(v274);
        v274 = v275;
      }
      while (v275);
LABEL_528:
      v279 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v279)
        operator delete(v279);
      if (SHIBYTE(v763.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v763.__pn_.__r_.__value_.__l.__data_);
      v113 = (std::__shared_weak_count *)v756.__r_.__value_.__l.__size_;
      if (!v756.__r_.__value_.__l.__size_)
        goto LABEL_1077;
      v280 = (unint64_t *)(v756.__r_.__value_.__l.__size_ + 8);
      do
        v184 = __ldaxr(v280);
      while (__stlxr(v184 - 1, v280));
      goto LABEL_1075;
    case 6:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&__p, "eir_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v756.__r_.__value_.__r.__words[0])
      {
        v575 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v575, "Operator eir_inference is missing in E5RT opset.");
        __cxa_throw(v575, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v730 = *(_OWORD *)&v756.__r_.__value_.__l.__data_;
      if (v756.__r_.__value_.__l.__size_)
      {
        v32 = (unint64_t *)(v756.__r_.__value_.__l.__size_ + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      MIL::Builder::OperationBuilder::Make();
      v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v34;
      if (*((_QWORD *)&v730 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v730 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v730 + 1) + 16))(*((_QWORD *)&v730 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v730 + 1));
        }
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
      strcpy((char *)&__p, "backend_requested");
      Attribute = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&__p, "allowed_backends");
      v38 = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      HIBYTE(v728[2]) = 16;
      strcpy((char *)v728, "model_assets_url");
      v39 = *a3;
      if (a3[1] == *a3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      if (SHIBYTE(v39->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v725, v39->__r_.__value_.__l.__data_, v39->__r_.__value_.__l.__size_);
      }
      else
      {
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v725.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v725.__r_.__value_.__l.__data_ = v40;
      }
      MIL::IRTensorValueType::MakeStringValue();
      v726 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v166 = (std::__shared_weak_count *)operator new();
        v167 = __p.__r_.__value_.__r.__words[0];
        v166->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v166->__shared_owners_ = 0;
        v166->__shared_weak_owners_ = 0;
        v166[1].__vftable = (std::__shared_weak_count_vtbl *)v167;
      }
      else
      {
        v166 = 0;
      }
      v727 = v166;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v186 = v729;
      if (v729)
      {
        v187 = (unint64_t *)&v729->__shared_owners_;
        do
          v188 = __ldaxr(v187);
        while (__stlxr(v188 - 1, v187));
        if (!v188)
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
        }
      }
      v189 = v727;
      if (v727)
      {
        v190 = (unint64_t *)&v727->__shared_owners_;
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
          std::__shared_weak_count::__release_weak(v189);
        }
      }
      v192 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v192)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v192 + 8))(v192);
      if (SHIBYTE(v725.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v725.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v728[2]) & 0x80000000) == 0)
        {
LABEL_350:
          if (!Attribute)
            goto LABEL_649;
          goto LABEL_354;
        }
      }
      else if ((SHIBYTE(v728[2]) & 0x80000000) == 0)
      {
        goto LABEL_350;
      }
      operator delete(v728[0]);
      if (!Attribute)
        goto LABEL_649;
LABEL_354:
      v193 = (MIL::IRListValue *)MIL::IRValue::AsList(Attribute);
      Values = (_QWORD *)MIL::IRListValue::GetValues(v193);
      (*(void (**)(_QWORD))(*(_QWORD *)*Values + 40))(*Values);
      MIL::IRValue::GetScalar<unsigned int>();
      HIBYTE(v723[2]) = 17;
      strcpy((char *)v723, "backend_requested");
      MIL::IRTensorValueType::MakeUInt32Value(Scalar);
      v721 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v195 = (std::__shared_weak_count *)operator new();
        v196 = __p.__r_.__value_.__r.__words[0];
        v195->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v195->__shared_owners_ = 0;
        v195->__shared_weak_owners_ = 0;
        v195[1].__vftable = (std::__shared_weak_count_vtbl *)v196;
      }
      else
      {
        v195 = 0;
      }
      v722 = v195;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      if (v724)
      {
        v324 = &v724->__shared_owners_;
        do
          v325 = __ldaxr((unint64_t *)v324);
        while (__stlxr(v325 - 1, (unint64_t *)v324));
        if (!v325)
        {
          ((void (*)(std::__shared_weak_count *))v724->__on_zero_shared)(v724);
          std::__shared_weak_count::__release_weak(v724);
        }
      }
      if (v722)
      {
        v326 = &v722->__shared_owners_;
        do
          v327 = __ldaxr((unint64_t *)v326);
        while (__stlxr(v327 - 1, (unint64_t *)v326));
        if (!v327)
        {
          ((void (*)(std::__shared_weak_count *))v722->__on_zero_shared)(v722);
          std::__shared_weak_count::__release_weak(v722);
        }
      }
      v328 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v328)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v328 + 8))(v328);
      if (SHIBYTE(v723[2]) < 0)
        operator delete(v723[0]);
LABEL_649:
      if (!v38)
        goto LABEL_720;
      v329 = (MIL::IRListValue *)MIL::IRValue::AsList(v38);
      v330 = (std::string::size_type *)MIL::IRListValue::GetValues(v329);
      v332 = v331;
      MIL::IRListValueType::Make();
      memset(&__p, 0, sizeof(__p));
      if (v332)
      {
        v333 = &v330[2 * v332];
        while (1)
        {
          v334 = *v330;
          v335 = v330[1];
          v763.__pn_.__r_.__value_.__r.__words[0] = *v330;
          v763.__pn_.__r_.__value_.__l.__size_ = v335;
          if (v335)
          {
            v336 = (unint64_t *)(v335 + 8);
            do
              v337 = __ldxr(v336);
            while (__stxr(v337 + 1, v336));
          }
          (*(void (**)(std::string::size_type))(*(_QWORD *)v334 + 40))(v334);
          v338 = MIL::IRValue::GetScalar<unsigned int>();
          if (!v338)
          {
            MIL::IRTensorValueType::MakeUInt32Value(Scalar);
            v759.__pn_.__r_.__value_.__r.__words[0] = v758.__r_.__value_.__r.__words[0];
            if (v758.__r_.__value_.__r.__words[0])
            {
              v339 = (_QWORD *)operator new();
              v343 = v758.__r_.__value_.__r.__words[0];
              *v339 = &unk_1E2DC2BE0;
              v339[1] = 0;
              v339[2] = 0;
              v339[3] = v343;
              v759.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v339;
              v758.__r_.__value_.__r.__words[0] = 0;
              v341 = (_QWORD *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
                goto LABEL_679;
            }
            else
            {
              *(_OWORD *)&v759.__pn_.__r_.__value_.__l.__data_ = 0uLL;
              v339 = 0;
              v758.__r_.__value_.__r.__words[0] = 0;
              v341 = (_QWORD *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
                goto LABEL_679;
            }
            v348 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>(&__p.__r_.__value_.__l.__data_, (uint64_t)&v759);
            v345 = (std::__shared_weak_count *)v759.__pn_.__r_.__value_.__l.__size_;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v348;
            if (v759.__pn_.__r_.__value_.__l.__size_)
            {
              v349 = (unint64_t *)(v759.__pn_.__r_.__value_.__l.__size_ + 8);
              do
                v347 = __ldaxr(v349);
              while (__stlxr(v347 - 1, v349));
              goto LABEL_683;
            }
            goto LABEL_685;
          }
          if (v338 == 2)
            break;
          if (v338 == 1)
          {
            MIL::IRTensorValueType::MakeUInt32Value(Scalar);
            v759.__pn_.__r_.__value_.__r.__words[0] = v758.__r_.__value_.__r.__words[0];
            if (v758.__r_.__value_.__r.__words[0])
            {
              v339 = (_QWORD *)operator new();
              v340 = v758.__r_.__value_.__r.__words[0];
              *v339 = &unk_1E2DC2BE0;
              v339[1] = 0;
              v339[2] = 0;
              v339[3] = v340;
              v759.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v339;
              v758.__r_.__value_.__r.__words[0] = 0;
              v341 = (_QWORD *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
              {
LABEL_680:
                v350 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>(&__p.__r_.__value_.__l.__data_, (uint64_t)&v759);
                v345 = (std::__shared_weak_count *)v759.__pn_.__r_.__value_.__l.__size_;
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v350;
                if (v759.__pn_.__r_.__value_.__l.__size_)
                {
                  v351 = (unint64_t *)(v759.__pn_.__r_.__value_.__l.__size_ + 8);
                  do
                    v347 = __ldaxr(v351);
                  while (__stlxr(v347 - 1, v351));
LABEL_683:
                  if (!v347)
                  {
                    ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
                    std::__shared_weak_count::__release_weak(v345);
                  }
                }
                goto LABEL_685;
              }
            }
            else
            {
              *(_OWORD *)&v759.__pn_.__r_.__value_.__l.__data_ = 0uLL;
              v339 = 0;
              v758.__r_.__value_.__r.__words[0] = 0;
              v341 = (_QWORD *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                goto LABEL_680;
            }
LABEL_679:
            *v341 = v759.__pn_.__r_.__value_.__r.__words[0];
            v341[1] = v339;
            *(_OWORD *)&v759.__pn_.__r_.__value_.__l.__data_ = 0uLL;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v341 + 2);
            goto LABEL_685;
          }
LABEL_687:
          v353 = (std::__shared_weak_count *)v763.__pn_.__r_.__value_.__l.__size_;
          if (v763.__pn_.__r_.__value_.__l.__size_)
          {
            v354 = (unint64_t *)(v763.__pn_.__r_.__value_.__l.__size_ + 8);
            do
              v355 = __ldaxr(v354);
            while (__stlxr(v355 - 1, v354));
            if (!v355)
            {
              ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
              std::__shared_weak_count::__release_weak(v353);
            }
          }
          v330 += 2;
          if (v330 == v333)
            goto LABEL_692;
        }
        MIL::IRTensorValueType::MakeUInt32Value(Scalar);
        v759.__pn_.__r_.__value_.__r.__words[0] = v758.__r_.__value_.__r.__words[0];
        if (v758.__r_.__value_.__r.__words[0])
        {
          v339 = (_QWORD *)operator new();
          v342 = v758.__r_.__value_.__r.__words[0];
          *v339 = &unk_1E2DC2BE0;
          v339[1] = 0;
          v339[2] = 0;
          v339[3] = v342;
          v759.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v339;
          v758.__r_.__value_.__r.__words[0] = 0;
          v341 = (_QWORD *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
            goto LABEL_679;
        }
        else
        {
          *(_OWORD *)&v759.__pn_.__r_.__value_.__l.__data_ = 0uLL;
          v339 = 0;
          v758.__r_.__value_.__r.__words[0] = 0;
          v341 = (_QWORD *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ < __p.__r_.__value_.__r.__words[2])
            goto LABEL_679;
        }
        v344 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>(&__p.__r_.__value_.__l.__data_, (uint64_t)&v759);
        v345 = (std::__shared_weak_count *)v759.__pn_.__r_.__value_.__l.__size_;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v344;
        if (v759.__pn_.__r_.__value_.__l.__size_)
        {
          v346 = (unint64_t *)(v759.__pn_.__r_.__value_.__l.__size_ + 8);
          do
            v347 = __ldaxr(v346);
          while (__stlxr(v347 - 1, v346));
          goto LABEL_683;
        }
LABEL_685:
        v352 = v758.__r_.__value_.__r.__words[0];
        v758.__r_.__value_.__r.__words[0] = 0;
        if (v352)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v352 + 8))(v352);
        goto LABEL_687;
      }
LABEL_692:
      *((_BYTE *)&v763.__pn_.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&v763, "allowed_backends");
      MIL::IRListValueType::MakeValue();
      v758.__r_.__value_.__r.__words[0] = v753.__r_.__value_.__r.__words[0];
      if (v753.__r_.__value_.__r.__words[0])
      {
        v356 = (_QWORD *)operator new();
        v357 = v753.__r_.__value_.__r.__words[0];
        *v356 = &unk_1E2DC2BA8;
        v356[1] = 0;
        v356[2] = 0;
        v356[3] = v357;
      }
      else
      {
        v356 = 0;
      }
      v10 = v589;
      v758.__r_.__value_.__l.__size_ = (std::string::size_type)v356;
      v753.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v358 = (std::__shared_weak_count *)v759.__pn_.__r_.__value_.__l.__size_;
      if (v759.__pn_.__r_.__value_.__l.__size_)
      {
        v359 = (unint64_t *)(v759.__pn_.__r_.__value_.__l.__size_ + 8);
        do
          v360 = __ldaxr(v359);
        while (__stlxr(v360 - 1, v359));
        if (!v360)
        {
          ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
          std::__shared_weak_count::__release_weak(v358);
        }
      }
      v361 = (std::__shared_weak_count *)v758.__r_.__value_.__l.__size_;
      if (v758.__r_.__value_.__l.__size_)
      {
        v362 = (unint64_t *)(v758.__r_.__value_.__l.__size_ + 8);
        do
          v363 = __ldaxr(v362);
        while (__stlxr(v363 - 1, v362));
        if (!v363)
        {
          ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
          std::__shared_weak_count::__release_weak(v361);
        }
      }
      v364 = (MIL::IRListValue *)v753.__r_.__value_.__r.__words[0];
      v753.__r_.__value_.__r.__words[0] = 0;
      if (v364)
      {
        MIL::IRListValue::~IRListValue(v364);
        MEMORY[0x19401CD90]();
      }
      if (SHIBYTE(v763.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v763.__pn_.__r_.__value_.__l.__data_);
      v365 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v366 = __p.__r_.__value_.__l.__size_;
        v367 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            v368 = *(std::__shared_weak_count **)(v366 - 8);
            if (v368)
            {
              v369 = (unint64_t *)&v368->__shared_owners_;
              do
                v370 = __ldaxr(v369);
              while (__stlxr(v370 - 1, v369));
              if (!v370)
              {
                ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                std::__shared_weak_count::__release_weak(v368);
              }
            }
            v366 -= 16;
          }
          while (v366 != v365);
          v367 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v365;
        operator delete(v367);
      }
LABEL_720:
      HIBYTE(v719[2]) = 18;
      strcpy((char *)v719, "configuration_name");
      v371 = (std::string *)*a6;
      v372 = (__int128 *)a6[1];
      if (*a6 == (const std::string *)v372)
      {
LABEL_723:
        *((_BYTE *)&v716.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v716, "default");
      }
      else
      {
        while (!E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)a4, (unsigned __int8 *)v371))
        {
          if (++v371 == (std::string *)v372)
            goto LABEL_723;
        }
        if (SHIBYTE(v371->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v716, v371->__r_.__value_.__l.__data_, v371->__r_.__value_.__l.__size_);
        }
        else
        {
          v373 = *(_OWORD *)&v371->__r_.__value_.__l.__data_;
          v716.__r_.__value_.__r.__words[2] = v371->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v716.__r_.__value_.__l.__data_ = v373;
        }
      }
      MIL::IRTensorValueType::MakeStringValue();
      v717 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v511 = (std::__shared_weak_count *)operator new();
        v512 = __p.__r_.__value_.__r.__words[0];
        v511->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v511->__shared_owners_ = 0;
        v511->__shared_weak_owners_ = 0;
        v511[1].__vftable = (std::__shared_weak_count_vtbl *)v512;
      }
      else
      {
        v511 = 0;
      }
      v718 = v511;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v513 = v720;
      if (v720)
      {
        v514 = (unint64_t *)&v720->__shared_owners_;
        do
          v515 = __ldaxr(v514);
        while (__stlxr(v515 - 1, v514));
        if (!v515)
        {
          ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
          std::__shared_weak_count::__release_weak(v513);
        }
      }
      v516 = v718;
      if (v718)
      {
        v517 = (unint64_t *)&v718->__shared_owners_;
        do
          v518 = __ldaxr(v517);
        while (__stlxr(v518 - 1, v517));
        if (!v518)
        {
          ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
          std::__shared_weak_count::__release_weak(v516);
        }
      }
      v519 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v519)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v519 + 8))(v519);
      if (SHIBYTE(v716.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v716.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v719[2]) & 0x80000000) == 0)
        {
LABEL_1069:
          v113 = (std::__shared_weak_count *)v756.__r_.__value_.__l.__size_;
          if (!v756.__r_.__value_.__l.__size_)
            goto LABEL_1077;
          goto LABEL_1073;
        }
      }
      else if ((SHIBYTE(v719[2]) & 0x80000000) == 0)
      {
        goto LABEL_1069;
      }
      operator delete(v719[0]);
      v113 = (std::__shared_weak_count *)v756.__r_.__value_.__l.__size_;
      if (!v756.__r_.__value_.__l.__size_)
        goto LABEL_1077;
LABEL_1073:
      v520 = (unint64_t *)&v113->__shared_owners_;
      do
        v184 = __ldaxr(v520);
      while (__stlxr(v184 - 1, v520));
LABEL_1075:
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
      goto LABEL_1077;
    case 7:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&__p, "jit_call");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v642)
      {
        v580 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v580, "Operator jit_call is missing in E5RT opset.");
        __cxa_throw(v580, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v640 = v642;
      v641 = v643;
      if (v643)
      {
        v69 = (unint64_t *)&v643->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      MIL::Builder::OperationBuilder::Make();
      v71 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v71;
      if (v641)
      {
        v72 = &v641->__shared_owners_;
        do
          v73 = __ldaxr((unint64_t *)v72);
        while (__stlxr(v73 - 1, (unint64_t *)v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
          std::__shared_weak_count::__release_weak(v641);
        }
      }
      v74 = *a3;
      if (a3[1] == *a3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      MIL::IRTensorValueType::MakeScalar();
      *((_BYTE *)&v763.__pn_.__r_.__value_.__s + 23) = 11;
      strcpy((char *)&v763, "program_url");
      if (SHIBYTE(v74->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v759.__pn_, v74->__r_.__value_.__l.__data_, v74->__r_.__value_.__l.__size_);
      }
      else
      {
        v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
        v759.__pn_.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v759.__pn_.__r_.__value_.__l.__data_ = v75;
      }
      MIL::IRTensorValueType::MakeStringValue();
      v760 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v104 = (std::__shared_weak_count *)operator new();
        v105 = __p.__r_.__value_.__r.__words[0];
        v104->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v104->__shared_owners_ = 0;
        v104->__shared_weak_owners_ = 0;
        v104[1].__vftable = (std::__shared_weak_count_vtbl *)v105;
      }
      else
      {
        v104 = 0;
      }
      v761 = v104;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v168 = v762;
      if (v762)
      {
        v169 = (unint64_t *)&v762->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
          std::__shared_weak_count::__release_weak(v168);
        }
      }
      v171 = v761;
      if (v761)
      {
        v172 = (unint64_t *)&v761->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      v174 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v174)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v174 + 8))(v174);
      if (SHIBYTE(v759.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v759.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v763.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v763.__pn_.__r_.__value_.__l.__data_);
      v175 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v589 + 64))(v589);
      (*(void (**)(std::string *__return_ptr, uint64_t, MIL::IRObject *))(*(_QWORD *)v175 + 120))(&__p, v175, v589);
      Function = MIL::IRProgram::GetFunction();
      v177 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
      v178 = (char ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v177 + 56))(v177);
      v179 = **v178;
      if ((*v178)[1] - v179 != 16)
      {
        v582 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v582, "Invalid jit call backend function. Expect only one op inside.");
        __cxa_throw(v582, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v180 = *(_QWORD *)v179;
      v181 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v179 + 64))(*(_QWORD *)v179);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v181 + 128))(v181) & 1) == 0)
      {
        v583 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v583, "Invalid jit call backend function. Only one call op is expected.");
        __cxa_throw(v583, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v182 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v180 + 64))(v180);
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 120))(&v758, v182, v180);
      *((_BYTE *)&v756.__r_.__value_.__s + 23) = 13;
      strcpy((char *)&v756, "function_name");
      if (SHIBYTE(v758.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v753, v758.__r_.__value_.__l.__data_, v758.__r_.__value_.__l.__size_);
      else
        v753 = v758;
      MIL::IRTensorValueType::MakeStringValue();
      v754 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v222 = (std::__shared_weak_count *)operator new();
        v223 = __p.__r_.__value_.__r.__words[0];
        v222->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v222->__shared_owners_ = 0;
        v222->__shared_weak_owners_ = 0;
        v222[1].__vftable = (std::__shared_weak_count_vtbl *)v223;
      }
      else
      {
        v222 = 0;
      }
      v755 = v222;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v224 = v757;
      if (v757)
      {
        v225 = (unint64_t *)&v757->__shared_owners_;
        do
          v226 = __ldaxr(v225);
        while (__stlxr(v226 - 1, v225));
        if (!v226)
        {
          ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
          std::__shared_weak_count::__release_weak(v224);
        }
      }
      v227 = v755;
      if (v755)
      {
        v228 = (unint64_t *)&v755->__shared_owners_;
        do
          v229 = __ldaxr(v228);
        while (__stlxr(v229 - 1, v228));
        if (!v229)
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
        }
      }
      v230 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v230)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v230 + 8))(v230);
      if (SHIBYTE(v753.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v753.__r_.__value_.__l.__data_);
      if (SHIBYTE(v756.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v756.__r_.__value_.__l.__data_);
      v751 = 0;
      v750 = 0;
      v752 = 0;
      v748 = 0;
      v747 = 0;
      v749 = 0;
      v231 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v180 + 160))(v180);
      v233 = v231 + 1;
      v232 = (_QWORD *)*v231;
      if ((_QWORD *)*v231 == v231 + 1)
        goto LABEL_476;
      do
      {
        if (*((char *)v232 + 55) < 0)
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v232[4], v232[5]);
        else
          __p = *(std::string *)(v232 + 4);
        std::vector<std::shared_ptr<MIL::IRArgument>>::vector(&v745, (uint64_t)(v232 + 7));
        v234 = v751;
        if ((unint64_t)v751 >= v752)
        {
          v236 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v750, (uint64_t)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v751, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v235 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v751->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v234->__r_.__value_.__l.__data_ = v235;
          }
          v236 = v234 + 1;
        }
        v751 = v236;
        Name = MIL::IRArgument::GetName(*(MIL::IRArgument **)v745);
        v238 = v748;
        if ((unint64_t)v748 >= v749)
        {
          v748 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v747, Name);
          v240 = (char *)v745;
          if (!v745)
            goto LABEL_454;
        }
        else if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v748, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
          v748 = v238 + 1;
          v240 = (char *)v745;
          if (!v745)
          {
LABEL_454:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_455;
            goto LABEL_460;
          }
        }
        else
        {
          v239 = *(_OWORD *)Name;
          v748->__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
          *(_OWORD *)&v238->__r_.__value_.__l.__data_ = v239;
          v748 = v238 + 1;
          v240 = (char *)v745;
          if (!v745)
            goto LABEL_454;
        }
        v242 = v746;
        if (v746 == v240)
        {
          v746 = v240;
          operator delete(v240);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_455;
        }
        else
        {
          do
          {
            v244 = (std::__shared_weak_count *)*((_QWORD *)v242 - 1);
            if (v244)
            {
              v245 = (unint64_t *)&v244->__shared_owners_;
              do
                v246 = __ldaxr(v245);
              while (__stlxr(v246 - 1, v245));
              if (!v246)
              {
                ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
                std::__shared_weak_count::__release_weak(v244);
              }
            }
            v242 -= 16;
          }
          while (v242 != v240);
          v746 = v240;
          operator delete(v745);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_455:
            v241 = (_QWORD *)v232[1];
            if (!v241)
              goto LABEL_469;
            goto LABEL_461;
          }
        }
LABEL_460:
        operator delete(__p.__r_.__value_.__l.__data_);
        v241 = (_QWORD *)v232[1];
        if (!v241)
        {
          do
          {
LABEL_469:
            v243 = (_QWORD *)v232[2];
            v247 = *v243 == (_QWORD)v232;
            v232 = v243;
          }
          while (!v247);
          goto LABEL_441;
        }
        do
        {
LABEL_461:
          v243 = v241;
          v241 = (_QWORD *)*v241;
        }
        while (v241);
LABEL_441:
        v232 = v243;
      }
      while (v243 != v233);
LABEL_476:
      v248 = MIL::IRProgram::GetFunction();
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v180 + 200))(&__p, v180);
      v10 = v589;
      v249 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v248 + 40))(v248);
      v250 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v249 + 88))(v249);
      v251 = 0;
      for (j = 0; j < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v180 + 192))(v180); ++j)
      {
        v254 = __p.__r_.__value_.__r.__words[0] + v251;
        v255 = v748;
        if ((unint64_t)v748 >= v749)
        {
          v257 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v747, v254);
        }
        else
        {
          if (*(char *)(v254 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v748, *(const std::string::value_type **)(__p.__r_.__value_.__r.__words[0] + v251), *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + v251 + 8));
          }
          else
          {
            v256 = *(_OWORD *)v254;
            v748->__r_.__value_.__r.__words[2] = *(_QWORD *)(v254 + 16);
            *(_OWORD *)&v255->__r_.__value_.__l.__data_ = v256;
          }
          v257 = v255 + 1;
        }
        v748 = v257;
        v258 = *v250 + v251;
        v259 = v751;
        if ((unint64_t)v751 >= v752)
        {
          v253 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v750, v258);
          v10 = v589;
        }
        else
        {
          if (*(char *)(v258 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v751, *(const std::string::value_type **)(*v250 + v251), *(_QWORD *)(*v250 + v251 + 8));
          }
          else
          {
            v260 = *(_OWORD *)v258;
            v751->__r_.__value_.__r.__words[2] = *(_QWORD *)(v258 + 16);
            *(_OWORD *)&v259->__r_.__value_.__l.__data_ = v260;
          }
          v253 = v259 + 1;
          v10 = v589;
        }
        v751 = v253;
        v251 += 24;
      }
      v261 = v751;
      v262 = v750;
      v263 = (char *)operator new(8uLL);
      v742[0] = (MIL::Attributes::BlobFileMutabilityInfo *)v263;
      *(_QWORD *)v263 = 0xAAAAAAAAAAAAAAABLL * (((char *)v261 - v262) >> 3);
      v743 = v263 + 8;
      v742[1] = (MIL::Attributes::BlobFileMutabilityInfo *)(v263 + 8);
      MIL::IRTensorValueType::Make();
      if (v742[0])
      {
        v742[1] = v742[0];
        operator delete(v742[0]);
      }
      HIBYTE(v743) = 11;
      strcpy((char *)v742, "param_names");
      MIL::IRTensorValueType::MakeStringValue();
      v739 = v736[0];
      if (v736[0])
      {
        v264 = (std::__shared_weak_count *)operator new();
        v265 = (std::__shared_weak_count_vtbl *)v736[0];
        v264->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v264->__shared_owners_ = 0;
        v264->__shared_weak_owners_ = 0;
        v264[1].__vftable = v265;
      }
      else
      {
        v264 = 0;
      }
      v740 = v264;
      v736[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v281 = v741;
      if (v741)
      {
        v282 = (unint64_t *)&v741->__shared_owners_;
        do
          v283 = __ldaxr(v282);
        while (__stlxr(v283 - 1, v282));
        if (!v283)
        {
          ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
          std::__shared_weak_count::__release_weak(v281);
        }
      }
      v284 = v740;
      if (v740)
      {
        v285 = (unint64_t *)&v740->__shared_owners_;
        do
          v286 = __ldaxr(v285);
        while (__stlxr(v286 - 1, v285));
        if (!v286)
        {
          ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
          std::__shared_weak_count::__release_weak(v284);
        }
      }
      v287 = v736[0];
      v736[0] = 0;
      if (v287)
        (*(void (**)(void *))(*(_QWORD *)v287 + 8))(v287);
      if (SHIBYTE(v743) < 0)
        operator delete(v742[0]);
      v737 = 9;
      strcpy((char *)v736, "arg_names");
      MIL::IRTensorValueType::MakeStringValue();
      v734 = v733;
      if (v733)
      {
        v288 = (std::__shared_weak_count *)operator new();
        v289 = v733;
        v288->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v288->__shared_owners_ = 0;
        v288->__shared_weak_owners_ = 0;
        v288[1].__vftable = v289;
      }
      else
      {
        v288 = 0;
      }
      v735 = v288;
      v733 = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v290 = v738;
      if (v738)
      {
        v291 = (unint64_t *)&v738->__shared_owners_;
        do
          v292 = __ldaxr(v291);
        while (__stlxr(v292 - 1, v291));
        if (!v292)
        {
          ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
          std::__shared_weak_count::__release_weak(v290);
        }
      }
      v293 = v735;
      if (v735)
      {
        v294 = (unint64_t *)&v735->__shared_owners_;
        do
          v295 = __ldaxr(v294);
        while (__stlxr(v295 - 1, v294));
        if (!v295)
        {
          ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
          std::__shared_weak_count::__release_weak(v293);
        }
      }
      v296 = v733;
      v733 = 0;
      if (v296)
        (*((void (**)(std::__shared_weak_count_vtbl *))v296->~__shared_weak_count + 1))(v296);
      if (v737 < 0)
        operator delete(v736[0]);
      v297 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v298 = __p.__r_.__value_.__l.__size_;
        v299 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v298 - 1) < 0)
              operator delete(*(void **)(v298 - 24));
            v298 -= 24;
          }
          while (v298 != v297);
          v299 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v297;
        operator delete(v299);
      }
      v300 = (std::string *)v747;
      if (v747)
      {
        v301 = v748;
        v302 = v747;
        if (v748 != v747)
        {
          do
          {
            if (SHIBYTE(v301[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v301[-1].__r_.__value_.__l.__data_);
            --v301;
          }
          while (v301 != v300);
          v302 = v747;
        }
        v748 = v300;
        operator delete(v302);
      }
      v303 = (std::string *)v750;
      if (v750)
      {
        v304 = v751;
        v305 = v750;
        if (v751 != v750)
        {
          do
          {
            if (SHIBYTE(v304[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v304[-1].__r_.__value_.__l.__data_);
            --v304;
          }
          while (v304 != v303);
          v305 = v750;
        }
        v751 = v303;
        operator delete(v305);
      }
      if (SHIBYTE(v758.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v758.__r_.__value_.__l.__data_);
      v113 = v643;
      if (v643)
      {
        v306 = (unint64_t *)&v643->__shared_owners_;
        do
          v184 = __ldaxr(v306);
        while (__stlxr(v184 - 1, v306));
        goto LABEL_1075;
      }
LABEL_1077:
      LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(v10);
      v522 = (std::__shared_weak_count *)LocationPtr[1];
      v599 = *LocationPtr;
      v600 = v522;
      if (v522)
      {
        v523 = (unint64_t *)&v522->__shared_owners_;
        do
          v524 = __ldxr(v523);
        while (__stxr(v524 + 1, v523));
      }
      MIL::Builder::OperationBuilder::SetLocation();
      if (v600)
      {
        v525 = &v600->__shared_owners_;
        do
          v526 = __ldaxr((unint64_t *)v525);
        while (__stlxr(v526 - 1, (unint64_t *)v525));
        if (!v526)
        {
          ((void (*)(std::__shared_weak_count *))v600->__on_zero_shared)(v600);
          std::__shared_weak_count::__release_weak(v600);
        }
      }
      v527 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v10 + 160))(v10);
      v529 = v527 + 1;
      v528 = (_QWORD *)*v527;
      if ((_QWORD *)*v527 != v527 + 1)
      {
        while (1)
        {
          v538 = v528[7];
          v539 = v528[8];
          if (v538 != v539)
            break;
LABEL_1148:
          v560 = (_QWORD *)v528[1];
          if (v560)
          {
            do
            {
              v561 = v560;
              v560 = (_QWORD *)*v560;
            }
            while (v560);
          }
          else
          {
            do
            {
              v561 = (_QWORD *)v528[2];
              v247 = *v561 == (_QWORD)v528;
              v528 = v561;
            }
            while (!v247);
          }
          v528 = v561;
          if (v561 == v529)
            goto LABEL_1086;
        }
        v540 = v528 + 4;
        while (1)
        {
          v542 = *(MIL::IRArgument **)v538;
          v541 = *(_QWORD *)(v538 + 8);
          __p.__r_.__value_.__r.__words[0] = *(_QWORD *)v538;
          __p.__r_.__value_.__l.__size_ = v541;
          if (v541)
          {
            v543 = (unint64_t *)(v541 + 8);
            do
              v544 = __ldxr(v543);
            while (__stxr(v544 + 1, v543));
          }
          if ((*(unsigned int (**)(MIL::IRArgument *))(*(_QWORD *)v542 + 16))(v542))
          {
            if (*((char *)v528 + 55) < 0)
            {
              std::string::__init_copy_ctor_external(&v597, (const std::string::value_type *)v528[4], v528[5]);
            }
            else
            {
              *(_OWORD *)&v597.__r_.__value_.__l.__data_ = *v540;
              v597.__r_.__value_.__r.__words[2] = v528[6];
            }
            v545 = MIL::IRArgument::GetName(v542);
            if (*(char *)(v545 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v596, *(const std::string::value_type **)v545, *(_QWORD *)(v545 + 8));
            }
            else
            {
              v546 = *(_OWORD *)v545;
              v596.__r_.__value_.__r.__words[2] = *(_QWORD *)(v545 + 16);
              *(_OWORD *)&v596.__r_.__value_.__l.__data_ = v546;
            }
            MIL::Builder::OperationBuilder::AddInput();
            v547 = v598;
            if (!v598)
              goto LABEL_1123;
            v548 = (unint64_t *)&v598->__shared_owners_;
            do
              v549 = __ldaxr(v548);
            while (__stlxr(v549 - 1, v548));
            if (!v549)
            {
              ((void (*)(std::__shared_weak_count *))v547->__on_zero_shared)(v547);
              std::__shared_weak_count::__release_weak(v547);
              if ((SHIBYTE(v596.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_1124;
            }
            else
            {
LABEL_1123:
              if ((SHIBYTE(v596.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_1124:
                if ((SHIBYTE(v597.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_1143;
LABEL_1138:
                v556 = &v597;
                goto LABEL_1142;
              }
            }
            operator delete(v596.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v597.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_1143;
            goto LABEL_1138;
          }
          if (!(*(unsigned int (**)(MIL::IRArgument *))(*(_QWORD *)v542 + 24))(v542))
          {
            v562 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v562, "Found an argument of Call that is neither a name nor a value.");
            v562->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v562, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
          }
          if (*((char *)v528 + 55) < 0)
          {
            std::string::__init_copy_ctor_external(&v594, (const std::string::value_type *)v528[4], v528[5]);
          }
          else
          {
            *(_OWORD *)&v594.__r_.__value_.__l.__data_ = *v540;
            v594.__r_.__value_.__r.__words[2] = v528[6];
          }
          (*(void (**)(uint64_t *__return_ptr, MIL::IRArgument *))(*(_QWORD *)v542 + 48))(&v592, v542);
          MIL::Builder::OperationBuilder::AddInput();
          v550 = v595;
          if (!v595)
            goto LABEL_1131;
          v551 = (unint64_t *)&v595->__shared_owners_;
          do
            v552 = __ldaxr(v551);
          while (__stlxr(v552 - 1, v551));
          if (!v552)
          {
            ((void (*)(std::__shared_weak_count *))v550->__on_zero_shared)(v550);
            std::__shared_weak_count::__release_weak(v550);
            v553 = v593;
            if (v593)
            {
LABEL_1132:
              v554 = (unint64_t *)&v553->__shared_owners_;
              do
                v555 = __ldaxr(v554);
              while (__stlxr(v555 - 1, v554));
              if (!v555)
              {
                ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
                std::__shared_weak_count::__release_weak(v553);
              }
            }
          }
          else
          {
LABEL_1131:
            v553 = v593;
            if (v593)
              goto LABEL_1132;
          }
          if ((SHIBYTE(v594.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_1143;
          v556 = &v594;
LABEL_1142:
          operator delete(v556->__r_.__value_.__l.__data_);
LABEL_1143:
          v557 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v558 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v559 = __ldaxr(v558);
            while (__stlxr(v559 - 1, v558));
            if (!v559)
            {
              ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
              std::__shared_weak_count::__release_weak(v557);
            }
          }
          v538 += 16;
          if (v538 == v539)
            goto LABEL_1148;
        }
      }
LABEL_1086:
      v530 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v589 + 176))(v589);
      v531 = *(MIL::IRNamedValueType ***)v530;
      v532 = *(MIL::IRNamedValueType ***)(v530 + 8);
      if (*(MIL::IRNamedValueType ***)v530 != v532)
      {
        do
        {
          while (1)
          {
            v533 = MIL::IRNamedValueType::GetName(*v531);
            if (*(char *)(v533 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v590, *(const std::string::value_type **)v533, *(_QWORD *)(v533 + 8));
            }
            else
            {
              v534 = *(_OWORD *)v533;
              v590.__r_.__value_.__r.__words[2] = *(_QWORD *)(v533 + 16);
              *(_OWORD *)&v590.__r_.__value_.__l.__data_ = v534;
            }
            MIL::IRNamedValueType::GetType(*v531);
            MIL::Builder::OperationBuilder::AddOutput();
            v535 = v591;
            if (v591)
            {
              v536 = (unint64_t *)&v591->__shared_owners_;
              do
                v537 = __ldaxr(v536);
              while (__stlxr(v537 - 1, v536));
              if (!v537)
              {
                ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
                std::__shared_weak_count::__release_weak(v535);
              }
            }
            if (SHIBYTE(v590.__r_.__value_.__r.__words[2]) < 0)
              break;
            v531 += 2;
            if (v531 == v532)
              goto LABEL_1099;
          }
          operator delete(v590.__r_.__value_.__l.__data_);
          v531 += 2;
        }
        while (v531 != v532);
      }
LABEL_1099:
      if (SHIBYTE(v732) < 0)
        operator delete(__dst[0]);
      return;
    case 8:
      v76 = (MIL::IRTensorValueType *)v24;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "bnns_inference");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v756.__r_.__value_.__r.__words[0])
      {
        v581 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v581, "Operator bnns_inference is missing in E5RT opset.");
        __cxa_throw(v581, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v639 = *(_OWORD *)&v756.__r_.__value_.__l.__data_;
      if (v756.__r_.__value_.__l.__size_)
      {
        v77 = (unint64_t *)(v756.__r_.__value_.__l.__size_ + 8);
        do
          v78 = __ldxr(v77);
        while (__stxr(v78 + 1, v77));
      }
      MIL::Builder::OperationBuilder::Make();
      v79 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v79;
      if (*((_QWORD *)&v639 + 1))
      {
        v80 = (unint64_t *)(*((_QWORD *)&v639 + 1) + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v639 + 1) + 16))(*((_QWORD *)&v639 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v639 + 1));
        }
      }
      v82 = *a3;
      if (a3[1] == *a3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      memset(&v759, 0, sizeof(v759));
      v83 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
      if (v83 >= 0)
        v84 = v82;
      else
        v84 = (std::string *)v82->__r_.__value_.__r.__words[0];
      if (v83 >= 0)
        v85 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
      else
        v85 = v82->__r_.__value_.__l.__size_;
      std::string::append[abi:ne180100]<char const*,0>(&v759.__pn_, v84, (std::string *)((char *)v84 + v85));
      v86 = std::__fs::filesystem::path::__extension(&v759);
      if (v86.__size_ > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v86.__size_ >= 0x17)
      {
        v88 = (v86.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v86.__size_ | 7) != 0x17)
          v88 = v86.__size_ | 7;
        v89 = v88 + 1;
        v87 = (std::string *)operator new(v88 + 1);
        __p.__r_.__value_.__r.__words[2] = v89 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
        __p.__r_.__value_.__l.__size_ = v86.__size_;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v86.__size_;
        v87 = &__p;
        if (!v86.__size_)
          goto LABEL_140;
      }
      memmove(v87, v86.__data_, v86.__size_);
LABEL_140:
      v87->__r_.__value_.__s.__data_[v86.__size_] = 0;
      v763.__pn_ = __p;
      memset(&__p, 0, sizeof(__p));
      std::string::append[abi:ne180100]<char const*,0>(&__p, (std::string *)".mil", (std::string *)"");
      v10 = v589;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90.__data_ = (const std::string_view::value_type *)&__p;
      else
        v90.__data_ = (const std::string_view::value_type *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90.__size_ = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v90.__size_ = __p.__r_.__value_.__l.__size_;
      v91 = std::__fs::filesystem::path::__compare(&v763, v90);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v763.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_148:
          if ((SHIBYTE(v759.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_149;
          goto LABEL_364;
        }
      }
      else if ((SHIBYTE(v763.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_148;
      }
      operator delete(v763.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v759.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_149:
        if (v91)
          goto LABEL_150;
        goto LABEL_365;
      }
LABEL_364:
      operator delete(v759.__pn_.__r_.__value_.__l.__data_);
      if (v91)
      {
LABEL_150:
        v631[23] = 19;
        strcpy(v631, "bnns_ir_program_url");
        v92 = *a3;
        if (a3[1] == *a3)
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        if (SHIBYTE(v92->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v628, v92->__r_.__value_.__l.__data_, v92->__r_.__value_.__l.__size_);
        }
        else
        {
          v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
          v628.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v628.__r_.__value_.__l.__data_ = v93;
        }
        MIL::IRTensorValueType::MakeStringValue();
        v629 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
          v314 = (std::__shared_weak_count *)operator new();
          v315 = __p.__r_.__value_.__r.__words[0];
          v314->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
          v314->__shared_owners_ = 0;
          v314->__shared_weak_owners_ = 0;
          v314[1].__vftable = (std::__shared_weak_count_vtbl *)v315;
        }
        else
        {
          v314 = 0;
        }
        v630 = v314;
        __p.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::OperationBuilder::SetAttribute();
        v316 = v632;
        if (v632)
        {
          v317 = (unint64_t *)&v632->__shared_owners_;
          do
            v318 = __ldaxr(v317);
          while (__stlxr(v318 - 1, v317));
          if (!v318)
          {
            ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
            std::__shared_weak_count::__release_weak(v316);
          }
        }
        v319 = v630;
        if (v630)
        {
          v320 = (unint64_t *)&v630->__shared_owners_;
          do
            v321 = __ldaxr(v320);
          while (__stlxr(v321 - 1, v320));
          if (!v321)
          {
            ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
            std::__shared_weak_count::__release_weak(v319);
          }
        }
        v322 = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v322)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v322 + 8))(v322);
        if (SHIBYTE(v628.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v628.__r_.__value_.__l.__data_);
        if (v631[23] < 0)
        {
          v323 = v631;
LABEL_911:
          operator delete(*(void **)v323);
          goto LABEL_912;
        }
        goto LABEL_912;
      }
LABEL_365:
      v637 = 15;
      strcpy(v636, "mil_program_url");
      v199 = *a3;
      if (a3[1] == *a3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      if (SHIBYTE(v199->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v633, v199->__r_.__value_.__l.__data_, v199->__r_.__value_.__l.__size_);
      }
      else
      {
        v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
        v633.__r_.__value_.__r.__words[2] = v199->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v633.__r_.__value_.__l.__data_ = v200;
      }
      MIL::IRTensorValueType::MakeStringValue();
      v634 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v444 = (std::__shared_weak_count *)operator new();
        v445 = __p.__r_.__value_.__r.__words[0];
        v444->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v444->__shared_owners_ = 0;
        v444->__shared_weak_owners_ = 0;
        v444[1].__vftable = (std::__shared_weak_count_vtbl *)v445;
      }
      else
      {
        v444 = 0;
      }
      v635 = v444;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v446 = v638;
      if (v638)
      {
        v447 = (unint64_t *)&v638->__shared_owners_;
        do
          v448 = __ldaxr(v447);
        while (__stlxr(v448 - 1, v447));
        if (!v448)
        {
          ((void (*)(std::__shared_weak_count *))v446->__on_zero_shared)(v446);
          std::__shared_weak_count::__release_weak(v446);
        }
      }
      v449 = v635;
      if (v635)
      {
        v450 = (unint64_t *)&v635->__shared_owners_;
        do
          v451 = __ldaxr(v450);
        while (__stlxr(v451 - 1, v450));
        if (!v451)
        {
          ((void (*)(std::__shared_weak_count *))v449->__on_zero_shared)(v449);
          std::__shared_weak_count::__release_weak(v449);
        }
      }
      v452 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v452)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v452 + 8))(v452);
      if (SHIBYTE(v633.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v633.__r_.__value_.__l.__data_);
      if (v637 < 0)
      {
        v323 = v636;
        goto LABEL_911;
      }
LABEL_912:
      v453 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v589 + 64))(v589);
      (*(void (**)(std::__fs::filesystem::path *__return_ptr, uint64_t, MIL::IRObject *))(*(_QWORD *)v453
                                                                                                  + 120))(&v763, v453, v589);
      v626 = 13;
      strcpy((char *)v625, "function_name");
      if (SHIBYTE(v763.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v622, v763.__pn_.__r_.__value_.__l.__data_, v763.__pn_.__r_.__value_.__l.__size_);
      else
        v622 = v763.__pn_;
      MIL::IRTensorValueType::MakeStringValue();
      v623 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v454 = (std::__shared_weak_count *)operator new();
        v455 = __p.__r_.__value_.__r.__words[0];
        v454->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v454->__shared_owners_ = 0;
        v454->__shared_weak_owners_ = 0;
        v454[1].__vftable = (std::__shared_weak_count_vtbl *)v455;
      }
      else
      {
        v454 = 0;
      }
      v624 = v454;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v456 = v627;
      if (v627)
      {
        v457 = (unint64_t *)&v627->__shared_owners_;
        do
          v458 = __ldaxr(v457);
        while (__stlxr(v458 - 1, v457));
        if (!v458)
        {
          ((void (*)(std::__shared_weak_count *))v456->__on_zero_shared)(v456);
          std::__shared_weak_count::__release_weak(v456);
        }
      }
      v459 = v624;
      if (v624)
      {
        v460 = (unint64_t *)&v624->__shared_owners_;
        do
          v461 = __ldaxr(v460);
        while (__stlxr(v461 - 1, v460));
        if (!v461)
        {
          ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
          std::__shared_weak_count::__release_weak(v459);
        }
      }
      v462 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v462)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v462 + 8))(v462);
      if (SHIBYTE(v622.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v622.__r_.__value_.__l.__data_);
      if (v626 < 0)
        operator delete(v625[0]);
      if (Espresso::AOT::FuncHasFlexibleInputsOrOutputs(a5, (uint64_t)&v763))
      {
        v620 = 15;
        strcpy(v619, "allow_reshaping");
        MIL::IRTensorValueType::MakeBoolValue(v76);
        v617 = __p.__r_.__value_.__r.__words[0];
        v463 = a5;
        if (__p.__r_.__value_.__r.__words[0])
        {
          v464 = (std::__shared_weak_count *)operator new();
          v465 = __p.__r_.__value_.__r.__words[0];
          v464->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
          v464->__shared_owners_ = 0;
          v464->__shared_weak_owners_ = 0;
          v464[1].__vftable = (std::__shared_weak_count_vtbl *)v465;
        }
        else
        {
          v464 = 0;
        }
        v618 = v464;
        __p.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::OperationBuilder::SetAttribute();
        if (v621)
        {
          v468 = &v621->__shared_owners_;
          do
            v469 = __ldaxr((unint64_t *)v468);
          while (__stlxr(v469 - 1, (unint64_t *)v468));
          if (!v469)
          {
            ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
            std::__shared_weak_count::__release_weak(v621);
          }
        }
        if (v618)
        {
          v470 = &v618->__shared_owners_;
          do
            v471 = __ldaxr((unint64_t *)v470);
          while (__stlxr(v471 - 1, (unint64_t *)v470));
          if (!v471)
          {
            ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
            std::__shared_weak_count::__release_weak(v618);
          }
        }
        v472 = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v472)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v472 + 8))(v472);
        if (v620 < 0)
        {
          v473 = v619;
LABEL_969:
          operator delete(*(void **)v473);
        }
      }
      else
      {
        v615 = 15;
        strcpy(v614, "allow_reshaping");
        MIL::IRTensorValueType::MakeBoolValue(v76);
        v612 = __p.__r_.__value_.__r.__words[0];
        v463 = a5;
        if (__p.__r_.__value_.__r.__words[0])
        {
          v466 = (std::__shared_weak_count *)operator new();
          v467 = __p.__r_.__value_.__r.__words[0];
          v466->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
          v466->__shared_owners_ = 0;
          v466->__shared_weak_owners_ = 0;
          v466[1].__vftable = (std::__shared_weak_count_vtbl *)v467;
        }
        else
        {
          v466 = 0;
        }
        v613 = v466;
        __p.__r_.__value_.__r.__words[0] = 0;
        MIL::Builder::OperationBuilder::SetAttribute();
        if (v616)
        {
          v474 = &v616->__shared_owners_;
          do
            v475 = __ldaxr((unint64_t *)v474);
          while (__stlxr(v475 - 1, (unint64_t *)v474));
          if (!v475)
          {
            ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
            std::__shared_weak_count::__release_weak(v616);
          }
        }
        if (v613)
        {
          v476 = &v613->__shared_owners_;
          do
            v477 = __ldaxr((unint64_t *)v476);
          while (__stlxr(v477 - 1, (unint64_t *)v476));
          if (!v477)
          {
            ((void (*)(std::__shared_weak_count *))v613->__on_zero_shared)(v613);
            std::__shared_weak_count::__release_weak(v613);
          }
        }
        v478 = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        if (v478)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v478 + 8))(v478);
        if (v615 < 0)
        {
          v473 = v614;
          goto LABEL_969;
        }
      }
      Espresso::AOT::GetCallees(v463, (uint64_t)&__p);
      memset(&v759, 0, sizeof(v759));
      v479 = __p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v480 = 0;
        do
        {
          v482 = (__int128 *)(v479 + 16);
          if ((unint64_t)v480 < v759.__pn_.__r_.__value_.__r.__words[2])
          {
            if (*(char *)(v479 + 39) < 0)
            {
              std::string::__init_copy_ctor_external(v480, *(const std::string::value_type **)(v479 + 16), *(_QWORD *)(v479 + 24));
            }
            else
            {
              v481 = *v482;
              v480->__r_.__value_.__r.__words[2] = *(_QWORD *)(v479 + 32);
              *(_OWORD *)&v480->__r_.__value_.__l.__data_ = v481;
            }
            ++v480;
          }
          else
          {
            v480 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v759.__pn_.__r_.__value_.__l.__data_, (uint64_t)v482);
          }
          v759.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v480;
          v479 = *(_QWORD *)v479;
        }
        while (v479);
        v479 = v759.__pn_.__r_.__value_.__r.__words[0];
      }
      else
      {
        v480 = 0;
      }
      v483 = operator new(8uLL);
      v758.__r_.__value_.__r.__words[0] = (std::string::size_type)v483;
      *v483 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v480 - v479) >> 3);
      v758.__r_.__value_.__l.__size_ = (std::string::size_type)(v483 + 1);
      v758.__r_.__value_.__r.__words[2] = (std::string::size_type)(v483 + 1);
      MIL::IRTensorValueType::Make();
      if (v758.__r_.__value_.__r.__words[0])
      {
        v758.__r_.__value_.__l.__size_ = v758.__r_.__value_.__r.__words[0];
        operator delete(v758.__r_.__value_.__l.__data_);
      }
      v610 = 12;
      strcpy((char *)v609, "callee_names");
      MIL::IRTensorValueType::MakeStringValue();
      v607 = v758.__r_.__value_.__r.__words[0];
      if (v758.__r_.__value_.__r.__words[0])
      {
        v484 = (std::__shared_weak_count *)operator new();
        v485 = v758.__r_.__value_.__r.__words[0];
        v484->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v484->__shared_owners_ = 0;
        v484->__shared_weak_owners_ = 0;
        v484[1].__vftable = (std::__shared_weak_count_vtbl *)v485;
      }
      else
      {
        v484 = 0;
      }
      v608 = v484;
      v758.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      if (v611)
      {
        v486 = &v611->__shared_owners_;
        do
          v487 = __ldaxr((unint64_t *)v486);
        while (__stlxr(v487 - 1, (unint64_t *)v486));
        if (!v487)
        {
          ((void (*)(std::__shared_weak_count *))v611->__on_zero_shared)(v611);
          std::__shared_weak_count::__release_weak(v611);
        }
      }
      if (v608)
      {
        v488 = &v608->__shared_owners_;
        do
          v489 = __ldaxr((unint64_t *)v488);
        while (__stlxr(v489 - 1, (unint64_t *)v488));
        if (!v489)
        {
          ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
          std::__shared_weak_count::__release_weak(v608);
        }
      }
      v490 = v758.__r_.__value_.__r.__words[0];
      v758.__r_.__value_.__r.__words[0] = 0;
      if (v490)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v490 + 8))(v490);
      if (v610 < 0)
        operator delete(v609[0]);
      v491 = v759.__pn_.__r_.__value_.__r.__words[0];
      if (v759.__pn_.__r_.__value_.__r.__words[0])
      {
        v492 = v759.__pn_.__r_.__value_.__l.__size_;
        v493 = (void *)v759.__pn_.__r_.__value_.__r.__words[0];
        if (v759.__pn_.__r_.__value_.__l.__size_ != v759.__pn_.__r_.__value_.__r.__words[0])
        {
          do
          {
            if (*(char *)(v492 - 1) < 0)
              operator delete(*(void **)(v492 - 24));
            v492 -= 24;
          }
          while (v492 != v491);
          v493 = (void *)v759.__pn_.__r_.__value_.__r.__words[0];
        }
        v759.__pn_.__r_.__value_.__l.__size_ = v491;
        operator delete(v493);
      }
      v494 = (void **)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        do
        {
          while (1)
          {
            v495 = (void **)*v494;
            v496 = (std::__shared_weak_count *)v494[6];
            if (v496)
            {
              v497 = (unint64_t *)&v496->__shared_owners_;
              do
                v498 = __ldaxr(v497);
              while (__stlxr(v498 - 1, v497));
              if (!v498)
              {
                ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
                std::__shared_weak_count::__release_weak(v496);
              }
            }
            if (*((char *)v494 + 39) < 0)
              break;
            operator delete(v494);
            v494 = v495;
            if (!v495)
              goto LABEL_1018;
          }
          operator delete(v494[2]);
          operator delete(v494);
          v494 = v495;
        }
        while (v495);
      }
LABEL_1018:
      v499 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v499)
        operator delete(v499);
      if (SHIBYTE(v763.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v763.__pn_.__r_.__value_.__l.__data_);
      v113 = (std::__shared_weak_count *)v756.__r_.__value_.__l.__size_;
      if (v756.__r_.__value_.__l.__size_)
      {
        v500 = (unint64_t *)(v756.__r_.__value_.__l.__size_ + 8);
        do
          v184 = __ldaxr(v500);
        while (__stlxr(v184 - 1, v500));
        goto LABEL_1075;
      }
      goto LABEL_1077;
    case 9:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
      strcpy((char *)&__p, "e5_minimal_cpu");
      MIL::IROpset::TryGetOperatorSharedPtr();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v763.__pn_.__r_.__value_.__r.__words[0])
      {
        v578 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v578, "Operator e5_minimal_cpu is missing in E5RT opset.");
        __cxa_throw(v578, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v606 = *(_OWORD *)&v763.__pn_.__r_.__value_.__l.__data_;
      if (v763.__pn_.__r_.__value_.__l.__size_)
      {
        v55 = (unint64_t *)(v763.__pn_.__r_.__value_.__l.__size_ + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      MIL::Builder::OperationBuilder::Make();
      v57 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)a7 = v57;
      if (*((_QWORD *)&v606 + 1))
      {
        v58 = (unint64_t *)(*((_QWORD *)&v606 + 1) + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v606 + 1) + 16))(*((_QWORD *)&v606 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v606 + 1));
        }
      }
      HIBYTE(v604[2]) = 16;
      strcpy((char *)v604, "model_assets_url");
      v60 = *a3;
      if (a3[1] == *a3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      if (SHIBYTE(v60->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v601, v60->__r_.__value_.__l.__data_, v60->__r_.__value_.__l.__size_);
      }
      else
      {
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v601.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v601.__r_.__value_.__l.__data_ = v61;
      }
      MIL::IRTensorValueType::MakeStringValue();
      v602 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v98 = (std::__shared_weak_count *)operator new();
        v99 = __p.__r_.__value_.__r.__words[0];
        v98->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
        v98->__shared_owners_ = 0;
        v98->__shared_weak_owners_ = 0;
        v98[1].__vftable = (std::__shared_weak_count_vtbl *)v99;
      }
      else
      {
        v98 = 0;
      }
      v603 = v98;
      __p.__r_.__value_.__r.__words[0] = 0;
      MIL::Builder::OperationBuilder::SetAttribute();
      v122 = v605;
      if (v605)
      {
        v123 = (unint64_t *)&v605->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v125 = v603;
      if (v603)
      {
        v126 = (unint64_t *)&v603->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
      }
      v128 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v128)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v128 + 8))(v128);
      if (SHIBYTE(v601.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v601.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v604[2]) & 0x80000000) == 0)
        {
LABEL_222:
          v113 = (std::__shared_weak_count *)v763.__pn_.__r_.__value_.__l.__size_;
          if (!v763.__pn_.__r_.__value_.__l.__size_)
            goto LABEL_1077;
          goto LABEL_332;
        }
      }
      else if ((SHIBYTE(v604[2]) & 0x80000000) == 0)
      {
        goto LABEL_222;
      }
      operator delete(v604[0]);
      v113 = (std::__shared_weak_count *)v763.__pn_.__r_.__value_.__l.__size_;
      if (!v763.__pn_.__r_.__value_.__l.__size_)
        goto LABEL_1077;
LABEL_332:
      v185 = (unint64_t *)&v113->__shared_owners_;
      do
        v184 = __ldaxr(v185);
      while (__stlxr(v184 - 1, v185));
      goto LABEL_1075;
    default:
      v567 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      v758.__r_.__value_.__r.__words[0] = (std::string::size_type)Espresso::AOT::GetBackendName(v695);
      v758.__r_.__value_.__l.__size_ = v568;
      v569 = (std::string *)std::string::basic_string<std::string_view,0>(&v759, (uint64_t)&v758);
      v570 = std::string::insert(v569, 0, "Found unsupported backend: ");
      v571 = *(_OWORD *)&v570->__r_.__value_.__l.__data_;
      v763.__pn_.__r_.__value_.__r.__words[2] = v570->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v763.__pn_.__r_.__value_.__l.__data_ = v571;
      v570->__r_.__value_.__l.__size_ = 0;
      v570->__r_.__value_.__r.__words[2] = 0;
      v570->__r_.__value_.__r.__words[0] = 0;
      v572 = std::string::append(&v763.__pn_, ".");
      v573 = *(_OWORD *)&v572->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v572->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v573;
      v572->__r_.__value_.__l.__size_ = 0;
      v572->__r_.__value_.__r.__words[2] = 0;
      v572->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(v567, &__p);
      v567->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v567, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
}

void sub_191148F80(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;

  if (SLOBYTE(STACK[0x8D7]) < 0)
  {
    operator delete((void *)STACK[0x8C0]);
    if (*(char *)(v4 - 121) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v4 - 144));
      if ((*(char *)(v4 - 185) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (*(char *)(v4 - 121) < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v4 - 185) & 0x80000000) == 0)
  {
LABEL_6:
    if (!v3)
    {
LABEL_11:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
      if (SLOBYTE(STACK[0x847]) < 0)
        operator delete((void *)STACK[0x830]);
      _Unwind_Resume(a1);
    }
LABEL_10:
    __cxa_free_exception(v2);
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(v4 - 208));
  if ((v3 & 1) == 0)
    goto LABEL_11;
  goto LABEL_10;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 40 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>(a1, a2, a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 40 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>(a1, a2, a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

void sub_19114A29C(_Unwind_Exception *a1)
{
  uint64_t v1;
  char *v3;

  v3 = *(char **)(v1 + 16);
  if (v3)
    std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(v3);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  _Unwind_Resume(a1);
}

MIL::Attributes::BlobFileMutabilityInfo **std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo>::~unique_ptr[abi:ne180100](MIL::Attributes::BlobFileMutabilityInfo **a1)
{
  MIL::Attributes::BlobFileMutabilityInfo *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::Attributes::BlobFileMutabilityInfo::~BlobFileMutabilityInfo(v2);
    MEMORY[0x19401CD90]();
  }
  return a1;
}

void Espresso::AOT::E5BackendToE5RTLoweringPass::LowerTransfer(Espresso::AOT::E5BackendToE5RTLoweringPass *this, MIL::MILContext *a2, const MIL::IROperation *a3)
{
  const char *OpsetName;
  unint64_t v5;
  const char *v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v15;
  int v16;
  E5Common::Utils *ParameterType;
  E5Common::Utils *Type;
  const MIL::IRValueType *v19;
  const MIL::IRValueType *v20;
  uint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  MIL::IRNamedValueType **v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t Name;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  MIL::IRTensorValueType *Scalar;
  std::__shared_weak_count *v46;
  std::string::size_type v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::string::size_type v52;
  const MIL::IRValueType *v53;
  const MIL::IRValueType *v54;
  uint64_t v55;
  MIL::IRMemoryLayoutValueType *v56;
  std::__shared_weak_count *v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::logic_error *exception;
  std::logic_error *v76;
  std::logic_error *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  void *v80[3];
  std::__shared_weak_count *v81;
  std::string v82;
  std::__shared_weak_count *v83;
  void *v84;
  std::__shared_weak_count *v85;
  void *v86;
  char v87;
  std::__shared_weak_count *v88;
  std::string v89;
  void *__p;
  char v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  void *v94;
  std::__shared_weak_count *v95;
  char v96;
  void *__dst[2];
  unint64_t v98;
  void *v99;
  std::__shared_weak_count *v100;
  std::string v101;
  void *v102;
  std::__shared_weak_count *v103;

  OpsetName = E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOpsetName(this);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = OpsetName;
  v7 = (void *)v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v98 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v98) = v5;
  v8 = __dst;
  if (v5)
LABEL_8:
    memmove(v8, v6, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  MIL::MILContext::GetOpset();
  v11 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a3 + 56))(a3);
  v12 = *(char *)(v11 + 23);
  if (v12 < 0)
  {
    if (*(_QWORD *)(v11 + 8) != 19)
      goto LABEL_162;
    v11 = *(_QWORD *)v11;
  }
  else if (v12 != 19)
  {
    goto LABEL_162;
  }
  if (*(_QWORD *)v11 != 0x736F695F4C4D3545
    || *(_QWORD *)(v11 + 8) != 0x736E6172742E3631
    || *(_QWORD *)(v11 + 11) != 0x726566736E617274)
  {
LABEL_162:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(const MIL::IROperation *))(*(_QWORD *)a3 + 56))(a3);
    std::operator+<char>();
    std::logic_error::logic_error(exception, &v101);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v15 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)a3 + 176))(a3);
  *((_BYTE *)&v101.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v101, "values");
  if (MIL::IROperation::IsParameterSet())
  {
    v96 = 6;
    strcpy((char *)&v94, "values");
    v16 = (*(uint64_t (**)(const MIL::IROperation *, void **))(*(_QWORD *)a3 + 152))(a3, &v94);
    if ((v96 & 0x80000000) == 0)
    {
      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_25;
LABEL_28:
      operator delete(v101.__r_.__value_.__l.__data_);
      if (v16 != 1)
        goto LABEL_163;
      goto LABEL_29;
    }
    operator delete(v94);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_28;
  }
  else
  {
    v16 = 0;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_28;
  }
LABEL_25:
  if (v16 != 1)
  {
LABEL_163:
    v76 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v76, "Only one input/output is supported for transfer.");
    v76->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v76, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
LABEL_29:
  if (*(_QWORD *)(v15 + 8) - *(_QWORD *)v15 != 16)
    goto LABEL_163;
  *((_BYTE *)&v101.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v101, "values");
  ParameterType = (E5Common::Utils *)MIL::IROperation::GetParameterType();
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (*(_QWORD *)(v15 + 8) == *(_QWORD *)v15)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  Type = (E5Common::Utils *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v15);
  if (!E5Common::Utils::IsTensor((uint64_t)ParameterType)
    && !E5Common::Utils::IsTensorBuffer(ParameterType, v19)
    || !E5Common::Utils::IsTensor((uint64_t)Type) && !E5Common::Utils::IsTensorBuffer(Type, v20))
  {
    v77 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v77, "Unexpected input/output types for transfer op.");
    v77->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v77, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  *((_BYTE *)&v101.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v101, "cast");
  MIL::IROpset::TryGetOperatorSharedPtr();
  MIL::Builder::OperationBuilder::Make();
  if (!v93)
    goto LABEL_41;
  p_shared_owners = &v93->__shared_owners_;
  do
    v22 = __ldaxr((unint64_t *)p_shared_owners);
  while (__stlxr(v22 - 1, (unint64_t *)p_shared_owners));
  if (v22)
  {
LABEL_41:
    if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
  std::__shared_weak_count::__release_weak(v93);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
LABEL_42:
    operator delete(v101.__r_.__value_.__l.__data_);
LABEL_43:
  *((_BYTE *)&v101.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v101, "values");
  v23 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, _QWORD))(*(_QWORD *)a3 + 120))(a3, &v101, 0);
  v24 = v23;
  if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v23)
      goto LABEL_45;
LABEL_48:
    *((_BYTE *)&v101.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v101, "values");
    (*(void (**)(void **__return_ptr, const MIL::IROperation *, std::string *, _QWORD))(*(_QWORD *)a3 + 136))(&v94, a3, &v101, 0);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    v87 = 1;
    LOWORD(v86) = 120;
    v84 = v94;
    v85 = v95;
    if (v95)
    {
      v26 = (unint64_t *)&v95->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    MIL::Builder::OperationBuilder::AddInput();
    if (!v88)
      goto LABEL_57;
    v28 = &v88->__shared_owners_;
    do
      v29 = __ldaxr((unint64_t *)v28);
    while (__stlxr(v29 - 1, (unint64_t *)v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
      v30 = v85;
      if (!v85)
        goto LABEL_61;
    }
    else
    {
LABEL_57:
      v30 = v85;
      if (!v85)
        goto LABEL_61;
    }
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      if ((v87 & 0x80000000) == 0)
      {
LABEL_62:
        v33 = v95;
        if (!v95)
          goto LABEL_87;
        goto LABEL_84;
      }
LABEL_83:
      operator delete(v86);
      v33 = v95;
      if (!v95)
        goto LABEL_87;
LABEL_84:
      v38 = (unint64_t *)&v33->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        v37 = *(MIL::IRNamedValueType ***)v15;
        if (*(_QWORD *)(v15 + 8) != *(_QWORD *)v15)
          goto LABEL_88;
LABEL_79:
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
LABEL_87:
      v37 = *(MIL::IRNamedValueType ***)v15;
      if (*(_QWORD *)(v15 + 8) != *(_QWORD *)v15)
        goto LABEL_88;
      goto LABEL_79;
    }
LABEL_61:
    if ((v87 & 0x80000000) == 0)
      goto LABEL_62;
    goto LABEL_83;
  }
  operator delete(v101.__r_.__value_.__l.__data_);
  if (!v24)
    goto LABEL_48;
LABEL_45:
  v91 = 1;
  LOWORD(__p) = 120;
  if (*(char *)(v24 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v24, *(_QWORD *)(v24 + 8));
  }
  else
  {
    v25 = *(_OWORD *)v24;
    v89.__r_.__value_.__r.__words[2] = *(_QWORD *)(v24 + 16);
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v25;
  }
  MIL::Builder::OperationBuilder::AddInput();
  v34 = v92;
  if (!v92)
    goto LABEL_71;
  v35 = (unint64_t *)&v92->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (v36)
  {
LABEL_71:
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_72;
LABEL_77:
    operator delete(v89.__r_.__value_.__l.__data_);
    if (v91 < 0)
      goto LABEL_78;
    goto LABEL_87;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_77;
LABEL_72:
  if ((v91 & 0x80000000) == 0)
    goto LABEL_87;
LABEL_78:
  operator delete(__p);
  v37 = *(MIL::IRNamedValueType ***)v15;
  if (*(_QWORD *)(v15 + 8) == *(_QWORD *)v15)
    goto LABEL_79;
LABEL_88:
  Name = MIL::IRNamedValueType::GetName(*v37);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)Name, *(_QWORD *)(Name + 8));
  }
  else
  {
    v41 = *(_OWORD *)Name;
    v82.__r_.__value_.__r.__words[2] = *(_QWORD *)(Name + 16);
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v41;
  }
  MIL::Builder::OperationBuilder::AddOutput();
  v42 = v83;
  if (!v83)
    goto LABEL_95;
  v43 = (unint64_t *)&v83->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (v44)
  {
LABEL_95:
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_96;
  }
  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
  std::__shared_weak_count::__release_weak(v42);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
LABEL_96:
    operator delete(v82.__r_.__value_.__l.__data_);
LABEL_97:
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  HIBYTE(v80[2]) = 16;
  strcpy((char *)v80, "execution_device");
  MIL::IRTensorValueType::MakeUInt32Value(Scalar);
  if (v101.__r_.__value_.__r.__words[0])
  {
    v46 = (std::__shared_weak_count *)operator new();
    v47 = v101.__r_.__value_.__r.__words[0];
    v46->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2BE0;
    v46->__shared_owners_ = 0;
    v46->__shared_weak_owners_ = 0;
    v46[1].__vftable = (std::__shared_weak_count_vtbl *)v47;
  }
  else
  {
    v46 = 0;
  }
  v79 = v46;
  v101.__r_.__value_.__r.__words[0] = 0;
  MIL::Builder::OperationBuilder::SetAttribute();
  if (v81)
  {
    v48 = &v81->__shared_owners_;
    do
      v49 = __ldaxr((unint64_t *)v48);
    while (__stlxr(v49 - 1, (unint64_t *)v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v79)
  {
    v50 = (unint64_t *)&v79->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v52 = v101.__r_.__value_.__r.__words[0];
  v101.__r_.__value_.__r.__words[0] = 0;
  if (v52)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v52 + 8))(v52);
  if (SHIBYTE(v80[2]) < 0)
    operator delete(v80[0]);
  if (E5Common::Utils::IsTensor((uint64_t)Type) || E5Common::Utils::IsTensorBuffer(Type, v53))
  {
    v94 = 0;
    v95 = 0;
    if (E5Common::Utils::IsTensor((uint64_t)Type))
    {
      v55 = MIL::IRValueType::AsTensorType(Type);
      *((_BYTE *)&v101.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v101, "alignments");
      (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v55 + 72))(&v102, v55, &v101);
    }
    else
    {
      if (!E5Common::Utils::IsTensorBuffer(Type, v54))
        goto LABEL_139;
      v56 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(Type);
      MIL::IRMemoryLayoutValueType::AsTensorBufferType(v56);
      *((_BYTE *)&v101.__r_.__value_.__s + 23) = 10;
      strcpy((char *)&v101, "alignments");
      MIL::IRTensorBufferValueType::TryGetAttributeSharedPtr();
    }
    v58 = v102;
    v57 = v103;
    v102 = 0;
    v103 = 0;
    v94 = v58;
    v95 = v57;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v101.__r_.__value_.__l.__data_);
      if (!v58)
        goto LABEL_139;
    }
    else if (!v58)
    {
      goto LABEL_139;
    }
    *((_BYTE *)&v101.__r_.__value_.__s + 23) = 17;
    strcpy((char *)&v101, "output_alignments");
    v99 = v58;
    v100 = v57;
    if (v57)
    {
      v59 = (unint64_t *)&v57->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    MIL::Builder::OperationBuilder::SetAttribute();
    v61 = v103;
    if (!v103)
      goto LABEL_133;
    v62 = (unint64_t *)&v103->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
      v64 = v100;
      if (v100)
        goto LABEL_134;
    }
    else
    {
LABEL_133:
      v64 = v100;
      if (v100)
      {
LABEL_134:
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
          if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_139;
          goto LABEL_138;
        }
      }
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
LABEL_138:
      operator delete(v101.__r_.__value_.__l.__data_);
LABEL_139:
    v67 = v95;
    if (v95)
    {
      v68 = (unint64_t *)&v95->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
  v70 = *(std::__shared_weak_count **)(MIL::IRObject::GetLocationPtr(a3) + 8);
  v78 = v70;
  if (v70)
  {
    v71 = (unint64_t *)&v70->__shared_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  MIL::Builder::OperationBuilder::SetLocation();
  if (!v78)
    goto LABEL_151;
  v73 = (unint64_t *)&v78->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (v74)
  {
LABEL_151:
    if ((SHIBYTE(v98) & 0x80000000) == 0)
      return;
    goto LABEL_152;
  }
  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
  std::__shared_weak_count::__release_weak(v78);
  if (SHIBYTE(v98) < 0)
LABEL_152:
    operator delete(__dst[0]);
}

void sub_19114AE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;
  uint64_t v52;

  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v52 - 176);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v51);
  if (*(char *)(v52 - 129) < 0)
    operator delete(*(void **)(v52 - 152));
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::E5BackendToE5RTLoweringPass::Run@<X0>(uint64_t a1@<X0>, MIL::IRObject *a2@<X1>, unsigned __int8 **a3@<X2>, _QWORD *a4@<X8>)
{
  E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *v7;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *OpsetName;
  unint64_t v9;
  std::string::size_type v10;
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  size_t v17;
  const char *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  void **v24;
  uint64_t Function;
  uint64_t v26;
  _QWORD ***v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  std::string *p_sz;
  std::string::size_type size;
  int BackendIdentifier;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  std::string *v38;
  uint64_t v39;
  void **v40;
  void **v41;
  void **v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *LocationPtr;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *i;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  MIL::IRObject *v66;
  uint64_t v67;
  uint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  MIL::IRObject *v80;
  uint64_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  const MIL::IROperation ****v88;
  const MIL::IROperation **v89;
  const MIL::IROperation **v90;
  int v91;
  const MIL::IROperation *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t Output;
  const void **v99;
  int v100;
  size_t v101;
  unint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  const void *v109;
  int v110;
  const std::string::value_type *v111;
  std::string::size_type v112;
  std::string *v113;
  const char *BackendName;
  unint64_t v115;
  size_t v116;
  const char *v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  BOOL v122;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint8x8_t v132;
  unint64_t v133;
  uint64_t **v134;
  uint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t **v143;
  uint64_t *v144;
  uint64_t v145;
  size_t prime;
  unint64_t v147;
  int8x8_t v148;
  BOOL v149;
  unint64_t v150;
  uint8x8_t v151;
  uint64_t v152;
  void *v153;
  void *v154;
  uint64_t v155;
  _QWORD **v156;
  size_t v157;
  size_t v158;
  size_t v159;
  _QWORD *v160;
  size_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  size_t v165;
  _QWORD *j;
  unsigned __int8 *v167;
  char *v168;
  void *v169;
  char *v172;
  std::string *v173;
  std::string::size_type v174;
  std::string::size_type v175;
  std::string::size_type v176;
  std::string *v177;
  std::string::size_type v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  int64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  __int128 v190;
  char *v191;
  __int128 *v192;
  char *v193;
  __int128 *v194;
  uint64_t *v195;
  MIL::Attributes::FlexibleShapeInfo *v196;
  std::string *v197;
  __int128 v198;
  uint64_t *v199;
  MIL::Attributes::FlexibleShapeInfo *v200;
  uint64_t v201;
  MIL::Attributes::FlexibleShapeInfo *v202;
  uint64_t v203;
  _BYTE *v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  MIL::Attributes::FlexibleShapeInfo *v211;
  uint64_t v212;
  MIL::Attributes::FlexibleShapeInfo *v213;
  uint64_t *v214;
  MIL::Attributes::FlexibleShapeInfo *v215;
  char *v216;
  std::string *v217;
  __int128 v218;
  uint64_t *v219;
  std::string::size_type v220;
  uint64_t v221;
  _BYTE *v222;
  uint64_t v223;
  _BYTE *v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  MIL::Attributes::FlexibleShapeInfo **v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  void *v237;
  MIL::Attributes::FlexibleShapeInfo *v238;
  MIL::Attributes::FlexibleShapeInfo *v239;
  MIL::Attributes::FlexibleShapeInfo *v240;
  std::string *v241;
  std::string *v242;
  std::string::__raw *v243;
  uint64_t v244;
  uint64_t v245;
  void *v246;
  char *v247;
  MIL::Attributes::FlexibleShapeInfo **v248;
  std::string *v249;
  std::string *v250;
  uint64_t *v251;
  std::string *v252;
  __int128 v253;
  __int128 *v254;
  MIL::Attributes::FlexibleShapeInfo *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  MIL::Attributes::FlexibleShapeInfo *v270;
  MIL::Attributes::FlexibleShapeInfo *v271;
  MIL::Attributes::FlexibleShapeInfo *v272;
  MIL::Attributes::FlexibleShapeInfo *v273;
  MIL::Attributes::FlexibleShapeInfo *v274;
  MIL::Attributes::FlexibleShapeInfo *v275;
  std::string::size_type *v276;
  void *v277;
  _BYTE *v278;
  size_t v279;
  char *v280;
  char *v281;
  char *v282;
  _OWORD *v283;
  __int128 *v284;
  unint64_t v285;
  __int128 v286;
  char v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t Attribute;
  uint64_t v295;
  MIL::Attributes::FlexibleShapeInfo *EnumeratedShapes;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  uint64_t *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  uint64_t *v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  __int128 v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  uint64_t *v319;
  uint64_t *v320;
  char *v321;
  void *v322;
  MIL::Attributes::FlexibleShapeInfo *v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  MIL::Attributes::FlexibleShapeInfo *v327;
  std::__shared_weak_count *v328;
  char *v329;
  void *v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  _QWORD *v339;
  void *v340;
  MIL::Builder::ProgramBuilder *v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::logic_error *v346;
  std::string *v347;
  __int128 v348;
  std::logic_error *v349;
  std::string *v350;
  __int128 v351;
  std::logic_error *exception;
  std::string *v353;
  __int128 v354;
  const std::string::value_type *v355;
  std::string::size_type v356;
  std::string *v357;
  __int128 v358;
  std::string *v359;
  __int128 v360;
  std::logic_error *v361;
  std::string *v362;
  __int128 v363;
  const std::string::value_type *v364;
  std::string::size_type v365;
  std::string *v366;
  __int128 v367;
  std::string *v368;
  __int128 v369;
  std::runtime_error *v370;
  _QWORD *v371;
  unsigned __int8 *v372;
  MIL::IRObject *v373;
  const MIL::IROperation **v375;
  uint64_t v376;
  Espresso::AOT::AOTCompilerOptions *v377;
  int v378;
  const MIL::IROperation **v379;
  unsigned __int8 *v380;
  int v381;
  int v382;
  uint64_t v383;
  int v384;
  MIL::IRObject *v385;
  uint64_t v386;
  _BYTE v387[32];
  char *v388;
  char *v389;
  uint64_t *v390;
  std::__shared_weak_count *v391;
  uint64_t *v392;
  std::__shared_weak_count *v393;
  MIL::MILContext *v394;
  std::__shared_weak_count *v395;
  void *v396;
  char v397;
  void *v398;
  char v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  __int128 v402;
  uint64_t v403;
  std::__shared_weak_count *v404;
  __int128 v405;
  MIL::Attributes::FlexibleShapeInfo *v406[2];
  unint64_t v407;
  MIL::Attributes::FlexibleShapeInfo *v408[2];
  unint64_t v409;
  std::string v410;
  unsigned int v411;
  uint64_t v412;
  std::__shared_weak_count *v413;
  std::string v414;
  std::__shared_weak_count *v415;
  std::string v416;
  uint64_t v417;
  std::__shared_weak_count *v418;
  MIL::Builder::FunctionBuilder *v419[2];
  std::string __s;
  std::string __sz;
  char v422;
  void *__p[2];
  __int128 v424;
  int v425;
  uint64_t v426;
  std::__shared_weak_count *v427;
  std::string v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  MIL::MILContext *v431;
  std::__shared_weak_count *v432;
  MIL::Builder::ProgramBuilder *v433;
  _BYTE v434[16];
  uint64_t *v435;
  char v436;
  BOOL v437;
  void **v438;
  size_t v439;
  int64_t v440;
  std::string __dst;
  MIL::MILContext *v442;
  std::__shared_weak_count *v443;
  std::string v444;
  std::string v445;
  uint64_t *v446;
  std::__shared_weak_count *v447;
  uint64_t *v448[3];

  kdebug_trace();
  v7 = (E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *)(*(_QWORD *(**)(MIL::MILContext **__return_ptr, MIL::IRObject *))(*(_QWORD *)a2 + 48))(&v442, a2);
  OpsetName = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOpsetName(v7);
  v10 = v9;
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = OpsetName;
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v10;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
  p_dst = &__dst;
  if (v9)
LABEL_8:
    OpsetName = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)memmove(p_dst, v11, v10);
  p_dst->__r_.__value_.__s.__data_[v10] = 0;
  v15 = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(OpsetName);
  v17 = v16;
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v18 = v15;
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v19 = (void **)operator new(v20 + 1);
    v439 = v17;
    v440 = v21 | 0x8000000000000000;
    v438 = v19;
    goto LABEL_16;
  }
  HIBYTE(v440) = v16;
  v19 = (void **)&v438;
  if (v16)
LABEL_16:
    memmove(v19, v18, v17);
  *((_BYTE *)v19 + v17) = 0;
  (*(void (**)(std::string *__return_ptr, MIL::IRObject *))(*(_QWORD *)a2 + 48))(&__s, a2);
  v371 = a4;
  memset(v387, 0, sizeof(v387));
  LODWORD(v388) = 1065353216;
  v22 = *a3;
  v380 = a3[1];
  v386 = (uint64_t)a2;
  if (*a3 != v380)
  {
    v384 = 0;
    v382 = 0;
    v23 = 0;
    v378 = 0;
    while (1)
    {
      Function = MIL::IRProgram::GetFunction();
      v26 = (*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)Function + 64))(Function, &v438);
      if (!v26)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v353 = std::string::append(&v444, " doesn't have the required specialization: ");
        v354 = *(_OWORD *)&v353->__r_.__value_.__l.__data_;
        v445.__r_.__value_.__r.__words[2] = v353->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v445.__r_.__value_.__l.__data_ = v354;
        v353->__r_.__value_.__l.__size_ = 0;
        v353->__r_.__value_.__r.__words[2] = 0;
        v353->__r_.__value_.__r.__words[0] = 0;
        if (v440 >= 0)
          v355 = (const std::string::value_type *)&v438;
        else
          v355 = (const std::string::value_type *)v438;
        if (v440 >= 0)
          v356 = HIBYTE(v440);
        else
          v356 = v439;
        v357 = std::string::append(&v445, v355, v356);
        v358 = *(_OWORD *)&v357->__r_.__value_.__l.__data_;
        __sz.__r_.__value_.__r.__words[2] = v357->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v358;
        v357->__r_.__value_.__l.__size_ = 0;
        v357->__r_.__value_.__r.__words[2] = 0;
        v357->__r_.__value_.__r.__words[0] = 0;
        v359 = std::string::append(&__sz, ".");
        v360 = *(_OWORD *)&v359->__r_.__value_.__l.__data_;
        *(_QWORD *)&v424 = *((_QWORD *)&v359->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v360;
        v359->__r_.__value_.__l.__size_ = 0;
        v359->__r_.__value_.__r.__words[2] = 0;
        v359->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, (const std::string *)__p);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      __p[1] = 0;
      __p[0] = 0;
      *(_QWORD *)&v424 = 0;
      v27 = (_QWORD ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 56))(v26);
      v29 = **v27;
      v28 = (*v27)[1];
      while (v29 != v28)
      {
        v30 = *v29;
        v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v29 + 64))(*v29);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 128))(v31))
          goto LABEL_24;
        *((_BYTE *)&v445.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v445, "backend");
        MIL::IRObject::GetAttribute();
        MIL::IRValue::GetScalar<std::string>();
        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_sz = &__sz;
        else
          p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
        else
          size = __sz.__r_.__value_.__l.__size_;
        BackendIdentifier = Espresso::AOT::GetBackendIdentifier((uint64_t)p_sz, size);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__sz.__r_.__value_.__l.__data_);
          if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_38:
            operator delete(v445.__r_.__value_.__l.__data_);
            if (BackendIdentifier != 2)
              goto LABEL_24;
            goto LABEL_39;
          }
        }
        else if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_38;
        }
        if (BackendIdentifier != 2)
          goto LABEL_24;
LABEL_39:
        v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 64))(v30);
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v35 + 120))(&__sz, v35, v30);
        v36 = __p[1];
        if (__p[1] >= (void *)v424)
        {
          v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)__p, (uint64_t)&__sz);
        }
        else
        {
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p[1], __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          }
          else
          {
            v37 = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
            *((_QWORD *)__p[1] + 2) = *((_QWORD *)&__sz.__r_.__value_.__l + 2);
            *v36 = v37;
          }
          v38 = (std::string *)((char *)v36 + 24);
        }
        __p[1] = v38;
        v39 = MIL::IRProgram::GetFunction();
        if (Espresso::AOT::HasFlexibleShape())
        {
          if (Espresso::AOT::HasFlexibleShapeWithEnumeratedConfig(v39))
          {
            v382 = 1;
          }
          else if ((v23 & 1) != 0 && Espresso::AOT::HasFlexibleShapeWithRangeConfig(v39))
          {
            v378 = 1;
            v23 = 1;
          }
          else
          {
            v23 |= Espresso::AOT::HasFlexibleShapeWithRangeConfig(v39);
          }
        }
        else
        {
          v384 = 1;
        }
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__sz.__r_.__value_.__l.__data_);
LABEL_24:
        v29 += 2;
      }
      v40 = (void **)__p[0];
      if (__p[0] != __p[1])
      {
        __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
        v41 = (void **)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v387, v22, (uint64_t)&std::piecewise_construct, (__int128 **)&__sz)+ 40);
        if (v41 != __p)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v41, (std::string *)__p[0], (std::string *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        v40 = (void **)__p[0];
      }
      if (v40)
      {
        v42 = (void **)__p[1];
        v24 = v40;
        if (__p[1] != v40)
        {
          do
          {
            if (*((char *)v42 - 1) < 0)
              operator delete(*(v42 - 3));
            v42 -= 3;
          }
          while (v42 != v40);
          v24 = (void **)__p[0];
        }
        __p[1] = v40;
        operator delete(v24);
      }
      v22 += 24;
      a2 = (MIL::IRObject *)v386;
      if (v22 == v380)
        goto LABEL_66;
    }
  }
  v378 = 0;
  v23 = 0;
  v382 = 0;
  v384 = 0;
LABEL_66:
  std::unordered_map<std::string,std::vector<std::string>>::unordered_map((uint64_t)v434, (uint64_t)v387);
  v436 = 1;
  v437 = ((v378 | v382 & v384 | v23 & v382 | v23 & v384) & 1) == 0;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v387);
  v43 = (std::__shared_weak_count *)__s.__r_.__value_.__l.__size_;
  if (__s.__r_.__value_.__l.__size_)
  {
    v44 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v431 = v442;
  v432 = v443;
  if (v443)
  {
    p_shared_owners = (unint64_t *)&v443->__shared_owners_;
    do
      v47 = __ldxr(p_shared_owners);
    while (__stxr(v47 + 1, p_shared_owners));
  }
  MIL::Builder::ProgramBuilder::Make();
  v48 = v432;
  if (v432)
  {
    v49 = (unint64_t *)&v432->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
  v52 = (std::__shared_weak_count *)LocationPtr[1];
  v429 = *LocationPtr;
  v430 = v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  MIL::Builder::ProgramBuilder::SetLocation();
  v55 = v430;
  if (v430)
  {
    v56 = (unint64_t *)&v430->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  for (i = *(uint64_t **)(MIL::IRObject::GetAttributes(a2) + 16); i; i = (uint64_t *)*i)
  {
    while (1)
    {
      if (*((char *)i + 39) < 0)
        std::string::__init_copy_ctor_external(&v428, (const std::string::value_type *)i[2], i[3]);
      else
        v428 = *(std::string *)(i + 2);
      v59 = (std::__shared_weak_count *)i[6];
      v426 = i[5];
      v427 = v59;
      if (v59)
      {
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      MIL::Builder::ProgramBuilder::SetAttribute();
      v62 = v427;
      if (v427)
      {
        v63 = (unint64_t *)&v427->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
        break;
      i = (uint64_t *)*i;
      if (!i)
        goto LABEL_103;
    }
    operator delete(v428.__r_.__value_.__l.__data_);
  }
LABEL_103:
  *(_OWORD *)__p = 0u;
  v424 = 0u;
  v425 = 1065353216;
  __sz.__r_.__value_.__s.__data_[0] = 0;
  v422 = 0;
  v65 = (uint64_t)*a3;
  v372 = a3[1];
  if (*a3 != v372)
  {
    v377 = (Espresso::AOT::AOTCompilerOptions *)(a1 + 8);
    while (1)
    {
      v66 = (MIL::IRObject *)MIL::IRProgram::GetFunction();
      v67 = (*(uint64_t (**)(MIL::IRObject *, void ***))(*(_QWORD *)v66 + 64))(v66, &v438);
      if (!v67)
      {
        v361 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v362 = std::string::append(&__s, " doesn't have the required specialization: ");
        v363 = *(_OWORD *)&v362->__r_.__value_.__l.__data_;
        v444.__r_.__value_.__r.__words[2] = v362->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v444.__r_.__value_.__l.__data_ = v363;
        v362->__r_.__value_.__l.__size_ = 0;
        v362->__r_.__value_.__r.__words[2] = 0;
        v362->__r_.__value_.__r.__words[0] = 0;
        if (v440 >= 0)
          v364 = (const std::string::value_type *)&v438;
        else
          v364 = (const std::string::value_type *)v438;
        if (v440 >= 0)
          v365 = HIBYTE(v440);
        else
          v365 = v439;
        v366 = std::string::append(&v444, v364, v365);
        v367 = *(_OWORD *)&v366->__r_.__value_.__l.__data_;
        v445.__r_.__value_.__r.__words[2] = v366->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v445.__r_.__value_.__l.__data_ = v367;
        v366->__r_.__value_.__l.__size_ = 0;
        v366->__r_.__value_.__r.__words[2] = 0;
        v366->__r_.__value_.__r.__words[0] = 0;
        v368 = std::string::append(&v445, ".");
        v369 = *(_OWORD *)&v368->__r_.__value_.__l.__data_;
        *(_QWORD *)&v387[16] = *((_QWORD *)&v368->__r_.__value_.__l + 2);
        *(_OWORD *)v387 = v369;
        v368->__r_.__value_.__l.__size_ = 0;
        v368->__r_.__value_.__r.__words[2] = 0;
        v368->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v361, (const std::string *)v387);
        v361->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(v361, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
      v373 = v66;
      MIL::Builder::ProgramBuilder::AddFunction();
      v68 = (uint64_t *)MIL::IRObject::GetLocationPtr(v66);
      v69 = (std::__shared_weak_count *)v68[1];
      v417 = *v68;
      v418 = v69;
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
      MIL::Builder::FunctionBuilder::SetLocation();
      v72 = v418;
      if (v418)
      {
        v73 = (unint64_t *)&v418->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v75 = (_QWORD *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v373 + 128))(v373);
      v76 = v75 + 1;
      v77 = (_QWORD *)*v75;
      if ((_QWORD *)*v75 != v75 + 1)
        break;
LABEL_116:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v414, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v414 = __dst;
      MIL::Builder::FunctionBuilder::AddBlock();
      if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v414.__r_.__value_.__l.__data_);
      MIL::Builder::FunctionBuilder::SetSpecialization();
      v80 = (MIL::IRObject *)(*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v373 + 40))(v373);
      v81 = (uint64_t *)MIL::IRObject::GetLocationPtr(v80);
      v82 = (std::__shared_weak_count *)v81[1];
      v412 = *v81;
      v413 = v82;
      if (v82)
      {
        v83 = (unint64_t *)&v82->__shared_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
      }
      MIL::Builder::BlockBuilder::SetLocation();
      v85 = v413;
      if (v413)
      {
        v86 = (unint64_t *)&v413->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      *(_OWORD *)&v444.__r_.__value_.__r.__words[1] = 0uLL;
      v444.__r_.__value_.__r.__words[0] = (std::string::size_type)&v444.__r_.__value_.__l.__size_;
      v88 = (const MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 56))(v67);
      v89 = **v88;
      v90 = (*v88)[1];
      if (v89 != v90)
      {
        v91 = 0;
        v383 = v65;
        v375 = (*v88)[1];
        v376 = v67;
        while (1)
        {
          v92 = *v89;
          v93 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)*v89 + 64))(*v89);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 128))(v93))
          {
            v104 = (*(uint64_t (**)(const MIL::IROperation *))(*(_QWORD *)v92 + 64))(v92);
            v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 16))(v104);
            v106 = *(char *)(v105 + 23);
            if (v106 < 0)
            {
              if (*(_QWORD *)(v105 + 8) != 19)
                goto LABEL_685;
              v105 = *(_QWORD *)v105;
            }
            else if (v106 != 19)
            {
              goto LABEL_685;
            }
            v122 = *(_QWORD *)v105 == 0x736F695F4C4D3545 && *(_QWORD *)(v105 + 8) == 0x736E6172742E3631;
            if (!v122 || *(_QWORD *)(v105 + 11) != 0x726566736E617274)
            {
LABEL_685:
              v346 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              (*(void (**)(const MIL::IROperation *))(*(_QWORD *)v92 + 56))(v92);
              std::operator+<char>();
              v347 = std::string::append(&v445, ".");
              v348 = *(_OWORD *)&v347->__r_.__value_.__l.__data_;
              *(_QWORD *)&v387[16] = *((_QWORD *)&v347->__r_.__value_.__l + 2);
              *(_OWORD *)v387 = v348;
              v347->__r_.__value_.__l.__size_ = 0;
              v347->__r_.__value_.__r.__words[2] = 0;
              v347->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(v346, (const std::string *)v387);
              v346->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
              __cxa_throw(v346, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
            }
            Espresso::AOT::E5BackendToE5RTLoweringPass::LowerTransfer((Espresso::AOT::E5BackendToE5RTLoweringPass *)v105, v442, v92);
            v402 = *(_OWORD *)v387;
            if (*(_QWORD *)&v387[8])
            {
              v124 = (unint64_t *)(*(_QWORD *)&v387[8] + 8);
              do
                v125 = __ldxr(v124);
              while (__stxr(v125 + 1, v124));
            }
            v400 = 0;
            v401 = 0;
            MIL::Builder::BlockBuilder::AddOperation();
            v126 = v401;
            if (!v401)
              goto LABEL_209;
            v127 = (unint64_t *)&v401->__shared_owners_;
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
              v129 = (std::__shared_weak_count *)*((_QWORD *)&v402 + 1);
              if (*((_QWORD *)&v402 + 1))
              {
LABEL_210:
                v130 = (unint64_t *)&v129->__shared_owners_;
                do
                  v131 = __ldaxr(v130);
                while (__stlxr(v131 - 1, v130));
                if (!v131)
                {
                  ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                  std::__shared_weak_count::__release_weak(v129);
                }
              }
            }
            else
            {
LABEL_209:
              v129 = (std::__shared_weak_count *)*((_QWORD *)&v402 + 1);
              if (*((_QWORD *)&v402 + 1))
                goto LABEL_210;
            }
            v139 = *(std::__shared_weak_count **)&v387[8];
            if (*(_QWORD *)&v387[8])
            {
              v140 = (unint64_t *)(*(_QWORD *)&v387[8] + 8);
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
            goto LABEL_146;
          }
          v411 = 0;
          *((_BYTE *)&v445.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v445, "backend");
          MIL::IRObject::GetAttribute();
          MIL::IRValue::GetScalar<std::string>();
          v385 = v92;
          if (v387[23] >= 0)
            v94 = v387;
          else
            v94 = *(_BYTE **)v387;
          if (v387[23] >= 0)
            v95 = v387[23];
          else
            v95 = *(_QWORD *)&v387[8];
          v96 = Espresso::AOT::GetBackendIdentifier((uint64_t)v94, v95);
          if ((v387[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v387);
            if ((SHIBYTE(v445.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_156;
          }
          else if ((SHIBYTE(v445.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_156;
          }
          operator delete(v445.__r_.__value_.__l.__data_);
LABEL_156:
          v411 = v96;
          v97 = (*(uint64_t (**)(MIL::IRObject *))(*(_QWORD *)v385 + 64))(v385);
          (*(void (**)(std::string *__return_ptr, uint64_t, MIL::IRObject *))(*(_QWORD *)v97 + 120))(&__s, v97, v385);
          v379 = v89;
          v381 = v91;
          Output = Espresso::AOT::AOTCompilerOptions::GetOutput(v377);
          v99 = (const void **)Output;
          v100 = *(char *)(Output + 23);
          if (v100 >= 0)
            v101 = *(unsigned __int8 *)(Output + 23);
          else
            v101 = *(_QWORD *)(Output + 8);
          v102 = v101 + 1;
          if (v101 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v102 >= 0x17)
          {
            v107 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v102 | 7) != 0x17)
              v107 = v102 | 7;
            v108 = v107 + 1;
            v103 = operator new(v107 + 1);
            *(_QWORD *)&v387[8] = v101 + 1;
            *(_QWORD *)&v387[16] = v108 | 0x8000000000000000;
            *(_QWORD *)v387 = v103;
          }
          else
          {
            memset(v387, 0, 24);
            v103 = v387;
            v387[23] = v101 + 1;
            if (!v101)
              goto LABEL_173;
          }
          if (v100 >= 0)
            v109 = v99;
          else
            v109 = *v99;
          memmove(v103, v109, v101);
LABEL_173:
          *(_WORD *)&v103[v101] = 47;
          v110 = *(char *)(v383 + 23);
          if (v110 >= 0)
            v111 = (const std::string::value_type *)v383;
          else
            v111 = *(const std::string::value_type **)v383;
          if (v110 >= 0)
            v112 = *(unsigned __int8 *)(v383 + 23);
          else
            v112 = *(_QWORD *)(v383 + 8);
          v113 = std::string::append((std::string *)v387, v111, v112);
          v410 = *v113;
          v113->__r_.__value_.__l.__size_ = 0;
          v113->__r_.__value_.__r.__words[2] = 0;
          v113->__r_.__value_.__r.__words[0] = 0;
          if ((v387[23] & 0x80000000) != 0)
            operator delete(*(void **)v387);
          BackendName = Espresso::AOT::GetBackendName(v411);
          v116 = v115;
          if (v115 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v117 = BackendName;
          if (v115 >= 0x17)
          {
            v119 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v115 | 7) != 0x17)
              v119 = v115 | 7;
            v120 = v119 + 1;
            v118 = operator new(v119 + 1);
            *(_QWORD *)&v387[8] = v116;
            *(_QWORD *)&v387[16] = v120 | 0x8000000000000000;
            *(_QWORD *)v387 = v118;
          }
          else
          {
            v387[23] = v115;
            v118 = v387;
            if (!v115)
              goto LABEL_189;
          }
          memmove(v118, v117, v116);
LABEL_189:
          v118[v116] = 0;
          Espresso::EspressoReporterUtilities::append_compute_unit_set(&v411, (const void **)v387, (uint64_t **)&v444);
          if ((v387[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v387);
            v408[0] = 0;
            v408[1] = 0;
            v409 = 0;
            v121 = (unint64_t)__p[1];
            if (!__p[1])
              goto LABEL_314;
          }
          else
          {
            v408[0] = 0;
            v408[1] = 0;
            v409 = 0;
            v121 = (unint64_t)__p[1];
            if (!__p[1])
              goto LABEL_314;
          }
          v132 = (uint8x8_t)vcnt_s8((int8x8_t)v121);
          v132.i16[0] = vaddlv_u8(v132);
          if (v132.u32[0] > 1uLL)
          {
            v133 = v411;
            if (v121 <= v411)
              v133 = v411 % v121;
          }
          else
          {
            v133 = ((_DWORD)v121 - 1) & v411;
          }
          v134 = (uint64_t **)*((_QWORD *)__p[0] + v133);
          if (!v134 || (v135 = *v134) == 0)
          {
LABEL_314:
            *(_OWORD *)&v445.__r_.__value_.__r.__words[1] = 0uLL;
            v445.__r_.__value_.__r.__words[0] = (std::string::size_type)&v445.__r_.__value_.__l.__size_;
            if (v411 == 2 && v437 && v436 != 0)
            {
              v183 = v435;
              if (!v435)
              {
                v177 = 0;
                memset(v387, 0, 24);
                v178 = v445.__r_.__value_.__r.__words[0];
                if ((std::string::size_type *)v445.__r_.__value_.__l.__data_ == &v445.__r_.__value_.__r.__words[1])
                  goto LABEL_449;
                goto LABEL_453;
              }
              do
              {
                if (*((char *)v183 + 39) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v387, (const std::string::value_type *)v183[2], v183[3]);
                }
                else
                {
                  *(_OWORD *)v387 = *((_OWORD *)v183 + 1);
                  *(_QWORD *)&v387[16] = v183[4];
                }
                v388 = 0;
                v389 = 0;
                *(_QWORD *)&v387[24] = 0;
                v184 = v183[5];
                v185 = v183[6];
                v406[0] = (MIL::Attributes::FlexibleShapeInfo *)&v387[24];
                LOBYTE(v406[1]) = 0;
                v186 = v185 - v184;
                if (v185 == v184)
                {
                  v406[1] = 0;
                  v407 = 0;
                  v406[0] = (MIL::Attributes::FlexibleShapeInfo *)&v406[1];
                }
                else
                {
                  v187 = 0xAAAAAAAAAAAAAAABLL * (v186 >> 3);
                  if (v187 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  v188 = (char *)operator new(v186);
                  v189 = 0;
                  *(_QWORD *)&v387[24] = v188;
                  v388 = v188;
                  v389 = &v188[24 * v187];
                  do
                  {
                    v191 = &v188[v189];
                    v192 = (__int128 *)(v184 + v189);
                    if (*(char *)(v184 + v189 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)&v188[v189], *(const std::string::value_type **)v192, *((_QWORD *)v192 + 1));
                    }
                    else
                    {
                      v190 = *v192;
                      *((_QWORD *)v191 + 2) = *((_QWORD *)v192 + 2);
                      *(_OWORD *)v191 = v190;
                    }
                    v189 += 24;
                  }
                  while (v184 + v189 != v185);
                  v193 = &v188[v189];
                  v194 = *(__int128 **)&v387[24];
                  v388 = v193;
                  v406[1] = 0;
                  v407 = 0;
                  v406[0] = (MIL::Attributes::FlexibleShapeInfo *)&v406[1];
                  if (*(char **)&v387[24] != v193)
                  {
                    do
                    {
                      v195 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>((uint64_t **)v406, (uint64_t *)&v406[1], &v446, v448, (const void **)v194);
                      if (!*v195)
                      {
                        v196 = (MIL::Attributes::FlexibleShapeInfo *)operator new(0x38uLL);
                        v197 = (std::string *)((char *)v196 + 32);
                        if (*((char *)v194 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(v197, *(const std::string::value_type **)v194, *((_QWORD *)v194 + 1));
                        }
                        else
                        {
                          v198 = *v194;
                          *((_QWORD *)v196 + 6) = *((_QWORD *)v194 + 2);
                          *(_OWORD *)&v197->__r_.__value_.__l.__data_ = v198;
                        }
                        v199 = v446;
                        *(_QWORD *)v196 = 0;
                        *((_QWORD *)v196 + 1) = 0;
                        *((_QWORD *)v196 + 2) = v199;
                        *v195 = (uint64_t)v196;
                        if (*(_QWORD *)v406[0])
                        {
                          v406[0] = *(MIL::Attributes::FlexibleShapeInfo **)v406[0];
                          v196 = (MIL::Attributes::FlexibleShapeInfo *)*v195;
                        }
                        v200 = v406[1];
                        v122 = v196 == v406[1];
                        *((_BYTE *)v196 + 24) = v196 == v406[1];
                        if (!v122)
                        {
                          do
                          {
                            v201 = *((_QWORD *)v196 + 2);
                            if (*(_BYTE *)(v201 + 24))
                              break;
                            v202 = *(MIL::Attributes::FlexibleShapeInfo **)(v201 + 16);
                            v203 = *(_QWORD *)v202;
                            if (*(_QWORD *)v202 == v201)
                            {
                              v206 = *((_QWORD *)v202 + 1);
                              if (!v206 || (v207 = *(unsigned __int8 *)(v206 + 24), v204 = (_BYTE *)(v206 + 24), v207))
                              {
                                if (*(MIL::Attributes::FlexibleShapeInfo **)v201 == v196)
                                {
                                  *(_BYTE *)(v201 + 24) = 1;
                                  *((_BYTE *)v202 + 24) = 0;
                                  v210 = *(_QWORD *)(v201 + 8);
                                  *(_QWORD *)v202 = v210;
                                  if (v210)
                                    goto LABEL_382;
                                }
                                else
                                {
                                  v208 = *(uint64_t **)(v201 + 8);
                                  v209 = *v208;
                                  *(_QWORD *)(v201 + 8) = *v208;
                                  if (v209)
                                  {
                                    *(_QWORD *)(v209 + 16) = v201;
                                    v202 = *(MIL::Attributes::FlexibleShapeInfo **)(v201 + 16);
                                  }
                                  v208[2] = (uint64_t)v202;
                                  *(_QWORD *)(*(_QWORD *)(v201 + 16) + 8 * (**(_QWORD **)(v201 + 16) != v201)) = v208;
                                  *v208 = v201;
                                  *(_QWORD *)(v201 + 16) = v208;
                                  v202 = (MIL::Attributes::FlexibleShapeInfo *)v208[2];
                                  v201 = *(_QWORD *)v202;
                                  *((_BYTE *)v208 + 24) = 1;
                                  *((_BYTE *)v202 + 24) = 0;
                                  v210 = *(_QWORD *)(v201 + 8);
                                  *(_QWORD *)v202 = v210;
                                  if (v210)
LABEL_382:
                                    *(_QWORD *)(v210 + 16) = v202;
                                }
                                *(_QWORD *)(v201 + 16) = *((_QWORD *)v202 + 2);
                                *(_QWORD *)(*((_QWORD *)v202 + 2) + 8 * (**((_QWORD **)v202 + 2) != (_QWORD)v202)) = v201;
                                *(_QWORD *)(v201 + 8) = v202;
LABEL_358:
                                *((_QWORD *)v202 + 2) = v201;
                                break;
                              }
                            }
                            else if (!v203
                                   || (v205 = *(unsigned __int8 *)(v203 + 24), v204 = (_BYTE *)(v203 + 24), v205))
                            {
                              if (*(MIL::Attributes::FlexibleShapeInfo **)v201 == v196)
                              {
                                v212 = *((_QWORD *)v196 + 1);
                                *(_QWORD *)v201 = v212;
                                if (v212)
                                {
                                  *(_QWORD *)(v212 + 16) = v201;
                                  v202 = *(MIL::Attributes::FlexibleShapeInfo **)(v201 + 16);
                                }
                                *((_QWORD *)v196 + 2) = v202;
                                *(_QWORD *)(*(_QWORD *)(v201 + 16) + 8 * (**(_QWORD **)(v201 + 16) != v201)) = v196;
                                *((_QWORD *)v196 + 1) = v201;
                                *(_QWORD *)(v201 + 16) = v196;
                                v202 = (MIL::Attributes::FlexibleShapeInfo *)*((_QWORD *)v196 + 2);
                                *((_BYTE *)v196 + 24) = 1;
                                *((_BYTE *)v202 + 24) = 0;
                                v201 = *((_QWORD *)v202 + 1);
                                v211 = *(MIL::Attributes::FlexibleShapeInfo **)v201;
                                *((_QWORD *)v202 + 1) = *(_QWORD *)v201;
                                if (!v211)
                                  goto LABEL_357;
                              }
                              else
                              {
                                *(_BYTE *)(v201 + 24) = 1;
                                *((_BYTE *)v202 + 24) = 0;
                                v201 = *((_QWORD *)v202 + 1);
                                v211 = *(MIL::Attributes::FlexibleShapeInfo **)v201;
                                *((_QWORD *)v202 + 1) = *(_QWORD *)v201;
                                if (!v211)
                                  goto LABEL_357;
                              }
                              *((_QWORD *)v211 + 2) = v202;
LABEL_357:
                              *(_QWORD *)(v201 + 16) = *((_QWORD *)v202 + 2);
                              *(_QWORD *)(*((_QWORD *)v202 + 2) + 8 * (**((_QWORD **)v202 + 2) != (_QWORD)v202)) = v201;
                              *(_QWORD *)v201 = v202;
                              goto LABEL_358;
                            }
                            *(_BYTE *)(v201 + 24) = 1;
                            v196 = v202;
                            *((_BYTE *)v202 + 24) = v202 == v200;
                            *v204 = 1;
                          }
                          while (v202 != v200);
                        }
                        ++v407;
                      }
                      v194 = (__int128 *)((char *)v194 + 24);
                    }
                    while (v194 != (__int128 *)v193);
                    v213 = v406[0];
                    if ((MIL::Attributes::FlexibleShapeInfo **)v406[0] != &v406[1])
                    {
LABEL_396:
                      v214 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>((uint64_t **)&v445, (uint64_t *)&v445.__r_.__value_.__l.__size_, &v446, v448, (const void **)v213 + 4);
                      if (*v214)
                      {
                        v215 = (MIL::Attributes::FlexibleShapeInfo *)*((_QWORD *)v213 + 1);
                        if (!v215)
                          goto LABEL_427;
                        goto LABEL_421;
                      }
                      v216 = (char *)operator new(0x38uLL);
                      v217 = (std::string *)(v216 + 32);
                      if (*((char *)v213 + 55) < 0)
                      {
                        std::string::__init_copy_ctor_external(v217, *((const std::string::value_type **)v213 + 4), *((_QWORD *)v213 + 5));
                      }
                      else
                      {
                        v218 = *((_OWORD *)v213 + 2);
                        *((_QWORD *)v216 + 6) = *((_QWORD *)v213 + 6);
                        *(_OWORD *)&v217->__r_.__value_.__l.__data_ = v218;
                      }
                      v219 = v446;
                      *(_QWORD *)v216 = 0;
                      *((_QWORD *)v216 + 1) = 0;
                      *((_QWORD *)v216 + 2) = v219;
                      *v214 = (uint64_t)v216;
                      if (*(_QWORD *)v445.__r_.__value_.__l.__data_)
                      {
                        v445.__r_.__value_.__r.__words[0] = *(_QWORD *)v445.__r_.__value_.__l.__data_;
                        v216 = (char *)*v214;
                      }
                      v220 = v445.__r_.__value_.__l.__size_;
                      v216[24] = v216 == (char *)v445.__r_.__value_.__l.__size_;
                      if (v216 == (char *)v220)
                      {
LABEL_420:
                        ++v445.__r_.__value_.__r.__words[2];
                        v215 = (MIL::Attributes::FlexibleShapeInfo *)*((_QWORD *)v213 + 1);
                        if (!v215)
                          goto LABEL_427;
                        goto LABEL_421;
                      }
                      while (1)
                      {
                        v221 = *((_QWORD *)v216 + 2);
                        if (*(_BYTE *)(v221 + 24))
                          goto LABEL_420;
                        v222 = *(_BYTE **)(v221 + 16);
                        v223 = *(_QWORD *)v222;
                        if (*(_QWORD *)v222 == v221)
                        {
                          v226 = *((_QWORD *)v222 + 1);
                          if (!v226 || (v227 = *(unsigned __int8 *)(v226 + 24), v224 = (_BYTE *)(v226 + 24), v227))
                          {
                            if (*(char **)v221 == v216)
                            {
                              *(_BYTE *)(v221 + 24) = 1;
                              v222[24] = 0;
                              v230 = *(_QWORD *)(v221 + 8);
                              *(_QWORD *)v222 = v230;
                              if (v230)
                                goto LABEL_418;
                            }
                            else
                            {
                              v228 = *(uint64_t **)(v221 + 8);
                              v229 = *v228;
                              *(_QWORD *)(v221 + 8) = *v228;
                              if (v229)
                              {
                                *(_QWORD *)(v229 + 16) = v221;
                                v222 = *(_BYTE **)(v221 + 16);
                              }
                              v228[2] = (uint64_t)v222;
                              *(_QWORD *)(*(_QWORD *)(v221 + 16) + 8 * (**(_QWORD **)(v221 + 16) != v221)) = v228;
                              *v228 = v221;
                              *(_QWORD *)(v221 + 16) = v228;
                              v222 = (_BYTE *)v228[2];
                              v221 = *(_QWORD *)v222;
                              *((_BYTE *)v228 + 24) = 1;
                              v222[24] = 0;
                              v230 = *(_QWORD *)(v221 + 8);
                              *(_QWORD *)v222 = v230;
                              if (v230)
LABEL_418:
                                *(_QWORD *)(v230 + 16) = v222;
                            }
                            *(_QWORD *)(v221 + 16) = *((_QWORD *)v222 + 2);
                            *(_QWORD *)(*((_QWORD *)v222 + 2) + 8 * (**((_QWORD **)v222 + 2) != (_QWORD)v222)) = v221;
                            *(_QWORD *)(v221 + 8) = v222;
                            *((_QWORD *)v222 + 2) = v221;
                            goto LABEL_420;
                          }
                        }
                        else if (!v223 || (v225 = *(unsigned __int8 *)(v223 + 24), v224 = (_BYTE *)(v223 + 24), v225))
                        {
                          if (*(char **)v221 == v216)
                          {
                            v234 = *((_QWORD *)v216 + 1);
                            *(_QWORD *)v221 = v234;
                            if (v234)
                            {
                              *(_QWORD *)(v234 + 16) = v221;
                              v222 = *(_BYTE **)(v221 + 16);
                            }
                            *((_QWORD *)v216 + 2) = v222;
                            *(_QWORD *)(*(_QWORD *)(v221 + 16) + 8 * (**(_QWORD **)(v221 + 16) != v221)) = v216;
                            *((_QWORD *)v216 + 1) = v221;
                            *(_QWORD *)(v221 + 16) = v216;
                            v222 = (_BYTE *)*((_QWORD *)v216 + 2);
                            v216[24] = 1;
                            v222[24] = 0;
                            v232 = (uint64_t *)*((_QWORD *)v222 + 1);
                            v233 = *v232;
                            *((_QWORD *)v222 + 1) = *v232;
                            if (v233)
LABEL_425:
                              *(_QWORD *)(v233 + 16) = v222;
                          }
                          else
                          {
                            *(_BYTE *)(v221 + 24) = 1;
                            v222[24] = 0;
                            v232 = (uint64_t *)*((_QWORD *)v222 + 1);
                            v233 = *v232;
                            *((_QWORD *)v222 + 1) = *v232;
                            if (v233)
                              goto LABEL_425;
                          }
                          v232[2] = *((_QWORD *)v222 + 2);
                          *(_QWORD *)(*((_QWORD *)v222 + 2) + 8 * (**((_QWORD **)v222 + 2) != (_QWORD)v222)) = v232;
                          *v232 = (uint64_t)v222;
                          *((_QWORD *)v222 + 2) = v232;
                          ++v445.__r_.__value_.__r.__words[2];
                          v215 = (MIL::Attributes::FlexibleShapeInfo *)*((_QWORD *)v213 + 1);
                          if (!v215)
                          {
                            do
                            {
LABEL_427:
                              v231 = (MIL::Attributes::FlexibleShapeInfo **)*((_QWORD *)v213 + 2);
                              v122 = *v231 == v213;
                              v213 = (MIL::Attributes::FlexibleShapeInfo *)v231;
                            }
                            while (!v122);
                            goto LABEL_395;
                          }
                          do
                          {
LABEL_421:
                            v231 = (MIL::Attributes::FlexibleShapeInfo **)v215;
                            v215 = *(MIL::Attributes::FlexibleShapeInfo **)v215;
                          }
                          while (v215);
LABEL_395:
                          v213 = (MIL::Attributes::FlexibleShapeInfo *)v231;
                          if (v231 == &v406[1])
                            break;
                          goto LABEL_396;
                        }
                        *(_BYTE *)(v221 + 24) = 1;
                        v216 = v222;
                        v222[24] = v222 == (_BYTE *)v220;
                        *v224 = 1;
                        if (v222 == (_BYTE *)v220)
                          goto LABEL_420;
                      }
                    }
                  }
                }
                std::__tree<std::string>::destroy((uint64_t)v406, (char *)v406[1]);
                v235 = *(char **)&v387[24];
                if (*(_QWORD *)&v387[24])
                {
                  v236 = v388;
                  v237 = *(void **)&v387[24];
                  if (v388 != *(char **)&v387[24])
                  {
                    do
                    {
                      if (*(v236 - 1) < 0)
                        operator delete(*((void **)v236 - 3));
                      v236 -= 24;
                    }
                    while (v236 != v235);
                    v237 = *(void **)&v387[24];
                  }
                  v388 = v235;
                  operator delete(v237);
                }
                if ((v387[23] & 0x80000000) != 0)
                  operator delete(*(void **)v387);
                v183 = (uint64_t *)*v183;
              }
              while (v183);
              v176 = v445.__r_.__value_.__r.__words[2];
              memset(v387, 0, 24);
              if (!v445.__r_.__value_.__r.__words[2])
              {
LABEL_448:
                v177 = 0;
                v178 = v445.__r_.__value_.__r.__words[0];
                if ((std::string::size_type *)v445.__r_.__value_.__l.__data_ == &v445.__r_.__value_.__r.__words[1])
                {
LABEL_449:
                  Espresso::AOT::E5BackendToE5RTLoweringPass::RunCompilerBackend(a1, v411, v386, (uint64_t)v387, (uint64_t)&v410, v406);
                  v238 = v408[0];
                  if (v408[0])
                  {
                    v239 = v408[1];
                    v240 = v408[0];
                    if (v408[1] != v408[0])
                    {
                      do
                      {
                        if (*((char *)v239 - 1) < 0)
                          operator delete(*((void **)v239 - 3));
                        v239 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v239 - 24);
                      }
                      while (v239 != v238);
                      v240 = v408[0];
                    }
                    v408[1] = v238;
                    operator delete(v240);
                  }
                  *(_OWORD *)v408 = *(_OWORD *)v406;
                  v409 = v407;
                  v243 = (std::string::__raw *)v445.__r_.__value_.__r.__words[0];
                  if ((std::string::size_type *)v445.__r_.__value_.__l.__data_ != &v445.__r_.__value_.__r.__words[1])
                  {
                    do
                    {
                      v406[0] = (MIL::Attributes::FlexibleShapeInfo *)&v411;
                      v247 = std::__hash_table<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<Espresso::AOT::BackendIdentifier,std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<Espresso::AOT::BackendIdentifier>,std::equal_to<Espresso::AOT::BackendIdentifier>,true>,std::__unordered_map_equal<Espresso::AOT::BackendIdentifier,std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<Espresso::AOT::BackendIdentifier>,std::hash<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<Espresso::AOT::BackendIdentifier,std::piecewise_construct_t const&,std::tuple<Espresso::AOT::BackendIdentifier const&>,std::tuple<>>((uint64_t)__p, &v411, (uint64_t)&std::piecewise_construct, (_DWORD **)v406);
                      v406[0] = (MIL::Attributes::FlexibleShapeInfo *)&v243[1].__words[1];
                      v248 = (MIL::Attributes::FlexibleShapeInfo **)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v247 + 24), (unsigned __int8 *)&v243[1].__words[1], (uint64_t)&std::piecewise_construct, (__int128 **)v406)+ 40);
                      if (v248 != v408)
                        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v248, (std::string *)v408[0], (std::string *)v408[1], 0xAAAAAAAAAAAAAAABLL * ((v408[1] - v408[0]) >> 3));
                      v249 = (std::string *)v243->__words[1];
                      if (v249)
                      {
                        do
                        {
                          v250 = v249;
                          v249 = (std::string *)v249->__r_.__value_.__r.__words[0];
                        }
                        while (v249);
                      }
                      else
                      {
                        do
                        {
                          v250 = (std::string *)v243->__words[2];
                          v122 = v250->__r_.__value_.__r.__words[0] == (_QWORD)v243;
                          v243 = (std::string::__raw *)v250;
                        }
                        while (!v122);
                      }
                      v243 = (std::string::__raw *)v250;
                    }
                    while (v250 != (std::string *)&v445.__r_.__value_.__r.__words[1]);
                  }
                  v244 = *(_QWORD *)v387;
                  if (*(_QWORD *)v387)
                  {
                    v245 = *(_QWORD *)&v387[8];
                    v246 = *(void **)v387;
                    if (*(_QWORD *)&v387[8] != *(_QWORD *)v387)
                    {
                      do
                      {
                        if (*(char *)(v245 - 1) < 0)
                          operator delete(*(void **)(v245 - 24));
                        v245 -= 24;
                      }
                      while (v245 != v244);
                      v246 = *(void **)v387;
                    }
                    *(_QWORD *)&v387[8] = v244;
                    operator delete(v246);
                  }
                  std::__tree<std::string>::destroy((uint64_t)&v445, (char *)v445.__r_.__value_.__l.__size_);
                  goto LABEL_483;
                }
                do
                {
LABEL_453:
                  std::string::operator=(v177, (const std::string *)(v178 + 32));
                  v241 = *(std::string **)(v178 + 8);
                  if (v241)
                  {
                    do
                    {
                      v242 = v241;
                      v241 = (std::string *)v241->__r_.__value_.__r.__words[0];
                    }
                    while (v241);
                  }
                  else
                  {
                    do
                    {
                      v242 = *(std::string **)(v178 + 16);
                      v122 = v242->__r_.__value_.__r.__words[0] == v178;
                      v178 = (std::string::size_type)v242;
                    }
                    while (!v122);
                  }
                  ++v177;
                  v178 = (std::string::size_type)v242;
                }
                while (v242 != (std::string *)&v445.__r_.__value_.__r.__words[1]);
                goto LABEL_449;
              }
LABEL_326:
              if (v176 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v177 = (std::string *)operator new(24 * v176);
              *(_QWORD *)v387 = v177;
              *(_QWORD *)&v387[16] = &v177[v176];
              bzero(v177, 24 * ((24 * v176 - 24) / 0x18) + 24);
              *(_QWORD *)&v387[8] = &v177[(24 * v176 - 24) / 0x18 + 1];
              v178 = v445.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v445.__r_.__value_.__l.__data_ == &v445.__r_.__value_.__r.__words[1])
                goto LABEL_449;
              goto LABEL_453;
            }
            v172 = (char *)operator new(0x38uLL);
            v173 = (std::string *)(v172 + 32);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v173, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              v276 = (std::string::size_type *)v445.__r_.__value_.__r.__words[0];
              *(_QWORD *)v172 = 0;
              *((_QWORD *)v172 + 1) = 0;
              *((_QWORD *)v172 + 2) = &v445.__r_.__value_.__l.__size_;
              v445.__r_.__value_.__l.__size_ = (std::string::size_type)v172;
              v174 = *v276;
              if (v174)
LABEL_324:
                v445.__r_.__value_.__r.__words[0] = v174;
            }
            else
            {
              *(_OWORD *)&v173->__r_.__value_.__l.__data_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
              *((_QWORD *)v172 + 6) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
              *(_QWORD *)v172 = 0;
              *((_QWORD *)v172 + 1) = 0;
              *((_QWORD *)v172 + 2) = &v445.__r_.__value_.__l.__size_;
              v445.__r_.__value_.__l.__size_ = (std::string::size_type)v172;
              v174 = (std::string::size_type)v172;
              if (v172)
                goto LABEL_324;
            }
            v172[24] = 1;
            v175 = v445.__r_.__value_.__r.__words[2];
            v176 = ++v445.__r_.__value_.__r.__words[2];
            memset(v387, 0, 24);
            if (v175 == -1)
              goto LABEL_448;
            goto LABEL_326;
          }
          v136 = v121 - 1;
          if (v132.u32[0] < 2uLL)
          {
            while (1)
            {
              v137 = v135[1];
              if (v137 == v411)
              {
                if (*((_DWORD *)v135 + 4) == v411)
                  goto LABEL_243;
              }
              else if ((v137 & v136) != v133)
              {
                goto LABEL_314;
              }
              v135 = (uint64_t *)*v135;
              if (!v135)
                goto LABEL_314;
            }
          }
          while (1)
          {
            v138 = v135[1];
            if (v138 == v411)
              break;
            if (v138 >= v121)
              v138 %= v121;
            if (v138 != v133)
              goto LABEL_314;
LABEL_231:
            v135 = (uint64_t *)*v135;
            if (!v135)
              goto LABEL_314;
          }
          if (*((_DWORD *)v135 + 4) != v411)
            goto LABEL_231;
LABEL_243:
          if (v132.u32[0] > 1uLL)
          {
            v142 = v411;
            if (v121 <= v411)
              v142 = v411 % v121;
          }
          else
          {
            v142 = ((_DWORD)v121 - 1) & v411;
          }
          v143 = (uint64_t **)*((_QWORD *)__p[0] + v142);
          if (!v143 || (v144 = *v143) == 0)
LABEL_683:
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          if (v132.u32[0] < 2uLL)
          {
            while (1)
            {
              v145 = v144[1];
              if (v145 == v411)
              {
                if (*((_DWORD *)v144 + 4) == v411)
                  goto LABEL_255;
              }
              else if ((v145 & v136) != v142)
              {
                goto LABEL_683;
              }
              v144 = (uint64_t *)*v144;
              if (!v144)
                goto LABEL_683;
            }
          }
          while (2)
          {
            v147 = v144[1];
            if (v147 != v411)
            {
              if (v147 >= v121)
                v147 %= v121;
              if (v147 != v142)
                goto LABEL_683;
LABEL_258:
              v144 = (uint64_t *)*v144;
              if (!v144)
                goto LABEL_683;
              continue;
            }
            break;
          }
          if (*((_DWORD *)v144 + 4) != v411)
            goto LABEL_258;
LABEL_255:
          memset(v387, 0, sizeof(v387));
          LODWORD(v388) = *((_DWORD *)v144 + 14);
          prime = v144[4];
          if (prime == 1)
          {
            prime = 2;
            goto LABEL_280;
          }
          if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(v144[4]);
            v148 = *(int8x8_t *)&v387[8];
            v149 = prime >= *(_QWORD *)&v387[8];
            if (prime > *(_QWORD *)&v387[8])
              goto LABEL_279;
          }
          else
          {
            v148 = 0;
            v149 = 1;
            if (prime)
            {
LABEL_279:
              if (prime >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
LABEL_280:
              v153 = operator new(8 * prime);
              v154 = *(void **)v387;
              *(_QWORD *)v387 = v153;
              if (v154)
                operator delete(v154);
              v155 = 0;
              *(_QWORD *)&v387[8] = prime;
              do
                *(_QWORD *)(*(_QWORD *)v387 + 8 * v155++) = 0;
              while (prime != v155);
              v156 = *(_QWORD ***)&v387[16];
              if (!*(_QWORD *)&v387[16])
                goto LABEL_304;
              v157 = *(_QWORD *)(*(_QWORD *)&v387[16] + 8);
              v158 = prime - 1;
              if ((prime & (prime - 1)) == 0)
              {
                v159 = v157 & v158;
                *(_QWORD *)(*(_QWORD *)v387 + 8 * v159) = &v387[16];
                while (1)
                {
                  v160 = *v156;
                  if (!*v156)
                    break;
                  v161 = v160[1] & v158;
                  if (v161 == v159)
                  {
                    v156 = (_QWORD **)*v156;
                  }
                  else if (*(_QWORD *)(*(_QWORD *)v387 + 8 * v161))
                  {
                    *v156 = (_QWORD *)*v160;
                    v162 = 8 * v161;
                    *v160 = **(_QWORD **)(*(_QWORD *)v387 + v162);
                    **(_QWORD **)(*(_QWORD *)v387 + v162) = v160;
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)v387 + 8 * v161) = v156;
                    v156 = (_QWORD **)v160;
                    v159 = v161;
                  }
                }
                goto LABEL_304;
              }
              if (v157 >= prime)
                v157 %= prime;
              *(_QWORD *)(*(_QWORD *)v387 + 8 * v157) = &v387[16];
              v163 = *v156;
              if (!*v156)
              {
LABEL_304:
                j = (_QWORD *)v144[5];
                if (j)
                  goto LABEL_305;
                goto LABEL_306;
              }
              while (1)
              {
LABEL_299:
                v165 = v163[1];
                if (v165 >= prime)
                  v165 %= prime;
                if (v165 == v157)
                  goto LABEL_298;
                if (*(_QWORD *)(*(_QWORD *)v387 + 8 * v165))
                  break;
                *(_QWORD *)(*(_QWORD *)v387 + 8 * v165) = v156;
                v156 = (_QWORD **)v163;
                v163 = (_QWORD *)*v163;
                v157 = v165;
                if (!v163)
                  goto LABEL_304;
              }
              *v156 = (_QWORD *)*v163;
              v164 = 8 * v165;
              *v163 = **(_QWORD **)(*(_QWORD *)v387 + v164);
              **(_QWORD **)(*(_QWORD *)v387 + v164) = v163;
              v163 = v156;
LABEL_298:
              v156 = (_QWORD **)v163;
              v163 = (_QWORD *)*v163;
              if (!v163)
                goto LABEL_304;
              goto LABEL_299;
            }
          }
          if (v149)
            goto LABEL_304;
          v150 = vcvtps_u32_f32((float)*(unint64_t *)&v387[24] / *(float *)&v388);
          if (*(_QWORD *)&v148 < 3uLL
            || (v151 = (uint8x8_t)vcnt_s8(v148), v151.i16[0] = vaddlv_u8(v151), v151.u32[0] > 1uLL))
          {
            v150 = std::__next_prime(v150);
          }
          else
          {
            v152 = 1 << -(char)__clz(v150 - 1);
            if (v150 >= 2)
              v150 = v152;
          }
          if (prime <= v150)
            prime = v150;
          if (prime >= *(_QWORD *)&v148)
            goto LABEL_304;
          if (prime)
            goto LABEL_279;
          v277 = *(void **)v387;
          *(_QWORD *)v387 = 0;
          if (v277)
            operator delete(v277);
          *(_QWORD *)&v387[8] = 0;
          for (j = (_QWORD *)v144[5]; j; j = (_QWORD *)*j)
LABEL_305:
            std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>((uint64_t)v387, (uint64_t)(j + 2), (uint64_t)(j + 2));
LABEL_306:
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v387, (unsigned __int8 *)&__s))
          {
            v167 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v387, (unsigned __int8 *)&__s);
            if (!v167)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            if (v408 != (MIL::Attributes::FlexibleShapeInfo **)(v167 + 40))
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v408, *((std::string **)v167 + 5), *((std::string **)v167 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v167 + 6) - *((_QWORD *)v167 + 5)) >> 3));
          }
          v168 = *(char **)&v387[16];
          if (*(_QWORD *)&v387[16])
          {
            do
            {
              v179 = *(char **)v168;
              v180 = *((_QWORD *)v168 + 5);
              if (v180)
              {
                v181 = *((_QWORD *)v168 + 6);
                v182 = (void *)*((_QWORD *)v168 + 5);
                if (v181 != v180)
                {
                  do
                  {
                    if (*(char *)(v181 - 1) < 0)
                      operator delete(*(void **)(v181 - 24));
                    v181 -= 24;
                  }
                  while (v181 != v180);
                  v182 = (void *)*((_QWORD *)v168 + 5);
                }
                *((_QWORD *)v168 + 6) = v180;
                operator delete(v182);
              }
              if (v168[39] < 0)
                operator delete(*((void **)v168 + 2));
              operator delete(v168);
              v168 = v179;
            }
            while (v179);
          }
          v169 = *(void **)v387;
          *(_QWORD *)v387 = 0;
          if (v169)
            operator delete(v169);
          if (v408[0] == v408[1])
            goto LABEL_314;
LABEL_483:
          (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(_QWORD *)v386 + 48))(&v446, v386);
          v406[0] = 0;
          v406[1] = 0;
          v407 = 0;
          if (!(*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v386 + 56))(v386, &__s))
          {
            v349 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v350 = std::string::append(&v445, " does not exist.");
            v351 = *(_OWORD *)&v350->__r_.__value_.__l.__data_;
            *(_QWORD *)&v387[16] = *((_QWORD *)&v350->__r_.__value_.__l + 2);
            *(_OWORD *)v387 = v351;
            v350->__r_.__value_.__l.__size_ = 0;
            v350->__r_.__value_.__r.__words[2] = 0;
            v350->__r_.__value_.__r.__words[0] = 0;
            std::logic_error::logic_error(v349, (const std::string *)v387);
            v349->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
            __cxa_throw(v349, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
          }
          MIL::IRProgram::GetFunction();
          MIL::Attributes::FlexibleShapeInfo::Make();
          v251 = *(uint64_t **)(MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(*(MIL::Attributes::FlexibleShapeInfo **)v387)
                             + 16);
          v90 = v375;
          v67 = v376;
          if (v251)
          {
            v252 = 0;
            do
            {
              v254 = (__int128 *)(v251 + 2);
              if ((unint64_t)v252 < v407)
              {
                if (*((char *)v251 + 39) < 0)
                {
                  std::string::__init_copy_ctor_external(v252, (const std::string::value_type *)v251[2], v251[3]);
                }
                else
                {
                  v253 = *v254;
                  v252->__r_.__value_.__r.__words[2] = v251[4];
                  *(_OWORD *)&v252->__r_.__value_.__l.__data_ = v253;
                }
                ++v252;
              }
              else
              {
                v252 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v406, (uint64_t)v254);
              }
              v406[1] = (MIL::Attributes::FlexibleShapeInfo *)v252;
              v251 = (uint64_t *)*v251;
            }
            while (v251);
          }
          v255 = *(MIL::Attributes::FlexibleShapeInfo **)v387;
          *(_QWORD *)v387 = 0;
          if (v255)
          {
            MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v255);
            MEMORY[0x19401CD90]();
          }
          v256 = v447;
          v65 = v383;
          if (v447)
          {
            v257 = (unint64_t *)&v447->__shared_owners_;
            do
              v258 = __ldaxr(v257);
            while (__stlxr(v258 - 1, v257));
            if (!v258)
            {
              ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
              std::__shared_weak_count::__release_weak(v256);
            }
          }
          Espresso::AOT::E5BackendToE5RTLoweringPass::MakeE5RTInferenceOp(v411, v385, (std::string **)v408, v383, v386, (const std::string **)v406, v387);
          v405 = *(_OWORD *)v387;
          if (*(_QWORD *)&v387[8])
          {
            v259 = (unint64_t *)(*(_QWORD *)&v387[8] + 8);
            do
              v260 = __ldxr(v259);
            while (__stxr(v260 + 1, v259));
          }
          v403 = 0;
          v404 = 0;
          MIL::Builder::BlockBuilder::AddOperation();
          v261 = v404;
          if (!v404)
            goto LABEL_507;
          v262 = (unint64_t *)&v404->__shared_owners_;
          do
            v263 = __ldaxr(v262);
          while (__stlxr(v263 - 1, v262));
          if (!v263)
          {
            ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
            std::__shared_weak_count::__release_weak(v261);
            v264 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
            if (*((_QWORD *)&v405 + 1))
            {
LABEL_508:
              v265 = (unint64_t *)&v264->__shared_owners_;
              do
                v266 = __ldaxr(v265);
              while (__stlxr(v266 - 1, v265));
              if (!v266)
              {
                ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                std::__shared_weak_count::__release_weak(v264);
              }
            }
          }
          else
          {
LABEL_507:
            v264 = (std::__shared_weak_count *)*((_QWORD *)&v405 + 1);
            if (*((_QWORD *)&v405 + 1))
              goto LABEL_508;
          }
          v267 = *(std::__shared_weak_count **)&v387[8];
          if (!*(_QWORD *)&v387[8])
            goto LABEL_517;
          v268 = (unint64_t *)(*(_QWORD *)&v387[8] + 8);
          do
            v269 = __ldaxr(v268);
          while (__stlxr(v269 - 1, v268));
          if (!v269)
          {
            ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
            std::__shared_weak_count::__release_weak(v267);
            v270 = v406[0];
            if (v406[0])
            {
LABEL_518:
              v271 = v406[1];
              v272 = v270;
              if (v406[1] != v270)
              {
                do
                {
                  if (*((char *)v271 - 1) < 0)
                    operator delete(*((void **)v271 - 3));
                  v271 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v271 - 24);
                }
                while (v271 != v270);
                v272 = v406[0];
              }
              v406[1] = v270;
              operator delete(v272);
            }
          }
          else
          {
LABEL_517:
            v270 = v406[0];
            if (v406[0])
              goto LABEL_518;
          }
          v273 = v408[0];
          if (v408[0])
          {
            v274 = v408[1];
            v275 = v408[0];
            if (v408[1] != v408[0])
            {
              do
              {
                if (*((char *)v274 - 1) < 0)
                  operator delete(*((void **)v274 - 3));
                v274 = (MIL::Attributes::FlexibleShapeInfo *)((char *)v274 - 24);
              }
              while (v274 != v273);
              v275 = v408[0];
            }
            v408[1] = v273;
            operator delete(v275);
          }
          if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v410.__r_.__value_.__l.__data_);
            v89 = v379;
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_535;
          }
          else
          {
            v89 = v379;
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
LABEL_535:
              operator delete(__s.__r_.__value_.__l.__data_);
          }
          v91 = v381 + 1;
LABEL_146:
          v89 += 2;
          if (v89 == v90)
            goto LABEL_545;
        }
      }
      v91 = 0;
LABEL_545:
      Espresso::EspressoReporterUtilities::get_compute_unit_string((uint64_t)&v444, (void **)&v445.__r_.__value_.__l.__data_);
      if (!v422)
      {
        v399 = 0;
        LOBYTE(v398) = 0;
        v397 = 0;
        LOBYTE(v396) = 0;
        Espresso::MILUtil::SerializeProgramToString(v386, (uint64_t)&v398, (uint64_t)&v396, 0x100000004);
        if (v397 < 0)
        {
          operator delete(v396);
          if ((v399 & 0x80000000) == 0)
            goto LABEL_548;
        }
        else if ((v399 & 0x80000000) == 0)
        {
          goto LABEL_548;
        }
        operator delete(v398);
LABEL_548:
        if (v387[23] >= 0)
          v278 = v387;
        else
          v278 = *(_BYTE **)v387;
        if (v387[23] >= 0)
          v279 = v387[23];
        else
          v279 = *(_QWORD *)&v387[8];
        memset(&__s, 0, sizeof(__s));
        if (!v279)
        {
LABEL_568:
          E5Common::StringUtils::ComputeHashString((uint64_t)&__s, &v410);
          if (v422)
          {
            if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              __sz = v410;
              v288 = (void *)__s.__r_.__value_.__r.__words[0];
              if (!__s.__r_.__value_.__r.__words[0])
                goto LABEL_572;
              goto LABEL_571;
            }
            operator delete(__sz.__r_.__value_.__l.__data_);
            __sz = v410;
            v288 = (void *)__s.__r_.__value_.__r.__words[0];
            if (!__s.__r_.__value_.__r.__words[0])
            {
LABEL_572:
              if ((v387[23] & 0x80000000) != 0)
                operator delete(*(void **)v387);
              goto LABEL_574;
            }
          }
          else
          {
            __sz = v410;
            v422 = 1;
            v288 = (void *)__s.__r_.__value_.__r.__words[0];
            if (!__s.__r_.__value_.__r.__words[0])
              goto LABEL_572;
          }
LABEL_571:
          __s.__r_.__value_.__l.__size_ = (std::string::size_type)v288;
          operator delete(v288);
          goto LABEL_572;
        }
        if ((v279 & 0x8000000000000000) != 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v280 = (char *)operator new(v279);
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v280;
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)v280;
        __s.__r_.__value_.__r.__words[2] = (std::string::size_type)&v280[v279];
        if (v279 < 0x20)
        {
          v281 = v278;
        }
        else
        {
          v281 = v278;
          if ((unint64_t)(v280 - v278) >= 0x20)
          {
            v281 = &v278[v279 & 0xFFFFFFFFFFFFFFE0];
            v282 = &v280[v279 & 0xFFFFFFFFFFFFFFE0];
            v283 = v280 + 16;
            v284 = (__int128 *)(v278 + 16);
            v285 = v279 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v286 = *v284;
              *(v283 - 1) = *(v284 - 1);
              *v283 = v286;
              v283 += 2;
              v284 += 2;
              v285 -= 32;
            }
            while (v285);
            v280 += v279 & 0xFFFFFFFFFFFFFFE0;
            if (v279 == (v279 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_567;
          }
        }
        v282 = v280;
        do
        {
          v287 = *v281++;
          *v282++ = v287;
        }
        while (v281 != &v278[v279]);
LABEL_567:
        __s.__r_.__value_.__l.__size_ = (std::string::size_type)v282;
        goto LABEL_568;
      }
LABEL_574:
      if (Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::onceToken != -1)
        dispatch_once(&Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::onceToken, &__block_literal_global_0);
      v289 = Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::evt_reporter_instance;
      v387[0] = 0;
      v387[4] = 0;
      LODWORD(__s.__r_.__value_.__l.__data_) = v91;
      __s.__r_.__value_.__s.__data_[4] = 1;
      v290 = Espresso::AOT::AOTCompilerOptions::GetOutput(v377);
      Espresso::EventReporterImplementation::logMetric(v289, (uint64_t)&v445, (uint64_t)v387, (uint64_t)&__s, (uint64_t)&__sz, 2, v290);
      v291 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 88))(v67);
      v292 = *v291;
      v293 = v291[1];
      if (*v291 != v293)
      {
        do
        {
          MIL::Builder::BlockBuilder::AddOutput();
          v292 += 24;
        }
        while (v292 != v293);
      }
      *(_QWORD *)v387 = operator new(0x20uLL);
      *(_OWORD *)&v387[8] = xmmword_191A71250;
      strcpy(*(char **)v387, "FlexibleShapeInformation");
      Attribute = MIL::IRObject::TryGetAttribute();
      v295 = Attribute;
      if ((v387[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v387);
        if (!v295)
          goto LABEL_637;
      }
      else if (!Attribute)
      {
        goto LABEL_637;
      }
      MIL::Attributes::FlexibleShapeInfo::Make();
      MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes(v408[0]);
      EnumeratedShapes = (MIL::Attributes::FlexibleShapeInfo *)MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v408[0]);
      if (__s.__r_.__value_.__r.__words[0] && !*((_QWORD *)EnumeratedShapes + 3))
      {
        MIL::Attributes::FlexibleShapeInfo::Make(EnumeratedShapes);
        std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map((uint64_t)v387, (uint64_t)__s.__r_.__value_.__l.__data_);
        MIL::Attributes::FlexibleShapeInfo::SetDefaultShapes();
        MIL::Builder::FunctionBuilder::CreateFunction(v419[0]);
        MIL::Attributes::FlexibleShapeInfo::Replace();
        v394 = v442;
        v395 = v443;
        if (v443)
        {
          v297 = (unint64_t *)&v443->__shared_owners_;
          do
            v298 = __ldxr(v297);
          while (__stxr(v298 + 1, v297));
        }
        v392 = v446;
        if (v446)
        {
          v299 = (std::__shared_weak_count *)operator new();
          v300 = v446;
          v299->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E10;
          v299->__shared_owners_ = 0;
          v299->__shared_weak_owners_ = 0;
          v299[1].__vftable = (std::__shared_weak_count_vtbl *)v300;
        }
        else
        {
          v299 = 0;
        }
        v393 = v299;
        v446 = 0;
        MIL::Builder::FunctionBuilder::Make();
        v301 = v393;
        if (!v393)
          goto LABEL_596;
        v302 = (unint64_t *)&v393->__shared_owners_;
        do
          v303 = __ldaxr(v302);
        while (__stlxr(v303 - 1, v302));
        if (!v303)
        {
          ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
          std::__shared_weak_count::__release_weak(v301);
          v304 = v395;
          if (!v395)
            goto LABEL_604;
        }
        else
        {
LABEL_596:
          v304 = v395;
          if (!v395)
            goto LABEL_604;
        }
        v305 = (unint64_t *)&v304->__shared_owners_;
        do
          v306 = __ldaxr(v305);
        while (__stlxr(v306 - 1, v305));
        if (!v306)
        {
          ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
          std::__shared_weak_count::__release_weak(v304);
        }
LABEL_604:
        MIL::Builder::ProgramBuilder::RemoveFunction();
        v390 = v448[0];
        if (v448[0])
        {
          v307 = (std::__shared_weak_count *)operator new();
          v308 = v448[0];
          v307->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3078;
          v307->__shared_owners_ = 0;
          v307->__shared_weak_owners_ = 0;
          v307[1].__vftable = (std::__shared_weak_count_vtbl *)v308;
        }
        else
        {
          v307 = 0;
        }
        v391 = v307;
        v448[0] = 0;
        MIL::Builder::ProgramBuilder::AddFunction();
        v309 = v391;
        if (v391)
        {
          v310 = (unint64_t *)&v391->__shared_owners_;
          do
            v311 = __ldaxr(v310);
          while (__stlxr(v311 - 1, v310));
          if (!v311)
          {
            ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
            std::__shared_weak_count::__release_weak(v309);
          }
        }
        MIL::Builder::ProgramBuilder::GetFunction();
        v312 = *(_OWORD *)&v410.__r_.__value_.__l.__data_;
        *(_OWORD *)&v410.__r_.__value_.__l.__data_ = 0uLL;
        v313 = (std::__shared_weak_count *)v419[1];
        *(_OWORD *)v419 = v312;
        if (!v313)
          goto LABEL_616;
        v314 = (unint64_t *)&v313->__shared_owners_;
        do
          v315 = __ldaxr(v314);
        while (__stlxr(v315 - 1, v314));
        if (!v315)
        {
          ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
          std::__shared_weak_count::__release_weak(v313);
          v316 = (std::__shared_weak_count *)v410.__r_.__value_.__l.__size_;
          if (v410.__r_.__value_.__l.__size_)
            goto LABEL_617;
        }
        else
        {
LABEL_616:
          v316 = (std::__shared_weak_count *)v410.__r_.__value_.__l.__size_;
          if (v410.__r_.__value_.__l.__size_)
          {
LABEL_617:
            v317 = (unint64_t *)&v316->__shared_owners_;
            do
              v318 = __ldaxr(v317);
            while (__stlxr(v318 - 1, v317));
            if (!v318)
            {
              ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
              std::__shared_weak_count::__release_weak(v316);
            }
          }
        }
        v319 = v448[0];
        v448[0] = 0;
        if (v319)
          (*(void (**)(uint64_t *))(*v319 + 8))(v319);
        v320 = v446;
        v446 = 0;
        if (v320)
          (*(void (**)(uint64_t *))(*v320 + 8))(v320);
        v321 = *(char **)&v387[16];
        if (*(_QWORD *)&v387[16])
        {
          do
          {
            v329 = *(char **)v321;
            v330 = (void *)*((_QWORD *)v321 + 5);
            if (v330)
            {
              *((_QWORD *)v321 + 6) = v330;
              operator delete(v330);
            }
            if (v321[39] < 0)
              operator delete(*((void **)v321 + 2));
            operator delete(v321);
            v321 = v329;
          }
          while (v329);
        }
        v322 = *(void **)v387;
        *(_QWORD *)v387 = 0;
        if (v322)
          operator delete(v322);
        v323 = v406[0];
        v406[0] = 0;
        if (v323)
        {
          MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v323);
          MEMORY[0x19401CD90]();
        }
      }
      v324 = (std::__shared_weak_count *)__s.__r_.__value_.__l.__size_;
      if (!__s.__r_.__value_.__l.__size_)
        goto LABEL_635;
      v325 = (unint64_t *)(__s.__r_.__value_.__l.__size_ + 8);
      do
        v326 = __ldaxr(v325);
      while (__stlxr(v326 - 1, v325));
      if (v326)
      {
LABEL_635:
        v327 = v408[0];
        v408[0] = 0;
        if (!v327)
          goto LABEL_637;
LABEL_636:
        MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v327);
        MEMORY[0x19401CD90]();
        goto LABEL_637;
      }
      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
      std::__shared_weak_count::__release_weak(v324);
      v327 = v408[0];
      v408[0] = 0;
      if (v327)
        goto LABEL_636;
LABEL_637:
      if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v445.__r_.__value_.__l.__data_);
        std::__tree<std::string>::destroy((uint64_t)&v444, (char *)v444.__r_.__value_.__l.__size_);
        v328 = v415;
        if (!v415)
          goto LABEL_649;
      }
      else
      {
        std::__tree<std::string>::destroy((uint64_t)&v444, (char *)v444.__r_.__value_.__l.__size_);
        v328 = v415;
        if (!v415)
          goto LABEL_649;
      }
      v331 = (unint64_t *)&v328->__shared_owners_;
      do
        v332 = __ldaxr(v331);
      while (__stlxr(v332 - 1, v331));
      if (v332)
      {
LABEL_649:
        v333 = (std::__shared_weak_count *)v419[1];
        if (v419[1])
          goto LABEL_650;
        goto LABEL_105;
      }
      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
      std::__shared_weak_count::__release_weak(v328);
      v333 = (std::__shared_weak_count *)v419[1];
      if (v419[1])
      {
LABEL_650:
        v334 = (unint64_t *)&v333->__shared_owners_;
        do
          v335 = __ldaxr(v334);
        while (__stlxr(v335 - 1, v334));
        if (!v335)
        {
          ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
          std::__shared_weak_count::__release_weak(v333);
        }
      }
LABEL_105:
      v65 += 24;
      if ((unsigned __int8 *)v65 == v372)
        goto LABEL_658;
    }
    while (1)
    {
      if (*((char *)v77 + 55) < 0)
        std::string::__init_copy_ctor_external(&v416, (const std::string::value_type *)v77[4], v77[5]);
      else
        v416 = *(std::string *)(v77 + 4);
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v416.__r_.__value_.__l.__data_);
        v78 = (_QWORD *)v77[1];
        if (v78)
        {
          do
          {
LABEL_126:
            v79 = v78;
            v78 = (_QWORD *)*v78;
          }
          while (v78);
          goto LABEL_118;
        }
      }
      else
      {
        v78 = (_QWORD *)v77[1];
        if (v78)
          goto LABEL_126;
      }
      do
      {
        v79 = (_QWORD *)v77[2];
        v122 = *v79 == (_QWORD)v77;
        v77 = v79;
      }
      while (!v122);
LABEL_118:
      v77 = v79;
      if (v79 == v76)
        goto LABEL_116;
    }
  }
LABEL_658:
  MIL::Builder::ProgramBuilder::CreateProgram(v433);
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)&v387[8] + 16))(&v387[8]) & 1) == 0)
  {
    v370 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&v387[8]);
    std::operator+<char>();
    std::runtime_error::runtime_error(v370, &v445);
    __cxa_throw(v370, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v336 = *(_QWORD *)v387;
  *(_QWORD *)v387 = 0;
  *v371 = v336;
  MEMORY[0x19401B338](&v387[8]);
  v337 = *(_QWORD *)v387;
  *(_QWORD *)v387 = 0;
  if (v337)
    (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
  if (v422 && SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__sz.__r_.__value_.__l.__data_);
  v338 = (_QWORD *)v424;
  if ((_QWORD)v424)
  {
    do
    {
      v339 = (_QWORD *)*v338;
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)(v338 + 3));
      operator delete(v338);
      v338 = v339;
    }
    while (v339);
  }
  v340 = __p[0];
  __p[0] = 0;
  if (v340)
    operator delete(v340);
  v341 = v433;
  v433 = 0;
  if (v341)
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(_QWORD *)v341 + 8))(v341);
  if (v436)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v434);
  if ((SHIBYTE(v440) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_674;
LABEL_677:
    operator delete(__dst.__r_.__value_.__l.__data_);
    v342 = v443;
    if (!v443)
      return kdebug_trace();
    goto LABEL_678;
  }
  operator delete(v438);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_677;
LABEL_674:
  v342 = v443;
  if (!v443)
    return kdebug_trace();
LABEL_678:
  v343 = (unint64_t *)&v342->__shared_owners_;
  do
    v344 = __ldaxr(v343);
  while (__stlxr(v344 - 1, v343));
  if (!v344)
  {
    ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
    std::__shared_weak_count::__release_weak(v342);
  }
  return kdebug_trace();
}

void sub_19114DBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;
  void *v28;
  int v29;
  uint64_t v30;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;

  if (*(char *)(v30 - 121) < 0)
  {
    operator delete(*(void **)(v30 - 144));
    if ((v29 & 1) == 0)
    {
LABEL_6:
      MEMORY[0x19401B338](v27);
      if (a27)
        (*(void (**)(void *))(*(_QWORD *)a27 + 8))(a27);
      if (LOBYTE(STACK[0x288]) && SLOBYTE(STACK[0x287]) < 0)
        operator delete((void *)STACK[0x270]);
      v32 = (_QWORD *)STACK[0x2A0];
      if (STACK[0x2A0])
      {
        do
        {
          v33 = (_QWORD *)*v32;
          std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)(v32 + 3));
          operator delete(v32);
          v32 = v33;
        }
        while (v33);
      }
      v34 = (void *)STACK[0x290];
      STACK[0x290] = 0;
      if (v34)
        operator delete(v34);
      v35 = STACK[0x310];
      STACK[0x310] = 0;
      if (v35)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v35 + 8))(v35);
        if (!LOBYTE(STACK[0x340]))
        {
LABEL_17:
          if (*(char *)(v30 - 217) < 0)
            goto LABEL_18;
          goto LABEL_23;
        }
      }
      else if (!LOBYTE(STACK[0x340]))
      {
        goto LABEL_17;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&STACK[0x318]);
      if (*(char *)(v30 - 217) < 0)
      {
LABEL_18:
        operator delete(*(void **)(v30 - 240));
        if ((*(char *)(v30 - 193) & 0x80000000) == 0)
          goto LABEL_19;
        goto LABEL_24;
      }
LABEL_23:
      if ((*(char *)(v30 - 193) & 0x80000000) == 0)
      {
LABEL_19:
        v36 = *(std::__shared_weak_count **)(v30 - 184);
        if (!v36)
          goto LABEL_29;
        goto LABEL_25;
      }
LABEL_24:
      operator delete(*(void **)(v30 - 216));
      v36 = *(std::__shared_weak_count **)(v30 - 184);
      if (!v36)
        goto LABEL_29;
LABEL_25:
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
LABEL_29:
      kdebug_trace();
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

void Espresso::AOT::E5BackendToE5RTLoweringPass::~E5BackendToE5RTLoweringPass(Espresso::AOT::E5BackendToE5RTLoweringPass *this)
{
  *(_QWORD *)this = &off_1E2DA0958;
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::E5BackendToE5RTLoweringPass *)((char *)this + 8));
  Espresso::AOT::AbstractMILPass::~AbstractMILPass(this);
}

{
  *(_QWORD *)this = &off_1E2DA0958;
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::E5BackendToE5RTLoweringPass *)((char *)this + 8));
  Espresso::AOT::AbstractMILPass::~AbstractMILPass(this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = *((_QWORD *)v2 + 5);
      if (v6)
      {
        v7 = *((_QWORD *)v2 + 6);
        v8 = (void *)*((_QWORD *)v2 + 5);
        if (v7 != v6)
        {
          do
          {
            if (*(char *)(v7 - 1) < 0)
              operator delete(*(void **)(v7 - 24));
            v7 -= 24;
          }
          while (v7 != v6);
          v8 = (void *)*((_QWORD *)v2 + 5);
        }
        *((_QWORD *)v2 + 6) = v6;
        operator delete(v8);
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      if (v3)
      {
        v4 = *(_QWORD *)(v2 + 48);
        v5 = *(void **)(v2 + 40);
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 1) < 0)
              operator delete(*(void **)(v4 - 24));
            v4 -= 24;
          }
          while (v4 != v3);
          v5 = *(void **)(v2 + 40);
        }
        *(_QWORD *)(v2 + 48) = v3;
        operator delete(v5);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::unordered_map<std::string,std::vector<std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19114E8E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_19114E8FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  float v27;
  float v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[3];

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v10)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  for (i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return v14;
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                for (j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::string>> const&>(a1, v10, a3, (uint64_t)v41);
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v27 / v28);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v29)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v29)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      if (v29)
        goto LABEL_54;
    }
LABEL_78:
    *(_QWORD *)v41[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v29)
    goto LABEL_78;
LABEL_54:
  *(_QWORD *)v41[0] = *v29;
  *v29 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_19114ED1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::string>> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _QWORD *v9;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  v9 = v8;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 16), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  v9[5] = 0;
  v9[6] = 0;
  v9[7] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v9 + 5, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 3));
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_19114EDE0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19114EDF4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,std::__unordered_map_hasher<Espresso::AOT::BackendIdentifier,std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,std::hash<Espresso::AOT::BackendIdentifier>,std::equal_to<Espresso::AOT::BackendIdentifier>,true>,std::__unordered_map_equal<Espresso::AOT::BackendIdentifier,std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,std::equal_to<Espresso::AOT::BackendIdentifier>,std::hash<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>>>::__emplace_unique_key_args<Espresso::AOT::BackendIdentifier,std::piecewise_construct_t const&,std::tuple<Espresso::AOT::BackendIdentifier const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 14) = 1065353216;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *(_QWORD *)v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*(_QWORD *)v11)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_19114F124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Espresso::AOT::BackendIdentifier,std::unordered_map<std::string,std::vector<std::string>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)v2 + 24);
    operator delete(v2);
  }
  return a1;
}

void std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(char *__p)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  do
  {
    v2 = *(char **)__p;
    v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 6);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (__p[39] < 0)
      operator delete(*((void **)__p + 2));
    operator delete(__p);
    __p = v2;
  }
  while (v2);
  OUTLINED_FUNCTION_10();
}

void Espresso::AOT::E5BackendToE5RTLoweringPass::Run(void **a1, void **a2, void **a3)
{
  void **v5;
  void *v6;

  v5 = (void **)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      if (*((char *)v5 - 1) < 0)
        operator delete(*(v5 - 3));
      v5 -= 3;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
  OUTLINED_FUNCTION_10();
}

uint64_t Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler(uint64_t a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  void *v16[2];
  int v17;
  __int128 v18[8];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  v6 = *(void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = *(_QWORD **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((_QWORD *)v6 + v10) = v16;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  Espresso::AOT::AOTCompilerBackend::AOTCompilerBackend(a1, v18, (uint64_t)__p);
  v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0)
LABEL_16:
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *(_QWORD *)a1 = off_1E2DA0650;
  Espresso::AOT::AbstractMILCompiler::ExtractOptions(a2, (std::string *)(a1 + 184));
  return a1;
}

void sub_19114F37C(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerBackend *v1;

  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v1);
  _Unwind_Resume(a1);
}

void sub_19114F390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AbstractMILCompiler::ExtractOptions(Espresso::AOT::AbstractMILCompiler *this@<X0>, std::string *a2@<X8>)
{
  uint64_t Input;
  __int128 v6;
  uint64_t Output;
  __int128 v8;
  std::string::__raw *v9;
  uint64_t *v10;
  uint64_t *v11;
  void *v12;
  std::string::size_type size;
  void *v14;
  void **v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  __int128 v21;
  std::string::size_type v22;
  std::string v23;
  void *__p[2];
  void **v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  Input = Espresso::AOT::AOTCompilerOptions::GetInput(this);
  if (*(char *)(Input + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)Input, *(_QWORD *)(Input + 8));
  }
  else
  {
    v6 = *(_OWORD *)Input;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(Input + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
  Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2 + 1, *(const std::string::value_type **)Output, *(_QWORD *)(Output + 8));
  }
  else
  {
    v8 = *(_OWORD *)Output;
    a2[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(Output + 16);
    *(_OWORD *)&a2[1].__r_.__value_.__l.__data_ = v8;
  }
  v9 = (std::string::__raw *)&a2[2];
  HIBYTE(v25) = 4;
  strcpy((char *)__p, "main");
  std::vector<std::string>::vector[abi:ne180100](a2[2].__r_.__value_.__r.__words, (uint64_t)__p, 1uLL);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  a2[3].__r_.__value_.__r.__words[0] = 0;
  *((_BYTE *)&v23.__r_.__value_.__s + 23) = 3;
  LODWORD(v23.__r_.__value_.__l.__data_) = 7104877;
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)&v23, (uint64_t)__p);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  *((_BYTE *)&v23.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v23, "entry-points");
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)&v23);
  v11 = v10;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if (!v11)
      goto LABEL_29;
  }
  else if (!v10)
  {
    goto LABEL_29;
  }
  if (*((_DWORD *)v11 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (*((char *)v11 + 63) < 0)
    std::string::__init_copy_ctor_external(&v23, (const std::string::value_type *)v11[5], v11[6]);
  else
    v23 = *(std::string *)(v11 + 5);
  v20 = 1;
  LOWORD(v19) = 44;
  E5Common::StringUtils::Split((uint64_t *)&v23, (char *)&v19, (uint64_t)&v21);
  v12 = (void *)v9->__words[0];
  if (v9->__words[0])
  {
    size = a2[2].__r_.__value_.__l.__size_;
    v14 = (void *)v9->__words[0];
    if ((void *)size != v12)
    {
      do
      {
        if (*(char *)(size - 1) < 0)
          operator delete(*(void **)(size - 24));
        size -= 24;
      }
      while ((void *)size != v12);
      v14 = (void *)v9->__words[0];
    }
    a2[2].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
    operator delete(v14);
    v9->__words[0] = 0;
    a2[2].__r_.__value_.__l.__size_ = 0;
    a2[2].__r_.__value_.__r.__words[2] = 0;
  }
  *(_OWORD *)&a2[2].__r_.__value_.__l.__data_ = v21;
  a2[2].__r_.__value_.__r.__words[2] = v22;
  v22 = 0;
  v21 = 0uLL;
  if (v20 < 0)
  {
    operator delete(v19);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
LABEL_29:
  a2[3].__r_.__value_.__r.__words[0] = Espresso::AOT::AOTCompilerOptions::TryGetMILProgram(this);
  Espresso::AOT::AbstractMILCompiler::Options::AssertValid(a2);
  v15 = v25;
  if (v25)
  {
    do
    {
      v16 = (void **)*v15;
      v17 = *((unsigned int *)v15 + 16);
      if ((_DWORD)v17 != -1)
        ((void (*)(std::string *, void **))off_1E2DD1660[v17])(&v23, v15 + 5);
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v18 = __p[0];
  __p[0] = 0;
  if (v18)
    operator delete(v18);
}

void sub_19114F6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  Espresso::AOT::AbstractMILCompiler::Options *v32;

  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a27);
  Espresso::AOT::AbstractMILCompiler::Options::~Options(v32);
  _Unwind_Resume(a1);
}

void sub_19114F778(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x19114F780);
  __clang_call_terminate(a1);
}

void Espresso::AOT::AbstractMILCompiler::Options::AssertValid(std::string *this)
{
  std::string::size_type size;
  std::string *v3;
  unsigned __int8 v4;
  std::logic_error *exception;
  std::logic_error *v6;
  std::string __p;
  uint64_t v8;

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this->__r_.__value_.__s + 23))
      goto LABEL_3;
LABEL_17:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Input must be non-empty.");
    goto LABEL_22;
  }
  if (!this->__r_.__value_.__l.__size_)
    goto LABEL_17;
LABEL_3:
  memset(&__p, 0, sizeof(__p));
  if ((size & 0x80u) == 0)
    v3 = this;
  else
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&__p, v3, (std::string *)((char *)v3 + size));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  v4 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v4 == 255 || !v4)
  {
    v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" does not exist.", (const void **)&this->__r_.__value_.__l.__data_, &__p);
    std::logic_error::logic_error(v6, &__p);
    v6->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v6, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if ((SHIBYTE(this[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this[1].__r_.__value_.__s + 23))
      goto LABEL_14;
LABEL_19:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is a required argument");
    goto LABEL_22;
  }
  if (!this[1].__r_.__value_.__l.__size_)
    goto LABEL_19;
LABEL_14:
  if (this[2].__r_.__value_.__r.__words[0] == this[2].__r_.__value_.__l.__size_)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "mil-entry-points must be non-empty.");
LABEL_22:
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
}

void sub_19114F920(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19114F934(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19114F948(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19114F95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AbstractMILCompiler::Options::PopulateAllEntryPoints(std::vector<std::string> *a1, uint64_t a2)
{
  uint64_t v3;
  std::vector<std::string>::size_type v4;
  std::string *begin;
  std::vector<std::string>::pointer end;
  const std::string::value_type *v7;
  __int128 v8;
  std::vector<std::string>::pointer v9;
  char *v10;
  int v11;
  void **v12;
  void **v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  std::logic_error *exception;
  void *v19;
  void *__p;
  std::vector<std::string>::size_type __n;
  std::string v22;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((uint64_t)&v19, v3);
  v4 = __n;
  if (!__n)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "program doesn't have any functions");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  begin = a1[2].__begin_;
  end = a1[2].__end_;
  if (end != begin)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != begin);
    v4 = __n;
  }
  a1[2].__end_ = begin;
  std::vector<std::string>::reserve(a1 + 2, v4);
  v7 = (const std::string::value_type *)__p;
  if (__p)
  {
    do
    {
      if (v7[39] < 0)
        std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)v7 + 2), *((_QWORD *)v7 + 3));
      else
        v22 = *(std::string *)(v7 + 16);
      v9 = a1[2].__end_;
      if (v9 < a1[2].__end_cap_.__value_)
      {
        v8 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
        v9->__r_.__value_.__r.__words[2] = v22.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v8;
        a1[2].__end_ = v9 + 1;
      }
      else
      {
        v10 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)&a1[2].__begin_, (uint64_t)&v22);
        v11 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
        a1[2].__end_ = (std::vector<std::string>::pointer)v10;
        if (v11 < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
      }
      v7 = *(const std::string::value_type **)v7;
    }
    while (v7);
    v12 = (void **)__p;
    if (__p)
    {
      do
      {
        while (1)
        {
          v13 = (void **)*v12;
          v14 = (std::__shared_weak_count *)v12[6];
          if (v14)
          {
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          if (*((char *)v12 + 39) < 0)
            break;
          operator delete(v12);
          v12 = v13;
          if (!v13)
            goto LABEL_28;
        }
        operator delete(v12[2]);
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
  }
LABEL_28:
  v17 = v19;
  v19 = 0;
  if (v17)
    operator delete(v17);
}

void sub_19114FB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19114FBB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19114FBCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19114FBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AbstractMILCompiler::Canonicalize(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  *a2 = v2;
}

void Espresso::AOT::AbstractMILCompiler::Optimize(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  *a2 = v2;
}

void Espresso::AOT::AbstractMILCompiler::Run(Espresso::AOT::AbstractMILCompiler *this)
{
  bnns *v2;
  std::__shared_weak_count *v3;
  bnns *v4;
  std::string *v5;
  MIL::ParserOptions *v6;
  bnns *v7;
  Espresso::AOT *v8;
  MIL::MILContext *v9;
  bnns *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  bnns *v15;
  bnns *v16;
  uint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  bnns *v24;
  std::string v25;
  bnns *v26[2];
  std::__shared_weak_count *v27;

  Espresso::AOT::CreateMILAOTContext(this, v26);
  v2 = v26[0];
  v26[1] = v26[0];
  if (v26[0])
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v26[0];
    v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E80;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
    v27 = v3;
    v5 = (std::string *)((char *)this + 184);
    v6 = (MIL::ParserOptions *)*((_QWORD *)this + 32);
    if (v6)
    {
LABEL_3:
      (*(void (**)(bnns **__return_ptr))(*(_QWORD *)v6 + 32))(v26);
      v7 = v26[0];
      v8 = (Espresso::AOT *)(*(uint64_t (**)(bnns *))(*(_QWORD *)v26[0] + 40))(v26[0]);
      Espresso::AOT::RegisterE5AOTOpsets(v8, v9);
      goto LABEL_20;
    }
  }
  else
  {
    v3 = 0;
    v27 = 0;
    v5 = (std::string *)((char *)this + 184);
    v6 = (MIL::ParserOptions *)*((_QWORD *)this + 32);
    if (v6)
      goto LABEL_3;
  }
  MIL::ParserOptions::Make(v6);
  v10 = v26[0];
  if (*((char *)this + 207) < 0)
    std::string::__init_copy_ctor_external(&v25, *((const std::string::value_type **)this + 23), *((_QWORD *)this + 24));
  else
    v25 = *v5;
  (*(void (**)(bnns *, std::string *, uint64_t))(*(_QWORD *)v10 + 32))(v10, &v25, 1);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  (*(void (**)(bnns *, uint64_t))(*(_QWORD *)v26[0] + 64))(v26[0], 1);
  v22[1] = v2;
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  MIL::Text::ParseProgramFromFile();
  v7 = v24;
  v24 = 0;
  if (v23)
  {
    v13 = &v23->__shared_owners_;
    do
      v14 = __ldaxr((unint64_t *)v13);
    while (__stlxr(v14 - 1, (unint64_t *)v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v15 = v26[0];
  v26[0] = 0;
  if (v15)
    (*(void (**)(bnns *))(*(_QWORD *)v15 + 8))(v15);
LABEL_20:
  v22[0] = v7;
  (*(void (**)(bnns **__return_ptr, Espresso::AOT::AbstractMILCompiler *, _QWORD *))(*(_QWORD *)this + 40))(v26, this, v22);
  v16 = v26[0];
  v26[0] = 0;
  v17 = v22[0];
  v22[0] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (uint64_t *)*((_QWORD *)this + 29);
  if (*((_QWORD *)this + 30) - (_QWORD)v18 == 24)
  {
    if (*((char *)v18 + 23) < 0)
    {
      v18 = (uint64_t *)*v18;
      if (*(_QWORD *)(*((_QWORD *)this + 29) + 8) != 1)
        goto LABEL_29;
    }
    else if (*((_BYTE *)v18 + 23) != 1)
    {
      goto LABEL_29;
    }
    if (*(_BYTE *)v18 == 42)
      Espresso::AOT::AbstractMILCompiler::Options::PopulateAllEntryPoints((std::vector<std::string> *)v5, (uint64_t)v16);
  }
LABEL_29:
  (*(void (**)(Espresso::AOT::AbstractMILCompiler *, bnns *, char *))(*(_QWORD *)this + 32))(this, v16, (char *)this + 232);
  if (v16)
    (*(void (**)(bnns *))(*(_QWORD *)v16 + 8))(v16);
  v19 = v27;
  if (v27)
  {
    v20 = (unint64_t *)&v27->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_19114FEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t v21;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v21 = a19;
  a19 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::AbstractMILCompiler::GetOptions(Espresso::AOT::AbstractMILCompiler *this)
{
  return (uint64_t)this + 184;
}

_QWORD *Espresso::AOT::MILCompilerForANE::MILCompilerForANE(_QWORD *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  void *v16[2];
  int v17;
  _BYTE v18[136];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  v6 = *(void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = *(_QWORD **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((_QWORD *)v6 + v10) = v16;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0)
LABEL_16:
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *a1 = &off_1E2DA0520;
  Espresso::AOT::MILCompilerForANE::ExtractOptions(a2, (uint64_t)(a1 + 33));
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  return a1;
}

void sub_1911500E0(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler *v1;

  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_1911500F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForANE::ExtractOptions(Espresso::AOT::MILCompilerForANE *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Platforms;
  uint64_t Output;
  __int128 v7;
  uint64_t AneOptionsPlistPath;
  __int128 v9;
  std::logic_error *exception;
  _BYTE v11[344];

  Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)v11, this);
  Platforms = Espresso::AOT::CompilerOptionsForE5::GetPlatforms((Espresso::AOT::CompilerOptionsForE5 *)v11);
  if (*(_QWORD *)(Platforms + 24) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one platform is supported.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)Output, *(_QWORD *)(Output + 8));
  }
  else
  {
    v7 = *(_OWORD *)Output;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(Output + 16);
    *(_OWORD *)a2 = v7;
  }
  *(_BYTE *)(a2 + 24) = Espresso::AOT::CompilerOptionsForE5::GetDumpIrOnly((Espresso::AOT::CompilerOptionsForE5 *)v11);
  Espresso::AOT::GetANENameForE5Platform(*(_QWORD *)(Platforms + 16) + 16, (_QWORD *)(a2 + 32));
  AneOptionsPlistPath = Espresso::AOT::CompilerOptionsForE5::GetAneOptionsPlistPath((Espresso::AOT::CompilerOptionsForE5 *)v11);
  if (*(char *)(AneOptionsPlistPath + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 56), *(const std::string::value_type **)AneOptionsPlistPath, *(_QWORD *)(AneOptionsPlistPath + 8));
  }
  else
  {
    v9 = *(_OWORD *)AneOptionsPlistPath;
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(AneOptionsPlistPath + 16);
    *(_OWORD *)(a2 + 56) = v9;
  }
  Espresso::AOT::CompilerOptionsForE5::GetAneOptions((Espresso::AOT::CompilerOptionsForE5 *)v11, a2 + 80);
  *(_BYTE *)(a2 + 120) = Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling(this);
  Espresso::AOT::MILCompilerForANE::Options::AssertValid(a2);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)v11);
}

void sub_191150260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)&a10);
  _Unwind_Resume(a1);
}

void sub_19115027C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Espresso::AOT::MILCompilerForANE::Options *v10;

  Espresso::AOT::MILCompilerForANE::Options::~Options(v10);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)&a10);
  _Unwind_Resume(a1);
}

void sub_191150298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v5);
  if (*(char *)(v2 + 79) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v2 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v2 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
LABEL_4:
    Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)va);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*(void **)v2);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)va);
  _Unwind_Resume(a1);
}

void sub_19115033C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForANE::Options::AssertValid(uint64_t this)
{
  std::logic_error *exception;

  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(this + 23))
      goto LABEL_3;
LABEL_7:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    goto LABEL_10;
  }
  if (!*(_QWORD *)(this + 8))
    goto LABEL_7;
LABEL_3:
  if ((*(char *)(this + 55) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(this + 55))
      return this;
    goto LABEL_9;
  }
  if (!*(_QWORD *)(this + 40))
  {
LABEL_9:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Cannot get the ANE architecture from --platform.");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  return this;
}

void sub_1911503E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1911503FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForANE::Run(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t Function;
  std::string::size_type size;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char **v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  __int128 v18;
  std::string::size_type v19;
  std::string::size_type v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char **v32;
  char *v33;
  BOOL v34;
  uint64_t v35;
  std::string::size_type v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  MIL::IRValueType *v41;
  BOOL v42;
  char v43;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::string *v47;
  std::string *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  void **v66;
  void **v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  __int128 v74;
  MIL::Opsets::Common *v75;
  MIL::MILContext *v76;
  uint64_t v77;
  char **v78;
  size_t v79;
  std::string::size_type v80;
  std::string *p_dst;
  uint64_t v82;
  uint64_t v83;
  MIL::IROpset *Opset;
  uint64_t **v85;
  std::string *v86;
  __int128 v87;
  int v88;
  const std::string::value_type *v89;
  std::string::size_type v90;
  std::string *v91;
  std::string::size_type v92;
  std::string::size_type *p_size;
  std::string::size_type *v94;
  char v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::size_type v98;
  const void *v99;
  const void *v100;
  int v101;
  size_t v102;
  const void *v103;
  size_t v104;
  int v105;
  _BOOL4 v106;
  int v107;
  _BOOL4 v108;
  char *v109;
  std::string::size_type v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  _BYTE *v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t **v123;
  uint64_t *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  MIL::Attributes::BlobFileMutabilityInfo *v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  __int128 v139;
  char v140;
  std::string *v141;
  uint64_t v142;
  std::string::size_type v143;
  std::string *v144;
  const char *v145;
  NSObject *v146;
  std::string::size_type v147;
  std::string::value_type *v148;
  int v149;
  uint64_t v150;
  std::string *p_pn;
  uint64_t v152;
  const std::string::value_type **v153;
  unsigned int v154;
  std::__fs::filesystem::path::__string_view v155;
  _BYTE *v156;
  std::string::size_type v157;
  std::__fs::filesystem::path::__string_view v158;
  void *v159;
  std::basic_string_view<_CharT, _Traits>::size_type v160;
  std::basic_string_view<_CharT, _Traits>::size_type v161;
  void *v162;
  int v163;
  uint64_t v164;
  std::basic_string_view<_CharT, _Traits>::size_type v165;
  std::basic_string_view<_CharT, _Traits>::size_type v166;
  void **v167;
  const char *v168;
  NSObject *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  std::__fs::filesystem::path::__string_view v177;
  _BYTE *v178;
  NSObject *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::basic_string_view<_CharT, _Traits>::size_type v187;
  std::basic_string_view<_CharT, _Traits>::size_type v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  MIL::Attributes::BlobFileMutabilityInfo *v192;
  uint64_t v193;
  void **v194;
  void **v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  void *v199;
  std::string *v201;
  __int128 v202;
  std::string *v203;
  __int128 v204;
  std::runtime_error *v205;
  std::logic_error *exception;
  std::string *v207;
  __int128 v208;
  std::runtime_error *v209;
  unsigned __int8 **v210;
  uint64_t v211;
  uint64_t v212;
  const char *__src;
  std::__fs::filesystem::path __base;
  std::__fs::filesystem::path v216;
  std::string v217;
  std::string v218;
  std::string v219;
  char v220;
  void *v221[2];
  uint64_t v222;
  std::string v223;
  std::string pn;
  std::string v225;
  std::string v226;
  std::string v227;
  _DWORD v228[2];
  std::__fs::filesystem::path v229;
  std::__fs::filesystem::path v230;
  char v231[8];
  uint64_t v232;
  std::__shared_weak_count *v233;
  void *v234[2];
  char v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  MIL::Attributes::BlobFileMutabilityInfo *v238;
  std::string v239;
  std::string __p;
  uint64_t v241;
  std::string __dst;
  __int128 v243;
  __int128 v244;
  int v245;
  std::string v246;
  _BYTE v247[32];
  int v248;
  unsigned int v249;
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v6 = *a3;
  v5 = a3[1];
  v210 = a3;
  if (v5 == *a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "At least one entry point is needed.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v243 = 0u;
  v244 = 0u;
  v245 = 1065353216;
  v212 = a1;
  do
  {
    Function = MIL::IRProgram::GetFunction();
    *(_QWORD *)v247 = operator new(0x20uLL);
    *(_OWORD *)&v247[8] = xmmword_191A71250;
    strcpy(*(char **)v247, "FlexibleShapeInformation");
    MIL::IRObject::TryGetAttributeSharedPtr();
    if ((v247[23] & 0x80000000) != 0)
      operator delete(*(void **)v247);
    *(_QWORD *)v247 = operator new(0x20uLL);
    *(_OWORD *)&v247[8] = xmmword_191A7C2C0;
    strcpy(*(char **)v247, "NeuralEngineOptimizedIOBuffer");
    MIL::IRObject::TryGetAttributeSharedPtr();
    if ((v247[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v247);
      size = __dst.__r_.__value_.__l.__size_;
      *(_OWORD *)v247 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      if (__dst.__r_.__value_.__l.__size_)
      {
LABEL_10:
        v9 = (unint64_t *)(size + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      size = __dst.__r_.__value_.__l.__size_;
      *(_OWORD *)v247 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      if (__dst.__r_.__value_.__l.__size_)
        goto LABEL_10;
    }
    *(_QWORD *)&v247[16] = &__p;
    v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 128))(Function);
    *(_OWORD *)&v246.__r_.__value_.__r.__words[1] = 0uLL;
    v246.__r_.__value_.__r.__words[0] = (std::string::size_type)&v246.__r_.__value_.__l.__size_;
    v13 = v11 + 1;
    v12 = (_QWORD *)*v11;
    if ((_QWORD *)*v11 == v11 + 1)
    {
LABEL_56:
      v37 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
      v38 = (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v37 + 88))(v37);
      v40 = *v38;
      v39 = v38[1];
      if (*v38 == v39)
      {
        v43 = 1;
        v45 = v212;
        std::__tree<std::string>::destroy((uint64_t)&v246, (char *)v246.__r_.__value_.__l.__size_);
        v46 = *(std::__shared_weak_count **)&v247[8];
        if (*(_QWORD *)&v247[8])
          goto LABEL_74;
      }
      else
      {
        do
        {
          v41 = (MIL::IRValueType *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v37[8] + 16))(v37 + 8, v40, 1);
          v43 = v42;
          v40 += 24;
        }
        while (v40 != v39 && v42);
        v45 = v212;
        std::__tree<std::string>::destroy((uint64_t)&v246, (char *)v246.__r_.__value_.__l.__size_);
        v46 = *(std::__shared_weak_count **)&v247[8];
        if (*(_QWORD *)&v247[8])
          goto LABEL_74;
      }
LABEL_77:
      v51 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
        goto LABEL_81;
      goto LABEL_78;
    }
    while (2)
    {
      v14 = (char **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__find_equal<std::string>(&v246, &v246.__r_.__value_.__l.__size_, &v239, &v230, v12 + 4);
      if (*v14)
      {
        v15 = (_QWORD *)v12[1];
        if (!v15)
          goto LABEL_46;
        goto LABEL_40;
      }
      v16 = (char *)operator new(0x40uLL);
      v17 = (std::string *)(v16 + 32);
      if (*((char *)v12 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)v12[4], v12[5]);
      }
      else
      {
        v18 = *((_OWORD *)v12 + 2);
        *((_QWORD *)v16 + 6) = v12[6];
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      }
      *((_QWORD *)v16 + 7) = v12[7];
      v19 = v239.__r_.__value_.__r.__words[0];
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v19;
      *v14 = v16;
      if (*(_QWORD *)v246.__r_.__value_.__l.__data_)
      {
        v246.__r_.__value_.__r.__words[0] = *(_QWORD *)v246.__r_.__value_.__l.__data_;
        v16 = *v14;
      }
      v20 = v246.__r_.__value_.__l.__size_;
      v16[24] = v16 == (char *)v246.__r_.__value_.__l.__size_;
      if (v16 == (char *)v20)
      {
LABEL_39:
        ++v246.__r_.__value_.__r.__words[2];
        v15 = (_QWORD *)v12[1];
        if (!v15)
          goto LABEL_46;
        goto LABEL_40;
      }
      while (1)
      {
        v21 = *((_QWORD *)v16 + 2);
        if (*(_BYTE *)(v21 + 24))
          goto LABEL_39;
        v22 = *(char **)(v21 + 16);
        v23 = *(_QWORD *)v22;
        if (*(_QWORD *)v22 != v21)
          break;
        v26 = *((_QWORD *)v22 + 1);
        if (!v26 || (v27 = *(unsigned __int8 *)(v26 + 24), v24 = (_BYTE *)(v26 + 24), v27))
        {
          if (*(char **)v21 == v16)
          {
            *(_BYTE *)(v21 + 24) = 1;
            v22[24] = 0;
            v30 = *(_QWORD *)(v21 + 8);
            *(_QWORD *)v22 = v30;
            if (v30)
              goto LABEL_37;
          }
          else
          {
            v28 = *(uint64_t **)(v21 + 8);
            v29 = *v28;
            *(_QWORD *)(v21 + 8) = *v28;
            if (v29)
            {
              *(_QWORD *)(v29 + 16) = v21;
              v22 = *(char **)(v21 + 16);
            }
            v28[2] = (uint64_t)v22;
            *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8 * (**(_QWORD **)(v21 + 16) != v21)) = v28;
            *v28 = v21;
            *(_QWORD *)(v21 + 16) = v28;
            v22 = (char *)v28[2];
            v21 = *(_QWORD *)v22;
            *((_BYTE *)v28 + 24) = 1;
            v22[24] = 0;
            v30 = *(_QWORD *)(v21 + 8);
            *(_QWORD *)v22 = v30;
            if (v30)
LABEL_37:
              *(_QWORD *)(v30 + 16) = v22;
          }
          *(_QWORD *)(v21 + 16) = *((_QWORD *)v22 + 2);
          *(_QWORD *)(*((_QWORD *)v22 + 2) + 8 * (**((_QWORD **)v22 + 2) != (_QWORD)v22)) = v21;
          *(_QWORD *)(v21 + 8) = v22;
          *((_QWORD *)v22 + 2) = v21;
          goto LABEL_39;
        }
LABEL_25:
        *(_BYTE *)(v21 + 24) = 1;
        v16 = v22;
        v22[24] = v22 == (char *)v20;
        *v24 = 1;
        if (v22 == (char *)v20)
          goto LABEL_39;
      }
      if (v23)
      {
        v25 = *(unsigned __int8 *)(v23 + 24);
        v24 = (_BYTE *)(v23 + 24);
        if (!v25)
          goto LABEL_25;
      }
      if (*(char **)v21 == v16)
      {
        v35 = *((_QWORD *)v16 + 1);
        *(_QWORD *)v21 = v35;
        if (v35)
        {
          *(_QWORD *)(v35 + 16) = v21;
          v22 = *(char **)(v21 + 16);
        }
        *((_QWORD *)v16 + 2) = v22;
        *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8 * (**(_QWORD **)(v21 + 16) != v21)) = v16;
        *((_QWORD *)v16 + 1) = v21;
        *(_QWORD *)(v21 + 16) = v16;
        v22 = (char *)*((_QWORD *)v16 + 2);
        v16[24] = 1;
        v22[24] = 0;
        v32 = (char **)*((_QWORD *)v22 + 1);
        v33 = *v32;
        *((_QWORD *)v22 + 1) = *v32;
        if (v33)
LABEL_44:
          *((_QWORD *)v33 + 2) = v22;
      }
      else
      {
        *(_BYTE *)(v21 + 24) = 1;
        v22[24] = 0;
        v32 = (char **)*((_QWORD *)v22 + 1);
        v33 = *v32;
        *((_QWORD *)v22 + 1) = *v32;
        if (v33)
          goto LABEL_44;
      }
      v32[2] = (char *)*((_QWORD *)v22 + 2);
      *(_QWORD *)(*((_QWORD *)v22 + 2) + 8 * (**((_QWORD **)v22 + 2) != (_QWORD)v22)) = v32;
      *v32 = v22;
      *((_QWORD *)v22 + 2) = v32;
      ++v246.__r_.__value_.__r.__words[2];
      v15 = (_QWORD *)v12[1];
      if (!v15)
      {
        do
        {
LABEL_46:
          v31 = (_QWORD *)v12[2];
          v34 = *v31 == (_QWORD)v12;
          v12 = v31;
        }
        while (!v34);
        goto LABEL_14;
      }
      do
      {
LABEL_40:
        v31 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
LABEL_14:
      v12 = v31;
      if (v31 != v13)
        continue;
      break;
    }
    v36 = v246.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v246.__r_.__value_.__l.__data_ == &v246.__r_.__value_.__r.__words[1])
      goto LABEL_56;
    {
      v47 = *(std::string **)(v36 + 8);
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = (std::string *)v47->__r_.__value_.__r.__words[0];
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = *(std::string **)(v36 + 16);
          v34 = v48->__r_.__value_.__r.__words[0] == v36;
          v36 = (std::string::size_type)v48;
        }
        while (!v34);
      }
      v36 = (std::string::size_type)v48;
      if (v48 == (std::string *)&v246.__r_.__value_.__r.__words[1])
        goto LABEL_56;
    }
    v43 = 0;
    v45 = v212;
    std::__tree<std::string>::destroy((uint64_t)&v246, (char *)v246.__r_.__value_.__l.__size_);
    v46 = *(std::__shared_weak_count **)&v247[8];
    if (!*(_QWORD *)&v247[8])
      goto LABEL_77;
LABEL_74:
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (v50)
      goto LABEL_77;
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    v51 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
    {
LABEL_81:
      v54 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
        goto LABEL_82;
      goto LABEL_89;
    }
LABEL_78:
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (v53)
      goto LABEL_81;
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
    v54 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
LABEL_82:
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
LABEL_89:
    if ((v43 & 1) == 0)
    {
      std::to_string(&__dst, 0x40uLL);
      v201 = std::string::insert(&__dst, 0, "Input or output row or plane stride is not aligned with ");
      v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
      v246.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v246.__r_.__value_.__l.__data_ = v202;
      v201->__r_.__value_.__l.__size_ = 0;
      v201->__r_.__value_.__r.__words[2] = 0;
      v201->__r_.__value_.__r.__words[0] = 0;
      v203 = std::string::append(&v246, " bytes.");
      v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
      *(_QWORD *)&v247[16] = *((_QWORD *)&v203->__r_.__value_.__l + 2);
      *(_OWORD *)v247 = v204;
      v203->__r_.__value_.__l.__size_ = 0;
      v203->__r_.__value_.__r.__words[2] = 0;
      v203->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v246.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v205 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v205, (const std::string *)v247);
      __cxa_throw(v205, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned __int8 *))(*(_QWORD *)a2 + 64))(v247, a2, v6);
    v246.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v243, v6, (uint64_t)&std::piecewise_construct, (__int128 **)&v246);
    v58 = *(_OWORD *)v247;
    *(_OWORD *)v247 = 0uLL;
    v59 = (std::__shared_weak_count *)*((_QWORD *)v57 + 6);
    *(_OWORD *)(v57 + 40) = v58;
    if (!v59)
      goto LABEL_94;
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
      v62 = *(std::__shared_weak_count **)&v247[8];
      if (*(_QWORD *)&v247[8])
      {
LABEL_95:
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
    }
    else
    {
LABEL_94:
      v62 = *(std::__shared_weak_count **)&v247[8];
      if (*(_QWORD *)&v247[8])
        goto LABEL_95;
    }
    Espresso::AOT::GetCallees(a2, (uint64_t)v247);
    v65 = *(_QWORD **)&v247[16];
    if (*(_QWORD *)&v247[16])
    {
      do
      {
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>((uint64_t)&v243, (uint64_t)(v65 + 2), (uint64_t)(v65 + 2));
        v65 = (_QWORD *)*v65;
      }
      while (v65);
      v66 = *(void ***)&v247[16];
      if (*(_QWORD *)&v247[16])
      {
        do
        {
          while (1)
          {
            v67 = (void **)*v66;
            v68 = (std::__shared_weak_count *)v66[6];
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            if (*((char *)v66 + 39) < 0)
              break;
            operator delete(v66);
            v66 = v67;
            if (!v67)
              goto LABEL_112;
          }
          operator delete(v66[2]);
          operator delete(v66);
          v66 = v67;
        }
        while (v67);
      }
    }
LABEL_112:
    v71 = *(void **)v247;
    *(_QWORD *)v247 = 0;
    if (v71)
      operator delete(v71);
    v6 += 24;
  }
  while (v6 != v5);
  Espresso::AOT::MakeIRProgramWithFunctions((uint64_t)&v243, 1, &v241);
  v73 = *v210;
  v72 = v210[1];
  if (*v210 == v72)
    goto LABEL_220;
  while (1)
  {
    Espresso::AOT::RequireDecompositionForANE((uint64_t **)v247);
    v74 = *(_OWORD *)v247;
    if (*(_QWORD *)v247)
    {
      *(_QWORD *)&v247[8] = *(_QWORD *)v247;
      operator delete((void *)v74);
    }
    if ((_QWORD)v74 != *((_QWORD *)&v74 + 1))
      break;
    v73 += 24;
    if (v73 == v72)
      goto LABEL_220;
  }
  v75 = (MIL::Opsets::Common *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v241 + 40))(v241);
  MIL::Opsets::Common::RegisterIos18Decompositions(v75, v76);
  v77 = 0;
  *(_OWORD *)&v246.__r_.__value_.__r.__words[1] = 0uLL;
  v78 = off_1E2DD1680;
  v246.__r_.__value_.__r.__words[0] = (std::string::size_type)&v246.__r_.__value_.__l.__size_;
  while (2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 40))(v241);
    __src = *v78;
    v79 = strlen(*v78);
    if (v79 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v80 = v79;
    if (v79 >= 0x17)
    {
      v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v79 | 7) != 0x17)
        v82 = v79 | 7;
      v83 = v82 + 1;
      p_dst = (std::string *)operator new(v82 + 1);
      __dst.__r_.__value_.__r.__words[2] = v83 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      __dst.__r_.__value_.__l.__size_ = v80;
      goto LABEL_129;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v79;
    p_dst = &__dst;
    if (v79)
LABEL_129:
      memmove(p_dst, __src, v80);
    v211 = v77;
    p_dst->__r_.__value_.__s.__data_[v80] = 0;
    Opset = (MIL::IROpset *)MIL::MILContext::GetOpset();
    MIL::IROpset::GetReversedOperatorNamesMap(Opset);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      v85 = *(uint64_t ***)&v247[16];
      if (!*(_QWORD *)&v247[16])
        goto LABEL_212;
      while (1)
      {
        while (1)
        {
LABEL_137:
          *((_BYTE *)&v239.__r_.__value_.__s + 23) = 2;
          strcpy((char *)&v239, "::");
          v86 = std::string::insert(&v239, 0, __src);
          v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          v88 = *((char *)v85 + 63);
          v89 = v88 >= 0 ? (const std::string::value_type *)(v85 + 5) : (const std::string::value_type *)v85[5];
          v90 = v88 >= 0 ? *((unsigned __int8 *)v85 + 63) : (std::string::size_type)v85[6];
          v91 = std::string::append(&__p, v89, v90);
          __dst = *v91;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          v92 = v246.__r_.__value_.__l.__size_;
          p_size = &v246.__r_.__value_.__l.__size_;
          v94 = &v246.__r_.__value_.__l.__size_;
          if (v246.__r_.__value_.__l.__size_)
          {
            v95 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            v96 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(__dst.__r_.__value_.__r.__words[2])
                : __dst.__r_.__value_.__l.__size_;
            v97 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__dst
                : (std::string *)__dst.__r_.__value_.__r.__words[0];
            while (1)
            {
              while (1)
              {
                v94 = (std::string::size_type *)v92;
                v100 = *(const void **)(v92 + 32);
                v98 = v92 + 32;
                v99 = v100;
                v101 = *(char *)(v98 + 23);
                if (v101 >= 0)
                  v102 = *(unsigned __int8 *)(v98 + 23);
                else
                  v102 = *(_QWORD *)(v98 + 8);
                if (v101 >= 0)
                  v103 = (const void *)v98;
                else
                  v103 = v99;
                if (v102 >= v96)
                  v104 = v96;
                else
                  v104 = v102;
                v105 = memcmp(v97, v103, v104);
                v106 = v96 < v102;
                if (v105)
                  v106 = v105 < 0;
                if (!v106)
                  break;
                v92 = *v94;
                p_size = v94;
                if (!*v94)
                  goto LABEL_168;
              }
              v107 = memcmp(v103, v97, v104);
              v108 = v102 < v96;
              if (v107)
                v108 = v107 < 0;
              if (!v108)
                break;
              v92 = v94[1];
              if (!v92)
              {
                p_size = v94 + 1;
                goto LABEL_168;
              }
            }
          }
          else
          {
LABEL_168:
            v109 = (char *)operator new(0x38uLL);
            *(std::string *)(v109 + 32) = __dst;
            memset(&__dst, 0, sizeof(__dst));
            *(_QWORD *)v109 = 0;
            *((_QWORD *)v109 + 1) = 0;
            *((_QWORD *)v109 + 2) = v94;
            *p_size = (std::string::size_type)v109;
            if (*(_QWORD *)v246.__r_.__value_.__l.__data_)
            {
              v246.__r_.__value_.__r.__words[0] = *(_QWORD *)v246.__r_.__value_.__l.__data_;
              v109 = (char *)*p_size;
            }
            v110 = v246.__r_.__value_.__l.__size_;
            v109[24] = v109 == (char *)v246.__r_.__value_.__l.__size_;
            if (v109 != (char *)v110)
            {
              do
              {
                v111 = *((_QWORD *)v109 + 2);
                if (*(_BYTE *)(v111 + 24))
                  break;
                v112 = *(_BYTE **)(v111 + 16);
                v113 = *(_QWORD *)v112;
                if (*(_QWORD *)v112 == v111)
                {
                  v116 = *((_QWORD *)v112 + 1);
                  if (!v116 || (v117 = *(unsigned __int8 *)(v116 + 24), v114 = (_BYTE *)(v116 + 24), v117))
                  {
                    if (*(char **)v111 == v109)
                    {
                      *(_BYTE *)(v111 + 24) = 1;
                      v112[24] = 0;
                      v120 = *(_QWORD *)(v111 + 8);
                      *(_QWORD *)v112 = v120;
                      if (v120)
                        goto LABEL_184;
                    }
                    else
                    {
                      v118 = *(uint64_t **)(v111 + 8);
                      v119 = *v118;
                      *(_QWORD *)(v111 + 8) = *v118;
                      if (v119)
                      {
                        *(_QWORD *)(v119 + 16) = v111;
                        v112 = *(_BYTE **)(v111 + 16);
                      }
                      v118[2] = (uint64_t)v112;
                      *(_QWORD *)(*(_QWORD *)(v111 + 16) + 8 * (**(_QWORD **)(v111 + 16) != v111)) = v118;
                      *v118 = v111;
                      *(_QWORD *)(v111 + 16) = v118;
                      v112 = (_BYTE *)v118[2];
                      v111 = *(_QWORD *)v112;
                      *((_BYTE *)v118 + 24) = 1;
                      v112[24] = 0;
                      v120 = *(_QWORD *)(v111 + 8);
                      *(_QWORD *)v112 = v120;
                      if (v120)
LABEL_184:
                        *(_QWORD *)(v120 + 16) = v112;
                    }
                    *(_QWORD *)(v111 + 16) = *((_QWORD *)v112 + 2);
                    *(_QWORD *)(*((_QWORD *)v112 + 2) + 8 * (**((_QWORD **)v112 + 2) != (_QWORD)v112)) = v111;
                    *(_QWORD *)(v111 + 8) = v112;
LABEL_190:
                    *((_QWORD *)v112 + 2) = v111;
                    break;
                  }
                }
                else if (!v113 || (v115 = *(unsigned __int8 *)(v113 + 24), v114 = (_BYTE *)(v113 + 24), v115))
                {
                  if (*(char **)v111 == v109)
                  {
                    v122 = *((_QWORD *)v109 + 1);
                    *(_QWORD *)v111 = v122;
                    if (v122)
                    {
                      *(_QWORD *)(v122 + 16) = v111;
                      v112 = *(_BYTE **)(v111 + 16);
                    }
                    *((_QWORD *)v109 + 2) = v112;
                    *(_QWORD *)(*(_QWORD *)(v111 + 16) + 8 * (**(_QWORD **)(v111 + 16) != v111)) = v109;
                    *((_QWORD *)v109 + 1) = v111;
                    *(_QWORD *)(v111 + 16) = v109;
                    v112 = (_BYTE *)*((_QWORD *)v109 + 2);
                    v109[24] = 1;
                    v112[24] = 0;
                    v111 = *((_QWORD *)v112 + 1);
                    v121 = *(char **)v111;
                    *((_QWORD *)v112 + 1) = *(_QWORD *)v111;
                    if (v121)
LABEL_188:
                      *((_QWORD *)v121 + 2) = v112;
                  }
                  else
                  {
                    *(_BYTE *)(v111 + 24) = 1;
                    v112[24] = 0;
                    v111 = *((_QWORD *)v112 + 1);
                    v121 = *(char **)v111;
                    *((_QWORD *)v112 + 1) = *(_QWORD *)v111;
                    if (v121)
                      goto LABEL_188;
                  }
                  *(_QWORD *)(v111 + 16) = *((_QWORD *)v112 + 2);
                  *(_QWORD *)(*((_QWORD *)v112 + 2) + 8 * (**((_QWORD **)v112 + 2) != (_QWORD)v112)) = v111;
                  *(_QWORD *)v111 = v112;
                  goto LABEL_190;
                }
                *(_BYTE *)(v111 + 24) = 1;
                v109 = v112;
                v112[24] = v112 == (_BYTE *)v110;
                *v114 = 1;
              }
              while (v112 != (_BYTE *)v110);
            }
            ++v246.__r_.__value_.__r.__words[2];
            v95 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          if ((v95 & 0x80) == 0)
            break;
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_135;
LABEL_196:
          if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_136;
LABEL_197:
          operator delete(v239.__r_.__value_.__l.__data_);
          v85 = (uint64_t **)*v85;
          if (!v85)
          {
LABEL_205:
            v123 = *(uint64_t ***)&v247[16];
            if (!*(_QWORD *)&v247[16])
              goto LABEL_212;
            while (1)
            {
              v124 = *v123;
              if (*((char *)v123 + 63) < 0)
              {
                operator delete(v123[5]);
                if ((*((char *)v123 + 39) & 0x80000000) == 0)
                  goto LABEL_208;
              }
              else if ((*((char *)v123 + 39) & 0x80000000) == 0)
              {
LABEL_208:
                operator delete(v123);
                v123 = (uint64_t **)v124;
                if (!v124)
                  goto LABEL_212;
                continue;
              }
              operator delete(v123[2]);
              operator delete(v123);
              v123 = (uint64_t **)v124;
              if (!v124)
                goto LABEL_212;
            }
          }
        }
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_196;
LABEL_135:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_197;
LABEL_136:
        v85 = (uint64_t **)*v85;
        if (!v85)
          goto LABEL_205;
      }
    }
    v85 = *(uint64_t ***)&v247[16];
    if (*(_QWORD *)&v247[16])
      goto LABEL_137;
LABEL_212:
    v125 = *(void **)v247;
    *(_QWORD *)v247 = 0;
    if (v125)
      operator delete(v125);
    v78 = &off_1E2DD1680[v211 + 1];
    v77 = v211 + 1;
    if (v211 != 3)
      continue;
    break;
  }
  *(_QWORD *)v247 = operator new(0x28uLL);
  *(_OWORD *)&v247[8] = xmmword_191A78320;
  strcpy(*(char **)v247, "ios18::scaled_dot_product_attention");
  std::__tree<std::string>::__erase_unique<std::string>(&v246, v247);
  v45 = v212;
  if ((v247[23] & 0x80000000) != 0)
    operator delete(*(void **)v247);
  v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v241 + 40))(v241);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, std::string *))(*(_QWORD *)v126 + 56))(v247, v126, v241, &v246);
  v127 = *(_QWORD *)v247;
  *(_QWORD *)v247 = 0;
  v128 = v241;
  v241 = v127;
  if (v128)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
    v129 = *(_QWORD *)v247;
    *(_QWORD *)v247 = 0;
    if (v129)
      (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  }
  std::__tree<std::string>::destroy((uint64_t)&v246, (char *)v246.__r_.__value_.__l.__size_);
LABEL_220:
  MIL::Attributes::BlobFileMutabilityInfo::Make();
  v130 = v238;
  if (v238)
    MIL::Attributes::BlobFileMutabilityInfo::Replace();
  v247[23] = 14;
  strcpy(v247, "ANEBinaryPoint");
  MIL::IRObject::TryGetAttributeSharedPtr();
  if ((v247[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v247);
    v131 = v236;
    if (!v236)
      goto LABEL_235;
LABEL_226:
    v235 = 14;
    strcpy((char *)v234, "ANEBinaryPoint");
    v232 = v131;
    v233 = v237;
    if (v237)
    {
      v132 = (unint64_t *)&v237->__shared_owners_;
      do
        v133 = __ldxr(v132);
      while (__stxr(v133 + 1, v132));
    }
    MIL::IRObject::SetAttribute();
    v134 = v233;
    if (!v233)
      goto LABEL_233;
    v135 = (unint64_t *)&v233->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
      if ((v235 & 0x80000000) == 0)
        goto LABEL_235;
    }
    else
    {
LABEL_233:
      if ((v235 & 0x80000000) == 0)
        goto LABEL_235;
    }
    operator delete(v234[0]);
    goto LABEL_235;
  }
  v131 = v236;
  if (v236)
    goto LABEL_226;
LABEL_235:
  v138 = *v210;
  v137 = v210[1];
  if (v137 == *v210)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  if ((char)v138[23] < 0)
  {
    std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)v138, *((_QWORD *)v138 + 1));
    v138 = *v210;
    v137 = v210[1];
  }
  else
  {
    v139 = *(_OWORD *)v138;
    __dst.__r_.__value_.__r.__words[2] = *((_QWORD *)v138 + 2);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v139;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v137 - v138) >> 3) >= 2)
    MEMORY[0x19401C808](&__dst, "multiprocedure");
  memset(&__p, 0, sizeof(__p));
  v140 = *(_BYTE *)(v45 + 287);
  if (v140 >= 0)
    v141 = (std::string *)(v45 + 264);
  else
    v141 = *(std::string **)(v45 + 264);
  if (v140 >= 0)
    v142 = *(unsigned __int8 *)(v45 + 287);
  else
    v142 = *(_QWORD *)(v45 + 272);
  std::string::append[abi:ne180100]<char const*,0>(&__p, v141, (std::string *)((char *)v141 + v142));
  memset(v247, 0, 24);
  v143 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v144 = &__dst;
  else
    v144 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v143 = __dst.__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)v247, v144, (std::string *)((char *)v144 + v143));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v247, (uint64_t)&__p, (std::__fs::filesystem::path *)&v239);
  if ((v247[23] & 0x80000000) != 0)
    operator delete(*(void **)v247);
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v239, 0);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v239, 0);
  Espresso::espresso_os_log_subsystem(0, v145);
  v146 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v146, OS_LOG_TYPE_DEBUG))
    Espresso::AOT::MILCompilerForANE::Run((uint64_t *)&v239, (uint64_t)v231, v146);

  memset(v247, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>((std::string *)v247, (std::string *)"ane_mil_model", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v247, (uint64_t)&v239, &v230);
  if ((v247[23] & 0x80000000) != 0)
    operator delete(*(void **)v247);
  std::__fs::filesystem::__create_directories(&v230, 0);
  memset(v247, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>((std::string *)v247, (std::string *)"model.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v247, (uint64_t)&v230, &v229);
  if ((v247[23] & 0x80000000) != 0)
    operator delete(*(void **)v247);
  *(_DWORD *)((char *)v228 + 3) = 0;
  v228[0] = 0;
  if (!Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)v45)
    && !*(_BYTE *)(v45 + 288))
  {
    v152 = v241;
    if (SHIBYTE(v229.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, v229.__pn_.__r_.__value_.__l.__data_, v229.__pn_.__r_.__value_.__l.__size_);
    else
      pn = v229.__pn_;
    if (SHIBYTE(v230.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v223, v230.__pn_.__r_.__value_.__l.__data_, v230.__pn_.__r_.__value_.__l.__size_);
    else
      v223 = v230.__pn_;
    v221[0] = 0;
    v221[1] = 0;
    v222 = 0;
    Espresso::MILUtil::SerializeProgram(v152, (uint64_t)&pn, (uint64_t)&v223, (uint64_t)v221, 0x100000004, 0);
    if (SHIBYTE(v222) < 0)
    {
      operator delete(v221[0]);
      if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_292:
        v148 = 0;
        v149 = 0;
        if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_293;
LABEL_368:
        p_pn = &pn;
        goto LABEL_281;
      }
    }
    else if ((SHIBYTE(v223.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_292;
    }
    operator delete(v223.__r_.__value_.__l.__data_);
    v148 = 0;
    v149 = 0;
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_293;
    goto LABEL_368;
  }
  if (SHIBYTE(v230.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v247, v230.__pn_.__r_.__value_.__l.__data_, v230.__pn_.__r_.__value_.__l.__size_);
  else
    *(std::__fs::filesystem::path *)v247 = v230;
  v147 = *(_QWORD *)&v247[8];
  v148 = *(std::string::value_type **)v247;
  v228[0] = *(_DWORD *)&v247[16];
  *(_DWORD *)((char *)v228 + 3) = *(_DWORD *)&v247[19];
  v149 = v247[23];
  v150 = v241;
  if (SHIBYTE(v229.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v227, v229.__pn_.__r_.__value_.__l.__data_, v229.__pn_.__r_.__value_.__l.__size_);
  else
    v227 = v229.__pn_;
  if (SHIBYTE(v230.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v226, v230.__pn_.__r_.__value_.__l.__data_, v230.__pn_.__r_.__value_.__l.__size_);
  else
    v226 = v230.__pn_;
  if (v149 < 0)
  {
    std::string::__init_copy_ctor_external(&v225, v148, v147);
  }
  else
  {
    v225.__r_.__value_.__r.__words[0] = (std::string::size_type)v148;
    v225.__r_.__value_.__l.__size_ = v147;
    LODWORD(v225.__r_.__value_.__r.__words[2]) = v228[0];
    *(_DWORD *)((char *)&v225.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v228 + 3);
    *((_BYTE *)&v225.__r_.__value_.__s + 23) = v149;
  }
  Espresso::MILUtil::SerializeProgramWithWeightsDirectory(v150, (uint64_t)&v227, (uint64_t)&v226, (uint64_t)&v225, 0x100000004, v130 != 0);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v225.__r_.__value_.__l.__data_);
    if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_279;
LABEL_276:
    if ((SHIBYTE(v227.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_293;
LABEL_280:
    p_pn = &v227;
LABEL_281:
    operator delete(p_pn->__r_.__value_.__l.__data_);
    goto LABEL_293;
  }
  if ((SHIBYTE(v226.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_276;
LABEL_279:
  operator delete(v226.__r_.__value_.__l.__data_);
  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_280;
LABEL_293:
  if (!*(_BYTE *)(v45 + 288))
  {
    memset(v247, 0, 24);
    std::string::append[abi:ne180100]<char const*,0>((std::string *)v247, (std::string *)"model.hwx", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v247, (uint64_t)&v239, (std::__fs::filesystem::path *)&v246);
    if ((v247[23] & 0x80000000) != 0)
      operator delete(*(void **)v247);
    v155 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&__p);
    if (v155.__size_ > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v155.__size_ >= 0x17)
    {
      v165 = (v155.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v155.__size_ | 7) != 0x17)
        v165 = v155.__size_ | 7;
      v166 = v165 + 1;
      v156 = operator new(v165 + 1);
      *(_QWORD *)&v247[8] = v155.__size_;
      *(_QWORD *)&v247[16] = v166 | 0x8000000000000000;
      *(_QWORD *)v247 = v156;
    }
    else
    {
      v247[23] = v155.__size_;
      v156 = v247;
      if (!v155.__size_)
      {
LABEL_339:
        v156[v155.__size_] = 0;
        v217 = *(std::string *)v247;
        std::__fs::filesystem::path::lexically_relative((std::__fs::filesystem::path *)&v218, (const std::__fs::filesystem::path *)&v246, (const std::__fs::filesystem::path *)&v217);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v217.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_341;
        }
        else if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_341:
          *(std::string *)v247 = v218;
          goto LABEL_344;
        }
        std::string::__init_copy_ctor_external((std::string *)v247, v218.__r_.__value_.__l.__data_, v218.__r_.__value_.__l.__size_);
LABEL_344:
        v167 = (void **)(v45 + 392);
        if (*(char *)(v45 + 415) < 0)
          operator delete(*v167);
        *(_OWORD *)v167 = *(_OWORD *)v247;
        *(_QWORD *)(v45 + 408) = *(_QWORD *)&v247[16];
        std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)&v246, 0);
        if (Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)v45))
        {
          Espresso::espresso_os_log_subsystem(0, v168);
          v169 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG))
            Espresso::AOT::MILCompilerForANE::Run(v169, v170, v171, v172, v173, v174, v175, v176);

          memset(v247, 0, 24);
          std::string::append[abi:ne180100]<char const*,0>((std::string *)v247, (std::string *)"model.anehash", (std::string *)"");
          std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)v247, (uint64_t)&v239, (std::__fs::filesystem::path *)&v217);
          if ((v247[23] & 0x80000000) != 0)
            operator delete(*(void **)v247);
          v177 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&__p);
          if (v177.__size_ > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v177.__size_ >= 0x17)
          {
            v187 = (v177.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v177.__size_ | 7) != 0x17)
              v187 = v177.__size_ | 7;
            v188 = v187 + 1;
            v178 = operator new(v187 + 1);
            *(_QWORD *)&v247[8] = v177.__size_;
            *(_QWORD *)&v247[16] = v188 | 0x8000000000000000;
            *(_QWORD *)v247 = v178;
          }
          else
          {
            v247[23] = v177.__size_;
            v178 = v247;
            if (!v177.__size_)
            {
LABEL_363:
              v178[v177.__size_] = 0;
              __base = *(std::__fs::filesystem::path *)v247;
              std::__fs::filesystem::path::lexically_relative(&v216, (const std::__fs::filesystem::path *)&v217, &__base);
              if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__base.__pn_.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v216.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_365;
              }
              else if ((SHIBYTE(v216.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_365:
                *(std::__fs::filesystem::path *)v247 = v216;
                goto LABEL_383;
              }
              std::string::__init_copy_ctor_external((std::string *)v247, v216.__pn_.__r_.__value_.__l.__data_, v216.__pn_.__r_.__value_.__l.__size_);
LABEL_383:
              if (*(char *)(v45 + 415) < 0)
              {
                operator delete(*v167);
                *(_OWORD *)v167 = *(_OWORD *)v247;
                *(_QWORD *)(v45 + 408) = *(_QWORD *)&v247[16];
                if ((SHIBYTE(v229.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_385;
              }
              else
              {
                *(_OWORD *)v167 = *(_OWORD *)v247;
                *(_QWORD *)(v45 + 408) = *(_QWORD *)&v247[16];
                if ((SHIBYTE(v229.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_385:
                  *(std::__fs::filesystem::path *)v247 = v229;
                  goto LABEL_388;
                }
              }
              std::string::__init_copy_ctor_external((std::string *)v247, v229.__pn_.__r_.__value_.__l.__data_, v229.__pn_.__r_.__value_.__l.__size_);
LABEL_388:
              if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&__base.__pn_, v217.__r_.__value_.__l.__data_, v217.__r_.__value_.__l.__size_);
              else
                __base.__pn_ = v217;
              Espresso::AOT::MILCompilerForANE::CompileUsingANEF(v45, (std::string::size_type)v247, (std::string::size_type)&__base);
              if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__base.__pn_.__r_.__value_.__l.__data_);
                if ((v247[23] & 0x80000000) == 0)
                {
LABEL_393:
                  if ((SHIBYTE(v216.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_394;
                  goto LABEL_436;
                }
              }
              else if ((v247[23] & 0x80000000) == 0)
              {
                goto LABEL_393;
              }
              operator delete(*(void **)v247);
              if ((SHIBYTE(v216.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_394:
                if ((SHIBYTE(v217.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_395;
LABEL_437:
                operator delete(v217.__r_.__value_.__l.__data_);
                goto LABEL_395;
              }
LABEL_436:
              operator delete(v216.__pn_.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v217.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_395;
              goto LABEL_437;
            }
          }
          memmove(v178, v177.__data_, v177.__size_);
          goto LABEL_363;
        }
        Espresso::espresso_os_log_subsystem(0, v168);
        v179 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG))
          Espresso::AOT::MILCompilerForANE::Run(v179, v180, v181, v182, v183, v184, v185, v186);

        if (SHIBYTE(v229.__pn_.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)v247, v229.__pn_.__r_.__value_.__l.__data_, v229.__pn_.__r_.__value_.__l.__size_);
        else
          *(std::__fs::filesystem::path *)v247 = v229;
        if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v217, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
        else
          v217 = v246;
        Espresso::AOT::MILCompilerForANE::CompileUsingANEC(v45, (std::string *)v247, (uint64_t *)&v217);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v217.__r_.__value_.__l.__data_);
          if ((v247[23] & 0x80000000) == 0)
            goto LABEL_375;
        }
        else if ((v247[23] & 0x80000000) == 0)
        {
LABEL_375:
          std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v246, 0);
          if (v247[0] == 255 || !v247[0])
          {
            if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v217, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
            else
              v217 = v246;
            v207 = std::string::insert(&v217, 0, "Macho not found at the path ");
            v208 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
            *(_QWORD *)&v247[16] = *((_QWORD *)&v207->__r_.__value_.__l + 2);
            *(_OWORD *)v247 = v208;
            v207->__r_.__value_.__l.__size_ = 0;
            v207->__r_.__value_.__r.__words[2] = 0;
            v207->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v217.__r_.__value_.__l.__data_);
            v209 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v209, (const std::string *)v247);
            __cxa_throw(v209, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
LABEL_395:
          std::__fs::filesystem::__remove_all(&v230, 0);
          if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v218.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v246.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_397;
          }
          else if ((SHIBYTE(v246.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_397;
          }
          operator delete(v246.__r_.__value_.__l.__data_);
          if ((v149 & 0x80000000) == 0)
            goto LABEL_398;
          goto LABEL_407;
        }
        operator delete(*(void **)v247);
        goto LABEL_375;
      }
    }
    memmove(v156, v155.__data_, v155.__size_);
    goto LABEL_339;
  }
  memset(v247, 0, sizeof(v247));
  v248 = 1065353216;
  v249 = 0;
  v153 = (const std::string::value_type **)(v45 + 320);
  if (*(char *)(v45 + 343) < 0)
  {
    v157 = *(_QWORD *)(v45 + 328);
    if (!v157)
      goto LABEL_307;
    std::string::__init_copy_ctor_external(&v246, *v153, v157);
    v154 = v249;
    if (v249 != -1)
LABEL_305:
      ((void (*)(std::string *, _BYTE *))off_1E2DD16C8[v154])(&v218, v247);
    *(std::string *)v247 = v246;
    v249 = 1;
  }
  else
  {
    if (*(_BYTE *)(v45 + 343))
    {
      v154 = 0;
      *(_OWORD *)&v246.__r_.__value_.__l.__data_ = *(_OWORD *)v153;
      v246.__r_.__value_.__r.__words[2] = *(_QWORD *)(v45 + 336);
      goto LABEL_305;
    }
LABEL_307:
    if (v247 != (_BYTE *)(v45 + 344))
    {
      v248 = *(_DWORD *)(v45 + 376);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v247, *(uint64_t **)(v45 + 360), 0);
    }
  }
  if (SHIBYTE(v229.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v217, v229.__pn_.__r_.__value_.__l.__data_, v229.__pn_.__r_.__value_.__l.__size_);
  else
    v217 = v229.__pn_;
  v158 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&v217);
  if (v158.__size_ > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v158.__size_ >= 0x17)
  {
    v160 = (v158.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v158.__size_ | 7) != 0x17)
      v160 = v158.__size_ | 7;
    v161 = v160 + 1;
    v159 = operator new(v160 + 1);
    v246.__r_.__value_.__l.__size_ = v158.__size_;
    v246.__r_.__value_.__r.__words[2] = v161 | 0x8000000000000000;
    v246.__r_.__value_.__r.__words[0] = (std::string::size_type)v159;
    goto LABEL_319;
  }
  *((_BYTE *)&v246.__r_.__value_.__s + 23) = v158.__size_;
  v159 = &v246;
  if (v158.__size_)
LABEL_319:
    memmove(v159, v158.__data_, v158.__size_);
  *((_BYTE *)v159 + v158.__size_) = 0;
  v162 = (void *)v246.__r_.__value_.__r.__words[0];
  LODWORD(v216.__pn_.__r_.__value_.__l.__data_) = v246.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v216.__pn_.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v246.__r_.__value_.__r.__words[2]
                                                                            + 3);
  v163 = SHIBYTE(v246.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v218, v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v218.__r_.__value_.__l.__data_ = *(_OWORD *)&v246.__r_.__value_.__l.__data_;
    LODWORD(v218.__r_.__value_.__r.__words[2]) = v216.__pn_.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v218.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v216.__pn_.__r_.__value_.__r.__words
                                                                            + 3);
    *((_BYTE *)&v218.__r_.__value_.__s + 23) = *((_BYTE *)&v246.__r_.__value_.__s + 23);
  }
  if (v220 && SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v219.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v163 & 0x80000000) == 0)
      goto LABEL_328;
LABEL_332:
    operator delete(v162);
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_333;
LABEL_329:
    v164 = v249;
    if (v249 == -1)
      goto LABEL_397;
LABEL_334:
    ((void (*)(std::string *, _BYTE *))off_1E2DD16C8[v164])(&v246, v247);
    goto LABEL_397;
  }
  operator delete(v218.__r_.__value_.__l.__data_);
  if (v163 < 0)
    goto LABEL_332;
LABEL_328:
  if ((SHIBYTE(v217.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_329;
LABEL_333:
  operator delete(v217.__r_.__value_.__l.__data_);
  v164 = v249;
  if (v249 != -1)
    goto LABEL_334;
LABEL_397:
  if ((v149 & 0x80000000) == 0)
  {
LABEL_398:
    if ((SHIBYTE(v229.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_399;
LABEL_408:
    operator delete(v229.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v230.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_409;
LABEL_400:
    if ((SHIBYTE(v239.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_401;
LABEL_410:
    operator delete(v239.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_411;
LABEL_402:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_403;
LABEL_412:
    operator delete(__dst.__r_.__value_.__l.__data_);
    v189 = v237;
    if (v237)
      goto LABEL_413;
    goto LABEL_417;
  }
LABEL_407:
  operator delete(v148);
  if (SHIBYTE(v229.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_408;
LABEL_399:
  if ((SHIBYTE(v230.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_400;
LABEL_409:
  operator delete(v230.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v239.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_410;
LABEL_401:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_402;
LABEL_411:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_412;
LABEL_403:
  v189 = v237;
  if (v237)
  {
LABEL_413:
    v190 = (unint64_t *)&v189->__shared_owners_;
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
LABEL_417:
  v192 = v238;
  v238 = 0;
  if (v192)
  {
    MIL::Attributes::BlobFileMutabilityInfo::~BlobFileMutabilityInfo(v192);
    MEMORY[0x19401CD90]();
  }
  v193 = v241;
  v241 = 0;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  v194 = (void **)v244;
  if ((_QWORD)v244)
  {
    do
    {
      while (1)
      {
        v195 = (void **)*v194;
        v196 = (std::__shared_weak_count *)v194[6];
        if (v196)
        {
          v197 = (unint64_t *)&v196->__shared_owners_;
          do
            v198 = __ldaxr(v197);
          while (__stlxr(v198 - 1, v197));
          if (!v198)
          {
            ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
            std::__shared_weak_count::__release_weak(v196);
          }
        }
        if (*((char *)v194 + 39) < 0)
          break;
        operator delete(v194);
        v194 = v195;
        if (!v195)
          goto LABEL_431;
      }
      operator delete(v194[2]);
      operator delete(v194);
      v194 = v195;
    }
    while (v195);
  }
LABEL_431:
  v199 = (void *)v243;
  *(_QWORD *)&v243 = 0;
  if (v199)
    operator delete(v199);
  return kdebug_trace();
}

void sub_1911521E4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a70;
  char a71;
  char a72;
  MIL::Attributes::BlobFileMutabilityInfo *a73;
  void *a74;
  char a75;
  void *v75;
  int v76;
  uint64_t v77;
  void *v80;
  std::runtime_error *exception;
  const char *v82;

  if (*(char *)(v77 - 137) < 0)
  {
    operator delete(*(void **)(v77 - 160));
    if ((a25 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_6:
    if (a31 < 0)
      operator delete(a26);
    if (a2 == 2)
    {
      v80 = __cxa_begin_catch(a1);
      std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)&a70, 0);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v82 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v80 + 16))(v80);
      std::runtime_error::runtime_error(exception, v82);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (a38 < 0)
      operator delete(a33);
    if (*(char *)(v77 - 169) < 0)
      operator delete(*(void **)(v77 - 192));
    if (v76 < 0)
      operator delete(v75);
    if (a69 < 0)
      operator delete(a64);
    if (a71 < 0)
      operator delete(a70);
    if (a75 < 0)
      operator delete(a74);
    if (SLOBYTE(STACK[0x217]) < 0)
      operator delete((void *)STACK[0x200]);
    if (SLOBYTE(STACK[0x237]) < 0)
      operator delete((void *)STACK[0x220]);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
    std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo>::~unique_ptr[abi:ne180100](&a73);
    JUMPOUT(0x19115293CLL);
  }
  operator delete(__p);
  goto LABEL_6;
}

void sub_191152500()
{
  void *v0;

  __cxa_free_exception(v0);
  __cxa_end_catch();
  JUMPOUT(0x1911526ACLL);
}

void sub_19115253C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a67;
  char a72;
  char a73;
  MIL::Attributes::BlobFileMutabilityInfo *a74;
  void *a75;
  char a76;
  void *v76;
  int v77;
  void *v78;
  int v79;
  uint64_t v80;
  unint64_t v82;
  void **v83;
  void **v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  void *v88;

  if (a35 < 0)
  {
    operator delete(__p);
    if ((v77 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v77 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_5:
      std::variant<std::unordered_map<std::string,std::string>,std::string>::~variant[abi:ne180100](v80 - 160);
      if (v79 < 0)
        operator delete(v78);
      if (a66 < 0)
        operator delete(a61);
      if (a72 < 0)
        operator delete(a67);
      if (a76 < 0)
        operator delete(a75);
      if (SLOBYTE(STACK[0x217]) < 0)
        operator delete((void *)STACK[0x200]);
      if (SLOBYTE(STACK[0x237]) < 0)
        operator delete((void *)STACK[0x220]);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a73);
      std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo>::~unique_ptr[abi:ne180100](&a74);
      v82 = STACK[0x218];
      STACK[0x218] = 0;
      if (v82)
        (*(void (**)(unint64_t))(*(_QWORD *)v82 + 8))(v82);
      v83 = *(void ***)(v80 - 224);
      if (v83)
      {
        do
        {
          while (1)
          {
            v84 = (void **)*v83;
            v85 = (std::__shared_weak_count *)v83[6];
            if (v85)
            {
              p_shared_owners = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldaxr(p_shared_owners);
              while (__stlxr(v87 - 1, p_shared_owners));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            if (*((char *)v83 + 39) < 0)
              break;
            operator delete(v83);
            v83 = v84;
            if (!v84)
              goto LABEL_33;
          }
          operator delete(v83[2]);
          operator delete(v83);
          v83 = v84;
        }
        while (v84);
      }
LABEL_33:
      v88 = *(void **)(v80 - 240);
      *(_QWORD *)(v80 - 240) = 0;
      if (v88)
        operator delete(v88);
      kdebug_trace();
      _Unwind_Resume(a1);
    }
LABEL_4:
    operator delete(a23);
    goto LABEL_5;
  }
  operator delete(v76);
  if ((a28 & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_191152588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a69;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  if (a69 < 0)
    JUMPOUT(0x19115272CLL);
  JUMPOUT(0x191152730);
}

void sub_1911525A4()
{
  JUMPOUT(0x191152738);
}

void sub_1911525B0()
{
  unint64_t v0;

  v0 = STACK[0x218];
  STACK[0x218] = 0;
  if (v0)
    (*(void (**)(unint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x191152998);
}

void sub_1911525BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a49 < 0)
  {
    operator delete(__p);
    if ((a55 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a55 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a62 & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x1911526D4);
LABEL_9:
    JUMPOUT(0x1911526C8);
  }
  operator delete(a50);
  if ((a62 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_9;
}

void sub_191152604()
{
  JUMPOUT(0x1911526BCLL);
}

void sub_191152610()
{
  uint64_t v0;

  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1911526ECLL);
  JUMPOUT(0x1911526F0);
}

void sub_191152628()
{
  JUMPOUT(0x1911526F0);
}

void sub_191152630()
{
  uint64_t v0;

  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x1911526FCLL);
  JUMPOUT(0x191152700);
}

void sub_191152648()
{
  JUMPOUT(0x191152700);
}

void sub_191152650()
{
  JUMPOUT(0x191152700);
}

void sub_191152658()
{
  JUMPOUT(0x191152700);
}

void sub_191152660()
{
  uint64_t v0;

  if (*(char *)(v0 - 137) < 0)
    JUMPOUT(0x19115270CLL);
  JUMPOUT(0x191152710);
}

void sub_191152678()
{
  JUMPOUT(0x191152710);
}

void sub_191152680()
{
  uint64_t v0;

  if (*(char *)(v0 - 137) < 0)
    operator delete(*(void **)(v0 - 160));
  JUMPOUT(0x191152738);
}

void sub_191152698()
{
  unint64_t v0;

  v0 = STACK[0x218];
  STACK[0x218] = 0;
  if (v0)
    (*(void (**)(unint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x191152998);
}

void sub_1911526A0()
{
  uint64_t v0;
  void **v1;
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        v2 = (void **)*v1;
        v3 = (std::__shared_weak_count *)v1[6];
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        if (*((char *)v1 + 39) < 0)
          break;
        operator delete(v1);
        v1 = v2;
        if (!v2)
          goto LABEL_11;
      }
      operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
LABEL_11:
  v6 = *(void **)(v0 - 240);
  *(_QWORD *)(v0 - 240) = 0;
  if (v6)
    operator delete(v6);
  kdebug_trace(723746846, 0, 0, 0, 0);
  JUMPOUT(0x191152A4CLL);
}

void sub_191152744()
{
  JUMPOUT(0x191152730);
}

void sub_19115274C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if ((a28 & 0x80000000) == 0)
    JUMPOUT(0x191152564);
  JUMPOUT(0x19115255CLL);
}

void sub_191152760()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x191152804);
}

void sub_191152774()
{
  uint64_t v0;
  void **v1;
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (*(char *)(v0 - 169) < 0)
    operator delete(*(void **)(v0 - 192));
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        v2 = (void **)*v1;
        v3 = (std::__shared_weak_count *)v1[6];
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        if (*((char *)v1 + 39) < 0)
          break;
        operator delete(v1);
        v1 = v2;
        if (!v2)
          goto LABEL_15;
      }
      operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
LABEL_15:
  v6 = *(void **)(v0 - 240);
  *(_QWORD *)(v0 - 240) = 0;
  if (v6)
    operator delete(v6);
  kdebug_trace();
  JUMPOUT(0x191152A4CLL);
}

void sub_1911527AC()
{
  JUMPOUT(0x191152930);
}

void sub_1911527B4()
{
  unint64_t v0;

  v0 = STACK[0x218];
  STACK[0x218] = 0;
  if (v0)
    (*(void (**)(unint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x191152998);
}

void sub_1911527BC()
{
  uint64_t v0;
  void **v1;
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        v2 = (void **)*v1;
        v3 = (std::__shared_weak_count *)v1[6];
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        if (*((char *)v1 + 39) < 0)
          break;
        operator delete(v1);
        v1 = v2;
        if (!v2)
          goto LABEL_11;
      }
      operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
LABEL_11:
  v6 = *(void **)(v0 - 240);
  *(_QWORD *)(v0 - 240) = 0;
  if (v6)
    operator delete(v6);
  kdebug_trace(723746846, 0, 0, 0, 0);
  JUMPOUT(0x191152A4CLL);
}

void sub_1911527C4()
{
  uint64_t v0;

  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  std::__tree<std::string>::destroy(v0 - 192, *(_QWORD *)(v0 - 184));
  JUMPOUT(0x19115293CLL);
}

void sub_1911527E0()
{
  uint64_t v0;
  void **v1;
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        v2 = (void **)*v1;
        v3 = (std::__shared_weak_count *)v1[6];
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        if (*((char *)v1 + 39) < 0)
          break;
        operator delete(v1);
        v1 = v2;
        if (!v2)
          goto LABEL_11;
      }
      operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
LABEL_11:
  v6 = *(void **)(v0 - 240);
  *(_QWORD *)(v0 - 240) = 0;
  if (v6)
    operator delete(v6);
  kdebug_trace(723746846, 0, 0, 0, 0);
  JUMPOUT(0x191152A4CLL);
}

void sub_1911527E8()
{
  uint64_t v0;
  void **v1;
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v0 - 160);
  v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        v2 = (void **)*v1;
        v3 = (std::__shared_weak_count *)v1[6];
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        if (*((char *)v1 + 39) < 0)
          break;
        operator delete(v1);
        v1 = v2;
        if (!v2)
          goto LABEL_11;
      }
      operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
LABEL_11:
  v6 = *(void **)(v0 - 240);
  *(_QWORD *)(v0 - 240) = 0;
  if (v6)
    operator delete(v6);
  kdebug_trace();
  JUMPOUT(0x191152A4CLL);
}

void sub_1911527F8()
{
  uint64_t v0;
  void **v1;
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        v2 = (void **)*v1;
        v3 = (std::__shared_weak_count *)v1[6];
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        if (*((char *)v1 + 39) < 0)
          break;
        operator delete(v1);
        v1 = v2;
        if (!v2)
          goto LABEL_11;
      }
      operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
LABEL_11:
  v6 = *(void **)(v0 - 240);
  *(_QWORD *)(v0 - 240) = 0;
  if (v6)
    operator delete(v6);
  kdebug_trace(723746846, 0, 0, 0, 0);
  JUMPOUT(0x191152A4CLL);
}

void sub_191152800()
{
  uint64_t v0;
  void **v1;
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (*(char *)(v0 - 137) < 0)
    operator delete(*(void **)(v0 - 160));
  v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        v2 = (void **)*v1;
        v3 = (std::__shared_weak_count *)v1[6];
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        if (*((char *)v1 + 39) < 0)
          break;
        operator delete(v1);
        v1 = v2;
        if (!v2)
          goto LABEL_13;
      }
      operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
LABEL_13:
  v6 = *(void **)(v0 - 240);
  *(_QWORD *)(v0 - 240) = 0;
  if (v6)
    operator delete(v6);
  kdebug_trace();
  JUMPOUT(0x191152A4CLL);
}

void sub_191152818()
{
  JUMPOUT(0x191152990);
}

void sub_191152820()
{
  uint64_t v0;

  if (*(char *)(v0 - 137) < 0)
    operator delete(*(void **)(v0 - 160));
  JUMPOUT(0x191152990);
}

void sub_191152838()
{
  JUMPOUT(0x191152980);
}

void sub_191152840()
{
  uint64_t v0;
  void **v1;
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        v2 = (void **)*v1;
        v3 = (std::__shared_weak_count *)v1[6];
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        if (*((char *)v1 + 39) < 0)
          break;
        operator delete(v1);
        v1 = v2;
        if (!v2)
          goto LABEL_11;
      }
      operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
LABEL_11:
  v6 = *(void **)(v0 - 240);
  *(_QWORD *)(v0 - 240) = 0;
  if (v6)
    operator delete(v6);
  kdebug_trace(723746846, 0, 0, 0, 0);
  JUMPOUT(0x191152A4CLL);
}

void sub_191152848()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x191152974);
}

void sub_191152858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a70;
  char a73;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;

  if (SLOBYTE(STACK[0x237]) < 0)
  {
    operator delete((void *)STACK[0x220]);
    if (SLOBYTE(STACK[0x217]) < 0)
    {
LABEL_5:
      operator delete((void *)STACK[0x200]);
      if ((a73 & 0x80000000) == 0)
        goto LABEL_6;
LABEL_9:
      operator delete(a70);
      v74 = *(char **)(v73 - 144);
      if (!v74)
        goto LABEL_16;
      while (1)
      {
LABEL_13:
        v75 = *(char **)v74;
        if (v74[63] < 0)
        {
          operator delete(*((void **)v74 + 5));
          if ((v74[39] & 0x80000000) == 0)
            goto LABEL_12;
LABEL_15:
          operator delete(*((void **)v74 + 2));
          operator delete(v74);
          v74 = v75;
          if (!v75)
            goto LABEL_16;
        }
        else
        {
          if (v74[39] < 0)
            goto LABEL_15;
LABEL_12:
          operator delete(v74);
          v74 = v75;
          if (!v75)
            goto LABEL_16;
        }
      }
    }
  }
  else if (SLOBYTE(STACK[0x217]) < 0)
  {
    goto LABEL_5;
  }
  if ((a73 & 0x80000000) == 0)
  {
LABEL_6:
    v74 = *(char **)(v73 - 144);
    if (v74)
      goto LABEL_13;
LABEL_16:
    v76 = *(_QWORD *)(v73 - 160);
    *(_QWORD *)(v73 - 160) = 0;
    if (v76)
      JUMPOUT(0x19115292CLL);
    JUMPOUT(0x191152930);
  }
  goto LABEL_9;
}

void sub_19115295C()
{
  uint64_t v0;
  void **v1;
  void **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v0 - 160);
  v1 = *(void ***)(v0 - 224);
  if (v1)
  {
    do
    {
      while (1)
      {
        v2 = (void **)*v1;
        v3 = (std::__shared_weak_count *)v1[6];
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v5 = __ldaxr(p_shared_owners);
          while (__stlxr(v5 - 1, p_shared_owners));
          if (!v5)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
        if (*((char *)v1 + 39) < 0)
          break;
        operator delete(v1);
        v1 = v2;
        if (!v2)
          goto LABEL_11;
      }
      operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
LABEL_11:
  v6 = *(void **)(v0 - 240);
  *(_QWORD *)(v0 - 240) = 0;
  if (v6)
    operator delete(v6);
  kdebug_trace();
  JUMPOUT(0x191152A4CLL);
}

void sub_191152970()
{
  uint64_t v0;

  std::__tree<std::string>::destroy(v0 - 192, *(char **)(v0 - 184));
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v0 - 160);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  JUMPOUT(0x191152998);
}

void sub_191152A44(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x191152A4CLL);
  __clang_call_terminate(a1);
}

void `anonymous namespace'::GetAneCompilerOptionsPlistPath(std::string *a1, unsigned __int8 *a2, uint64_t a3, const void **a4, char a5)
{
  int v5;
  size_t v6;
  unint64_t v7;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  int v17;
  char *v18;
  void *v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string *p_str;
  std::string::size_type size;
  int data;
  int v27;
  void *v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  std::string *v35;
  void *v36;
  __int128 *v37;
  void *v38;
  char v39;
  std::string *p_p;
  void *v41;
  __int128 *v42;
  void *v43;
  void *v44;
  char v45;
  void *v46;
  char *v47;
  std::runtime_error *v48;
  std::runtime_error *exception;
  std::string __p;
  uint64_t v51;
  std::string __str;
  __int128 __dst;
  int64_t v54;

  v5 = *((char *)a4 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a4 + 23);
  else
    v6 = (size_t)a4[1];
  v7 = v6 + 14;
  if (v6 + 14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v14 = v7 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v6 + 14;
    v54 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    v54 = 0;
    __dst = 0uLL;
    p_dst = &__dst;
    HIBYTE(v54) = v6 + 14;
    if (!v6)
      goto LABEL_15;
  }
  if (v5 >= 0)
    v16 = a4;
  else
    v16 = *a4;
  memmove(p_dst, v16, v6);
LABEL_15:
  strcpy((char *)p_dst + v6, "/options.plist");
  v17 = *(_DWORD *)(a3 + 40);
  if (v17 != 1)
  {
    if (v17)
      std::__throw_bad_variant_access[abi:ne180100]();
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&__p, a3);
    if ((a5 & 1) == 0 && !v51)
    {
      a1->__r_.__value_.__s.__data_[0] = 0;
      a1[1].__r_.__value_.__s.__data_[0] = 0;
      v18 = (char *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
        goto LABEL_104;
LABEL_107:
      v46 = (void *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (!v46)
        goto LABEL_109;
      goto LABEL_108;
    }
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", (int)v51);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (uint64_t *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      while (1)
      {
        v21 = v20 + 5;
        E5Common::StringUtils::ToLower((unsigned __int8 *)v20 + 40, (uint64_t)&__str);
        v22 = v20 + 2;
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          p_str = &__str;
          switch(*((_BYTE *)&__str.__r_.__value_.__s + 23))
          {
            case 2:
              goto LABEL_29;
            case 3:
              if (LOWORD(__str.__r_.__value_.__l.__data_) != 25977 || __str.__r_.__value_.__s.__data_[2] != 115)
                goto LABEL_63;
              goto LABEL_59;
            case 4:
              if (LODWORD(__str.__r_.__value_.__l.__data_) == 1702195828)
                goto LABEL_59;
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 2)
                goto LABEL_63;
LABEL_29:
              if (LOWORD(__str.__r_.__value_.__l.__data_) == 28526)
                goto LABEL_49;
              goto LABEL_63;
            case 5:
              goto LABEL_44;
            default:
              goto LABEL_63;
          }
        }
        size = __str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_ == 3
          && *(_WORD *)__str.__r_.__value_.__l.__data_ == 25977
          && *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + 2) == 115)
        {
          goto LABEL_59;
        }
        if (__str.__r_.__value_.__l.__size_ != 4)
          goto LABEL_39;
        if (*(_DWORD *)__str.__r_.__value_.__l.__data_ == 1702195828)
        {
LABEL_59:
          if (*((char *)v20 + 39) < 0)
            v22 = (_QWORD *)*v22;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v22);
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], v29);
LABEL_25:

          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_26;
LABEL_72:
          operator delete(__str.__r_.__value_.__l.__data_);
          v20 = (uint64_t *)*v20;
          if (!v20)
            break;
        }
        else
        {
          size = __str.__r_.__value_.__l.__size_;
LABEL_39:
          if (size == 2)
          {
            if (*(_WORD *)__str.__r_.__value_.__l.__data_ == 28526)
              goto LABEL_49;
            size = __str.__r_.__value_.__l.__size_;
          }
          if (size == 5)
          {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_44:
            data = (int)p_str->__r_.__value_.__l.__data_;
            v27 = p_str->__r_.__value_.__s.__data_[4];
            if (data == 1936482662 && v27 == 101)
            {
LABEL_49:
              if (*((char *)v20 + 39) < 0)
                v22 = (_QWORD *)*v22;
              objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v22);
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v19, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], v29);
              goto LABEL_25;
            }
          }
LABEL_63:
          if (E5Common::StringUtils::IsInteger((uint64_t)&__str))
          {
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", std::stoll(&__str, 0, 10));
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            if (*((char *)v20 + 39) < 0)
              v22 = (_QWORD *)*v22;
          }
          else
          {
            if (*((char *)v20 + 63) < 0)
              v21 = (_QWORD *)*v21;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v21);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            if (*((char *)v20 + 39) < 0)
              v22 = (_QWORD *)*v22;
          }
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v22);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "setObject:forKeyedSubscript:", v31, v32);

          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_72;
LABEL_26:
          v20 = (uint64_t *)*v20;
          if (!v20)
            break;
        }
      }
    }
    if ((a5 & 1) != 0)
    {
      objc_msgSend(v19, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("CompileANEProgramForDebugging"));
      objc_msgSend(v19, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("GenerateStaticPerfAnalytics"));
      objc_msgSend(v19, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("GenerateAnalyticsBuffer"));
      objc_msgSend(v19, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("DumpStatusDictionaryToFile"));
    }
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 1);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)MEMORY[0x1E0CB3940];
    E5Common::StringUtils::ToLower(a2, (uint64_t)&__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &__str;
    else
      v35 = (std::string *)__str.__r_.__value_.__r.__words[0];
    objc_msgSend(v34, "stringWithUTF8String:", v35);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "setObject:forKeyedSubscript:", v19, v36);

    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v54 >= 0)
      v37 = &__dst;
    else
      v37 = (__int128 *)__dst;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v37);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v33, "writeToFile:atomically:", v38, 1);

    if ((v39 & 1) == 0)
    {
      std::operator+<char>();
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &__str);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (SHIBYTE(v54) < 0)
    {
      std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = __dst;
      a1->__r_.__value_.__r.__words[2] = v54;
    }
    a1[1].__r_.__value_.__s.__data_[0] = 1;

    v18 = (char *)__p.__r_.__value_.__r.__words[2];
    if (!__p.__r_.__value_.__r.__words[2])
      goto LABEL_107;
    while (1)
    {
LABEL_104:
      v47 = *(char **)v18;
      if (v18[63] < 0)
      {
        operator delete(*((void **)v18 + 5));
        if ((v18[39] & 0x80000000) == 0)
          goto LABEL_103;
LABEL_106:
        operator delete(*((void **)v18 + 2));
        operator delete(v18);
        v18 = v47;
        if (!v47)
          goto LABEL_107;
      }
      else
      {
        if (v18[39] < 0)
          goto LABEL_106;
LABEL_103:
        operator delete(v18);
        v18 = v47;
        if (!v47)
          goto LABEL_107;
      }
    }
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  if (v54 >= 0)
    v42 = &__dst;
  else
    v42 = (__int128 *)__dst;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v45 = objc_msgSend(v44, "copyItemAtPath:toPath:error:", v41, v43, 0);

  if ((v45 & 1) == 0)
  {
    std::operator+<char>();
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, &__str);
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (SHIBYTE(v54) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = __dst;
    a1->__r_.__value_.__r.__words[2] = v54;
  }
  a1[1].__r_.__value_.__s.__data_[0] = 1;

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v46 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_108:
    operator delete(v46);
  }
LABEL_109:
  if (SHIBYTE(v54) < 0)
    operator delete((void *)__dst);
}

void sub_19115319C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  void *v30;

  if (a23 < 0)
    operator delete(__p);

  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  if ((a29 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t std::variant<std::unordered_map<std::string,std::string>,std::string>::~variant[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD16C8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void Espresso::AOT::MILCompilerForANE::CompileUsingANEF(uint64_t a1, std::string::size_type a2, std::string::size_type a3)
{
  std::string::size_type v6;
  void *v7;
  uint64_t v8;
  E5RT::E5CompilerPriv *Compiler;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v12;
  std::string *v13;
  std::__fs::filesystem::path *v14;
  const char *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  uint64_t Options;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  const std::string::value_type **v25;
  int v26;
  std::string::size_type v27;
  uint64_t v28;
  std::string *v29;
  std::__fs::filesystem::path::__string_view v30;
  std::string *v31;
  std::basic_string_view<_CharT, _Traits>::size_type v32;
  std::basic_string_view<_CharT, _Traits>::size_type v33;
  void *v34;
  int v35;
  std::string *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  qos_class_t v40;
  char v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  const char *v46;
  size_t v47;
  std::string::size_type v48;
  int v49;
  std::string::size_type v50;
  uint64_t v51;
  std::string::size_type v52;
  std::string::size_type v53;
  std::runtime_error *exception;
  __CFString *v55;
  std::runtime_error *v56;
  std::string *v57;
  __int128 v58;
  std::runtime_error *v59;
  std::runtime_error *v60;
  std::string *v61;
  __int128 v62;
  void *v63;
  void *v64;
  void *v65;
  int v66;
  void *v67;
  void *v68;
  E5RT::E5Compiler *v69;
  id v70;
  id v71;
  std::__fs::filesystem::path v72;
  _DWORD v73[2];
  std::string v74;
  std::string v75;
  char v76;
  std::__fs::filesystem::path v77;
  std::__fs::filesystem::path __base;
  std::string __p;
  uint64_t v80;
  _BYTE v81[384];
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  int v85;
  int v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (!Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "MILCompilerForANE::CompileUsingANEF() only supported with on-device compilation.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(MEMORY[0x1E0CFDF38], "sharedConnection");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(char *)(a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "lastPathComponent");
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringByDeletingLastPathComponent");
  v8 = objc_claimAutoreleasedReturnValue();

  v64 = (void *)v8;
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v8);
  v69 = (E5RT::E5Compiler *)objc_claimAutoreleasedReturnValue();
  Compiler = (E5RT::E5CompilerPriv *)E5RT::E5Compiler::GetCompiler(v69);
  if (*(void (***)(E5RT::E5CompilerPriv *__hidden))Compiler != off_1E2D364F8)
    __cxa_bad_cast();
  E5RT::E5CompilerPriv::getBundleRootPath(Compiler, &__p);
  memset(&__base, 0, sizeof(__base));
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, p_p, (std::string *)((char *)p_p + size));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  v12 = *(unsigned __int8 *)(a3 + 23);
  if ((v12 & 0x80u) == 0)
    v13 = (std::string *)a3;
  else
    v13 = *(std::string **)a3;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a3 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&__p, v13, (std::string *)((char *)v13 + v12));
  std::__fs::filesystem::path::lexically_relative(&v77, (const std::__fs::filesystem::path *)&__p, &__base);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v77.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v77;
  else
    v14 = (std::__fs::filesystem::path *)v77.__pn_.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v14);
  v70 = (id)objc_claimAutoreleasedReturnValue();
  Espresso::espresso_os_log_subsystem(0, v15);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v66 = *(char *)(a2 + 23);
    v48 = *(_QWORD *)a2;
    v49 = *(char *)(a3 + 23);
    v50 = *(_QWORD *)a3;
    v51 = objc_msgSend(objc_retainAutorelease(v70), "UTF8String");
    if (v49 >= 0)
      v52 = a3;
    else
      v52 = v50;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
    if (v66 >= 0)
      v53 = a2;
    else
      v53 = v48;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v53;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v52;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
    v80 = v51;
    _os_log_debug_impl(&dword_190DAF000, v16, OS_LOG_TYPE_DEBUG, "MILCompilerForANE: CompileUsingANEF(): milFullPath = %s, cacheUrlIdentifierFile = %s, segmentKey = %s\n", (uint8_t *)&__p, 0x20u);
  }

  v17 = (void *)MEMORY[0x1E0C99E98];
  v18 = (void *)MEMORY[0x1E0CB3940];
  Options = Espresso::AOT::AbstractMILCompiler::GetOptions((Espresso::AOT::AbstractMILCompiler *)a1);
  if (*(char *)(Options + 23) >= 0)
    v20 = Options;
  else
    v20 = *(_QWORD *)Options;
  objc_msgSend(v18, "stringWithUTF8String:", v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "fileURLWithPath:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v65 = v22;
  objc_msgSend(v22, "URLByDeletingLastPathComponent");
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CFDF68], "modelAtURLWithSourceURL:sourceURL:key:cacheURLIdentifier:", v69, v63, v70, 0);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "setObject:forKeyedSubscript:", *MEMORY[0x1E0CFE048], *MEMORY[0x1E0CFE090]);
  objc_msgSend(v24, "setObject:forKeyedSubscript:", v68, *MEMORY[0x1E0CFE098]);
  objc_msgSend(v24, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CFE008]);
  objc_msgSend(v24, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CFDFC8]);
  v83 = 0u;
  v84 = 0u;
  v85 = 1065353216;
  v86 = 0;
  v25 = (const std::string::value_type **)(a1 + 320);
  if (*(char *)(a1 + 343) < 0)
  {
    v27 = *(_QWORD *)(a1 + 328);
    if (v27)
    {
      std::string::__init_copy_ctor_external(&__p, *v25, v27);
      v26 = v86;
      if (v86 == -1)
      {
LABEL_33:
        v83 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)&v84 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        v86 = 1;
        goto LABEL_36;
      }
LABEL_32:
      ((void (*)(std::string *, __int128 *))off_1E2DD16C8[v26])(&v75, &v83);
      goto LABEL_33;
    }
  }
  else if (*(_BYTE *)(a1 + 343))
  {
    v26 = 0;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v25;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 336);
    goto LABEL_32;
  }
  if (&v83 != (__int128 *)(a1 + 344))
  {
    v85 = *(_DWORD *)(a1 + 376);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(&v83, *(uint64_t **)(a1 + 360), 0);
  }
LABEL_36:
  memset(&v72, 0, sizeof(v72));
  v28 = *(unsigned __int8 *)(a2 + 23);
  if ((v28 & 0x80u) == 0)
    v29 = (std::string *)a2;
  else
    v29 = *(std::string **)a2;
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(a2 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&v72.__pn_, v29, (std::string *)((char *)v29 + v28));
  v30 = std::__fs::filesystem::path::__parent_path(&v72);
  if (v30.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v30.__size_ >= 0x17)
  {
    v32 = (v30.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30.__size_ | 7) != 0x17)
      v32 = v30.__size_ | 7;
    v33 = v32 + 1;
    v31 = (std::string *)operator new(v32 + 1);
    __p.__r_.__value_.__l.__size_ = v30.__size_;
    __p.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
    goto LABEL_48;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v30.__size_;
  v31 = &__p;
  if (v30.__size_)
LABEL_48:
    memmove(v31, v30.__data_, v30.__size_);
  v31->__r_.__value_.__s.__data_[v30.__size_] = 0;
  v34 = (void *)__p.__r_.__value_.__r.__words[0];
  v73[0] = __p.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v73 + 3) = *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3);
  v35 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v74, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    LODWORD(v74.__r_.__value_.__r.__words[2]) = v73[0];
    *(_DWORD *)((char *)&v74.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v73 + 3);
    *((_BYTE *)&v74.__r_.__value_.__s + 23) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v74.__r_.__value_.__l.__data_);
    if ((v35 & 0x80000000) == 0)
    {
LABEL_54:
      if ((SHIBYTE(v72.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_55;
      goto LABEL_59;
    }
  }
  else if ((v35 & 0x80000000) == 0)
  {
    goto LABEL_54;
  }
  operator delete(v34);
  if ((SHIBYTE(v72.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    if (!v76)
      goto LABEL_64;
LABEL_60:
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v75;
    else
      v36 = (std::string *)v75.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "lastPathComponent");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setObject:forKeyedSubscript:", v38, *MEMORY[0x1E0CFDFD0]);

    goto LABEL_64;
  }
LABEL_59:
  operator delete(v72.__pn_.__r_.__value_.__l.__data_);
  if (v76)
    goto LABEL_60;
LABEL_64:
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  if (proc_pidoriginatorinfo() == 4 && LODWORD(__p.__r_.__value_.__l.__data_))
  {
    v39 = 9;
  }
  else
  {
    v40 = qos_class_self();
    if (v40)
      v39 = v40;
    else
      v39 = 21;
  }
  v71 = 0;
  v41 = objc_msgSend(v67, "compileModel:options:qos:error:", v23, v24, v39, &v71);
  v42 = v71;
  v43 = v42;
  if ((v41 & 1) == 0)
  {
    if (v42)
    {
      objc_msgSend(v42, "localizedDescription");
      v55 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v55 = &stru_1E2DD80E0;
    }
    v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v74, (char *)-[__CFString UTF8String](objc_retainAutorelease(v55), "UTF8String"));
    v61 = std::string::insert(&v74, 0, "MILCompilerForANE error: failed to compile ANE model using ANEF. Error=");
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v60, &__p);
    __cxa_throw(v60, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v23, "getCacheURLIdentifier");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v44)
  {
    v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "MILCompilerForANE error: ANEF returned cacheURLIdentifier as nil.");
    __cxa_throw(v56, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::ofstream::basic_ofstream(&__p);
  if (*(_DWORD *)&v81[*(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)])
  {
    std::operator+<char>();
    v57 = std::string::append(&v72.__pn_, " for writing.");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v72.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__pn_.__r_.__value_.__l.__data_);
    v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, &v74);
    __cxa_throw(v59, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v45 = objc_retainAutorelease(v44);
  v46 = (const char *)objc_msgSend(v45, "UTF8String");
  v47 = strlen(v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v46, v47);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&__p + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)&v81[*(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)] | 4);
  __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x19401C8BC](&__p.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](&v82);

  if (v76 && SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (v86 != -1)
    ((void (*)(std::string *, __int128 *))off_1E2DD16C8[v86])(&__p, &v83);

  if (SHIBYTE(v77.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v77.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_82;
LABEL_84:
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    goto LABEL_82;
  }
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_84;
LABEL_82:

}

void sub_191153CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;
  void *v56;
  int v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;

  if (a55 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v57 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v57)
  {
LABEL_8:

    if (a37 && a36 < 0)
      operator delete(a31);
    std::variant<std::unordered_map<std::string,std::string>,std::string>::~variant[abi:ne180100](v61 - 160);

    if (a43 < 0)
      operator delete(a38);
    if (a49 < 0)
      operator delete(a44);

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v58);
  goto LABEL_8;
}

void Espresso::AOT::MILCompilerForANE::CompileUsingANEC(uint64_t a1, std::string *a2, uint64_t *a3)
{
  uint64_t *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t *v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFAllocator *v14;
  __CFDictionary *Mutable;
  __CFArray *v16;
  __CFDictionary *v17;
  __CFDictionary *v18;
  uint64_t v19;
  void *v20;
  const std::string::value_type **v21;
  int v22;
  std::string::size_type v23;
  std::string::size_type size;
  std::string *v25;
  std::__fs::filesystem::path::__string_view v26;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v28;
  std::basic_string_view<_CharT, _Traits>::size_type v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  std::string *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  std::runtime_error *exception;
  void *v39;
  void *v40;
  void *v41;
  void *value;
  __int128 __dst;
  unint64_t v44;
  uint64_t v45;
  std::__fs::filesystem::path v46;
  _DWORD v47[2];
  std::string v48;
  std::string v49;
  char v50;
  __int128 v51;
  __int128 v52;
  int v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = (uint64_t *)a2;
  else
    v6 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "stringByDeletingLastPathComponent");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringByAppendingString:", CFSTR("/"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v40, "lastPathComponent");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a3 + 23) >= 0)
    v10 = a3;
  else
    v10 = (uint64_t *)*a3;
  v39 = v9;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByDeletingLastPathComponent");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringByAppendingString:", CFSTR("/"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v41 = v13;
  objc_msgSend(v11, "lastPathComponent");
  value = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, CFSTR("NetworkPlistName"), v9);
  CFDictionaryAddValue(Mutable, CFSTR("NetworkPlistPath"), v8);
  v16 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(v16, Mutable);
  CFRelease(Mutable);
  v17 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(v17, CFSTR("InputNetworks"), v16);
  CFRelease(v16);
  CFDictionaryAddValue(v17, CFSTR("OutputFileName"), value);
  CFDictionaryAddValue(v17, CFSTR("OutputFilePath"), v13);
  v18 = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v19 = a1 + 296;
  if (*(char *)(a1 + 319) < 0)
    v19 = *(_QWORD *)(a1 + 296);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  CFDictionaryAddValue(v18, CFSTR("TargetArchitecture"), v20);
  v51 = 0u;
  v52 = 0u;
  v53 = 1065353216;
  v54 = 0;
  v21 = (const std::string::value_type **)(a1 + 320);
  if (*(char *)(a1 + 343) < 0)
  {
    v23 = *(_QWORD *)(a1 + 328);
    if (v23)
    {
      std::string::__init_copy_ctor_external(&v49, *v21, v23);
      v22 = v54;
      if (v54 == -1)
      {
LABEL_15:
        v51 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
        *(_QWORD *)&v52 = *((_QWORD *)&v49.__r_.__value_.__l + 2);
        v54 = 1;
        goto LABEL_18;
      }
LABEL_14:
      ((void (*)(__int128 *, __int128 *))off_1E2DD16C8[v22])(&__dst, &v51);
      goto LABEL_15;
    }
  }
  else if (*(_BYTE *)(a1 + 343))
  {
    v22 = 0;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)v21;
    v49.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 336);
    goto LABEL_14;
  }
  if (&v51 != (__int128 *)(a1 + 344))
  {
    v53 = *(_DWORD *)(a1 + 376);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(&v51, *(uint64_t **)(a1 + 360), 0);
  }
LABEL_18:
  memset(&v46, 0, sizeof(v46));
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v25 = a2;
  else
    v25 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&v46.__pn_, v25, (std::string *)((char *)v25 + size));
  v26 = std::__fs::filesystem::path::__parent_path(&v46);
  if (v26.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v26.__size_ >= 0x17)
  {
    v28 = (v26.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26.__size_ | 7) != 0x17)
      v28 = v26.__size_ | 7;
    v29 = v28 + 1;
    p_dst = (__int128 *)operator new(v28 + 1);
    *((_QWORD *)&__dst + 1) = v26.__size_;
    v44 = v29 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_30;
  }
  HIBYTE(v44) = v26.__size_;
  p_dst = &__dst;
  if (v26.__size_)
LABEL_30:
    memmove(p_dst, v26.__data_, v26.__size_);
  *((_BYTE *)p_dst + v26.__size_) = 0;
  v30 = (void *)__dst;
  v47[0] = v44;
  *(_DWORD *)((char *)v47 + 3) = *(_DWORD *)((char *)&v44 + 3);
  v31 = SHIBYTE(v44);
  if (SHIBYTE(v44) < 0)
  {
    v32 = v41;
    std::string::__init_copy_ctor_external(&v48, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = __dst;
    LODWORD(v48.__r_.__value_.__r.__words[2]) = v47[0];
    *(_DWORD *)((char *)&v48.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v47 + 3);
    *((_BYTE *)&v48.__r_.__value_.__s + 23) = HIBYTE(v44);
    v32 = v41;
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_36:
      if ((SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_41;
    }
  }
  else if ((v31 & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v30);
  if ((SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_37:
    v33 = v40;
    if (!v50)
      goto LABEL_46;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v46.__pn_.__r_.__value_.__l.__data_);
  v33 = v40;
  if (!v50)
    goto LABEL_46;
LABEL_42:
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v49;
  else
    v34 = (std::string *)v49.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  CFDictionaryAddValue(v18, CFSTR("OptionsFilePath"), v35);

LABEL_46:
  *(_QWORD *)&__dst = 0;
  *((_QWORD *)&__dst + 1) = &__dst;
  v44 = 0x2020000000;
  v45 = 0;
  v36 = ANECCompile();
  if ((_DWORD)v36)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("ANECCompile() failed: status=%d, statusdict=%@"), v36, *(_QWORD *)(*((_QWORD *)&__dst + 1) + 24));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    CFRelease(*(CFTypeRef *)(*((_QWORD *)&__dst + 1) + 24));
    CFRelease(v17);
    CFRelease(v18);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const char *)objc_msgSend(objc_retainAutorelease(v37), "UTF8String"));
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRelease(v17);
  CFRelease(v18);
  _Block_object_dispose(&__dst, 8);
  if (v50 && SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (v54 != -1)
    ((void (*)(std::string *, __int128 *))off_1E2DD16C8[v54])(&v49, &v51);

}

void sub_1911545F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;

  __cxa_free_exception(v38);

  _Block_object_dispose(&a22, 8);
  if (*(_BYTE *)(v42 - 152))
  {
    if (*(char *)(v42 - 153) < 0)
      operator delete(*(void **)(v42 - 176));
  }
  std::variant<std::unordered_map<std::string,std::string>,std::string>::~variant[abi:ne180100](v42 - 144);

  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForANE::GetOutputPaths(Espresso::AOT::MILCompilerForANE *this@<X0>, _QWORD *a2@<X8>)
{
  std::string __p;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 415) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 49), *((_QWORD *)this + 50));
  else
    __p = *(std::string *)((char *)this + 392);
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_191154820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForANE::~MILCompilerForANE(void **this)
{
  Espresso::AOT::MILCompilerForANE::~MILCompilerForANE(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;
  void **v3;
  void *v4;

  *this = &off_1E2DA0520;
  if (*((char *)this + 415) < 0)
    operator delete(this[49]);
  Espresso::AOT::MILCompilerForANE::Options::~Options((Espresso::AOT::MILCompilerForANE::Options *)(this + 33));
  *this = off_1E2DA0650;
  v2 = (void **)this[29];
  if (v2)
  {
    v3 = (void **)this[30];
    v4 = this[29];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = this[29];
    }
    this[30] = v2;
    operator delete(v4);
  }
  if (*((char *)this + 231) < 0)
  {
    operator delete(this[26]);
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_16:
    operator delete(this[23]);
    Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
    return;
  }
  if (*((char *)this + 207) < 0)
    goto LABEL_16;
LABEL_13:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
}

void Espresso::AOT::MILCompilerForANE::Options::~Options(Espresso::AOT::MILCompilerForANE::Options *this)
{
  void **v2;
  void *v3;
  void **v4;

  v2 = (void **)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_13:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_13;
      }
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
  if (*((char *)this + 79) < 0)
  {
    operator delete(*((void **)this + 7));
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)this + 23) & 0x80000000) == 0)
        return;
LABEL_16:
      operator delete(*(void **)this);
      return;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0)
    goto LABEL_16;
}

BOOL `anonymous namespace'::ValidateFuncIOAlignment(MIL::IRFunction const&)::$_0::operator()(uint64_t a1, MIL::IRValueType *a2, uint64_t a3)
{
  const MIL::IRValueType *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  MIL::IRValue *Attribute;
  uint64_t Data;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  MIL::IRMemoryLayoutValueType *v15;
  MIL::IRTensorBufferValueType *v16;
  int DataType;
  uint64_t v18;
  _QWORD *Shape;
  _BOOL8 v20;
  uint64_t Strides;
  uint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  MIL::IRConstantProperty *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  MIL::IRValue *v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  __int128 *p_p;
  __int128 __p;
  char *v46;
  uint64_t v47;
  unint64_t v48;

  if (!E5Common::Utils::IsTensor((uint64_t)a2))
  {
    if (E5Common::Utils::IsTensorBuffer(a2, v6))
    {
      v15 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
      v16 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v15);
      DataType = MIL::IRTensorBufferValueType::GetDataType(v16);
      v18 = Espresso::AOT::IRDataTypeToByteSize(DataType);
      Shape = (_QWORD *)MIL::IRTensorBufferValueType::GetShape(v16);
      if (Shape[1] - *Shape >= 0x10uLL)
      {
        Strides = MIL::IRTensorBufferValueType::GetStrides(v16);
        v46 = 0;
        __p = 0uLL;
        v23 = *(const void **)Strides;
        v22 = *(_QWORD *)(Strides + 8);
        v24 = v22 - *(_QWORD *)Strides;
        if (v22 == *(_QWORD *)Strides)
          goto LABEL_36;
        if (v24 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v25 = (char *)operator new(v22 - *(_QWORD *)Strides);
        *(_QWORD *)&__p = v25;
        v46 = &v25[8 * (v24 >> 3)];
        memcpy(v25, v23, v24);
        *((_QWORD *)&__p + 1) = v46;
        if ((unint64_t)(8 * (v24 >> 3)) <= 8)
LABEL_36:
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v26 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(*(MIL::IRProperty **)&v25[8 * (v24 >> 3) - 16]);
        if (v26)
          v27 = 1;
        else
          v27 = *(_QWORD *)a1 == 0;
        v20 = !v27;
        if (v26)
        {
          v28 = MIL::IRConstantProperty::GetInt64ScalarValue(v26) * v18;
          v20 = (v28 & 0x3F) == 0 && v28 != 0;
        }
        if ((_QWORD)__p)
          operator delete((void *)__p);
        return v20;
      }
    }
    return 1;
  }
  v7 = MIL::IRValueType::AsTensorType(a2);
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  if (v8[1] - *v8 < 0x10uLL)
    return 1;
  v9 = v8;
  HIBYTE(v46) = 10;
  strcpy((char *)&__p, "alignments");
  Attribute = (MIL::IRValue *)MIL::IRTensorValueType::GetAttribute();
  MIL::IRValue::AsTensor(Attribute);
  Data = MIL::IRTensorValue::GetDataView<unsigned long long>();
  v13 = v12;
  v47 = Data;
  v48 = v12;
  v14 = v9[1];
  if (v12 != (v14 - *v9) >> 3)
    return 0;
  v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 - 8) + 16))(*(_QWORD *)(v14 - 8));
  if (!(*(_QWORD *)a1 | v30))
    return 0;
  v32 = v30;
  if (*(_QWORD *)a1)
  {
    if (!v30)
      return 1;
  }
  v33 = *(_QWORD *)(Data + 8 * v13 - 8);
  v34 = **(MIL::IRValue ***)(a1 + 16);
  if (v34)
  {
    E5Common::Utils::MILDictToCpp<std::string,BOOL>(v34, (uint64_t)&__p);
    p_p = &__p;
    {
      if (v48 >= 3)
      {
        v35 = *(_QWORD *)MIL::Util::Span<unsigned long long const,18446744073709551615ul>::At(&v47, v48 - 3);
        v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
LABEL_35:
        v20 = v37;
        std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&__p);
        return v20;
      }
      if (v48 == 2 && *(_QWORD *)MIL::Util::Span<unsigned long long const,18446744073709551615ul>::At(&v47, 0) == 1)
      {
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
        goto LABEL_35;
      }
    }
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&__p);
    v13 = v48;
  }
  if (v13 < 2)
    v39 = 1;
  else
    v39 = *(_QWORD *)MIL::Util::Span<unsigned long long const,18446744073709551615ul>::At(&v47, v13 - 2);
  v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32);
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);
  v42 = v39 + (v33 + Espresso::AOT::IRDataTypeToByteSize(v41) - 1) / v33 * v33 * v40 - 1;
  return ((v42 - (v42 % v39)) & 0x3FLL) == 0 && v42 != v42 % v39;
}

void sub_191154CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191154CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_191154D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL `anonymous namespace'::ValidateFuncIOAlignment(MIL::IRFunction const&)::$_0::operator() const(MIL::IRValueType const*,std::string const&)::{lambda(std::string const&)#1}::operator()(_QWORD **a1, uint64_t a2)
{
  unsigned __int8 *v4;
  _BOOL8 v5;
  std::string::size_type v7;
  size_t v8;
  int v9;
  const void *v10;
  size_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  void *__dst[2];
  unint64_t v17;

  if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(*a1, a2))
  {
    v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(*a1, (unsigned __int8 *)a2);
    if (!v4)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return v4[40] != 0;
  }
  v7 = std::string::rfind((const std::string *)a2, 95, 0xFFFFFFFFFFFFFFFFLL);
  if (v7 == -1)
    return 0;
  v8 = *(unsigned __int8 *)(a2 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0)
    v10 = (const void *)a2;
  else
    v10 = *(const void **)a2;
  if (v8 >= v7)
    v11 = v7;
  else
    v11 = v8;
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    v12 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v11;
    v17 = v14 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_22;
  }
  HIBYTE(v17) = v11;
  v12 = __dst;
  if (v11)
LABEL_22:
    memmove(v12, v10, v11);
  *((_BYTE *)v12 + v11) = 0;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(*a1, (uint64_t)__dst))
  {
    v5 = 0;
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      return v5;
LABEL_28:
    operator delete(__dst[0]);
    return v5;
  }
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(*a1, (unsigned __int8 *)__dst);
  if (!v15)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = v15[40] != 0;
  if (SHIBYTE(v17) < 0)
    goto LABEL_28;
  return v5;
}

void sub_191154EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Util::Span<unsigned long long const,18446744073709551615ul>::At(_QWORD *a1, unint64_t a2)
{
  std::runtime_error *exception;

  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E2D352F0, MEMORY[0x1E0DE42B0]);
  }
  return *a1 + 8 * a2;
}

void sub_191154F30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::ValidatePlaneStride(_QWORD *a1, int a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a1[1] - *a1 < 0x18uLL)
    return 0;
  v7 = (a3 + Espresso::AOT::IRDataTypeToByteSize(a2) - 1) / a3 * a3;
  v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(a1[1] - 8));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  v10 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(a1[1] - 16));
  v11 = a4 + v9 * v7 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10) - 1;
  return ((v11 - (v11 % a4)) & 0x3FLL) == 0 && v11 != v11 % a4;
}

BOOL `anonymous namespace'::Validate2DTensorPlaneStride(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::runtime_error *exception;

  if (a1[1] - *a1 != 16)
    return 0;
  v5 = Espresso::AOT::IRDataTypeToByteSize(a3);
  v6 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(a1[1] - 8));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
  v8 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(a1[1] - 16));
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  v10 = a2[1];
  if (!v10)
    goto LABEL_13;
  if (*(_QWORD *)*a2 != 1)
    return 0;
  if (v10 <= 1)
  {
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E2D352F0, MEMORY[0x1E0DE42B0]);
  }
  if (*(_QWORD *)(*a2 + 8) != 1)
    return 0;
  v11 = v7 * v5 * v9;
  return (v11 & 0x3F) == 0 && v11 != 0;
}

void sub_19115511C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191155130(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_13unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESE_NS_4hashISE_EENS_8equal_toISE_EENSC_INS_4pairIKSE_SE_EEEEEESE_EEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSN_SE_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  void **v5;

  v3 = *(void ***)(a2 + 16);
  if (v3)
  {
    do
    {
      v5 = (void **)*v3;
      if (*((char *)v3 + 63) < 0)
      {
        operator delete(v3[5]);
        if (*((char *)v3 + 39) < 0)
LABEL_9:
          operator delete(v3[2]);
      }
      else if (*((char *)v3 + 39) < 0)
      {
        goto LABEL_9;
      }
      operator delete(v3);
      v3 = v5;
    }
    while (v5);
  }
  v4 = *(void **)a2;
  *(_QWORD *)a2 = 0;
  if (v4)
    operator delete(v4);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_13unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESE_NS_4hashISE_EENS_8equal_toISE_EENSC_INS_4pairIKSE_SE_EEEEEESE_EEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSN_SE_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void OUTLINED_FUNCTION_0_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void Espresso::AOT::MILCompilerForANE::Run(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_6(&dword_190DAF000, a1, a3, "Invoking ANEC using ANEF path", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0_6(&dword_190DAF000, a1, a3, "Invoking ANEC directly", a5, a6, a7, a8, 0);
}

void Espresso::AOT::MILCompilerForANE::Run(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t *v3;
  int v4;
  int v5;
  uint64_t *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = *(_DWORD *)(a2 + 4);
  v5 = 136315394;
  v6 = v3;
  v7 = 1024;
  v8 = v4;
  _os_log_debug_impl(&dword_190DAF000, log, OS_LOG_TYPE_DEBUG, "MILCompilerForANE: Run(): Created directory @ %s. Permissions (octal) = 0%o", (uint8_t *)&v5, 0x12u);
}

void Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5(void **this)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void **v10;

  if ((*((char *)this + 327) & 0x80000000) == 0)
  {
    if ((*((char *)this + 303) & 0x80000000) == 0)
      goto LABEL_3;
    goto LABEL_6;
  }
  operator delete(this[38]);
  if (*((char *)this + 303) < 0)
  {
LABEL_6:
    operator delete(this[35]);
    v2 = (void **)this[32];
    if (!v2)
      goto LABEL_7;
    while (1)
    {
LABEL_26:
      v10 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_30:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_30;
      }
      operator delete(v2);
      v2 = v10;
      if (!v10)
        goto LABEL_7;
    }
  }
LABEL_3:
  v2 = (void **)this[32];
  if (v2)
    goto LABEL_26;
LABEL_7:
  v3 = this[30];
  this[30] = 0;
  if (v3)
    operator delete(v3);
  if ((*((char *)this + 239) & 0x80000000) == 0)
  {
    v4 = this[23];
    if (!v4)
      goto LABEL_12;
    goto LABEL_11;
  }
  operator delete(this[27]);
  v4 = this[23];
  if (v4)
  {
LABEL_11:
    this[24] = v4;
    operator delete(v4);
  }
LABEL_12:
  v5 = this[20];
  if (v5)
  {
    this[21] = v5;
    operator delete(v5);
  }
  v6 = this[17];
  if (v6)
  {
    this[18] = v6;
    operator delete(v6);
  }
  if (*((char *)this + 135) < 0)
  {
    operator delete(this[14]);
    if ((*((char *)this + 111) & 0x80000000) == 0)
    {
LABEL_18:
      v7 = this[8];
      if (v7)
        goto LABEL_19;
      goto LABEL_20;
    }
  }
  else if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(this[11]);
  v7 = this[8];
  if (v7)
  {
    do
    {
LABEL_19:
      v8 = (_QWORD *)*v7;
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v7 + 2));
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
LABEL_20:
  v9 = this[6];
  this[6] = 0;
  if (v9)
    operator delete(v9);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_37:
    operator delete(*this);
    return;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_37;
}

Espresso::AOT::CompilerOptionsForE5 *Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5(Espresso::AOT::CompilerOptionsForE5 *this, const Espresso::AOT::AOTCompilerOptions *a2)
{
  char *v4;
  std::string *v5;
  char *v6;
  char *v7;
  const std::string *Input;
  const std::string *Output;
  uint64_t *v10;
  uint64_t *v11;
  std::string::size_type size;
  std::string *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  void *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  std::string::size_type v41;
  uint64_t *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  void **v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string::size_type v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  int v53;
  int v54;
  std::logic_error *exception;
  char v56;
  char v57;
  char v58;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  void **v64;
  void **v65;
  uint64_t v66;
  void *v67;
  uint64_t *v68;
  uint64_t *v69;
  void *v70;
  uint64_t *v71;
  uint64_t *v72;
  void *v73;
  uint64_t *v74;
  uint64_t *v75;
  int v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  std::string *v102;
  _DWORD *v103;
  char *v104;
  std::string *v105;
  char *v106;
  void **v108;
  void **v109;
  uint64_t v110;
  void *v111;
  void **v112;
  void **v113;
  uint64_t v114;
  void *v115;
  void **v116;
  void **v117;
  uint64_t v118;
  void *v119;
  std::string *v121;
  std::string *v122;
  _BYTE *v123;
  std::string *v124;
  std::string *v125;
  char *v126;
  char *v127;
  std::string *v128;
  char *v129;
  std::string __p[2];
  std::string v131;
  std::string v132;
  std::string __str;
  _QWORD v134[2];
  void **v135;
  __int128 *v136;

  *((_OWORD *)this + 3) = 0u;
  v4 = (char *)this + 48;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v5 = (std::string *)((char *)this + 24);
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v128 = (std::string *)((char *)this + 88);
  *(_OWORD *)((char *)this + 136) = 0u;
  v6 = (char *)this + 136;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  v126 = (char *)this + 184;
  v127 = (char *)this + 160;
  *(_OWORD *)((char *)this + 216) = 0u;
  v125 = (std::string *)((char *)this + 216);
  v129 = (char *)this + 240;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 193) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 33) = 0;
  *((_DWORD *)this + 68) = 1065353216;
  v124 = (std::string *)((char *)this + 280);
  *((_BYTE *)this + 303) = 2;
  strcpy((char *)this + 280, "no");
  v122 = (std::string *)((char *)this + 304);
  strcpy((char *)this + 304, "classic_cpu");
  *(_DWORD *)((char *)this + 327) = 11;
  *((_BYTE *)this + 331) = 1;
  *((_DWORD *)this + 83) = 0;
  *((_BYTE *)this + 336) = 1;
  v7 = (char *)this + 337;
  *(_DWORD *)((char *)this + 337) = 0;
  *((_DWORD *)this + 85) = 0;
  Input = (const std::string *)Espresso::AOT::AOTCompilerOptions::GetInput(a2);
  std::string::operator=((std::string *)this, Input);
  Output = (const std::string *)Espresso::AOT::AOTCompilerOptions::GetOutput(a2);
  std::string::operator=(v5, Output);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&__str, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)a2, (uint64_t)&__str, (uint64_t)v134);
  v123 = v7;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__str, "platforms");
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  v11 = v10;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v11)
      goto LABEL_26;
  }
  else if (!v10)
  {
    goto LABEL_26;
  }
  if (*((_DWORD *)v11 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (*((char *)v11 + 63) < 0)
    std::string::__init_copy_ctor_external(&v131, (const std::string::value_type *)v11[5], v11[6]);
  else
    v131 = *(std::string *)(v11 + 5);
  size = HIBYTE(v131.__r_.__value_.__r.__words[2]);
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v131.__r_.__value_.__l.__size_;
  if (size != 1)
    goto LABEL_20;
  v13 = &v131;
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v131.__r_.__value_.__r.__words[0];
  if (v13->__r_.__value_.__s.__data_[0] == 42)
  {
    v14 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)v10);
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v14 + 88))(&__str);
    std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__move_assign((uint64_t)v4, (uint64_t *)&__str);
    v15 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
    if (__str.__r_.__value_.__r.__words[2])
    {
      do
      {
        v16 = (_QWORD *)*v15;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v15 + 2));
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
  }
  else
  {
LABEL_20:
    v17 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)v10);
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v17 + 56))(&__str, v17, &v131);
    std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__move_assign((uint64_t)v4, (uint64_t *)&__str);
    v18 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
    if (__str.__r_.__value_.__r.__words[2])
    {
      do
      {
        v19 = (_QWORD *)*v18;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v18 + 2));
        operator delete(v18);
        v18 = v19;
      }
      while (v19);
    }
  }
  v20 = (void *)__str.__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[0] = 0;
  if (v20)
    operator delete(v20);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
LABEL_26:
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__str, "platform-families");
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  v22 = v21;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v22)
      goto LABEL_42;
  }
  else if (!v21)
  {
    goto LABEL_42;
  }
  if (*((_DWORD *)v22 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (*((char *)v22 + 63) < 0)
    std::string::__init_copy_ctor_external(&v131, (const std::string::value_type *)v22[5], v22[6]);
  else
    v131 = *(std::string *)(v22 + 5);
  v23 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)v21);
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v23 + 64))(&__str, v23, &v131);
  v24 = (uint64_t *)__str.__r_.__value_.__r.__words[2];
  if (__str.__r_.__value_.__r.__words[2])
  {
    do
    {
      std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>((uint64_t)v4, (uint64_t)(v24 + 2), (_OWORD *)v24 + 1);
      v24 = (uint64_t *)*v24;
    }
    while (v24);
    v25 = (_QWORD *)__str.__r_.__value_.__r.__words[2];
    if (__str.__r_.__value_.__r.__words[2])
    {
      do
      {
        v26 = (_QWORD *)*v25;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v25 + 2));
        operator delete(v25);
        v25 = v26;
      }
      while (v26);
    }
  }
  v27 = (void *)__str.__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[0] = 0;
  if (v27)
    operator delete(v27);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
LABEL_42:
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__str, "cpu-target-os");
  v28 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  v29 = v28;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v29)
      goto LABEL_52;
  }
  else if (!v28)
  {
    goto LABEL_52;
  }
  if (*((_DWORD *)v29 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (*((char *)v29 + 63) < 0)
    std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v29[5], v29[6]);
  else
    __str = *(std::string *)(v29 + 5);
  std::string::operator=(v128, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_52:
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__str, "cpu-target-arch");
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v31)
      goto LABEL_62;
  }
  else if (!v30)
  {
    goto LABEL_62;
  }
  if (*((_DWORD *)v31 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (*((char *)v31 + 63) < 0)
    std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v31[5], v31[6]);
  else
    __str = *(std::string *)(v31 + 5);
  std::string::operator=((std::string *)((char *)this + 112), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_62:
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__str, "dump-ir-only");
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  v33 = v32;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v33)
      goto LABEL_68;
  }
  else if (!v32)
  {
    goto LABEL_68;
  }
  if (*((_DWORD *)v33 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 208) = *((_BYTE *)v33 + 40);
LABEL_68:
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__str, "compute-units");
  v34 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  v35 = v34;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v35)
      goto LABEL_80;
  }
  else if (!v34)
  {
    goto LABEL_80;
  }
  if (*((_DWORD *)v35 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (*((char *)v35 + 63) < 0)
    std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v35[5], v35[6]);
  else
    __str = *(std::string *)(v35 + 5);
  E5RT::ParseComputeUnits((uint64_t *)&__str, &v131.__r_.__value_.__l.__data_);
  v36 = *(void **)v6;
  if (*(_QWORD *)v6)
  {
    *((_QWORD *)this + 18) = v36;
    operator delete(v36);
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
  }
  *(std::string *)((char *)this + 136) = v131;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_80:
  *((_BYTE *)&v131.__r_.__value_.__s + 23) = 3;
  LODWORD(v131.__r_.__value_.__l.__data_) = 6647393;
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)a2, (uint64_t)&v131, (uint64_t)&__str);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  *((_BYTE *)&v131.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v131, "options-plist");
  v37 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&__str, (uint64_t)&v131);
  v38 = v37;
  if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v37)
      goto LABEL_88;
LABEL_86:
    if (*((_DWORD *)v38 + 16) != 3)
      std::__throw_bad_variant_access[abi:ne180100]();
    std::string::operator=(v125, (const std::string *)(v38 + 5));
    goto LABEL_88;
  }
  operator delete(v131.__r_.__value_.__l.__data_);
  if (v38)
    goto LABEL_86;
LABEL_88:
  *((_BYTE *)&v131.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v131, "options");
  v39 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&__str, (uint64_t)&v131);
  v40 = v39;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v131.__r_.__value_.__l.__data_);
    if (!v40)
      goto LABEL_126;
  }
  else if (!v39)
  {
    goto LABEL_126;
  }
  if (*((_DWORD *)v40 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 1;
  LOWORD(__p[0].__r_.__value_.__l.__data_) = 44;
  E5Common::StringUtils::Split(v40 + 5, (char *)__p, (uint64_t)&v131);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    v41 = v131.__r_.__value_.__l.__size_;
    v42 = (uint64_t *)v131.__r_.__value_.__r.__words[0];
    if (v131.__r_.__value_.__r.__words[0] == v131.__r_.__value_.__l.__size_)
    {
LABEL_95:
      if (v42)
        goto LABEL_119;
      goto LABEL_126;
    }
  }
  else
  {
    v41 = v131.__r_.__value_.__l.__size_;
    v42 = (uint64_t *)v131.__r_.__value_.__r.__words[0];
    if (v131.__r_.__value_.__r.__words[0] == v131.__r_.__value_.__l.__size_)
      goto LABEL_95;
  }
  v121 = v5;
  do
  {
    *((_BYTE *)&v132.__r_.__value_.__s + 23) = 1;
    LOWORD(v132.__r_.__value_.__l.__data_) = 61;
    E5Common::StringUtils::Split(v42, (char *)&v132, (uint64_t)__p);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v132.__r_.__value_.__l.__data_);
      v44 = __p[0].__r_.__value_.__r.__words[0];
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3) < 2)
      {
LABEL_107:
        memset(&v132, 0, sizeof(v132));
        goto LABEL_109;
      }
    }
    else
    {
      v44 = __p[0].__r_.__value_.__r.__words[0];
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3) < 2)
        goto LABEL_107;
    }
    if (*(char *)(v44 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(v44 + 24), *(_QWORD *)(v44 + 32));
      v44 = __p[0].__r_.__value_.__r.__words[0];
    }
    else
    {
      v132 = *(std::string *)(v44 + 24);
    }
LABEL_109:
    v136 = (__int128 *)v44;
    v45 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v129, v44, (uint64_t)&std::piecewise_construct, &v136);
    v46 = (void **)(v45 + 5);
    if (*((char *)v45 + 63) < 0)
    {
      operator delete(*v46);
      *(std::string *)v46 = v132;
      v47 = __p[0].__r_.__value_.__r.__words[0];
      if (!__p[0].__r_.__value_.__r.__words[0])
        goto LABEL_101;
    }
    else
    {
      *(_OWORD *)v46 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
      v45[7] = v132.__r_.__value_.__r.__words[2];
      v47 = __p[0].__r_.__value_.__r.__words[0];
      if (!__p[0].__r_.__value_.__r.__words[0])
        goto LABEL_101;
    }
    v48 = __p[0].__r_.__value_.__l.__size_;
    v43 = (void *)v47;
    if (__p[0].__r_.__value_.__l.__size_ != v47)
    {
      do
      {
        if (*(char *)(v48 - 1) < 0)
          operator delete(*(void **)(v48 - 24));
        v48 -= 24;
      }
      while (v48 != v47);
      v43 = (void *)__p[0].__r_.__value_.__r.__words[0];
    }
    __p[0].__r_.__value_.__l.__size_ = v47;
    operator delete(v43);
LABEL_101:
    v42 += 3;
  }
  while (v42 != (uint64_t *)v41);
  v42 = (uint64_t *)v131.__r_.__value_.__r.__words[0];
  v5 = v121;
  if (v131.__r_.__value_.__r.__words[0])
  {
LABEL_119:
    v49 = v131.__r_.__value_.__l.__size_;
    v50 = v42;
    if ((uint64_t *)v131.__r_.__value_.__l.__size_ != v42)
    {
      do
      {
        if (*(char *)(v49 - 1) < 0)
          operator delete(*(void **)(v49 - 24));
        v49 -= 24;
      }
      while ((uint64_t *)v49 != v42);
      v50 = (uint64_t *)v131.__r_.__value_.__r.__words[0];
    }
    v131.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
    operator delete(v50);
  }
LABEL_126:
  *((_BYTE *)&v131.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v131, "require-ane-resident");
  v51 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&v131);
  v52 = v51;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v131.__r_.__value_.__l.__data_);
    if (!v52)
      goto LABEL_132;
  }
  else if (!v51)
  {
    goto LABEL_132;
  }
  if (*((_DWORD *)v52 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  std::string::operator=(v124, (const std::string *)(v52 + 5));
LABEL_132:
  *((_BYTE *)this + 328) = Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling(a2);
  *((_BYTE *)&v131.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v131, ".mil");
  v53 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)this, (unsigned __int8 *)&v131);
  v54 = v53;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v131.__r_.__value_.__l.__data_);
    if (!v54)
      goto LABEL_137;
LABEL_134:
    if (Espresso::AOT::AOTCompilerOptions::TryGetMILProgram(a2))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "MIL program must be nullptr when the input file has a .mil extension.");
      goto LABEL_352;
    }
LABEL_145:
    v58 = 1;
  }
  else
  {
    if (v53)
      goto LABEL_134;
LABEL_137:
    *((_BYTE *)&v131.__r_.__value_.__s + 23) = 13;
    strcpy((char *)&v131, ".espresso.net");
    v56 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)this, (unsigned __int8 *)&v131);
    v57 = v56;
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((v56 & 1) != 0)
        goto LABEL_139;
LABEL_141:
      *((_BYTE *)&v131.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v131, ".milhash");
      v59 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)this, (unsigned __int8 *)&v131);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      if (v59)
      {
        if (Espresso::AOT::AOTCompilerOptions::TryGetMILProgram(a2))
          goto LABEL_145;
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "MIL program must be provided when the input file has a .milhash extension.");
      }
      else
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "--input file must have either .mil, .espresso.net, or .milhash extensions.");
      }
LABEL_352:
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
    operator delete(v131.__r_.__value_.__l.__data_);
    if ((v57 & 1) == 0)
      goto LABEL_141;
LABEL_139:
    v58 = 0;
  }
  *((_BYTE *)this + 331) = v58;
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = xmmword_191A71250;
  strcpy(v131.__r_.__value_.__l.__data_, "force-classic-aot-old-hw");
  v60 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&v131);
  v61 = v60;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v131.__r_.__value_.__l.__data_);
    if (!v61)
      goto LABEL_152;
  }
  else if (!v60)
  {
    goto LABEL_152;
  }
  if (*((_DWORD *)v61 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 333) = *((_BYTE *)v61 + 40);
LABEL_152:
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 12;
  strcpy((char *)__p, "experimental");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)a2, (uint64_t)__p, (uint64_t)&v131);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  *((_BYTE *)&v132.__r_.__value_.__s + 23) = 3;
  LODWORD(v132.__r_.__value_.__l.__data_) = 7696483;
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)a2, (uint64_t)&v132, (uint64_t)__p);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  *((_BYTE *)&v132.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v132, "preferred-backend");
  v62 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)&v132);
  v63 = v62;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v132.__r_.__value_.__l.__data_);
    if (!v63)
      goto LABEL_166;
  }
  else if (!v62)
  {
    goto LABEL_166;
  }
  if (*((_DWORD *)v63 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (*((char *)v63 + 63) < 0)
  {
    if (!v63[6])
      goto LABEL_166;
    goto LABEL_165;
  }
  if (*((_BYTE *)v63 + 63))
LABEL_165:
    std::string::operator=(v122, (const std::string *)(v63 + 5));
LABEL_166:
  v64 = (void **)__p[0].__r_.__value_.__r.__words[2];
  if (__p[0].__r_.__value_.__r.__words[2])
  {
    do
    {
      v65 = (void **)*v64;
      v66 = *((unsigned int *)v64 + 16);
      if ((_DWORD)v66 != -1)
        ((void (*)(std::string *, void **))off_1E2DD1708[v66])(&v132, v64 + 5);
      *((_DWORD *)v64 + 16) = -1;
      if (*((char *)v64 + 39) < 0)
        operator delete(v64[2]);
      operator delete(v64);
      v64 = v65;
    }
    while (v65);
  }
  v67 = (void *)__p[0].__r_.__value_.__r.__words[0];
  __p[0].__r_.__value_.__r.__words[0] = 0;
  if (v67)
    operator delete(v67);
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 18;
  strcpy((char *)__p, "classic-validation");
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v69 = v68;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v69)
      goto LABEL_187;
  }
  else if (!v68)
  {
    goto LABEL_187;
  }
  if (*((_DWORD *)v69 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (*((char *)v69 + 63) < 0)
    std::string::__init_copy_ctor_external(__p, (const std::string::value_type *)v69[5], v69[6]);
  else
    __p[0] = *(std::string *)(v69 + 5);
  E5RT::ParseComputeUnits((uint64_t *)__p, &v132.__r_.__value_.__l.__data_);
  v70 = *(void **)v127;
  if (*(_QWORD *)v127)
  {
    *((_QWORD *)this + 21) = v70;
    operator delete(v70);
    *(_QWORD *)v127 = 0;
    *((_QWORD *)v127 + 1) = 0;
    *((_QWORD *)v127 + 2) = 0;
  }
  *(std::string *)((char *)this + 160) = v132;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_187:
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 12;
  strcpy((char *)__p, "classic-cost");
  v71 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v72 = v71;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v72)
      goto LABEL_199;
  }
  else if (!v71)
  {
    goto LABEL_199;
  }
  if (*((_DWORD *)v72 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (*((char *)v72 + 63) < 0)
    std::string::__init_copy_ctor_external(__p, (const std::string::value_type *)v72[5], v72[6]);
  else
    __p[0] = *(std::string *)(v72 + 5);
  E5RT::ParseComputeUnits((uint64_t *)__p, &v132.__r_.__value_.__l.__data_);
  v73 = *(void **)v126;
  if (*(_QWORD *)v126)
  {
    *((_QWORD *)this + 24) = v73;
    operator delete(v73);
    *(_QWORD *)v126 = 0;
    *((_QWORD *)v126 + 1) = 0;
    *((_QWORD *)v126 + 2) = 0;
  }
  *(std::string *)((char *)this + 184) = v132;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_199:
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 21;
  strcpy((char *)__p, "on-device-compilation");
  v74 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)__p);
  v75 = v74;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v75)
      goto LABEL_205;
LABEL_201:
    if (*((_DWORD *)v75 + 16))
      std::__throw_bad_variant_access[abi:ne180100]();
    v76 = *((unsigned __int8 *)v75 + 40);
    *((_BYTE *)this + 329) = v76;
    if (v76)
    {
LABEL_206:
      if (!*((_QWORD *)this + 9))
      {
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)E5RT::GetCurrentPlatform((E5RT *)v74);
        LODWORD(__p[0].__r_.__value_.__r.__words[1]) = 0;
        std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>((uint64_t)v4, (uint64_t)__p, __p);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)__p);
      }
    }
  }
  else
  {
    if (v74)
      goto LABEL_201;
LABEL_205:
    if (*((_BYTE *)this + 329))
      goto LABEL_206;
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_191A72420;
  strcpy(__p[0].__r_.__value_.__l.__data_, "mil-cost-skip-decision-trees");
  v77 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v78 = v77;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v78)
      goto LABEL_214;
  }
  else if (!v77)
  {
    goto LABEL_214;
  }
  if (*((_DWORD *)v78 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 330) = *((_BYTE *)v78 + 40);
LABEL_214:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_191A78320;
  strcpy(__p[0].__r_.__value_.__l.__data_, "enable-classic-cpu-fallback-for-mlc");
  v79 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v80 = v79;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v80)
      goto LABEL_220;
  }
  else if (!v79)
  {
    goto LABEL_220;
  }
  if (*((_DWORD *)v80 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 332) = *((_BYTE *)v80 + 40);
LABEL_220:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_191A8AA30;
  strcpy(__p[0].__r_.__value_.__l.__data_, "enable-ranked-segmentation");
  v81 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v82 = v81;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v82)
      goto LABEL_226;
  }
  else if (!v81)
  {
    goto LABEL_226;
  }
  if (*((_DWORD *)v82 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 334) = *((_BYTE *)v82 + 40);
LABEL_226:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_191A72420;
  strcpy(__p[0].__r_.__value_.__l.__data_, "disable-data-dependent-shape");
  v83 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v84 = v83;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v84)
      goto LABEL_232;
  }
  else if (!v83)
  {
    goto LABEL_232;
  }
  if (*((_DWORD *)v84 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 335) = *((_BYTE *)v84 + 40);
LABEL_232:
  strcpy((char *)__p, "enable-mpsgraphpackage");
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 22;
  v85 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v86 = v85;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v86)
      goto LABEL_238;
  }
  else if (!v85)
  {
    goto LABEL_238;
  }
  if (*((_DWORD *)v86 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 336) = *((_BYTE *)v86 + 40);
LABEL_238:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_191A72440;
  strcpy(__p[0].__r_.__value_.__l.__data_, "enable-default-function-for-range-dim");
  v87 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v88 = v87;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v88)
      goto LABEL_244;
  }
  else if (!v87)
  {
    goto LABEL_244;
  }
  if (*((_DWORD *)v88 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *v123 = *((_BYTE *)v88 + 40);
LABEL_244:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_191A78340;
  strcpy(__p[0].__r_.__value_.__l.__data_, "coalesce-ops-with-consumers");
  v89 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v90 = v89;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v90)
      goto LABEL_250;
  }
  else if (!v89)
  {
    goto LABEL_250;
  }
  if (*((_DWORD *)v90 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 340) = *((_BYTE *)v90 + 40);
LABEL_250:
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 19;
  strcpy((char *)__p, "move-read-state-ops");
  v91 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v92 = v91;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v92)
      goto LABEL_256;
  }
  else if (!v91)
  {
    goto LABEL_256;
  }
  if (*((_DWORD *)v92 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 338) = *((_BYTE *)v92 + 40);
LABEL_256:
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 18;
  strcpy((char *)__p, "shrink-quant-group");
  v93 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v94 = v93;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v94)
      goto LABEL_262;
  }
  else if (!v93)
  {
    goto LABEL_262;
  }
  if (*((_DWORD *)v94 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 339) = *((_BYTE *)v94 + 40);
LABEL_262:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_191A7C2C0;
  strcpy(__p[0].__r_.__value_.__l.__data_, "match-e5-minimal-cpu-patterns");
  v95 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v96 = v95;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v96)
      goto LABEL_268;
  }
  else if (!v95)
  {
    goto LABEL_268;
  }
  if (*((_DWORD *)v96 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 341) = *((_BYTE *)v96 + 40);
LABEL_268:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_191A72DA0;
  strcpy(__p[0].__r_.__value_.__l.__data_, "match-e5-minimal-cpu-patterns-for-states");
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v98 = v97;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v98)
      goto LABEL_274;
  }
  else if (!v97)
  {
    goto LABEL_274;
  }
  if (*((_DWORD *)v98 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 342) = *((_BYTE *)v98 + 40);
LABEL_274:
  *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 14;
  strcpy((char *)__p, "merge-segments");
  v99 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v100 = v99;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v100)
      goto LABEL_280;
  }
  else if (!v99)
  {
    goto LABEL_280;
  }
  if (*((_DWORD *)v100 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *((_BYTE *)this + 343) = *((_BYTE *)v100 + 40);
LABEL_280:
  Espresso::AOT::CompilerOptionsForE5::AssertValid((std::string *)this);
  if (*((char *)this + 47) < 0)
  {
    v102 = (std::string *)*((_QWORD *)this + 3);
    v101 = *((_QWORD *)this + 4);
    v103 = (_DWORD *)(v101 - 7);
    if (v101 >= 7)
      goto LABEL_284;
  }
  else
  {
    v101 = *((unsigned __int8 *)this + 47);
    v102 = v5;
    v103 = (_DWORD *)(v101 - 7);
    if ((unint64_t)v101 < 7)
      goto LABEL_295;
LABEL_284:
    v104 = (char *)v102 + v101;
    v105 = v102;
    do
    {
      v106 = (char *)memchr(v105, 46, v101 - 6);
      if (!v106)
        break;
      if (*(_DWORD *)v106 == 1853186606 && *(_DWORD *)(v106 + 3) == 1701602414)
      {
        if ((_DWORD *)(v106 - (char *)v102) == v103 && v106 != v104 && v106 - (char *)v102 != -1)
          goto LABEL_296;
        break;
      }
      v105 = (std::string *)(v106 + 1);
      v101 = v104 - (char *)v105;
    }
    while (v104 - (char *)v105 >= 7);
  }
LABEL_295:
  std::string::append(v5, ".bundle", 7uLL);
LABEL_296:
  v108 = (void **)v131.__r_.__value_.__r.__words[2];
  if (v131.__r_.__value_.__r.__words[2])
  {
    do
    {
      v109 = (void **)*v108;
      v110 = *((unsigned int *)v108 + 16);
      if ((_DWORD)v110 != -1)
        ((void (*)(std::string *, void **))off_1E2DD1708[v110])(__p, v108 + 5);
      *((_DWORD *)v108 + 16) = -1;
      if (*((char *)v108 + 39) < 0)
        operator delete(v108[2]);
      operator delete(v108);
      v108 = v109;
    }
    while (v109);
  }
  v111 = (void *)v131.__r_.__value_.__r.__words[0];
  v131.__r_.__value_.__r.__words[0] = 0;
  if (v111)
    operator delete(v111);
  v112 = (void **)__str.__r_.__value_.__r.__words[2];
  if (__str.__r_.__value_.__r.__words[2])
  {
    do
    {
      v113 = (void **)*v112;
      v114 = *((unsigned int *)v112 + 16);
      if ((_DWORD)v114 != -1)
        ((void (*)(std::string *, void **))off_1E2DD1708[v114])(&v131, v112 + 5);
      *((_DWORD *)v112 + 16) = -1;
      if (*((char *)v112 + 39) < 0)
        operator delete(v112[2]);
      operator delete(v112);
      v112 = v113;
    }
    while (v113);
  }
  v115 = (void *)__str.__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[0] = 0;
  if (v115)
    operator delete(v115);
  v116 = v135;
  if (v135)
  {
    do
    {
      v117 = (void **)*v116;
      v118 = *((unsigned int *)v116 + 16);
      if ((_DWORD)v118 != -1)
        ((void (*)(std::string *, void **))off_1E2DD1708[v118])(&__str, v116 + 5);
      *((_DWORD *)v116 + 16) = -1;
      if (*((char *)v116 + 39) < 0)
        operator delete(v116[2]);
      operator delete(v116);
      v116 = v117;
    }
    while (v117);
  }
  v119 = (void *)v134[0];
  v134[0] = 0;
  if (v119)
    operator delete(v119);
  return this;
}

void sub_191156D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, char *a12, void **a13, void **a14, uint64_t a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v52;
  void *v53;
  void *v54;

  __cxa_free_exception(v49);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](v50 - 192);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](v50 - 152);
  if (*a12 < 0)
  {
    operator delete(*a14);
    if (*(char *)(v48 + 303) < 0)
    {
LABEL_12:
      operator delete(*a16);
      std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](a24);
      if (*(char *)(v48 + 239) < 0)
      {
LABEL_13:
        operator delete(*a17);
        v52 = *a18;
        if (*a18)
        {
LABEL_14:
          *(_QWORD *)(v48 + 192) = v52;
          operator delete(v52);
          v53 = *a19;
          if (*a19)
          {
LABEL_15:
            *(_QWORD *)(v48 + 168) = v53;
            operator delete(v53);
            v54 = *a13;
            if (*a13)
            {
LABEL_16:
              *(_QWORD *)(v48 + 144) = v54;
              operator delete(v54);
              std::pair<std::string const,std::string>::~pair(a20);
              std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](a11);
              if (*(char *)(v48 + 47) < 0)
              {
LABEL_17:
                operator delete(*a10);
                if (*(char *)(v48 + 23) < 0)
                {
LABEL_18:
                  operator delete(*(void **)v48);
                  _Unwind_Resume(a1);
                }
LABEL_9:
                _Unwind_Resume(a1);
              }
LABEL_8:
              if (*(char *)(v48 + 23) < 0)
                goto LABEL_18;
              goto LABEL_9;
            }
LABEL_7:
            std::pair<std::string const,std::string>::~pair(a20);
            std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](a11);
            if (*(char *)(v48 + 47) < 0)
              goto LABEL_17;
            goto LABEL_8;
          }
LABEL_6:
          v54 = *a13;
          if (*a13)
            goto LABEL_16;
          goto LABEL_7;
        }
LABEL_5:
        v53 = *a19;
        if (*a19)
          goto LABEL_15;
        goto LABEL_6;
      }
LABEL_4:
      v52 = *a18;
      if (*a18)
        goto LABEL_14;
      goto LABEL_5;
    }
  }
  else if (*(char *)(v48 + 303) < 0)
  {
    goto LABEL_12;
  }
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](a24);
  if (*(char *)(v48 + 239) < 0)
    goto LABEL_13;
  goto LABEL_4;
}

void sub_19115711C()
{
  uint64_t v0;

  std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](v0 - 192);
  JUMPOUT(0x19115712CLL);
}

void Espresso::AOT::CompilerOptionsForE5::AssertValid(std::string *this)
{
  std::string::size_type size;
  std::string *v3;
  E5RT *v4;
  unsigned __int8 v5;
  std::string::size_type v6;
  std::logic_error *exception;
  std::string *data;
  unsigned __int8 v9;
  std::string::value_type *v10;
  std::string::value_type *v11;
  std::string::pointer v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  std::logic_error *v19;
  std::logic_error *v20;
  std::logic_error *v21;
  std::string __p;
  uint64_t v23;

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this->__r_.__value_.__s + 23))
      goto LABEL_3;
LABEL_19:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--input is a required argument");
    goto LABEL_42;
  }
  if (!this->__r_.__value_.__l.__size_)
    goto LABEL_19;
LABEL_3:
  memset(&__p, 0, sizeof(__p));
  if ((size & 0x80u) == 0)
    v3 = this;
  else
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&__p, v3, (std::string *)((char *)v3 + size));
  v4 = (E5RT *)std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  v5 = v23;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5 == 255 || !v5)
  {
    v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" does not exist", (const void **)&this->__r_.__value_.__l.__data_, &__p);
    std::logic_error::logic_error(v19, &__p);
    v19->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v19, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if ((SHIBYTE(this[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this[1].__r_.__value_.__s + 23))
      goto LABEL_14;
LABEL_21:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is a required argument");
    goto LABEL_42;
  }
  if (!this[1].__r_.__value_.__l.__size_)
    goto LABEL_21;
LABEL_14:
  if (!this[3].__r_.__value_.__r.__words[0])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Either -p/--e5-platforms and/or --e5-platform-families is a required argument");
    goto LABEL_42;
  }
  v6 = HIBYTE(this[9].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[9].__r_.__value_.__l.__size_)
      goto LABEL_32;
  }
  else if (!*((_BYTE *)&this[9].__r_.__value_.__s + 23))
  {
    goto LABEL_32;
  }
  memset(&__p, 0, sizeof(__p));
  if ((v6 & 0x80u) == 0)
    data = this + 9;
  else
    data = (std::string *)this[9].__r_.__value_.__l.__data_;
  if ((v6 & 0x80u) != 0)
    v6 = this[9].__r_.__value_.__l.__size_;
  std::string::append[abi:ne180100]<char const*,0>(&__p, data, (std::string *)((char *)data + v6));
  v4 = (E5RT *)std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  v9 = v23;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9 == 255 || !v9)
  {
    v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(v20, &__p);
    v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v20, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
LABEL_32:
  if (this[11].__r_.__value_.__r.__words[0])
  {
    if (!this[13].__r_.__value_.__s.__data_[19])
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "--ane-options not implemented for Espresso IR model");
      goto LABEL_42;
    }
    if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
    {
      if (!this[9].__r_.__value_.__l.__size_)
      {
LABEL_36:
        v10 = &this[10].__r_.__value_.__s.__data_[16];
        do
        {
          while (1)
          {
            v10 = *(std::string::value_type **)v10;
            if (!v10)
              goto LABEL_43;
            if ((v10[63] & 0x80000000) == 0)
              break;
            if (!*((_QWORD *)v10 + 6))
              goto LABEL_41;
          }
        }
        while (v10[63]);
LABEL_41:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid --ane-options value, expect key=value pair(s)");
LABEL_42:
        __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
      }
    }
    else if (!*((_BYTE *)&this[9].__r_.__value_.__s + 23))
    {
      goto LABEL_36;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Either --ane-options-plist or --ane-options can be set, not both.");
    goto LABEL_42;
  }
LABEL_43:
  if (this[12].__r_.__value_.__s.__data_[15] < 0)
  {
    if (!this[12].__r_.__value_.__r.__words[0])
      goto LABEL_70;
  }
  else if (!this[12].__r_.__value_.__s.__data_[15])
  {
    goto LABEL_70;
  }
  v11 = &this[11].__r_.__value_.__s.__data_[16];
  v12 = this[12].__r_.__value_.__l.__data_;
  if (this[12].__r_.__value_.__s.__data_[15] < 0)
    v11 = (std::string::value_type *)this[11].__r_.__value_.__r.__words[2];
  else
    v12 = (std::string::pointer)this[12].__r_.__value_.__s.__data_[15];
  if (v12 == (std::string::pointer)9)
  {
    v16 = *(_QWORD *)v11;
    v17 = v11[8];
    if (v16 == 0x636E657265666E69 && v17 == 101)
    {
      if ((char *)&off_1E2DD16E8 - (char *)&c_validAneResidencyRequirements != 48)
        goto LABEL_70;
LABEL_55:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid --e5-require-ane-resident value");
      goto LABEL_42;
    }
    goto LABEL_69;
  }
  if (v12 == (std::string::pointer)6)
  {
    v13 = *(_DWORD *)v11;
    v14 = *((unsigned __int16 *)v11 + 2);
    if (v13 == 1769108595 && v14 == 29795)
    {
      if ((char *)&off_1E2DD16F8 - (char *)&c_validAneResidencyRequirements != 48)
        goto LABEL_70;
      goto LABEL_55;
    }
    goto LABEL_69;
  }
  if (v12 != (std::string::pointer)2 || *(_WORD *)v11 != 28526)
  {
LABEL_69:
    if ((char *)off_1E2DD1708 - (char *)&c_validAneResidencyRequirements != 48)
      goto LABEL_70;
    goto LABEL_55;
  }
LABEL_70:
  if (this[13].__r_.__value_.__s.__data_[17])
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)E5RT::GetCurrentPlatform(v4);
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    if (this[3].__r_.__value_.__r.__words[0] != 1
      || E5Common::PlatformIdentifier::operator!=((uint64_t)&__p, this[2].__r_.__value_.__r.__words[2] + 16))
    {
      v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v21, "With --e5-on-device-compilation, -p/--e5-platforms is optional & can only be provided the current SoC.");
      v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(v21, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&__p);
  }
}

void sub_1911575F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19115760C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191157620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191157634(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191157648(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19115765C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191157670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a9);
  _Unwind_Resume(a1);
}

void sub_191157684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a9);
  _Unwind_Resume(a1);
}

void sub_1911576A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a9);
  _Unwind_Resume(a1);
}

void sub_1911576B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) != 0)
      goto LABEL_6;
  }
  else if (v15)
  {
LABEL_6:
    __cxa_free_exception(v14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 24;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetPlatforms(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 48;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetCpuTargetOS(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 88;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetCpuTargetArch(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 112;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetComputeUnits(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 136;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetDumpIrOnly(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 208);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetCpuPreferredBackend(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 304;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetEnableClassicCpuFallbackForMlc(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 332);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetSkipDecisionTreesWithMILCost(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 330);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetComputeUnitsWithClassicValidation(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 160;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetComputeUnitsWithClassicCost(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 184;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetAneOptionsPlistPath(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 216;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetAneOptions@<X0>(Espresso::AOT::CompilerOptionsForE5 *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<std::string,std::string>::unordered_map(a2, (uint64_t)this + 240);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetRequireAneResident(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 280;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetBuildForProfiling(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 328);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetOnDeviceCompilation(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 329);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetUseMilE5Compiler(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 331);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 333);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetUseRankedChoiceSegmentation(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 334);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetDisableDataDependentShape(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 335);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetEnableMPSGraphPackage(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 336);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetEnableDefaultFunctionForRangeDim(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 337);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetMoveReadStateOps(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 338);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetShrinkQuantGroup(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 339);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetCoalesceOpsWithConsumers(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 340);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatterns(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 341);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatternsForStates(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 342);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetSegmentsShouldMerge(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 343);
}

void Espresso::AOT::CompilerOptionsForE5::RegisterOptions(Espresso::AOT::CompilerOptionsForE5 *this, Espresso::AOT::AOTCompilerOptionsManager *a2)
{
  Espresso::AOT::Utils *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  Espresso::AOT::Utils *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  _BYTE __p[24];
  char *v16[5];
  char v17;

  v17 = 3;
  strcpy((char *)&v16[3], "ane");
  HIBYTE(v16[2]) = 13;
  strcpy((char *)v16, "options-plist");
  *(_QWORD *)__p = operator new(0x58uLL);
  *(_OWORD *)&__p[8] = xmmword_191A8C970;
  strcpy(*(char **)__p, "Path to ANE compilation options plist. (only works with Espresso IR model format)");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_165:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_166;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_165;
LABEL_3:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_4;
LABEL_166:
  operator delete(v16[3]);
LABEL_4:
  v17 = 3;
  strcpy((char *)&v16[3], "ane");
  HIBYTE(v16[2]) = 7;
  strcpy((char *)v16, "options");
  *(_QWORD *)__p = operator new(0x60uLL);
  *(_OWORD *)&__p[8] = xmmword_191A726B0;
  strcpy(*(char **)__p, "ANE compilation options (separated by comma), E.g. SpatialSplitMode=Memory,KernelRewind=YES");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_168:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_169;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_168;
LABEL_6:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_7;
LABEL_169:
  operator delete(v16[3]);
LABEL_7:
  v17 = 4;
  strcpy((char *)&v16[3], "bnns");
  HIBYTE(v16[2]) = 15;
  strcpy((char *)v16, "compile-on-load");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A726A0;
  strcpy(v14.__r_.__value_.__l.__data_, "Defer MIL compilation to BNNS IR until load-time.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_10;
LABEL_172:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_11;
      goto LABEL_173;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_172;
LABEL_10:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_11;
LABEL_173:
  operator delete(v16[3]);
LABEL_11:
  v17 = 4;
  strcpy((char *)&v16[3], "bnns");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_191A72420;
  strcpy(v16[0], "experimental-target-override");
  __p[23] = 0;
  __p[0] = 0;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xC0uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A8C980;
  strcpy(v14.__r_.__value_.__l.__data_, "Target to use specifically for the BNNS IR compilation, which may be different from the --e5-platforms target. Must be specified as an ID like 'X99Y', with uppercase letters and a subtype.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_176:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_177;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_176;
LABEL_14:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_15;
LABEL_177:
  operator delete(v16[3]);
LABEL_15:
  v17 = 4;
  strcpy((char *)&v16[3], "bnns");
  HIBYTE(v16[2]) = 7;
  strcpy((char *)v16, "options");
  *(_QWORD *)__p = operator new(0x78uLL);
  *(_OWORD *)&__p[8] = xmmword_191A8C990;
  strcpy(*(char **)__p, "BNNS compilation options (separated by comma), E.g. SingleThread=true,PredefinedOptimization=SomeModelSpecificName");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_179:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_180;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_179;
LABEL_17:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_18;
LABEL_180:
  operator delete(v16[3]);
LABEL_18:
  v17 = 8;
  strcpy((char *)&v16[3], "mpsgraph");
  strcpy((char *)v16, "disable-type-inference");
  HIBYTE(v16[2]) = 22;
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A79500;
  strcpy(v14.__r_.__value_.__l.__data_, "Disables type inference in MPSGraph.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_20:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_21;
LABEL_183:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_184;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_183;
LABEL_21:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_22;
LABEL_184:
  operator delete(v16[3]);
LABEL_22:
  v17 = 8;
  strcpy((char *)&v16[3], "mpsgraph");
  HIBYTE(v16[2]) = 20;
  strcpy((char *)v16, "enable-gpu-quant-ops");
  __p[23] = 4;
  strcpy(__p, "true");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A71380;
  strcpy(v14.__r_.__value_.__l.__data_, "Enables quantization op support in MPSGraph.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_25;
LABEL_187:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_188;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_187;
LABEL_25:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_26;
LABEL_188:
  operator delete(v16[3]);
LABEL_26:
  v17 = 8;
  strcpy((char *)&v16[3], "mpsgraph");
  strcpy((char *)v16, "enable-parallel-encode");
  HIBYTE(v16[2]) = 22;
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A79500;
  strcpy(v14.__r_.__value_.__l.__data_, "Enables parallel encode in MPSGraph.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_29;
LABEL_191:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_192;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_191;
LABEL_29:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_30;
LABEL_192:
  operator delete(v16[3]);
LABEL_30:
  v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 8;
  strcpy((char *)v16, "deadline");
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_191A862A0;
  strcpy(*(char **)__p, "Time limit in seconds for compilation.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 1, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_32;
LABEL_194:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_195;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_194;
LABEL_32:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_33;
LABEL_195:
  operator delete(v16[3]);
LABEL_33:
  v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 6;
  strcpy((char *)v16, "header");
  *(_QWORD *)__p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_191A6F7A0;
  strcpy(*(char **)__p, "Generated header name. Example: myheader.h");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_197:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_198;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_197;
LABEL_35:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_36;
LABEL_198:
  operator delete(v16[3]);
LABEL_36:
  v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 3;
  strcpy((char *)v16, "sdk");
  __p[23] = 15;
  strcpy(__p, "macosx.internal");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A79500;
  strcpy(v14.__r_.__value_.__l.__data_, "Xcode SDK containing mlcompilertool.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_39;
LABEL_201:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_202;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_201;
LABEL_39:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_40;
LABEL_202:
  operator delete(v16[3]);
LABEL_40:
  v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 4;
  strcpy((char *)v16, "size");
  *(_QWORD *)__p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_191A72430;
  strcpy(*(char **)__p, "Size limit for generated artifact.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 1, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_42;
LABEL_204:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_205;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_204;
LABEL_42:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_43;
LABEL_205:
  operator delete(v16[3]);
LABEL_43:
  v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 6;
  strcpy((char *)v16, "target");
  *(_QWORD *)__p = operator new(0x58uLL);
  *(_OWORD *)&__p[8] = xmmword_191A85BA0;
  strcpy(*(char **)__p, "Target triple and mcpu separated by colon. Example: x86_64-apple-macosx:haswell.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_207:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_208;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_207;
LABEL_45:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_46;
LABEL_208:
  operator delete(v16[3]);
LABEL_46:
  v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 3;
  strcpy((char *)v16, "api");
  *(_QWORD *)__p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_191A6F790;
  strcpy(*(char **)__p, "Substring used in names of generated symbols.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_48;
LABEL_210:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_211;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_210;
LABEL_48:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_49;
LABEL_211:
  operator delete(v16[3]);
LABEL_49:
  v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 13;
  strcpy((char *)v16, "force-loopkit");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A8AA30;
  strcpy(v14.__r_.__value_.__l.__data_, "Force LoopKit CPU backend.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_51:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_52;
LABEL_214:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_215;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_51;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_214;
LABEL_52:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_53;
LABEL_215:
  operator delete(v16[3]);
LABEL_53:
  v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 16;
  strcpy((char *)v16, "use-fast-reshape");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A71230;
  strcpy(v14.__r_.__value_.__l.__data_, "Use fast reshape implementation");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_55:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_56;
LABEL_218:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_57;
      goto LABEL_219;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_55;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_218;
LABEL_56:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_57;
LABEL_219:
  operator delete(v16[3]);
LABEL_57:
  v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 16;
  strcpy((char *)v16, "force-in-process");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A6FF70;
  strcpy(v14.__r_.__value_.__l.__data_, "Force MLC on-device compilation to occur in-process.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_59:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_60;
LABEL_222:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_61;
      goto LABEL_223;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_59;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_222;
LABEL_60:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_61;
LABEL_223:
  operator delete(v16[3]);
LABEL_61:
  v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 12;
  strcpy((char *)v16, "experimental");
  *(_QWORD *)__p = operator new(0x38uLL);
  *(_OWORD *)&__p[8] = xmmword_191A6FF70;
  strcpy(*(char **)__p, "Internal. Experimental arguments for CPU compilation");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_63;
LABEL_225:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_226;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_225;
LABEL_63:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_64;
LABEL_226:
  operator delete(v16[3]);
LABEL_64:
  v17 = 3;
  strcpy((char *)&v16[3], "cpu");
  HIBYTE(v16[2]) = 17;
  strcpy((char *)v16, "preferred-backend");
  __p[23] = 0;
  __p[0] = 0;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A72470;
  strcpy(v14.__r_.__value_.__l.__data_, "Preferred backend to use for CPU segments (classic_cpu, mlc, bnns).");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_67;
LABEL_229:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_68;
      goto LABEL_230;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_229;
LABEL_67:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_68;
LABEL_230:
  operator delete(v16[3]);
LABEL_68:
  v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 13;
  strcpy((char *)v16, "compute-units");
  *(_QWORD *)__p = operator new(0x1E8uLL);
  *(_OWORD *)&__p[8] = xmmword_191A8C9A0;
  strcpy(*(char **)__p, "Comma-separated list of compute units permitted to be used by dispatch for compilation: ane,gpu,cpu; if omitted, def"
    "ault dispatch behavior is ane,gpu,cpu for MIL AOT, and ane,cpu for classic (EspressoIR) AOT on ANE capable devices a"
    "nd CPU elsewhere.  --e5-compute-units=ane,gpu,cpu yields classic Espresso dispatch with ANE, MPSGraph, and BNNS back"
    "ends.  NOTE: Do NOT use EspressoIR + E5ML without prior approval.  Pre-approved use cases only.  E5ML POR support is"
    " MIL, not EspressoIR.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_70;
LABEL_232:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_71;
    goto LABEL_233;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_232;
LABEL_70:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_71;
LABEL_233:
  operator delete(v16[3]);
LABEL_71:
  v17 = 2;
  strcpy((char *)&v16[3], "e5");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_191A71250;
  strcpy(v16[0], "force-classic-aot-old-hw");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A8C9B0;
  strcpy(v14.__r_.__value_.__l.__data_, "Use classic AOT to generate E5 bundle on pre-H13 SoCs.  Opt-in, pre-approved use cases only.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_73:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_74;
LABEL_236:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_75;
      goto LABEL_237;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_73;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_236;
LABEL_74:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_75;
LABEL_237:
  operator delete(v16[3]);
LABEL_75:
  v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 12;
  strcpy((char *)v16, "dump-ir-only");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x50uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A72680;
  strcpy(v14.__r_.__value_.__l.__data_, "Emit internal IR instead of invoking hardware-specific backend compilers");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_77:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_78;
LABEL_240:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_79;
      goto LABEL_241;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_77;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_240;
LABEL_78:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_79;
LABEL_241:
  operator delete(v16[3]);
LABEL_79:
  v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 13;
  strcpy((char *)v16, "cpu-target-os");
  *(_QWORD *)__p = operator new(0x40uLL);
  *(_OWORD *)&__p[8] = xmmword_191A78330;
  strcpy(*(char **)__p, "Target OS for CPU compilation (e.g. macosx,tvos14,ios15.2.1).");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_81;
LABEL_243:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_82;
    goto LABEL_244;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_243;
LABEL_81:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_82;
LABEL_244:
  operator delete(v16[3]);
LABEL_82:
  v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 15;
  strcpy((char *)v16, "cpu-target-arch");
  *(_QWORD *)__p = operator new(0x40uLL);
  *(_OWORD *)&__p[8] = xmmword_191A73A70;
  strcpy(*(char **)__p, "Target architecture for CPU compilation (x86_64,arm64,arm64e).");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_84;
LABEL_246:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_85;
    goto LABEL_247;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_246;
LABEL_84:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_85;
LABEL_247:
  operator delete(v16[3]);
LABEL_85:
  v17 = 2;
  strcpy((char *)&v16[2] + 7, "\te5");
  strcpy((char *)v16, "platforms");
  Espresso::AOT::Utils::GetSupportedPlatformsStr(v3);
  v4 = std::string::insert(&v13, 0, "Comma-separated list of target platforms (");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v14, "). Note: Hxx specification above denotes a specific chip (the 'P' phone chip) and does not refer to an entire generation of chips. E.g., H11 refers to H11P/cyprus and does not include H11G/aruba as well.");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_87:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_88;
      goto LABEL_250;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_87;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_88:
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_89;
LABEL_251:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_252;
  }
LABEL_250:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_251;
LABEL_89:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_90;
LABEL_252:
  operator delete(v16[3]);
LABEL_90:
  v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 17;
  strcpy((char *)v16, "platform-families");
  Espresso::AOT::Utils::GetSupportedPlatformFamiliesStr(v8);
  v9 = std::string::insert(&v13, 0, "Comma-separated list of platform families (");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v14, "). Each family listed implies that a compiled artifact should be generated for every chip in that family. Families include all platforms the share the base name. For example, family H11 -> cyprus (H11) and aruba (H11G). Family M9 -> platform M9.");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_92:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_93;
      goto LABEL_255;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_92;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_93:
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_94;
LABEL_256:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_95;
    goto LABEL_257;
  }
LABEL_255:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_256;
LABEL_94:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_95;
LABEL_257:
  operator delete(v16[3]);
LABEL_95:
  v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 20;
  strcpy((char *)v16, "require-ane-resident");
  __p[23] = 2;
  strcpy(__p, "no");
  *((_BYTE *)&v14.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v14, "inference");
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xC8uLL);
  *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_191A8C9C0;
  strcpy(v13.__r_.__value_.__l.__data_, "Control ANE residency requirements: arg=inference -> inference ops must run on ANE; arg=strict: -> also disallow dat"
    "a conversion ops (quant, dequant, cast, etc.); arg=no -> allow all compute units");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefaultAndImplicit((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p, (uint64_t)&v14, (uint64_t)&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_97:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_98;
      goto LABEL_260;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_97;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) == 0)
  {
LABEL_98:
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_99;
LABEL_261:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_100;
    goto LABEL_262;
  }
LABEL_260:
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_261;
LABEL_99:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_100;
LABEL_262:
  operator delete(v16[3]);
LABEL_100:
  v17 = 2;
  strcpy((char *)&v16[3], "e5");
  HIBYTE(v16[2]) = 21;
  strcpy((char *)v16, "on-device-compilation");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x78uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A8C9D0;
  strcpy(v14.__r_.__value_.__l.__data_, "Perform on-device compilation.Note: Enabling this flag will cause the compiler to invoke on-device compilation APIs.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_102:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_103;
LABEL_265:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_104;
      goto LABEL_266;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_102;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_265;
LABEL_103:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_104;
LABEL_266:
  operator delete(v16[3]);
LABEL_104:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 18;
  strcpy((char *)v16, "backend-validation");
  *(_QWORD *)__p = operator new(0x90uLL);
  *(_OWORD *)&__p[8] = xmmword_191A8C9E0;
  strcpy(*(char **)__p, "Comma-separated list of compute units for which backend validation is used. [Deprecated] Note this is on for all compute units by default.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_106;
LABEL_268:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_107;
    goto LABEL_269;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_268;
LABEL_106:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_107;
LABEL_269:
  operator delete(v16[3]);
LABEL_107:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 8;
  strcpy((char *)v16, "mil-cost");
  *(_QWORD *)__p = operator new(0x90uLL);
  *(_OWORD *)&__p[8] = xmmword_191A72DB0;
  strcpy(*(char **)__p, "Comma-separated list of compute units for which mil based cost model is used.[Deprecated] Note this is on for all compute units by default.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_109;
LABEL_271:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_110;
    goto LABEL_272;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_271;
LABEL_109:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_110;
LABEL_272:
  operator delete(v16[3]);
LABEL_110:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 18;
  strcpy((char *)v16, "classic-validation");
  *(_QWORD *)__p = operator new(0x60uLL);
  *(_OWORD *)&__p[8] = xmmword_191A72450;
  strcpy(*(char **)__p, "Comma-separated list of compute units for which classic espresso based validation is used.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_112;
LABEL_274:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_275;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_274;
LABEL_112:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_113;
LABEL_275:
  operator delete(v16[3]);
LABEL_113:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 12;
  strcpy((char *)v16, "classic-cost");
  *(_QWORD *)__p = operator new(0x60uLL);
  *(_OWORD *)&__p[8] = xmmword_191A72450;
  strcpy(*(char **)__p, "Comma-separated list of compute units for which classic espresso based cost model is used.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_115;
LABEL_277:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_116;
    goto LABEL_278;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_277;
LABEL_115:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_116;
LABEL_278:
  operator delete(v16[3]);
LABEL_116:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_191A72420;
  strcpy(v16[0], "mil-cost-skip-decision-trees");
  *(_QWORD *)__p = operator new(0x98uLL);
  *(_OWORD *)&__p[8] = xmmword_191A8C9F0;
  strcpy(*(char **)__p, "Feature flag to skip using per MIL operator decision trees. The decision trees more accurately predict machine performance for cost estimation. ");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_118;
LABEL_280:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_119;
    goto LABEL_281;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_280;
LABEL_118:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_119;
LABEL_281:
  operator delete(v16[3]);
LABEL_119:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_191A8AA30;
  strcpy(v16[0], "enable-ranked-segmentation");
  *(_QWORD *)__p = operator new(0x78uLL);
  *(_OWORD *)&__p[8] = xmmword_191A8C9D0;
  strcpy(*(char **)__p, "Feature flag to enable segmentation based on a ranked choice of backends.Backend ranks provided in e5-compute-units ");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_121;
LABEL_283:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_122;
    goto LABEL_284;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_283;
LABEL_121:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_122;
LABEL_284:
  operator delete(v16[3]);
LABEL_122:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v16[1] = xmmword_191A78320;
  strcpy(v16[0], "enable-classic-cpu-fallback-for-mlc");
  *(_QWORD *)__p = operator new(0x58uLL);
  *(_OWORD *)&__p[8] = xmmword_191A8CA00;
  strcpy(*(char **)__p, "When MLC is enabled and this flag is true, classic CPU backend will be also enabled.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOption((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_124;
LABEL_286:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_125;
    goto LABEL_287;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_286;
LABEL_124:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_125;
LABEL_287:
  operator delete(v16[3]);
LABEL_125:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_191A72420;
  strcpy(v16[0], "disable-data-dependent-shape");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x90uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A8CA10;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to disable data-dependent shape. If this flag is true, E5 compiler will fail when the model has data-dependent output.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_127:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_128;
LABEL_290:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_129;
      goto LABEL_291;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_127;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_290;
LABEL_128:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_129;
LABEL_291:
  operator delete(v16[3]);
LABEL_129:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  strcpy((char *)v16, "enable-mpsgraphpackage");
  HIBYTE(v16[2]) = 22;
  __p[23] = 4;
  strcpy(__p, "true");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xF0uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A8CA20;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to enable or disable the creation of MPSGraphPackage within the E5 bundle. This flag may be ignored in some cases where the MIL source program cannot be pre-compiled to MPSGraphPackage due to some known E5ML issues.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_131:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_132;
LABEL_294:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_133;
      goto LABEL_295;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_131;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_294;
LABEL_132:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_133;
LABEL_295:
  operator delete(v16[3]);
LABEL_133:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v16[1] = xmmword_191A72440;
  strcpy(v16[0], "enable-default-function-for-range-dim");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A8CA30;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to enable or disable adding default function for models with RangeDim.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_135:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_136;
LABEL_298:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_137;
      goto LABEL_299;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_135;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_298;
LABEL_136:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_137;
LABEL_299:
  operator delete(v16[3]);
LABEL_137:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 19;
  strcpy((char *)v16, "move-read-state-ops");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A7C1B0;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to move read_state ops closer to theirconsumers during program canonicalization.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_139:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_140;
LABEL_302:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_141;
      goto LABEL_303;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_139;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_302;
LABEL_140:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_141;
LABEL_303:
  operator delete(v16[3]);
LABEL_141:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 18;
  strcpy((char *)v16, "shrink-quant-group");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A6F7B0;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to shrink quantization group.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_143:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_144;
LABEL_306:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_145;
      goto LABEL_307;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_143;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_306;
LABEL_144:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_145;
LABEL_307:
  operator delete(v16[3]);
LABEL_145:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_191A78340;
  strcpy(v16[0], "coalesce-ops-with-consumers");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x68uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A79C60;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to coalesce operations closer to their consumers during program canonicalization.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_147:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_148;
LABEL_310:
      operator delete(v16[0]);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_149;
      goto LABEL_311;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_147;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_310;
LABEL_148:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_149;
LABEL_311:
  operator delete(v16[3]);
LABEL_149:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v16[1] = xmmword_191A7C2C0;
  strcpy(v16[0], "match-e5-minimal-cpu-patterns");
  __p[23] = 5;
  strcpy(__p, "false");
  *((_BYTE *)&v14.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v14, "true");
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x120uLL);
  *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_191A8CA40;
  strcpy(v13.__r_.__value_.__l.__data_, "Flag to override whether to match patterns for E5MinimalCpu kernels. If enabled, patterns supported by the E5MinimalCpu backend will always be scheduled there. E5MinimalCpu is used to provide efficient support for operations that are not efficiently supported by any other backend.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefaultAndImplicit((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14, (uint64_t)&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_151:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_152;
      goto LABEL_314;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_151;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) == 0)
  {
LABEL_152:
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_153;
LABEL_315:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_154;
    goto LABEL_316;
  }
LABEL_314:
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_315;
LABEL_153:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_154;
LABEL_316:
  operator delete(v16[3]);
LABEL_154:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  v16[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v16[1] = xmmword_191A72DA0;
  strcpy(v16[0], "match-e5-minimal-cpu-patterns-for-states");
  __p[23] = 5;
  strcpy(__p, "false");
  *((_BYTE *)&v14.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v14, "true");
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x138uLL);
  *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = xmmword_191A8CA50;
  strcpy(v13.__r_.__value_.__l.__data_, "Flag to override whether to match patterns for E5MinimalCpu kernels. If enabled, ReadState and WriteState patterns supported by the E5MinimalCpu backend will always be scheduled there. E5MinimalCpu is used to provide efficient support for operations that are not efficiently supported by any other backend.");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefaultAndImplicit((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14, (uint64_t)&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v13.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_157;
      goto LABEL_319;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) == 0)
  {
LABEL_157:
    if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
      goto LABEL_158;
LABEL_320:
    operator delete(v16[0]);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_159;
    goto LABEL_321;
  }
LABEL_319:
  operator delete(*(void **)__p);
  if (SHIBYTE(v16[2]) < 0)
    goto LABEL_320;
LABEL_158:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_159;
LABEL_321:
  operator delete(v16[3]);
LABEL_159:
  v17 = 12;
  strcpy((char *)&v16[3], "experimental");
  HIBYTE(v16[2]) = 14;
  strcpy((char *)v16, "merge-segments");
  __p[23] = 5;
  strcpy(__p, "false");
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x80uLL);
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_191A8CA60;
  strcpy(v14.__r_.__value_.__l.__data_, "Experimental flag to merge segments if possible (segments must use the same backend and may not create a cycle in the graph).");
  Espresso::AOT::AOTCompilerOptionsManager::AddOptionWithDefault((uint64_t *)this, (uint64_t)&v16[3], (uint64_t)v16, 0, (uint64_t)__p, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_161:
      if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
        goto LABEL_162;
      goto LABEL_324;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_161;
  }
  operator delete(*(void **)__p);
  if ((SHIBYTE(v16[2]) & 0x80000000) == 0)
  {
LABEL_162:
    if ((v17 & 0x80000000) == 0)
      return;
LABEL_325:
    operator delete(v16[3]);
    return;
  }
LABEL_324:
  operator delete(v16[0]);
  if (v17 < 0)
    goto LABEL_325;
}

void sub_19115A3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((a36 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a36 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v36 - 73) < 0)
    {
      operator delete(*(void **)(v36 - 96));
      if ((*(char *)(v36 - 49) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
    }
    else if ((*(char *)(v36 - 49) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)(v36 - 72));
    _Unwind_Resume(exception_object);
  }
  operator delete(a31);
  goto LABEL_6;
}

void std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v4 + 2));
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      for (i = 0; i != v6; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v8 = *a2;
  *a2 = 0;
  v9 = *(void **)a1;
  *(_QWORD *)a1 = v8;
  if (v9)
    operator delete(v9);
  v12 = a2[2];
  v11 = a2 + 2;
  v10 = v12;
  v13 = *(v11 - 1);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  v14 = v11[1];
  *(_QWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 8);
    v16 = *(_QWORD *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16)
        v15 %= v16;
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = a1 + 16;
    *v11 = 0;
    v11[1] = 0;
  }
}

void Espresso::AOT::Backends::CostModel::NormalizeOpEstimator::EstimateComputeResources(const MIL::IROperation *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  Espresso::AOT *ParameterType;
  Espresso::AOT *OutputType;
  const MIL::IRValueType *v8;
  const MIL::IRValueType *v9;
  const MIL::IRValueType *v10;
  unint64_t NumElementsSkipUnknownDims;
  const MIL::IRValueType *v12;
  const MIL::IRValueType *v13;
  const MIL::IRValueType *v14;
  const MIL::IRValueType *v15;
  double SizeInMbForShape;
  double v17;
  double v18;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *a2 = v5;
  ParameterType = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  OutputType = (Espresso::AOT *)MIL::IROperation::TryGetOutputType(a1);
  *(double *)(v5 + 56) = Espresso::AOT::GetXDimOfTensorFromIRValueType(ParameterType, v8);
  *(double *)(v5 + 72) = Espresso::AOT::GetXDimOfTensorFromIRValueType(OutputType, v9);
  NumElementsSkipUnknownDims = Espresso::AOT::GetNumElementsSkipUnknownDims(ParameterType, v10);
  *(double *)v5 = ((double)(unint64_t)(2 * Espresso::AOT::GetNumElementsSkipUnknownDims(ParameterType, v12))
                 + (double)NumElementsSkipUnknownDims * 35.0)
                * 0.000000001;
  *(double *)(v5 + 32) = Espresso::AOT::GetSizeInMbForShape(ParameterType, v13);
  SizeInMbForShape = Espresso::AOT::GetSizeInMbForShape(OutputType, v14);
  *(double *)(v5 + 40) = SizeInMbForShape;
  v17 = *(double *)(v5 + 24) + SizeInMbForShape + *(double *)(v5 + 32);
  *(double *)(v5 + 8) = v17;
  v18 = 0.0;
  if (v17 > 0.0)
    v18 = *(double *)v5 * 1000.0 / v17;
  *(double *)(v5 + 48) = v18;
  *(double *)(v5 + 136) = Espresso::AOT::GetWU16EfficiencyForInputType(ParameterType, v15);
}

void sub_19115AB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;

  *v15 = 0;
  MEMORY[0x19401CD90](v16, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::AOT::MILCompilerForJitCall::MILCompilerForJitCall(_QWORD *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  void *v16[2];
  int v17;
  _BYTE v18[136];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  v6 = *(void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = *(_QWORD **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((_QWORD *)v6 + v10) = v16;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0)
LABEL_16:
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *a1 = &off_1E2DA0758;
  Espresso::AOT::MILCompilerForJitCall::ExtractOptions(a2, (uint64_t)(a1 + 33));
  a1[36] = 0;
  a1[37] = 0;
  a1[38] = 0;
  return a1;
}

void sub_19115ACE4(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler *v1;

  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_19115ACF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForJitCall::ExtractOptions(Espresso::AOT::MILCompilerForJitCall *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Output;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::logic_error *exception;

  Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if ((*(char *)(Output + 23) & 0x80000000) == 0)
  {
    v5 = *(_OWORD *)Output;
    v6 = *(_QWORD *)(Output + 16);
    *(_QWORD *)(a2 + 16) = v6;
    *(_OWORD *)a2 = v5;
    v7 = HIBYTE(v6);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 8);
    if (v7)
      return;
LABEL_9:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "--output is required and must be non-empty.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)Output, *(_QWORD *)(Output + 8));
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    goto LABEL_9;
}

void sub_19115ADD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForJitCall::Options::AssertValid(uint64_t this)
{
  std::logic_error *exception;

  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(this + 23))
      return this;
LABEL_5:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (!*(_QWORD *)(this + 8))
    goto LABEL_5;
  return this;
}

void sub_19115AE64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForJitCall::Run(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t Function;
  uint64_t v8;
  char ***v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::__fs::filesystem::path::__string_view v20;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v22;
  std::basic_string_view<_CharT, _Traits>::size_type v23;
  void **v24;
  std::__shared_weak_count_vtbl *v25;
  unsigned __int8 v26;
  int v27;
  std::__shared_weak_count_vtbl *v28;
  std::runtime_error *v29;
  std::logic_error *exception;
  std::logic_error *v31;
  std::logic_error *v32;
  std::string __p;
  std::string v34;
  std::string v35;
  std::string pn;
  std::__fs::filesystem::path __base;
  std::__fs::filesystem::path v38;
  std::__fs::filesystem::path v39;
  std::__fs::filesystem::path v40;
  std::__fs::filesystem::path v41;
  std::__shared_weak_count_vtbl *v42;
  void *v43[2];
  char v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  std::string __dst;
  uint64_t v49;

  v45 = 0x2B23831400000000;
  v46 = 0u;
  v47 = 0u;
  kdebug_trace();
  v6 = a3;
  v5 = *a3;
  if (v6[1] - v5 != 24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one entry point is supported.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  Function = MIL::IRProgram::GetFunction();
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 40))(Function);
  v9 = (char ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
  v10 = **v9;
  if ((*v9)[1] - v10 != 16)
  {
    v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v31, "Only one op in block is supported.");
    v31->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v31, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v11 = *(_QWORD *)v10;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v10 + 64))(*(_QWORD *)v10);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 128))(v12) & 1) == 0)
  {
    v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "Only call op in block is supported.");
    v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v32, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 120))(v43, v13, v11);
  v14 = MIL::IRProgram::GetFunction();
  Espresso::AOT::MakeIRProgramWithFunction(v14, 1, (uint64_t)v43, &v42);
  memset(&v41, 0, sizeof(v41));
  v15 = *(_BYTE *)(a1 + 287);
  if (v15 >= 0)
    v16 = (std::string *)(a1 + 264);
  else
    v16 = *(std::string **)(a1 + 264);
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 287);
  else
    v17 = *(_QWORD *)(a1 + 272);
  std::string::append[abi:ne180100]<char const*,0>(&v41.__pn_, v16, (std::string *)((char *)v16 + v17));
  memset(&__dst, 0, sizeof(__dst));
  v18 = *(unsigned __int8 *)(v5 + 23);
  if ((v18 & 0x80u) == 0)
    v19 = (std::string *)v5;
  else
    v19 = *(std::string **)v5;
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(v5 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v19, (std::string *)((char *)v19 + v18));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v41, &v40);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__create_directories(&v40, 0);
  memset(&__dst, 0, sizeof(__dst));
  std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)"jit_call.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v40, &v39);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v20 = std::__fs::filesystem::path::__parent_path(&v41);
  if (v20.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v20.__size_ >= 0x17)
  {
    v22 = (v20.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20.__size_ | 7) != 0x17)
      v22 = v20.__size_ | 7;
    v23 = v22 + 1;
    p_dst = (std::string *)operator new(v22 + 1);
    __dst.__r_.__value_.__l.__size_ = v20.__size_;
    __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_26;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v20.__size_;
  p_dst = &__dst;
  if (v20.__size_)
LABEL_26:
    memmove(p_dst, v20.__data_, v20.__size_);
  p_dst->__r_.__value_.__s.__data_[v20.__size_] = 0;
  __base.__pn_ = __dst;
  std::__fs::filesystem::path::lexically_relative(&v38, &v39, &__base);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  memset(&__base, 0, sizeof(__base));
  std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"weights.bin", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100](&__base, (uint64_t)&v40, (std::__fs::filesystem::path *)&__dst);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
  }
  else if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    __base = v38;
    goto LABEL_34;
  }
  std::string::__init_copy_ctor_external(&__base.__pn_, v38.__pn_.__r_.__value_.__l.__data_, v38.__pn_.__r_.__value_.__l.__size_);
LABEL_34:
  v24 = (void **)(a1 + 288);
  if (*(char *)(a1 + 311) < 0)
    operator delete(*v24);
  *(_OWORD *)v24 = *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 304) = *((_QWORD *)&__base.__pn_.__r_.__value_.__l + 2);
  v25 = v42;
  if (SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v39.__pn_.__r_.__value_.__l.__data_, v39.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v39.__pn_;
  if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v40.__pn_.__r_.__value_.__l.__data_, v40.__pn_.__r_.__value_.__l.__size_);
  else
    v35 = v40.__pn_;
  if (Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1))
  {
    memset(&__base, 0, sizeof(__base));
    std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"", (std::string *)"");
  }
  else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__base.__pn_, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else
  {
    __base.__pn_ = __dst;
  }
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, __base.__pn_.__r_.__value_.__l.__data_, __base.__pn_.__r_.__value_.__l.__size_);
  else
    v34 = __base.__pn_;
  Espresso::MILUtil::SerializeProgram((uint64_t)v25, (uint64_t)&pn, (uint64_t)&v35, (uint64_t)&v34, 0x100000004, 0);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_52:
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_58;
    }
  }
  else if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_54;
LABEL_59:
    operator delete(pn.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_60;
  }
LABEL_58:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_59;
LABEL_54:
  if ((SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    __p = v39.__pn_;
    goto LABEL_61;
  }
LABEL_60:
  std::string::__init_copy_ctor_external(&__p, v39.__pn_.__r_.__value_.__l.__data_, v39.__pn_.__r_.__value_.__l.__size_);
LABEL_61:
  __base.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__status(&__base, 0);
  v26 = v49;
  if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_63;
LABEL_66:
    operator delete(__p.__r_.__value_.__l.__data_);
    v27 = v26;
    if (v26 == 255)
      goto LABEL_86;
    goto LABEL_67;
  }
  operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_66;
LABEL_63:
  v27 = v26;
  if (v26 == 255)
  {
LABEL_86:
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v29, "Failed in serializing JITCall MIL program on disk.");
    __cxa_throw(v29, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_67:
  if (!v27)
    goto LABEL_86;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_70:
      if ((SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_71;
      goto LABEL_82;
    }
  }
  else if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(v38.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_71:
    if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(v39.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v40.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_73:
    v28 = v42;
    v42 = 0;
    if (!v28)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_84:
  operator delete(v41.__pn_.__r_.__value_.__l.__data_);
  v28 = v42;
  v42 = 0;
  if (v28)
LABEL_74:
    (*((void (**)(std::__shared_weak_count_vtbl *))v28->~__shared_weak_count + 1))(v28);
LABEL_75:
  if (v44 < 0)
    operator delete(v43[0]);
  if (E5RT::g_trace_analysis_level >= v45)
    kdebug_trace();
}

void sub_19115B56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;
  uint64_t v62;

  if (*(char *)(v60 - 73) < 0)
    operator delete(*(void **)(v60 - 96));
  if (a48 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  if (a60 < 0)
    operator delete(a55);
  if (*(char *)(v60 - 169) < 0)
  {
    operator delete(*(void **)(v60 - 192));
    v62 = *(_QWORD *)(v60 - 168);
    *(_QWORD *)(v60 - 168) = 0;
    if (!v62)
    {
LABEL_11:
      if ((*(char *)(v60 - 137) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_15;
    }
  }
  else
  {
    v62 = *(_QWORD *)(v60 - 168);
    *(_QWORD *)(v60 - 168) = 0;
    if (!v62)
      goto LABEL_11;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  if ((*(char *)(v60 - 137) & 0x80000000) == 0)
  {
LABEL_12:
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v60 - 136));
    _Unwind_Resume(a1);
  }
LABEL_15:
  operator delete(*(void **)(v60 - 160));
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v60 - 136));
  _Unwind_Resume(a1);
}

void sub_19115B820(_Unwind_Exception *a1)
{
  uint64_t v1;

  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 136));
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForJitCall::GetOutputPaths(Espresso::AOT::MILCompilerForJitCall *this@<X0>, _QWORD *a2@<X8>)
{
  std::string __p;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 311) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 36), *((_QWORD *)this + 37));
  else
    __p = *(std::string *)((_BYTE *)this + 12);
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19115B8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForJitCall::GetOptions(Espresso::AOT::MILCompilerForJitCall *this)
{
  return (uint64_t)this + 264;
}

void Espresso::AOT::MILCompilerForJitCall::~MILCompilerForJitCall(void **this)
{
  Espresso::AOT::MILCompilerForJitCall::~MILCompilerForJitCall(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;
  void **v3;
  void *v4;

  *this = &off_1E2DA0758;
  if (*((char *)this + 311) < 0)
  {
    operator delete(this[36]);
    if ((*((char *)this + 287) & 0x80000000) == 0)
    {
LABEL_3:
      *this = off_1E2DA0650;
      v2 = (void **)this[29];
      if (!v2)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[33]);
  *this = off_1E2DA0650;
  v2 = (void **)this[29];
  if (!v2)
  {
LABEL_4:
    if ((*((char *)this + 231) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_17:
    operator delete(this[26]);
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_18:
    operator delete(this[23]);
    Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
    return;
  }
LABEL_10:
  v3 = (void **)this[30];
  if (v3 == v2)
  {
    this[30] = v2;
    operator delete(v2);
    if (*((char *)this + 231) < 0)
      goto LABEL_17;
  }
  else
  {
    do
    {
      if (*((char *)v3 - 1) < 0)
        operator delete(*(v3 - 3));
      v3 -= 3;
    }
    while (v3 != v2);
    v4 = this[29];
    this[30] = v2;
    operator delete(v4);
    if (*((char *)this + 231) < 0)
      goto LABEL_17;
  }
LABEL_5:
  if (*((char *)this + 207) < 0)
    goto LABEL_18;
LABEL_6:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
}

void Espresso::AOT::Backends::CostModel::BaseMatmulOpEstimator::EstimateComputeResources(const MIL::IROperation *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  Espresso::AOT *ParameterType;
  Espresso::AOT *v7;
  Espresso::AOT *OutputType;
  const MIL::IRValueType *v9;
  const MIL::IRValueType *v10;
  const MIL::IRValueType *v11;
  const MIL::IRValueType *v12;
  const MIL::IRValueType *v13;
  const MIL::IRValueType *v14;
  const MIL::IRValueType *v15;
  const MIL::IRValueType *v16;
  _BYTE *v17;
  int v18;
  uint64_t ParameterValue;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  double FlopCountForMatMul;
  Espresso::AOT *v24;
  const MIL::IRValueType *v25;
  const MIL::IRValueType *v26;
  Espresso::AOT *v27;
  const MIL::IRValueType *v28;
  double SizeInMbForShape;
  double v30;
  double v31;
  const MIL::IRValueType *v32;
  const MIL::IRValueType *v33;
  const MIL::IRValueType *v34;
  void *v35[2];
  char v36;
  void *v37[3];
  void *v38[2];
  char v39;
  void *__p[2];
  char v41;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *a2 = v5;
  v41 = 1;
  LOWORD(__p[0]) = 120;
  ParameterType = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  v7 = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  OutputType = (Espresso::AOT *)MIL::IROperation::TryGetOutputType(a1);
  *(double *)(v5 + 56) = Espresso::AOT::GetXDimOfTensorFromIRValueType(ParameterType, v9);
  *(double *)(v5 + 64) = Espresso::AOT::GetYDimOfTensorFromIRValueType(ParameterType, v10);
  *(double *)(v5 + 72) = Espresso::AOT::GetXDimOfTensorFromIRValueType(OutputType, v11);
  *(double *)(v5 + 80) = Espresso::AOT::GetYDimOfTensorFromIRValueType(OutputType, v12);
  *(double *)(v5 + 104) = Espresso::AOT::GetXDimOfTensorFromIRValueType(v7, v13);
  *(double *)(v5 + 112) = Espresso::AOT::GetYDimOfTensorFromIRValueType(v7, v14);
  Espresso::AOT::GetDimsOfTensorFromIRValueType(ParameterType, v15, __p);
  v39 = 11;
  strcpy((char *)v38, "transpose_x");
  v18 = MIL::IROperation::TryGetParameterValue() && (v17 = (_BYTE *)MEMORY[0x19401C3F4]()) != 0 && *v17 != 0;
  Espresso::AOT::GetDimsOfTensorFromIRValueType(v7, v16, v37);
  v36 = 11;
  strcpy((char *)v35, "transpose_y");
  ParameterValue = MIL::IROperation::TryGetParameterValue();
  v22 = ParameterValue && (v21 = (_BYTE *)MEMORY[0x19401C3F4](ParameterValue, v20)) != 0 && *v21 != 0;
  FlopCountForMatMul = Espresso::AOT::GetFlopCountForMatMul((char **)__p, v18, (char **)v37, v22);
  if (v36 < 0)
    operator delete(v35[0]);
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  if (v39 < 0)
    operator delete(v38[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v24 = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
  if (v24)
    FlopCountForMatMul = FlopCountForMatMul
                       + (double)(unint64_t)Espresso::AOT::GetNumElementsSkipUnknownDims(v24, v25);
  *(double *)v5 = FlopCountForMatMul * 0.000000001;
  *(double *)(v5 + 24) = Espresso::AOT::GetSizeInMbForShape(v7, v25);
  *(double *)(v5 + 32) = Espresso::AOT::GetSizeInMbForShape(ParameterType, v26);
  v27 = (Espresso::AOT *)MIL::IROperation::GetOutputType(a1);
  SizeInMbForShape = Espresso::AOT::GetSizeInMbForShape(v27, v28);
  v30 = *(double *)(v5 + 24) + SizeInMbForShape + *(double *)(v5 + 32);
  *(double *)(v5 + 8) = v30;
  v31 = *(double *)v5 * 1000.0 / v30;
  *(double *)(v5 + 40) = SizeInMbForShape;
  *(double *)(v5 + 48) = v31;
  *(double *)(v5 + 88) = Espresso::AOT::GetBatchDimOfTensorFromIRValueType(v7, v32);
  *(double *)(v5 + 96) = Espresso::AOT::GetChannelDimOfTensorFromIRValueType(v7, v33);
  *(double *)(v5 + 16) = *(double *)(v5 + 24) * 1024.0 / *(double *)(v5 + 88);
  *(double *)(v5 + 136) = Espresso::AOT::GetWU16EfficiencyForInputType(ParameterType, v34);
}

void sub_19115BD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _QWORD *v29;
  uint64_t v30;
  void *v32;

  if (a23 < 0)
  {
    operator delete(__p);
    v32 = a24;
    if (!a24)
      goto LABEL_6;
  }
  else
  {
    v32 = a24;
    if (!a24)
    {
LABEL_6:
      *v29 = 0;
      MEMORY[0x19401CD90](v30, 0x1000C401CC6BE04);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v32);
  goto LABEL_6;
}

void Espresso::AOT::Backends::CostModel::BaseMatmulOpEstimator::~BaseMatmulOpEstimator(void **this)
{
  *this = off_1E2DA0BC8;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[1]);
    Espresso::AOT::AbstractMILOpResourceEstimator::~AbstractMILOpResourceEstimator((Espresso::AOT::AbstractMILOpResourceEstimator *)this);
    return;
  }
  if (*((char *)this + 31) < 0)
    goto LABEL_6;
LABEL_3:
  Espresso::AOT::AbstractMILOpResourceEstimator::~AbstractMILOpResourceEstimator((Espresso::AOT::AbstractMILOpResourceEstimator *)this);
}

{
  *this = off_1E2DA0BC8;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
LABEL_3:
    Espresso::AOT::AbstractMILOpResourceEstimator::~AbstractMILOpResourceEstimator((Espresso::AOT::AbstractMILOpResourceEstimator *)this);
    JUMPOUT(0x19401CD90);
  }
  operator delete(this[1]);
  goto LABEL_3;
}

void Espresso::AOT::Backends::CostModel::ConcatOpEstimator::EstimateComputeResources(const MIL::IROperation *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;
  const MIL::IRValueType *v8;
  Espresso::AOT *ParameterType;
  const MIL::IRValueType *v10;
  Espresso::AOT *OutputType;
  const MIL::IRValueType *v12;
  uint64_t v13;
  Espresso::AOT *v14;
  const MIL::IRValueType *v15;
  const MIL::IRValueType *v16;
  double v17;
  const MIL::IRValueType *v18;
  char __p[23];
  char v20;

  v5 = operator new();
  v6 = 0;
  v7 = 0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 144) = 0;
  *a2 = v5;
  while (1)
  {
    v20 = 6;
    strcpy(__p, "values");
    ParameterType = (Espresso::AOT *)MIL::IROperation::TryGetParameterType();
    if (!ParameterType)
      break;
    *(double *)(v5 + 32) = *(double *)(v5 + 32) + Espresso::AOT::GetSizeInMbForShape(ParameterType, v8);
    v6 += Espresso::AOT::GetNumElementsSkipUnknownDims(ParameterType, v10);
    ++v7;
  }
  OutputType = (Espresso::AOT *)MIL::IROperation::GetOutputType(a1);
  *(double *)(v5 + 88) = Espresso::AOT::GetChannelDimOfTensorFromIRValueType(OutputType, v12);
  v20 = 6;
  strcpy(__p, "values");
  v13 = MIL::IROperation::TryGetParameterType();
  v14 = (Espresso::AOT *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  *(double *)(v5 + 56) = Espresso::AOT::GetXDimOfTensorFromIRValueType(v14, v15);
  *(double *)(v5 + 72) = Espresso::AOT::GetXDimOfTensorFromIRValueType(OutputType, v16);
  v17 = *(double *)(v5 + 32);
  *(double *)v5 = (double)v6 * 0.000000001;
  *(double *)(v5 + 8) = v17 + v17;
  *(double *)(v5 + 40) = v17;
  *(double *)(v5 + 48) = (double)v6 * 0.000001 / (v17 + v17);
  *(double *)(v5 + 136) = Espresso::AOT::GetWU16EfficiencyForInputType(v14, v18);
}

void sub_19115C0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  *v15 = 0;
  MEMORY[0x19401CD90](v16, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::AOT::MILCompilerForClassicCpu::MILCompilerForClassicCpu(_QWORD *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  void *v16[2];
  int v17;
  _BYTE v18[136];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  v6 = *(void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = *(_QWORD **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((_QWORD *)v6 + v10) = v16;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0)
LABEL_16:
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *a1 = &off_1E2DA0868;
  Espresso::AOT::MILCompilerForClassicCpu::ExtractOptions(a2, (uint64_t)(a1 + 33));
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  return a1;
}

void sub_19115C224(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler *v1;

  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_19115C238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForClassicCpu::ExtractOptions(Espresso::AOT::MILCompilerForClassicCpu *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Output;
  __int128 v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  void *v15;
  void **v16;
  void **v17;
  uint64_t v18;
  void *v19;
  std::logic_error *exception;
  void *v21[2];
  char v22;
  void *__p[5];
  void *v24[2];
  void *v25;

  HIBYTE(__p[2]) = 3;
  LODWORD(__p[0]) = 7696483;
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)__p, (uint64_t)v24);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)Output, *(_QWORD *)(Output + 8));
  }
  else
  {
    v6 = *(_OWORD *)Output;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(Output + 16);
    *(_OWORD *)a2 = v6;
  }
  *(_WORD *)(a2 + 24) = 0;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "use-fast-reshape");
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v24, (uint64_t)__p);
  v8 = v7;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!v8)
      goto LABEL_12;
  }
  else if (!v7)
  {
    goto LABEL_12;
  }
  if (*((_DWORD *)v8 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_BYTE *)(a2 + 24) = *((_BYTE *)v8 + 40);
LABEL_12:
  v22 = 2;
  strcpy((char *)v21, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)v21, (uint64_t)__p);
  if (v22 < 0)
    operator delete(v21[0]);
  v22 = 12;
  strcpy((char *)v21, "dump-ir-only");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v21);
  v10 = v9;
  if (v22 < 0)
  {
    operator delete(v21[0]);
    if (!v10)
      goto LABEL_20;
  }
  else if (!v9)
  {
    goto LABEL_20;
  }
  if (*((_DWORD *)v10 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_BYTE *)(a2 + 25) = *((_BYTE *)v10 + 40);
LABEL_20:
  v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a2 + 8);
  if (!v11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "--output is required and must be non-empty.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v12 = (void **)__p[2];
  if (__p[2])
  {
    do
    {
      v13 = (void **)*v12;
      v14 = *((unsigned int *)v12 + 16);
      if ((_DWORD)v14 != -1)
        ((void (*)(void **, void **))off_1E2DD1728[v14])(v21, v12 + 5);
      *((_DWORD *)v12 + 16) = -1;
      if (*((char *)v12 + 39) < 0)
        operator delete(v12[2]);
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  v15 = __p[0];
  __p[0] = 0;
  if (v15)
    operator delete(v15);
  v16 = (void **)v25;
  if (v25)
  {
    do
    {
      v17 = (void **)*v16;
      v18 = *((unsigned int *)v16 + 16);
      if ((_DWORD)v18 != -1)
        ((void (*)(void **, void **))off_1E2DD1728[v18])(__p, v16 + 5);
      *((_DWORD *)v16 + 16) = -1;
      if (*((char *)v16 + 39) < 0)
        operator delete(v16[2]);
      operator delete(v16);
      v16 = v17;
    }
    while (v17);
  }
  v19 = v24[0];
  v24[0] = 0;
  if (v19)
    operator delete(v19);
}

void sub_19115C51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a16);
  if (*(char *)(v24 + 23) < 0)
    operator delete(*(void **)v24);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForClassicCpu::Options::AssertValid(uint64_t this)
{
  std::logic_error *exception;

  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(this + 23))
      return this;
LABEL_5:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (!*(_QWORD *)(this + 8))
    goto LABEL_5;
  return this;
}

void sub_19115C63C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForClassicCpu::AddNetProperties(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t **v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t **i;
  int v11;
  unint64_t v12;
  uint64_t *v13;
  size_t v14;
  int v15;
  BOOL v16;
  int v17;
  _BOOL4 v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Function;
  uint64_t **v24;
  _OWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  const MIL::IRValueType *v38;
  _QWORD *v39;
  _QWORD *v40;
  MIL::IRMemoryLayoutValueType *v41;
  MIL::IRPixelBufferValueType *v42;
  int PixelFormatType;
  _BYTE *v44;
  unsigned int v45;
  _BOOL4 v46;
  _QWORD *v47;
  _QWORD *v48;
  BOOL v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::logic_error *exception;
  std::string *v60;
  __int128 v61;
  std::logic_error *v62;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::string v67;
  std::string v68;
  std::string __p;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;

  v7 = (uint64_t **)(*a4 + 472);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "useValueInference");
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7, &__p, (uint64_t)&std::piecewise_construct, &v68);
  MEMORY[0x19401C808]((char *)v8 + 56, "1");
  v64 = a3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = *a4;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__p, "ane_compiler_batch");
  for (i = *(uint64_t ***)(v9 + 480); i; i = (uint64_t **)*i)
  {
    v11 = *((char *)i + 55);
    if (v11 >= 0)
      v12 = *((unsigned __int8 *)i + 55);
    else
      v12 = (unint64_t)i[5];
    if (v11 >= 0)
      v13 = (uint64_t *)(i + 4);
    else
      v13 = i[4];
    if (v12 >= 0x12)
      v14 = 18;
    else
      v14 = v12;
    v15 = memcmp(&__p, v13, v14);
    v16 = v15 < 0;
    if (!v15)
      v16 = v12 > 0x12;
    if (!v16)
    {
      v17 = memcmp(v13, &__p, v14);
      v18 = v12 < 0x12;
      if (v17)
        v18 = v17 < 0;
      if (!v18)
      {
        v20 = v64;
        Function = MIL::IRProgram::GetFunction();
        if (Espresso::AOT::HasFlexibleShapeWithRangeConfig(Function))
          goto LABEL_28;
        goto LABEL_31;
      }
      ++i;
    }
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__p, "ane_compiler_batch");
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v9 + 472), &__p, (uint64_t)&std::piecewise_construct, &v68);
  MEMORY[0x19401C808]((char *)v19 + 56, "1");
  v20 = v64;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v22 = MIL::IRProgram::GetFunction();
    if (!Espresso::AOT::HasFlexibleShapeWithRangeConfig(v22))
      goto LABEL_31;
  }
  else
  {
    v21 = MIL::IRProgram::GetFunction();
    if (!Espresso::AOT::HasFlexibleShapeWithRangeConfig(v21))
      goto LABEL_31;
  }
LABEL_28:
  if (*(_BYTE *)(a1 + 288))
  {
    v24 = (uint64_t **)(*a4 + 472);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__p, "fast_reshape");
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24, &__p, (uint64_t)&std::piecewise_construct, &v68);
    MEMORY[0x19401C808]((char *)v25 + 56, "1");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_31:
  v26 = (std::__shared_weak_count *)a4[1];
  v65 = *a4;
  v66 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v75, a2);
  v29 = MIL::IRProgram::GetFunction();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(&v73, a2, v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v73 + 48))(v73);
  v70 = v75;
  v71 = v76;
  if (v76)
  {
    v30 = (unint64_t *)&v76->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  if (*(char *)(v32 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v32, *(_QWORD *)(v32 + 8));
  }
  else
  {
    v33 = *(_OWORD *)v32;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v32 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
  }
  MIL::Builder::BlockBuilder::Make();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v34 = v71;
  if (v71)
  {
    v35 = (unint64_t *)&v71->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 128))(v29);
  v39 = v37 + 1;
  v40 = (_QWORD *)*v37;
  if ((_QWORD *)*v37 != v37 + 1)
  {
    do
    {
      if (E5Common::Utils::IsPixelBuffer((E5Common::Utils *)v40[7], v38))
      {
        v41 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType((MIL::IRValueType *)v40[7]);
        v42 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v41);
        PixelFormatType = MIL::IRPixelBufferValueType::GetPixelFormatType(v42);
        switch(PixelFormatType)
        {
          case 1:
            v44 = &unk_191A8CBA4;
            break;
          case 2:
            v44 = &unk_191A8CBA0;
            break;
          case 12:
            break;
          case 14:
            v44 = &unk_191A8CB9C;
            break;
          default:
            v44 = &unk_191A8CBA8;
            break;
        }
        if (v44
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRPixelFormatTypeToString();
          v60 = std::string::insert(&v67, 0, "Unsupported IRPixelFormatType: ");
          v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
          v68.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v61;
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          std::logic_error::logic_error(exception, &v68);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        v45 = PixelFormatType & 0xFFFFFFFD;
        if ((PixelFormatType & 0xFFFFFFFD) == 0xC
          && *(_QWORD *)(MIL::Builder::BlockBuilder::GetOperationsByInput() + 24) != 1)
        {
          v62 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v62, "Found multiple consumers for a pixel buffer which is not supported.");
          v62->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(v62, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
        }
        v46 = v45 == 12;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)(v40 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v65 + 328), v40 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 16) = v46;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)(v40 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v65 + 328), v40 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 17) = v46;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)(v40 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v65 + 328), v40 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 14) = 1065353216;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)(v40 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v65 + 328), v40 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 15) = 0;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)(v40 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v65 + 328), v40 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 18) = 0;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)(v40 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v65 + 328), v40 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 19) = 0;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)(v40 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v65 + 328), v40 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 20) = 0;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)(v40 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v65 + 328), v40 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v68)+ 21) = 0;
      }
      v47 = (_QWORD *)v40[1];
      if (v47)
      {
        do
        {
          v48 = v47;
          v47 = (_QWORD *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (_QWORD *)v40[2];
          v49 = *v48 == (_QWORD)v40;
          v40 = v48;
        }
        while (!v49);
      }
      v40 = v48;
    }
    while (v48 != v39);
  }
  v50 = v72;
  v72 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = v74;
  if (v74)
  {
    v52 = (unint64_t *)&v74->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v76;
  if (v76)
  {
    v55 = (unint64_t *)&v76->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v66)
  {
    v57 = (unint64_t *)&v66->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_19115CDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  if (a34 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForClassicCpu::Run(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t Function;
  char v8;
  std::__fs::filesystem::path *v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  uint64_t v15;
  std::string::size_type v16;
  char v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__fs::filesystem::path::__string_view v34;
  _BYTE *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v36;
  std::basic_string_view<_CharT, _Traits>::size_type v37;
  void **v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  char v44;
  BOOL v45;
  std::__shared_weak_count *v46;
  std::runtime_error *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count_vtbl *v51;
  std::logic_error *exception;
  std::logic_error *v53;
  std::runtime_error *v54;
  std::string v55;
  std::__fs::filesystem::path v56;
  std::__fs::filesystem::path v57;
  std::__fs::filesystem::path v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  std::string __str;
  uint64_t v64;
  std::__shared_weak_count *v65;
  _QWORD v66[2];
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::__fs::filesystem::path __base;
  std::string __p;
  std::string pn;
  std::__fs::filesystem::path v77;
  std::__fs::filesystem::path v78;
  std::string::size_type v79;
  std::__shared_weak_count_vtbl *v80;
  void *v81[2];
  char v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  std::__fs::filesystem::path __dst;
  unsigned __int8 v87;
  std::__fs::filesystem::path v88;
  std::__fs::filesystem::path *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v83 = 0x2B23806000000000;
  v84 = 0u;
  v85 = 0u;
  kdebug_trace();
  v6 = a3;
  v5 = *a3;
  if (v6[1] - v5 != 24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one entry point is supported.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  Function = MIL::IRProgram::GetFunction();
  v88.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB20B0;
  v89 = &v88;
  v8 = MIL::Util::Walk();
  v9 = v89;
  if (v89 == &v88)
  {
    v10 = 4;
    v9 = &v88;
  }
  else
  {
    if (!v89)
      goto LABEL_7;
    v10 = 5;
  }
  (*(void (**)(void))(v9->__pn_.__r_.__value_.__r.__words[0] + 8 * v10))();
LABEL_7:
  if ((v8 & 1) == 0)
  {
    v53 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v53, "Nested functions are not supported.");
    v53->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v53, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v82 = 4;
  strcpy((char *)v81, "main");
  Espresso::AOT::MakeIRProgramWithFunction(Function, 1, v5, &v80);
  Espresso::AOT::ReplacePixelBufferByTensor((uint64_t)v80);
  Espresso::AOT::ReplaceTensorBufferByTensor(v79);
  v11 = v88.__pn_.__r_.__value_.__r.__words[0];
  v88.__pn_.__r_.__value_.__r.__words[0] = 0;
  v12 = v79;
  v79 = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v88.__pn_.__r_.__value_.__r.__words[0];
    v88.__pn_.__r_.__value_.__r.__words[0] = 0;
    if (v13)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v13 + 8))(v13);
  }
  Espresso::AOT::ReplaceGatherNDWithGather(v79);
  v14 = v88.__pn_.__r_.__value_.__r.__words[0];
  v88.__pn_.__r_.__value_.__r.__words[0] = 0;
  v15 = v79;
  v79 = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v88.__pn_.__r_.__value_.__r.__words[0];
    v88.__pn_.__r_.__value_.__r.__words[0] = 0;
    if (v16)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v16 + 8))(v16);
  }
  memset(&v78, 0, sizeof(v78));
  v17 = *(_BYTE *)(a1 + 287);
  if (v17 >= 0)
    v18 = (std::string *)(a1 + 264);
  else
    v18 = *(std::string **)(a1 + 264);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 287);
  else
    v19 = *(_QWORD *)(a1 + 272);
  std::string::append[abi:ne180100]<char const*,0>(&v78.__pn_, v18, (std::string *)((char *)v18 + v19));
  memset(&v88, 0, sizeof(v88));
  v20 = *(unsigned __int8 *)(v5 + 23);
  if ((v20 & 0x80u) == 0)
    v21 = (std::string *)v5;
  else
    v21 = *(std::string **)v5;
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(v5 + 8);
  std::string::append[abi:ne180100]<char const*,0>(&v88.__pn_, v21, (std::string *)((char *)v21 + v20));
  std::__fs::filesystem::operator/[abi:ne180100](&v88, (uint64_t)&v78, &v77);
  if (SHIBYTE(v88.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__pn_.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__create_directories(&v77, 0);
  __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = xmmword_191A72430;
  strcpy(__dst.__pn_.__r_.__value_.__l.__data_, "ESPRESSO_VALUE_INFERENCE_DUMP_PATH");
  if (SHIBYTE(v77.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v77.__pn_.__r_.__value_.__l.__data_, v77.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v77.__pn_;
  Espresso::scoped_env_var_kv::scoped_env_var_kv(&v88.__pn_, (__int128 *)&__dst, (uint64_t)&pn);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(pn.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_32:
      if (*(_BYTE *)(a1 + 289))
        goto LABEL_33;
LABEL_42:
      espresso_tmp_enable_montreal(1);
      v67 = v79;
      if (v79)
      {
        v23 = (std::__shared_weak_count *)operator new();
        v24 = v79;
        v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC3120;
        v23->__shared_owners_ = 0;
        v23->__shared_weak_owners_ = 0;
        v23[1].__vftable = (std::__shared_weak_count_vtbl *)v24;
      }
      else
      {
        v23 = 0;
      }
      v68 = v23;
      v79 = 0;
      *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__dst, "main");
      Espresso::MILTranslator::TranslateProgram((MIL::PassManager *)&v67, (uint64_t)&__dst, 0, 1, 1, 0, &v69);
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      v25 = v68;
      if (v68)
      {
        p_shared_owners = (unint64_t *)&v68->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (!v69)
      {
        v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v54, "Failed to translate MIL program to Espresso network.");
        __cxa_throw(v54, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v28 = v80;
      v29 = v70;
      v66[0] = v69;
      v66[1] = v70;
      if (v70)
      {
        v30 = (unint64_t *)&v70->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      Espresso::AOT::MILCompilerForClassicCpu::AddNetProperties(a1, (uint64_t)v28, (uint64_t)v81, v66);
      if (v29)
      {
        v32 = (unint64_t *)&v29->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      memset(&__dst, 0, sizeof(__dst));
      std::string::append[abi:ne180100]<char const*,0>(&__dst.__pn_, (std::string *)"model.espresso.net", (std::string *)"");
      std::__fs::filesystem::operator/[abi:ne180100](&__dst, (uint64_t)&v77, (std::__fs::filesystem::path *)&pn);
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      v34 = std::__fs::filesystem::path::__parent_path(&v78);
      if (v34.__size_ >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v34.__size_ >= 0x17)
      {
        v36 = (v34.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34.__size_ | 7) != 0x17)
          v36 = v34.__size_ | 7;
        v37 = v36 + 1;
        p_dst = operator new(v36 + 1);
        __dst.__pn_.__r_.__value_.__l.__size_ = v34.__size_;
        __dst.__pn_.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
        __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v34.__size_;
        p_dst = &__dst;
        if (!v34.__size_)
        {
LABEL_93:
          p_dst[v34.__size_] = 0;
          __base = __dst;
          std::__fs::filesystem::path::lexically_relative((std::__fs::filesystem::path *)&__p, (const std::__fs::filesystem::path *)&pn, &__base);
          if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__base.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_95;
          }
          else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_95:
            __dst.__pn_ = __p;
            goto LABEL_98;
          }
          std::string::__init_copy_ctor_external(&__dst.__pn_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_98:
          v38 = (void **)(a1 + 296);
          if (*(char *)(a1 + 319) < 0)
            operator delete(*v38);
          *(_OWORD *)v38 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
          *(_QWORD *)(a1 + 312) = *((_QWORD *)&__dst.__pn_.__r_.__value_.__l + 2);
          v64 = v69;
          v65 = v70;
          if (v70)
          {
            v39 = (unint64_t *)&v70->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__str, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
          else
            __str = pn;
          v62 = 0;
          LOBYTE(v61) = 0;
          v60 = 0;
          LOBYTE(v59) = 0;
          Espresso::dump_network(&v64, &__str, (uint64_t)&v61, (uint64_t)&v59);
          if (v60 < 0)
          {
            operator delete(v59);
            if ((v62 & 0x80000000) == 0)
            {
LABEL_108:
              if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_109;
              goto LABEL_113;
            }
          }
          else if ((v62 & 0x80000000) == 0)
          {
            goto LABEL_108;
          }
          operator delete(v61);
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_109:
            v41 = v65;
            if (!v65)
              goto LABEL_118;
LABEL_114:
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
LABEL_118:
            memset(&__base, 0, sizeof(__base));
            std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"model.espresso.net", (std::string *)"");
            std::__fs::filesystem::operator/[abi:ne180100](&__base, (uint64_t)&v77, &__dst);
            std::__fs::filesystem::__status(&__dst, 0);
            v44 = 0;
            if (v58.__pn_.__r_.__value_.__s.__data_[0]
              && v58.__pn_.__r_.__value_.__s.__data_[0] != 255)
            {
              memset(&v57, 0, sizeof(v57));
              std::string::append[abi:ne180100]<char const*,0>(&v57.__pn_, (std::string *)"model.espresso.shape", (std::string *)"");
              std::__fs::filesystem::operator/[abi:ne180100](&v57, (uint64_t)&v77, &v58);
              std::__fs::filesystem::__status(&v58, 0);
              v44 = 0;
              if (v56.__pn_.__r_.__value_.__s.__data_[0]
                && v56.__pn_.__r_.__value_.__s.__data_[0] != 255)
              {
                memset(&v55, 0, sizeof(v55));
                std::string::append[abi:ne180100]<char const*,0>(&v55, (std::string *)"model.espresso.weights", (std::string *)"");
                std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v55, (uint64_t)&v77, &v56);
                std::__fs::filesystem::__status(&v56, 0);
                if (v87)
                  v45 = v87 == 255;
                else
                  v45 = 1;
                v44 = !v45;
                if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v56.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v55.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v58.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v58.__pn_.__r_.__value_.__l.__data_);
              if (SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v57.__pn_.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_138:
                if ((v44 & 1) != 0)
                  goto LABEL_139;
                goto LABEL_145;
              }
            }
            else if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_138;
            }
            operator delete(__base.__pn_.__r_.__value_.__l.__data_);
            if ((v44 & 1) != 0)
            {
LABEL_139:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_141:
                  v46 = v70;
                  if (!v70)
                    goto LABEL_151;
                  goto LABEL_148;
                }
              }
              else if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_141;
              }
              operator delete(pn.__r_.__value_.__l.__data_);
              v46 = v70;
              if (!v70)
                goto LABEL_151;
LABEL_148:
              v48 = (unint64_t *)&v46->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
                Espresso::scoped_env_var_kv::~scoped_env_var_kv((const char **)&v88.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(v77.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_163;
LABEL_152:
                if (SHIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_164;
LABEL_153:
                v50 = v79;
                v79 = 0;
                if (!v50)
                  goto LABEL_155;
                goto LABEL_154;
              }
LABEL_151:
              Espresso::scoped_env_var_kv::~scoped_env_var_kv((const char **)&v88.__pn_.__r_.__value_.__l.__data_);
              if (SHIBYTE(v77.__pn_.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_163;
              goto LABEL_152;
            }
LABEL_145:
            v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v47, "Failed in serializing Espresso network files on disk.");
            __cxa_throw(v47, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
LABEL_113:
          operator delete(__str.__r_.__value_.__l.__data_);
          v41 = v65;
          if (!v65)
            goto LABEL_118;
          goto LABEL_114;
        }
      }
      memmove(p_dst, v34.__data_, v34.__size_);
      goto LABEL_93;
    }
  }
  else if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(a1 + 289))
    goto LABEL_42;
LABEL_33:
  memset(&pn, 0, sizeof(pn));
  std::string::append[abi:ne180100]<char const*,0>(&pn, (std::string *)"classic_cpu_mil_model", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&pn, (uint64_t)&v77, &__dst);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__create_directories(&__dst, 0);
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100]<char const*,0>(&__p, (std::string *)"model.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&__dst, (std::__fs::filesystem::path *)&pn);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__base, 0, sizeof(__base));
  std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"model.weights", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100](&__base, (uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    v22 = v79;
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
  }
  else
  {
    v22 = v79;
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      v73 = pn;
      goto LABEL_46;
    }
  }
  std::string::__init_copy_ctor_external(&v73, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v72, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
  else
    v72 = __dst.__pn_;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v71, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v71 = __p;
  Espresso::MILUtil::SerializeProgram(v22, (uint64_t)&v73, (uint64_t)&v72, (uint64_t)&v71, 0x100000004, 0);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_54:
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_55;
      goto LABEL_61;
    }
  }
  else if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_54;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_62;
  }
LABEL_61:
  operator delete(v73.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_56:
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_57;
LABEL_63:
    operator delete(pn.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_64;
    goto LABEL_151;
  }
LABEL_62:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_63;
LABEL_57:
  if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_151;
LABEL_64:
  operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  Espresso::scoped_env_var_kv::~scoped_env_var_kv((const char **)&v88.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v77.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_152;
LABEL_163:
  operator delete(v77.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_153;
LABEL_164:
  operator delete(v78.__pn_.__r_.__value_.__l.__data_);
  v50 = v79;
  v79 = 0;
  if (v50)
LABEL_154:
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
LABEL_155:
  v51 = v80;
  v80 = 0;
  if (v51)
    (*((void (**)(std::__shared_weak_count_vtbl *))v51->~__shared_weak_count + 1))(v51);
  if (v82 < 0)
    operator delete(v81[0]);
  if (E5RT::g_trace_analysis_level >= v83)
    kdebug_trace();
}

void sub_19115DB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v76 - 121) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a21);
  if ((*(char *)(v76 - 121) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a68 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(v76 - 144));
  if ((a68 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a72 & 0x80000000) == 0)
    {
LABEL_16:
      if (a74 < 0)
        operator delete(a73);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
      Espresso::scoped_env_var_kv::~scoped_env_var_kv((const char **)(v76 - 104));
      if (a76 < 0)
        operator delete(a75);
      if (*(char *)(v76 - 225) < 0)
      {
        operator delete(*(void **)(v76 - 248));
        v78 = *(_QWORD *)(v76 - 224);
        *(_QWORD *)(v76 - 224) = 0;
        if (!v78)
        {
LABEL_22:
          v79 = *(_QWORD *)(v76 - 216);
          *(_QWORD *)(v76 - 216) = 0;
          if (!v79)
            goto LABEL_23;
          goto LABEL_27;
        }
      }
      else
      {
        v78 = *(_QWORD *)(v76 - 224);
        *(_QWORD *)(v76 - 224) = 0;
        if (!v78)
          goto LABEL_22;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
      v79 = *(_QWORD *)(v76 - 216);
      *(_QWORD *)(v76 - 216) = 0;
      if (!v79)
      {
LABEL_23:
        if ((*(char *)(v76 - 185) & 0x80000000) == 0)
        {
LABEL_29:
          E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v76 - 184));
          _Unwind_Resume(a1);
        }
LABEL_28:
        operator delete(*(void **)(v76 - 208));
        goto LABEL_29;
      }
LABEL_27:
      (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
      if ((*(char *)(v76 - 185) & 0x80000000) == 0)
        goto LABEL_29;
      goto LABEL_28;
    }
LABEL_15:
    operator delete(a69);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a63);
  if ((a72 & 0x80000000) == 0)
    goto LABEL_16;
  goto LABEL_15;
}

void sub_19115DF34(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x19115DF2CLL);
}

void sub_19115DF44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  if (a62 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v62 - 121) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((*(char *)(v62 - 121) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(v62 - 144));
LABEL_6:
  JUMPOUT(0x19115DEA0);
}

void sub_19115DF78()
{
  JUMPOUT(0x19115DEA0);
}

void sub_19115DF80()
{
  JUMPOUT(0x19115DEA0);
}

void sub_19115DF88()
{
  uint64_t v0;

  if (*(char *)(v0 - 81) < 0)
    JUMPOUT(0x19115DEACLL);
  JUMPOUT(0x19115DEB0);
}

void sub_19115DFA0()
{
  JUMPOUT(0x19115DEB0);
}

void sub_19115DFA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 224);
  *(_QWORD *)(v0 - 224) = 0;
  if (v1)
    JUMPOUT(0x19115DEF0);
  JUMPOUT(0x19115DEC4);
}

void sub_19115DFBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 224);
  *(_QWORD *)(v0 - 224) = 0;
  if (v1)
    JUMPOUT(0x19115DEF0);
  JUMPOUT(0x19115DEC4);
}

void sub_19115DFD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 216);
  *(_QWORD *)(v0 - 216) = 0;
  if (v1)
    JUMPOUT(0x19115DF08);
  JUMPOUT(0x19115DED0);
}

void sub_19115DFE4()
{
  uint64_t v0;

  if ((*(char *)(v0 - 185) & 0x80000000) == 0)
    JUMPOUT(0x19115DF24);
  JUMPOUT(0x19115DF1CLL);
}

void sub_19115DFF4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 80);
  if (v2 == v0)
  {
    v3 = 4;
    v2 = (_QWORD *)(v1 - 104);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x19115DF24);
}

void sub_19115E028()
{
  JUMPOUT(0x19115DF24);
}

void Espresso::AOT::MILCompilerForClassicCpu::GetOutputPaths(Espresso::AOT::MILCompilerForClassicCpu *this@<X0>, _QWORD *a2@<X8>)
{
  std::string __p;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 319) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 37), *((_QWORD *)this + 38));
  else
    __p = *(std::string *)((char *)this + 296);
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19115E0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForClassicCpu::GetOptions(Espresso::AOT::MILCompilerForClassicCpu *this)
{
  return (uint64_t)this + 264;
}

void Espresso::AOT::MILCompilerForClassicCpu::~MILCompilerForClassicCpu(void **this)
{
  Espresso::AOT::MILCompilerForClassicCpu::~MILCompilerForClassicCpu(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;
  void **v3;
  void *v4;

  *this = &off_1E2DA0868;
  if (*((char *)this + 319) < 0)
  {
    operator delete(this[37]);
    if ((*((char *)this + 287) & 0x80000000) == 0)
    {
LABEL_3:
      *this = off_1E2DA0650;
      v2 = (void **)this[29];
      if (!v2)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[33]);
  *this = off_1E2DA0650;
  v2 = (void **)this[29];
  if (!v2)
  {
LABEL_4:
    if ((*((char *)this + 231) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_17:
    operator delete(this[26]);
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_18:
    operator delete(this[23]);
    Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
    return;
  }
LABEL_10:
  v3 = (void **)this[30];
  if (v3 == v2)
  {
    this[30] = v2;
    operator delete(v2);
    if (*((char *)this + 231) < 0)
      goto LABEL_17;
  }
  else
  {
    do
    {
      if (*((char *)v3 - 1) < 0)
        operator delete(*(v3 - 3));
      v3 -= 3;
    }
    while (v3 != v2);
    v4 = this[29];
    this[30] = v2;
    operator delete(v4);
    if (*((char *)this + 231) < 0)
      goto LABEL_17;
  }
LABEL_5:
  if (*((char *)this + 207) < 0)
    goto LABEL_18;
LABEL_6:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend((Espresso::AOT::AOTCompilerBackend *)this);
}

void std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB20B0;
  return result;
}

void std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB20B0;
}

uint64_t std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 128))(v2) ^ 1;
}

uint64_t std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT24MILCompilerForClassicCpu3RunERKN3MIL9IRProgramERKNSt3__16vectorINS6_12basic_string"
                     "IcNS6_11char_traitsIcEENS6_9allocatorIcEEEENSB_ISD_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT24MILCompilerForClassicCpu3RunERKN3MIL9IRProgramERKNSt3__16vectorINS6_12b"
                                "asic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENSB_ISD_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT24MILCompilerForClassicCpu3RunERKN3MIL9IRProgramERKNSt3__16vectorINS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENSB_ISD_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT24MILCompilerForClassicCpu3RunERKN3MIL9IRProgramERKNSt3__16vectorINS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENSB_ISD_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

float Espresso::AOT::DTrees::avg_poolAneCp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::avg_poolAneDp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::avg_poolAneEp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::avg_poolCpuCp()
{
  return 6.0;
}

float Espresso::AOT::DTrees::avg_poolCpuDp()
{
  return 6.0;
}

float Espresso::AOT::DTrees::avg_poolCpuEp()
{
  return 6.0;
}

float Espresso::AOT::DTrees::avg_poolGpuCp()
{
  return 18.0;
}

float Espresso::AOT::DTrees::avg_poolGpuDp()
{
  return 18.0;
}

float Espresso::AOT::DTrees::avg_poolGpuEp()
{
  return 18.0;
}

void Espresso::AOT::GetNetworkVersionInformation(Espresso::AOT *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  int v8;
  const void *v9;
  size_t v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  char **v15;
  unint64_t v16;
  int v17;
  const void *v18;
  size_t v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char v23;
  __int128 v24;
  _QWORD __s2[2];
  char v26;

  v26 = 15;
  strcpy((char *)__s2, "network_version");
  v4 = (char *)*((_QWORD *)this + 60);
  if (!v4)
    goto LABEL_32;
  v5 = (char *)this + 480;
  v6 = (char *)this + 480;
  do
  {
    v7 = v4[55];
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *((_QWORD *)v4 + 5);
    if (v8 >= 0)
      v9 = v4 + 32;
    else
      v9 = (const void *)*((_QWORD *)v4 + 4);
    if (v7 >= 0xF)
      v10 = 15;
    else
      v10 = v7;
    v11 = v7 < 0xF;
    v12 = memcmp(v9, __s2, v10);
    v13 = v12 < 0;
    if (!v12)
      v13 = v11;
    v14 = !v13;
    if (v13)
      v15 = (char **)(v4 + 8);
    else
      v15 = (char **)v4;
    if (v14)
      v6 = v4;
    v4 = *v15;
  }
  while (*v15);
  if (v6 == v5)
    goto LABEL_32;
  v16 = v6[55];
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)v6 + 5);
  if (v17 >= 0)
    v18 = v6 + 32;
  else
    v18 = (const void *)*((_QWORD *)v6 + 4);
  if (v16 >= 0xF)
    v19 = 15;
  else
    v19 = v16;
  v20 = v16 > 0xF;
  v21 = memcmp(__s2, v18, v19);
  v22 = v21 < 0;
  if (!v21)
    v22 = v20;
  if (v22)
  {
LABEL_32:
    v23 = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (v6[79] < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)v6 + 7), *((_QWORD *)v6 + 8));
    }
    else
    {
      v24 = *(_OWORD *)(v6 + 56);
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 9);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v24;
    }
    v23 = 1;
  }
  a2[1].__r_.__value_.__s.__data_[0] = v23;
}

void Espresso::AOT::GetIntermediateBlobOffsets(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  unint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v52;
  uint64_t v53;
  std::string v54;
  int v55;
  char *v56;
  uint64_t v57;
  char *v58;
  void *__p;
  uint64_t v60;
  unint64_t *v61;
  std::string *v62;

  v2 = a2;
  __p = 0;
  v60 = 0;
  v61 = 0;
  v4 = (_QWORD *)a1[6];
  v3 = (_QWORD *)a1[7];
  if (v4 == v3)
  {
    v29 = 0;
    v57 = 0;
    v58 = 0;
    goto LABEL_72;
  }
  v50 = a1;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = v60;
  v52 = (_QWORD *)a1[7];
  do
  {
    while (1)
    {
      v9 = ((*v4 - 1) & 0xFFFFFFFFFFFFC000) + 0x4000;
      if (v5 >= v6)
        break;
      *v5++ = v9;
      v8 = (uint64_t)v5;
      if (++v4 == v3)
        goto LABEL_33;
    }
    v10 = v5 - v7;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
    {
      v60 = v8;
      v61 = v6;
      __p = v7;
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v6 - (char *)v7) >> 2 > v11)
      v11 = ((char *)v6 - (char *)v7) >> 2;
    if ((unint64_t)((char *)v6 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      if (v12 >> 61)
      {
        v60 = v8;
        v61 = v6;
        __p = v7;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v13 = operator new(8 * v12);
      v14 = (unint64_t *)&v13[8 * v10];
      *v14 = v9;
      v8 = (uint64_t)(v14 + 1);
      if (v5 == v7)
        goto LABEL_19;
    }
    else
    {
      v13 = 0;
      v14 = (unint64_t *)(8 * v10);
      *(_QWORD *)(8 * v10) = v9;
      v8 = 8 * v10 + 8;
      if (v5 == v7)
        goto LABEL_19;
    }
    v15 = (char *)(v5 - 1) - (char *)v7;
    if (v15 < 0x168)
    {
      v16 = v5;
      goto LABEL_18;
    }
    if (&v13[(char *)v5 - (char *)v7 - 8 - (v15 & 0xFFFFFFFFFFFFFFF8)] > &v13[(char *)v5 - (char *)v7 - 8])
    {
      v16 = v5;
      do
      {
LABEL_18:
        v17 = *--v16;
        *--v14 = v17;
      }
      while (v16 != v7);
      goto LABEL_19;
    }
    if ((unint64_t *)((char *)v5 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8) > v5 - 1)
    {
      v16 = v5;
      goto LABEL_18;
    }
    if ((unint64_t)((char *)v7 - v13) < 0x20)
    {
      v16 = v5;
      goto LABEL_18;
    }
    v18 = (v15 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v16 = &v5[v19 / 0xFFFFFFFFFFFFFFF8];
    v14 = (unint64_t *)((char *)v14 - v19);
    v20 = &v13[8 * v10 - 16];
    v21 = v5 - 2;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 4;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_18;
LABEL_19:
    v6 = (unint64_t *)&v13[8 * v12];
    if (v7)
      operator delete(v7);
    v7 = v14;
    v3 = v52;
    ++v4;
    v5 = (unint64_t *)v8;
  }
  while (v4 != v52);
LABEL_33:
  v60 = v8;
  v61 = v6;
  v58 = 0;
  __p = v7;
  v56 = 0;
  v57 = 0;
  v24 = v8 - (_QWORD)v7;
  if ((unint64_t *)v8 != v7)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = v24 >> 3;
    if (v30 <= 1)
      v31 = 1;
    else
      v31 = v30;
    v32 = v57;
    v53 = v31;
    while (v25 < v26)
    {
      *(_QWORD *)v25 = v28;
      v32 = (uint64_t)(v25 + 8);
LABEL_39:
      v28 += v7[v27++];
      v25 = (char *)v32;
      if (v27 == v31)
      {
        v57 = v32;
        v58 = v26;
        goto LABEL_71;
      }
    }
    v33 = (v25 - v29) >> 3;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61)
    {
      v57 = v32;
      v58 = v26;
      v56 = v29;
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v26 - v29) >> 2 > v34)
      v34 = (v26 - v29) >> 2;
    if ((unint64_t)(v26 - v29) >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    if (v35)
    {
      if (v35 >> 61)
      {
        v57 = v32;
        v58 = v26;
        v56 = v29;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v36 = v35;
      v37 = operator new(8 * v35);
      v35 = v36;
      v38 = &v37[8 * v33];
      *(_QWORD *)v38 = v28;
      v32 = (uint64_t)(v38 + 8);
      if (v25 == v29)
        goto LABEL_55;
LABEL_52:
      v39 = v25 - 8 - v29;
      if (v39 < 0x168)
      {
        v40 = v25;
        goto LABEL_54;
      }
      if (&v37[v25 - v29 - 8 - (v39 & 0xFFFFFFFFFFFFFFF8)] > &v37[v25 - v29 - 8])
      {
        v40 = v25;
        goto LABEL_54;
      }
      if (&v25[-(v39 & 0xFFFFFFFFFFFFFFF8) - 8] > v25 - 8)
      {
        v40 = v25;
        goto LABEL_54;
      }
      if ((unint64_t)(v29 - v37) < 0x20)
      {
        v40 = v25;
        goto LABEL_54;
      }
      v42 = (v39 >> 3) + 1;
      v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      v40 = &v25[-v43];
      v38 -= v43;
      v44 = &v37[8 * v33 - 16];
      v45 = v25 - 16;
      v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v47 = *(_OWORD *)v45;
        *(v44 - 1) = *((_OWORD *)v45 - 1);
        *v44 = v47;
        v44 -= 2;
        v45 -= 32;
        v46 -= 4;
      }
      while (v46);
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_54:
          v41 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *((_QWORD *)v38 - 1) = v41;
          v38 -= 8;
        }
        while (v40 != v29);
      }
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v33);
      *(_QWORD *)(8 * v33) = v28;
      v32 = 8 * v33 + 8;
      if (v25 != v29)
        goto LABEL_52;
    }
LABEL_55:
    v26 = &v37[8 * v35];
    if (v29)
      operator delete(v29);
    v29 = v38;
    v31 = v53;
    goto LABEL_39;
  }
  v29 = 0;
LABEL_71:
  a1 = v50;
  v2 = a2;
LABEL_72:
  v56 = v29;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 32) = 1065353216;
  v48 = (uint64_t *)a1[3];
  if (v48)
  {
    do
    {
      if (*((char *)v48 + 39) < 0)
        std::string::__init_copy_ctor_external(&v54, (const std::string::value_type *)v48[2], v48[3]);
      else
        v54 = *(std::string *)(v48 + 2);
      v55 = *((_DWORD *)v48 + 10);
      v49 = *(_QWORD *)&v29[8 * v55];
      v62 = &v54;
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (uint64_t)&v54, (uint64_t)&std::piecewise_construct, (__int128 **)&v62)[5] = v49;
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      v48 = (uint64_t *)*v48;
    }
    while (v48);
LABEL_81:
    v57 = (uint64_t)v29;
    operator delete(v29);
  }
  else if (v29)
  {
    goto LABEL_81;
  }
  if (__p)
  {
    v60 = (uint64_t)__p;
    operator delete(__p);
  }
}

void sub_19115E9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25)
{
  void *v25;

  if (v25)
    operator delete(v25);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::GetOperandAliases(int8x8_t *this@<X0>, uint64_t a2@<X8>)
{
  int8x8_t v5;
  unint64_t i;
  uint64_t v7;
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  std::string::size_type size;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  std::string *p_p;
  int8x8_t v32;
  uint8x8_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  std::string::size_type v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  std::string *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string __p;
  void *v53;
  std::__shared_weak_count *v54;
  uint64_t *v55;
  uint64_t v56[2];
  uint64_t *v57;
  uint64_t v58[2];

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v55 = v56;
  v56[0] = 0;
  v58[0] = 0;
  v58[1] = 0;
  v56[1] = 0;
  v57 = v58;
  Espresso::ANECompilerEngine::ane_name_translator::fill_name_table(&v55, (const Espresso::net *)this);
  v5 = this[4];
  if (*(_QWORD *)&this[5] != *(_QWORD *)&v5)
  {
    for (i = 0; i < (uint64_t)(*(_QWORD *)&this[5] - *(_QWORD *)&v5) >> 4; ++i)
    {
      v7 = *(_QWORD *)(*(_QWORD *)&v5 + 16 * i);
      v8 = *(const void **)(v7 + 64);
      if (v8
      {
        v10 = *(std::__shared_weak_count **)(v7 + 72);
        v53 = v9;
        v54 = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v9 + 320))(v9);
        v13 = is_ane(&__p);
      }
      else
      {
        v10 = 0;
        v13 = 0;
        v53 = 0;
        v54 = 0;
      }
      v14 = this[8];
      if (!*(_QWORD *)&v14)
        goto LABEL_105;
      v15 = (uint8x8_t)vcnt_s8(v14);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        v16 = i;
        if (i >= *(_QWORD *)&v14)
          v16 = i % *(_QWORD *)&v14;
      }
      else
      {
        v16 = (*(_QWORD *)&v14 - 1) & i;
      }
      v17 = *(_QWORD **)(*(_QWORD *)&this[7] + 8 * v16);
      if (!v17 || (v18 = (_QWORD *)*v17) == 0)
LABEL_105:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (v15.u32[0] < 2uLL)
      {
        v19 = *(_QWORD *)&v14 - 1;
        while (1)
        {
          v21 = v18[1];
          if (i == v21)
          {
            if (v18[2] == i)
              goto LABEL_31;
          }
          else if ((v21 & v19) != v16)
          {
            goto LABEL_105;
          }
          v18 = (_QWORD *)*v18;
          if (!v18)
            goto LABEL_105;
        }
      }
      while (1)
      {
        v20 = v18[1];
        if (i == v20)
          break;
        if (v20 >= *(_QWORD *)&v14)
          v20 %= *(_QWORD *)&v14;
        if (v20 != v16)
          goto LABEL_105;
LABEL_21:
        v18 = (_QWORD *)*v18;
        if (!v18)
          goto LABEL_105;
      }
      if (v18[2] != i)
        goto LABEL_21;
LABEL_31:
      v23 = v18[3];
      v22 = v18[4];
      while (v23 != v22)
      {
        __p.__r_.__value_.__r.__words[0] = v23;
        v24 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v23, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
        if (!v13)
          goto LABEL_33;
        v25 = v24;
        Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)&v55, (char *)v23, &__p);
        v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v28 = *(unsigned __int8 *)(v23 + 23);
        v29 = (char)v28;
        if ((v28 & 0x80u) != 0)
          v28 = *(_QWORD *)(v23 + 8);
        if (size == v28)
        {
          if (v29 >= 0)
            v30 = (unsigned __int8 *)v23;
          else
            v30 = *(unsigned __int8 **)v23;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!memcmp(__p.__r_.__value_.__l.__data_, v30, __p.__r_.__value_.__l.__size_))
              goto LABEL_32;
          }
          else
          {
            if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
              goto LABEL_33;
            p_p = &__p;
            while (p_p->__r_.__value_.__s.__data_[0] == *v30)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v30;
              if (!--v26)
              {
                if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
                  goto LABEL_33;
                goto LABEL_32;
              }
            }
          }
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(v25 + 5), (uint64_t)&__p, (uint64_t)&__p);
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_32:
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_33:
        v23 += 24;
      }
      v32 = this[13];
      if (!*(_QWORD *)&v32)
        goto LABEL_106;
      v33 = (uint8x8_t)vcnt_s8(v32);
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.u32[0] > 1uLL)
      {
        v34 = i;
        if (i >= *(_QWORD *)&v32)
          v34 = i % *(_QWORD *)&v32;
      }
      else
      {
        v34 = (*(_QWORD *)&v32 - 1) & i;
      }
      v35 = *(_QWORD **)(*(_QWORD *)&this[12] + 8 * v34);
      if (!v35 || (v36 = (_QWORD *)*v35) == 0)
LABEL_106:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (v33.u32[0] < 2uLL)
      {
        v37 = *(_QWORD *)&v32 - 1;
        while (1)
        {
          v39 = v36[1];
          if (i == v39)
          {
            if (v36[2] == i)
              goto LABEL_75;
          }
          else if ((v39 & v37) != v34)
          {
            goto LABEL_106;
          }
          v36 = (_QWORD *)*v36;
          if (!v36)
            goto LABEL_106;
        }
      }
      while (2)
      {
        v38 = v36[1];
        if (i != v38)
        {
          if (v38 >= *(_QWORD *)&v32)
            v38 %= *(_QWORD *)&v32;
          if (v38 != v34)
            goto LABEL_106;
LABEL_65:
          v36 = (_QWORD *)*v36;
          if (!v36)
            goto LABEL_106;
          continue;
        }
        break;
      }
      if (v36[2] != i)
        goto LABEL_65;
LABEL_75:
      v41 = v36[3];
      v40 = v36[4];
      while (2)
      {
        if (v41 != v40)
        {
          __p.__r_.__value_.__r.__words[0] = v41;
          v42 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v41, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
          if (v13)
          {
            v43 = v42;
            Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)&v55, (char *)v41, &__p);
            v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v45 = __p.__r_.__value_.__l.__size_;
            v46 = *(unsigned __int8 *)(v41 + 23);
            v47 = (char)v46;
            if ((v46 & 0x80u) != 0)
              v46 = *(_QWORD *)(v41 + 8);
            if (v45 != v46)
              goto LABEL_97;
            if (v47 >= 0)
              v48 = (unsigned __int8 *)v41;
            else
              v48 = *(unsigned __int8 **)v41;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              if (memcmp(__p.__r_.__value_.__l.__data_, v48, __p.__r_.__value_.__l.__size_))
                goto LABEL_97;
              goto LABEL_76;
            }
            if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
            {
              v49 = &__p;
              while (v49->__r_.__value_.__s.__data_[0] == *v48)
              {
                v49 = (std::string *)((char *)v49 + 1);
                ++v48;
                if (!--v44)
                {
                  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
                    goto LABEL_77;
                  goto LABEL_76;
                }
              }
LABEL_97:
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(v43 + 5), (uint64_t)&__p, (uint64_t)&__p);
              if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_76:
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
LABEL_77:
          v41 += 24;
          continue;
        }
        break;
      }
      if (v10)
      {
        v50 = (unint64_t *)&v10->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v5 = this[4];
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v57, v58[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v55, v56[0]);
}

void sub_19115EF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  Espresso::ANECompilerEngine::ane_name_translator::~ane_name_translator((Espresso::ANECompilerEngine::ane_name_translator *)va);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

void sub_19115EF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  Espresso::ANECompilerEngine::ane_name_translator::~ane_name_translator((Espresso::ANECompilerEngine::ane_name_translator *)&a17);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::GetPlatformForLayer(uint64_t *a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v26;
  void *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  const Espresso::dev_op_params_t *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v36;
  std::__shared_weak_count *v37;
  void *v38;
  std::__shared_weak_count *v39;

  v3 = *a1;
  v4 = (_QWORD *)(*a1 + 40);
  if ((*(char *)(*a1 + 63) & 0x80000000) == 0)
  {
    v5 = *(unsigned __int8 *)(*a1 + 63);
    switch(*(_BYTE *)(*a1 + 63))
    {
      case 4:
        goto LABEL_74;
      case 6:
        if (*(_DWORD *)v4 != 1601594724 || *(_WORD *)(*a1 + 44) != 28783)
          goto LABEL_76;
        goto LABEL_50;
      case 0xF:
        if (*v4 != 0x715F636974617473 || *(_QWORD *)(*a1 + 47) != 0x657A69746E617571)
          goto LABEL_73;
        return *(unsigned int *)(v3 + 8);
      case 0x10:
        goto LABEL_33;
      case 0x11:
        if (*v4 == 0x645F636974617473 && *(_QWORD *)(*a1 + 48) == 0x7A69746E61757165 && *(_BYTE *)(*a1 + 56) == 101)
          return *(unsigned int *)(v3 + 8);
        if (v5 == 16)
          goto LABEL_33;
LABEL_73:
        if (v5 != 4)
          goto LABEL_76;
LABEL_74:
        if (*(_DWORD *)v4 == 1953718627)
          return *(unsigned int *)(v3 + 8);
        goto LABEL_76;
      default:
        goto LABEL_76;
    }
  }
  v7 = *(_QWORD *)(v3 + 48);
  if (v7 == 6 && *(_DWORD *)*v4 == 1601594724 && *(_WORD *)(*v4 + 4) == 28783)
  {
LABEL_50:
    v26 = *(const void **)(v3 + 64);
    if (!v26
    {
      v38 = 0;
      v39 = 0;
      Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to dev op kernel");
    }
    v17 = *(std::__shared_weak_count **)(v3 + 72);
    v38 = v27;
    v39 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
    }
    v30 = (const Espresso::dev_op_params_t *)(*(uint64_t (**)(void *))(*(_QWORD *)v27 + 320))(v27);
    Espresso::dev_op_params_t::dev_op_params_t((Espresso::dev_op_params_t *)&v36, v30);
    v22 = v36;
    Espresso::dev_op_params_t::~dev_op_params_t((Espresso::dev_op_params_t *)&v36);
    if (!v17)
      return v22;
    v31 = (unint64_t *)&v17->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (v32)
      return v22;
    goto LABEL_59;
  }
  if (v7 == 15)
  {
    if (*(_QWORD *)*v4 == 0x715F636974617473 && *(_QWORD *)(*v4 + 7) == 0x657A69746E617571)
      return *(unsigned int *)(v3 + 8);
    v7 = *(_QWORD *)(v3 + 48);
  }
  if (v7 == 17)
  {
    if (*(_QWORD *)*v4 == 0x645F636974617473
      && *(_QWORD *)(*v4 + 8) == 0x7A69746E61757165
      && *(_BYTE *)(*v4 + 16) == 101)
    {
      return *(unsigned int *)(v3 + 8);
    }
    v7 = *(_QWORD *)(v3 + 48);
  }
  if (v7 != 4)
  {
LABEL_31:
    if (v7 != 16)
      goto LABEL_76;
    v4 = (_QWORD *)*v4;
LABEL_33:
    v13 = *v4;
    v12 = v4[1];
    if (v13 != 0x5F747865746E6F63 || v12 != 0x726566736E617274)
LABEL_76:
      Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported layer type when trying to identify platform");
    v15 = *(const void **)(v3 + 64);
    if (!v15
    {
      v36 = 0;
      v37 = 0;
      Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to context transfer kernel");
    }
    v17 = *(std::__shared_weak_count **)(v3 + 72);
    v36 = v16;
    v37 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 320))(v16);
    v21 = 20;
    if (a2)
      v21 = 16;
    v22 = *(unsigned int *)(v20 + v21);
    if (!v17)
      return v22;
    v23 = (unint64_t *)&v17->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (v24)
      return v22;
LABEL_59:
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    return v22;
  }
  if (*(_DWORD *)*v4 != 1953718627)
  {
    v7 = *(_QWORD *)(v3 + 48);
    goto LABEL_31;
  }
  return *(unsigned int *)(v3 + 8);
}

void sub_19115F390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19115F3A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void sub_19115F3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void sub_19115F3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::GetBlobRowAlignment(int a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 1;
  if (a1 <= 10005)
  {
    if ((a1 - 100) < 2 || !a1)
      goto LABEL_9;
LABEL_14:
    Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported platform encountered while querying for blob alignment.");
  }
  if ((a1 - 10006) < 3)
  {
    v2 = 64;
    goto LABEL_9;
  }
  if (a1 != 50005 && a1 != 50008)
    goto LABEL_14;
LABEL_9:
  if (!a2)
    return v2;
  if (((v2 - 1) & a2) != 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid row stride specified for ANE (not aligned)");
  return a2;
}

float Espresso::AOT::GetTensorShape@<S0>(Espresso::AOT *this@<X0>, const Espresso::layer_nd_shape *a2@<X1>, char **a3@<X8>)
{
  const Espresso::layer_nd_shape *v3;
  uint64_t v5;
  unint64_t v7;
  char *v8;
  int *v9;
  int *v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  size_t v14;
  size_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  float result;
  char *v39;
  char *v40;
  void *__p;

  v3 = a2;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *((int *)this + 5);
  if (!(_DWORD)v5)
  {
    v39 = (char *)operator new(0x20uLL);
    a3[1] = v39 + 32;
    a3[2] = v39 + 32;
    LODWORD(result) = 1;
    *(_OWORD *)v39 = xmmword_191A8CDE0;
    *((_OWORD *)v39 + 1) = unk_191A8CDF0;
    *a3 = v39;
    if ((unint64_t)v3 >= 2)
      goto LABEL_42;
    return result;
  }
  if ((v5 & 0x80000000) != 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v7 = 4 * v5;
  v8 = (char *)operator new(4 * v5);
  v9 = (int *)v8;
  v10 = (int *)&v8[4 * v5];
  if (v5 <= 1)
    v11 = 1;
  else
    v11 = v5;
  v12 = 4 * v11;
  v13 = v7 >= 4 * v11;
  v14 = v7 - 4 * v11;
  if (v13)
    v15 = v14;
  else
    v15 = 0;
  bzero(&v8[v12], v15);
  memcpy(v9, this, v12);
  v16 = 0;
  __p = v9;
  v17 = v9;
  do
  {
    v19 = *v17;
    v20 = (unint64_t)a3[2];
    if ((unint64_t)v16 < v20)
    {
      *(_QWORD *)v16 = v19;
      v18 = (uint64_t)(v16 + 8);
      goto LABEL_11;
    }
    v21 = *a3;
    v22 = v16 - *a3;
    v23 = v22 >> 3;
    v24 = (v22 >> 3) + 1;
    if (v24 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = v20 - (_QWORD)v21;
    if (v25 >> 2 > v24)
      v24 = v25 >> 2;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = operator new(8 * v26);
      v28 = &v27[8 * v23];
      *(_QWORD *)v28 = v19;
      v18 = (uint64_t)(v28 + 8);
      if (v16 == v21)
        goto LABEL_27;
    }
    else
    {
      v27 = 0;
      v28 = (char *)(8 * v23);
      *(_QWORD *)(8 * v23) = v19;
      v18 = 8 * v23 + 8;
      if (v16 == v21)
        goto LABEL_27;
    }
    v29 = v16 - 8 - v21;
    if (v29 < 0x168)
    {
      v30 = v16;
      goto LABEL_26;
    }
    if (&v27[v22 - 8 - (v29 & 0xFFFFFFFFFFFFFFF8)] > &v27[v22 - 8])
    {
      v30 = v16;
      do
      {
LABEL_26:
        v31 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        *((_QWORD *)v28 - 1) = v31;
        v28 -= 8;
      }
      while (v30 != v21);
      goto LABEL_27;
    }
    if (&v16[-(v29 & 0xFFFFFFFFFFFFFFF8) - 8] > v16 - 8)
    {
      v30 = v16;
      goto LABEL_26;
    }
    if ((unint64_t)(v16 - v27 - v22) < 0x20)
    {
      v30 = v16;
      goto LABEL_26;
    }
    v32 = (v29 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v30 = &v16[-v33];
    v28 -= v33;
    v34 = &v27[8 * v23 - 16];
    v35 = v16 - 16;
    v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_26;
LABEL_27:
    *a3 = v28;
    a3[1] = (char *)v18;
    a3[2] = &v27[8 * v26];
    if (v21)
      operator delete(v21);
LABEL_11:
    a3[1] = (char *)v18;
    ++v17;
    v16 = (char *)v18;
  }
  while (v17 != v10);
  operator delete(__p);
  v3 = a2;
  if ((unint64_t)a2 < 2)
    return result;
LABEL_42:
  if ((unint64_t)(a3[1] - *a3) <= 0x17)
    Espresso::throw_exception_selector<Espresso::generic_error>("Detected interleave > 1 for a tensor with < 3 dimensions");
  v40 = a3[1];
  result = (float)*((unint64_t *)v40 - 3) / (float)(unint64_t)v3;
  *((_QWORD *)v40 - 3) = vcvtps_u32_f32(result);
  return result;
}

void sub_19115F760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (!*(_QWORD *)v13)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v13 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

_QWORD *Espresso::AOT::GetTensorAlignment@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v4 = a3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v6 = 1;
  if (a2 <= 10005)
  {
    if ((a2 - 100) < 2 || !a2)
      goto LABEL_9;
LABEL_16:
    Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported platform encountered while querying for blob alignment.");
  }
  if ((a2 - 10006) < 3)
  {
    v6 = 64;
    goto LABEL_9;
  }
  if (a2 != 50005 && a2 != 50008)
    goto LABEL_16;
LABEL_9:
  if (a3)
  {
    if (((v6 - 1) & a3) != 0)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid row stride specified for ANE (not aligned)");
    v9 = a3;
    v7 = *(int *)(a1 + 20);
    if ((_DWORD)v7)
      goto LABEL_12;
  }
  else
  {
    v4 = v6;
    v9 = v6;
    v7 = *(int *)(a1 + 20);
    if ((_DWORD)v7)
    {
LABEL_12:
      result = std::vector<unsigned long>::insert(a4, 0, v7, &v9);
      *(_QWORD *)(a4[1] - 8) = 1;
      return result;
    }
  }
  result = operator new(0x20uLL);
  a4[1] = (unint64_t)(result + 4);
  a4[2] = (unint64_t)(result + 4);
  *result = v4;
  result[1] = v4;
  result[2] = v4;
  result[3] = 1;
  *a4 = (unint64_t)result;
  return result;
}

void sub_19115F8EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

const double *std::vector<unsigned long>::insert(unint64_t *a1, void *a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  const double *v6;
  const double *v7;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  int64x2_t v30;
  int64x2_t *v31;
  uint64_t v32;
  unint64_t v33;
  const double *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int64x2_t v45;
  int64x2_t *v46;
  uint64_t v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  double *v66;
  unint64_t v67;
  float64x2_t v69;
  float64x2_t *v70;
  unint64_t v71;

  v4 = *a1;
  v5 = (uint64_t)a2 - *a1;
  v6 = (const double *)(*a1 + (v5 & 0xFFFFFFFFFFFFFFF8));
  if (!a3)
    return v6;
  v7 = (const double *)a4;
  v10 = v5 >> 3;
  v12 = a1[1];
  v11 = a1[2];
  if (a3 <= (uint64_t)(v11 - v12) >> 3)
  {
    v19 = (uint64_t)(v12 - (_QWORD)v6) >> 3;
    v20 = a3;
    if (a3 <= v19)
    {
      v21 = a1[1];
      v19 = a3;
      goto LABEL_42;
    }
    v21 = v12 + 8 * (a3 - v19);
    v22 = v20 * 8 - (v12 - (_QWORD)v6) - 8;
    if (v22 >= 0x98)
    {
      if (v12 >= (unint64_t)(a4 + 1)
        || (v23 = (uint64_t *)a1[1], v12 + (v22 & 0xFFFFFFFFFFFFFFF8) + 8 <= (unint64_t)a4))
      {
        v44 = (v22 >> 3) + 1;
        v23 = (uint64_t *)(v12 + 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL));
        v45 = vdupq_lane_s64(*a4, 0);
        v46 = (int64x2_t *)(v12 + 16);
        v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v46[-1] = v45;
          *v46 = v45;
          v46 += 2;
          v47 -= 4;
        }
        while (v47);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_41:
          a1[1] = v21;
          if ((const double *)v12 == v6)
            return v6;
LABEL_42:
          v48 = (char *)&v6[v20];
          v49 = v21 - (_QWORD)&v6[v20];
          v50 = v49 >> 3;
          v51 = (uint64_t *)(v21 - v20 * 8);
          v52 = (_QWORD *)v21;
          if ((unint64_t)v51 < v12)
          {
            v53 = (v5 & 0xFFFFFFFFFFFFFFF8) + v49;
            v54 = (char *)(v53 + v4);
            v55 = v53 + v4 + 8;
            if (v12 > v55)
              v55 = v12;
            v56 = v55 + ~v4 - v53;
            if (v56 < 0x58)
            {
              v52 = (_QWORD *)v21;
            }
            else
            {
              v57 = v21 - (_QWORD)v54;
              v52 = (_QWORD *)v21;
              if (v57 >= 0x20)
              {
                v58 = (v56 >> 3) + 1;
                v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
                v51 = (uint64_t *)((char *)v51 + v59);
                v52 = (_QWORD *)(v21 + v59);
                v60 = (_OWORD *)(v21 + 16);
                v61 = (__int128 *)(8 * v50 + 8 * v10 + v4 + 16);
                v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v63 = *v61;
                  *(v60 - 1) = *(v61 - 1);
                  *v60 = v63;
                  v60 += 2;
                  v61 += 2;
                  v62 -= 4;
                }
                while (v62);
                if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_53;
              }
            }
            do
            {
              v64 = *v51++;
              *v52++ = v64;
            }
            while ((unint64_t)v51 < v12);
          }
LABEL_53:
          a1[1] = (unint64_t)v52;
          if ((char *)v21 != v48)
            memmove((void *)(v21 - 8 * v50), v6, v49);
          if (v6 <= v7)
          {
            if (a1[1] <= (unint64_t)v7)
              v65 = 0;
            else
              v65 = a3;
            v7 += v65;
          }
          if (v19 >= 0xA && (v6 >= v7 + 1 || (unint64_t)v7 >= v4 + (v5 & 0xFFFFFFFFFFFFFFF8) + 8 * v19))
          {
            v66 = (double *)&v6[v19 & 0xFFFFFFFFFFFFFFFCLL];
            v67 = v19 & 3;
            v69 = vld1q_dup_f64(v7);
            v70 = (float64x2_t *)(v4 + 8 * v10 + 16);
            v71 = v19 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v70[-1] = v69;
              *v70 = v69;
              v70 += 2;
              v71 -= 4;
            }
            while (v71);
            if (v19 == (v19 & 0xFFFFFFFFFFFFFFFCLL))
              return v6;
          }
          else
          {
            v66 = (double *)v6;
            v67 = v19;
          }
          do
          {
            *v66++ = *v7;
            --v67;
          }
          while (v67);
          return v6;
        }
      }
    }
    else
    {
      v23 = (uint64_t *)a1[1];
    }
    do
      *v23++ = *a4;
    while (v23 != (uint64_t *)v21);
    goto LABEL_41;
  }
  v13 = a3 + ((uint64_t)(v12 - v4) >> 3);
  if (v13 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v15 = v11 - v4;
  if (v15 >> 2 > v13)
    v13 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v13;
  if (v16)
  {
    if (v16 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = v16;
    v18 = operator new(8 * v16);
    v16 = v17;
  }
  else
  {
    v18 = 0;
  }
  v24 = v5 >> 3;
  v25 = (unint64_t)&v18[8 * v10];
  v26 = (char *)(v25 + 8 * a3);
  v27 = (a3 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v28 = (char *)v25;
  if (v27 < 0x13)
    goto LABEL_75;
  if (v25 < (unint64_t)(v7 + 1))
  {
    v28 = (char *)v25;
    if (&v18[8 * a3 + (v5 & 0xFFFFFFFFFFFFFFF8)] > (_BYTE *)v7)
      goto LABEL_75;
  }
  v29 = v27 + 1;
  v28 = (char *)(v25 + 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL));
  v30 = vdupq_lane_s64(*(_QWORD *)v7, 0);
  v31 = (int64x2_t *)&v18[8 * v24 + 16];
  v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v31[-1] = v30;
    *v31 = v30;
    v31 += 2;
    v32 -= 4;
  }
  while (v32);
  if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_75:
    do
    {
      *(double *)v28 = *v7;
      v28 += 8;
    }
    while (v28 != v26);
  }
  v33 = v25;
  if ((void *)v4 != a2)
  {
    v34 = v6;
    v33 = v25;
    if ((unint64_t)(v5 - 8) < 0x68)
      goto LABEL_76;
    v34 = v6;
    v33 = v25;
    if ((v5 & 0xFFFFFFFFFFFFFFF8) + v4 - (unint64_t)&v18[v5 & 0xFFFFFFFFFFFFFFF8] < 0x20)
      goto LABEL_76;
    v35 = ((unint64_t)(v5 - 8) >> 3) + 1;
    v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v6[v36 / 0xFFFFFFFFFFFFFFF8];
    v33 = v25 - v36;
    v37 = 8 * v24 - 16;
    v38 = &v18[v37];
    v39 = (__int128 *)(v4 + v37);
    v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v41 = *v39;
      *(v38 - 1) = *(v39 - 1);
      *v38 = v41;
      v38 -= 2;
      v39 -= 2;
      v40 -= 4;
    }
    while (v40);
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_76:
      do
      {
        v42 = *((_QWORD *)v34-- - 1);
        *(_QWORD *)(v33 - 8) = v42;
        v33 -= 8;
      }
      while (v34 != (const double *)v4);
    }
  }
  v43 = &v18[8 * v16];
  if ((const double *)v12 != v6)
    memmove(v26, v6, v12 - (_QWORD)v6);
  *a1 = v33;
  a1[1] = (unint64_t)&v26[v12 - (_QWORD)v6];
  a1[2] = (unint64_t)v43;
  if (v4)
    operator delete((void *)v4);
  return (const double *)v25;
}

BOOL Espresso::AOT::AreSurfaceDescriptorsEnabled(Espresso::AOT *this, const Espresso::net *a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  int v8;
  const void *v9;
  size_t v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  char **v15;
  unint64_t v16;
  int v17;
  char *v18;
  size_t v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  unsigned __int8 *v24;
  int v25;

  v3 = (char *)operator new(0x28uLL);
  strcpy(v3, "experimental.aot.enable_surface_desc");
  v4 = (char *)*((_QWORD *)this + 60);
  if (!v4)
    goto LABEL_32;
  v5 = (char *)this + 480;
  v6 = (char *)this + 480;
  do
  {
    v7 = v4[55];
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *((_QWORD *)v4 + 5);
    if (v8 >= 0)
      v9 = v4 + 32;
    else
      v9 = (const void *)*((_QWORD *)v4 + 4);
    if (v7 >= 0x24)
      v10 = 36;
    else
      v10 = v7;
    v11 = v7 < 0x24;
    v12 = memcmp(v9, v3, v10);
    v13 = v12 < 0;
    if (!v12)
      v13 = v11;
    v14 = !v13;
    if (v13)
      v15 = (char **)(v4 + 8);
    else
      v15 = (char **)v4;
    if (v14)
      v6 = v4;
    v4 = *v15;
  }
  while (*v15);
  if (v6 == v5)
    goto LABEL_32;
  v16 = v6[55];
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)v6 + 5);
  v18 = v17 >= 0 ? v6 + 32 : (char *)*((_QWORD *)v6 + 4);
  v19 = v16 >= 0x24 ? 36 : v16;
  v20 = v16 > 0x24;
  v21 = memcmp(v3, v18, v19);
  v22 = v21 < 0;
  if (!v21)
    v22 = v20;
  if (v22)
  {
LABEL_32:
    operator delete(v3);
    return 0;
  }
  operator delete(v3);
  v24 = (unsigned __int8 *)(v6 + 56);
  v25 = v6[79];
  if ((v25 & 0x80000000) == 0)
  {
    if (v25 != 1)
      return 0;
    return *v24 == 49;
  }
  if (*((_QWORD *)v6 + 8) == 1)
  {
    v24 = *(unsigned __int8 **)v24;
    return *v24 == 49;
  }
  return 0;
}

uint64_t Espresso::AOT::MapTransformParamsToSurfaceFormat(Espresso::AOT *this, const vimage2espresso_param *a2, const Espresso::layer_nd_shape *a3)
{
  uint64_t bias_g_low;
  size_t v6;
  char *v7;
  uint64_t v8;

  bias_g_low = SLODWORD(a2->bias_g);
  if (bias_g_low < 3)
    return 1;
  if ((bias_g_low & 0x80000000) != 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v6 = 4 * bias_g_low;
  v7 = (char *)operator new(4 * bias_g_low);
  memcpy(v7, a2, v6);
  v8 = *(int *)&v7[v6 - 12];
  operator delete(v7);
  if ((_DWORD)v8 == 1)
    return 1;
  if ((unint64_t)(v8 - 3) > 1)
    Espresso::throw_exception_selector<Espresso::generic_error>("Invalid number of components for surface.");
  if (*((_DWORD *)this + 2))
    return 2;
  else
    return 3;
}

void sub_19115FFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::GetSurfaceFormatGivenBlobProperties(uint64_t a1, Espresso::AOT *this, vimage2espresso_param *a3)
{
  unsigned int *v3;
  uint64_t v4;

  if (a1 && (v3 = *(unsigned int **)(a1 + 16), (v4 = (uint64_t)(*(_QWORD *)(a1 + 24) - (_QWORD)v3) >> 2) != 0))
  {
    if (v4 != 1)
      Espresso::throw_exception_selector<Espresso::generic_error>("Multiple 4cc formats specification is not yet supported.");
    return E5RT::CVPB4ccToSurfaceFormat((E5RT *)*v3);
  }
  else
  {
    if (!this)
      Espresso::throw_exception_selector<Espresso::generic_error>("Surface format could not be determined.");
    return Espresso::AOT::MapTransformParamsToSurfaceFormat(this, a3, (const Espresso::layer_nd_shape *)a3);
  }
}

uint64_t Espresso::AOT::GetBlobNumericalProperties(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a1 + 136), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *((_QWORD *)v2 + 5) + 112;
}

uint64_t Espresso::AOT::GetBlobTransformParams(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  size_t v5;
  const void *v6;
  uint64_t v7;
  int v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;
  uint64_t *v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  int v23;
  _BOOL4 v24;

  v2 = *(_QWORD *)(a1 + 336);
  if (!v2)
    return 0;
  v3 = a1 + 336;
  v4 = *(char *)(a2 + 23);
  v5 = v4 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v6 = v4 >= 0 ? (const void *)a2 : *(const void **)a2;
  v7 = a1 + 336;
  do
  {
    v8 = *(char *)(v2 + 55);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(v2 + 55);
    else
      v9 = *(_QWORD *)(v2 + 40);
    if (v8 >= 0)
      v10 = (const void *)(v2 + 32);
    else
      v10 = *(const void **)(v2 + 32);
    if (v5 >= v9)
      v11 = v9;
    else
      v11 = v5;
    v12 = memcmp(v10, v6, v11);
    v13 = v9 < v5;
    if (v12)
      v13 = v12 < 0;
    v14 = !v13;
    if (v13)
      v15 = (uint64_t *)(v2 + 8);
    else
      v15 = (uint64_t *)v2;
    if (v14)
      v7 = v2;
    v2 = *v15;
  }
  while (*v15);
  if (v7 == v3)
    return 0;
  v18 = *(const void **)(v7 + 32);
  v17 = v7 + 32;
  v16 = v18;
  v19 = *(char *)(v17 + 23);
  if (v19 >= 0)
    v20 = *(unsigned __int8 *)(v17 + 23);
  else
    v20 = *(_QWORD *)(v17 + 8);
  if (v19 >= 0)
    v21 = (const void *)v17;
  else
    v21 = v16;
  if (v20 >= v5)
    v22 = v5;
  else
    v22 = v20;
  v23 = memcmp(v6, v21, v22);
  v24 = v5 < v20;
  if (v23)
    v24 = v23 < 0;
  if (v24)
    return 0;
  else
    return v17 + 24;
}

uint64_t Espresso::AOT::ShouldBlobBeSerializedAsTensor(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL4 v3;

  if (!a1)
    return a3 ^ 1 | (a2 == 0);
  v3 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 24);
  if (a2)
    v3 = 0;
  return a3 ^ 1 | v3;
}

void Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(int8x8_t *this, const Espresso::net *a2)
{
  _BOOL4 v3;
  int8x8_t v4;
  int8x8_t v5;
  unint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  int **v9;
  int v10;
  int *v12;
  int v13;
  int v14;
  const void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int8x8_t v21;
  uint8x8_t v22;
  unint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  uint8x8_t v33;
  unint64_t v34;
  int8x8_t v35;
  uint8x8_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int8x8_t v53;
  uint8x8_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int8x8_t v61;
  uint8x8_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void **v86;
  char *v87;
  void **v88;
  void **v89;
  char *v90;
  void **v91;
  char *v92;
  void **v93;
  void **v94;
  void *__p[2];
  char v96;
  int v97;
  void *v98;
  std::__shared_weak_count *v99;
  void **v100;
  _QWORD v101[3];
  _QWORD *v102;
  _QWORD v103[3];
  _QWORD *v104;
  _QWORD v105[3];
  _QWORD *v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v3 = Espresso::AOT::AreSurfaceDescriptorsEnabled((Espresso::AOT *)this, a2);
  v5 = this[4];
  v4 = this[5];
  if (*(_QWORD *)&v4 != *(_QWORD *)&v5)
  {
    v6 = 0;
    v7 = v3;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)&v5 + 16 * v6);
      v9 = (int **)(v8 + 40);
      v10 = *(char *)(v8 + 63);
      if (v10 < 0)
      {
        if (*(_QWORD *)(v8 + 48) != 6)
          goto LABEL_4;
        v12 = *v9;
        v13 = *v12;
        v14 = *((unsigned __int16 *)v12 + 2);
        if (v13 != 1601594724 || v14 != 28783)
          goto LABEL_4;
      }
      else
      {
        if (v10 != 6)
          goto LABEL_4;
        if (*(_DWORD *)v9 != 1601594724 || *(_WORD *)(v8 + 44) != 28783)
          goto LABEL_4;
      }
      v16 = *(const void **)(v8 + 64);
      if (!v16
      {
        v98 = 0;
        v99 = 0;
        Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to dev_op kernel");
      }
      v18 = *(std::__shared_weak_count **)(v8 + 72);
      v98 = v17;
      v99 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      v97 = 0;
      v97 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v17 + 320))(v17);
      if (is_cpu(&v97))
      {
        v21 = this[8];
        if (!*(_QWORD *)&v21)
          goto LABEL_196;
        v22 = (uint8x8_t)vcnt_s8(v21);
        v22.i16[0] = vaddlv_u8(v22);
        if (v22.u32[0] > 1uLL)
        {
          v23 = v6;
          if (v6 >= *(_QWORD *)&v21)
            v23 = v6 % *(_QWORD *)&v21;
        }
        else
        {
          v23 = (*(_QWORD *)&v21 - 1) & v6;
        }
        v27 = *(_QWORD **)(*(_QWORD *)&this[7] + 8 * v23);
        if (!v27)
          goto LABEL_196;
        v28 = (_QWORD *)*v27;
        if (!v28)
          goto LABEL_196;
        if (v22.u32[0] < 2uLL)
        {
          v29 = *(_QWORD *)&v21 - 1;
          while (1)
          {
            v31 = v28[1];
            if (v6 == v31)
            {
              if (v28[2] == v6)
                goto LABEL_49;
            }
            else if ((v31 & v29) != v23)
            {
              goto LABEL_196;
            }
            v28 = (_QWORD *)*v28;
            if (!v28)
              goto LABEL_196;
          }
        }
        while (1)
        {
          v30 = v28[1];
          if (v6 == v30)
          {
            if (v28[2] == v6)
            {
LABEL_49:
              v32 = this[13];
              if (v32)
              {
                v33 = (uint8x8_t)vcnt_s8(v32);
                v33.i16[0] = vaddlv_u8(v33);
                if (v33.u32[0] > 1uLL)
                {
                  v34 = v6;
                  if (v6 >= *(_QWORD *)&v32)
                    v34 = v6 % *(_QWORD *)&v32;
                }
                else
                {
                  v34 = (*(_QWORD *)&v32 - 1) & v6;
                }
                v38 = *(_QWORD **)(*(_QWORD *)&this[12] + 8 * v34);
                if (v38)
                {
                  v39 = (_QWORD *)*v38;
                  if (*v38)
                  {
                    if (v33.u32[0] < 2uLL)
                    {
                      v40 = *(_QWORD *)&v32 - 1;
                      while (1)
                      {
                        v42 = v39[1];
                        if (v6 == v42)
                        {
                          if (v39[2] == v6)
                            goto LABEL_73;
                        }
                        else if ((v42 & v40) != v34)
                        {
                          goto LABEL_196;
                        }
                        v39 = (_QWORD *)*v39;
                        if (!v39)
                          goto LABEL_196;
                      }
                    }
                    do
                    {
                      v41 = v39[1];
                      if (v6 == v41)
                      {
                        if (v39[2] == v6)
                        {
LABEL_73:
                          v105[0] = &off_1E2DB2688;
                          v105[1] = this;
                          v105[2] = v7;
                          v106 = v105;
                          v96 = 3;
                          LODWORD(__p[0]) = 5591107;
                          v43 = v28[3];
                          v44 = v28[4];
                          if (v43 != v44)
                          {
                            while (1)
                            {
                              if (!v106)
LABEL_197:
                                std::__throw_bad_function_call[abi:ne180100]();
                              if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v106 + 48))(v106, v43) & 1) == 0)
                                break;
                              v43 += 24;
                              if (v43 == v44)
                                goto LABEL_77;
                            }
                            v86 = __p;
                            if (v96 < 0)
                              v86 = (void **)__p[0];
                            v100 = v86;
                            v87 = "Layer input to %s op has invalid numerical properties.";
LABEL_206:
                            Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(v87, &v100);
                          }
LABEL_77:
                          v45 = v39[3];
                          v46 = v39[4];
                          if (v45 != v46)
                          {
                            while (1)
                            {
                              if (!v106)
                                goto LABEL_197;
                              if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v106 + 48))(v106, v45) & 1) == 0)
                                break;
                              v45 += 24;
                              if (v45 == v46)
                                goto LABEL_81;
                            }
                            v88 = __p;
                            if (v96 < 0)
                              v88 = (void **)__p[0];
                            v100 = v88;
                            v87 = "Layer output of %s op has invalid numerical properties.";
                            goto LABEL_206;
                          }
LABEL_81:
                          if (v96 < 0)
                          {
                            operator delete(__p[0]);
                            v47 = v106;
                            if (v106 == v105)
                              goto LABEL_85;
                          }
                          else
                          {
                            v47 = v106;
                            if (v106 == v105)
                            {
LABEL_85:
                              v47 = v105;
                              goto LABEL_188;
                            }
                          }
LABEL_185:
                          if (v47)
                          {
                            v82 = 5;
                            goto LABEL_189;
                          }
                          goto LABEL_190;
                        }
                      }
                      else
                      {
                        if (v41 >= *(_QWORD *)&v32)
                          v41 %= *(_QWORD *)&v32;
                        if (v41 != v34)
                          break;
                      }
                      v39 = (_QWORD *)*v39;
                    }
                    while (v39);
                  }
                }
              }
LABEL_196:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          else
          {
            if (v30 >= *(_QWORD *)&v21)
              v30 %= *(_QWORD *)&v21;
            if (v30 != v23)
              goto LABEL_196;
          }
          v28 = (_QWORD *)*v28;
          if (!v28)
            goto LABEL_196;
        }
      }
      if (!is_gpu(&v97))
      {
        if (!is_ane(&v97))
          Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported platform encountered for dev op kernel.");
        v35 = this[8];
        if (!*(_QWORD *)&v35)
          goto LABEL_196;
        v36 = (uint8x8_t)vcnt_s8(v35);
        v36.i16[0] = vaddlv_u8(v36);
        if (v36.u32[0] > 1uLL)
        {
          v37 = v6;
          if (v6 >= *(_QWORD *)&v35)
            v37 = v6 % *(_QWORD *)&v35;
        }
        else
        {
          v37 = (*(_QWORD *)&v35 - 1) & v6;
        }
        v56 = *(_QWORD **)(*(_QWORD *)&this[7] + 8 * v37);
        if (!v56)
          goto LABEL_196;
        v57 = (_QWORD *)*v56;
        if (!v57)
          goto LABEL_196;
        if (v36.u32[0] < 2uLL)
        {
          v58 = *(_QWORD *)&v35 - 1;
          while (1)
          {
            v60 = v57[1];
            if (v6 == v60)
            {
              if (v57[2] == v6)
                goto LABEL_123;
            }
            else if ((v60 & v58) != v37)
            {
              goto LABEL_196;
            }
            v57 = (_QWORD *)*v57;
            if (!v57)
              goto LABEL_196;
          }
        }
        while (1)
        {
          v59 = v57[1];
          if (v6 == v59)
          {
            if (v57[2] == v6)
            {
LABEL_123:
              v61 = this[13];
              if (!*(_QWORD *)&v61)
                goto LABEL_196;
              v62 = (uint8x8_t)vcnt_s8(v61);
              v62.i16[0] = vaddlv_u8(v62);
              if (v62.u32[0] > 1uLL)
              {
                v63 = v6;
                if (v6 >= *(_QWORD *)&v61)
                  v63 = v6 % *(_QWORD *)&v61;
              }
              else
              {
                v63 = (*(_QWORD *)&v61 - 1) & v6;
              }
              v73 = *(_QWORD **)(*(_QWORD *)&this[12] + 8 * v63);
              if (!v73)
                goto LABEL_196;
              v74 = (_QWORD *)*v73;
              if (!*v73)
                goto LABEL_196;
              if (v62.u32[0] < 2uLL)
              {
                v75 = *(_QWORD *)&v61 - 1;
                while (1)
                {
                  v77 = v74[1];
                  if (v6 == v77)
                  {
                    if (v74[2] == v6)
                      goto LABEL_171;
                  }
                  else if ((v77 & v75) != v63)
                  {
                    goto LABEL_196;
                  }
                  v74 = (_QWORD *)*v74;
                  if (!v74)
                    goto LABEL_196;
                }
              }
              while (1)
              {
                v76 = v74[1];
                if (v6 == v76)
                {
                  if (v74[2] == v6)
                  {
LABEL_171:
                    v101[0] = &off_1E2DB2738;
                    v101[1] = this;
                    v101[2] = v7;
                    v102 = v101;
                    v96 = 3;
                    LODWORD(__p[0]) = 4542017;
                    v78 = v57[3];
                    v79 = v57[4];
                    if (v78 == v79)
                    {
LABEL_175:
                      v80 = v74[3];
                      v81 = v74[4];
                      if (v80 == v81)
                      {
LABEL_179:
                        if (v96 < 0)
                        {
                          operator delete(__p[0]);
                          v47 = v102;
                          if (v102 != v101)
                            goto LABEL_185;
                        }
                        else
                        {
                          v47 = v102;
                          if (v102 != v101)
                            goto LABEL_185;
                        }
                        v47 = v101;
                        goto LABEL_188;
                      }
                      while (1)
                      {
                        if (!v102)
                          goto LABEL_201;
                        if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v102 + 48))(v102, v80) & 1) == 0)
                          break;
                        v80 += 24;
                        if (v80 == v81)
                          goto LABEL_179;
                      }
                      v94 = __p;
                      if (v96 < 0)
                        v94 = (void **)__p[0];
                      v100 = v94;
                      v90 = "Layer output of %s op has invalid numerical properties.";
                    }
                    else
                    {
                      while (1)
                      {
                        if (!v102)
LABEL_201:
                          std::__throw_bad_function_call[abi:ne180100]();
                        if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v102 + 48))(v102, v78) & 1) == 0)
                          break;
                        v78 += 24;
                        if (v78 == v79)
                          goto LABEL_175;
                      }
                      v89 = __p;
                      if (v96 < 0)
                        v89 = (void **)__p[0];
                      v100 = v89;
                      v90 = "Layer input to %s op has invalid numerical properties.";
                    }
                    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(v90, &v100);
                  }
                }
                else
                {
                  if (v76 >= *(_QWORD *)&v61)
                    v76 %= *(_QWORD *)&v61;
                  if (v76 != v63)
                    goto LABEL_196;
                }
                v74 = (_QWORD *)*v74;
                if (!v74)
                  goto LABEL_196;
              }
            }
          }
          else
          {
            if (v59 >= *(_QWORD *)&v35)
              v59 %= *(_QWORD *)&v35;
            if (v59 != v37)
              goto LABEL_196;
          }
          v57 = (_QWORD *)*v57;
          if (!v57)
            goto LABEL_196;
        }
      }
      v24 = this[8];
      if (!*(_QWORD *)&v24)
        goto LABEL_196;
      v25 = (uint8x8_t)vcnt_s8(v24);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        v26 = v6;
        if (v6 >= *(_QWORD *)&v24)
          v26 = v6 % *(_QWORD *)&v24;
      }
      else
      {
        v26 = (*(_QWORD *)&v24 - 1) & v6;
      }
      v48 = *(_QWORD **)(*(_QWORD *)&this[7] + 8 * v26);
      if (!v48)
        goto LABEL_196;
      v49 = (_QWORD *)*v48;
      if (!v49)
        goto LABEL_196;
      if (v25.u32[0] < 2uLL)
      {
        v50 = *(_QWORD *)&v24 - 1;
        while (1)
        {
          v52 = v49[1];
          if (v6 == v52)
          {
            if (v49[2] == v6)
              goto LABEL_103;
          }
          else if ((v52 & v50) != v26)
          {
            goto LABEL_196;
          }
          v49 = (_QWORD *)*v49;
          if (!v49)
            goto LABEL_196;
        }
      }
      while (1)
      {
        v51 = v49[1];
        if (v6 == v51)
          break;
        if (v51 >= *(_QWORD *)&v24)
          v51 %= *(_QWORD *)&v24;
        if (v51 != v26)
          goto LABEL_196;
LABEL_93:
        v49 = (_QWORD *)*v49;
        if (!v49)
          goto LABEL_196;
      }
      if (v49[2] != v6)
        goto LABEL_93;
LABEL_103:
      v53 = this[13];
      if (!*(_QWORD *)&v53)
        goto LABEL_196;
      v54 = (uint8x8_t)vcnt_s8(v53);
      v54.i16[0] = vaddlv_u8(v54);
      if (v54.u32[0] > 1uLL)
      {
        v55 = v6;
        if (v6 >= *(_QWORD *)&v53)
          v55 = v6 % *(_QWORD *)&v53;
      }
      else
      {
        v55 = (*(_QWORD *)&v53 - 1) & v6;
      }
      v64 = *(_QWORD **)(*(_QWORD *)&this[12] + 8 * v55);
      if (!v64)
        goto LABEL_196;
      v65 = (_QWORD *)*v64;
      if (!*v64)
        goto LABEL_196;
      if (v54.u32[0] < 2uLL)
      {
        v66 = *(_QWORD *)&v53 - 1;
        while (1)
        {
          v68 = v65[1];
          if (v6 == v68)
          {
            if (v65[2] == v6)
              goto LABEL_143;
          }
          else if ((v68 & v66) != v55)
          {
            goto LABEL_196;
          }
          v65 = (_QWORD *)*v65;
          if (!v65)
            goto LABEL_196;
        }
      }
      while (2)
      {
        v67 = v65[1];
        if (v6 != v67)
        {
          if (v67 >= *(_QWORD *)&v53)
            v67 %= *(_QWORD *)&v53;
          if (v67 != v55)
            goto LABEL_196;
LABEL_133:
          v65 = (_QWORD *)*v65;
          if (!v65)
            goto LABEL_196;
          continue;
        }
        break;
      }
      if (v65[2] != v6)
        goto LABEL_133;
LABEL_143:
      v103[0] = &off_1E2DB26E0;
      v103[1] = this;
      v103[2] = v7;
      v104 = v103;
      v96 = 3;
      LODWORD(__p[0]) = 5591111;
      v69 = v49[3];
      v70 = v49[4];
      if (v69 != v70)
      {
        while (1)
        {
          if (!v104)
LABEL_202:
            std::__throw_bad_function_call[abi:ne180100]();
          if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v104 + 48))(v104, v69) & 1) == 0)
            break;
          v69 += 24;
          if (v69 == v70)
            goto LABEL_147;
        }
        v91 = __p;
        if (v96 < 0)
          v91 = (void **)__p[0];
        v100 = v91;
        v92 = "Layer input to %s op has invalid numerical properties.";
LABEL_216:
        Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(v92, &v100);
      }
LABEL_147:
      v71 = v65[3];
      v72 = v65[4];
      if (v71 != v72)
      {
        while (1)
        {
          if (!v104)
            goto LABEL_202;
          if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v104 + 48))(v104, v71) & 1) == 0)
            break;
          v71 += 24;
          if (v71 == v72)
            goto LABEL_151;
        }
        v93 = __p;
        if (v96 < 0)
          v93 = (void **)__p[0];
        v100 = v93;
        v92 = "Layer output of %s op has invalid numerical properties.";
        goto LABEL_216;
      }
LABEL_151:
      if (v96 < 0)
      {
        operator delete(__p[0]);
        v47 = v104;
        if (v104 != v103)
          goto LABEL_185;
      }
      else
      {
        v47 = v104;
        if (v104 != v103)
          goto LABEL_185;
      }
      v47 = v103;
LABEL_188:
      v82 = 4;
LABEL_189:
      (*(void (**)(void))(*v47 + 8 * v82))();
LABEL_190:
      v83 = v99;
      if (v99)
      {
        v84 = (unint64_t *)&v99->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v5 = this[4];
      v4 = this[5];
LABEL_4:
      ++v6;
    }
    while (v6 < (uint64_t)(*(_QWORD *)&v4 - *(_QWORD *)&v5) >> 4);
  }
}

void sub_191160C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

size_t Espresso::AOT::GetANENameForE5Platform@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int64_t v4;
  __CFString **v5;
  __CFString **v6;
  const char *v8;
  size_t result;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::string *v14;
  __int128 v15;
  const char *v16;
  std::string v17;
  __int128 v18;
  int64_t v19;

  v4 = *(_QWORD *)a1;
  if (v4 > 32815)
  {
    if (v4 > 33536)
    {
      if (v4 == 33537)
      {
        v5 = Espresso::ANECompilerEngine::ANEArchitectureM10;
      }
      else
      {
        if (v4 != 33552)
          goto LABEL_46;
        v5 = Espresso::ANECompilerEngine::ANEArchitectureM11;
      }
    }
    else
    {
      switch(v4)
      {
        case 33025:
          v5 = Espresso::ANECompilerEngine::ANEArchitectureH13;
          goto LABEL_37;
        case 33026:
        case 33028:
        case 33029:
        case 33030:
        case 33031:
        case 33032:
        case 33033:
        case 33034:
        case 33035:
        case 33036:
        case 33037:
        case 33038:
        case 33039:
        case 33041:
        case 33043:
        case 33044:
        case 33045:
        case 33046:
        case 33047:
        case 33048:
        case 33049:
        case 33050:
        case 33051:
        case 33052:
        case 33053:
        case 33054:
        case 33055:
        case 33057:
        case 33059:
        case 33060:
        case 33061:
        case 33062:
        case 33063:
        case 33064:
        case 33065:
        case 33066:
        case 33067:
        case 33068:
        case 33069:
        case 33070:
        case 33071:
        case 33073:
        case 33075:
        case 33076:
        case 33077:
        case 33078:
        case 33079:
        case 33080:
        case 33081:
        case 33082:
        case 33083:
        case 33084:
        case 33085:
        case 33086:
        case 33087:
          goto LABEL_46;
        case 33027:
          goto LABEL_14;
        case 33040:
          v5 = Espresso::ANECompilerEngine::ANEArchitectureH14;
          goto LABEL_37;
        case 33042:
          goto LABEL_12;
        case 33056:
          v5 = Espresso::ANECompilerEngine::ANEArchitectureH15;
          goto LABEL_37;
        case 33058:
          goto LABEL_11;
        case 33072:
          v5 = Espresso::ANECompilerEngine::ANEArchitectureH16;
          goto LABEL_37;
        case 33074:
          v5 = &Espresso::ANECompilerEngine::ANEArchitectureH16G;
          goto LABEL_37;
        case 33088:
          v5 = &Espresso::ANECompilerEngine::ANEArchitectureH17;
          goto LABEL_37;
        default:
          if (v4 != 32816)
            goto LABEL_46;
          v5 = Espresso::ANECompilerEngine::ANEArchitectureH12;
          break;
      }
    }
    goto LABEL_37;
  }
  if (v4 > 32773)
  {
    if (v4 == 32774)
    {
      v5 = Espresso::ANECompilerEngine::ANEArchitectureM9;
    }
    else
    {
      if (v4 != 32800 && v4 != 32807)
      {
LABEL_46:
        std::to_string(&v17, v4);
        v14 = std::string::insert(&v17, 0, "Invalid platform id: ");
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v19 = v14->__r_.__value_.__r.__words[2];
        v18 = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        if (v19 >= 0)
          v16 = (const char *)&v18;
        else
          v16 = (const char *)v18;
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v16);
      }
      v5 = Espresso::ANECompilerEngine::ANEArchitectureH11;
    }
LABEL_37:
    v8 = (const char *)-[__CFString UTF8String](*v5, "UTF8String");
    result = strlen(v8);
    if (result > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_27;
    goto LABEL_38;
  }
  if ((unint64_t)(v4 - 24576) > 0x34)
    goto LABEL_46;
  if (((1 << v4) & 0x17000000000000) != 0)
  {
LABEL_11:
    v5 = Espresso::ANECompilerEngine::ANEArchitectureH15G;
    goto LABEL_37;
  }
  if (((1 << v4) & 7) != 0)
  {
LABEL_14:
    v5 = Espresso::ANECompilerEngine::ANEArchitectureH13G;
    goto LABEL_37;
  }
  if (((1 << v4) & 0x700000000) == 0)
    goto LABEL_46;
LABEL_12:
  if (*(_DWORD *)(a1 + 8) == 1311977521)
    v6 = Espresso::ANECompilerEngine::ANEArchitectureH14GN301;
  else
    v6 = Espresso::ANECompilerEngine::ANEArchitectureH14G;
  v8 = (const char *)-[__CFString UTF8String](*v6, "UTF8String");
  result = strlen(v8);
  if (result > 0x7FFFFFFFFFFFFFF7)
LABEL_27:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_38:
  v10 = result;
  if (result >= 0x17)
  {
    v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v11 = result | 7;
    v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    a2[1] = v10;
    a2[2] = v12 | 0x8000000000000000;
    *a2 = v13;
    a2 = v13;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
      goto LABEL_45;
  }
  result = (size_t)memmove(a2, v8, v10);
LABEL_45:
  *((_BYTE *)a2 + v10) = 0;
  return result;
}

void sub_191160FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::ConfigToE5FuncName(uint64_t a1@<X0>, int a2@<W1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  int v7;
  size_t v8;
  int v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  const void *v15;
  char *v16;
  const std::string::value_type *v17;

  v5 = (_QWORD *)a4;
  if (!a2)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a4, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  v7 = *((char *)a3 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  v9 = *(char *)(a1 + 23);
  if (v9 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 23);
  else
    v10 = *(_QWORD *)(a1 + 8);
  v11 = v10 + v8;
  if (v10 + v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 > 0x16)
  {
    v12 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v12 = v11 | 7;
    v13 = v12 + 1;
    v14 = operator new(v12 + 1);
    v5[1] = v11;
    v5[2] = v13 | 0x8000000000000000;
    *v5 = v14;
    v5 = v14;
    if (!v8)
      goto LABEL_21;
    goto LABEL_17;
  }
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 23) = v11;
  if (v8)
  {
LABEL_17:
    if (v7 >= 0)
      v15 = a3;
    else
      v15 = *a3;
    memmove(v5, v15, v8);
  }
LABEL_21:
  v16 = (char *)v5 + v8;
  if (v10)
  {
    if (v9 >= 0)
      v17 = (const std::string::value_type *)a1;
    else
      v17 = *(const std::string::value_type **)a1;
    memmove(v16, v17, v10);
  }
  v16[v10] = 0;
}

void Espresso::AOT::E5FuncToConfigName(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int v5;
  int v7;
  std::string::size_type v8;

  v5 = *(char *)(a1 + 23);
  if (a2)
  {
    if (v5 < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      v7 = *(char *)(a3 + 23);
      if ((v7 & 0x80000000) == 0)
        goto LABEL_4;
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      v7 = *(char *)(a3 + 23);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_4:
        v8 = v7;
LABEL_9:
        std::string::erase(a4, 0, v8);
        return;
      }
    }
    v8 = *(_QWORD *)(a3 + 8);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void sub_1911611FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  char *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = (char *)operator new(0x50uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = v11;
  v29 = (std::string *)(v28 + 16);
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    *((_QWORD *)v28 + 4) = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *((_DWORD *)v28 + 18) = 1065353216;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_191161674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_19116168C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB2688;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB2688;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  BOOL v20;
  uint64_t *v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  BOOL v30;
  int v31;
  size_t v32;
  const void *v33;
  uint64_t v34;
  int v35;
  size_t v36;
  const void *v37;
  size_t v38;
  int v39;
  _BOOL4 v40;
  BOOL v41;
  uint64_t *v42;
  const void *v43;
  uint64_t v44;
  const void *v45;
  int v46;
  size_t v47;
  const void *v48;
  size_t v49;
  int v50;
  _BOOL4 v51;
  Espresso::AOT *v52;
  const Espresso::layer_nd_shape *v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  int v58;
  const char *v59;
  uint64_t v60;
  _BYTE v61[40];
  void *__p;
  void *v63;
  vimage2espresso_param v64;

  v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 136), (unsigned __int8 *)a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_QWORD *)v4 + 5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 336;
  v8 = *(_QWORD *)(v6 + 336);
  if (v8)
  {
    v60 = *(_QWORD *)(a1 + 8);
    v9 = *(_BYTE *)(a2 + 23);
    if (v9 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    if (v9 >= 0)
      v11 = (const void *)a2;
    else
      v11 = *(const void **)a2;
    v12 = v6 + 336;
    v13 = v8;
    do
    {
      v14 = *(char *)(v13 + 55);
      if (v14 >= 0)
        v15 = *(unsigned __int8 *)(v13 + 55);
      else
        v15 = *(_QWORD *)(v13 + 40);
      if (v14 >= 0)
        v16 = (const void *)(v13 + 32);
      else
        v16 = *(const void **)(v13 + 32);
      if (v10 >= v15)
        v17 = v15;
      else
        v17 = v10;
      v18 = memcmp(v16, v11, v17);
      v19 = v15 < v10;
      if (v18)
        v19 = v18 < 0;
      v20 = !v19;
      if (v19)
        v21 = (uint64_t *)(v13 + 8);
      else
        v21 = (uint64_t *)v13;
      if (v20)
        v12 = v13;
      v13 = *v21;
    }
    while (*v21);
    if (v12 == v7)
    {
      v6 = v60;
      v30 = *(_QWORD *)(v5 + 128) == *(_QWORD *)(v5 + 136);
      if (!*(_BYTE *)(a1 + 16))
        return !*(_DWORD *)(v5 + 120) && *(_DWORD *)(v5 + 124) == 1;
    }
    else
    {
      v24 = *(const void **)(v12 + 32);
      v23 = v12 + 32;
      v22 = v24;
      v25 = *(char *)(v23 + 23);
      if (v25 >= 0)
        v26 = *(unsigned __int8 *)(v23 + 23);
      else
        v26 = *(_QWORD *)(v23 + 8);
      if (v25 >= 0)
        v27 = (const void *)v23;
      else
        v27 = v22;
      if (v26 >= v10)
        v28 = v10;
      else
        v28 = v26;
      v29 = memcmp(v11, v27, v28);
      v30 = v10 < v26;
      if (v29)
        v30 = v29 < 0;
      v6 = v60;
      if (*(_QWORD *)(v5 + 128) != *(_QWORD *)(v5 + 136))
        v30 = 0;
      if (!*(_BYTE *)(a1 + 16))
        return !*(_DWORD *)(v5 + 120) && *(_DWORD *)(v5 + 124) == 1;
    }
  }
  else
  {
    v30 = *(_QWORD *)(v5 + 128) == *(_QWORD *)(v5 + 136);
    if (!*(_BYTE *)(a1 + 16))
      return !*(_DWORD *)(v5 + 120) && *(_DWORD *)(v5 + 124) == 1;
  }
  if (v30)
    return !*(_DWORD *)(v5 + 120) && *(_DWORD *)(v5 + 124) == 1;
  if (!v8)
    goto LABEL_91;
  v31 = *(char *)(a2 + 23);
  v32 = v31 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
  v33 = v31 >= 0 ? (const void *)a2 : *(const void **)a2;
  v34 = v7;
  do
  {
    v35 = *(char *)(v8 + 55);
    if (v35 >= 0)
      v36 = *(unsigned __int8 *)(v8 + 55);
    else
      v36 = *(_QWORD *)(v8 + 40);
    if (v35 >= 0)
      v37 = (const void *)(v8 + 32);
    else
      v37 = *(const void **)(v8 + 32);
    if (v32 >= v36)
      v38 = v36;
    else
      v38 = v32;
    v39 = memcmp(v37, v33, v38);
    v40 = v36 < v32;
    if (v39)
      v40 = v39 < 0;
    v41 = !v40;
    if (v40)
      v42 = (uint64_t *)(v8 + 8);
    else
      v42 = (uint64_t *)v8;
    if (v41)
      v34 = v8;
    v8 = *v42;
  }
  while (*v42);
  if (v34 == v7)
  {
LABEL_91:
    v52 = 0;
  }
  else
  {
    v45 = *(const void **)(v34 + 32);
    v44 = v34 + 32;
    v43 = v45;
    v46 = *(char *)(v44 + 23);
    if (v46 >= 0)
      v47 = *(unsigned __int8 *)(v44 + 23);
    else
      v47 = *(_QWORD *)(v44 + 8);
    if (v46 >= 0)
      v48 = (const void *)v44;
    else
      v48 = v43;
    if (v47 >= v32)
      v49 = v32;
    else
      v49 = v47;
    v50 = memcmp(v33, v48, v49);
    v51 = v32 < v47;
    if (v50)
      v51 = v50 < 0;
    if (v51)
      v52 = 0;
    else
      v52 = (Espresso::AOT *)(v44 + 24);
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v64, (const Espresso::layer_shape *)v61, 0);
  v55 = *(unsigned int **)(v5 + 128);
  v56 = (uint64_t)(*(_QWORD *)(v5 + 136) - (_QWORD)v55) >> 2;
  if (!v56)
  {
    if (v52)
    {
      v57 = Espresso::AOT::MapTransformParamsToSurfaceFormat(v52, &v64, v54);
      goto LABEL_97;
    }
    v59 = "Surface format could not be determined.";
LABEL_104:
    Espresso::throw_exception_selector<Espresso::generic_error>(v59);
  }
  if (v56 != 1)
  {
    v59 = "Multiple 4cc formats specification is not yet supported.";
    goto LABEL_104;
  }
  v57 = E5RT::CVPB4ccToSurfaceFormat((E5RT *)*v55);
LABEL_97:
  v58 = v57;
  if (__p)
  {
    v63 = __p;
    operator delete(__p);
  }
  return (v58 - 1) < 2;
}

void sub_191161A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

unsigned __int8 *`anonymous namespace'::GetBlobShape(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *result;
  uint64_t v5;
  __int128 v6;

  result = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(a2 + 136), a3);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_QWORD *)result + 5);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = *(_OWORD *)(v5 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v5 + 8);
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v5 + 40);
  if (a1 + 40 != v5 + 48)
    return (unsigned __int8 *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 40), *(char **)(v5 + 48), *(_QWORD *)(v5 + 56), (uint64_t)(*(_QWORD *)(v5 + 56) - *(_QWORD *)(v5 + 48)) >> 2);
  return result;
}

void sub_191161B50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB26E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB26E0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  const void *v14;
  size_t v15;
  int v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t *v19;
  const void *v20;
  uint64_t v21;
  const void *v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;

  v2 = a2;
  v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 136), a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_QWORD *)v4 + 5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 336);
  if (!v7)
    goto LABEL_43;
  v8 = v6 + 336;
  v9 = (char)v2[23];
  if (v9 >= 0)
    v10 = v2[23];
  else
    v10 = *((_QWORD *)v2 + 1);
  if (v9 < 0)
    v2 = *(unsigned __int8 **)v2;
  v11 = v6 + 336;
  do
  {
    v12 = *(char *)(v7 + 55);
    if (v12 >= 0)
      v13 = *(unsigned __int8 *)(v7 + 55);
    else
      v13 = *(_QWORD *)(v7 + 40);
    if (v12 >= 0)
      v14 = (const void *)(v7 + 32);
    else
      v14 = *(const void **)(v7 + 32);
    if (v10 >= v13)
      v15 = v13;
    else
      v15 = v10;
    v16 = memcmp(v14, v2, v15);
    v17 = v13 < v10;
    if (v16)
      v17 = v16 < 0;
    v18 = !v17;
    if (v17)
      v19 = (uint64_t *)(v7 + 8);
    else
      v19 = (uint64_t *)v7;
    if (v18)
      v11 = v7;
    v7 = *v19;
  }
  while (*v19);
  if (v11 == v8)
  {
LABEL_43:
    v28 = *(_QWORD *)(v5 + 128) == *(_QWORD *)(v5 + 136);
    if (!*(_BYTE *)(a1 + 16))
      return *(_DWORD *)(v5 + 124) == 1;
  }
  else
  {
    v22 = *(const void **)(v11 + 32);
    v21 = v11 + 32;
    v20 = v22;
    v23 = *(char *)(v21 + 23);
    if (v23 >= 0)
      v24 = *(unsigned __int8 *)(v21 + 23);
    else
      v24 = *(_QWORD *)(v21 + 8);
    if (v23 >= 0)
      v25 = (const void *)v21;
    else
      v25 = v20;
    if (v24 >= v10)
      v26 = v10;
    else
      v26 = v24;
    v27 = memcmp(v2, v25, v26);
    v28 = v10 < v24;
    if (v27)
      v28 = v27 < 0;
    if (*(_QWORD *)(v5 + 128) != *(_QWORD *)(v5 + 136))
      v28 = 0;
    if (!*(_BYTE *)(a1 + 16))
      return *(_DWORD *)(v5 + 124) == 1;
  }
  if (!v28)
    return 0;
  return *(_DWORD *)(v5 + 124) == 1;
}

uint64_t std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E2DB2738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB2738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  BOOL v20;
  uint64_t *v21;
  const void *v22;
  uint64_t v23;
  const void *v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  BOOL v30;
  int v31;
  size_t v32;
  const void *v33;
  uint64_t v34;
  int v35;
  size_t v36;
  const void *v37;
  size_t v38;
  int v39;
  _BOOL4 v40;
  BOOL v41;
  uint64_t *v42;
  const void *v43;
  uint64_t v44;
  const void *v45;
  int v46;
  size_t v47;
  const void *v48;
  size_t v49;
  int v50;
  _BOOL4 v51;
  Espresso::AOT *v52;
  int v53;
  _BOOL8 v55;
  _BOOL4 v56;
  const Espresso::layer_nd_shape *v57;
  unsigned int *v58;
  uint64_t v59;
  int v60;
  int v61;
  char *v62;
  int v63;
  const char *v65;
  uint64_t v66;
  void *v67;
  char v68;
  std::string v69;
  void *__p[3];
  vimage2espresso_param v71;

  v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 8) + 136), (unsigned __int8 *)a2);
  if (!v4)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v5 = *((_QWORD *)v4 + 5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 336;
  v8 = *(_QWORD *)(v6 + 336);
  if (!v8)
  {
    v30 = *(_QWORD *)(v5 + 128) == *(_QWORD *)(v5 + 136);
    if (!*(_BYTE *)(a1 + 16))
      goto LABEL_89;
LABEL_47:
    if (v30)
      goto LABEL_89;
    if (!v8)
      goto LABEL_99;
    v31 = *(char *)(a2 + 23);
    v32 = v31 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    v33 = v31 >= 0 ? (const void *)a2 : *(const void **)a2;
    v34 = v7;
    do
    {
      v35 = *(char *)(v8 + 55);
      if (v35 >= 0)
        v36 = *(unsigned __int8 *)(v8 + 55);
      else
        v36 = *(_QWORD *)(v8 + 40);
      if (v35 >= 0)
        v37 = (const void *)(v8 + 32);
      else
        v37 = *(const void **)(v8 + 32);
      if (v32 >= v36)
        v38 = v36;
      else
        v38 = v32;
      v39 = memcmp(v37, v33, v38);
      v40 = v36 < v32;
      if (v39)
        v40 = v39 < 0;
      v41 = !v40;
      if (v40)
        v42 = (uint64_t *)(v8 + 8);
      else
        v42 = (uint64_t *)v8;
      if (v41)
        v34 = v8;
      v8 = *v42;
    }
    while (*v42);
    if (v34 == v7)
    {
LABEL_99:
      v52 = 0;
    }
    else
    {
      v45 = *(const void **)(v34 + 32);
      v44 = v34 + 32;
      v43 = v45;
      v46 = *(char *)(v44 + 23);
      if (v46 >= 0)
        v47 = *(unsigned __int8 *)(v44 + 23);
      else
        v47 = *(_QWORD *)(v44 + 8);
      if (v46 >= 0)
        v48 = (const void *)v44;
      else
        v48 = v43;
      if (v47 >= v32)
        v49 = v32;
      else
        v49 = v47;
      v50 = memcmp(v33, v48, v49);
      v51 = v32 < v47;
      if (v50)
        v51 = v50 < 0;
      if (v51)
        v52 = 0;
      else
        v52 = (Espresso::AOT *)(v44 + 24);
    }
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v71, (const Espresso::layer_shape *)&v69, 0);
    v58 = *(unsigned int **)(v5 + 128);
    v59 = (uint64_t)(*(_QWORD *)(v5 + 136) - (_QWORD)v58) >> 2;
    if (v59)
    {
      if (v59 == 1)
      {
        v60 = E5RT::CVPB4ccToSurfaceFormat((E5RT *)*v58);
LABEL_105:
        v61 = v60;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v61 == 6)
        {
          if (*(_DWORD *)(v5 + 124) != 2)
            return 0;
          v62 = (char *)__p + 4;
        }
        else
        {
          v62 = (char *)__p + 4;
          v63 = v61 - 3;
          if ((v61 - 3) <= 0x1A && ((0x7807261u >> v63) & 1) != 0)
            v62 = (char *)&v69 + 4 * qword_191A8D188[v63];
        }
        return v62 - (char *)&v69 == 44;
      }
      v65 = "Multiple 4cc formats specification is not yet supported.";
    }
    else
    {
      if (v52)
      {
        v60 = Espresso::AOT::MapTransformParamsToSurfaceFormat(v52, &v71, v57);
        goto LABEL_105;
      }
      v65 = "Surface format could not be determined.";
    }
    Espresso::throw_exception_selector<Espresso::generic_error>(v65);
  }
  v66 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a2 + 23);
  if (v9 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  if (v9 >= 0)
    v11 = (const void *)a2;
  else
    v11 = *(const void **)a2;
  v12 = v6 + 336;
  v13 = v8;
  do
  {
    v14 = *(char *)(v13 + 55);
    if (v14 >= 0)
      v15 = *(unsigned __int8 *)(v13 + 55);
    else
      v15 = *(_QWORD *)(v13 + 40);
    if (v14 >= 0)
      v16 = (const void *)(v13 + 32);
    else
      v16 = *(const void **)(v13 + 32);
    if (v10 >= v15)
      v17 = v15;
    else
      v17 = v10;
    v18 = memcmp(v16, v11, v17);
    v19 = v15 < v10;
    if (v18)
      v19 = v18 < 0;
    v20 = !v19;
    if (v19)
      v21 = (uint64_t *)(v13 + 8);
    else
      v21 = (uint64_t *)v13;
    if (v20)
      v12 = v13;
    v13 = *v21;
  }
  while (*v21);
  if (v12 == v7)
  {
    v6 = v66;
    v30 = *(_QWORD *)(v5 + 128) == *(_QWORD *)(v5 + 136);
    if (!*(_BYTE *)(a1 + 16))
      goto LABEL_89;
    goto LABEL_47;
  }
  v24 = *(const void **)(v12 + 32);
  v23 = v12 + 32;
  v22 = v24;
  v25 = *(char *)(v23 + 23);
  if (v25 >= 0)
    v26 = *(unsigned __int8 *)(v23 + 23);
  else
    v26 = *(_QWORD *)(v23 + 8);
  if (v25 >= 0)
    v27 = (const void *)v23;
  else
    v27 = v22;
  if (v26 >= v10)
    v28 = v10;
  else
    v28 = v26;
  v29 = memcmp(v11, v27, v28);
  v30 = v10 < v26;
  if (v29)
    v30 = v29 < 0;
  v6 = v66;
  if (*(_QWORD *)(v5 + 128) != *(_QWORD *)(v5 + 136))
    v30 = 0;
  if (*(_BYTE *)(a1 + 16))
    goto LABEL_47;
LABEL_89:
  v53 = *(_DWORD *)(v5 + 120);
  v55 = v53 == 4 || (v53 - 1) < 2;
  *(_QWORD *)&v71.scale = operator new(0x28uLL);
  *(_OWORD *)&v71.is_image_bgr = xmmword_191A862A0;
  strcpy(*(char **)&v71.scale, "experimental.ane.enable_int16_resample");
  v68 = 1;
  LOWORD(v67) = 48;
  Espresso::map_const_get<std::map<std::string,std::string>>(v6 + 472, (uint64_t)&v71, (uint64_t)&v67, &v69);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v69.__r_.__value_.__l.__size_ != 1)
    {
      v56 = 0;
      operator delete(v69.__r_.__value_.__l.__data_);
      if ((v68 & 0x80000000) == 0)
        goto LABEL_119;
      goto LABEL_118;
    }
    v56 = *v69.__r_.__value_.__l.__data_ == 49;
    operator delete(v69.__r_.__value_.__l.__data_);
    if ((v68 & 0x80000000) == 0)
      goto LABEL_119;
LABEL_118:
    operator delete(v67);
    goto LABEL_119;
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) != 1)
  {
    v56 = 0;
    if ((v68 & 0x80000000) == 0)
      goto LABEL_119;
    goto LABEL_118;
  }
  v56 = v69.__r_.__value_.__s.__data_[0] == 49;
  if (v68 < 0)
    goto LABEL_118;
LABEL_119:
  if (SHIBYTE(v71.bias_g) < 0)
  {
    operator delete(*(void **)&v71.scale);
    if (!v56)
      return v55;
  }
  else if (!v56)
  {
    return v55;
  }
  return v53 == 7 || v55;
}

void sub_1911622BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::target_type()
{
}

_QWORD *Espresso::AOT::MemOptimizer::InterferenceGraph::InterferenceGraph(_QWORD *this)
{
  *this = off_1E2DA0298;
  return this;
}

_QWORD *Espresso::AOT::MemOptimizer::InterferenceGraphBuilder::InterferenceGraphBuilder(_QWORD *this)
{
  *this = off_1E2DA0320;
  return this;
}

double Espresso::AOT::MemOptimizer::InterferenceGraphBuilder::CreateBuilder@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = operator new();
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)v3 = &unk_1E2D578D0;
  result = 0.0;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_DWORD *)(v3 + 40) = 1065353216;
  *a1 = v3;
  return result;
}

uint64_t Espresso::AOT::MemOptimizer::InterferenceGraphBuilder::Finalize@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = *a1;
  if (!*a1 || *(_UNKNOWN **)v2 != &unk_1E2D578D0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Supplied builder argument is invalid");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  result = operator new();
  v5 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)result = &unk_1E2D56F60;
  *(_QWORD *)(result + 8) = v5;
  v6 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(v2 + 16) = 0;
  v9 = *(_QWORD *)(v2 + 24);
  v8 = v2 + 24;
  v7 = v9;
  *(_QWORD *)(result + 24) = v9;
  v10 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(result + 32) = v10;
  *(_DWORD *)(result + 40) = *(_DWORD *)(v8 + 16);
  if (v10)
  {
    v11 = *(_QWORD *)(v7 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v11 >= v6)
        v11 %= v6;
    }
    else
    {
      v11 &= v6 - 1;
    }
    *(_QWORD *)(v5 + 8 * v11) = result + 24;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
  }
  *a2 = result;
  return result;
}

void sub_191162508(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void InterferenceGraphBuilderImpl::~InterferenceGraphBuilderImpl(InterferenceGraphBuilderImpl *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<InterferenceGraphImpl::Node>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    operator delete(v4);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<InterferenceGraphImpl::Node>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    operator delete(v4);
  JUMPOUT(0x19401CD90);
}

std::string *InterferenceGraphBuilderImpl::AddNode(uint64_t a1, uint64_t a2, std::string::size_type a3, std::string::size_type a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  std::string *v15;
  std::string *result;
  std::logic_error *exception;
  std::logic_error *v18;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string v22;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid name");
    goto LABEL_17;
  }
  if (!a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid alloc size");
LABEL_17:
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v8 = a1 + 8;
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>((_QWORD *)(a1 + 8), a2))
  {
    v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v19 = std::string::append(&v21, " already exists");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v18, &v22);
    v18->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v18, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v9 = operator new();
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_DWORD *)(v9 + 72) = 1065353216;
  v21.__r_.__value_.__r.__words[0] = v9;
  v22.__r_.__value_.__r.__words[0] = a2;
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v22);
  v11 = v10[5];
  v10[5] = v9;
  if (v11)
  {
    v12 = *(_QWORD **)(v11 + 56);
    if (v12)
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
    v14 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = 0;
    if (v14)
      operator delete(v14);
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x19401CD90](v11, 0x10B2C40939C3E4BLL);
  }
  v22.__r_.__value_.__r.__words[0] = a2;
  v15 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v22)[5];
  result = std::string::operator=(v15, (const std::string *)a2);
  v15[1].__r_.__value_.__r.__words[0] = a4;
  v15[1].__r_.__value_.__l.__size_ = a3;
  return result;
}

void sub_191162808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

_QWORD *InterferenceGraphBuilderImpl::AddEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  std::logic_error *exception;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::logic_error *v20;
  std::string *v21;
  __int128 v22;
  std::logic_error *v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;

  v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = *(_QWORD *)(a2 + 8);
  if ((v6 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned __int8 *)(a3 + 23);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 8);
  if (v8 != v9)
    goto LABEL_17;
  if (v10 >= 0)
    v11 = (unsigned __int8 *)a3;
  else
    v11 = *(unsigned __int8 **)a3;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v11, v7))
      goto LABEL_17;
LABEL_15:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Cannot have the same node on both ends of an edge");
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (!(_DWORD)v6)
    goto LABEL_15;
  v12 = (unsigned __int8 *)a2;
  while (*v12 == *v11)
  {
    ++v12;
    ++v11;
    if (!--v6)
      goto LABEL_15;
  }
LABEL_17:
  v14 = (_QWORD *)(a1 + 8);
  v15 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>((_QWORD *)(a1 + 8), a2);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v14, a3);
  if (!v15)
  {
    v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v21 = std::string::append(&v26, " does not exist");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v20, &v27);
    v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v20, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (!v16)
  {
    v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v24 = std::string::append(&v26, " does not exist");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v23, &v27);
    v23->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v23, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v17 = v15[5];
  v27.__r_.__value_.__r.__words[0] = v16[5];
  v18 = v27.__r_.__value_.__r.__words[0];
  std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>(v17 + 40, (uint64_t *)&v27, &v27);
  v27.__r_.__value_.__r.__words[0] = v17;
  return std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>(v18 + 40, (uint64_t *)&v27, &v27);
}

void sub_191162AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) != 0)
      goto LABEL_8;
  }
  else if (v22)
  {
LABEL_8:
    __cxa_free_exception(v21);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t InterferenceGraphImpl::GetNodeCount(InterferenceGraphImpl *this)
{
  return *((_QWORD *)this + 4);
}

BOOL InterferenceGraphImpl::HasNode(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(a1 + 8), a2) != 0;
}

uint64_t InterferenceGraphImpl::GetAllocSize(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *(_QWORD *)(v2[5] + 32);
}

uint64_t InterferenceGraphImpl::GetAllocId(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(a1 + 8), a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return *(_QWORD *)(v2[5] + 24);
}

BOOL InterferenceGraphImpl::HasEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  std::logic_error *exception;
  uint64_t v14;

  v4 = (_QWORD *)(a1 + 8);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(a1 + 8), a2);
  if (!v5
    || (v6 = v5[5],
        (v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v4, a3)) == 0))
  {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  v14 = v7[5];
  v8 = v14;
  v9 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>((_QWORD *)(v6 + 40), &v14);
  v14 = v6;
  v10 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>((_QWORD *)(v8 + 40), &v14);
  if ((v9 != 0) != (v10 != 0))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Inconsistent adjacency information in interference graph");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  return !v11;
}

void sub_191162D08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *InterferenceGraphImpl::GetNodeNames@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *i;
  uint64_t *v4;
  uint64_t v5;
  __int128 v6;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (i = (uint64_t *)this[3]; i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      v4 = (uint64_t *)i[2];
      v5 = i[3];
    }
    else
    {
      v4 = i + 2;
      v5 = *((unsigned __int8 *)i + 39);
    }
    *(_QWORD *)&v6 = v4;
    *((_QWORD *)&v6 + 1) = v5;
    this = std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(a2, (uint64_t)&v6, &v6);
  }
  return this;
}

void sub_191162D8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *InterferenceGraphImpl::GetNodeNeighbors@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *i;
  uint64_t **v6;
  uint64_t v7;
  __int128 v8;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  result = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((_QWORD *)(a1 + 8), a2);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  for (i = *(_QWORD **)(result[5] + 56); i; i = (_QWORD *)*i)
  {
    v6 = (uint64_t **)i[2];
    if (*((char *)v6 + 23) < 0)
    {
      v6 = (uint64_t **)*v6;
      v7 = *(_QWORD *)(i[2] + 8);
    }
    else
    {
      v7 = *((unsigned __int8 *)v6 + 23);
    }
    *(_QWORD *)&v8 = v6;
    *((_QWORD *)&v8 + 1) = v7;
    result = std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(a3, (uint64_t)&v8, &v8);
  }
  return result;
}

void sub_191162E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_191162E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<InterferenceGraphImpl::Node>>,0>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 56);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v5)
      operator delete(v5);
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x19401CD90](v2, 0x10B2C40939C3E4BLL);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::unique_ptr<InterferenceGraphImpl::Node>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 56);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (v5)
      operator delete(v5);
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x19401CD90](v2, 0x10B2C40939C3E4BLL);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  unsigned __int8 *j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  unsigned __int8 *i;
  _QWORD *v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  float v32;
  float v33;
  _QWORD *v34;
  _QWORD *v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  int8x8_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v47[2];
  char v48;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v23 = v15[1];
            if (v23 == v11)
            {
              v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0)
                v25 = *((unsigned __int8 *)v15 + 39);
              else
                v25 = v15[3];
              if (v25 == v17)
              {
                v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  for (i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    v26 = (const void **)((char *)v26 + 1);
                    if (!--v24)
                      return v15;
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  v21 = (const void **)((char *)v21 + 1);
                  if (!--v19)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v28 = operator new(0x30uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  v48 = 0;
  *v28 = 0;
  v28[1] = v11;
  v29 = (std::string *)(v28 + 2);
  v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
  }
  else
  {
    v31 = *v30;
    v28[4] = *((_QWORD *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[5] = 0;
  v48 = 1;
  v32 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    v36 = 1;
    if (v12 >= 3)
      v36 = (v12 & (v12 - 1)) != 0;
    v37 = v36 | (2 * v12);
    v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v40)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v40)
    {
      v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v40 < 3uLL || (v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v41);
      }
      else
      {
        v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2)
          v41 = v43;
      }
      if (prime <= v41)
        prime = v41;
      if (prime < *(_QWORD *)&v40)
LABEL_68:
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v35 = (_QWORD *)v47[0];
        if (v34)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v44 & v11;
      v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v44 & v11));
      v35 = (_QWORD *)v47[0];
      if (v34)
        goto LABEL_57;
    }
LABEL_81:
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v47[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v47[0])
    {
      v45 = *(_QWORD *)(*(_QWORD *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12)
          v45 %= v12;
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v35 = (_QWORD *)v47[0];
  if (!v34)
    goto LABEL_81;
LABEL_57:
  *v35 = *v34;
  *v34 = v47[0];
LABEL_92:
  v15 = (uint64_t *)v47[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1911633C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1911633D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<InterferenceGraphImpl::Node>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

uint64_t Espresso::AOT::MILCompilerForMLC::MILCompilerForMLC(uint64_t a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  void *v16[2];
  int v17;
  _BYTE v18[136];

  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  v6 = *(void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = *(_QWORD **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7)
        v10 %= v7;
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((_QWORD *)v6 + v10) = v16;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler(a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0)
LABEL_16:
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *(_QWORD *)a1 = &off_1E2DA0560;
  Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1);
  Espresso::AOT::MILCompilerForMLC::ExtractOptions(a2, a1 + 264);
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  return a1;
}

void sub_19116357C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  _Unwind_Resume(a1);
}

void sub_191163598(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler *v1;

  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForMLC::ExtractOptions(Espresso::AOT::MILCompilerForMLC *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v5;
  uint64_t Input;
  __int128 v7;
  uint64_t Output;
  std::string *v9;
  __int128 v10;
  void **v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  char *v21;
  void *v22;
  char *v23;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  const std::string *v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  void **v43;
  void **v44;
  uint64_t v45;
  void *v46;
  uint64_t *v47;
  void **v48;
  void **v49;
  uint64_t *v50;
  uint64_t Platforms;
  const std::string *CpuTargetOS;
  const std::string *CpuTargetArch;
  int v54;
  uint64_t *v55;
  uint64_t *v56;
  void **v57;
  void **v58;
  uint64_t v59;
  void *v60;
  std::logic_error *v61;
  std::logic_error *exception;
  std::runtime_error *v63;
  std::logic_error *v64;
  _BYTE __p[24];
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  void *v70[2];
  char v71;
  _QWORD v72[2];
  void **v73;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 0;
  v5 = (std::string *)(a2 + 8);
  Input = Espresso::AOT::AOTCompilerOptions::GetInput(this);
  if (*(char *)(Input + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)Input, *(_QWORD *)(Input + 8));
  }
  else
  {
    v7 = *(_OWORD *)Input;
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(Input + 16);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
  }
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  v9 = (std::string *)(a2 + 72);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)Output, *(_QWORD *)(Output + 8));
  }
  else
  {
    v10 = *(_OWORD *)Output;
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(Output + 16);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  strcpy((char *)(a2 + 96), "macosx.internal");
  *(_WORD *)(a2 + 119) = 15;
  *(_BYTE *)(a2 + 124) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  v11 = (void **)(a2 + 128);
  *(_OWORD *)(a2 + 224) = 0u;
  v12 = (char *)(a2 + 224);
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 237) = 0u;
  __p[23] = 3;
  strcpy(__p, "cpu");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)__p, (uint64_t)v72);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  __p[23] = 17;
  strcpy(__p, "preferred-backend");
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  v14 = v13;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v14)
      goto LABEL_19;
  }
  else if (!v13)
  {
    goto LABEL_19;
  }
  if (*((_DWORD *)v14 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  if (*((char *)v14 + 63) < 0)
  {
    v15 = (_QWORD *)v14[5];
    if (v14[6] == 8)
      goto LABEL_18;
LABEL_19:
    v16 = 0;
    goto LABEL_20;
  }
  v15 = v14 + 5;
  if (*((_BYTE *)v14 + 63) != 8)
    goto LABEL_19;
LABEL_18:
  if (*v15 != 0x736E6E622F636C6DLL)
    goto LABEL_19;
  v16 = 1;
LABEL_20:
  *(_DWORD *)(a2 + 248) = v16;
  __p[23] = 12;
  strcpy(__p, "experimental");
  v17 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  v18 = v17;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v18)
      goto LABEL_42;
  }
  else if (!v17)
  {
    goto LABEL_42;
  }
  if (*((_DWORD *)v18 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  std::string::operator=((std::string *)(a2 + 224), (const std::string *)(v18 + 5));
  v19 = *(unsigned __int8 *)(a2 + 247);
  v20 = (v19 & 0x80u) != 0;
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(a2 + 232);
  if (v20)
    v12 = *(char **)(a2 + 224);
  if (v19 >= 10)
  {
    v21 = &v12[v19];
    v22 = v12;
    do
    {
      v23 = (char *)memchr(v22, 98, v19 - 9);
      if (!v23)
        break;
      if (*(_QWORD *)v23 == 0x6172672D736E6E62 && *((_WORD *)v23 + 4) == 26736)
      {
        if (v23 != v21 && v23 - v12 != -1)
        {
          *(_DWORD *)(a2 + 248) = 1;
          goto LABEL_132;
        }
        break;
      }
      v22 = v23 + 1;
      v19 = v21 - (_BYTE *)v22;
    }
    while (v21 - (_BYTE *)v22 >= 10);
  }
LABEL_42:
  if (*(_DWORD *)(a2 + 248) == 1)
    goto LABEL_132;
  __p[23] = 13;
  strcpy(__p, "force-loopkit");
  v25 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  v26 = v25;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v26)
      goto LABEL_49;
  }
  else if (!v25)
  {
    goto LABEL_49;
  }
  if (*((_DWORD *)v26 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_BYTE *)(a2 + 252) = *((_BYTE *)v26 + 40);
LABEL_49:
  __p[23] = 8;
  strcpy(__p, "deadline");
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  v28 = v27;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v28)
      goto LABEL_51;
LABEL_54:
    v29 = 1;
    goto LABEL_55;
  }
  if (!v27)
    goto LABEL_54;
LABEL_51:
  if (*((_DWORD *)v28 + 16) != 1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v29 = *((_DWORD *)v28 + 10);
LABEL_55:
  *(_DWORD *)a2 = v29;
  *(_BYTE *)(a2 + 4) = 1;
  __p[23] = 4;
  strcpy(__p, "nano");
  v30 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  v31 = v30;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v31)
      goto LABEL_61;
  }
  else if (!v30)
  {
    goto LABEL_61;
  }
  if (*((_DWORD *)v31 + 16))
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_BYTE *)(a2 + 32) = *((_BYTE *)v31 + 40);
LABEL_61:
  __p[23] = 6;
  strcpy(__p, "header");
  v32 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  v33 = v32;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v33)
      goto LABEL_72;
  }
  else if (!v32)
  {
    goto LABEL_72;
  }
  if (*((_DWORD *)v33 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  v34 = (const std::string *)(v33 + 5);
  if (*(_BYTE *)(a2 + 64))
  {
    std::string::operator=((std::string *)(a2 + 40), v34);
  }
  else
  {
    if (*((char *)v33 + 63) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a2 + 40), (const std::string::value_type *)v33[5], v33[6]);
    }
    else
    {
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      *(_QWORD *)(a2 + 56) = v33[7];
      *(_OWORD *)(a2 + 40) = v35;
    }
    *(_BYTE *)(a2 + 64) = 1;
  }
LABEL_72:
  __p[23] = 3;
  strcpy(__p, "sdk");
  v36 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  v37 = v36;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v37)
      goto LABEL_78;
  }
  else if (!v36)
  {
    goto LABEL_78;
  }
  if (*((_DWORD *)v37 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  std::string::operator=((std::string *)(a2 + 96), (const std::string *)(v37 + 5));
LABEL_78:
  __p[23] = 4;
  strcpy(__p, "size");
  v38 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  v39 = v38;
  if ((__p[23] & 0x80000000) == 0)
  {
    if (!v38)
      goto LABEL_80;
LABEL_83:
    if (*((_DWORD *)v39 + 16) != 1)
      std::__throw_bad_variant_access[abi:ne180100]();
    *(_DWORD *)(a2 + 120) = *((_DWORD *)v39 + 10);
    *(_BYTE *)(a2 + 124) = 1;
    if (!*(_BYTE *)(a2 + 32))
      goto LABEL_116;
    goto LABEL_85;
  }
  operator delete(*(void **)__p);
  if (v39)
    goto LABEL_83;
LABEL_80:
  if (!*(_BYTE *)(a2 + 32))
  {
LABEL_116:
    __p[23] = 6;
    strcpy(__p, "target");
    v50 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (v50)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "--cpu-target is not supported for E5 compilation.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
    Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)__p, this);
    Platforms = Espresso::AOT::CompilerOptionsForE5::GetPlatforms((Espresso::AOT::CompilerOptionsForE5 *)__p);
    if (*(_QWORD *)(Platforms + 24) != 1)
    {
      v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v63, "Only one platform is supported.");
      __cxa_throw(v63, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    Espresso::AOT::MILCompilerForMLC::Target::SetPlatform(a2 + 128, *(_QWORD *)(*(_QWORD *)(Platforms + 16) + 16));
    CpuTargetOS = (const std::string *)Espresso::AOT::CompilerOptionsForE5::GetCpuTargetOS((Espresso::AOT::CompilerOptionsForE5 *)__p);
    std::string::operator=((std::string *)(a2 + 152), CpuTargetOS);
    CpuTargetArch = (const std::string *)Espresso::AOT::CompilerOptionsForE5::GetCpuTargetArch((Espresso::AOT::CompilerOptionsForE5 *)__p);
    std::string::operator=((std::string *)(a2 + 128), CpuTargetArch);
    Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)__p);
    goto LABEL_125;
  }
LABEL_85:
  v71 = 2;
  strcpy((char *)v70, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)v70, (uint64_t)__p);
  if (v71 < 0)
    operator delete(v70[0]);
  v71 = 9;
  strcpy((char *)v70, "platforms");
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v70);
  if (v71 < 0)
    operator delete(v70[0]);
  v71 = 13;
  strcpy((char *)v70, "cpu-target-os");
  v41 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v70);
  if (v71 < 0)
    operator delete(v70[0]);
  v71 = 15;
  strcpy((char *)v70, "cpu-target-arch");
  v42 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v70);
  if (v71 < 0)
    operator delete(v70[0]);
  if (v40 || v41 || v42)
  {
    v61 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v61, "E5 options are not supported for Nano compilation.");
    v61->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v61, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  v43 = *(void ***)&__p[16];
  if (*(_QWORD *)&__p[16])
  {
    do
    {
      v44 = (void **)*v43;
      v45 = *((unsigned int *)v43 + 16);
      if ((_DWORD)v45 != -1)
        ((void (*)(void **, void **))off_1E2DD1748[v45])(v70, v43 + 5);
      *((_DWORD *)v43 + 16) = -1;
      if (*((char *)v43 + 39) < 0)
        operator delete(v43[2]);
      operator delete(v43);
      v43 = v44;
    }
    while (v44);
  }
  v46 = *(void **)__p;
  *(_QWORD *)__p = 0;
  if (v46)
    operator delete(v46);
  if (!*(_BYTE *)(a2 + 32))
    goto LABEL_116;
  __p[23] = 6;
  strcpy(__p, "target");
  v47 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (!v47)
  {
    v64 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v64, "--cpu-target is required for Nano compilation.");
    v64->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v64, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if (*((_DWORD *)v47 + 16) != 3)
    std::__throw_bad_variant_access[abi:ne180100]();
  Espresso::AOT::MILCompilerForMLC::Target::Target((uint64_t)__p, (uint64_t)(v47 + 5));
  if (*(char *)(a2 + 151) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 144) = *(_QWORD *)&__p[16];
  __p[23] = 0;
  __p[0] = 0;
  v48 = (void **)(a2 + 152);
  if (*(char *)(a2 + 175) < 0)
    operator delete(*v48);
  *(_OWORD *)v48 = v66;
  *(_QWORD *)(a2 + 168) = v67;
  HIBYTE(v67) = 0;
  LOBYTE(v66) = 0;
  v49 = (void **)(a2 + 176);
  if (*(char *)(a2 + 199) < 0)
  {
    operator delete(*v49);
    v54 = SHIBYTE(v67);
    *(_OWORD *)v49 = v68;
    *(_QWORD *)(a2 + 192) = v69;
    HIBYTE(v69) = 0;
    LOBYTE(v68) = 0;
    if (v54 < 0)
      operator delete((void *)v66);
  }
  else
  {
    *(_OWORD *)v49 = v68;
    *(_QWORD *)(a2 + 192) = v69;
    HIBYTE(v69) = 0;
    LOBYTE(v68) = 0;
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_125:
  __p[23] = 3;
  strcpy(__p, "api");
  v55 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  v56 = v55;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v56)
      goto LABEL_127;
  }
  else if (v55)
  {
LABEL_127:
    if (*((_DWORD *)v56 + 16) != 3)
      std::__throw_bad_variant_access[abi:ne180100]();
    std::string::operator=((std::string *)(a2 + 200), (const std::string *)(v56 + 5));
    goto LABEL_132;
  }
  if (!*(_BYTE *)(a2 + 32))
    MEMORY[0x19401C808](a2 + 200, "main");
LABEL_132:
  Espresso::AOT::MILCompilerForMLC::Options::AssertValid((Espresso::AOT::MILCompilerForMLC::Options *)a2);
  v57 = v73;
  if (v73)
  {
    do
    {
      v58 = (void **)*v57;
      v59 = *((unsigned int *)v57 + 16);
      if ((_DWORD)v59 != -1)
        ((void (*)(_BYTE *, void **))off_1E2DD1748[v59])(__p, v57 + 5);
      *((_DWORD *)v57 + 16) = -1;
      if (*((char *)v57 + 39) < 0)
        operator delete(v57[2]);
      operator delete(v57);
      v57 = v58;
    }
    while (v58);
  }
  v60 = (void *)v72[0];
  v72[0] = 0;
  if (v60)
    operator delete(v60);
}

void sub_1911640CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void **v14;
  uint64_t v15;

  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](v15 - 120);
  Espresso::AOT::MILCompilerForMLC::Options::~Options(v14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForMLC::Options::AssertValid(Espresso::AOT::MILCompilerForMLC::Options *this)
{
  uint64_t v2;
  std::string *v3;
  std::logic_error *exception;
  std::runtime_error *v5;
  std::logic_error *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::__fs::filesystem::path v10;

  v2 = *((unsigned __int8 *)this + 31);
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 31))
      goto LABEL_3;
LABEL_25:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Input file must be non-empty.");
    goto LABEL_49;
  }
  if (!*((_QWORD *)this + 2))
    goto LABEL_25;
LABEL_3:
  memset(&v10, 0, sizeof(v10));
  if ((v2 & 0x80u) == 0)
    v3 = (std::string *)((char *)this + 8);
  else
    v3 = (std::string *)*((_QWORD *)this + 1);
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)this + 2);
  std::string::append[abi:ne180100]<char const*,0>(&v10.__pn_, v3, (std::string *)((char *)v3 + v2));
  std::__fs::filesystem::__status(&v10, 0);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  if (v9.__r_.__value_.__s.__data_[0] == 255 || !v9.__r_.__value_.__s.__data_[0])
  {
    v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v7 = std::string::append(&v9, " does not exist.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__pn_.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__pn_.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v6, &v10.__pn_);
    v6->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v6, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 95))
      goto LABEL_14;
LABEL_27:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    goto LABEL_49;
  }
  if (!*((_QWORD *)this + 10))
    goto LABEL_27;
LABEL_14:
  if (*((_DWORD *)this + 62) == 1)
    return;
  if (*((_BYTE *)this + 32))
  {
    if (*((_BYTE *)this + 64))
    {
      if (*((char *)this + 63) < 0)
      {
        if (*((_QWORD *)this + 6))
          goto LABEL_19;
      }
      else if (*((_BYTE *)this + 63))
      {
        goto LABEL_19;
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--cpu-header is required.");
    goto LABEL_49;
  }
LABEL_19:
  if (*((_BYTE *)this + 124) && (*((_DWORD *)this + 30) & 0x80000000) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--cpu-size must be a positive integer.");
    goto LABEL_49;
  }
  if (*((char *)this + 151) < 0)
  {
    if (!*((_QWORD *)this + 17))
      goto LABEL_41;
  }
  else if (!*((_BYTE *)this + 151))
  {
    goto LABEL_41;
  }
  if (*((char *)this + 175) < 0)
  {
    if (!*((_QWORD *)this + 20))
      goto LABEL_41;
  }
  else if (!*((_BYTE *)this + 175))
  {
LABEL_41:
    v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v5, "Target is required.");
    __cxa_throw(v5, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*((char *)this + 199) < 0)
  {
    if (!*((_QWORD *)this + 23))
      goto LABEL_41;
  }
  else if (!*((_BYTE *)this + 199))
  {
    goto LABEL_41;
  }
  if (*((char *)this + 223) < 0)
  {
    if (*((_QWORD *)this + 26))
      goto LABEL_37;
LABEL_43:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--cpu-api is a required argument");
    goto LABEL_49;
  }
  if (!*((_BYTE *)this + 223))
    goto LABEL_43;
LABEL_37:
  if (*((_BYTE *)this + 4) && (*(_DWORD *)this & 0x80000000) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--cpu-deadline must be a positive integer.");
LABEL_49:
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
}

void sub_19116452C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191164540(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191164554(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191164568(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19116457C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191164590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForMLC::Target::SetPlatform(uint64_t a1, uint64_t a2)
{
  char v2;
  char v4;
  uint64_t v5;

  if (a2 > 33024)
  {
    switch(a2)
    {
      case 33025:
      case 33027:
      case 33040:
      case 33042:
      case 33056:
      case 33072:
      case 33074:
LABEL_6:
        v2 = 52;
LABEL_7:
        v4 = 9;
        v5 = 0x31612D656C707061;
        break;
      case 33026:
      case 33028:
      case 33029:
      case 33030:
      case 33031:
      case 33032:
      case 33033:
      case 33034:
      case 33035:
      case 33036:
      case 33037:
      case 33038:
      case 33039:
      case 33041:
      case 33043:
      case 33044:
      case 33045:
      case 33046:
      case 33047:
      case 33048:
      case 33049:
      case 33050:
      case 33051:
      case 33052:
      case 33053:
      case 33054:
      case 33055:
      case 33057:
      case 33058:
      case 33059:
      case 33060:
      case 33061:
      case 33062:
      case 33063:
      case 33064:
      case 33065:
      case 33066:
      case 33067:
      case 33068:
      case 33069:
      case 33070:
      case 33071:
      case 33073:
        goto LABEL_20;
      default:
        if (a2 == 33537 || a2 == 33552)
        {
          v2 = 0;
          v4 = 8;
          v5 = 0x35732D656C707061;
        }
        else
        {
LABEL_20:
          v4 = 7;
          v5 = 0x636972656E6567;
        }
        break;
    }
  }
  else
  {
    v4 = 7;
    v5 = 0x6C6C6577736168;
    switch(a2)
    {
      case 32774:
        v2 = 0;
        v4 = 8;
        v5 = 0x34732D656C707061;
        break;
      case 32775:
      case 32776:
      case 32777:
      case 32778:
      case 32779:
      case 32780:
      case 32781:
      case 32782:
      case 32783:
      case 32787:
      case 32788:
      case 32790:
      case 32791:
      case 32792:
      case 32793:
      case 32794:
      case 32795:
      case 32796:
      case 32797:
      case 32798:
      case 32799:
      case 32801:
      case 32802:
      case 32803:
      case 32804:
      case 32805:
      case 32806:
      case 32808:
      case 32809:
      case 32810:
      case 32811:
      case 32812:
      case 32813:
      case 32814:
      case 32815:
        goto LABEL_20;
      case 32784:
      case 32785:
        v2 = 48;
        goto LABEL_7;
      case 32786:
        break;
      case 32789:
        v2 = 49;
        goto LABEL_7;
      case 32800:
      case 32807:
        v2 = 50;
        goto LABEL_7;
      case 32816:
        v2 = 51;
        goto LABEL_7;
      default:
        switch(a2)
        {
          case 24576:
          case 24577:
          case 24578:
          case 24608:
          case 24609:
            goto LABEL_6;
          case 24579:
          case 24580:
          case 24581:
          case 24582:
          case 24583:
          case 24584:
          case 24585:
          case 24586:
          case 24587:
          case 24588:
          case 24589:
          case 24590:
          case 24591:
          case 24592:
          case 24593:
          case 24594:
          case 24595:
          case 24596:
          case 24597:
          case 24598:
          case 24599:
          case 24600:
          case 24601:
          case 24602:
          case 24603:
          case 24604:
          case 24605:
          case 24606:
          case 24607:
            goto LABEL_20;
          default:
            if (a2 != 28672)
              goto LABEL_20;
            v2 = 0;
            v4 = 8;
            v5 = 0x38612D656C707061;
            break;
        }
        break;
    }
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = v2;
  *(_BYTE *)(a1 + 57) = 0;
  *(_BYTE *)(a1 + 71) = v4;
}

uint64_t Espresso::AOT::MILCompilerForMLC::Target::Target(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  void **v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _OWORD *v8;
  std::string *p_p;
  int data;
  int v11;
  BOOL v13;
  char *v14;
  uint64_t v15;
  _OWORD *v16;
  std::logic_error *exception;
  std::logic_error *v19;
  std::logic_error *v20;
  std::logic_error *v21;
  _BYTE v22[64];
  std::string v23;
  std::string __p;
  _QWORD v25[2];
  uint64_t v26;
  std::string __str;

  *(_OWORD *)(a1 + 48) = 0u;
  v3 = (std::string *)(a1 + 48);
  v4 = (void **)(a1 + 24);
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __str = *(std::string *)a2;
  v25[0] = &__str;
  v25[1] = &v26;
  v26 = 0;
  Espresso::AOT::MILCompilerForMLC::Target::Target(std::string const&)::$_1::operator()(&__p, (uint64_t)v25, 45);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = __p;
  v5 = v26;
  v6 = (char *)operator new(0x30uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  *(_WORD *)&v22[50] = 0;
  *(_DWORD *)&v22[52] = 0;
  *(_QWORD *)&v22[56] = 0x8000000000000030;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_191A6F7A0;
  strcpy(v6, "--cpu-target: invalid target triple format");
  strcpy(v22, "et triple formatvalid target tri--cpu-target: in*");
  if (v5 == -1)
  {
    *(_QWORD *)&v22[48] = v4;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  operator delete(v6);
  Espresso::AOT::MILCompilerForMLC::Target::Target(std::string const&)::$_1::operator()(&__p, (uint64_t)v25, 45);
  v7 = v26;
  v8 = operator new(0x30uLL);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = *(_OWORD *)&v22[48];
  *v8 = *(_OWORD *)&v22[32];
  v8[1] = *(_OWORD *)&v22[16];
  *(_OWORD *)((char *)v8 + 26) = *(_OWORD *)v22;
  *((_BYTE *)v8 + 42) = 0;
  if (v7 == -1)
  {
    *(_QWORD *)&v22[48] = v4;
    v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, &v23);
    v19->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v19, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  operator delete(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ == 5)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_13;
    }
LABEL_19:
    v13 = 0;
    goto LABEL_20;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 5)
    goto LABEL_19;
  p_p = &__p;
LABEL_13:
  data = (int)p_p->__r_.__value_.__l.__data_;
  v11 = p_p->__r_.__value_.__s.__data_[4];
  v13 = data == 1819308129 && v11 == 101;
LABEL_20:
  v14 = (char *)operator new(0x28uLL);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = xmmword_191A79500;
  strcpy(v14, "--cpu-target: unsupported target env");
  if (!v13)
  {
    *(_QWORD *)&v22[48] = v4;
    v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, &v23);
    v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v20, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  operator delete(v14);
  Espresso::AOT::MILCompilerForMLC::Target::Target(std::string const&)::$_1::operator()(&v23, (uint64_t)v25, 58);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v4);
  *(std::string *)v4 = v23;
  v15 = v26;
  v16 = operator new(0x30uLL);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = *(_OWORD *)&v22[48];
  *v16 = *(_OWORD *)&v22[32];
  v16[1] = *(_OWORD *)&v22[16];
  *(_OWORD *)((char *)v16 + 26) = *(_OWORD *)v22;
  *((_BYTE *)v16 + 42) = 0;
  if (v15 == -1)
  {
    *(_QWORD *)&v22[48] = v4;
    v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, &v23);
    v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
    __cxa_throw(v21, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
  }
  operator delete(v16);
  std::string::operator=(v3, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_191164B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  void **v30;
  void **v31;
  void **v33;

  v33 = v31;
  if (*(char *)(v29 + 71) < 0)
  {
    operator delete(*v30);
    if ((*(char *)(v29 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((*(char *)(v29 + 47) & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v29 + 23) < 0)
      goto LABEL_4;
    goto LABEL_7;
  }
  operator delete(*v33);
  if (*(char *)(v29 + 23) < 0)
  {
LABEL_4:
    operator delete(*(void **)v29);
    _Unwind_Resume(a1);
  }
LABEL_7:
  _Unwind_Resume(a1);
}

void sub_191164C9C()
{
  uint64_t v0;

  if (*(char *)(v0 - 41) < 0)
    JUMPOUT(0x191164C68);
  JUMPOUT(0x191164BF4);
}

__n128 Espresso::AOT::MILCompilerForMLC::Target::Target(std::string const&)::$_1::operator()(_QWORD *a1, uint64_t a2, std::string::value_type __c)
{
  std::string::size_type v5;
  const std::string *v6;
  size_t v7;
  void *v8;
  const std::string *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  std::string::size_type size;
  size_t v14;
  __n128 *p_dst;
  std::string *v16;
  __n128 result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 __dst;
  unint64_t v23;

  v5 = std::string::find(*(const std::string **)a2, __c, 0);
  **(_QWORD **)(a2 + 8) = v5;
  v6 = *(const std::string **)a2;
  if ((*(char *)(*(_QWORD *)a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned __int8 *)(*(_QWORD *)a2 + 23) >= v5)
      v7 = v5;
    else
      v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 23);
    if (v7 <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_6;
LABEL_31:
    std::string::__throw_length_error[abi:ne180100]();
  }
  v6 = (const std::string *)v6->__r_.__value_.__r.__words[0];
  if (*(_QWORD *)(*(_QWORD *)a2 + 8) >= v5)
    v7 = v5;
  else
    v7 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_31;
LABEL_6:
  if (v7 >= 0x17)
  {
    v18 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v18 = v7 | 7;
    v19 = v18 + 1;
    v8 = operator new(v18 + 1);
    a1[1] = v7;
    a1[2] = v19 | 0x8000000000000000;
    *a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v7;
    v8 = a1;
    if (!v7)
    {
      *(_BYTE *)a1 = 0;
      v9 = *(const std::string **)a2;
      v10 = **(_QWORD **)(a2 + 8);
      v11 = v10 + 1;
      v12 = *(char *)(*(_QWORD *)a2 + 23);
      if ((v12 & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  memmove(v8, v6, v7);
  *((_BYTE *)v8 + v7) = 0;
  v9 = *(const std::string **)a2;
  v10 = **(_QWORD **)(a2 + 8);
  v11 = v10 + 1;
  v12 = *(char *)(*(_QWORD *)a2 + 23);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_9:
    size = v12;
    if (v11 <= v12)
    {
      v14 = v12 - v11;
      if (v14 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_11;
LABEL_21:
      std::string::__throw_length_error[abi:ne180100]();
    }
LABEL_32:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_19:
  size = v9->__r_.__value_.__l.__size_;
  if (size < v11)
    goto LABEL_32;
  v9 = (const std::string *)v9->__r_.__value_.__r.__words[0];
  v14 = size - v11;
  if (size - v11 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_21;
LABEL_11:
  if (v14 >= 0x17)
  {
    v20 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v20 = v14 | 7;
    v21 = v20 + 1;
    p_dst = (__n128 *)operator new(v20 + 1);
    __dst.n128_u64[1] = v14;
    v23 = v21 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
LABEL_25:
    memmove(p_dst, (char *)&v9->__r_.__value_.__l.__data_ + v10 + 1, v14);
    p_dst->n128_u8[size - v10 - 1] = 0;
    v16 = *(std::string **)a2;
    if ((SHIBYTE(v16->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_26:
    operator delete(v16->__r_.__value_.__l.__data_);
    goto LABEL_14;
  }
  HIBYTE(v23) = v14;
  p_dst = &__dst;
  if (size != v11)
    goto LABEL_25;
  __dst.n128_u8[size - v10 - 1] = 0;
  v16 = *(std::string **)a2;
  if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_26;
LABEL_14:
  result = __dst;
  v16->__r_.__value_.__r.__words[2] = v23;
  *(__n128 *)&v16->__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_191164EDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForMLC::Target::str(Espresso::AOT::MILCompilerForMLC::Target *this@<X0>, std::string *a2@<X8>)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  Espresso::AOT::MILCompilerForMLC::Target *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  const std::string::value_type *v18;
  char *v19;
  const std::string::value_type *v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string __dst;
  std::string v26;
  std::string v27;

  v3 = *((char *)this + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)this + 23);
  else
    v4 = *((_QWORD *)this + 1);
  v5 = v4 + 7;
  if (v4 + 7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 7;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 7;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v10 = this;
  else
    v10 = *(Espresso::AOT::MILCompilerForMLC::Target **)this;
  memmove(p_dst, v10, v4);
LABEL_15:
  strcpy((char *)p_dst + v4, "-apple-");
  v11 = *((char *)this + 47);
  if (v11 >= 0)
    v12 = (char *)this + 24;
  else
    v12 = (const std::string::value_type *)*((_QWORD *)this + 3);
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)this + 47);
  else
    v13 = *((_QWORD *)this + 4);
  v14 = std::string::append(&__dst, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v26, ":");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v20 = (const std::string::value_type *)*((_QWORD *)this + 6);
  v19 = (char *)this + 48;
  v18 = v20;
  v21 = v19[23];
  if (v21 >= 0)
    v22 = v19;
  else
    v22 = v18;
  if (v21 >= 0)
    v23 = v19[23];
  else
    v23 = *((_QWORD *)v19 + 1);
  v24 = std::string::append(&v27, v22, v23);
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_33:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_33;
}

void sub_1911650D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForMLC::GetOptions(Espresso::AOT::MILCompilerForMLC *this)
{
  return (uint64_t)this + 264;
}

std::__shared_weak_count_vtbl *Espresso::AOT::MILCompilerForMLC::Run(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t Function;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  const char *v12;
  NSObject *v13;
  std::__shared_weak_count_vtbl *v14;
  std::__fs::filesystem::path::__string_view v15;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  std::basic_string_view<_CharT, _Traits>::size_type v18;
  void **v19;
  const char *v20;
  std::string::size_type v21;
  std::string::size_type size;
  void *v23;
  std::__shared_weak_count_vtbl *result;
  std::logic_error *exception;
  std::string *v26;
  __int128 v27;
  std::runtime_error *v28;
  std::string v29;
  std::__fs::filesystem::path v30;
  std::__fs::filesystem::path v31;
  void *__p;
  char v33;
  void *v34;
  char v35;
  std::string pn;
  std::__fs::filesystem::path v37;
  std::__fs::filesystem::path v38;
  _BYTE v39[8];
  std::__fs::filesystem::path v40;
  std::__shared_weak_count_vtbl *v41;
  std::__fs::filesystem::path v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  std::string __dst;

  v43 = 0x2B23816800000000;
  v44 = 0u;
  v45 = 0u;
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 296))
  {
    v6 = a3;
    v5 = *a3;
    if (v6[1] - v5 != 24)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Only one entry point is supported.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E2D35320, (void (*)(void *))MEMORY[0x1E0DE4360]);
    }
    Function = MIL::IRProgram::GetFunction();
    if (Espresso::AOT::HasFlexibleShapeWithEnumeratedConfig(Function))
    {
      std::operator+<char>();
      v26 = std::string::append(&v42.__pn_, " has flexible shape with enumerated config which is not supported on MLC.");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__pn_.__r_.__value_.__l.__data_);
      v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v28, &__dst);
      __cxa_throw(v28, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&__dst, "main");
    Espresso::AOT::MakeIRProgramWithFunction(Function, 1, v5, &v41);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    memset(&v42, 0, sizeof(v42));
    v8 = *(unsigned __int8 *)(a1 + 359);
    if ((v8 & 0x80u) == 0)
      v9 = (std::string *)(a1 + 336);
    else
      v9 = *(std::string **)(a1 + 336);
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a1 + 344);
    std::string::append[abi:ne180100]<char const*,0>(&v42.__pn_, v9, (std::string *)((char *)v9 + v8));
    memset(&__dst, 0, sizeof(__dst));
    v10 = *(unsigned __int8 *)(v5 + 23);
    if ((v10 & 0x80u) == 0)
      v11 = (std::string *)v5;
    else
      v11 = *(std::string **)v5;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(v5 + 8);
    std::string::append[abi:ne180100]<char const*,0>(&__dst, v11, (std::string *)((char *)v11 + v10));
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v42, &v40);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    std::__fs::filesystem::__create_directories(&v40, 0);
    std::__fs::filesystem::__status(&v40, 0);
    v13 = Espresso::espresso_os_log_subsystem(0, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      Espresso::AOT::MILCompilerForMLC::Run((uint64_t *)&v40, (uint64_t)v39, v13);
    memset(&__dst, 0, sizeof(__dst));
    std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)"mlc_mil_model", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v40, &v38);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    std::__fs::filesystem::__create_directories(&v38, 0);
    memset(&__dst, 0, sizeof(__dst));
    std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)"model.mil", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v38, &v37);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      v14 = v41;
      if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_25;
    }
    else
    {
      v14 = v41;
      if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        pn = v37.__pn_;
        goto LABEL_28;
      }
    }
    std::string::__init_copy_ctor_external(&pn, v37.__pn_.__r_.__value_.__l.__data_, v37.__pn_.__r_.__value_.__l.__size_);
LABEL_28:
    v35 = 0;
    LOBYTE(v34) = 0;
    v33 = 0;
    LOBYTE(__p) = 0;
    Espresso::MILUtil::SerializeProgram((uint64_t)v14, (uint64_t)&pn, (uint64_t)&v34, (uint64_t)&__p, 0x100000004, 0);
    if (v33 < 0)
    {
      operator delete(__p);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_30:
        if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_31;
LABEL_46:
        operator delete(pn.__r_.__value_.__l.__data_);
LABEL_31:
        memset(&__dst, 0, sizeof(__dst));
        std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)"model.mlc", (std::string *)"");
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v40, &v31);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v15 = std::__fs::filesystem::path::__parent_path(&v42);
        if (v15.__size_ >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        if (v15.__size_ >= 0x17)
        {
          v17 = (v15.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15.__size_ | 7) != 0x17)
            v17 = v15.__size_ | 7;
          v18 = v17 + 1;
          p_dst = (std::string *)operator new(v17 + 1);
          __dst.__r_.__value_.__l.__size_ = v15.__size_;
          __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15.__size_;
          p_dst = &__dst;
          if (!v15.__size_)
          {
LABEL_41:
            p_dst->__r_.__value_.__s.__data_[v15.__size_] = 0;
            v29 = __dst;
            std::__fs::filesystem::path::lexically_relative(&v30, &v31, (const std::__fs::filesystem::path *)&v29);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v29.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_43;
            }
            else if ((SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_43:
              __dst = v30.__pn_;
              goto LABEL_49;
            }
            std::string::__init_copy_ctor_external(&__dst, v30.__pn_.__r_.__value_.__l.__data_, v30.__pn_.__r_.__value_.__l.__size_);
LABEL_49:
            v19 = (void **)(a1 + 520);
            if (*(char *)(a1 + 543) < 0)
              operator delete(*v19);
            *(_OWORD *)v19 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            *(_QWORD *)(a1 + 536) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
            std::__fs::filesystem::__remove(&v31, 0);
            if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__dst, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
            else
              __dst = v31.__pn_;
            std::string::operator=((std::string *)(a1 + 336), &__dst);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_56;
            }
            else if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_56:
              v29 = v37.__pn_;
              goto LABEL_59;
            }
            std::string::__init_copy_ctor_external(&v29, v37.__pn_.__r_.__value_.__l.__data_, v37.__pn_.__r_.__value_.__l.__size_);
LABEL_59:
            Espresso::AOT::MILCompilerForMLC::AssembleArguments(a1, (uint64_t)&v29, &__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29.__r_.__value_.__l.__data_);
            std::__fs::filesystem::__remove_all(&v38, 0);
            v21 = __dst.__r_.__value_.__r.__words[0];
            if (__dst.__r_.__value_.__r.__words[0])
            {
              size = __dst.__r_.__value_.__l.__size_;
              v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
              {
                do
                {
                  if (*(char *)(size - 1) < 0)
                    operator delete(*(void **)(size - 24));
                  size -= 24;
                }
                while (size != v21);
                v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              }
              __dst.__r_.__value_.__l.__size_ = v21;
              operator delete(v23);
            }
            if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v30.__pn_.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_71:
                if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_72;
                goto LABEL_82;
              }
            }
            else if ((SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_71;
            }
            operator delete(v31.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_72:
              if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_73;
              goto LABEL_83;
            }
LABEL_82:
            operator delete(v37.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_73:
              if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_74;
              goto LABEL_84;
            }
LABEL_83:
            operator delete(v38.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_74:
              if ((SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_75;
              goto LABEL_85;
            }
LABEL_84:
            operator delete(v40.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_75:
              result = v41;
              v41 = 0;
              if (!result)
                goto LABEL_77;
              goto LABEL_76;
            }
LABEL_85:
            operator delete(v42.__pn_.__r_.__value_.__l.__data_);
            result = v41;
            v41 = 0;
            if (!result)
            {
LABEL_77:
              if (E5RT::g_trace_analysis_level < v43)
                return result;
              return (std::__shared_weak_count_vtbl *)kdebug_trace();
            }
LABEL_76:
            result = (std::__shared_weak_count_vtbl *)(*((uint64_t (**)(std::__shared_weak_count_vtbl *))result->~__shared_weak_count
                                                       + 1))(result);
            goto LABEL_77;
          }
        }
        memmove(p_dst, v15.__data_, v15.__size_);
        goto LABEL_41;
      }
    }
    else if ((v35 & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(v34);
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_46;
  }
  Espresso::AOT::MILCompilerForMLC::RunNano(a1);
  return (std::__shared_weak_count_vtbl *)kdebug_trace();
}

void sub_19116581C()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x1911659FCLL);
}

void sub_19116582C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
  {
    operator delete(*(void **)(v1 - 160));
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 136));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191165AB0);
}

void sub_19116585C()
{
  JUMPOUT(0x191165A58);
}

void sub_191165864(_Unwind_Exception *a1)
{
  uint64_t v1;

  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_191165878(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  __cxa_free_exception(v1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_191165894()
{
  uint64_t v0;

  std::vector<std::string>::~vector[abi:ne180100]((void **)(v0 - 96));
  JUMPOUT(0x191165900);
}

void sub_19116589C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__fs::filesystem::path *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  __cxa_begin_catch(a1);
  std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)&a31, 0);
  __cxa_rethrow();
}

void sub_1911658B4()
{
  __cxa_end_catch();
  JUMPOUT(0x1911658BCLL);
}

void sub_1911658CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x191165900);
}

void sub_1911658E4()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    operator delete(*(void **)(v0 - 96));
  JUMPOUT(0x191165900);
}

void sub_1911658FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  JUMPOUT(0x191165A48);
}

void sub_191165914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    JUMPOUT(0x19116590CLL);
  JUMPOUT(0x191165A48);
}

void sub_191165928()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    JUMPOUT(0x191165A54);
  JUMPOUT(0x191165A58);
}

void sub_191165940(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a30 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a36 & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x191165A58);
LABEL_9:
    JUMPOUT(0x191165A54);
  }
  operator delete(a25);
  if ((a36 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_9;
}

void sub_191165988()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    JUMPOUT(0x191165A64);
  JUMPOUT(0x191165A68);
}

void sub_1911659A0()
{
  JUMPOUT(0x191165A68);
}

void sub_1911659A8()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    JUMPOUT(0x191165A74);
  JUMPOUT(0x191165A78);
}

void sub_1911659C0()
{
  JUMPOUT(0x191165A78);
}

void sub_1911659C8()
{
  JUMPOUT(0x191165A78);
}

void sub_1911659D0()
{
  JUMPOUT(0x191165A78);
}

void sub_1911659D8()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    JUMPOUT(0x191165A84);
  JUMPOUT(0x191165A88);
}

void sub_1911659F0()
{
  JUMPOUT(0x191165A88);
}

void sub_1911659F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 73) < 0)
  {
    operator delete(*(void **)(v42 - 96));
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v42 - 136));
    _Unwind_Resume(a1);
  }
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v42 - 136));
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForMLC::RunNano(uint64_t a1)
{
  char v2;
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type size;
  int v7;
  BOOL v8;
  std::string *v9;
  uint64_t v10;
  std::__fs::filesystem::path::__string_view v11;
  std::string::size_type v12;
  std::string::size_type v13;
  char v14;
  std::string::size_type v15;
  void *v16;
  const char *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  void *v20;
  std::string v21;
  std::string __p;
  std::string v23;

  memset(&__p, 0, sizeof(__p));
  v2 = *(_BYTE *)(a1 + 295);
  if (v2 >= 0)
    v3 = (std::string *)(a1 + 272);
  else
    v3 = *(std::string **)(a1 + 272);
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 295);
  else
    v4 = *(_QWORD *)(a1 + 280);
  std::string::append[abi:ne180100]<char const*,0>(&__p, v3, (std::string *)((char *)v3 + v4));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v23 = __p;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&__p, a1);
  size = __p.__r_.__value_.__l.__size_;
  v5 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
    {
      memset(&v21, 0, sizeof(v21));
      v7 = *(char *)(v5 + 23);
      v8 = v7 < 0;
      if (v7 >= 0)
        v9 = (std::string *)v5;
      else
        v9 = *(std::string **)v5;
      v10 = *(unsigned __int8 *)(v5 + 23);
      if (v8)
        v10 = *(_QWORD *)(v5 + 8);
      std::string::append[abi:ne180100]<char const*,0>(&v21, v9, (std::string *)((char *)v9 + v10));
      v11 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&v21);
      if (v11.__size_)
      {
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = (std::string::size_type)&v21;
        else
          v12 = v21.__r_.__value_.__r.__words[0];
        std::string::erase(&v21, (std::string::size_type)&v11.__data_[-v12], 0xFFFFFFFFFFFFFFFFLL);
      }
      v13 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      v14 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v13 = v21.__r_.__value_.__l.__size_;
      if (v13)
      {
        std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v21, 0);
        v14 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      }
      if (v14 < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      v5 += 24;
    }
    while (v5 != size);
    v5 = __p.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    v15 = __p.__r_.__value_.__l.__size_;
    v16 = (void *)v5;
    if (__p.__r_.__value_.__l.__size_ != v5)
    {
      do
      {
        if (*(char *)(v15 - 1) < 0)
          operator delete(*(void **)(v15 - 24));
        v15 -= 24;
      }
      while (v15 != v5);
      v16 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v5;
    operator delete(v16);
  }
  Espresso::AOT::MILCompilerForMLC::AssembleArguments(a1, (uint64_t)&v23, &__p.__r_.__value_.__l.__data_);
  v18 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v19 = __p.__r_.__value_.__l.__size_;
    v20 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v19 - 1) < 0)
          operator delete(*(void **)(v19 - 24));
        v19 -= 24;
      }
      while (v19 != v18);
      v20 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v18;
    operator delete(v20);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_191165CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *Espresso::AOT::MILCompilerForMLC::SetOutput(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 14, a2);
}

void Espresso::AOT::MILCompilerForMLC::AssembleArguments(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string::value_type *v9;
  size_t v10;
  std::string::value_type *v11;
  std::string::value_type *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  void *v18;
  void *v19;
  std::ios_base *v20;
  uint64_t v21;
  uint64_t v22;
  std::string::value_type *v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  std::string *v27;
  char *v28;
  int v29;
  char *v30;
  size_t v31;
  char *v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  __int128 v38;
  char *v39;
  int v40;
  char *v41;
  void *v42;
  void *v43;
  std::ios_base *v44;
  _QWORD *v45;
  uint64_t v46;
  _BYTE *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  int v51;
  std::string *v52;
  std::string *v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  __int128 v57;
  void **v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  char *v62;
  int v63;
  __int128 v64;
  char *v65;
  int v66;
  unint64_t v67;
  __int128 v68;
  char *v69;
  int v70;
  unint64_t v71;
  __int128 v72;
  char *v73;
  int v74;
  std::string *v75;
  __int128 v76;
  unint64_t v77;
  __int128 v78;
  char *v79;
  int v80;
  std::string *v81;
  __int128 v82;
  unint64_t v83;
  __int128 v84;
  char *v85;
  int v86;
  std::string *v87;
  __int128 v88;
  unint64_t v89;
  __int128 v90;
  char *v91;
  int v92;
  void **v93;
  char *v94;
  uint64_t v95;
  BOOL v96;
  char *v97;
  char *v98;
  void *v99;
  char *v100;
  __int128 v101;
  char *v102;
  int v103;
  std::string v104;
  void *__p[9];
  void *v106[2];
  __int128 v107;
  int v108;
  _QWORD v109[22];

  v109[20] = *MEMORY[0x1E0C80C00];
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "e5compiler");
  std::vector<std::string>::vector[abi:ne180100](a3, (uint64_t)__p, 1uLL);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v6 = *(char *)(a2 + 23);
  v7 = *(const std::string::value_type **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (v6 >= 0)
    v9 = (std::string::value_type *)a2;
  else
    v9 = *(std::string::value_type **)a2;
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = (std::string::value_type *)memchr(v9, 32, v10);
  if (v11)
    v12 = v11;
  else
    v12 = &v9[v10];
  v13 = MEMORY[0x1E0DE4FE0];
  v14 = MEMORY[0x1E0DE4FB8];
  if (v12 - v9 == v10)
  {
    v15 = MEMORY[0x1E0DE4F60];
    v16 = (unint64_t)a3[1];
    if (v16 >= (unint64_t)a3[2])
    {
      v27 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, a2);
    }
    else
    {
      if (v6 < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], v7, v8);
      }
      else
      {
        v17 = *(_OWORD *)a2;
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v16 = v17;
      }
      v27 = (std::string *)(v16 + 24);
      a3[1] = (char *)(v16 + 24);
    }
    v21 = v14;
    a3[1] = (char *)v27;
    v24 = v15;
    v30 = (char *)(a1 + 336);
    v31 = *(unsigned __int8 *)(a1 + 359);
    if ((*(char *)(a1 + 359) & 0x80000000) == 0)
      goto LABEL_41;
  }
  else
  {
    v18 = *(void **)(MEMORY[0x1E0DE4F60] + 8);
    v19 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
    v109[0] = MEMORY[0x1E0DE4FE0] + 64;
    __p[0] = v18;
    *(void **)((char *)__p + *((_QWORD *)v18 - 3)) = v19;
    v20 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
    std::ios_base::init(v20, &__p[1]);
    v20[1].__vftable = 0;
    v20[1].__fmtflags_ = -1;
    __p[0] = (void *)(v13 + 24);
    v109[0] = v13 + 64;
    std::streambuf::basic_streambuf();
    v21 = v14;
    __p[1] = (void *)(v14 + 16);
    *(_OWORD *)v106 = 0u;
    v107 = 0u;
    v108 = 16;
    v22 = *(unsigned __int8 *)(a2 + 23);
    if ((v22 & 0x80u) == 0)
      v23 = (std::string::value_type *)a2;
    else
      v23 = *(std::string::value_type **)a2;
    if ((v22 & 0x80u) != 0)
      v22 = *(_QWORD *)(a2 + 8);
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(__p, v23, &v23[v22], 0x27u, 0x5Cu);
    std::stringbuf::str();
    v24 = MEMORY[0x1E0DE4F60];
    v25 = (unint64_t)a3[1];
    if (v25 >= (unint64_t)a3[2])
    {
      v28 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)&v104);
      v29 = SHIBYTE(v104.__r_.__value_.__r.__words[2]);
      a3[1] = v28;
      if (v29 < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
    }
    else
    {
      v26 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
      *(_QWORD *)(v25 + 16) = *((_QWORD *)&v104.__r_.__value_.__l + 2);
      *(_OWORD *)v25 = v26;
      a3[1] = (char *)(v25 + 24);
    }
    __p[0] = *(void **)v24;
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v24 + 24);
    __p[1] = (void *)(v21 + 16);
    if (SBYTE7(v107) < 0)
      operator delete(v106[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401CCD0](v109);
    v30 = (char *)(a1 + 336);
    v31 = *(unsigned __int8 *)(a1 + 359);
    if ((*(char *)(a1 + 359) & 0x80000000) == 0)
    {
LABEL_41:
      v41 = (char *)memchr(v30, 32, v31);
      if (v41)
        v36 = v41;
      else
        v36 = &v30[v31];
      if ((v31 & 0x80) == 0)
        goto LABEL_45;
      goto LABEL_33;
    }
  }
  v32 = *(char **)(a1 + 336);
  v33 = *(_QWORD *)(a1 + 344);
  v34 = &v32[v33];
  v35 = (char *)memchr(v32, 32, v33);
  if (v35)
    v36 = v35;
  else
    v36 = v34;
  if ((v31 & 0x80) == 0)
  {
LABEL_45:
    if (v36 != &v30[v31])
      goto LABEL_46;
    goto LABEL_34;
  }
LABEL_33:
  if (v36 != (char *)(*(_QWORD *)(a1 + 336) + *(_QWORD *)(a1 + 344)))
  {
LABEL_46:
    v42 = *(void **)(v24 + 8);
    v43 = *(void **)(v24 + 16);
    v109[0] = v13 + 64;
    __p[0] = v42;
    *(void **)((char *)__p + *((_QWORD *)v42 - 3)) = v43;
    v44 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
    std::ios_base::init(v44, &__p[1]);
    v44[1].__vftable = 0;
    v44[1].__fmtflags_ = -1;
    __p[0] = (void *)(v13 + 24);
    v109[0] = v13 + 64;
    std::streambuf::basic_streambuf();
    __p[1] = (void *)(v21 + 16);
    *(_OWORD *)v106 = 0u;
    v107 = 0u;
    v108 = 16;
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"--output=", 9);
    v46 = *(unsigned __int8 *)(a1 + 359);
    if ((v46 & 0x80u) == 0)
      v47 = v30;
    else
      v47 = *(_BYTE **)(a1 + 336);
    if ((v46 & 0x80u) != 0)
      v46 = *(_QWORD *)(a1 + 344);
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v45, v47, &v47[v46], 0x27u, 0x5Cu);
    std::stringbuf::str();
    v48 = (unint64_t)a3[1];
    if (v48 >= (unint64_t)a3[2])
    {
      v50 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)&v104);
      v51 = SHIBYTE(v104.__r_.__value_.__r.__words[2]);
      a3[1] = v50;
      if (v51 < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
    }
    else
    {
      v49 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
      *(_QWORD *)(v48 + 16) = *((_QWORD *)&v104.__r_.__value_.__l + 2);
      *(_OWORD *)v48 = v49;
      a3[1] = (char *)(v48 + 24);
    }
    __p[0] = *(void **)v24;
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v24 + 24);
    __p[1] = (void *)(v21 + 16);
    if (SBYTE7(v107) < 0)
      operator delete(v106[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19401CCD0](v109);
    goto LABEL_58;
  }
LABEL_34:
  std::operator+<char>();
  v37 = (unint64_t)a3[1];
  if (v37 >= (unint64_t)a3[2])
  {
    v39 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
    v40 = SHIBYTE(__p[2]);
    a3[1] = v39;
    if (v40 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v38 = *(_OWORD *)__p;
    *(void **)(v37 + 16) = __p[2];
    *(_OWORD *)v37 = v38;
    a3[1] = (char *)(v37 + 24);
  }
LABEL_58:
  if (*(char *)(a1 + 511) < 0)
  {
    if (!*(_QWORD *)(a1 + 496))
      goto LABEL_72;
  }
  else if (!*(_BYTE *)(a1 + 511))
  {
    goto LABEL_72;
  }
  *((_BYTE *)&v104.__r_.__value_.__s + 23) = 1;
  LOWORD(v104.__r_.__value_.__l.__data_) = 44;
  E5Common::StringUtils::Split((uint64_t *)(a1 + 488), (char *)&v104, (uint64_t)__p);
  if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v52 = (std::string *)__p[0];
    v53 = (std::string *)__p[1];
    if (__p[0] != __p[1])
      goto LABEL_66;
LABEL_77:
    if (!v52)
      goto LABEL_72;
LABEL_78:
    v58 = (void **)__p[1];
    if (__p[1] == v52)
    {
      __p[1] = v52;
      operator delete(v52);
      if (*(_DWORD *)(a1 + 512) != 1)
        goto LABEL_80;
    }
    else
    {
      do
      {
        if (*((char *)v58 - 1) < 0)
          operator delete(*(v58 - 3));
        v58 -= 3;
      }
      while (v58 != (void **)v52);
      __p[1] = v52;
      operator delete(__p[0]);
      if (*(_DWORD *)(a1 + 512) != 1)
        goto LABEL_80;
    }
LABEL_73:
    HIBYTE(__p[2]) = 12;
    strcpy((char *)__p, "--bnns-graph");
    v56 = (unint64_t)a3[1];
    if (v56 < (unint64_t)a3[2])
    {
      v57 = *(_OWORD *)__p;
      *(void **)(v56 + 16) = __p[2];
      *(_OWORD *)v56 = v57;
      a3[1] = (char *)(v56 + 24);
      return;
    }
    goto LABEL_150;
  }
  operator delete(v104.__r_.__value_.__l.__data_);
  v52 = (std::string *)__p[0];
  v53 = (std::string *)__p[1];
  if (__p[0] == __p[1])
    goto LABEL_77;
  do
  {
LABEL_66:
    while (1)
    {
      std::string::insert(v52, 0, "--");
      v54 = (unint64_t)a3[1];
      if (v54 < (unint64_t)a3[2])
        break;
      a3[1] = (char *)std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (uint64_t)v52++);
      if (v52 == v53)
        goto LABEL_71;
    }
    if (SHIBYTE(v52->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], v52->__r_.__value_.__l.__data_, v52->__r_.__value_.__l.__size_);
    }
    else
    {
      v55 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      *(_QWORD *)(v54 + 16) = *((_QWORD *)&v52->__r_.__value_.__l + 2);
      *(_OWORD *)v54 = v55;
    }
    a3[1] = (char *)(v54 + 24);
    a3[1] = (char *)(v54 + 24);
    ++v52;
  }
  while (v52 != v53);
LABEL_71:
  v52 = (std::string *)__p[0];
  if (__p[0])
    goto LABEL_78;
LABEL_72:
  if (*(_DWORD *)(a1 + 512) == 1)
    goto LABEL_73;
LABEL_80:
  if (*(_BYTE *)(a1 + 296))
  {
    HIBYTE(__p[2]) = 8;
    strcpy((char *)__p, "--static");
    v59 = (unint64_t)a3[1];
    if (v59 >= (unint64_t)a3[2])
    {
      v62 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
      v63 = SHIBYTE(__p[2]);
      a3[1] = v62;
      if (v63 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v60 = *(_OWORD *)__p;
      *(void **)(v59 + 16) = __p[2];
      *(_OWORD *)v59 = v60;
      a3[1] = (char *)(v59 + 24);
    }
    if (!*(_BYTE *)(a1 + 328))
      std::__throw_bad_optional_access[abi:ne180100]();
    std::operator+<char>();
    v61 = (unint64_t)a3[1];
    if (v61 < (unint64_t)a3[2])
      goto LABEL_94;
  }
  else
  {
    HIBYTE(__p[2]) = 8;
    strcpy((char *)__p, "--binary");
    v61 = (unint64_t)a3[1];
    if (v61 < (unint64_t)a3[2])
    {
LABEL_94:
      v64 = *(_OWORD *)__p;
      *(void **)(v61 + 16) = __p[2];
      *(_OWORD *)v61 = v64;
      a3[1] = (char *)(v61 + 24);
      goto LABEL_97;
    }
  }
  v65 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
  v66 = SHIBYTE(__p[2]);
  a3[1] = v65;
  if (v66 < 0)
    operator delete(__p[0]);
LABEL_97:
  std::operator+<char>();
  v67 = (unint64_t)a3[1];
  if (v67 >= (unint64_t)a3[2])
  {
    v69 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
    v70 = SHIBYTE(__p[2]);
    a3[1] = v69;
    if (v70 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v68 = *(_OWORD *)__p;
    *(void **)(v67 + 16) = __p[2];
    *(_OWORD *)v67 = v68;
    a3[1] = (char *)(v67 + 24);
  }
  std::operator+<char>();
  v71 = (unint64_t)a3[1];
  if (v71 >= (unint64_t)a3[2])
  {
    v73 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
    v74 = SHIBYTE(__p[2]);
    a3[1] = v73;
    if (v74 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v72 = *(_OWORD *)__p;
    *(void **)(v71 + 16) = __p[2];
    *(_OWORD *)v71 = v72;
    a3[1] = (char *)(v71 + 24);
  }
  Espresso::AOT::MILCompilerForMLC::Target::str((Espresso::AOT::MILCompilerForMLC::Target *)(a1 + 392), &v104);
  v75 = std::string::insert(&v104, 0, "--target=");
  v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  __p[2] = (void *)v75->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  v77 = (unint64_t)a3[1];
  if (v77 < (unint64_t)a3[2])
  {
    v78 = *(_OWORD *)__p;
    *(void **)(v77 + 16) = __p[2];
    *(_OWORD *)v77 = v78;
    memset(__p, 0, 24);
    a3[1] = (char *)(v77 + 24);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_107;
LABEL_111:
    if (!*(_BYTE *)(a1 + 268))
      goto LABEL_117;
LABEL_112:
    std::to_string(&v104, *(_DWORD *)(a1 + 264));
    v81 = std::string::insert(&v104, 0, "--deadline=");
    v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    __p[2] = (void *)v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    v83 = (unint64_t)a3[1];
    if (v83 >= (unint64_t)a3[2])
    {
      v85 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
      v86 = SHIBYTE(__p[2]);
      a3[1] = v85;
      if (v86 < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_117;
      }
      else if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_117;
      }
    }
    else
    {
      v84 = *(_OWORD *)__p;
      *(void **)(v83 + 16) = __p[2];
      *(_OWORD *)v83 = v84;
      memset(__p, 0, 24);
      a3[1] = (char *)(v83 + 24);
      if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_117;
    }
    operator delete(v104.__r_.__value_.__l.__data_);
    if (!*(_BYTE *)(a1 + 388))
      goto LABEL_128;
    goto LABEL_118;
  }
  v79 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
  v80 = SHIBYTE(__p[2]);
  a3[1] = v79;
  if (v80 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_111;
  }
  else if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_111;
  }
LABEL_107:
  operator delete(v104.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 268))
    goto LABEL_112;
LABEL_117:
  if (!*(_BYTE *)(a1 + 388))
    goto LABEL_128;
LABEL_118:
  std::to_string(&v104, *(_DWORD *)(a1 + 384));
  v87 = std::string::insert(&v104, 0, "--size=");
  v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  __p[2] = (void *)v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  v89 = (unint64_t)a3[1];
  if (v89 >= (unint64_t)a3[2])
  {
    v91 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
    v92 = SHIBYTE(__p[2]);
    a3[1] = v91;
    if (v92 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v90 = *(_OWORD *)__p;
    *(void **)(v89 + 16) = __p[2];
    *(_OWORD *)v89 = v90;
    memset(__p, 0, 24);
    a3[1] = (char *)(v89 + 24);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
LABEL_128:
  v94 = *a3;
  v93 = (void **)a3[1];
  if (*a3 == (char *)v93)
  {
LABEL_144:
    if (v94 != (char *)v93)
      return;
  }
  else
  {
    do
    {
      v95 = v94[23];
      v96 = (v95 & 0x80u) != 0;
      if ((v95 & 0x80u) != 0)
        v95 = *((_QWORD *)v94 + 1);
      if (v96)
        v97 = *(char **)v94;
      else
        v97 = v94;
      if (v95 >= 8)
      {
        v98 = &v97[v95];
        v99 = v97;
        do
        {
          v100 = (char *)memchr(v99, 117, v95 - 7);
          if (!v100)
            break;
          if (*(_QWORD *)v100 == 0x736E6E622D657375)
          {
            if (v100 == v98 || v100 - v97 == -1)
              break;
            goto LABEL_144;
          }
          v99 = v100 + 1;
          v95 = v98 - (_BYTE *)v99;
        }
        while (v98 - (_BYTE *)v99 >= 8);
      }
      v94 += 24;
    }
    while (v94 != (char *)v93);
  }
  if (*(_BYTE *)(a1 + 516))
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "--use-bnns=false");
    if (v93 < (void **)a3[2])
      goto LABEL_147;
  }
  else
  {
    if (*(_BYTE *)(a1 + 296))
      return;
    HIBYTE(__p[2]) = 15;
    strcpy((char *)__p, "--use-bnns=true");
    if (v93 < (void **)a3[2])
    {
LABEL_147:
      v101 = *(_OWORD *)__p;
      v93[2] = __p[2];
      *(_OWORD *)v93 = v101;
      a3[1] = (char *)(v93 + 3);
      return;
    }
  }
LABEL_150:
  v102 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
  v103 = SHIBYTE(__p[2]);
  a3[1] = v102;
  if (v103 < 0)
    operator delete(__p[0]);
}

void sub_191166910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;

  if (a21 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::RunCommand(uint64_t *a1, const char *a2)
{
  NSObject *v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t **v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  char *v28;
  std::runtime_error *exception;
  std::string v30;
  uint64_t v31[3];
  char *v32;
  _QWORD *v33;
  char *v34;

  v3 = Espresso::espresso_os_log_subsystem(0, a2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v4 = *a1;
    if (a1[1] != *a1)
      goto LABEL_3;
LABEL_40:
    v27 = 0;
    goto LABEL_41;
  }
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v4 = *a1;
  if (a1[1] == *a1)
    goto LABEL_40;
LABEL_3:
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = (uint64_t **)(v4 + 24 * v6);
    if (*((char *)v7 + 23) < 0)
    {
      v7 = (uint64_t **)*v7;
      v8 = v34;
      if (v5 < v34)
      {
LABEL_4:
        *(_QWORD *)v5 = v7;
        v5 += 8;
        goto LABEL_5;
      }
    }
    else
    {
      v8 = v34;
      if (v5 < v34)
        goto LABEL_4;
    }
    v9 = v32;
    v10 = (char *)(v5 - v32);
    v11 = (v5 - v32) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = v8 - v32;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = operator new(8 * v14);
      v16 = (char *)v15 + 8 * v11;
      *(_QWORD *)v16 = v7;
      v17 = (uint64_t)(v16 + 8);
      if (v5 == v9)
        goto LABEL_19;
LABEL_23:
      v18 = v5 - 8 - v9;
      if (v18 >= 0x168)
      {
        if (&v10[(_QWORD)v15 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v10[(_QWORD)v15 - 8])
        {
          v19 = v5;
        }
        else if (&v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
        {
          v19 = v5;
        }
        else if ((unint64_t)(v5 - &v10[(_QWORD)v15]) >= 0x20)
        {
          v21 = (v18 >> 3) + 1;
          v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
          v19 = &v5[-v22];
          v16 -= v22;
          v23 = (char *)v15 + 8 * v11 - 16;
          v24 = v5 - 16;
          v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_26:
            v5 = v32;
            v32 = v16;
            v33 = (_QWORD *)v17;
            v34 = (char *)v15 + 8 * v14;
            if (!v5)
              goto LABEL_21;
LABEL_20:
            operator delete(v5);
            goto LABEL_21;
          }
        }
        else
        {
          v19 = v5;
        }
      }
      else
      {
        v19 = v5;
      }
      do
      {
        v20 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v19 != v9);
      goto LABEL_26;
    }
    v15 = 0;
    v16 = (char *)(8 * v11);
    *(_QWORD *)(8 * v11) = v7;
    v17 = 8 * v11 + 8;
    if (v5 != v9)
      goto LABEL_23;
LABEL_19:
    v32 = v16;
    v33 = (_QWORD *)v17;
    v34 = (char *)v15 + 8 * v14;
    if (v5)
      goto LABEL_20;
LABEL_21:
    v5 = (char *)v17;
LABEL_5:
    v33 = v5;
    ++v6;
    v4 = *a1;
  }
  while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v27 = v32;
LABEL_41:
  v28 = (char *)mlc_services_compile();
  if (!v28 || *v28)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, v28);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v30);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  free(v28);
  if (v27)
    operator delete(v27);
}

void sub_191166DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  void *v23;
  void *v24;
  void *v25;
  int v26;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0)
      {
        operator delete(a16);
        if (!v24)
        {
LABEL_8:
          if (!v23)
            goto LABEL_9;
          goto LABEL_12;
        }
      }
      else if (!v24)
      {
        goto LABEL_8;
      }
      free(v24);
      if (!v23)
LABEL_9:
        _Unwind_Resume(a1);
LABEL_12:
      operator delete(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void Espresso::AOT::MILCompilerForMLC::Run(uint64_t a1, uint64_t a2)
{
  const char *v2;
  void **v3;
  void **v4;
  void *v5;
  void *__p;
  void **v7;

  Espresso::AOT::MILCompilerForMLC::AssembleArguments(a1, a2, (char **)&__p);
  v3 = (void **)__p;
  if (__p)
  {
    v4 = v7;
    v5 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = __p;
    }
    v7 = v3;
    operator delete(v5);
  }
}

void sub_191166EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

std::string *Espresso::AOT::MILCompilerForMLC::SetTargetOS(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 416), a2);
}

std::string *Espresso::AOT::MILCompilerForMLC::SetTargetArch(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 392), a2);
}

std::string *Espresso::AOT::MILCompilerForMLC::GetOutputPaths@<X0>(Espresso::AOT::MILCompilerForMLC *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  char *v6;
  __int128 v7;
  std::string *result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (!*((_BYTE *)this + 296))
  {
    v6 = (char *)this + 520;
LABEL_7:
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)v6);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v4 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)this + 336);
  v5 = v4;
  *(_QWORD *)(a2 + 8) = v4;
  if (!*((_BYTE *)this + 328))
    std::__throw_bad_optional_access[abi:ne180100]();
  v6 = (char *)this + 304;
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
    goto LABEL_7;
  if (*((char *)this + 327) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 38), *((_QWORD *)this + 39));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
  }
  result = v5 + 1;
  *(_QWORD *)(a2 + 8) = v5 + 1;
  *(_QWORD *)(a2 + 8) = v5 + 1;
  return result;
}

void sub_191166FAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  std::vector<std::string>::~vector[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void sub_191166FC4(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MLCNanoAOTCompilerBackendFactory::~MLCNanoAOTCompilerBackendFactory(Espresso::AOT::MLCNanoAOTCompilerBackendFactory *this)
{
  Espresso::AOT::AOTCompilerBackendFactory::~AOTCompilerBackendFactory(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::AOT::MLCNanoAOTCompilerBackendFactory::MLCNanoAOTCompilerBackendFactory(Espresso::AOT::MLCNanoAOTCompilerBackendFactory *this)
{
  _QWORD *result;

  result = Espresso::AOT::AOTCompilerBackendFactory::AOTCompilerBackendFactory(this);
  *result = &off_1E2DA09A8;
  return result;
}

{
  _QWORD *result;

  result = Espresso::AOT::AOTCompilerBackendFactory::AOTCompilerBackendFactory(this);
  *result = &off_1E2DA09A8;
  return result;
}

void Espresso::AOT::MLCNanoAOTCompilerBackendFactory::Instantiate(__int128 *a1@<X1>, uint64_t a2@<X2>, void **a3@<X8>)
{
  _BYTE v6[24];
  int v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  char v12;

  v11 = 3;
  LODWORD(v10[0]) = 7696483;
  v9 = 4;
  strcpy((char *)__p, "nano");
  v6[0] = 1;
  v7 = 0;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)a1, (__int128 *)v10, (__int128 *)__p, (uint64_t)v6);
  if (v7 != -1)
    ((void (*)(char *, _BYTE *))off_1E2DD1748[v7])(&v12, v6);
  v7 = -1;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_7:
    operator delete(v10[0]);
    goto LABEL_5;
  }
  if (v11 < 0)
    goto LABEL_7;
LABEL_5:
  std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>(a1, a2, (uint64_t *)v10);
  *a3 = v10[0];
}

void sub_19116713C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::variant<BOOL,int,float,std::string>::~variant[abi:ne180100]((uint64_t)&a10);
  if (a19 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  unint64_t v11;
  void **v12;
  void *v13;
  void **v14;
  void *__p[2];
  void *v16[2];
  int v17;
  _BYTE v18[136];

  v6 = operator new();
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((uint64_t)v18, a1);
  v7 = *(void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v9 = *(_QWORD **)(a2 + 16);
  __p[0] = v7;
  __p[1] = (void *)v8;
  v10 = *(void **)(a2 + 24);
  v16[0] = v9;
  v16[1] = v10;
  v17 = *(_DWORD *)(a2 + 32);
  if (v10)
  {
    v11 = v9[1];
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v11 >= v8)
        v11 %= v8;
    }
    else
    {
      v11 &= v8 - 1;
    }
    *((_QWORD *)v7 + v11) = v16;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  Espresso::AOT::MILCompilerForMLC::MILCompilerForMLC(v6, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  *a3 = v6;
  v12 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v12;
      if (*((char *)v12 + 63) < 0)
      {
        operator delete(v12[5]);
        if (*((char *)v12 + 39) < 0)
LABEL_16:
          operator delete(v12[2]);
      }
      else if (*((char *)v12 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v12);
      v12 = v14;
    }
    while (v14);
  }
  v13 = __p[0];
  __p[0] = 0;
  if (v13)
    operator delete(v13);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
}

