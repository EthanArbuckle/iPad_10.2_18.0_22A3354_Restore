void sub_1912188F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::~$_0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = a1 + 27;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 32));
  v3 = (_QWORD *)a1[30];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 23));
  v5 = (_QWORD *)a1[21];
  if (v5 == a1 + 18)
  {
    v6 = 4;
    v5 = a1 + 18;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 14));
  v7 = (_QWORD *)a1[12];
  if (v7 == a1 + 9)
  {
    v8 = 4;
    v7 = a1 + 9;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 5));
  v9 = (_QWORD *)a1[3];
  if (v9 == a1)
  {
    v10 = 4;
    v9 = a1;
    goto LABEL_20;
  }
  if (v9)
  {
    v10 = 5;
LABEL_20:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

_QWORD *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::FOREACH *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *result;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE *v34;
  __int16 v35;
  _QWORD v36[2];
  unint64_t *v37;
  unsigned __int8 v38;
  _BYTE v39[24];
  _BYTE *v40;
  __int16 v41;
  _QWORD v42[2];
  unint64_t *v43;
  unsigned __int8 v44;
  uint64_t v45;
  _QWORD v46[3];
  _QWORD *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unsigned __int8 v52;
  _QWORD v53[3];
  _QWORD *v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unsigned __int8 v59;
  _QWORD v60[3];
  _QWORD *v61;
  __int16 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  _QWORD v66[3];
  _QWORD *v67;
  __int16 v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v53, (char *)a2 + 8, this);
  nitro::impl::nitro_lazy_eval::exec_function_body(v46, this, (char *)a2 + 24);
  v6 = *((_QWORD *)a2 + 2);
  v7 = (uint64_t)v54;
  if (!v54)
    goto LABEL_4;
  if (v54 != v53)
  {
    v7 = (*(uint64_t (**)(void))(*v54 + 16))();
LABEL_4:
    v34 = (_BYTE *)v7;
    goto LABEL_6;
  }
  v34 = v33;
  (*(void (**)(_QWORD *, _BYTE *))(v53[0] + 24))(v53, v33);
LABEL_6:
  v35 = v55;
  v36[0] = v56;
  v36[1] = v57;
  if (v57)
  {
    v8 = (unint64_t *)(v57 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v37 = v58;
  v38 = v59;
  if (v59 - 2 < 4 || v59 == 9)
  {
    v11 = v37;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = v39;
  v14 = (uint64_t)v47;
  if (!v47)
    goto LABEL_19;
  if (v47 != v46)
  {
    v14 = (*(uint64_t (**)(void))(*v47 + 16))();
LABEL_19:
    v40 = (_BYTE *)v14;
    goto LABEL_21;
  }
  v40 = v39;
  (*(void (**)(_QWORD *, _BYTE *))(v46[0] + 24))(v46, v39);
LABEL_21:
  v41 = v48;
  v42[0] = v49;
  v42[1] = v50;
  if (v50)
  {
    v15 = (unint64_t *)(v50 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v43 = v51;
  v44 = v52;
  if (v52 - 2 < 4 || v52 == 9)
  {
    v18 = v43;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  v45 = v6;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::$_0((uint64_t)v60, (uint64_t)v33);
  *(_QWORD *)(a3 + 24) = 0;
  v20 = operator new(0xA0uLL);
  v21 = v20;
  *v20 = &off_1E2DAFF00;
  if (v61)
  {
    if (v61 == v60)
    {
      v20[4] = v20 + 1;
      (*(void (**)(_QWORD *))(v60[0] + 24))(v60);
    }
    else
    {
      v20[4] = v61;
      v61 = 0;
    }
  }
  else
  {
    v20[4] = 0;
  }
  *((_WORD *)v21 + 20) = v62;
  *((_OWORD *)v21 + 3) = v63;
  v63 = 0uLL;
  v21[8] = v64;
  *((_BYTE *)v21 + 72) = v65;
  v65 = 0;
  if (v67)
  {
    if (v67 == v66)
    {
      v21[13] = v21 + 10;
      (*(void (**)(void))(v66[0] + 24))();
    }
    else
    {
      v21[13] = v67;
      v67 = 0;
    }
  }
  else
  {
    v21[13] = 0;
  }
  *((_WORD *)v21 + 56) = v68;
  *(_OWORD *)(v21 + 15) = v69;
  v69 = 0uLL;
  v21[17] = v70;
  *((_BYTE *)v21 + 144) = v71;
  v71 = 0;
  v21[19] = v72;
  *(_QWORD *)(a3 + 24) = v21;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v69);
  v22 = v67;
  if (v67 == v66)
  {
    v23 = 4;
    v22 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_46;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_46:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v63);
  v24 = v61;
  if (v61 == v60)
  {
    v25 = 4;
    v24 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_51;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_51:
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v42);
  if (v40 == v39)
  {
    v26 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_56;
    v26 = 5;
    v13 = v40;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v26))(v13);
LABEL_56:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v36);
  v27 = v34;
  if (v34 == v33)
  {
    v28 = 4;
    v27 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_61;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_61:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v49);
  v29 = v47;
  if (v47 == v46)
  {
    v30 = 4;
    v29 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_66;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_66:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v56);
  result = v54;
  if (v54 == v53)
  {
    v32 = 4;
    result = v53;
  }
  else
  {
    if (!v54)
      return result;
    v32 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v32))();
}

void sub_191218F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::IF *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *result;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE *v45;
  __int16 v46;
  _QWORD v47[2];
  unint64_t *v48;
  unsigned __int8 v49;
  _BYTE v50[24];
  _BYTE *v51;
  __int16 v52;
  _QWORD v53[2];
  unint64_t *v54;
  unsigned __int8 v55;
  _BYTE v56[24];
  _BYTE *v57;
  __int16 v58;
  _QWORD v59[2];
  unint64_t *v60;
  unsigned __int8 v61;
  _QWORD v62[3];
  _QWORD *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unsigned __int8 v68;
  _QWORD v69[3];
  _QWORD *v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unsigned __int8 v75;
  _QWORD v76[3];
  _QWORD *v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unsigned __int8 v82;
  _QWORD v83[3];
  _QWORD *v84;
  __int16 v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  _QWORD v89[3];
  _QWORD *v90;
  __int16 v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  _QWORD v95[3];
  _QWORD *v96;
  __int16 v97;
  __int128 v98;
  uint64_t v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v76, (char *)a2 + 8, this);
  nitro::impl::nitro_lazy_eval::exec_function_body(v69, this, (char *)a2 + 16);
  nitro::impl::nitro_lazy_eval::exec_function_body(v62, this, (char *)a2 + 40);
  v6 = (uint64_t)v77;
  if (!v77)
    goto LABEL_4;
  if (v77 != v76)
  {
    v6 = (*(uint64_t (**)(void))(*v77 + 16))();
LABEL_4:
    v45 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v45 = v44;
  (*(void (**)(_QWORD *, _BYTE *))(v76[0] + 24))(v76, v44);
LABEL_6:
  v46 = v78;
  v47[0] = v79;
  v47[1] = v80;
  if (v80)
  {
    v7 = (unint64_t *)(v80 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v48 = v81;
  v49 = v82;
  if (v82 - 2 < 4 || v82 == 9)
  {
    v10 = v48;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = v50;
  v13 = (uint64_t)v70;
  if (!v70)
    goto LABEL_19;
  if (v70 != v69)
  {
    v13 = (*(uint64_t (**)(void))(*v70 + 16))();
LABEL_19:
    v51 = (_BYTE *)v13;
    goto LABEL_21;
  }
  v51 = v50;
  (*(void (**)(_QWORD *, _BYTE *))(v69[0] + 24))(v69, v50);
LABEL_21:
  v52 = v71;
  v53[0] = v72;
  v53[1] = v73;
  if (v73)
  {
    v14 = (unint64_t *)(v73 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v54 = v74;
  v55 = v75;
  if (v75 - 2 < 4 || v75 == 9)
  {
    v17 = v54;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = v56;
  v20 = (uint64_t)v63;
  if (!v63)
    goto LABEL_34;
  if (v63 != v62)
  {
    v20 = (*(uint64_t (**)(void))(*v63 + 16))();
LABEL_34:
    v57 = (_BYTE *)v20;
    goto LABEL_36;
  }
  v57 = v56;
  (*(void (**)(_QWORD *, _BYTE *))(v62[0] + 24))(v62, v56);
LABEL_36:
  v58 = v64;
  v59[0] = v65;
  v59[1] = v66;
  if (v66)
  {
    v21 = (unint64_t *)(v66 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v60 = v67;
  v61 = v68;
  if (v68 - 2 < 4 || v68 == 9)
  {
    v24 = v60;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::$_0((uint64_t)v83, (uint64_t)v44);
  *(_QWORD *)(a3 + 24) = 0;
  v26 = operator new(0xE0uLL);
  v27 = v26;
  *v26 = &off_1E2DAF980;
  if (v84)
  {
    if (v84 == v83)
    {
      v26[4] = v26 + 1;
      (*(void (**)(_QWORD *))(v83[0] + 24))(v83);
    }
    else
    {
      v26[4] = v84;
      v84 = 0;
    }
  }
  else
  {
    v26[4] = 0;
  }
  *((_WORD *)v27 + 20) = v85;
  *((_OWORD *)v27 + 3) = v86;
  v86 = 0uLL;
  v27[8] = v87;
  *((_BYTE *)v27 + 72) = v88;
  v88 = 0;
  if (v90)
  {
    if (v90 == v89)
    {
      v27[13] = v27 + 10;
      (*(void (**)(void))(v89[0] + 24))();
    }
    else
    {
      v27[13] = v90;
      v90 = 0;
    }
  }
  else
  {
    v27[13] = 0;
  }
  *((_WORD *)v27 + 56) = v91;
  *(_OWORD *)(v27 + 15) = v92;
  v92 = 0uLL;
  v27[17] = v93;
  *((_BYTE *)v27 + 144) = v94;
  v94 = 0;
  if (v96)
  {
    if (v96 == v95)
    {
      v27[22] = v27 + 19;
      (*(void (**)(void))(v95[0] + 24))();
    }
    else
    {
      v27[22] = v96;
      v96 = 0;
    }
  }
  else
  {
    v27[22] = 0;
  }
  *((_WORD *)v27 + 92) = v97;
  *((_OWORD *)v27 + 12) = v98;
  v98 = 0uLL;
  v27[26] = v99;
  *((_BYTE *)v27 + 216) = v100;
  v100 = 0;
  *(_QWORD *)(a3 + 24) = v27;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v98);
  v28 = v96;
  if (v96 == v95)
  {
    v29 = 4;
    v28 = v95;
  }
  else
  {
    if (!v96)
      goto LABEL_66;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_66:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v92);
  v30 = v90;
  if (v90 == v89)
  {
    v31 = 4;
    v30 = v89;
  }
  else
  {
    if (!v90)
      goto LABEL_71;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_71:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v86);
  v32 = v84;
  if (v84 == v83)
  {
    v33 = 4;
    v32 = v83;
  }
  else
  {
    if (!v84)
      goto LABEL_76;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_76:
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v59);
  if (v57 == v56)
  {
    v34 = 4;
  }
  else
  {
    if (!v57)
      goto LABEL_81;
    v34 = 5;
    v19 = v57;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v34))(v19);
LABEL_81:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v53);
  if (v51 == v50)
  {
    v35 = 4;
  }
  else
  {
    if (!v51)
      goto LABEL_86;
    v35 = 5;
    v12 = v51;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v35))(v12);
LABEL_86:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v47);
  v36 = v45;
  if (v45 == v44)
  {
    v37 = 4;
    v36 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_91;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_91:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v65);
  v38 = v63;
  if (v63 == v62)
  {
    v39 = 4;
    v38 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_96;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_96:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v72);
  v40 = v70;
  if (v70 == v69)
  {
    v41 = 4;
    v40 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_101;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_101:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v79);
  result = v77;
  if (v77 == v76)
  {
    v43 = 4;
    result = v76;
  }
  else
  {
    if (!v77)
      return result;
    v43 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v43))();
}

void sub_1912196AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::~$_0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 18;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 23));
  v3 = (_QWORD *)a1[21];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 14));
  v5 = (_QWORD *)a1[12];
  if (v5 == a1 + 9)
  {
    v6 = 4;
    v5 = a1 + 9;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 5));
  v7 = (_QWORD *)a1[3];
  if (v7 == a1)
  {
    v8 = 4;
    v7 = a1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

_QWORD *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::INDEXGET *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  _BYTE v32[24];
  _BYTE *v33;
  __int16 v34;
  _QWORD v35[2];
  unint64_t *v36;
  unsigned __int8 v37;
  _BYTE v38[24];
  _BYTE *v39;
  __int16 v40;
  _QWORD v41[2];
  unint64_t *v42;
  unsigned __int8 v43;
  _QWORD v44[3];
  _QWORD *v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unsigned __int8 v50;
  _QWORD v51[3];
  _QWORD *v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unsigned __int8 v57;
  _QWORD v58[3];
  _QWORD *v59;
  __int16 v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  _QWORD v64[3];
  _QWORD *v65;
  __int16 v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v51, (char *)a2 + 8, this);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v44, (char *)a2 + 16, this);
  v6 = (uint64_t)v52;
  if (!v52)
    goto LABEL_4;
  if (v52 != v51)
  {
    v6 = (*(uint64_t (**)(void))(*v52 + 16))();
LABEL_4:
    v33 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v33 = v32;
  (*(void (**)(_QWORD *, _BYTE *))(v51[0] + 24))(v51, v32);
LABEL_6:
  v34 = v53;
  v35[0] = v54;
  v35[1] = v55;
  if (v55)
  {
    v7 = (unint64_t *)(v55 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v36 = v56;
  v37 = v57;
  if (v57 - 2 < 4 || v57 == 9)
  {
    v10 = v36;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = v38;
  v13 = (uint64_t)v45;
  if (!v45)
    goto LABEL_19;
  if (v45 != v44)
  {
    v13 = (*(uint64_t (**)(void))(*v45 + 16))();
LABEL_19:
    v39 = (_BYTE *)v13;
    goto LABEL_21;
  }
  v39 = v38;
  (*(void (**)(_QWORD *, _BYTE *))(v44[0] + 24))(v44, v38);
LABEL_21:
  v40 = v46;
  v41[0] = v47;
  v41[1] = v48;
  if (v48)
  {
    v14 = (unint64_t *)(v48 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v42 = v49;
  v43 = v50;
  if (v50 - 2 < 4 || v50 == 9)
  {
    v17 = v42;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::$_0((uint64_t)v58, (uint64_t)v32);
  *(_QWORD *)(a3 + 24) = 0;
  v19 = operator new(0x98uLL);
  v20 = v19;
  *v19 = &off_1E2DAFFB0;
  if (v59)
  {
    if (v59 == v58)
    {
      v19[4] = v19 + 1;
      (*(void (**)(_QWORD *))(v58[0] + 24))(v58);
    }
    else
    {
      v19[4] = v59;
      v59 = 0;
    }
  }
  else
  {
    v19[4] = 0;
  }
  *((_WORD *)v20 + 20) = v60;
  *((_OWORD *)v20 + 3) = v61;
  v61 = 0uLL;
  v20[8] = v62;
  *((_BYTE *)v20 + 72) = v63;
  v63 = 0;
  if (v65)
  {
    if (v65 == v64)
    {
      v20[13] = v20 + 10;
      (*(void (**)(void))(v64[0] + 24))();
    }
    else
    {
      v20[13] = v65;
      v65 = 0;
    }
  }
  else
  {
    v20[13] = 0;
  }
  *((_WORD *)v20 + 56) = v66;
  *(_OWORD *)(v20 + 15) = v67;
  v67 = 0uLL;
  v20[17] = v68;
  *((_BYTE *)v20 + 144) = v69;
  v69 = 0;
  *(_QWORD *)(a3 + 24) = v20;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v67);
  v21 = v65;
  if (v65 == v64)
  {
    v22 = 4;
    v21 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_46;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_46:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v61);
  v23 = v59;
  if (v59 == v58)
  {
    v24 = 4;
    v23 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_51;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_51:
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v41);
  if (v39 == v38)
  {
    v25 = 4;
  }
  else
  {
    if (!v39)
      goto LABEL_56;
    v25 = 5;
    v12 = v39;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v25))(v12);
LABEL_56:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v35);
  v26 = v33;
  if (v33 == v32)
  {
    v27 = 4;
    v26 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_61;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_61:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v47);
  v28 = v45;
  if (v45 == v44)
  {
    v29 = 4;
    v28 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_66;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_66:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v54);
  result = v52;
  if (v52 == v51)
  {
    v31 = 4;
    result = v51;
  }
  else
  {
    if (!v52)
      return result;
    v31 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
}

void sub_191219CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::MEMBER **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *result;
  uint64_t v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  __int16 v43;
  _QWORD v44[2];
  unint64_t *v45;
  unsigned __int8 v46;
  _BYTE v47[24];
  _BYTE *v48;
  __int16 v49;
  _QWORD v50[2];
  unint64_t *v51;
  unsigned __int8 v52;
  _QWORD v53[3];
  _QWORD *v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unsigned __int8 v59;
  _QWORD v60[3];
  _QWORD *v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unsigned __int8 v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;
  _QWORD v71[3];
  _QWORD *v72;
  __int16 v73;
  __int128 v74;
  uint64_t v75;
  char v76;
  _QWORD v77[3];
  _QWORD *v78;
  __int16 v79;
  __int128 v80;
  uint64_t v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_reference_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(a2 + 1, this, v67);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v60, a2 + 2, this);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v53, a2 + 3, this);
  v6 = (uint64_t)v68;
  if (!v68)
    goto LABEL_4;
  if (v68 != v67)
  {
    v6 = (*(uint64_t (**)(void))(*v68 + 16))();
LABEL_4:
    v40 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v40 = v39;
  (*(void (**)(_QWORD *, _BYTE *))(v67[0] + 24))(v67, v39);
LABEL_6:
  v7 = v41;
  v8 = (uint64_t)v61;
  if (!v61)
  {
LABEL_9:
    v42 = (_BYTE *)v8;
    goto LABEL_11;
  }
  if (v61 != v60)
  {
    v8 = (*(uint64_t (**)(void))(*v61 + 16))();
    goto LABEL_9;
  }
  v42 = v41;
  (*(void (**)(_QWORD *, _BYTE *))(v60[0] + 24))(v60, v41);
LABEL_11:
  v43 = v62;
  v44[0] = v63;
  v44[1] = v64;
  if (v64)
  {
    v9 = (unint64_t *)(v64 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v45 = v65;
  v46 = v66;
  if (v66 - 2 < 4 || v66 == 9)
  {
    v12 = v45;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = v47;
  v15 = (uint64_t)v54;
  if (!v54)
    goto LABEL_24;
  if (v54 != v53)
  {
    v15 = (*(uint64_t (**)(void))(*v54 + 16))();
LABEL_24:
    v48 = (_BYTE *)v15;
    goto LABEL_26;
  }
  v48 = v47;
  (*(void (**)(_QWORD *, _BYTE *))(v53[0] + 24))(v53, v47);
LABEL_26:
  v49 = v55;
  v50[0] = v56;
  v50[1] = v57;
  if (v57)
  {
    v16 = (unint64_t *)(v57 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v51 = v58;
  v52 = v59;
  if (v59 - 2 < 4 || v59 == 9)
  {
    v19 = v51;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::$_0((uint64_t)v69, (uint64_t)v39);
  *(_QWORD *)(a3 + 24) = 0;
  v21 = operator new(0xB8uLL);
  v22 = v21;
  *v21 = &off_1E2DB0008;
  if (v70)
  {
    if (v70 == v69)
    {
      v21[4] = v21 + 1;
      (*(void (**)(_QWORD *))(v69[0] + 24))(v69);
    }
    else
    {
      v21[4] = v70;
      v70 = 0;
    }
  }
  else
  {
    v21[4] = 0;
  }
  if (v72)
  {
    if (v72 == v71)
    {
      v22[8] = v22 + 5;
      (*(void (**)(void))(v71[0] + 24))();
    }
    else
    {
      v22[8] = v72;
      v72 = 0;
    }
  }
  else
  {
    v22[8] = 0;
  }
  *((_WORD *)v22 + 36) = v73;
  *((_OWORD *)v22 + 5) = v74;
  v74 = 0uLL;
  v22[12] = v75;
  *((_BYTE *)v22 + 104) = v76;
  v76 = 0;
  if (v78)
  {
    if (v78 == v77)
    {
      v22[17] = v22 + 14;
      (*(void (**)(void))(v77[0] + 24))();
    }
    else
    {
      v22[17] = v78;
      v78 = 0;
    }
  }
  else
  {
    v22[17] = 0;
  }
  *((_WORD *)v22 + 72) = v79;
  *(_OWORD *)(v22 + 19) = v80;
  v80 = 0uLL;
  v22[21] = v81;
  *((_BYTE *)v22 + 176) = v82;
  v82 = 0;
  *(_QWORD *)(a3 + 24) = v22;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v80);
  v23 = v78;
  if (v78 == v77)
  {
    v24 = 4;
    v23 = v77;
  }
  else
  {
    if (!v78)
      goto LABEL_56;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_56:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v74);
  v25 = v72;
  if (v72 == v71)
  {
    v26 = 4;
    v25 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_61;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_61:
  v27 = v70;
  if (v70 == v69)
  {
    v28 = 4;
    v27 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_66;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_66:
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v50);
  if (v48 == v47)
  {
    v29 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_71;
    v29 = 5;
    v14 = v48;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v29))(v14);
LABEL_71:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v44);
  if (v42 == v41)
  {
    v30 = 4;
  }
  else
  {
    if (!v42)
      goto LABEL_76;
    v30 = 5;
    v7 = v42;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v30))(v7);
LABEL_76:
  v31 = v40;
  if (v40 == v39)
  {
    v32 = 4;
    v31 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_81;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_81:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v56);
  v33 = v54;
  if (v54 == v53)
  {
    v34 = 4;
    v33 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_86;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_86:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v63);
  v35 = v61;
  if (v61 == v60)
  {
    v36 = 4;
    v35 = v60;
  }
  else
  {
    if (!v61)
      goto LABEL_91;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_91:
  result = v68;
  if (v68 == v67)
  {
    v38 = 4;
    result = v67;
  }
  else
  {
    if (!v68)
      return result;
    v38 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v38))();
}

{
  char *v6;
  _QWORD *v8;
  _BOOL4 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *result;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  _QWORD *v61;
  _QWORD v62[3];
  _QWORD *v63;
  __int16 v64;
  __int128 v65;
  unint64_t *v66;
  unsigned __int8 v67;
  _QWORD v68[3];
  _QWORD *v69;
  _QWORD v70[3];
  _QWORD *v71;
  __int16 v72;
  __int128 v73;
  unint64_t *v74;
  unsigned __int8 v75;
  _QWORD v76[3];
  _QWORD *v77;
  __int16 v78;
  __int128 v79;
  unint64_t *v80;
  unsigned __int8 v81;
  _QWORD v82[3];
  _QWORD *v83;
  void *v84[2];
  char v85;
  void **v86;
  _QWORD v87[3];
  _QWORD *v88;
  __int16 v89;
  __int128 v90;
  unint64_t *v91;
  unsigned __int8 v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v6 = (char *)(a2 + 1);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_reference_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(a2 + 1, this, v82);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v76, a2 + 2, this);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)v6 + 16))(v84);
  if ((v85 & 0x80000000) == 0)
  {
    if (v85 != 6)
      goto LABEL_7;
    if (LODWORD(v84[0]) != 1112360269 || WORD2(v84[0]) != 21061)
      goto LABEL_7;
LABEL_19:
    v11 = (uint64_t)v83;
    if (v83)
    {
      if (v83 == v82)
      {
        v69 = v68;
        (*(void (**)(_QWORD *, _QWORD *))(v82[0] + 24))(v82, v68);
LABEL_102:
        v39 = v70;
        v40 = (uint64_t)v77;
        if (v77)
        {
          if (v77 == v76)
          {
            v71 = v70;
            (*(void (**)(_QWORD *, _QWORD *))(v76[0] + 24))(v76, v70);
LABEL_107:
            v72 = v78;
            v73 = v79;
            if (*((_QWORD *)&v79 + 1))
            {
              v41 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
            v74 = v80;
            v75 = v81;
            if (v81 - 2 < 4 || v81 == 9)
            {
              v44 = v74;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 + 1, v44));
            }
            v46 = (uint64_t)v69;
            if (v69)
            {
              if (v69 == v68)
              {
                v86 = v84;
                (*(void (**)(_QWORD *, void **))(v68[0] + 24))(v68, v84);
LABEL_122:
                v47 = v87;
                v48 = (uint64_t)v71;
                if (v71)
                {
                  if (v71 == v70)
                  {
                    v88 = v87;
                    (*(void (**)(_QWORD *, _QWORD *))(v70[0] + 24))(v70, v87);
LABEL_127:
                    v89 = v72;
                    v90 = v73;
                    if (*((_QWORD *)&v73 + 1))
                    {
                      v49 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
                      do
                        v50 = __ldxr(v49);
                      while (__stxr(v50 + 1, v49));
                    }
                    v51 = v74;
                    v91 = v74;
                    v92 = v75;
                    if (v75 - 2 < 4 || v75 == 9)
                    {
                      do
                        v53 = __ldaxr(v51);
                      while (__stlxr(v53 + 1, v51));
                    }
                    *(_QWORD *)(a3 + 24) = 0;
                    v54 = operator new(0x70uLL);
                    v55 = v54;
                    *v54 = &off_1E2DAFCF0;
                    if (v86)
                    {
                      if (v86 == v84)
                      {
                        v54[4] = v54 + 1;
                        (*((void (**)(void **))v84[0] + 3))(v84);
                      }
                      else
                      {
                        v54[4] = v86;
                        v86 = 0;
                      }
                    }
                    else
                    {
                      v54[4] = 0;
                    }
                    if (v88)
                    {
                      if (v88 == v87)
                      {
                        v55[8] = v55 + 5;
                        (*(void (**)(_QWORD *))(v87[0] + 24))(v87);
                      }
                      else
                      {
                        v55[8] = v88;
                        v88 = 0;
                      }
                    }
                    else
                    {
                      v55[8] = 0;
                    }
                    *((_WORD *)v55 + 36) = v89;
                    *((_OWORD *)v55 + 5) = v90;
                    v90 = 0uLL;
                    v55[12] = v91;
                    *((_BYTE *)v55 + 104) = v92;
                    v92 = 0;
                    *(_QWORD *)(a3 + 24) = v55;
                    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v90);
                    if (v88 == v87)
                    {
                      v56 = 4;
                    }
                    else
                    {
                      if (!v88)
                        goto LABEL_151;
                      v56 = 5;
                      v47 = v88;
                    }
                    (*(void (**)(_QWORD *))(*v47 + 8 * v56))(v47);
LABEL_151:
                    v57 = v86;
                    if (v86 == v84)
                    {
                      v58 = 4;
                      v57 = v84;
                    }
                    else
                    {
                      if (!v86)
                        goto LABEL_156;
                      v58 = 5;
                    }
                    (*((void (**)(void))*v57 + v58))();
LABEL_156:
                    *(_WORD *)(a3 + 32) = 0;
                    *(_QWORD *)(a3 + 48) = 0;
                    *(_QWORD *)(a3 + 56) = 0;
                    *(_QWORD *)(a3 + 40) = 0;
                    *(_BYTE *)(a3 + 64) = 0;
                    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v73);
                    if (v71 == v70)
                    {
                      v59 = 4;
                    }
                    else
                    {
                      if (!v71)
                        goto LABEL_161;
                      v59 = 5;
                      v39 = v71;
                    }
                    (*(void (**)(_QWORD *))(*v39 + 8 * v59))(v39);
LABEL_161:
                    v33 = v69;
                    if (v69 == v68)
                    {
                      v34 = 4;
                      v33 = v68;
                      goto LABEL_87;
                    }
                    goto LABEL_84;
                  }
                  v48 = (*(uint64_t (**)(void))(*v71 + 16))();
                }
                v88 = (_QWORD *)v48;
                goto LABEL_127;
              }
              v46 = (*(uint64_t (**)(void))(*v69 + 16))();
            }
            v86 = (void **)v46;
            goto LABEL_122;
          }
          v40 = (*(uint64_t (**)(void))(*v77 + 16))();
        }
        v71 = (_QWORD *)v40;
        goto LABEL_107;
      }
      v11 = (*(uint64_t (**)(_QWORD *))(*v83 + 16))(v83);
    }
    v69 = (_QWORD *)v11;
    goto LABEL_102;
  }
  if (v84[1] != (void *)6)
  {
    operator delete(v84[0]);
    v8 = v83;
    if (!v83)
      goto LABEL_10;
    goto LABEL_8;
  }
  v10 = *(_DWORD *)v84[0] != 1112360269 || *((_WORD *)v84[0] + 2) != 21061;
  operator delete(v84[0]);
  if (!v10)
    goto LABEL_19;
LABEL_7:
  v8 = v83;
  if (!v83)
  {
LABEL_10:
    v61 = v8;
    goto LABEL_24;
  }
LABEL_8:
  if (v8 != v82)
  {
    v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    goto LABEL_10;
  }
  v61 = v60;
  (*(void (**)(_QWORD *, _QWORD *))(v82[0] + 24))(v82, v60);
LABEL_24:
  v12 = v62;
  v13 = (uint64_t)v77;
  if (!v77)
  {
LABEL_27:
    v63 = (_QWORD *)v13;
    goto LABEL_29;
  }
  if (v77 != v76)
  {
    v13 = (*(uint64_t (**)(void))(*v77 + 16))();
    goto LABEL_27;
  }
  v63 = v62;
  (*(void (**)(_QWORD *, _QWORD *))(v76[0] + 24))(v76, v62);
LABEL_29:
  v64 = v78;
  v65 = v79;
  if (*((_QWORD *)&v79 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v66 = v80;
  v67 = v81;
  if (v81 - 2 < 4 || v81 == 9)
  {
    v17 = v66;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = (uint64_t)v61;
  if (!v61)
    goto LABEL_42;
  if (v61 != v60)
  {
    v19 = (*(uint64_t (**)(void))(*v61 + 16))();
LABEL_42:
    v86 = (void **)v19;
    goto LABEL_44;
  }
  v86 = v84;
  (*(void (**)(_QWORD *, void **))(v60[0] + 24))(v60, v84);
LABEL_44:
  v20 = v87;
  v21 = (uint64_t)v63;
  if (!v63)
  {
LABEL_47:
    v88 = (_QWORD *)v21;
    goto LABEL_49;
  }
  if (v63 != v62)
  {
    v21 = (*(uint64_t (**)(void))(*v63 + 16))();
    goto LABEL_47;
  }
  v88 = v87;
  (*(void (**)(_QWORD *, _QWORD *))(v62[0] + 24))(v62, v87);
LABEL_49:
  v89 = v64;
  v90 = v65;
  if (*((_QWORD *)&v65 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = v66;
  v91 = v66;
  v92 = v67;
  if (v67 - 2 < 4 || v67 == 9)
  {
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 + 1, v24));
  }
  *(_QWORD *)(a3 + 24) = 0;
  v27 = operator new(0x70uLL);
  v28 = v27;
  *v27 = &off_1E2DAFD48;
  if (v86)
  {
    if (v86 == v84)
    {
      v27[4] = v27 + 1;
      (*((void (**)(void **))v84[0] + 3))(v84);
    }
    else
    {
      v27[4] = v86;
      v86 = 0;
    }
  }
  else
  {
    v27[4] = 0;
  }
  if (v88)
  {
    if (v88 == v87)
    {
      v28[8] = v28 + 5;
      (*(void (**)(_QWORD *))(v87[0] + 24))(v87);
    }
    else
    {
      v28[8] = v88;
      v88 = 0;
    }
  }
  else
  {
    v28[8] = 0;
  }
  *((_WORD *)v28 + 36) = v89;
  *((_OWORD *)v28 + 5) = v90;
  v90 = 0uLL;
  v28[12] = v91;
  *((_BYTE *)v28 + 104) = v92;
  v92 = 0;
  *(_QWORD *)(a3 + 24) = v28;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v90);
  if (v88 == v87)
  {
    v29 = 4;
  }
  else
  {
    if (!v88)
      goto LABEL_73;
    v29 = 5;
    v20 = v88;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v29))(v20);
LABEL_73:
  v30 = v86;
  if (v86 == v84)
  {
    v31 = 4;
    v30 = v84;
  }
  else
  {
    if (!v86)
      goto LABEL_78;
    v31 = 5;
  }
  (*((void (**)(void))*v30 + v31))();
LABEL_78:
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v65);
  if (v63 == v62)
  {
    v32 = 4;
  }
  else
  {
    if (!v63)
      goto LABEL_83;
    v32 = 5;
    v12 = v63;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v32))(v12);
LABEL_83:
  v33 = v61;
  if (v61 == v60)
  {
    v34 = 4;
    v33 = v60;
    goto LABEL_87;
  }
LABEL_84:
  if (!v33)
    goto LABEL_88;
  v34 = 5;
LABEL_87:
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_88:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v79);
  v35 = v77;
  if (v77 == v76)
  {
    v36 = 4;
    v35 = v76;
  }
  else
  {
    if (!v77)
      goto LABEL_93;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_93:
  result = v83;
  if (v83 == v82)
  {
    v38 = 4;
    result = v82;
  }
  else
  {
    if (!v83)
      return result;
    v38 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v38))();
}

void sub_19121A330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::~$_0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 13;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 18));
  v3 = (_QWORD *)a1[16];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 9));
  v5 = (_QWORD *)a1[7];
  if (v5 == a1 + 4)
  {
    v6 = 4;
    v5 = a1 + 4;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[3];
  if (v7 == a1)
  {
    v8 = 4;
    v7 = a1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_19121ADA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::~$_0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 9));
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void nitro::impl::nitro_lazy_eval::exec(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::DICT *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _BYTE *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  void *__p;
  char *v35;
  void *v36;
  _BYTE *v37;
  __int128 v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  _BYTE v42[24];
  _BYTE *v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD *v46;
  uint64_t v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[6];

  v50[4] = *MEMORY[0x1E0C80C00];
  std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::vector(&v36, (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 4);
  if (v37 != v36)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v48, *((_QWORD *)a2 + 1) + v6, this);
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v45, *((_QWORD *)a2 + 1) + v6 + 8, this);
      std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>::pair[abi:ne180100]<nitro::impl::delayed_variable&,nitro::impl::delayed_variable&,0>((uint64_t)&v38, (uint64_t)v48, (uint64_t)v45);
      std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>::operator=[abi:ne180100]((uint64_t)v36 + v5, (uint64_t)&v38);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v44);
      v10 = v43;
      if (v43 == v42)
      {
        v10 = v42;
        v11 = 4;
      }
      else
      {
        if (!v43)
          goto LABEL_11;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v41);
      v12 = v40;
      if (v40 == &v38)
      {
        v12 = &v38;
        v13 = 4;
      }
      else
      {
        if (!v40)
          goto LABEL_16;
        v13 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v12 + 8 * v13))();
LABEL_16:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v47);
      v14 = v46;
      if (v46 == v45)
      {
        v14 = v45;
        v15 = 4;
      }
      else
      {
        if (!v46)
          goto LABEL_21;
        v15 = 5;
      }
      (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_21:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v50);
      v8 = v49;
      if (v49 == v48)
      {
        v8 = v48;
        v9 = 4;
      }
      else
      {
        if (!v49)
          goto LABEL_5;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_5:
      ++v7;
      v6 += 16;
      v5 += 144;
    }
    while (v7 < 0x8E38E38E38E38E39 * ((v37 - (_BYTE *)v36) >> 4));
  }
  std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::vector(&__p, (uint64_t *)&v36);
  std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::vector(&v38, (uint64_t *)&__p);
  *(_QWORD *)(a3 + 24) = 0;
  v16 = (char *)operator new(0x20uLL);
  *(_QWORD *)v16 = &off_1E2DAFAE0;
  *(_OWORD *)(v16 + 8) = v38;
  *((_QWORD *)v16 + 3) = v39;
  *(_QWORD *)(a3 + 24) = v16;
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  v17 = (char *)__p;
  if (!__p)
    goto LABEL_40;
  v18 = __p;
  if (v35 == __p)
    goto LABEL_39;
  v19 = v35 - 72;
  do
  {
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v19 + 40));
    v22 = (char *)*((_QWORD *)v19 + 3);
    if (v19 == v22)
    {
      v22 = v19;
      v23 = 4;
    }
    else
    {
      if (!v22)
        goto LABEL_35;
      v23 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_35:
    v24 = v19 - 72;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v19 - 32));
    v20 = (char *)*((_QWORD *)v19 - 6);
    if (v19 - 72 == v20)
    {
      v20 = v19 - 72;
      v21 = 4;
LABEL_28:
      (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
      goto LABEL_29;
    }
    if (v20)
    {
      v21 = 5;
      goto LABEL_28;
    }
LABEL_29:
    v19 -= 144;
  }
  while (v24 != v17);
  v18 = __p;
LABEL_39:
  v35 = v17;
  operator delete(v18);
LABEL_40:
  v25 = v36;
  if (!v36)
    return;
  v26 = v36;
  if (v37 == v36)
    goto LABEL_55;
  v27 = v37 - 72;
  while (2)
  {
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v27 + 5));
    v30 = (_QWORD *)v27[3];
    if (v27 == v30)
    {
      v30 = v27;
      v31 = 4;
LABEL_50:
      (*(void (**)(void))(*v30 + 8 * v31))();
    }
    else if (v30)
    {
      v31 = 5;
      goto LABEL_50;
    }
    v32 = v27 - 9;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v27 - 4));
    v28 = (_QWORD *)*(v27 - 6);
    if (v27 - 9 == v28)
    {
      v28 = v27 - 9;
      v29 = 4;
      goto LABEL_44;
    }
    if (v28)
    {
      v29 = 5;
LABEL_44:
      (*(void (**)(void))(*v28 + 8 * v29))();
    }
    v27 -= 18;
    if (v32 != (_QWORD *)v25)
      continue;
    break;
  }
  v26 = v36;
LABEL_55:
  v37 = v25;
  operator delete(v26);
}

void sub_19121B3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    nitro::impl::nitro_lazy_eval::exec((uint64_t)&a17, a17);
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0::~$_0(&a11);
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0::~$_0(&a14);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x1C71C71C71C71C8)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(144 * a2);
    *a1 = v4;
    a1[2] = &v4[144 * a2];
    v5 = 144 * ((144 * a2 - 144) / 0x90) + 144;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19121B4E8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v5 = (_QWORD *)(a1 + 24);
  v4 = *(_QWORD **)(a1 + 24);
  *v5 = 0;
  if (v4 == (_QWORD *)a1)
  {
    v6 = 4;
    v4 = (_QWORD *)a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v6))();
LABEL_6:
  v7 = (_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  if (!v8)
  {
    v7 = v5;
    goto LABEL_10;
  }
  if (v8 != a2)
  {
    *v5 = v8;
LABEL_10:
    *v7 = 0;
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 24) = a1;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 24))(*v7, a1);
LABEL_12:
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  nitro::nitro_variable::operator=(a1 + 40, (__int128 *)(a2 + 40));
  v10 = (_QWORD *)(a1 + 96);
  v9 = *(_QWORD **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v9 == (_QWORD *)(a1 + 72))
  {
    v11 = 4;
    v9 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v9)
      goto LABEL_17;
    v11 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v11))();
LABEL_17:
  v12 = (_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 96);
  if (v13)
  {
    if (v13 == a2 + 72)
    {
      *v10 = a1 + 72;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v12 + 24))(*v12, a1 + 72);
      goto LABEL_23;
    }
    *v10 = v13;
  }
  else
  {
    v12 = (_QWORD *)(a1 + 96);
  }
  *v12 = 0;
LABEL_23:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  nitro::nitro_variable::operator=(a1 + 112, (__int128 *)(a2 + 112));
  return a1;
}

void **nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0::~$_0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;

  v2 = (char *)*a1;
  if (!*a1)
    return a1;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_16;
  v5 = v3 - 72;
  do
  {
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v5 + 40));
    v8 = (char *)*((_QWORD *)v5 + 3);
    if (v5 == v8)
    {
      v8 = v5;
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_12;
      v9 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_12:
    v10 = v5 - 72;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v5 - 32));
    v6 = (char *)*((_QWORD *)v5 - 6);
    if (v5 - 72 == v6)
    {
      v6 = v5 - 72;
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 -= 144;
  }
  while (v10 != v2);
  v4 = *a1;
LABEL_16:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

void nitro::impl::nitro_lazy_eval::exec(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::LIST *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  nitro::nitro_variable *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  nitro::nitro_variable *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  void *__p;
  char *v29;
  void *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  __int128 *v34;
  __int16 v35;
  uint64_t v36[5];
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  std::vector<nitro::impl::delayed_variable>::vector(&v30, (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  if (v31 != v30)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(&v32, *((_QWORD *)a2 + 1) + v6, this);
      v10 = (char *)v30;
      v11 = (uint64_t)v34;
      if (!v34)
        goto LABEL_9;
      if (v34 != &v32)
        break;
      v38 = v37;
      (*(void (**)(__int128 *, _QWORD *))(v32 + 24))(&v32, v37);
LABEL_11:
      std::__function::__value_func<nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::swap[abi:ne180100](v37, &v10[v5]);
      v12 = v38;
      if (v38 == v37)
      {
        v12 = v37;
        v13 = 4;
      }
      else
      {
        if (!v38)
          goto LABEL_16;
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_16:
      *(_WORD *)&v10[v5 + 32] = v35;
      nitro::nitro_variable::operator=((uint64_t)&v10[v5 + 40], v36);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v36);
      v8 = v34;
      if (v34 == &v32)
      {
        v8 = &v32;
        v9 = 4;
      }
      else
      {
        if (!v34)
          goto LABEL_5;
        v9 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_5:
      ++v7;
      v6 += 8;
      v5 += 72;
      if (v7 >= 0x8E38E38E38E38E39 * ((v31 - (_BYTE *)v30) >> 3))
        goto LABEL_19;
    }
    v11 = (*(uint64_t (**)(void))(*(_QWORD *)v34 + 16))();
LABEL_9:
    v38 = (_QWORD *)v11;
    goto LABEL_11;
  }
LABEL_19:
  std::vector<nitro::impl::delayed_variable>::vector(&__p, (uint64_t *)&v30);
  std::vector<nitro::impl::delayed_variable>::vector(&v32, (uint64_t *)&__p);
  *(_QWORD *)(a3 + 24) = 0;
  v14 = (char *)operator new(0x20uLL);
  *(_QWORD *)v14 = &off_1E2DAFB38;
  *(_OWORD *)(v14 + 8) = v32;
  *((_QWORD *)v14 + 3) = v33;
  *(_QWORD *)(a3 + 24) = v14;
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  v15 = (char *)__p;
  if (!__p)
    goto LABEL_30;
  v16 = __p;
  if (v29 == __p)
    goto LABEL_29;
  v17 = (nitro::nitro_variable *)(v29 - 32);
  do
  {
    v20 = (char *)v17 - 40;
    nitro::nitro_variable::~nitro_variable(v17);
    v18 = (_QWORD *)*((_QWORD *)v17 - 2);
    if ((_QWORD *)((char *)v17 - 40) == v18)
    {
      v18 = (_QWORD *)((char *)v17 - 40);
      v19 = 4;
LABEL_23:
      (*(void (**)(void))(*v18 + 8 * v19))();
      goto LABEL_24;
    }
    if (v18)
    {
      v19 = 5;
      goto LABEL_23;
    }
LABEL_24:
    v17 = (nitro::nitro_variable *)((char *)v17 - 72);
  }
  while (v20 != v15);
  v16 = __p;
LABEL_29:
  v29 = v15;
  operator delete(v16);
LABEL_30:
  v21 = (char *)v30;
  if (!v30)
    return;
  v22 = v30;
  if (v31 == v30)
    goto LABEL_40;
  v23 = (nitro::nitro_variable *)(v31 - 32);
  while (2)
  {
    v26 = (char *)v23 - 40;
    nitro::nitro_variable::~nitro_variable(v23);
    v24 = (_QWORD *)*((_QWORD *)v23 - 2);
    if ((_QWORD *)((char *)v23 - 40) == v24)
    {
      v24 = (_QWORD *)((char *)v23 - 40);
      v25 = 4;
      goto LABEL_34;
    }
    if (v24)
    {
      v25 = 5;
LABEL_34:
      (*(void (**)(void))(*v24 + 8 * v25))();
    }
    v23 = (nitro::nitro_variable *)((char *)v23 - 72);
    if (v26 != v21)
      continue;
    break;
  }
  v22 = v30;
LABEL_40:
  v31 = v21;
  operator delete(v22);
}

void sub_19121BA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    nitro::impl::nitro_lazy_eval::exec_function_body((uint64_t)&a17, a17);
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a11);
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a14);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::TUPLE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  nitro::nitro_variable *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  nitro::nitro_variable *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  void *__p;
  char *v29;
  void *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  __int128 *v34;
  __int16 v35;
  uint64_t v36[5];
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  std::vector<nitro::impl::delayed_variable>::vector(&v30, (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  if (v31 != v30)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(&v32, *((_QWORD *)a2 + 1) + v6, this);
      v10 = (char *)v30;
      v11 = (uint64_t)v34;
      if (!v34)
        goto LABEL_9;
      if (v34 != &v32)
        break;
      v38 = v37;
      (*(void (**)(__int128 *, _QWORD *))(v32 + 24))(&v32, v37);
LABEL_11:
      std::__function::__value_func<nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::swap[abi:ne180100](v37, &v10[v5]);
      v12 = v38;
      if (v38 == v37)
      {
        v12 = v37;
        v13 = 4;
      }
      else
      {
        if (!v38)
          goto LABEL_16;
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_16:
      *(_WORD *)&v10[v5 + 32] = v35;
      nitro::nitro_variable::operator=((uint64_t)&v10[v5 + 40], v36);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v36);
      v8 = v34;
      if (v34 == &v32)
      {
        v8 = &v32;
        v9 = 4;
      }
      else
      {
        if (!v34)
          goto LABEL_5;
        v9 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v8 + 8 * v9))();
LABEL_5:
      ++v7;
      v6 += 8;
      v5 += 72;
      if (v7 >= 0x8E38E38E38E38E39 * ((v31 - (_BYTE *)v30) >> 3))
        goto LABEL_19;
    }
    v11 = (*(uint64_t (**)(void))(*(_QWORD *)v34 + 16))();
LABEL_9:
    v38 = (_QWORD *)v11;
    goto LABEL_11;
  }
LABEL_19:
  std::vector<nitro::impl::delayed_variable>::vector(&__p, (uint64_t *)&v30);
  std::vector<nitro::impl::delayed_variable>::vector(&v32, (uint64_t *)&__p);
  *(_QWORD *)(a3 + 24) = 0;
  v14 = (char *)operator new(0x20uLL);
  *(_QWORD *)v14 = &off_1E2DAFC40;
  *(_OWORD *)(v14 + 8) = v32;
  *((_QWORD *)v14 + 3) = v33;
  *(_QWORD *)(a3 + 24) = v14;
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  v15 = (char *)__p;
  if (!__p)
    goto LABEL_30;
  v16 = __p;
  if (v29 == __p)
    goto LABEL_29;
  v17 = (nitro::nitro_variable *)(v29 - 32);
  do
  {
    v20 = (char *)v17 - 40;
    nitro::nitro_variable::~nitro_variable(v17);
    v18 = (_QWORD *)*((_QWORD *)v17 - 2);
    if ((_QWORD *)((char *)v17 - 40) == v18)
    {
      v18 = (_QWORD *)((char *)v17 - 40);
      v19 = 4;
LABEL_23:
      (*(void (**)(void))(*v18 + 8 * v19))();
      goto LABEL_24;
    }
    if (v18)
    {
      v19 = 5;
      goto LABEL_23;
    }
LABEL_24:
    v17 = (nitro::nitro_variable *)((char *)v17 - 72);
  }
  while (v20 != v15);
  v16 = __p;
LABEL_29:
  v29 = v15;
  operator delete(v16);
LABEL_30:
  v21 = (char *)v30;
  if (!v30)
    return;
  v22 = v30;
  if (v31 == v30)
    goto LABEL_40;
  v23 = (nitro::nitro_variable *)(v31 - 32);
  while (2)
  {
    v26 = (char *)v23 - 40;
    nitro::nitro_variable::~nitro_variable(v23);
    v24 = (_QWORD *)*((_QWORD *)v23 - 2);
    if ((_QWORD *)((char *)v23 - 40) == v24)
    {
      v24 = (_QWORD *)((char *)v23 - 40);
      v25 = 4;
      goto LABEL_34;
    }
    if (v24)
    {
      v25 = 5;
LABEL_34:
      (*(void (**)(void))(*v24 + 8 * v25))();
    }
    v23 = (nitro::nitro_variable *)((char *)v23 - 72);
    if (v26 != v21)
      continue;
    break;
  }
  v22 = v30;
LABEL_40:
  v31 = v21;
  operator delete(v22);
}

void sub_19121BD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    nitro::impl::nitro_lazy_eval::exec_function_body((uint64_t)&a17, a17);
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a11);
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a14);
  _Unwind_Resume(a1);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::TUPLEGET *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *result;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD *v28;
  __int16 v29;
  __int128 v30;
  unint64_t *v31;
  unsigned __int8 v32;
  uint64_t v33;
  _QWORD v34[3];
  _QWORD *v35;
  __int16 v36;
  __int128 v37;
  unint64_t *v38;
  unsigned __int8 v39;
  _QWORD v40[3];
  _QWORD *v41;
  __int16 v42;
  __int128 v43;
  unint64_t *v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v34, (char *)a2 + 8, this);
  v5 = *((_QWORD *)a2 + 2);
  v6 = (uint64_t)v35;
  if (!v35)
    goto LABEL_4;
  if (v35 != v34)
  {
    v6 = (*(uint64_t (**)(void))(*v35 + 16))();
LABEL_4:
    v28 = (_QWORD *)v6;
    goto LABEL_6;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _QWORD *))(v34[0] + 24))(v34, v27);
LABEL_6:
  v29 = v36;
  v30 = v37;
  if (*((_QWORD *)&v37 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v31 = v38;
  v32 = v39;
  if (v39 - 2 < 4 || v39 == 9)
  {
    v10 = v31;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v33 = v5;
  v12 = (uint64_t)v28;
  if (!v28)
    goto LABEL_19;
  if (v28 != v27)
  {
    v12 = (*(uint64_t (**)(void))(*v28 + 16))();
LABEL_19:
    v41 = (_QWORD *)v12;
    goto LABEL_21;
  }
  v41 = v40;
  (*(void (**)(_QWORD *, _QWORD *))(v27[0] + 24))(v27, v40);
LABEL_21:
  v42 = v29;
  v43 = v30;
  if (*((_QWORD *)&v30 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v31;
  v44 = v31;
  v45 = v32;
  if (v32 - 2 < 4 || v32 == 9)
  {
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 + 1, v15));
  }
  v18 = v33;
  v46 = v33;
  *(_QWORD *)(a3 + 24) = 0;
  v19 = operator new(0x58uLL);
  v20 = v19;
  *v19 = &off_1E2DB0060;
  if (v41)
  {
    if (v41 == v40)
    {
      v19[4] = v19 + 1;
      (*(void (**)(_QWORD *))(v40[0] + 24))(v40);
      v18 = v46;
    }
    else
    {
      v19[4] = v41;
      v41 = 0;
    }
  }
  else
  {
    v19[4] = 0;
  }
  *((_WORD *)v20 + 20) = v42;
  *((_OWORD *)v20 + 3) = v43;
  v43 = 0uLL;
  v20[8] = v44;
  *((_BYTE *)v20 + 72) = v45;
  v45 = 0;
  v20[10] = v18;
  *(_QWORD *)(a3 + 24) = v20;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v43);
  v21 = v41;
  if (v41 == v40)
  {
    v22 = 4;
    v21 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_40;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_40:
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v30);
  v23 = v28;
  if (v28 == v27)
  {
    v24 = 4;
    v23 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_45;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_45:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v37);
  result = v35;
  if (v35 == v34)
  {
    v26 = 4;
    result = v34;
  }
  else
  {
    if (!v35)
      return result;
    v26 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v26))();
}

void sub_19121C0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::RETURN *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  __int16 v26;
  __int128 v27;
  unint64_t *v28;
  unsigned __int8 v29;
  _QWORD v30[3];
  _QWORD *v31;
  __int16 v32;
  __int128 v33;
  unint64_t *v34;
  unsigned __int8 v35;
  _QWORD v36[3];
  _QWORD *v37;
  __int16 v38;
  __int128 v39;
  unint64_t *v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v30, (char *)a2 + 8, this);
  v4 = (uint64_t)v31;
  if (!v31)
    goto LABEL_4;
  if (v31 != v30)
  {
    v4 = (*(uint64_t (**)(void))(*v31 + 16))();
LABEL_4:
    v25 = (_QWORD *)v4;
    goto LABEL_6;
  }
  v25 = v24;
  (*(void (**)(_QWORD *, _QWORD *))(v30[0] + 24))(v30, v24);
LABEL_6:
  v26 = v32;
  v27 = v33;
  if (*((_QWORD *)&v33 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v28 = v34;
  v29 = v35;
  if (v35 - 2 < 4 || v35 == 9)
  {
    v8 = v28;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  v10 = (uint64_t)v25;
  if (!v25)
    goto LABEL_19;
  if (v25 != v24)
  {
    v10 = (*(uint64_t (**)(void))(*v25 + 16))();
LABEL_19:
    v37 = (_QWORD *)v10;
    goto LABEL_21;
  }
  v37 = v36;
  (*(void (**)(_QWORD *, _QWORD *))(v24[0] + 24))(v24, v36);
LABEL_21:
  v38 = v26;
  v39 = v27;
  if (*((_QWORD *)&v27 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = v28;
  v40 = v28;
  v41 = v29;
  if (v29 - 2 < 4 || v29 == 9)
  {
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 + 1, v13));
  }
  *(_QWORD *)(a3 + 24) = 0;
  v16 = operator new(0x50uLL);
  v17 = v16;
  *v16 = &off_1E2DAFE50;
  if (v37)
  {
    if (v37 == v36)
    {
      v16[4] = v16 + 1;
      (*(void (**)(_QWORD *))(v36[0] + 24))(v36);
    }
    else
    {
      v16[4] = v37;
      v37 = 0;
    }
  }
  else
  {
    v16[4] = 0;
  }
  *((_WORD *)v17 + 20) = v38;
  *((_OWORD *)v17 + 3) = v39;
  v39 = 0uLL;
  v17[8] = v40;
  *((_BYTE *)v17 + 72) = v41;
  v41 = 0;
  *(_QWORD *)(a3 + 24) = v17;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v39);
  v18 = v37;
  if (v37 == v36)
  {
    v19 = 4;
    v18 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_40;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_40:
  *(_WORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v27);
  v20 = v25;
  if (v25 == v24)
  {
    v21 = 4;
    v20 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_45;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_45:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
  result = v31;
  if (v31 == v30)
  {
    v23 = 4;
    result = v30;
  }
  else
  {
    if (!v31)
      return result;
    v23 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
}

void sub_19121C480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_reference_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>@<X0>(const nitro::ir::MEMBER **a1@<X0>, nitro::impl::nitro_lazy_eval *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;

  result = (_QWORD *)(*(uint64_t (**)(const nitro::ir::MEMBER *))(*(_QWORD *)*a1 + 24))(*a1);
  switch((int)result)
  {
    case 0:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 1:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 2:
      v7 = *((_QWORD *)*a1 + 1);
      *a3 = &off_1E2DAF2F8;
      a3[1] = v7;
      a3[3] = a3;
      break;
    case 3:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 4:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 5:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 6:
      result = nitro::impl::nitro_lazy_eval::exec_reference(a2, *a1, (uint64_t)a3);
      break;
    case 7:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 8:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 9:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 10:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 11:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 12:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 13:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 14:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 15:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 16:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 17:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 18:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 19:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 20:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 21:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 22:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 23:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 24:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 25:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 26:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    default:
      _ZZN5nitro17syntax_tree_visitIZNS_4impl15nitro_lazy_eval9exec_nodeERKNSt3__110unique_ptrINS_2ir4NODEENS3_14default_deleteIS6_EEEEE3__0EEDTclfp0_cvNS5_6SYMBOLE_EEESB_T_ENKUlvE_clEv();
  }
  return result;
}

_QWORD *nitro::impl::nitro_lazy_eval::exec_reference@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::MEMBER *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  _QWORD v18[3];
  _QWORD *v19;
  __int16 v20;
  __int128 v21;
  unint64_t *v22;
  unsigned __int8 v23;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD *v26;
  __int16 v27;
  __int128 v28;
  unint64_t *v29;
  unsigned __int8 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v25, (char *)a2 + 8, this);
  v5 = *((_QWORD *)a2 + 2);
  v6 = (uint64_t)v26;
  if (!v26)
    goto LABEL_4;
  if (v26 != v25)
  {
    v6 = (*(uint64_t (**)(void))(*v26 + 16))();
LABEL_4:
    v19 = (_QWORD *)v6;
    goto LABEL_6;
  }
  v19 = v18;
  (*(void (**)(_QWORD *, _QWORD *))(v25[0] + 24))(v25, v18);
LABEL_6:
  v20 = v27;
  v21 = v28;
  if (*((_QWORD *)&v28 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v22 = v29;
  v23 = v30;
  if (v30 - 2 < 4 || v30 == 9)
  {
    v10 = v22;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v24 = v5;
  *(_QWORD *)(a3 + 24) = 0;
  v12 = operator new(0x58uLL);
  v13 = v12;
  *v12 = &off_1E2DAF2A0;
  if (v19)
  {
    if (v19 == v18)
    {
      v12[4] = v12 + 1;
      (*(void (**)(_QWORD *))(v18[0] + 24))(v18);
      v5 = v24;
    }
    else
    {
      v12[4] = v19;
      v19 = 0;
    }
  }
  else
  {
    v12[4] = 0;
  }
  *((_WORD *)v13 + 20) = v20;
  *((_OWORD *)v13 + 3) = v21;
  v21 = 0uLL;
  v13[8] = v22;
  *((_BYTE *)v13 + 72) = v23;
  v23 = 0;
  v13[10] = v5;
  *(_QWORD *)(a3 + 24) = v13;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v21);
  v14 = v19;
  if (v19 == v18)
  {
    v15 = 4;
    v14 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_26:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v28);
  result = v26;
  if (v26 == v25)
  {
    v17 = 4;
    result = v25;
  }
  else
  {
    if (!v26)
      return result;
    v17 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v17))();
}

void sub_19121C8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>::pair[abi:ne180100]<nitro::impl::delayed_variable&,nitro::impl::delayed_variable&,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t **v10;
  unint64_t *v11;
  int v12;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t **v21;
  unint64_t *v22;
  int v23;
  unint64_t *v25;
  unint64_t v26;

  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v10 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v11 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v10 = v11;
    v12 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v12;
    if ((v12 - 2) < 4 || v12 == 9)
    {
      v14 = *v10;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  v16 = a1 + 72;
  v17 = *(_QWORD *)(a3 + 24);
  if (!v17)
    goto LABEL_20;
  if (v17 != a3)
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v17;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = v16;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1 + 72);
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a3 + 32);
  v18 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 120) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v21 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (v16 != a3)
  {
    v22 = *(unint64_t **)(a3 + 56);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a3 + 64);
    *v21 = v22;
    v23 = *(unsigned __int8 *)(a3 + 64);
    *(_BYTE *)(a1 + 136) = v23;
    if ((v23 - 2) < 4 || v23 == 9)
    {
      v25 = *v21;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
  }
  return a1;
}

void sub_19121CAD8(_Unwind_Exception *a1)
{
  nitro::impl::delayed_variable *v1;

  nitro::impl::delayed_variable::~delayed_variable(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_19121CC54(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

char *std::vector<nitro::impl::delayed_variable>::__push_back_slow_path<nitro::impl::delayed_variable>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  nitro::nitro_variable *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;

  v3 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(72 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[72 * v3];
  v9 = (_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 24);
  if (v10)
  {
    if (v10 == a2)
    {
      *((_QWORD *)v8 + 3) = v8;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 24))(a2, &v7[72 * v3]);
      goto LABEL_17;
    }
    *((_QWORD *)v8 + 3) = v10;
  }
  else
  {
    v9 = v8 + 24;
  }
  *v9 = 0;
LABEL_17:
  v11 = &v7[72 * v6];
  v12 = &v7[72 * v3];
  *((_WORD *)v12 + 16) = *(_WORD *)(a2 + 32);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v12 + 7) = *(_QWORD *)(a2 + 56);
  v12[64] = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a2 + 64) = 0;
  v13 = v8 + 72;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v13;
    a1[2] = v11;
LABEL_35:
    if (!v14)
      return v13;
LABEL_36:
    operator delete(v14);
    return v13;
  }
  v16 = 0;
  v17 = (char *)a1[1];
  do
  {
    v22 = &v8[v16];
    v23 = &v14[v16];
    v24 = *(char **)&v14[v16 - 48];
    if (!v24)
    {
      v18 = v22 - 48;
LABEL_20:
      *(_QWORD *)v18 = 0;
      goto LABEL_21;
    }
    if (v23 - 72 != v24)
    {
      v18 = v17 - 48;
      *((_QWORD *)v22 - 6) = v24;
      goto LABEL_20;
    }
    *((_QWORD *)v22 - 6) = v22 - 72;
    (*(void (**)(_QWORD))(**((_QWORD **)v23 - 6) + 24))(*((_QWORD *)v23 - 6));
LABEL_21:
    v17 -= 72;
    v19 = &v8[v16];
    v20 = &v14[v16];
    *((_WORD *)v19 - 20) = *(_WORD *)&v14[v16 - 40];
    *((_OWORD *)v19 - 2) = *(_OWORD *)&v14[v16 - 32];
    *((_QWORD *)v20 - 4) = 0;
    *((_QWORD *)v20 - 3) = 0;
    *((_QWORD *)v19 - 2) = 0;
    *(v19 - 8) = 0;
    v21 = *(_QWORD *)&v14[v16 - 16];
    *(v19 - 8) = v14[v16 - 8];
    *((_QWORD *)v19 - 2) = v21;
    *(v19 - 8) = v14[v16 - 8];
    *(v20 - 8) = 0;
    v16 -= 72;
  }
  while (&v14[v16] != v15);
  v14 = (char *)*a1;
  v25 = (char *)a1[1];
  *a1 = &v8[v16];
  a1[1] = v13;
  a1[2] = v11;
  if (v25 != v14)
  {
    v26 = (nitro::nitro_variable *)(v25 - 32);
    while (1)
    {
      v29 = (char *)v26 - 40;
      nitro::nitro_variable::~nitro_variable(v26);
      v27 = (_QWORD *)*((_QWORD *)v26 - 2);
      if ((_QWORD *)((char *)v26 - 40) == v27)
      {
        v27 = (_QWORD *)((char *)v26 - 40);
        v28 = 4;
      }
      else
      {
        if (!v27)
          goto LABEL_30;
        v28 = 5;
      }
      (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_30:
      v26 = (nitro::nitro_variable *)((char *)v26 - 72);
      if (v29 == v14)
        goto LABEL_35;
    }
  }
  v14 = v25;
  if (v25)
    goto LABEL_36;
  return v13;
}

_QWORD *std::vector<nitro::impl::delayed_variable>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0x8E38E38E38E38E39 * (v6 >> 3);
    if (v7 >= 0x38E38E38E38E38FLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[72 * v7];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::impl::delayed_variable>,nitro::impl::delayed_variable*,nitro::impl::delayed_variable*,nitro::impl::delayed_variable*>(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_19121CFB4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;

  v1[1] = v2;
  if (*v1)
    std::vector<nitro::impl::delayed_variable>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::impl::delayed_variable>,nitro::impl::delayed_variable*,nitro::impl::delayed_variable*,nitro::impl::delayed_variable*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t **v11;
  unint64_t *v12;
  int v13;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;

  v4 = a4;
  v18 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        if (v7 == v6)
        {
          *(_QWORD *)(v4 + 24) = v4;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 24) + 24))(*(_QWORD *)(v6 + 24), v4);
          goto LABEL_9;
        }
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      }
      *(_QWORD *)(v4 + 24) = v7;
LABEL_9:
      *(_WORD *)(v4 + 32) = *(_WORD *)(v6 + 32);
      *(_QWORD *)(v4 + 40) = *(_QWORD *)(v6 + 40);
      v8 = *(_QWORD *)(v6 + 48);
      *(_QWORD *)(v4 + 48) = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      *(_QWORD *)(v4 + 56) = 0;
      v11 = (unint64_t **)(v4 + 56);
      *(_BYTE *)(v4 + 64) = 0;
      if (v6 != v4)
      {
        v12 = *(unint64_t **)(v6 + 56);
        *(_BYTE *)(v4 + 64) = *(_BYTE *)(v6 + 64);
        *v11 = v12;
        v13 = *(unsigned __int8 *)(v6 + 64);
        *(_BYTE *)(v4 + 64) = v13;
        if ((v13 - 2) < 4 || v13 == 9)
        {
          v15 = *v11;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
        }
      }
      v6 += 72;
      v4 = v18 + 72;
      v18 += 72;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_19121D114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nitro::impl::delayed_variable>,nitro::impl::delayed_variable*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nitro::impl::delayed_variable>,nitro::impl::delayed_variable*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  char *v3;
  char *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(char ***)(a1 + 16);
    v4 = **(char ***)(a1 + 8);
    if (v3 != v4)
    {
      v5 = (nitro::nitro_variable *)(v3 - 32);
      do
      {
        v8 = (char *)v5 - 40;
        nitro::nitro_variable::~nitro_variable(v5);
        v6 = (_QWORD *)*((_QWORD *)v5 - 2);
        if ((_QWORD *)((char *)v5 - 40) == v6)
        {
          v6 = (_QWORD *)((char *)v5 - 40);
          v7 = 4;
        }
        else
        {
          if (!v6)
            goto LABEL_7;
          v7 = 5;
        }
        (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_7:
        v5 = (nitro::nitro_variable *)((char *)v5 - 72);
      }
      while (v8 != v4);
    }
  }
  return a1;
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  *a1 = &off_1E2DAF350;
  v2 = (char *)a1[1];
  if (!v2)
    return a1;
  v3 = (char *)a1[2];
  v4 = (void *)a1[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = (void *)a1[1];
LABEL_11:
  a1[2] = v2;
  operator delete(v4);
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  *a1 = &off_1E2DAF350;
  v2 = (char *)a1[1];
  if (!v2)
    goto LABEL_12;
  v3 = (char *)a1[2];
  v4 = (void *)a1[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  while (1)
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_6;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
    if (v8 == v2)
    {
      v4 = (void *)a1[1];
LABEL_11:
      a1[2] = v2;
      operator delete(v4);
LABEL_12:
      JUMPOUT(0x19401CD90);
    }
  }
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x20uLL);
  *v2 = &off_1E2DAF350;
  std::vector<nitro::impl::delayed_variable>::vector(v2 + 1, v1);
  return v2;
}

void sub_19121D350(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF350;
  return std::vector<nitro::impl::delayed_variable>::vector(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  char *v1;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  v1 = *(char **)(a1 + 8);
  if (!v1)
    return;
  v3 = *(char **)(a1 + 16);
  v4 = *(void **)(a1 + 8);
  if (v3 == v1)
    goto LABEL_12;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v1);
  v4 = *(void **)(a1 + 8);
LABEL_12:
  *(_QWORD *)(a1 + 16) = v1;
  operator delete(v4);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *__p)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  v2 = (char *)__p[1];
  if (!v2)
    goto LABEL_12;
  v3 = (char *)__p[2];
  v4 = (void *)__p[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = (void *)__p[1];
LABEL_11:
  __p[2] = v2;
  operator delete(v4);
LABEL_12:
  operator delete(__p);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  int v20;
  unint64_t v22;
  _QWORD v23[2];
  unint64_t *v24;
  unsigned __int8 v25;
  __int128 v26[2];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_WORD *)(a2 + 17) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); v5 != i; v5 += 72)
  {
    if (*(_BYTE *)(v5 + 32))
    {
      if (!*(_BYTE *)(v5 + 33))
      {
        v7 = *(_QWORD *)(v5 + 24);
        if (!v7)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v26, v7, a2);
        nitro::nitro_variable::operator=(v5 + 40, v26);
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v26);
      }
      v8 = *(_QWORD *)(v5 + 40);
      *(_BYTE *)(v5 + 33) = 1;
      v9 = *(_QWORD *)(v5 + 48);
      v23[0] = v8;
      v23[1] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v24 = 0;
      v25 = 0;
      if ((_QWORD *)(v5 + 40) != v23)
      {
        v12 = *(unint64_t **)(v5 + 56);
        v24 = v12;
        v25 = *(_BYTE *)(v5 + 64);
        if (v25 - 2 < 4 || v25 == 9)
        {
          do
            v14 = __ldaxr(v12);
          while (__stlxr(v14 + 1, v12));
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(v5 + 24);
      if (!v15)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v23, v15, a2);
    }
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v23);
    if (*(_BYTE *)(a2 + 16) || *(_QWORD *)(a2 + 24) && (*(_BYTE *)(a2 + 17) || *(_BYTE *)(a2 + 18)))
      break;
  }
  v16 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)a3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a3 + 8) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (a2 + 32 != a3)
  {
    v19 = *(unint64_t **)(a2 + 48);
    *(_QWORD *)(a3 + 16) = v19;
    v20 = *(unsigned __int8 *)(a2 + 56);
    *(_BYTE *)(a3 + 24) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      do
        v22 = __ldaxr(v19);
      while (__stlxr(v22 + 1, v19));
    }
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval18exec_function_bodyERKNSt3__16vectorINS2_10unique_ptrINS_2ir4NODEENS"
                     "2_14default_deleteIS6_EEEENS2_9allocatorIS9_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval18exec_function_bodyERKNSt3__16vectorINS2_10unique_ptrINS_"
                                "2ir4NODEENS2_14default_deleteIS6_EEEENS2_9allocatorIS9_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval18exec_function_bodyERKNSt3__16vectorINS2_10unique_ptrINS_2ir4NODEENS2_14default_deleteIS6_EEEENS2_9allocatorIS9_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval18exec_function_bodyERKNSt3__16vectorINS2_10unique_ptrINS_2ir4NODEENS2_14default_deleteIS6_EEEENS2_9allocatorIS9_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void _ZZN5nitro17syntax_tree_visitIZNS_4impl15nitro_lazy_eval9exec_nodeERKNSt3__110unique_ptrINS_2ir4NODEENS3_14default_deleteIS6_EEEEE3__0EEDTclfp0_cvNS5_6SYMBOLE_EEESB_T_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *exception;
  char v9;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "Nitro/EspressoNitro/src/interpreter/syntax_tree_visit.hpp", "operator()", 38, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed: ", 14);
    v6 = pthread_getspecific(started[74]);
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"false", 5);
    v7 = pthread_getspecific(started[74]);
    if (v7)
    {
      if (*((_BYTE *)v7 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)":\n", 2);
        file_logger::stream_flush((file_logger *)started);
      }
    }
  }
  log_dispatch<true>::exec(6, "Nitro/EspressoNitro/src/interpreter/syntax_tree_visit.hpp", "operator()", 38, "Unknown node type encountered in visitor", v0, v1, v2, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  *exception = "assertion failure";
  __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
}

void nitro::impl::nitro_lazy_eval::exec<nitro::ir::DEFUN>(nitro::ir::DEFUN const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *exception;
  char v9;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.hpp", "operator()", 83, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed: ", 14);
    v6 = pthread_getspecific(started[74]);
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"false", 5);
    v7 = pthread_getspecific(started[74]);
    if (v7)
    {
      if (*((_BYTE *)v7 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)":\n", 2);
        file_logger::stream_flush((file_logger *)started);
      }
    }
  }
  log_dispatch<true>::exec(6, "Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.hpp", "operator()", 83, "Node type not implemented", v0, v1, v2, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  *exception = "assertion failure";
  __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
}

uint64_t log_dispatch<true>::exec(int a1, const char *a2, const char *a3, int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  void *v14;
  uint64_t result;
  _QWORD *exception;

  v14 = global_logger();
  result = file_logger::_log((uint64_t)v14, a1, a2, a3, a4, a5, &a9);
  if (a1 == 7)
  {
    __print_back_trace();
    exception = __cxa_allocate_exception(8uLL);
    *exception = "LOG_FATAL encountered";
    __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAFDA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAFDA0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<D0>(uint64_t a1@<X0>, int8x8_t **a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *i;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  char *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  double result;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v7 = (*a2)[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *(_QWORD *)(a1 + 8);
      if (v5 >= *(_QWORD *)&v7)
        v9 = v5 % *(_QWORD *)&v7;
    }
    else
    {
      v9 = (*(_QWORD *)&v7 - 1) & v5;
    }
    v10 = *(_QWORD **)(*(_QWORD *)*a2 + 8 * v9);
    if (v10)
    {
      for (i = (_QWORD *)*v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v5 == v12)
        {
          if (i[2] == v5)
            goto LABEL_31;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= *(_QWORD *)&v7)
              v12 %= *(_QWORD *)&v7;
          }
          else
          {
            v12 &= *(_QWORD *)&v7 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = (char *)operator new(0x60uLL);
  v14 = (std::__shared_weak_count *)v13;
  *((_QWORD *)v13 + 1) = 0;
  v15 = (unint64_t *)(v13 + 8);
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_1E2DB61C0;
  v16 = v13 + 24;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *((_QWORD *)v13 + 9) = 0;
  *((_QWORD *)v13 + 10) = 0;
  *((_DWORD *)v13 + 18) = 1065353216;
  *((_QWORD *)v13 + 11) = 0;
  do
    v17 = __ldxr(v15);
  while (__stxr(v17 + 1, v15));
  v18 = (unint64_t *)(v13 + 16);
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  *((_QWORD *)v13 + 3) = v13 + 24;
  *((_QWORD *)v13 + 4) = v13;
  do
    v20 = __ldaxr(v15);
  while (__stlxr(v20 - 1, v15));
  if (!v20)
  {
    (*(void (**)(char *))(*(_QWORD *)v13 + 16))(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  *(_QWORD *)&v27 = v16;
  *((_QWORD *)&v27 + 1) = v14;
  do
    v21 = __ldxr(v15);
  while (__stxr(v21 + 1, v15));
  v28 = 0;
  v29 = 0;
  v22 = (uint64_t)*a2;
  v26 = v6;
  v23 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v22, v6, (uint64_t)&std::piecewise_construct, &v26);
  nitro::nitro_variable::operator=((uint64_t)(v23 + 24), &v27);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v27);
  do
    v24 = __ldaxr(v15);
  while (__stlxr(v24 - 1, v15));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_31:
  result = 0.0;
  *a3 = 0u;
  a3[1] = 0u;
  return result;
}

void sub_19121DC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v7;
  va_list va;

  va_start(va, a4);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 - 1, v5));
  if (!v7)
    std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(v4);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6DEFVAREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6DEFVAREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6DEFVAREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6DEFVAREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAFEA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAFEA8;
  a2[1] = v2;
  return result;
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<X0>(uint64_t a1@<X0>, int8x8_t **a2@<X1>, uint64_t a3@<X8>)
{
  char *result;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *i;
  unint64_t v15;
  int8x8_t *v16;
  int8x8_t *v17;
  int8x8_t *v18;
  int8x8_t *v19;
  int8x8_t *v20;
  unint64_t v21;
  BOOL v22;
  int8x8_t **v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t **v29;
  unint64_t *v30;
  int v31;
  unint64_t *v33;
  unint64_t v34;
  int8x8_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  _QWORD *v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  result = (char *)*a2;
  v9 = *(_QWORD *)(a1 + 8);
  v8 = (_QWORD *)(a1 + 8);
  v7 = v9;
  v10 = (*a2)[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= *(_QWORD *)&v10)
        v12 = v7 % *(_QWORD *)&v10;
    }
    else
    {
      v12 = (*(_QWORD *)&v10 - 1) & v7;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)result + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = (uint64_t *)*i)
      {
        v15 = i[1];
        if (v15 == v7)
        {
          if (i[2] == v7)
          {
            *(_QWORD *)a3 = i[3];
            v39 = i[4];
            *(_QWORD *)(a3 + 8) = v39;
            if (v39)
            {
              v40 = (unint64_t *)(v39 + 8);
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            *(_QWORD *)(a3 + 16) = 0;
            v29 = (unint64_t **)(a3 + 16);
            *(_BYTE *)(a3 + 24) = 0;
            if (i + 3 != (uint64_t *)a3)
            {
              v42 = (unint64_t *)i[5];
              *(_BYTE *)(a3 + 24) = *((_BYTE *)i + 48);
              *v29 = v42;
              v31 = *((unsigned __int8 *)i + 48);
LABEL_33:
              *(_BYTE *)(a3 + 24) = v31;
              if ((v31 - 2) < 4 || v31 == 9)
              {
                v33 = *v29;
                do
                  v34 = __ldaxr(v33);
                while (__stlxr(v34 + 1, v33));
              }
            }
            return result;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= *(_QWORD *)&v10)
              v15 %= *(_QWORD *)&v10;
          }
          else
          {
            v15 &= *(_QWORD *)&v10 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  v16 = a2[1];
  v19 = (int8x8_t *)v16[7];
  v17 = v16 + 7;
  v18 = v19;
  if (!v19)
    goto LABEL_28;
  v20 = v17;
  do
  {
    v21 = (unint64_t)v18[4];
    v22 = v21 >= v7;
    if (v21 >= v7)
      v23 = (int8x8_t **)v18;
    else
      v23 = (int8x8_t **)&v18[1];
    if (v22)
      v20 = v18;
    v18 = *v23;
  }
  while (*v23);
  if (v20 != v17 && v7 >= *(_QWORD *)&v20[4])
  {
    *(int8x8_t *)a3 = v20[5];
    v35 = v20[6];
    *(int8x8_t *)(a3 + 8) = v35;
    if (v35)
    {
      v36 = (unint64_t *)(*(_QWORD *)&v35 + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    *(_QWORD *)(a3 + 16) = 0;
    v29 = (unint64_t **)(a3 + 16);
    *(_BYTE *)(a3 + 24) = 0;
    if (&v20[5] != (int8x8_t *)a3)
    {
      v38 = (unint64_t *)v20[7];
      *(_BYTE *)(a3 + 24) = v20[8].i8[0];
      *v29 = v38;
      v31 = v20[8].u8[0];
      goto LABEL_33;
    }
  }
  else
  {
LABEL_28:
    v44 = 0uLL;
    v46 = 0;
    v45 = 0;
    v43 = v8;
    v24 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)result, v8, (uint64_t)&std::piecewise_construct, &v43);
    nitro::nitro_variable::operator=((uint64_t)(v24 + 24), &v44);
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v44);
    v25 = (uint64_t)*a2;
    *(_QWORD *)&v44 = v8;
    result = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v25, v8, (uint64_t)&std::piecewise_construct, (_QWORD **)&v44);
    *(_QWORD *)a3 = *((_QWORD *)result + 3);
    v26 = *((_QWORD *)result + 4);
    *(_QWORD *)(a3 + 8) = v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    *(_QWORD *)(a3 + 16) = 0;
    v29 = (unint64_t **)(a3 + 16);
    *(_BYTE *)(a3 + 24) = 0;
    if (result + 24 != (char *)a3)
    {
      v30 = (unint64_t *)*((_QWORD *)result + 5);
      *(_BYTE *)(a3 + 24) = result[48];
      *v29 = v30;
      v31 = result[48];
      goto LABEL_33;
    }
  }
  return result;
}

void sub_19121E040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6SYMBOLEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6SYMBOLEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6SYMBOLEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6SYMBOLEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAFDF8;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAFDF8;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  JUMPOUT(0x19401CD90);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t *v10;
  unint64_t v11;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_1E2DAFDF8;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 7) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_QWORD *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
    v8 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v8;
    if ((v8 - 2) < 4 || v8 == 9)
    {
      v10 = (unint64_t *)*((_QWORD *)v2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  *((_QWORD *)v2 + 10) = *(_QWORD *)(a1 + 80);
  return v2;
}

void sub_19121E274(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a2 = &off_1E2DAFDF8;
  v4 = a2 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
      *(_QWORD *)(a2 + 32) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a2 + 64) = 0;
  v9 = (unint64_t **)(a2 + 64);
  *(_BYTE *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    v10 = *(unint64_t **)(a1 + 64);
    *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a1 + 72);
    *(_BYTE *)(a2 + 72) = v11;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      v13 = *v9;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  return result;
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  int v22;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unsigned __int8 v31;
  __int128 v32[2];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40))
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v12 + 48))(&v28);
      goto LABEL_18;
    }
    goto LABEL_39;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v4 + 48))(v32);
      nitro::nitro_variable::operator=(a1 + 48, v32);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v32);
      goto LABEL_5;
    }
LABEL_39:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_5:
  v5 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 41) = 1;
  v6 = *(std::__shared_weak_count **)(a1 + 56);
  v28 = v5;
  v29 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v30 = 0;
  v31 = 0;
  if ((uint64_t *)(a1 + 48) != &v28)
  {
    v9 = *(unint64_t **)(a1 + 64);
    v30 = v9;
    v31 = *(_BYTE *)(a1 + 72);
    if (v31 - 2 < 4 || v31 == 9)
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 + 1, v9));
    }
  }
LABEL_18:
  v13 = v28;
  if (!v28)
    nitro::nitro_variable::instance(void)const::{lambda(void)#1}::operator()();
  v14 = v29;
  if (v29)
  {
    v15 = (unint64_t *)&v29->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v27 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v32[0] = &v27;
  v17 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v13 + 16, &v27, (uint64_t)&std::piecewise_construct, (_QWORD **)v32);
  *(_QWORD *)a2 = *((_QWORD *)v17 + 3);
  v18 = *((_QWORD *)v17 + 4);
  *(_QWORD *)(a2 + 8) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v17 + 24 != (char *)a2)
  {
    v21 = (unint64_t *)*((_QWORD *)v17 + 5);
    *(_QWORD *)(a2 + 16) = v21;
    v22 = v17[48];
    *(_BYTE *)(a2 + 24) = v22;
    if ((v22 - 2) < 4 || v22 == 9)
    {
      do
        v24 = __ldaxr(v21);
      while (__stlxr(v24 + 1, v21));
    }
  }
  if (v14)
  {
    v25 = (unint64_t *)&v14->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v28);
}

void sub_19121E668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6MEMBEREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6MEMBEREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6MEMBEREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6MEMBEREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::nitro_variable::instance(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"m_instance != nullptr", 21);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::nitro_variable::instance(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19121E980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::nitro_variable::instance(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19121EB24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19121EB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19121EB30);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_19121ECF8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF4B0;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF4B0;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF4B0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19121EED4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF4B0;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unsigned __int8 v36;
  __int128 v37[2];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      v5 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(a1 + 41) = 1;
      v6 = *(_QWORD *)(a1 + 56);
      v33 = v5;
      v34 = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v35 = 0;
      v36 = 0;
      if ((uint64_t *)(a1 + 48) != &v33)
      {
        v9 = *(unint64_t **)(a1 + 64);
        v35 = v9;
        v36 = *(_BYTE *)(a1 + 72);
        if (v36 - 2 < 4 || v36 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      if (v33)
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      v13 = v35;
      v14 = v36;
      v15 = v36 - 2;
      if (v15 < 4 || v36 == 9)
      {
        do
          v17 = __ldaxr(v13);
        while (__stlxr(v17 + 1, v13));
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
      if (*(_BYTE *)(a1 + 112))
      {
        if (*(_BYTE *)(a1 + 113))
        {
LABEL_29:
          v19 = *(_QWORD *)(a1 + 120);
          *(_BYTE *)(a1 + 113) = 1;
          v20 = *(_QWORD *)(a1 + 128);
          v33 = v19;
          v34 = v20;
          if (v20)
          {
            v21 = (unint64_t *)(v20 + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v35 = 0;
          v36 = 0;
          if ((uint64_t *)(a1 + 120) != &v33)
          {
            v23 = *(unint64_t **)(a1 + 136);
            v35 = v23;
            v36 = *(_BYTE *)(a1 + 144);
            if (v36 - 2 < 4 || v36 == 9)
            {
              do
                v25 = __ldaxr(v23);
              while (__stlxr(v25 + 1, v23));
            }
          }
LABEL_42:
          if (v33)
            nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
          v27 = v35;
          v28 = v36;
          if (v36 - 2 >= 4)
          {
            if (v36 == 9)
            {
              do
                v30 = __ldaxr(v27);
              while (__stlxr(v30 + 1, v27));
              nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
              if ((_DWORD)v14 == 9)
                goto LABEL_51;
              goto LABEL_54;
            }
          }
          else
          {
            do
              v29 = __ldaxr(v27);
            while (__stlxr(v29 + 1, v27));
          }
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
          if ((_DWORD)v14 == 9)
          {
            do
LABEL_51:
              v31 = __ldaxr(v13);
            while (__stlxr(v31 + 1, v13));
LABEL_52:
            __asm { BR              X9 }
          }
          if ((_DWORD)v28 != 9)
          {
            if (v15 > 3)
              goto LABEL_52;
            goto LABEL_51;
          }
          do
LABEL_54:
            v32 = __ldaxr(v27);
          while (__stlxr(v32 + 1, v27));
          __asm { BR              X9 }
        }
        v18 = *(_QWORD *)(a1 + 104);
        if (v18)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(v37, v18, a2);
          nitro::nitro_variable::operator=(a1 + 120, v37);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v37);
          goto LABEL_29;
        }
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 104);
        if (v26)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v26 + 48))(&v33, v26, a2);
          goto LABEL_42;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v37, v4, a2);
      nitro::nitro_variable::operator=(a1 + 48, v37);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v37);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(&v33, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_191220208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  int v3;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  void *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  va_list va;

  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  switch(v3)
  {
    case 0:
      do
      {
        v5 = __ldaxr((unint64_t *)v2);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unint64_t *)v2));
      if (v6)
        v7 = 1;
      else
        v7 = v2 == 0;
      if (v7)
        goto LABEL_2;
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      v8 = v2;
      v9 = 0x1012C404EF22A49;
      goto LABEL_58;
    case 1:
      do
      {
        v16 = __ldaxr((unint64_t *)v2);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unint64_t *)v2));
      if (v17)
        v18 = 1;
      else
        v18 = v2 == 0;
      if (v18)
        goto LABEL_2;
      v19 = *(void **)(v2 + 8);
      if (v19)
      {
        *(_QWORD *)(v2 + 16) = v19;
        operator delete(v19);
      }
      v8 = v2;
      v9 = 0x1080C409938AC02;
      goto LABEL_58;
    case 2:
      do
      {
        v10 = __ldaxr((unint64_t *)v2);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unint64_t *)v2));
      if (v11)
        v12 = 1;
      else
        v12 = v2 == 0;
      if (v12)
        goto LABEL_2;
      v13 = *(_QWORD *)(v2 + 8);
      if (!v13)
        goto LABEL_41;
      v14 = *(_QWORD *)(v2 + 16);
      v15 = *(void **)(v2 + 8);
      if (v14 != v13)
      {
        do
        {
          v14 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v2 + 24, v14);
        }
        while (v14 != v13);
        v15 = *(void **)(v2 + 8);
      }
      *(_QWORD *)(v2 + 16) = v13;
      goto LABEL_40;
    case 3:
      do
      {
        v20 = __ldaxr((unint64_t *)v2);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unint64_t *)v2));
      if (v21)
        v22 = 1;
      else
        v22 = v2 == 0;
      if (v22)
        goto LABEL_2;
      v23 = *(_QWORD *)(v2 + 8);
      if (!v23)
        goto LABEL_41;
      v24 = *(_QWORD *)(v2 + 16);
      v25 = *(void **)(v2 + 8);
      if (v24 != v23)
      {
        do
          v24 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v24 - 32);
        while (v24 != v23);
        v25 = *(void **)(v2 + 8);
      }
      *(_QWORD *)(v2 + 16) = v23;
      v15 = v25;
LABEL_40:
      operator delete(v15);
LABEL_41:
      v8 = v2;
      v9 = 0x1020C405E66F15BLL;
      goto LABEL_58;
    case 7:
      do
      {
        v26 = __ldaxr((unint64_t *)v2);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unint64_t *)v2));
      if (v27)
        v28 = 1;
      else
        v28 = v2 == 0;
      if (v28)
        goto LABEL_2;
      v29 = *(void **)(v2 + 56);
      if (v29)
      {
        *(_QWORD *)(v2 + 64) = v29;
        operator delete(v29);
        v30 = *(void **)(v2 + 32);
        if (!v30)
        {
LABEL_49:
          v31 = *(std::__shared_weak_count **)(v2 + 24);
          if (!v31)
            goto LABEL_57;
          goto LABEL_53;
        }
      }
      else
      {
        v30 = *(void **)(v2 + 32);
        if (!v30)
          goto LABEL_49;
      }
      *(_QWORD *)(v2 + 40) = v30;
      operator delete(v30);
      v31 = *(std::__shared_weak_count **)(v2 + 24);
      if (!v31)
      {
LABEL_57:
        v8 = v2;
        v9 = 0x10B0C4002311774;
LABEL_58:
        MEMORY[0x19401CD90](v8, v9);
        _Unwind_Resume(a1);
      }
LABEL_53:
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      goto LABEL_57;
    default:
LABEL_2:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

_QWORD *std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(_QWORD *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v5;
  int v8;
  unint64_t *v10;
  unint64_t v11;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    result = operator new(16 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    while (a2 != a3)
    {
      *result = 0;
      *((_BYTE *)result + 8) = 0;
      if (a2 != result)
      {
        *result = *a2;
        v8 = *((unsigned __int8 *)a2 + 8);
        *((_BYTE *)result + 8) = v8;
        if ((v8 - 2) < 4 || v8 == 9)
        {
          v10 = (unint64_t *)*result;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
      }
      a2 += 2;
      result += 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_191220974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<nitro::flexible_type>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<nitro::flexible_type>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **a1;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v4);
        }
        while ((void *)v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

char *std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>(char *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v5;
  int v8;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  if (a4)
  {
    v5 = result;
    if (a4 >> 59)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    result = (char *)operator new(32 * a4);
    *v5 = result;
    v5[1] = result;
    for (v5[2] = &result[32 * a4]; a2 != a3; result += 32)
    {
      *(_QWORD *)result = 0;
      result[8] = 0;
      if (a2 == result)
      {
        *((_QWORD *)a2 + 2) = 0;
        a2[24] = 0;
      }
      else
      {
        *(_QWORD *)result = *(_QWORD *)a2;
        v8 = a2[8];
        result[8] = v8;
        if ((v8 - 2) < 4 || v8 == 9)
        {
          v10 = *(unint64_t **)result;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
        v12 = a2[24];
        result[24] = v12;
        switch(v12)
        {
          case 2:
            v13 = (unint64_t *)*((_QWORD *)result + 2);
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 + 1, v13));
            break;
          case 3:
            v17 = (unint64_t *)*((_QWORD *)result + 2);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 + 1, v17));
            break;
          case 4:
            v15 = (unint64_t *)*((_QWORD *)result + 2);
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 + 1, v15));
            break;
          case 5:
            v19 = (unint64_t *)*((_QWORD *)result + 2);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 + 1, v19));
            break;
          case 9:
            v21 = (unint64_t *)*((_QWORD *)result + 2);
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 + 1, v21));
            break;
          default:
            break;
        }
      }
      a2 += 32;
    }
    v5[1] = result;
  }
  return result;
}

void sub_191220B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v4 = (uint64_t)v2[1];
      v5 = **a1;
      if ((void *)v4 != v3)
      {
        do
          v4 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v4 - 32);
        while ((void *)v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>(_DWORD *a1, double *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *v51;
  uint64_t *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *v57;
  uint64_t *v58;
  void *__p;
  void *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  char *v69;
  char *v70;
  void *v71;
  void *v72;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v61, (uint64_t)a1);
      if (v64 == v63 || v61 == 0)
        goto LABEL_32;
      v4 = v64 - v63 - 8;
      if (v4 < 8)
      {
        v5 = 1;
        v6 = v63;
        do
        {
LABEL_29:
          v24 = *(_QWORD *)v6;
          v6 += 8;
          v5 *= v24;
        }
        while (v6 != v64);
        goto LABEL_30;
      }
      v19 = (v4 >> 3) + 1;
      v6 = &v63[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v63 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v5 = v23 * v21;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_29;
LABEL_30:
      if (v5)
        nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator+=<double>(double)::{lambda(int &)#1}>(&v61, *a2);
LABEL_32:
      if (v65)
      {
        v66 = v65;
        operator delete(v65);
      }
      if (v63)
      {
        v64 = v63;
        operator delete(v63);
      }
      v25 = v62;
      if (!v62)
        return;
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      goto LABEL_81;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v67, (uint64_t)a1);
      if (v70 == v69 || v67 == 0)
        goto LABEL_60;
      v12 = v70 - v69 - 8;
      if (v12 < 8)
      {
        v13 = 1;
        v14 = v69;
        do
        {
LABEL_57:
          v40 = *(_QWORD *)v14;
          v14 += 8;
          v13 *= v40;
        }
        while (v14 != v70);
        goto LABEL_58;
      }
      v35 = (v12 >> 3) + 1;
      v14 = &v69[8 * (v35 & 0x3FFFFFFFFFFFFFFELL)];
      v36 = v69 + 8;
      v37 = 1;
      v38 = v35 & 0x3FFFFFFFFFFFFFFELL;
      v39 = 1;
      do
      {
        v37 *= *(v36 - 1);
        v39 *= *v36;
        v36 += 2;
        v38 -= 2;
      }
      while (v38);
      v13 = v39 * v37;
      if (v35 != (v35 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_57;
LABEL_58:
      if (v13)
        nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<double>(double)::{lambda(unsigned char &)#1}>(&v67, *a2);
LABEL_60:
      if (v71)
      {
        v72 = v71;
        operator delete(v71);
      }
      if (v69)
      {
        v70 = v69;
        operator delete(v69);
      }
      v25 = v68;
      if (!v68)
        return;
      v41 = (unint64_t *)&v68->__shared_owners_;
      do
        v27 = __ldaxr(v41);
      while (__stlxr(v27 - 1, v41));
      goto LABEL_81;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v49, (uint64_t)a1);
      if (v52 == v51 || v49 == 0)
        goto LABEL_74;
      v16 = (char *)v52 - (_BYTE *)v51 - 8;
      if (v16 < 8)
      {
        v17 = 1;
        v18 = (uint64_t *)v51;
        do
        {
LABEL_71:
          v47 = *v18++;
          v17 *= v47;
        }
        while (v18 != v52);
        goto LABEL_72;
      }
      v42 = (v16 >> 3) + 1;
      v18 = (uint64_t *)((char *)v51 + 8 * (v42 & 0x3FFFFFFFFFFFFFFELL));
      v43 = (char *)v51 + 8;
      v44 = 1;
      v45 = v42 & 0x3FFFFFFFFFFFFFFELL;
      v46 = 1;
      do
      {
        v44 *= *(v43 - 1);
        v46 *= *v43;
        v43 += 2;
        v45 -= 2;
      }
      while (v45);
      v17 = v46 * v44;
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_71;
LABEL_72:
      if (v17)
        nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator+=<double>(double)::{lambda(float &)#1}>(&v49, *a2);
LABEL_74:
      if (v53)
      {
        v54 = v53;
        operator delete(v53);
      }
      if (v51)
      {
        v52 = (uint64_t *)v51;
        operator delete(v51);
      }
      v25 = v50;
      if (!v50)
        return;
      v48 = (unint64_t *)&v50->__shared_owners_;
      do
        v27 = __ldaxr(v48);
      while (__stlxr(v27 - 1, v48));
      goto LABEL_81;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v55, (uint64_t)a1);
      if (v58 == v57 || v55 == 0)
        goto LABEL_46;
      v8 = (char *)v58 - (_BYTE *)v57 - 8;
      if (v8 < 8)
      {
        v9 = 1;
        v10 = (uint64_t *)v57;
        do
        {
LABEL_43:
          v33 = *v10++;
          v9 *= v33;
        }
        while (v10 != v58);
        goto LABEL_44;
      }
      v28 = (v8 >> 3) + 1;
      v10 = (uint64_t *)((char *)v57 + 8 * (v28 & 0x3FFFFFFFFFFFFFFELL));
      v29 = (char *)v57 + 8;
      v30 = 1;
      v31 = v28 & 0x3FFFFFFFFFFFFFFELL;
      v32 = 1;
      do
      {
        v30 *= *(v29 - 1);
        v32 *= *v29;
        v29 += 2;
        v31 -= 2;
      }
      while (v31);
      v9 = v32 * v30;
      if (v28 != (v28 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_43;
LABEL_44:
      if (v9)
        nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator+=<double>(double)::{lambda(half &)#1}>(&v55, *a2);
LABEL_46:
      if (__p)
      {
        v60 = __p;
        operator delete(__p);
      }
      if (v57)
      {
        v58 = (uint64_t *)v57;
        operator delete(v57);
      }
      v25 = v56;
      if (v56)
      {
        v34 = (unint64_t *)&v56->__shared_owners_;
        do
          v27 = __ldaxr(v34);
        while (__stlxr(v27 - 1, v34));
LABEL_81:
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      return;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()();
  }
}

void sub_191221000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191221014(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_191221028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19122103C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912212B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<double>(double)::{lambda(unsigned char &)#1}>(_QWORD *a1, double a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  double v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  double v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;

  v2 = (char *)a1[2];
  v3 = (char *)a1[3];
  v4 = v3 - v2;
  if (v3 == v2 || !*a1)
    return;
  v6 = a2;
  if ((unint64_t)(v4 - 8) < 8)
  {
    v7 = 1;
    v8 = (char *)a1[2];
    do
    {
LABEL_8:
      v14 = *(_QWORD *)v8;
      v8 += 8;
      v7 *= v14;
    }
    while (v8 != v3);
    goto LABEL_9;
  }
  v9 = ((unint64_t)(v4 - 8) >> 3) + 1;
  v8 = &v2[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
  v10 = v2 + 8;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = v4 >> 3;
  if (v4 >> 3 == 3)
  {
    v24 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v25 = 0;
      v26 = a1[8];
      do
      {
        if (*((_QWORD *)v2 + 1))
        {
          v27 = 0;
          v28 = v26;
          do
          {
            if (*((_QWORD *)v2 + 2))
            {
              v30 = 0;
              v31 = v28;
              do
              {
                LOBYTE(a2) = *(_BYTE *)(*a1 + v31);
                a2 = v6 + (double)*(unint64_t *)&a2;
                *(_BYTE *)(*a1 + v31) = (int)a2;
                v29 = (_QWORD *)a1[5];
                v31 += v29[2];
                ++v30;
                v2 = (char *)a1[2];
              }
              while (v30 < *((_QWORD *)v2 + 2));
            }
            else
            {
              v29 = (_QWORD *)a1[5];
            }
            v28 += v29[1];
            ++v27;
          }
          while (v27 < *((_QWORD *)v2 + 1));
          v24 = *(_QWORD *)v2;
        }
        else
        {
          v29 = (_QWORD *)a1[5];
        }
        v26 += *v29;
        ++v25;
      }
      while (v25 < v24);
    }
  }
  else
  {
    if (v15 != 2)
    {
      if (v15 == 1)
      {
        if (*(_QWORD *)v2)
        {
          v16 = 0;
          v17 = a1[8];
          do
          {
            LOBYTE(a2) = *(_BYTE *)(*a1 + v17);
            a2 = v6 + (double)*(unint64_t *)&a2;
            *(_BYTE *)(*a1 + v17) = (int)a2;
            v17 += *(_QWORD *)a1[5];
            ++v16;
          }
          while (v16 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v4 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v32 = operator new(v3 - v2);
      bzero(v32, v4 & 0xFFFFFFFFFFFFFFF8);
      if (v15 <= 1)
        v34 = 1;
      else
        v34 = v4 >> 3;
      while (1)
      {
        v35 = a1[5];
        if (v34 < 2)
          break;
        v38 = 0;
        v39 = 0;
        v40 = (_QWORD *)(v35 + 8);
        v41 = v34 & 0xFFFFFFFFFFFFFFFELL;
        v42 = v32 + 1;
        do
        {
          v38 += *(v40 - 1) * *(v42 - 1);
          v39 += *v40 * *v42;
          v42 += 2;
          v40 += 2;
          v41 -= 2;
        }
        while (v41);
        v36 = v39 + v38;
        v37 = v34 & 0xFFFFFFFFFFFFFFFELL;
        if (v34 != (v34 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_47;
LABEL_49:
        LOBYTE(v33) = *(_BYTE *)(*a1 + v36);
        v33 = v6 + (double)*(unint64_t *)&v33;
        *(_BYTE *)(*a1 + v36) = (int)v33;
        if ((int)((unint64_t)v4 >> 3) >= 1)
        {
          v50 = a1[2];
          v51 = ((unint64_t)v4 >> 3) + 1;
          v52 = (unint64_t)v4 >> 3;
          while (1)
          {
            v53 = (v51 - 2);
            v54 = v32[v53] + 1;
            v32[v53] = v54;
            if (v54 < *(_QWORD *)(v50 + v53 * 8))
              break;
            v32[(v51 - 2)] = 0;
            LODWORD(v52) = v52 - 1;
            if ((unint64_t)--v51 <= 1)
              goto LABEL_55;
          }
          if ((int)v52 > 0)
            continue;
        }
LABEL_55:
        operator delete(v32);
        return;
      }
      v36 = 0;
      v37 = 0;
LABEL_47:
      v43 = v34 - v37;
      v44 = v37;
      v45 = (uint64_t *)(v35 + v44 * 8);
      v46 = &v32[v44];
      do
      {
        v48 = *v46++;
        v47 = v48;
        v49 = *v45++;
        v36 += v49 * v47;
        --v43;
      }
      while (v43);
      goto LABEL_49;
    }
    v18 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v19 = 0;
      v20 = a1[8];
      do
      {
        if (*((_QWORD *)v2 + 1))
        {
          v22 = 0;
          v23 = v20;
          do
          {
            LOBYTE(a2) = *(_BYTE *)(*a1 + v23);
            a2 = v6 + (double)*(unint64_t *)&a2;
            *(_BYTE *)(*a1 + v23) = (int)a2;
            v21 = (_QWORD *)a1[5];
            v23 += v21[1];
            ++v22;
            v2 = (char *)a1[2];
          }
          while (v22 < *((_QWORD *)v2 + 1));
          v18 = *(_QWORD *)v2;
        }
        else
        {
          v21 = (_QWORD *)a1[5];
        }
        v20 += *v21;
        ++v19;
      }
      while (v19 < v18);
    }
  }
}

void sub_1912216A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator+=<double>(double)::{lambda(int &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  float64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  int64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  unint64_t v53;
  uint64_t v54;
  int *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  float64x2_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  unint64_t v76;
  __int128 v77;
  int64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  unint64_t v82;
  uint64_t v83;
  int *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  uint64_t v104;
  unint64_t v105;

  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v56 = *v3;
    if (!*v3)
      return;
    v57 = 0;
    v58 = a1[8];
    v59 = v3[1];
    v60 = (uint64_t *)a1[5];
    v61 = *v60;
    v62 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v63 = v6 + 4 * v58 + 16;
    v64 = 4 * *v60;
    while (!v59)
    {
LABEL_38:
      v58 += v61;
      ++v57;
      v63 += v64;
      if (v57 == v56)
        return;
    }
    v65 = 0;
    v66 = v3[2];
    v67 = v60[1];
    v68 = v66 & 0xFFFFFFFFFFFFFFF8;
    v69 = v63;
    v70 = v58;
    while (1)
    {
      if (v66)
      {
        v71 = 0;
        v72 = v60[2];
        v73 = v70;
        if (v66 < 8)
        {
          v74 = a2;
        }
        else
        {
          v74 = a2;
          if (v72 == 1)
          {
            v73 = v70 + v68;
            v75 = v69;
            v76 = v66 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v77 = *(_OWORD *)(v75 - 16);
              v78.i64[0] = SDWORD2(v77);
              v78.i64[1] = SHIDWORD(v77);
              v79 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)v77;
              v78.i64[1] = SDWORD1(v77);
              v80 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)*(_QWORD *)(v75 + 8);
              v78.i64[1] = (int)HIDWORD(*(_OWORD *)v75);
              v81 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)*(_OWORD *)v75;
              v78.i64[1] = (int)HIDWORD(*(_QWORD *)v75);
              *(int32x4_t *)(v75 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v62, v80)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v62, v79)));
              *(int32x4_t *)v75 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v62, vcvtq_f64_s64(v78))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v62, v81)));
              v75 += 32;
              v76 -= 8;
            }
            while (v76);
            v71 = v66 & 0xFFFFFFFFFFFFFFF8;
            v74 = a2;
            if (v66 == v68)
              goto LABEL_41;
          }
        }
        v82 = v66 - v71;
        v83 = 4 * v72;
        v84 = (int *)(v6 + 4 * v73);
        do
        {
          *v84 = (int)(v74 + (double)*v84);
          v84 = (int *)((char *)v84 + v83);
          --v82;
        }
        while (v82);
      }
LABEL_41:
      v70 += v67;
      ++v65;
      v69 += 4 * v67;
      if (v65 == v59)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v32 = *v3;
    if (!*v3)
      return;
    v33 = 0;
    v34 = a1[8];
    v35 = v3[1];
    v36 = (uint64_t *)a1[5];
    v37 = *v36;
    v38 = v35 & 0xFFFFFFFFFFFFFFF8;
    v39 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v40 = v6 + 4 * v34 + 16;
    v41 = 4 * *v36;
    while (1)
    {
      if (v35)
      {
        v42 = 0;
        v43 = v36[1];
        v44 = v34;
        if (v35 < 8)
        {
          v45 = a2;
        }
        else
        {
          v45 = a2;
          if (v43 == 1)
          {
            v44 = v34 + v38;
            v46 = v40;
            v47 = v35 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v48 = *(_OWORD *)(v46 - 16);
              v49.i64[0] = SDWORD2(v48);
              v49.i64[1] = SHIDWORD(v48);
              v50 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)v48;
              v49.i64[1] = SDWORD1(v48);
              v51 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)*(_QWORD *)(v46 + 8);
              v49.i64[1] = (int)HIDWORD(*(_OWORD *)v46);
              v52 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)*(_OWORD *)v46;
              v49.i64[1] = (int)HIDWORD(*(_QWORD *)v46);
              *(int32x4_t *)(v46 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v39, v51)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v39, v50)));
              *(int32x4_t *)v46 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v39, vcvtq_f64_s64(v49))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v39, v52)));
              v46 += 32;
              v47 -= 8;
            }
            while (v47);
            v42 = v35 & 0xFFFFFFFFFFFFFFF8;
            v45 = a2;
            if (v35 == v38)
              goto LABEL_24;
          }
        }
        v53 = v35 - v42;
        v54 = 4 * v43;
        v55 = (int *)(v6 + 4 * v44);
        do
        {
          *v55 = (int)(v45 + (double)*v55);
          v55 = (int *)((char *)v55 + v54);
          --v53;
        }
        while (v53);
      }
LABEL_24:
      v34 += v37;
      ++v33;
      v40 += v41;
      if (v33 == v32)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v85 = operator new(v4);
    bzero(v85, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v86 = 1;
    else
      v86 = v4 >> 3;
    v87 = a1[5];
    while (v86 >= 2)
    {
      v90 = 0;
      v91 = 0;
      v92 = v86 & 0x1FFFFFFFFFFFFFFELL;
      v93 = (_QWORD *)(v87 + 8);
      v94 = v85 + 1;
      do
      {
        v90 += *(v93 - 1) * *(v94 - 1);
        v91 += *v93 * *v94;
        v94 += 2;
        v93 += 2;
        v92 -= 2;
      }
      while (v92);
      v88 = v91 + v90;
      v89 = v86 & 0x1FFFFFFFFFFFFFFELL;
      if (v86 != (v86 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      *(_DWORD *)(v6 + 4 * v88) = (int)(a2 + (double)*(int *)(v6 + 4 * v88));
      if ((int)(v4 >> 3) >= 1)
      {
        v102 = (v4 >> 3) + 1;
        v103 = v4 >> 3;
        while (1)
        {
          v104 = (v102 - 2);
          v105 = v85[v104] + 1;
          v85[v104] = v105;
          if (v105 < v3[v104])
            break;
          v85[(v102 - 2)] = 0;
          LODWORD(v103) = v103 - 1;
          if ((unint64_t)--v102 <= 1)
            goto LABEL_71;
        }
        if ((int)v103 > 0)
          continue;
      }
LABEL_71:
      operator delete(v85);
      return;
    }
    v88 = 0;
    v89 = 0;
LABEL_63:
    v95 = v86 - v89;
    v96 = v89;
    v97 = (uint64_t *)(v87 + 8 * v89);
    v98 = &v85[v96];
    do
    {
      v100 = *v98++;
      v99 = v100;
      v101 = *v97++;
      v88 += v101 * v99;
      --v95;
    }
    while (v95);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 8)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v22 = v6 + 4 * v18 + 16;
    v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)(v22 - 16);
      v25.i64[0] = SDWORD2(v24);
      v25.i64[1] = SHIDWORD(v24);
      v26 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)v24;
      v25.i64[1] = SDWORD1(v24);
      v27 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)*(_QWORD *)(v22 + 8);
      v25.i64[1] = (int)HIDWORD(*(_OWORD *)v22);
      v28 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)*(_OWORD *)v22;
      v25.i64[1] = (int)HIDWORD(*(_QWORD *)v22);
      *(int32x4_t *)(v22 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v21, v27)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v21, v26)));
      *(int32x4_t *)v22 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v21, vcvtq_f64_s64(v25))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v21, v28)));
      v22 += 32;
      v23 -= 8;
    }
    while (v23);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v29 = v16 - v17;
      v30 = 4 * v19;
      v31 = (int *)(v6 + 4 * v18);
      do
      {
        *v31 = (int)(a2 + (double)*v31);
        v31 = (int *)((char *)v31 + v30);
        --v29;
      }
      while (v29);
    }
  }
}

void sub_191221C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator+=<double>(double)::{lambda(half &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  unint64_t v23;
  unint64_t v42;
  uint64_t v43;
  __int16 *v44;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float64x2_t *v62;
  unint64_t v63;
  unint64_t v78;
  uint64_t v79;
  __int16 *v80;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  float64x2_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  float64x2_t *v103;
  unint64_t v104;
  unint64_t v119;
  uint64_t v120;
  __int16 *v121;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v146;
  size_t v147;
  uint64_t v148;
  unint64_t v149;

  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v84 = *v3;
    if (!*v3)
      return;
    v85 = 0;
    v86 = a1[8];
    v87 = v3[1];
    v88 = (uint64_t *)a1[5];
    v89 = *v88;
    v90 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v91 = (float64x2_t *)(v6 + 2 * v86);
    v92 = 2 * *v88;
    while (!v87)
    {
LABEL_38:
      v86 += v89;
      ++v85;
      v91 = (float64x2_t *)((char *)v91 + v92);
      if (v85 == v84)
        return;
    }
    v93 = 0;
    v94 = v3[2];
    v95 = v88[1];
    v96 = v94 & 0xFFFFFFFFFFFFFFF8;
    v97 = v91;
    v98 = v86;
    while (1)
    {
      if (v94)
      {
        v99 = 0;
        v100 = v88[2];
        v101 = v98;
        if (v94 < 8)
        {
          v102 = a2;
        }
        else
        {
          v102 = a2;
          if (v100 == 1)
          {
            v101 = v98 + v96;
            v103 = v97;
            v104 = v94 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q1 = *v103;
              _H2 = WORD1(*(_OWORD *)v103);
              __asm
              {
                FCVT            D2, H2
                FCVT            D3, H1
              }
              _Q3.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(*(_QWORD *)&v103->f64[0]);
              __asm { FCVT            D2, H2 }
              _H4 = WORD2(*(_QWORD *)&v103->f64[0]);
              __asm { FCVT            D4, H4 }
              _Q4.f64[1] = _D2;
              *(_QWORD *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
              LOWORD(_D2) = WORD1(_Q1.f64[0]);
              __asm
              {
                FCVT            D2, H2
                FCVT            D5, H1
              }
              _Q5.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(_Q1.f64[0]);
              __asm { FCVT            D2, H2 }
              LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
              __asm { FCVT            D1, H1 }
              _Q1.f64[1] = _D2;
              _Q1 = vaddq_f64(v90, _Q1);
              _Q2 = vaddq_f64(v90, _Q4);
              _Q3 = vaddq_f64(v90, _Q3);
              _Q4.f64[0] = _Q3.f64[1];
              __asm
              {
                FCVT            H4, D4
                FCVT            H3, D3
              }
              WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              __asm { FCVT            H4, D2 }
              WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
              _Q2 = vaddq_f64(v90, _Q5);
              __asm { FCVT            H4, D2 }
              LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              __asm { FCVT            H2, D1 }
              WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
              *v103++ = _Q3;
              v104 -= 8;
            }
            while (v104);
            v99 = v94 & 0xFFFFFFFFFFFFFFF8;
            v102 = a2;
            if (v94 == v96)
              goto LABEL_41;
          }
        }
        v119 = v94 - v99;
        v120 = 2 * v100;
        v121 = (__int16 *)(v6 + 2 * v101);
        do
        {
          _H1 = *v121;
          __asm { FCVT            D1, H1 }
          _D1 = v102 + _D1;
          __asm { FCVT            H1, D1 }
          *v121 = LOWORD(_D1);
          v121 = (__int16 *)((char *)v121 + v120);
          --v119;
        }
        while (v119);
      }
LABEL_41:
      v98 += v95;
      ++v93;
      v97 = (float64x2_t *)((char *)v97 + 2 * v95);
      if (v93 == v87)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v48 = *v3;
    if (!*v3)
      return;
    v49 = 0;
    v50 = a1[8];
    v51 = v3[1];
    v52 = (uint64_t *)a1[5];
    v53 = *v52;
    v54 = v51 & 0xFFFFFFFFFFFFFFF8;
    v55 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v56 = (float64x2_t *)(v6 + 2 * v50);
    v57 = 2 * *v52;
    while (1)
    {
      if (v51)
      {
        v58 = 0;
        v59 = v52[1];
        v60 = v50;
        if (v51 < 8)
        {
          v61 = a2;
        }
        else
        {
          v61 = a2;
          if (v59 == 1)
          {
            v60 = v50 + v54;
            v62 = v56;
            v63 = v51 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q1 = *v62;
              _H2 = WORD1(*(_OWORD *)v62);
              __asm
              {
                FCVT            D2, H2
                FCVT            D3, H1
              }
              _Q3.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(*(_QWORD *)&v62->f64[0]);
              __asm { FCVT            D2, H2 }
              _H4 = WORD2(*(_QWORD *)&v62->f64[0]);
              __asm { FCVT            D4, H4 }
              _Q4.f64[1] = _D2;
              *(_QWORD *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
              LOWORD(_D2) = WORD1(_Q1.f64[0]);
              __asm
              {
                FCVT            D2, H2
                FCVT            D5, H1
              }
              _Q5.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(_Q1.f64[0]);
              __asm { FCVT            D2, H2 }
              LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
              __asm { FCVT            D1, H1 }
              _Q1.f64[1] = _D2;
              _Q1 = vaddq_f64(v55, _Q1);
              _Q2 = vaddq_f64(v55, _Q4);
              _Q3 = vaddq_f64(v55, _Q3);
              _Q4.f64[0] = _Q3.f64[1];
              __asm
              {
                FCVT            H4, D4
                FCVT            H3, D3
              }
              WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              __asm { FCVT            H4, D2 }
              WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
              _Q2 = vaddq_f64(v55, _Q5);
              __asm { FCVT            H4, D2 }
              LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              __asm { FCVT            H2, D1 }
              WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
              *v62++ = _Q3;
              v63 -= 8;
            }
            while (v63);
            v58 = v51 & 0xFFFFFFFFFFFFFFF8;
            v61 = a2;
            if (v51 == v54)
              goto LABEL_24;
          }
        }
        v78 = v51 - v58;
        v79 = 2 * v59;
        v80 = (__int16 *)(v6 + 2 * v60);
        do
        {
          _H1 = *v80;
          __asm { FCVT            D1, H1 }
          _D1 = v61 + _D1;
          __asm { FCVT            H1, D1 }
          *v80 = LOWORD(_D1);
          v80 = (__int16 *)((char *)v80 + v79);
          --v78;
        }
        while (v78);
      }
LABEL_24:
      v50 += v53;
      ++v49;
      v56 = (float64x2_t *)((char *)v56 + v57);
      if (v49 == v48)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v125 = operator new(v4);
    bzero(v125, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v126 = 1;
    else
      v126 = v4 >> 3;
    v127 = a1[5];
    while (v126 >= 2)
    {
      v130 = 0;
      v131 = 0;
      v132 = v126 & 0x1FFFFFFFFFFFFFFELL;
      v133 = (_QWORD *)(v127 + 8);
      v134 = v125 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      v128 = v131 + v130;
      v129 = v126 & 0x1FFFFFFFFFFFFFFELL;
      if (v126 != (v126 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      v142 = 2 * v128;
      _H0 = *(_WORD *)(v6 + v142);
      __asm { FCVT            D0, H0 }
      _D0 = a2 + _D0;
      __asm { FCVT            H0, D0 }
      *(_WORD *)(v6 + v142) = LOWORD(_D0);
      if ((int)(v4 >> 3) >= 1)
      {
        v146 = (v4 >> 3) + 1;
        v147 = v4 >> 3;
        while (1)
        {
          v148 = (v146 - 2);
          v149 = v125[v148] + 1;
          v125[v148] = v149;
          if (v149 < v3[v148])
            break;
          v125[(v146 - 2)] = 0;
          LODWORD(v147) = v147 - 1;
          if ((unint64_t)--v146 <= 1)
            goto LABEL_71;
        }
        if ((int)v147 > 0)
          continue;
      }
LABEL_71:
      operator delete(v125);
      return;
    }
    v128 = 0;
    v129 = 0;
LABEL_63:
    v135 = v126 - v129;
    v136 = v129;
    v137 = (uint64_t *)(v127 + 8 * v129);
    v138 = &v125[v136];
    do
    {
      v140 = *v138++;
      v139 = v140;
      v141 = *v137++;
      v128 += v141 * v139;
      --v135;
    }
    while (v135);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 8)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v22 = (float64x2_t *)(v6 + 2 * v18);
    v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      _Q1 = *v22;
      _H2 = WORD1(*(_OWORD *)v22);
      __asm
      {
        FCVT            D2, H2
        FCVT            D3, H1
      }
      _Q3.f64[1] = _D2;
      LOWORD(_D2) = HIWORD(*(_QWORD *)&v22->f64[0]);
      __asm { FCVT            D2, H2 }
      _H4 = WORD2(*(_QWORD *)&v22->f64[0]);
      __asm { FCVT            D4, H4 }
      _Q4.f64[1] = _D2;
      *(_QWORD *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
      LOWORD(_D2) = WORD1(_Q1.f64[0]);
      __asm
      {
        FCVT            D2, H2
        FCVT            D5, H1
      }
      _Q5.f64[1] = _D2;
      LOWORD(_D2) = HIWORD(_Q1.f64[0]);
      __asm { FCVT            D2, H2 }
      LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
      __asm { FCVT            D1, H1 }
      _Q1.f64[1] = _D2;
      _Q1 = vaddq_f64(v21, _Q1);
      _Q2 = vaddq_f64(v21, _Q4);
      _Q3 = vaddq_f64(v21, _Q3);
      _Q4.f64[0] = _Q3.f64[1];
      __asm
      {
        FCVT            H4, D4
        FCVT            H3, D3
      }
      WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
      __asm { FCVT            H4, D2 }
      WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
      _Q2.f64[0] = _Q2.f64[1];
      __asm { FCVT            H2, D2 }
      HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
      _Q2 = vaddq_f64(v21, _Q5);
      __asm { FCVT            H4, D2 }
      LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
      _Q2.f64[0] = _Q2.f64[1];
      __asm { FCVT            H2, D2 }
      WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
      __asm { FCVT            H2, D1 }
      WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
      _Q1.f64[0] = _Q1.f64[1];
      __asm { FCVT            H1, D1 }
      HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
      *v22++ = _Q3;
      v23 -= 8;
    }
    while (v23);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v42 = v16 - v17;
      v43 = 2 * v19;
      v44 = (__int16 *)(v6 + 2 * v18);
      do
      {
        _H0 = *v44;
        __asm { FCVT            D0, H0 }
        _D0 = a2 + _D0;
        __asm { FCVT            H0, D0 }
        *v44 = LOWORD(_D0);
        v44 = (__int16 *)((char *)v44 + v43);
        --v42;
      }
      while (v42);
    }
  }
}

void sub_1912222D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator+=<double>(double)::{lambda(float &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t v21;
  float32x2_t *v22;
  unint64_t v23;
  float32x4_t v24;
  unint64_t v25;
  uint64_t v26;
  float *v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  float32x2_t *v43;
  unint64_t v44;
  float32x4_t v45;
  unint64_t v46;
  uint64_t v47;
  float *v48;
  float v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float32x2_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float32x2_t *v69;
  unint64_t v70;
  float32x4_t v71;
  unint64_t v72;
  uint64_t v73;
  float *v74;
  float v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  uint64_t v95;
  size_t v96;
  uint64_t v97;
  unint64_t v98;

  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v50 = *v3;
    if (!*v3)
      return;
    v51 = 0;
    v52 = a1[8];
    v53 = v3[1];
    v54 = (uint64_t *)a1[5];
    v55 = *v54;
    v56 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v57 = v6 + 4 * v52 + 16;
    v58 = 4 * *v54;
    while (!v53)
    {
LABEL_38:
      v52 += v55;
      ++v51;
      v57 += v58;
      if (v51 == v50)
        return;
    }
    v59 = 0;
    v60 = v3[2];
    v61 = v54[1];
    v62 = v60 & 0xFFFFFFFFFFFFFFF8;
    v63 = (float32x2_t *)v57;
    v64 = v52;
    while (1)
    {
      if (v60)
      {
        v65 = 0;
        v66 = v54[2];
        v67 = v64;
        if (v60 < 8)
        {
          v68 = a2;
        }
        else
        {
          v68 = a2;
          if (v66 == 1)
          {
            v67 = v64 + v62;
            v69 = v63;
            v70 = v60 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v71 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v56, vcvtq_f64_f32(*v69))), vaddq_f64(v56, vcvt_hight_f64_f32(*(float32x4_t *)v69->f32)));
              *(float32x4_t *)v69[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v56, vcvtq_f64_f32(v69[-2]))), vaddq_f64(v56, vcvt_hight_f64_f32(*(float32x4_t *)v69[-2].f32)));
              *(float32x4_t *)v69->f32 = v71;
              v69 += 4;
              v70 -= 8;
            }
            while (v70);
            v65 = v60 & 0xFFFFFFFFFFFFFFF8;
            v68 = a2;
            if (v60 == v62)
              goto LABEL_41;
          }
        }
        v72 = v60 - v65;
        v73 = 4 * v66;
        v74 = (float *)(v6 + 4 * v67);
        do
        {
          v75 = v68 + *v74;
          *v74 = v75;
          v74 = (float *)((char *)v74 + v73);
          --v72;
        }
        while (v72);
      }
LABEL_41:
      v64 += v61;
      ++v59;
      v63 = (float32x2_t *)((char *)v63 + 4 * v61);
      if (v59 == v53)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v29 = *v3;
    if (!*v3)
      return;
    v30 = 0;
    v31 = a1[8];
    v32 = v3[1];
    v33 = (uint64_t *)a1[5];
    v34 = *v33;
    v35 = v32 & 0xFFFFFFFFFFFFFFF8;
    v36 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v37 = v6 + 4 * v31 + 16;
    v38 = 4 * *v33;
    while (1)
    {
      if (v32)
      {
        v39 = 0;
        v40 = v33[1];
        v41 = v31;
        if (v32 < 8)
        {
          v42 = a2;
        }
        else
        {
          v42 = a2;
          if (v40 == 1)
          {
            v41 = v31 + v35;
            v43 = (float32x2_t *)v37;
            v44 = v32 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v45 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v36, vcvtq_f64_f32(*v43))), vaddq_f64(v36, vcvt_hight_f64_f32(*(float32x4_t *)v43->f32)));
              *(float32x4_t *)v43[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v36, vcvtq_f64_f32(v43[-2]))), vaddq_f64(v36, vcvt_hight_f64_f32(*(float32x4_t *)v43[-2].f32)));
              *(float32x4_t *)v43->f32 = v45;
              v43 += 4;
              v44 -= 8;
            }
            while (v44);
            v39 = v32 & 0xFFFFFFFFFFFFFFF8;
            v42 = a2;
            if (v32 == v35)
              goto LABEL_24;
          }
        }
        v46 = v32 - v39;
        v47 = 4 * v40;
        v48 = (float *)(v6 + 4 * v41);
        do
        {
          v49 = v42 + *v48;
          *v48 = v49;
          v48 = (float *)((char *)v48 + v47);
          --v46;
        }
        while (v46);
      }
LABEL_24:
      v31 += v34;
      ++v30;
      v37 += v38;
      if (v30 == v29)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v76 = operator new(v4);
    bzero(v76, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v77 = 1;
    else
      v77 = v4 >> 3;
    v78 = a1[5];
    while (v77 >= 2)
    {
      v81 = 0;
      v82 = 0;
      v83 = v77 & 0x1FFFFFFFFFFFFFFELL;
      v84 = (_QWORD *)(v78 + 8);
      v85 = v76 + 1;
      do
      {
        v81 += *(v84 - 1) * *(v85 - 1);
        v82 += *v84 * *v85;
        v85 += 2;
        v84 += 2;
        v83 -= 2;
      }
      while (v83);
      v79 = v82 + v81;
      v80 = v77 & 0x1FFFFFFFFFFFFFFELL;
      if (v77 != (v77 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      v93 = 4 * v79;
      v94 = a2 + *(float *)(v6 + v93);
      *(float *)(v6 + v93) = v94;
      if ((int)(v4 >> 3) >= 1)
      {
        v95 = (v4 >> 3) + 1;
        v96 = v4 >> 3;
        while (1)
        {
          v97 = (v95 - 2);
          v98 = v76[v97] + 1;
          v76[v97] = v98;
          if (v98 < v3[v97])
            break;
          v76[(v95 - 2)] = 0;
          LODWORD(v96) = v96 - 1;
          if ((unint64_t)--v95 <= 1)
            goto LABEL_71;
        }
        if ((int)v96 > 0)
          continue;
      }
LABEL_71:
      operator delete(v76);
      return;
    }
    v79 = 0;
    v80 = 0;
LABEL_63:
    v86 = v77 - v80;
    v87 = v80;
    v88 = (uint64_t *)(v78 + 8 * v80);
    v89 = &v76[v87];
    do
    {
      v91 = *v89++;
      v90 = v91;
      v92 = *v88++;
      v79 += v92 * v90;
      --v86;
    }
    while (v86);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 8)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v22 = (float32x2_t *)(v6 + 4 * v18 + 16);
    v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v21, vcvtq_f64_f32(*v22))), vaddq_f64(v21, vcvt_hight_f64_f32(*(float32x4_t *)v22->f32)));
      *(float32x4_t *)v22[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v21, vcvtq_f64_f32(v22[-2]))), vaddq_f64(v21, vcvt_hight_f64_f32(*(float32x4_t *)v22[-2].f32)));
      *(float32x4_t *)v22->f32 = v24;
      v22 += 4;
      v23 -= 8;
    }
    while (v23);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v25 = v16 - v17;
      v26 = 4 * v19;
      v27 = (float *)(v6 + 4 * v18);
      do
      {
        v28 = a2 + *v27;
        *v27 = v28;
        v27 = (float *)((char *)v27 + v26);
        --v25;
      }
      while (v25);
    }
  }
}

void sub_191222810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191222968(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19122297C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191222974);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1::$_1(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_191222B3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF508;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF508;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF508;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1::$_1((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191222D18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF508;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1::$_1((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unsigned __int8 v37;
  __int128 v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      v5 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(a1 + 41) = 1;
      v6 = *(_QWORD *)(a1 + 56);
      v34 = v5;
      v35 = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v36 = 0;
      v37 = 0;
      if ((uint64_t *)(a1 + 48) != &v34)
      {
        v9 = *(unint64_t **)(a1 + 64);
        v36 = v9;
        v37 = *(_BYTE *)(a1 + 72);
        if (v37 - 2 < 4 || v37 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      if (v34)
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      v13 = v36;
      v14 = v37;
      v15 = v37 - 2;
      if (v15 < 4 || v37 == 9)
      {
        do
          v17 = __ldaxr(v13);
        while (__stlxr(v17 + 1, v13));
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v34);
      if (*(_BYTE *)(a1 + 112))
      {
        if (*(_BYTE *)(a1 + 113))
        {
LABEL_29:
          v19 = *(_QWORD *)(a1 + 120);
          *(_BYTE *)(a1 + 113) = 1;
          v20 = *(_QWORD *)(a1 + 128);
          v34 = v19;
          v35 = v20;
          if (v20)
          {
            v21 = (unint64_t *)(v20 + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v36 = 0;
          v37 = 0;
          if ((uint64_t *)(a1 + 120) != &v34)
          {
            v23 = *(unint64_t **)(a1 + 136);
            v36 = v23;
            v37 = *(_BYTE *)(a1 + 144);
            if (v37 - 2 < 4 || v37 == 9)
            {
              do
                v25 = __ldaxr(v23);
              while (__stlxr(v25 + 1, v23));
            }
          }
LABEL_42:
          if (v34)
            nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
          v27 = v36;
          v28 = v37;
          if (v37 - 2 >= 4)
          {
            if (v37 == 9)
            {
              do
                v30 = __ldaxr(v27);
              while (__stlxr(v30 + 1, v27));
              nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v34);
              if ((_DWORD)v14 == 9)
                goto LABEL_51;
              goto LABEL_54;
            }
          }
          else
          {
            do
              v29 = __ldaxr(v27);
            while (__stlxr(v29 + 1, v27));
          }
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v34);
          if ((_DWORD)v14 == 9)
          {
            do
LABEL_51:
              v31 = __ldaxr(v13);
            while (__stlxr(v31 + 1, v13));
LABEL_52:
            __asm { BR              X9 }
          }
          if ((_DWORD)v28 != 9)
          {
            if (v15 > 3)
              goto LABEL_52;
            goto LABEL_51;
          }
          do
LABEL_54:
            v32 = __ldaxr(v27);
          while (__stlxr(v32 + 1, v27));
          nitro::ndarray_container::negate((nitro::ndarray_container *)(v27 + 1));
          do
            v33 = __ldaxr(v27);
          while (__stlxr(v33 + 1, v27));
          __asm { BR              X9 }
        }
        v18 = *(_QWORD *)(a1 + 104);
        if (v18)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(v38, v18, a2);
          nitro::nitro_variable::operator=(a1 + 120, v38);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v38);
          goto LABEL_29;
        }
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 104);
        if (v26)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v26 + 48))(&v34, v26, a2);
          goto LABEL_42;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v38, v4, a2);
      nitro::nitro_variable::operator=(a1 + 48, v38);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v38);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(&v34, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_191224060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  int v3;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  void *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  va_list va;

  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  switch(v3)
  {
    case 0:
      do
      {
        v5 = __ldaxr((unint64_t *)v2);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unint64_t *)v2));
      if (v6)
        v7 = 1;
      else
        v7 = v2 == 0;
      if (v7)
        goto LABEL_46;
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      v8 = v2;
      v9 = 0x1012C404EF22A49;
      goto LABEL_58;
    case 1:
      do
      {
        v16 = __ldaxr((unint64_t *)v2);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unint64_t *)v2));
      if (v17)
        v18 = 1;
      else
        v18 = v2 == 0;
      if (v18)
        goto LABEL_46;
      v19 = *(void **)(v2 + 8);
      if (v19)
      {
        *(_QWORD *)(v2 + 16) = v19;
        operator delete(v19);
      }
      v8 = v2;
      v9 = 0x1080C409938AC02;
      goto LABEL_58;
    case 2:
      do
      {
        v10 = __ldaxr((unint64_t *)v2);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unint64_t *)v2));
      if (v11)
        v12 = 1;
      else
        v12 = v2 == 0;
      if (v12)
        goto LABEL_46;
      v13 = *(_QWORD *)(v2 + 8);
      if (!v13)
        goto LABEL_39;
      v14 = *(_QWORD *)(v2 + 16);
      v15 = *(void **)(v2 + 8);
      if (v14 != v13)
      {
        do
        {
          v14 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v2 + 24, v14);
        }
        while (v14 != v13);
        v15 = *(void **)(v2 + 8);
      }
      *(_QWORD *)(v2 + 16) = v13;
      goto LABEL_38;
    case 3:
      do
      {
        v20 = __ldaxr((unint64_t *)v2);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unint64_t *)v2));
      if (v21)
        v22 = 1;
      else
        v22 = v2 == 0;
      if (v22)
        goto LABEL_46;
      v23 = *(_QWORD *)(v2 + 8);
      if (!v23)
        goto LABEL_39;
      v24 = *(_QWORD *)(v2 + 16);
      v25 = *(void **)(v2 + 8);
      if (v24 != v23)
      {
        do
          v24 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v24 - 32);
        while (v24 != v23);
        v25 = *(void **)(v2 + 8);
      }
      *(_QWORD *)(v2 + 16) = v23;
      v15 = v25;
LABEL_38:
      operator delete(v15);
LABEL_39:
      v8 = v2;
      v9 = 0x1020C405E66F15BLL;
      goto LABEL_58;
    case 7:
      do
      {
        v26 = __ldaxr((unint64_t *)v2);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unint64_t *)v2));
      if (v27)
        v28 = 1;
      else
        v28 = v2 == 0;
      if (v28)
        goto LABEL_46;
      v29 = *(void **)(v2 + 56);
      if (v29)
      {
        *(_QWORD *)(v2 + 64) = v29;
        operator delete(v29);
        v30 = *(void **)(v2 + 32);
        if (!v30)
        {
LABEL_49:
          v31 = *(std::__shared_weak_count **)(v2 + 24);
          if (!v31)
            goto LABEL_57;
          goto LABEL_53;
        }
      }
      else
      {
        v30 = *(void **)(v2 + 32);
        if (!v30)
          goto LABEL_49;
      }
      *(_QWORD *)(v2 + 40) = v30;
      operator delete(v30);
      v31 = *(std::__shared_weak_count **)(v2 + 24);
      if (!v31)
      {
LABEL_57:
        v8 = v2;
        v9 = 0x10B0C4002311774;
LABEL_58:
        MEMORY[0x19401CD90](v8, v9);
        _Unwind_Resume(a1);
      }
LABEL_53:
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      goto LABEL_57;
    default:
LABEL_46:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_1"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>(_DWORD *a1, double *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unint64_t *p_shared_owners;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  unint64_t *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  uint64_t *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  void *v61;
  uint64_t *v62;
  void *__p;
  void *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void *v67;
  uint64_t *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  char *v73;
  char *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v65, (uint64_t)a1);
      if (v68 == v67 || v65 == 0)
        goto LABEL_48;
      v4 = (char *)v68 - (_BYTE *)v67 - 8;
      if (v4 < 8)
      {
        v5 = 1;
        v6 = (uint64_t *)v67;
        do
        {
LABEL_44:
          v34 = *v6++;
          v5 *= v34;
        }
        while (v6 != v68);
        goto LABEL_45;
      }
      v29 = (v4 >> 3) + 1;
      v6 = (uint64_t *)((char *)v67 + 8 * (v29 & 0x3FFFFFFFFFFFFFFELL));
      v30 = (char *)v67 + 8;
      v31 = 1;
      v32 = v29 & 0x3FFFFFFFFFFFFFFELL;
      v33 = 1;
      do
      {
        v31 *= *(v30 - 1);
        v33 *= *v30;
        v30 += 2;
        v32 -= 2;
      }
      while (v32);
      v5 = v33 * v31;
      if (v29 != (v29 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_44;
LABEL_45:
      if (v5)
      {
        v35 = *a2;
        v77 = 0;
        v78 = 0;
        v79 = 0;
        if ((char *)v68 - (_BYTE *)v67 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator-=<double>(double)::{lambda(int &)#1}>(&v65, v35);
      }
LABEL_48:
      if (v69)
      {
        v70 = v69;
        operator delete(v69);
      }
      if (v67)
      {
        v68 = (uint64_t *)v67;
        operator delete(v67);
      }
      v26 = v66;
      if (!v66)
        return;
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      goto LABEL_85;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v71, (uint64_t)a1);
      if (v74 == v73 || v71 == 0)
        goto LABEL_63;
      v12 = v74 - v73 - 8;
      if (v12 < 8)
      {
        v13 = 1;
        v14 = v73;
        do
        {
LABEL_59:
          v42 = *(_QWORD *)v14;
          v14 += 8;
          v13 *= v42;
        }
        while (v14 != v74);
        goto LABEL_60;
      }
      v37 = (v12 >> 3) + 1;
      v14 = &v73[8 * (v37 & 0x3FFFFFFFFFFFFFFELL)];
      v38 = v73 + 8;
      v39 = 1;
      v40 = v37 & 0x3FFFFFFFFFFFFFFELL;
      v41 = 1;
      do
      {
        v39 *= *(v38 - 1);
        v41 *= *v38;
        v38 += 2;
        v40 -= 2;
      }
      while (v40);
      v13 = v41 * v39;
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_59;
LABEL_60:
      if (v13)
      {
        v43 = *a2;
        v77 = 0;
        v78 = 0;
        v79 = 0;
        if (v74 - v73 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<double>(double)::{lambda(unsigned char &)#1}>(&v71, v43);
      }
LABEL_63:
      if (v75)
      {
        v76 = v75;
        operator delete(v75);
      }
      if (v73)
      {
        v74 = v73;
        operator delete(v73);
      }
      v26 = v72;
      if (!v72)
        return;
      v44 = (unint64_t *)&v72->__shared_owners_;
      do
        v28 = __ldaxr(v44);
      while (__stlxr(v28 - 1, v44));
      goto LABEL_85;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v53, (uint64_t)a1);
      if (v56 == v55 || v53 == 0)
        goto LABEL_78;
      v16 = (char *)v56 - (_BYTE *)v55 - 8;
      if (v16 < 8)
      {
        v17 = 1;
        v18 = (uint64_t *)v55;
        do
        {
LABEL_74:
          v50 = *v18++;
          v17 *= v50;
        }
        while (v18 != v56);
        goto LABEL_75;
      }
      v45 = (v16 >> 3) + 1;
      v18 = (uint64_t *)((char *)v55 + 8 * (v45 & 0x3FFFFFFFFFFFFFFELL));
      v46 = (char *)v55 + 8;
      v47 = 1;
      v48 = v45 & 0x3FFFFFFFFFFFFFFELL;
      v49 = 1;
      do
      {
        v47 *= *(v46 - 1);
        v49 *= *v46;
        v46 += 2;
        v48 -= 2;
      }
      while (v48);
      v17 = v49 * v47;
      if (v45 != (v45 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_74;
LABEL_75:
      if (v17)
      {
        v51 = *a2;
        v77 = 0;
        v78 = 0;
        v79 = 0;
        if ((char *)v56 - (_BYTE *)v55 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator-=<double>(double)::{lambda(float &)#1}>(&v53, v51);
      }
LABEL_78:
      if (v57)
      {
        v58 = v57;
        operator delete(v57);
      }
      if (v55)
      {
        v56 = (uint64_t *)v55;
        operator delete(v55);
      }
      v26 = v54;
      if (!v54)
        return;
      v52 = (unint64_t *)&v54->__shared_owners_;
      do
        v28 = __ldaxr(v52);
      while (__stlxr(v28 - 1, v52));
      goto LABEL_85;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v59, (uint64_t)a1);
      if (v62 == v61 || v59 == 0)
        goto LABEL_33;
      v8 = (char *)v62 - (_BYTE *)v61 - 8;
      if (v8 < 8)
      {
        v9 = 1;
        v10 = (uint64_t *)v61;
        do
        {
LABEL_29:
          v24 = *v10++;
          v9 *= v24;
        }
        while (v10 != v62);
        goto LABEL_30;
      }
      v19 = (v8 >> 3) + 1;
      v10 = (uint64_t *)((char *)v61 + 8 * (v19 & 0x3FFFFFFFFFFFFFFELL));
      v20 = (char *)v61 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v9 = v23 * v21;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_29;
LABEL_30:
      if (v9)
      {
        v25 = *a2;
        v77 = 0;
        v78 = 0;
        v79 = 0;
        if ((char *)v62 - (_BYTE *)v61 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator-=<double>(double)::{lambda(half &)#1}>(&v59, v25);
      }
LABEL_33:
      if (__p)
      {
        v64 = __p;
        operator delete(__p);
      }
      if (v61)
      {
        v62 = (uint64_t *)v61;
        operator delete(v61);
      }
      v26 = v60;
      if (v60)
      {
        v27 = (unint64_t *)&v60->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
LABEL_85:
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      return;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()();
  }
}

void sub_191224C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nitro::ndarray<float>::~ndarray(va);
  _Unwind_Resume(a1);
}

void sub_191224C58(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(_QWORD *)(v1 - 32) = v3;
    operator delete(v3);
  }
  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_191224C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;

  v30 = *(void **)(v28 - 40);
  if (v30)
  {
    *(_QWORD *)(v28 - 32) = v30;
    operator delete(v30);
  }
  nitro::ndarray<float>::~ndarray(&a28);
  _Unwind_Resume(a1);
}

void sub_191224CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  void *v13;
  va_list va;

  va_start(va, a11);
  v13 = *(void **)(v11 - 40);
  if (v13)
  {
    *(_QWORD *)(v11 - 32) = v13;
    operator delete(v13);
  }
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191224F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<double>(double)::{lambda(unsigned char &)#1}>(_QWORD *a1, double a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  double v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  double v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;

  v2 = (char *)a1[2];
  v3 = (char *)a1[3];
  v4 = v3 - v2;
  if (v3 == v2 || !*a1)
    return;
  v6 = a2;
  if ((unint64_t)(v4 - 8) < 8)
  {
    v7 = 1;
    v8 = (char *)a1[2];
    do
    {
LABEL_8:
      v14 = *(_QWORD *)v8;
      v8 += 8;
      v7 *= v14;
    }
    while (v8 != v3);
    goto LABEL_9;
  }
  v9 = ((unint64_t)(v4 - 8) >> 3) + 1;
  v8 = &v2[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
  v10 = v2 + 8;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = v4 >> 3;
  if (v4 >> 3 == 3)
  {
    v24 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v25 = 0;
      v26 = a1[8];
      do
      {
        if (*((_QWORD *)v2 + 1))
        {
          v27 = 0;
          v28 = v26;
          do
          {
            if (*((_QWORD *)v2 + 2))
            {
              v30 = 0;
              v31 = v28;
              do
              {
                LOBYTE(a2) = *(_BYTE *)(*a1 + v31);
                a2 = (double)*(unint64_t *)&a2 - v6;
                *(_BYTE *)(*a1 + v31) = (int)a2;
                v29 = (_QWORD *)a1[5];
                v31 += v29[2];
                ++v30;
                v2 = (char *)a1[2];
              }
              while (v30 < *((_QWORD *)v2 + 2));
            }
            else
            {
              v29 = (_QWORD *)a1[5];
            }
            v28 += v29[1];
            ++v27;
          }
          while (v27 < *((_QWORD *)v2 + 1));
          v24 = *(_QWORD *)v2;
        }
        else
        {
          v29 = (_QWORD *)a1[5];
        }
        v26 += *v29;
        ++v25;
      }
      while (v25 < v24);
    }
  }
  else
  {
    if (v15 != 2)
    {
      if (v15 == 1)
      {
        if (*(_QWORD *)v2)
        {
          v16 = 0;
          v17 = a1[8];
          do
          {
            LOBYTE(a2) = *(_BYTE *)(*a1 + v17);
            a2 = (double)*(unint64_t *)&a2 - v6;
            *(_BYTE *)(*a1 + v17) = (int)a2;
            v17 += *(_QWORD *)a1[5];
            ++v16;
          }
          while (v16 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v4 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v32 = operator new(v3 - v2);
      bzero(v32, v4 & 0xFFFFFFFFFFFFFFF8);
      if (v15 <= 1)
        v34 = 1;
      else
        v34 = v4 >> 3;
      while (1)
      {
        v35 = a1[5];
        if (v34 < 2)
          break;
        v38 = 0;
        v39 = 0;
        v40 = (_QWORD *)(v35 + 8);
        v41 = v34 & 0xFFFFFFFFFFFFFFFELL;
        v42 = v32 + 1;
        do
        {
          v38 += *(v40 - 1) * *(v42 - 1);
          v39 += *v40 * *v42;
          v42 += 2;
          v40 += 2;
          v41 -= 2;
        }
        while (v41);
        v36 = v39 + v38;
        v37 = v34 & 0xFFFFFFFFFFFFFFFELL;
        if (v34 != (v34 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_47;
LABEL_49:
        LOBYTE(v33) = *(_BYTE *)(*a1 + v36);
        v33 = (double)*(unint64_t *)&v33 - v6;
        *(_BYTE *)(*a1 + v36) = (int)v33;
        if ((int)((unint64_t)v4 >> 3) >= 1)
        {
          v50 = a1[2];
          v51 = ((unint64_t)v4 >> 3) + 1;
          v52 = (unint64_t)v4 >> 3;
          while (1)
          {
            v53 = (v51 - 2);
            v54 = v32[v53] + 1;
            v32[v53] = v54;
            if (v54 < *(_QWORD *)(v50 + v53 * 8))
              break;
            v32[(v51 - 2)] = 0;
            LODWORD(v52) = v52 - 1;
            if ((unint64_t)--v51 <= 1)
              goto LABEL_55;
          }
          if ((int)v52 > 0)
            continue;
        }
LABEL_55:
        operator delete(v32);
        return;
      }
      v36 = 0;
      v37 = 0;
LABEL_47:
      v43 = v34 - v37;
      v44 = v37;
      v45 = (uint64_t *)(v35 + v44 * 8);
      v46 = &v32[v44];
      do
      {
        v48 = *v46++;
        v47 = v48;
        v49 = *v45++;
        v36 += v49 * v47;
        --v43;
      }
      while (v43);
      goto LABEL_49;
    }
    v18 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v19 = 0;
      v20 = a1[8];
      do
      {
        if (*((_QWORD *)v2 + 1))
        {
          v22 = 0;
          v23 = v20;
          do
          {
            LOBYTE(a2) = *(_BYTE *)(*a1 + v23);
            a2 = (double)*(unint64_t *)&a2 - v6;
            *(_BYTE *)(*a1 + v23) = (int)a2;
            v21 = (_QWORD *)a1[5];
            v23 += v21[1];
            ++v22;
            v2 = (char *)a1[2];
          }
          while (v22 < *((_QWORD *)v2 + 1));
          v18 = *(_QWORD *)v2;
        }
        else
        {
          v21 = (_QWORD *)a1[5];
        }
        v20 += *v21;
        ++v19;
      }
      while (v19 < v18);
    }
  }
}

void sub_19122531C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator-=<double>(double)::{lambda(int &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  float64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  int64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  unint64_t v53;
  uint64_t v54;
  int *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  float64x2_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  unint64_t v76;
  __int128 v77;
  int64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  unint64_t v82;
  uint64_t v83;
  int *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  uint64_t v104;
  unint64_t v105;

  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v56 = *v3;
    if (!*v3)
      return;
    v57 = 0;
    v58 = a1[8];
    v59 = v3[1];
    v60 = (uint64_t *)a1[5];
    v61 = *v60;
    v62 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v63 = v6 + 4 * v58 + 16;
    v64 = 4 * *v60;
    while (!v59)
    {
LABEL_38:
      v58 += v61;
      ++v57;
      v63 += v64;
      if (v57 == v56)
        return;
    }
    v65 = 0;
    v66 = v3[2];
    v67 = v60[1];
    v68 = v66 & 0xFFFFFFFFFFFFFFF8;
    v69 = v63;
    v70 = v58;
    while (1)
    {
      if (v66)
      {
        v71 = 0;
        v72 = v60[2];
        v73 = v70;
        if (v66 < 8)
        {
          v74 = a2;
        }
        else
        {
          v74 = a2;
          if (v72 == 1)
          {
            v73 = v70 + v68;
            v75 = v69;
            v76 = v66 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v77 = *(_OWORD *)(v75 - 16);
              v78.i64[0] = SDWORD2(v77);
              v78.i64[1] = SHIDWORD(v77);
              v79 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)v77;
              v78.i64[1] = SDWORD1(v77);
              v80 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)*(_QWORD *)(v75 + 8);
              v78.i64[1] = (int)HIDWORD(*(_OWORD *)v75);
              v81 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)*(_OWORD *)v75;
              v78.i64[1] = (int)HIDWORD(*(_QWORD *)v75);
              *(int32x4_t *)(v75 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(v80, v62)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v79, v62)));
              *(int32x4_t *)v75 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(vcvtq_f64_s64(v78), v62)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v81, v62)));
              v75 += 32;
              v76 -= 8;
            }
            while (v76);
            v71 = v66 & 0xFFFFFFFFFFFFFFF8;
            v74 = a2;
            if (v66 == v68)
              goto LABEL_41;
          }
        }
        v82 = v66 - v71;
        v83 = 4 * v72;
        v84 = (int *)(v6 + 4 * v73);
        do
        {
          *v84 = (int)((double)*v84 - v74);
          v84 = (int *)((char *)v84 + v83);
          --v82;
        }
        while (v82);
      }
LABEL_41:
      v70 += v67;
      ++v65;
      v69 += 4 * v67;
      if (v65 == v59)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v32 = *v3;
    if (!*v3)
      return;
    v33 = 0;
    v34 = a1[8];
    v35 = v3[1];
    v36 = (uint64_t *)a1[5];
    v37 = *v36;
    v38 = v35 & 0xFFFFFFFFFFFFFFF8;
    v39 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v40 = v6 + 4 * v34 + 16;
    v41 = 4 * *v36;
    while (1)
    {
      if (v35)
      {
        v42 = 0;
        v43 = v36[1];
        v44 = v34;
        if (v35 < 8)
        {
          v45 = a2;
        }
        else
        {
          v45 = a2;
          if (v43 == 1)
          {
            v44 = v34 + v38;
            v46 = v40;
            v47 = v35 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v48 = *(_OWORD *)(v46 - 16);
              v49.i64[0] = SDWORD2(v48);
              v49.i64[1] = SHIDWORD(v48);
              v50 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)v48;
              v49.i64[1] = SDWORD1(v48);
              v51 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)*(_QWORD *)(v46 + 8);
              v49.i64[1] = (int)HIDWORD(*(_OWORD *)v46);
              v52 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)*(_OWORD *)v46;
              v49.i64[1] = (int)HIDWORD(*(_QWORD *)v46);
              *(int32x4_t *)(v46 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(v51, v39)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v50, v39)));
              *(int32x4_t *)v46 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(vcvtq_f64_s64(v49), v39)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v52, v39)));
              v46 += 32;
              v47 -= 8;
            }
            while (v47);
            v42 = v35 & 0xFFFFFFFFFFFFFFF8;
            v45 = a2;
            if (v35 == v38)
              goto LABEL_24;
          }
        }
        v53 = v35 - v42;
        v54 = 4 * v43;
        v55 = (int *)(v6 + 4 * v44);
        do
        {
          *v55 = (int)((double)*v55 - v45);
          v55 = (int *)((char *)v55 + v54);
          --v53;
        }
        while (v53);
      }
LABEL_24:
      v34 += v37;
      ++v33;
      v40 += v41;
      if (v33 == v32)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v85 = operator new(v4);
    bzero(v85, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v86 = 1;
    else
      v86 = v4 >> 3;
    v87 = a1[5];
    while (v86 >= 2)
    {
      v90 = 0;
      v91 = 0;
      v92 = v86 & 0x1FFFFFFFFFFFFFFELL;
      v93 = (_QWORD *)(v87 + 8);
      v94 = v85 + 1;
      do
      {
        v90 += *(v93 - 1) * *(v94 - 1);
        v91 += *v93 * *v94;
        v94 += 2;
        v93 += 2;
        v92 -= 2;
      }
      while (v92);
      v88 = v91 + v90;
      v89 = v86 & 0x1FFFFFFFFFFFFFFELL;
      if (v86 != (v86 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      *(_DWORD *)(v6 + 4 * v88) = (int)((double)*(int *)(v6 + 4 * v88) - a2);
      if ((int)(v4 >> 3) >= 1)
      {
        v102 = (v4 >> 3) + 1;
        v103 = v4 >> 3;
        while (1)
        {
          v104 = (v102 - 2);
          v105 = v85[v104] + 1;
          v85[v104] = v105;
          if (v105 < v3[v104])
            break;
          v85[(v102 - 2)] = 0;
          LODWORD(v103) = v103 - 1;
          if ((unint64_t)--v102 <= 1)
            goto LABEL_71;
        }
        if ((int)v103 > 0)
          continue;
      }
LABEL_71:
      operator delete(v85);
      return;
    }
    v88 = 0;
    v89 = 0;
LABEL_63:
    v95 = v86 - v89;
    v96 = v89;
    v97 = (uint64_t *)(v87 + 8 * v89);
    v98 = &v85[v96];
    do
    {
      v100 = *v98++;
      v99 = v100;
      v101 = *v97++;
      v88 += v101 * v99;
      --v95;
    }
    while (v95);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 8)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v22 = v6 + 4 * v18 + 16;
    v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)(v22 - 16);
      v25.i64[0] = SDWORD2(v24);
      v25.i64[1] = SHIDWORD(v24);
      v26 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)v24;
      v25.i64[1] = SDWORD1(v24);
      v27 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)*(_QWORD *)(v22 + 8);
      v25.i64[1] = (int)HIDWORD(*(_OWORD *)v22);
      v28 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)*(_OWORD *)v22;
      v25.i64[1] = (int)HIDWORD(*(_QWORD *)v22);
      *(int32x4_t *)(v22 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(v27, v21)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v26, v21)));
      *(int32x4_t *)v22 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(vcvtq_f64_s64(v25), v21)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v28, v21)));
      v22 += 32;
      v23 -= 8;
    }
    while (v23);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v29 = v16 - v17;
      v30 = 4 * v19;
      v31 = (int *)(v6 + 4 * v18);
      do
      {
        *v31 = (int)((double)*v31 - a2);
        v31 = (int *)((char *)v31 + v30);
        --v29;
      }
      while (v29);
    }
  }
}

void sub_1912258B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator-=<double>(double)::{lambda(half &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  unint64_t v23;
  unint64_t v42;
  uint64_t v43;
  __int16 *v44;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  float64x2_t v55;
  float64x2_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float64x2_t *v62;
  unint64_t v63;
  unint64_t v78;
  uint64_t v79;
  __int16 *v80;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  float64x2_t v90;
  float64x2_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  float64x2_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  float64x2_t *v103;
  unint64_t v104;
  unint64_t v119;
  uint64_t v120;
  __int16 *v121;
  _QWORD *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v146;
  size_t v147;
  uint64_t v148;
  unint64_t v149;

  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v84 = *v3;
    if (!*v3)
      return;
    v85 = 0;
    v86 = a1[8];
    v87 = v3[1];
    v88 = (uint64_t *)a1[5];
    v89 = *v88;
    v90 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v91 = (float64x2_t *)(v6 + 2 * v86);
    v92 = 2 * *v88;
    while (!v87)
    {
LABEL_38:
      v86 += v89;
      ++v85;
      v91 = (float64x2_t *)((char *)v91 + v92);
      if (v85 == v84)
        return;
    }
    v93 = 0;
    v94 = v3[2];
    v95 = v88[1];
    v96 = v94 & 0xFFFFFFFFFFFFFFF8;
    v97 = v91;
    v98 = v86;
    while (1)
    {
      if (v94)
      {
        v99 = 0;
        v100 = v88[2];
        v101 = v98;
        if (v94 < 8)
        {
          v102 = a2;
        }
        else
        {
          v102 = a2;
          if (v100 == 1)
          {
            v101 = v98 + v96;
            v103 = v97;
            v104 = v94 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q1 = *v103;
              _H2 = WORD1(*(_OWORD *)v103);
              __asm
              {
                FCVT            D2, H2
                FCVT            D3, H1
              }
              _Q3.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(*(_QWORD *)&v103->f64[0]);
              __asm { FCVT            D2, H2 }
              _H4 = WORD2(*(_QWORD *)&v103->f64[0]);
              __asm { FCVT            D4, H4 }
              _Q4.f64[1] = _D2;
              *(_QWORD *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
              LOWORD(_D2) = WORD1(_Q1.f64[0]);
              __asm
              {
                FCVT            D2, H2
                FCVT            D5, H1
              }
              _Q5.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(_Q1.f64[0]);
              __asm { FCVT            D2, H2 }
              LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
              __asm { FCVT            D1, H1 }
              _Q1.f64[1] = _D2;
              _Q1 = vsubq_f64(_Q1, v90);
              _Q2 = vsubq_f64(_Q4, v90);
              _Q3 = vsubq_f64(_Q3, v90);
              _Q4.f64[0] = _Q3.f64[1];
              __asm
              {
                FCVT            H4, D4
                FCVT            H3, D3
              }
              WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              __asm { FCVT            H4, D2 }
              WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
              _Q2 = vsubq_f64(_Q5, v90);
              __asm { FCVT            H4, D2 }
              LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              __asm { FCVT            H2, D1 }
              WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
              *v103++ = _Q3;
              v104 -= 8;
            }
            while (v104);
            v99 = v94 & 0xFFFFFFFFFFFFFFF8;
            v102 = a2;
            if (v94 == v96)
              goto LABEL_41;
          }
        }
        v119 = v94 - v99;
        v120 = 2 * v100;
        v121 = (__int16 *)(v6 + 2 * v101);
        do
        {
          _H1 = *v121;
          __asm { FCVT            D1, H1 }
          _D1 = _D1 - v102;
          __asm { FCVT            H1, D1 }
          *v121 = LOWORD(_D1);
          v121 = (__int16 *)((char *)v121 + v120);
          --v119;
        }
        while (v119);
      }
LABEL_41:
      v98 += v95;
      ++v93;
      v97 = (float64x2_t *)((char *)v97 + 2 * v95);
      if (v93 == v87)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v48 = *v3;
    if (!*v3)
      return;
    v49 = 0;
    v50 = a1[8];
    v51 = v3[1];
    v52 = (uint64_t *)a1[5];
    v53 = *v52;
    v54 = v51 & 0xFFFFFFFFFFFFFFF8;
    v55 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v56 = (float64x2_t *)(v6 + 2 * v50);
    v57 = 2 * *v52;
    while (1)
    {
      if (v51)
      {
        v58 = 0;
        v59 = v52[1];
        v60 = v50;
        if (v51 < 8)
        {
          v61 = a2;
        }
        else
        {
          v61 = a2;
          if (v59 == 1)
          {
            v60 = v50 + v54;
            v62 = v56;
            v63 = v51 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q1 = *v62;
              _H2 = WORD1(*(_OWORD *)v62);
              __asm
              {
                FCVT            D2, H2
                FCVT            D3, H1
              }
              _Q3.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(*(_QWORD *)&v62->f64[0]);
              __asm { FCVT            D2, H2 }
              _H4 = WORD2(*(_QWORD *)&v62->f64[0]);
              __asm { FCVT            D4, H4 }
              _Q4.f64[1] = _D2;
              *(_QWORD *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
              LOWORD(_D2) = WORD1(_Q1.f64[0]);
              __asm
              {
                FCVT            D2, H2
                FCVT            D5, H1
              }
              _Q5.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(_Q1.f64[0]);
              __asm { FCVT            D2, H2 }
              LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
              __asm { FCVT            D1, H1 }
              _Q1.f64[1] = _D2;
              _Q1 = vsubq_f64(_Q1, v55);
              _Q2 = vsubq_f64(_Q4, v55);
              _Q3 = vsubq_f64(_Q3, v55);
              _Q4.f64[0] = _Q3.f64[1];
              __asm
              {
                FCVT            H4, D4
                FCVT            H3, D3
              }
              WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              __asm { FCVT            H4, D2 }
              WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
              _Q2 = vsubq_f64(_Q5, v55);
              __asm { FCVT            H4, D2 }
              LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              __asm { FCVT            H2, D1 }
              WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
              *v62++ = _Q3;
              v63 -= 8;
            }
            while (v63);
            v58 = v51 & 0xFFFFFFFFFFFFFFF8;
            v61 = a2;
            if (v51 == v54)
              goto LABEL_24;
          }
        }
        v78 = v51 - v58;
        v79 = 2 * v59;
        v80 = (__int16 *)(v6 + 2 * v60);
        do
        {
          _H1 = *v80;
          __asm { FCVT            D1, H1 }
          _D1 = _D1 - v61;
          __asm { FCVT            H1, D1 }
          *v80 = LOWORD(_D1);
          v80 = (__int16 *)((char *)v80 + v79);
          --v78;
        }
        while (v78);
      }
LABEL_24:
      v50 += v53;
      ++v49;
      v56 = (float64x2_t *)((char *)v56 + v57);
      if (v49 == v48)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v125 = operator new(v4);
    bzero(v125, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v126 = 1;
    else
      v126 = v4 >> 3;
    v127 = a1[5];
    while (v126 >= 2)
    {
      v130 = 0;
      v131 = 0;
      v132 = v126 & 0x1FFFFFFFFFFFFFFELL;
      v133 = (_QWORD *)(v127 + 8);
      v134 = v125 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      v128 = v131 + v130;
      v129 = v126 & 0x1FFFFFFFFFFFFFFELL;
      if (v126 != (v126 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      v142 = 2 * v128;
      _H0 = *(_WORD *)(v6 + v142);
      __asm { FCVT            D0, H0 }
      _D0 = _D0 - a2;
      __asm { FCVT            H0, D0 }
      *(_WORD *)(v6 + v142) = LOWORD(_D0);
      if ((int)(v4 >> 3) >= 1)
      {
        v146 = (v4 >> 3) + 1;
        v147 = v4 >> 3;
        while (1)
        {
          v148 = (v146 - 2);
          v149 = v125[v148] + 1;
          v125[v148] = v149;
          if (v149 < v3[v148])
            break;
          v125[(v146 - 2)] = 0;
          LODWORD(v147) = v147 - 1;
          if ((unint64_t)--v146 <= 1)
            goto LABEL_71;
        }
        if ((int)v147 > 0)
          continue;
      }
LABEL_71:
      operator delete(v125);
      return;
    }
    v128 = 0;
    v129 = 0;
LABEL_63:
    v135 = v126 - v129;
    v136 = v129;
    v137 = (uint64_t *)(v127 + 8 * v129);
    v138 = &v125[v136];
    do
    {
      v140 = *v138++;
      v139 = v140;
      v141 = *v137++;
      v128 += v141 * v139;
      --v135;
    }
    while (v135);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 8)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v22 = (float64x2_t *)(v6 + 2 * v18);
    v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      _Q1 = *v22;
      _H2 = WORD1(*(_OWORD *)v22);
      __asm
      {
        FCVT            D2, H2
        FCVT            D3, H1
      }
      _Q3.f64[1] = _D2;
      LOWORD(_D2) = HIWORD(*(_QWORD *)&v22->f64[0]);
      __asm { FCVT            D2, H2 }
      _H4 = WORD2(*(_QWORD *)&v22->f64[0]);
      __asm { FCVT            D4, H4 }
      _Q4.f64[1] = _D2;
      *(_QWORD *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
      LOWORD(_D2) = WORD1(_Q1.f64[0]);
      __asm
      {
        FCVT            D2, H2
        FCVT            D5, H1
      }
      _Q5.f64[1] = _D2;
      LOWORD(_D2) = HIWORD(_Q1.f64[0]);
      __asm { FCVT            D2, H2 }
      LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
      __asm { FCVT            D1, H1 }
      _Q1.f64[1] = _D2;
      _Q1 = vsubq_f64(_Q1, v21);
      _Q2 = vsubq_f64(_Q4, v21);
      _Q3 = vsubq_f64(_Q3, v21);
      _Q4.f64[0] = _Q3.f64[1];
      __asm
      {
        FCVT            H4, D4
        FCVT            H3, D3
      }
      WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
      __asm { FCVT            H4, D2 }
      WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
      _Q2.f64[0] = _Q2.f64[1];
      __asm { FCVT            H2, D2 }
      HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
      _Q2 = vsubq_f64(_Q5, v21);
      __asm { FCVT            H4, D2 }
      LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
      _Q2.f64[0] = _Q2.f64[1];
      __asm { FCVT            H2, D2 }
      WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
      __asm { FCVT            H2, D1 }
      WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
      _Q1.f64[0] = _Q1.f64[1];
      __asm { FCVT            H1, D1 }
      HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
      *v22++ = _Q3;
      v23 -= 8;
    }
    while (v23);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v42 = v16 - v17;
      v43 = 2 * v19;
      v44 = (__int16 *)(v6 + 2 * v18);
      do
      {
        _H0 = *v44;
        __asm { FCVT            D0, H0 }
        _D0 = _D0 - a2;
        __asm { FCVT            H0, D0 }
        *v44 = LOWORD(_D0);
        v44 = (__int16 *)((char *)v44 + v43);
        --v42;
      }
      while (v42);
    }
  }
}

void sub_191225F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator-=<double>(double)::{lambda(float &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t v21;
  float32x2_t *v22;
  unint64_t v23;
  float32x4_t v24;
  unint64_t v25;
  uint64_t v26;
  float *v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  float32x2_t *v43;
  unint64_t v44;
  float32x4_t v45;
  unint64_t v46;
  uint64_t v47;
  float *v48;
  float v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float32x2_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float32x2_t *v69;
  unint64_t v70;
  float32x4_t v71;
  unint64_t v72;
  uint64_t v73;
  float *v74;
  float v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  uint64_t v95;
  size_t v96;
  uint64_t v97;
  unint64_t v98;

  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v50 = *v3;
    if (!*v3)
      return;
    v51 = 0;
    v52 = a1[8];
    v53 = v3[1];
    v54 = (uint64_t *)a1[5];
    v55 = *v54;
    v56 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v57 = v6 + 4 * v52 + 16;
    v58 = 4 * *v54;
    while (!v53)
    {
LABEL_38:
      v52 += v55;
      ++v51;
      v57 += v58;
      if (v51 == v50)
        return;
    }
    v59 = 0;
    v60 = v3[2];
    v61 = v54[1];
    v62 = v60 & 0xFFFFFFFFFFFFFFF8;
    v63 = (float32x2_t *)v57;
    v64 = v52;
    while (1)
    {
      if (v60)
      {
        v65 = 0;
        v66 = v54[2];
        v67 = v64;
        if (v60 < 8)
        {
          v68 = a2;
        }
        else
        {
          v68 = a2;
          if (v66 == 1)
          {
            v67 = v64 + v62;
            v69 = v63;
            v70 = v60 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v71 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*v69), v56)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v69->f32), v56));
              *(float32x4_t *)v69[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(v69[-2]), v56)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v69[-2].f32), v56));
              *(float32x4_t *)v69->f32 = v71;
              v69 += 4;
              v70 -= 8;
            }
            while (v70);
            v65 = v60 & 0xFFFFFFFFFFFFFFF8;
            v68 = a2;
            if (v60 == v62)
              goto LABEL_41;
          }
        }
        v72 = v60 - v65;
        v73 = 4 * v66;
        v74 = (float *)(v6 + 4 * v67);
        do
        {
          v75 = *v74 - v68;
          *v74 = v75;
          v74 = (float *)((char *)v74 + v73);
          --v72;
        }
        while (v72);
      }
LABEL_41:
      v64 += v61;
      ++v59;
      v63 = (float32x2_t *)((char *)v63 + 4 * v61);
      if (v59 == v53)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v29 = *v3;
    if (!*v3)
      return;
    v30 = 0;
    v31 = a1[8];
    v32 = v3[1];
    v33 = (uint64_t *)a1[5];
    v34 = *v33;
    v35 = v32 & 0xFFFFFFFFFFFFFFF8;
    v36 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v37 = v6 + 4 * v31 + 16;
    v38 = 4 * *v33;
    while (1)
    {
      if (v32)
      {
        v39 = 0;
        v40 = v33[1];
        v41 = v31;
        if (v32 < 8)
        {
          v42 = a2;
        }
        else
        {
          v42 = a2;
          if (v40 == 1)
          {
            v41 = v31 + v35;
            v43 = (float32x2_t *)v37;
            v44 = v32 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v45 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*v43), v36)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v43->f32), v36));
              *(float32x4_t *)v43[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(v43[-2]), v36)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v43[-2].f32), v36));
              *(float32x4_t *)v43->f32 = v45;
              v43 += 4;
              v44 -= 8;
            }
            while (v44);
            v39 = v32 & 0xFFFFFFFFFFFFFFF8;
            v42 = a2;
            if (v32 == v35)
              goto LABEL_24;
          }
        }
        v46 = v32 - v39;
        v47 = 4 * v40;
        v48 = (float *)(v6 + 4 * v41);
        do
        {
          v49 = *v48 - v42;
          *v48 = v49;
          v48 = (float *)((char *)v48 + v47);
          --v46;
        }
        while (v46);
      }
LABEL_24:
      v31 += v34;
      ++v30;
      v37 += v38;
      if (v30 == v29)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v76 = operator new(v4);
    bzero(v76, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v77 = 1;
    else
      v77 = v4 >> 3;
    v78 = a1[5];
    while (v77 >= 2)
    {
      v81 = 0;
      v82 = 0;
      v83 = v77 & 0x1FFFFFFFFFFFFFFELL;
      v84 = (_QWORD *)(v78 + 8);
      v85 = v76 + 1;
      do
      {
        v81 += *(v84 - 1) * *(v85 - 1);
        v82 += *v84 * *v85;
        v85 += 2;
        v84 += 2;
        v83 -= 2;
      }
      while (v83);
      v79 = v82 + v81;
      v80 = v77 & 0x1FFFFFFFFFFFFFFELL;
      if (v77 != (v77 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      v93 = 4 * v79;
      v94 = *(float *)(v6 + v93) - a2;
      *(float *)(v6 + v93) = v94;
      if ((int)(v4 >> 3) >= 1)
      {
        v95 = (v4 >> 3) + 1;
        v96 = v4 >> 3;
        while (1)
        {
          v97 = (v95 - 2);
          v98 = v76[v97] + 1;
          v76[v97] = v98;
          if (v98 < v3[v97])
            break;
          v76[(v95 - 2)] = 0;
          LODWORD(v96) = v96 - 1;
          if ((unint64_t)--v95 <= 1)
            goto LABEL_71;
        }
        if ((int)v96 > 0)
          continue;
      }
LABEL_71:
      operator delete(v76);
      return;
    }
    v79 = 0;
    v80 = 0;
LABEL_63:
    v86 = v77 - v80;
    v87 = v80;
    v88 = (uint64_t *)(v78 + 8 * v80);
    v89 = &v76[v87];
    do
    {
      v91 = *v89++;
      v90 = v91;
      v92 = *v88++;
      v79 += v92 * v90;
      --v86;
    }
    while (v86);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 8)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v22 = (float32x2_t *)(v6 + 4 * v18 + 16);
    v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*v22), v21)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v22->f32), v21));
      *(float32x4_t *)v22[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(v22[-2]), v21)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v22[-2].f32), v21));
      *(float32x4_t *)v22->f32 = v24;
      v22 += 4;
      v23 -= 8;
    }
    while (v23);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v25 = v16 - v17;
      v26 = 4 * v19;
      v27 = (float *)(v6 + 4 * v18);
      do
      {
        v28 = *v27 - a2;
        *v27 = v28;
        v27 = (float *)((char *)v27 + v26);
        --v25;
      }
      while (v25);
    }
  }
}

void sub_191226484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912265DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912265F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912265E8);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2::$_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_1912267B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF560;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF560;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF560;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2::$_2((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19122698C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF560;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2::$_2((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unsigned __int8 v36;
  __int128 v37[2];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      v5 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(a1 + 41) = 1;
      v6 = *(_QWORD *)(a1 + 56);
      v33 = v5;
      v34 = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v35 = 0;
      v36 = 0;
      if ((uint64_t *)(a1 + 48) != &v33)
      {
        v9 = *(unint64_t **)(a1 + 64);
        v35 = v9;
        v36 = *(_BYTE *)(a1 + 72);
        if (v36 - 2 < 4 || v36 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      if (v33)
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      v13 = v35;
      v14 = v36;
      v15 = v36 - 2;
      if (v15 < 4 || v36 == 9)
      {
        do
          v17 = __ldaxr(v13);
        while (__stlxr(v17 + 1, v13));
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
      if (*(_BYTE *)(a1 + 112))
      {
        if (*(_BYTE *)(a1 + 113))
        {
LABEL_29:
          v19 = *(_QWORD *)(a1 + 120);
          *(_BYTE *)(a1 + 113) = 1;
          v20 = *(_QWORD *)(a1 + 128);
          v33 = v19;
          v34 = v20;
          if (v20)
          {
            v21 = (unint64_t *)(v20 + 8);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          v35 = 0;
          v36 = 0;
          if ((uint64_t *)(a1 + 120) != &v33)
          {
            v23 = *(unint64_t **)(a1 + 136);
            v35 = v23;
            v36 = *(_BYTE *)(a1 + 144);
            if (v36 - 2 < 4 || v36 == 9)
            {
              do
                v25 = __ldaxr(v23);
              while (__stlxr(v25 + 1, v23));
            }
          }
LABEL_42:
          if (v33)
            nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
          v27 = v35;
          v28 = v36;
          if (v36 - 2 >= 4)
          {
            if (v36 == 9)
            {
              do
                v30 = __ldaxr(v27);
              while (__stlxr(v30 + 1, v27));
              nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
              if ((_DWORD)v14 == 9)
                goto LABEL_51;
              goto LABEL_54;
            }
          }
          else
          {
            do
              v29 = __ldaxr(v27);
            while (__stlxr(v29 + 1, v27));
          }
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
          if ((_DWORD)v14 == 9)
          {
            do
LABEL_51:
              v31 = __ldaxr(v13);
            while (__stlxr(v31 + 1, v13));
LABEL_52:
            __asm { BR              X9 }
          }
          if ((_DWORD)v28 != 9)
          {
            if (v15 > 3)
              goto LABEL_52;
            goto LABEL_51;
          }
          do
LABEL_54:
            v32 = __ldaxr(v27);
          while (__stlxr(v32 + 1, v27));
          __asm { BR              X9 }
        }
        v18 = *(_QWORD *)(a1 + 104);
        if (v18)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(v37, v18, a2);
          nitro::nitro_variable::operator=(a1 + 120, v37);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v37);
          goto LABEL_29;
        }
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 104);
        if (v26)
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v26 + 48))(&v33, v26, a2);
          goto LABEL_42;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v37, v4, a2);
      nitro::nitro_variable::operator=(a1 + 48, v37);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v37);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(&v33, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_191227C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  int v3;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  void *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  va_list va;

  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  switch(v3)
  {
    case 0:
      do
      {
        v5 = __ldaxr((unint64_t *)v2);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unint64_t *)v2));
      if (v6)
        v7 = 1;
      else
        v7 = v2 == 0;
      if (v7)
        goto LABEL_2;
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      v8 = v2;
      v9 = 0x1012C404EF22A49;
      goto LABEL_58;
    case 1:
      do
      {
        v16 = __ldaxr((unint64_t *)v2);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, (unint64_t *)v2));
      if (v17)
        v18 = 1;
      else
        v18 = v2 == 0;
      if (v18)
        goto LABEL_2;
      v19 = *(void **)(v2 + 8);
      if (v19)
      {
        *(_QWORD *)(v2 + 16) = v19;
        operator delete(v19);
      }
      v8 = v2;
      v9 = 0x1080C409938AC02;
      goto LABEL_58;
    case 2:
      do
      {
        v10 = __ldaxr((unint64_t *)v2);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unint64_t *)v2));
      if (v11)
        v12 = 1;
      else
        v12 = v2 == 0;
      if (v12)
        goto LABEL_2;
      v13 = *(_QWORD *)(v2 + 8);
      if (!v13)
        goto LABEL_41;
      v14 = *(_QWORD *)(v2 + 16);
      v15 = *(void **)(v2 + 8);
      if (v14 != v13)
      {
        do
        {
          v14 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v2 + 24, v14);
        }
        while (v14 != v13);
        v15 = *(void **)(v2 + 8);
      }
      *(_QWORD *)(v2 + 16) = v13;
      goto LABEL_40;
    case 3:
      do
      {
        v20 = __ldaxr((unint64_t *)v2);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unint64_t *)v2));
      if (v21)
        v22 = 1;
      else
        v22 = v2 == 0;
      if (v22)
        goto LABEL_2;
      v23 = *(_QWORD *)(v2 + 8);
      if (!v23)
        goto LABEL_41;
      v24 = *(_QWORD *)(v2 + 16);
      v25 = *(void **)(v2 + 8);
      if (v24 != v23)
      {
        do
          v24 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v24 - 32);
        while (v24 != v23);
        v25 = *(void **)(v2 + 8);
      }
      *(_QWORD *)(v2 + 16) = v23;
      v15 = v25;
LABEL_40:
      operator delete(v15);
LABEL_41:
      v8 = v2;
      v9 = 0x1020C405E66F15BLL;
      goto LABEL_58;
    case 7:
      do
      {
        v26 = __ldaxr((unint64_t *)v2);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unint64_t *)v2));
      if (v27)
        v28 = 1;
      else
        v28 = v2 == 0;
      if (v28)
        goto LABEL_2;
      v29 = *(void **)(v2 + 56);
      if (v29)
      {
        *(_QWORD *)(v2 + 64) = v29;
        operator delete(v29);
        v30 = *(void **)(v2 + 32);
        if (!v30)
        {
LABEL_49:
          v31 = *(std::__shared_weak_count **)(v2 + 24);
          if (!v31)
            goto LABEL_57;
          goto LABEL_53;
        }
      }
      else
      {
        v30 = *(void **)(v2 + 32);
        if (!v30)
          goto LABEL_49;
      }
      *(_QWORD *)(v2 + 40) = v30;
      operator delete(v30);
      v31 = *(std::__shared_weak_count **)(v2 + 24);
      if (!v31)
      {
LABEL_57:
        v8 = v2;
        v9 = 0x10B0C4002311774;
LABEL_58:
        MEMORY[0x19401CD90](v8, v9);
        _Unwind_Resume(a1);
      }
LABEL_53:
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      goto LABEL_57;
    default:
LABEL_2:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_2"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_2" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_2")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>(_DWORD *a1, double *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *v51;
  uint64_t *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *v57;
  uint64_t *v58;
  void *__p;
  void *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  char *v69;
  char *v70;
  void *v71;
  void *v72;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v61, (uint64_t)a1);
      if (v64 == v63 || v61 == 0)
        goto LABEL_32;
      v4 = v64 - v63 - 8;
      if (v4 < 8)
      {
        v5 = 1;
        v6 = v63;
        do
        {
LABEL_29:
          v24 = *(_QWORD *)v6;
          v6 += 8;
          v5 *= v24;
        }
        while (v6 != v64);
        goto LABEL_30;
      }
      v19 = (v4 >> 3) + 1;
      v6 = &v63[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      v20 = v63 + 8;
      v21 = 1;
      v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      v5 = v23 * v21;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_29;
LABEL_30:
      if (v5)
        nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator*=<double>(double)::{lambda(int &)#1}>(&v61, *a2);
LABEL_32:
      if (v65)
      {
        v66 = v65;
        operator delete(v65);
      }
      if (v63)
      {
        v64 = v63;
        operator delete(v63);
      }
      v25 = v62;
      if (!v62)
        return;
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      goto LABEL_81;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v67, (uint64_t)a1);
      if (v70 == v69 || v67 == 0)
        goto LABEL_60;
      v12 = v70 - v69 - 8;
      if (v12 < 8)
      {
        v13 = 1;
        v14 = v69;
        do
        {
LABEL_57:
          v40 = *(_QWORD *)v14;
          v14 += 8;
          v13 *= v40;
        }
        while (v14 != v70);
        goto LABEL_58;
      }
      v35 = (v12 >> 3) + 1;
      v14 = &v69[8 * (v35 & 0x3FFFFFFFFFFFFFFELL)];
      v36 = v69 + 8;
      v37 = 1;
      v38 = v35 & 0x3FFFFFFFFFFFFFFELL;
      v39 = 1;
      do
      {
        v37 *= *(v36 - 1);
        v39 *= *v36;
        v36 += 2;
        v38 -= 2;
      }
      while (v38);
      v13 = v39 * v37;
      if (v35 != (v35 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_57;
LABEL_58:
      if (v13)
        nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<double>(double)::{lambda(unsigned char &)#1}>(&v67, *a2);
LABEL_60:
      if (v71)
      {
        v72 = v71;
        operator delete(v71);
      }
      if (v69)
      {
        v70 = v69;
        operator delete(v69);
      }
      v25 = v68;
      if (!v68)
        return;
      v41 = (unint64_t *)&v68->__shared_owners_;
      do
        v27 = __ldaxr(v41);
      while (__stlxr(v27 - 1, v41));
      goto LABEL_81;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v49, (uint64_t)a1);
      if (v52 == v51 || v49 == 0)
        goto LABEL_74;
      v16 = (char *)v52 - (_BYTE *)v51 - 8;
      if (v16 < 8)
      {
        v17 = 1;
        v18 = (uint64_t *)v51;
        do
        {
LABEL_71:
          v47 = *v18++;
          v17 *= v47;
        }
        while (v18 != v52);
        goto LABEL_72;
      }
      v42 = (v16 >> 3) + 1;
      v18 = (uint64_t *)((char *)v51 + 8 * (v42 & 0x3FFFFFFFFFFFFFFELL));
      v43 = (char *)v51 + 8;
      v44 = 1;
      v45 = v42 & 0x3FFFFFFFFFFFFFFELL;
      v46 = 1;
      do
      {
        v44 *= *(v43 - 1);
        v46 *= *v43;
        v43 += 2;
        v45 -= 2;
      }
      while (v45);
      v17 = v46 * v44;
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_71;
LABEL_72:
      if (v17)
        nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator*=<double>(double)::{lambda(float &)#1}>(&v49, *a2);
LABEL_74:
      if (v53)
      {
        v54 = v53;
        operator delete(v53);
      }
      if (v51)
      {
        v52 = (uint64_t *)v51;
        operator delete(v51);
      }
      v25 = v50;
      if (!v50)
        return;
      v48 = (unint64_t *)&v50->__shared_owners_;
      do
        v27 = __ldaxr(v48);
      while (__stlxr(v27 - 1, v48));
      goto LABEL_81;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v55, (uint64_t)a1);
      if (v58 == v57 || v55 == 0)
        goto LABEL_46;
      v8 = (char *)v58 - (_BYTE *)v57 - 8;
      if (v8 < 8)
      {
        v9 = 1;
        v10 = (uint64_t *)v57;
        do
        {
LABEL_43:
          v33 = *v10++;
          v9 *= v33;
        }
        while (v10 != v58);
        goto LABEL_44;
      }
      v28 = (v8 >> 3) + 1;
      v10 = (uint64_t *)((char *)v57 + 8 * (v28 & 0x3FFFFFFFFFFFFFFELL));
      v29 = (char *)v57 + 8;
      v30 = 1;
      v31 = v28 & 0x3FFFFFFFFFFFFFFELL;
      v32 = 1;
      do
      {
        v30 *= *(v29 - 1);
        v32 *= *v29;
        v29 += 2;
        v31 -= 2;
      }
      while (v31);
      v9 = v32 * v30;
      if (v28 != (v28 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_43;
LABEL_44:
      if (v9)
        nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator*=<double>(double)::{lambda(half &)#1}>(&v55, *a2);
LABEL_46:
      if (__p)
      {
        v60 = __p;
        operator delete(__p);
      }
      if (v57)
      {
        v58 = (uint64_t *)v57;
        operator delete(v57);
      }
      v25 = v56;
      if (v56)
      {
        v34 = (unint64_t *)&v56->__shared_owners_;
        do
          v27 = __ldaxr(v34);
        while (__stlxr(v27 - 1, v34));
LABEL_81:
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      return;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()();
  }
}

void sub_1912286C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1912286D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1912286EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191228700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191228978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<double>(double)::{lambda(unsigned char &)#1}>(_QWORD *a1, double a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  double v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  double v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;

  v2 = (char *)a1[2];
  v3 = (char *)a1[3];
  v4 = v3 - v2;
  if (v3 == v2 || !*a1)
    return;
  v6 = a2;
  if ((unint64_t)(v4 - 8) < 8)
  {
    v7 = 1;
    v8 = (char *)a1[2];
    do
    {
LABEL_8:
      v14 = *(_QWORD *)v8;
      v8 += 8;
      v7 *= v14;
    }
    while (v8 != v3);
    goto LABEL_9;
  }
  v9 = ((unint64_t)(v4 - 8) >> 3) + 1;
  v8 = &v2[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
  v10 = v2 + 8;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = v4 >> 3;
  if (v4 >> 3 == 3)
  {
    v24 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v25 = 0;
      v26 = a1[8];
      do
      {
        if (*((_QWORD *)v2 + 1))
        {
          v27 = 0;
          v28 = v26;
          do
          {
            if (*((_QWORD *)v2 + 2))
            {
              v30 = 0;
              v31 = v28;
              do
              {
                LOBYTE(a2) = *(_BYTE *)(*a1 + v31);
                a2 = v6 * (double)*(unint64_t *)&a2;
                *(_BYTE *)(*a1 + v31) = (int)a2;
                v29 = (_QWORD *)a1[5];
                v31 += v29[2];
                ++v30;
                v2 = (char *)a1[2];
              }
              while (v30 < *((_QWORD *)v2 + 2));
            }
            else
            {
              v29 = (_QWORD *)a1[5];
            }
            v28 += v29[1];
            ++v27;
          }
          while (v27 < *((_QWORD *)v2 + 1));
          v24 = *(_QWORD *)v2;
        }
        else
        {
          v29 = (_QWORD *)a1[5];
        }
        v26 += *v29;
        ++v25;
      }
      while (v25 < v24);
    }
  }
  else
  {
    if (v15 != 2)
    {
      if (v15 == 1)
      {
        if (*(_QWORD *)v2)
        {
          v16 = 0;
          v17 = a1[8];
          do
          {
            LOBYTE(a2) = *(_BYTE *)(*a1 + v17);
            a2 = v6 * (double)*(unint64_t *)&a2;
            *(_BYTE *)(*a1 + v17) = (int)a2;
            v17 += *(_QWORD *)a1[5];
            ++v16;
          }
          while (v16 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v4 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v32 = operator new(v3 - v2);
      bzero(v32, v4 & 0xFFFFFFFFFFFFFFF8);
      if (v15 <= 1)
        v34 = 1;
      else
        v34 = v4 >> 3;
      while (1)
      {
        v35 = a1[5];
        if (v34 < 2)
          break;
        v38 = 0;
        v39 = 0;
        v40 = (_QWORD *)(v35 + 8);
        v41 = v34 & 0xFFFFFFFFFFFFFFFELL;
        v42 = v32 + 1;
        do
        {
          v38 += *(v40 - 1) * *(v42 - 1);
          v39 += *v40 * *v42;
          v42 += 2;
          v40 += 2;
          v41 -= 2;
        }
        while (v41);
        v36 = v39 + v38;
        v37 = v34 & 0xFFFFFFFFFFFFFFFELL;
        if (v34 != (v34 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_47;
LABEL_49:
        LOBYTE(v33) = *(_BYTE *)(*a1 + v36);
        v33 = v6 * (double)*(unint64_t *)&v33;
        *(_BYTE *)(*a1 + v36) = (int)v33;
        if ((int)((unint64_t)v4 >> 3) >= 1)
        {
          v50 = a1[2];
          v51 = ((unint64_t)v4 >> 3) + 1;
          v52 = (unint64_t)v4 >> 3;
          while (1)
          {
            v53 = (v51 - 2);
            v54 = v32[v53] + 1;
            v32[v53] = v54;
            if (v54 < *(_QWORD *)(v50 + v53 * 8))
              break;
            v32[(v51 - 2)] = 0;
            LODWORD(v52) = v52 - 1;
            if ((unint64_t)--v51 <= 1)
              goto LABEL_55;
          }
          if ((int)v52 > 0)
            continue;
        }
LABEL_55:
        operator delete(v32);
        return;
      }
      v36 = 0;
      v37 = 0;
LABEL_47:
      v43 = v34 - v37;
      v44 = v37;
      v45 = (uint64_t *)(v35 + v44 * 8);
      v46 = &v32[v44];
      do
      {
        v48 = *v46++;
        v47 = v48;
        v49 = *v45++;
        v36 += v49 * v47;
        --v43;
      }
      while (v43);
      goto LABEL_49;
    }
    v18 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v19 = 0;
      v20 = a1[8];
      do
      {
        if (*((_QWORD *)v2 + 1))
        {
          v22 = 0;
          v23 = v20;
          do
          {
            LOBYTE(a2) = *(_BYTE *)(*a1 + v23);
            a2 = v6 * (double)*(unint64_t *)&a2;
            *(_BYTE *)(*a1 + v23) = (int)a2;
            v21 = (_QWORD *)a1[5];
            v23 += v21[1];
            ++v22;
            v2 = (char *)a1[2];
          }
          while (v22 < *((_QWORD *)v2 + 1));
          v18 = *(_QWORD *)v2;
        }
        else
        {
          v21 = (_QWORD *)a1[5];
        }
        v20 += *v21;
        ++v19;
      }
      while (v19 < v18);
    }
  }
}

void sub_191228D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator*=<double>(double)::{lambda(int &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  int64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  int64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  unint64_t v51;
  uint64_t v52;
  int *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  int64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  unint64_t v79;
  uint64_t v80;
  int *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  uint64_t v101;
  unint64_t v102;

  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v54 = *v3;
    if (!*v3)
      return;
    v55 = 0;
    v56 = a1[8];
    v57 = v3[1];
    v58 = (uint64_t *)a1[5];
    v59 = *v58;
    v60 = v6 + 4 * v56 + 16;
    v61 = 4 * *v58;
    while (!v57)
    {
LABEL_38:
      v56 += v59;
      ++v55;
      v60 += v61;
      if (v55 == v54)
        return;
    }
    v62 = 0;
    v63 = v3[2];
    v64 = v58[1];
    v65 = v63 & 0xFFFFFFFFFFFFFFF8;
    v66 = v60;
    v67 = v56;
    while (1)
    {
      if (v63)
      {
        v68 = 0;
        v69 = v58[2];
        v70 = v67;
        if (v63 < 8)
        {
          v71 = a2;
        }
        else
        {
          v71 = a2;
          if (v69 == 1)
          {
            v70 = v67 + v65;
            v72 = v66;
            v73 = v63 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v74 = *(_OWORD *)(v72 - 16);
              v75.i64[0] = SDWORD2(v74);
              v75.i64[1] = SHIDWORD(v74);
              v76 = vcvtq_f64_s64(v75);
              v75.i64[0] = (int)v74;
              v75.i64[1] = SDWORD1(v74);
              v77 = vcvtq_f64_s64(v75);
              v75.i64[0] = (int)*(_QWORD *)(v72 + 8);
              v75.i64[1] = (int)HIDWORD(*(_OWORD *)v72);
              v78 = vcvtq_f64_s64(v75);
              v75.i64[0] = (int)*(_OWORD *)v72;
              v75.i64[1] = (int)HIDWORD(*(_QWORD *)v72);
              *(int32x4_t *)(v72 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v77, a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v76, a2)));
              *(int32x4_t *)v72 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v75), a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v78, a2)));
              v72 += 32;
              v73 -= 8;
            }
            while (v73);
            v68 = v63 & 0xFFFFFFFFFFFFFFF8;
            if (v63 == v65)
              goto LABEL_41;
          }
        }
        v79 = v63 - v68;
        v80 = 4 * v69;
        v81 = (int *)(v6 + 4 * v70);
        do
        {
          *v81 = (int)(v71 * (double)*v81);
          v81 = (int *)((char *)v81 + v80);
          --v79;
        }
        while (v79);
      }
LABEL_41:
      v67 += v64;
      ++v62;
      v66 += 4 * v64;
      if (v62 == v57)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v31 = *v3;
    if (!*v3)
      return;
    v32 = 0;
    v33 = a1[8];
    v34 = v3[1];
    v35 = (uint64_t *)a1[5];
    v36 = *v35;
    v37 = v34 & 0xFFFFFFFFFFFFFFF8;
    v38 = v6 + 4 * v33 + 16;
    v39 = 4 * *v35;
    while (1)
    {
      if (v34)
      {
        v40 = 0;
        v41 = v35[1];
        v42 = v33;
        if (v34 < 8)
        {
          v43 = a2;
        }
        else
        {
          v43 = a2;
          if (v41 == 1)
          {
            v42 = v33 + v37;
            v44 = v38;
            v45 = v34 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v46 = *(_OWORD *)(v44 - 16);
              v47.i64[0] = SDWORD2(v46);
              v47.i64[1] = SHIDWORD(v46);
              v48 = vcvtq_f64_s64(v47);
              v47.i64[0] = (int)v46;
              v47.i64[1] = SDWORD1(v46);
              v49 = vcvtq_f64_s64(v47);
              v47.i64[0] = (int)*(_QWORD *)(v44 + 8);
              v47.i64[1] = (int)HIDWORD(*(_OWORD *)v44);
              v50 = vcvtq_f64_s64(v47);
              v47.i64[0] = (int)*(_OWORD *)v44;
              v47.i64[1] = (int)HIDWORD(*(_QWORD *)v44);
              *(int32x4_t *)(v44 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v49, a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v48, a2)));
              *(int32x4_t *)v44 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v47), a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v50, a2)));
              v44 += 32;
              v45 -= 8;
            }
            while (v45);
            v40 = v34 & 0xFFFFFFFFFFFFFFF8;
            if (v34 == v37)
              goto LABEL_24;
          }
        }
        v51 = v34 - v40;
        v52 = 4 * v41;
        v53 = (int *)(v6 + 4 * v42);
        do
        {
          *v53 = (int)(v43 * (double)*v53);
          v53 = (int *)((char *)v53 + v52);
          --v51;
        }
        while (v51);
      }
LABEL_24:
      v33 += v36;
      ++v32;
      v38 += v39;
      if (v32 == v31)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v82 = operator new(v4);
    bzero(v82, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v83 = 1;
    else
      v83 = v4 >> 3;
    v84 = a1[5];
    while (v83 >= 2)
    {
      v87 = 0;
      v88 = 0;
      v89 = v83 & 0x1FFFFFFFFFFFFFFELL;
      v90 = (_QWORD *)(v84 + 8);
      v91 = v82 + 1;
      do
      {
        v87 += *(v90 - 1) * *(v91 - 1);
        v88 += *v90 * *v91;
        v91 += 2;
        v90 += 2;
        v89 -= 2;
      }
      while (v89);
      v85 = v88 + v87;
      v86 = v83 & 0x1FFFFFFFFFFFFFFELL;
      if (v83 != (v83 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      *(_DWORD *)(v6 + 4 * v85) = (int)(a2 * (double)*(int *)(v6 + 4 * v85));
      if ((int)(v4 >> 3) >= 1)
      {
        v99 = (v4 >> 3) + 1;
        v100 = v4 >> 3;
        while (1)
        {
          v101 = (v99 - 2);
          v102 = v82[v101] + 1;
          v82[v101] = v102;
          if (v102 < v3[v101])
            break;
          v82[(v99 - 2)] = 0;
          LODWORD(v100) = v100 - 1;
          if ((unint64_t)--v99 <= 1)
            goto LABEL_71;
        }
        if ((int)v100 > 0)
          continue;
      }
LABEL_71:
      operator delete(v82);
      return;
    }
    v85 = 0;
    v86 = 0;
LABEL_63:
    v92 = v83 - v86;
    v93 = v86;
    v94 = (uint64_t *)(v84 + 8 * v86);
    v95 = &v82[v93];
    do
    {
      v97 = *v95++;
      v96 = v97;
      v98 = *v94++;
      v85 += v98 * v96;
      --v92;
    }
    while (v92);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 8)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    v21 = v6 + 4 * v18 + 16;
    v22 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v23 = *(_OWORD *)(v21 - 16);
      v24.i64[0] = SDWORD2(v23);
      v24.i64[1] = SHIDWORD(v23);
      v25 = vcvtq_f64_s64(v24);
      v24.i64[0] = (int)v23;
      v24.i64[1] = SDWORD1(v23);
      v26 = vcvtq_f64_s64(v24);
      v24.i64[0] = (int)*(_QWORD *)(v21 + 8);
      v24.i64[1] = (int)HIDWORD(*(_OWORD *)v21);
      v27 = vcvtq_f64_s64(v24);
      v24.i64[0] = (int)*(_OWORD *)v21;
      v24.i64[1] = (int)HIDWORD(*(_QWORD *)v21);
      *(int32x4_t *)(v21 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v26, a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v25, a2)));
      *(int32x4_t *)v21 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v24), a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v27, a2)));
      v21 += 32;
      v22 -= 8;
    }
    while (v22);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v28 = v16 - v17;
      v29 = 4 * v19;
      v30 = (int *)(v6 + 4 * v18);
      do
      {
        *v30 = (int)(a2 * (double)*v30);
        v30 = (int *)((char *)v30 + v29);
        --v28;
      }
      while (v28);
    }
  }
}

void sub_1912292E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator*=<double>(double)::{lambda(half &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *v21;
  unint64_t v22;
  unint64_t v41;
  uint64_t v42;
  __int16 *v43;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  float64x2_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float64x2_t *v60;
  unint64_t v61;
  unint64_t v76;
  uint64_t v77;
  __int16 *v78;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  float64x2_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  float64x2_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  float64x2_t *v100;
  unint64_t v101;
  unint64_t v116;
  uint64_t v117;
  __int16 *v118;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v143;
  size_t v144;
  uint64_t v145;
  unint64_t v146;

  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v82 = *v3;
    if (!*v3)
      return;
    v83 = 0;
    v84 = a1[8];
    v85 = v3[1];
    v86 = (uint64_t *)a1[5];
    v87 = *v86;
    v88 = (float64x2_t *)(v6 + 2 * v84);
    v89 = 2 * *v86;
    while (!v85)
    {
LABEL_38:
      v84 += v87;
      ++v83;
      v88 = (float64x2_t *)((char *)v88 + v89);
      if (v83 == v82)
        return;
    }
    v90 = 0;
    v91 = v3[2];
    v92 = v86[1];
    v93 = v91 & 0xFFFFFFFFFFFFFFF8;
    v94 = v88;
    v95 = v84;
    while (1)
    {
      if (v91)
      {
        v96 = 0;
        v97 = v86[2];
        v98 = v95;
        if (v91 < 8)
        {
          v99 = a2;
        }
        else
        {
          v99 = a2;
          if (v97 == 1)
          {
            v98 = v95 + v93;
            v100 = v94;
            v101 = v91 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q0 = *v100;
              _H1 = WORD1(*(_OWORD *)v100);
              __asm
              {
                FCVT            D1, H1
                FCVT            D2, H0
              }
              _Q2.f64[1] = _D1;
              LOWORD(_D1) = HIWORD(*(_QWORD *)&v100->f64[0]);
              __asm { FCVT            D1, H1 }
              _H3 = WORD2(*(_QWORD *)&v100->f64[0]);
              __asm { FCVT            D3, H3 }
              _Q3.f64[1] = _D1;
              *(_QWORD *)&_Q0.f64[0] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
              LOWORD(_D1) = WORD1(_Q0.f64[0]);
              __asm
              {
                FCVT            D1, H1
                FCVT            D4, H0
              }
              _Q4.f64[1] = _D1;
              LOWORD(_D1) = HIWORD(_Q0.f64[0]);
              __asm { FCVT            D1, H1 }
              LOWORD(_Q0.f64[0]) = WORD2(_Q0.f64[0]);
              __asm { FCVT            D0, H0 }
              _Q0.f64[1] = _D1;
              _Q0 = vmulq_n_f64(_Q0, a2);
              _Q1 = vmulq_n_f64(_Q3, a2);
              _Q2 = vmulq_n_f64(_Q2, a2);
              _Q3.f64[0] = _Q2.f64[1];
              __asm
              {
                FCVT            H3, D3
                FCVT            H2, D2
              }
              WORD1(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
              __asm { FCVT            H3, D1 }
              WORD2(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q2.f64[0]) = LOWORD(_Q1.f64[0]);
              _Q1 = vmulq_n_f64(_Q4, a2);
              __asm { FCVT            H3, D1 }
              LOWORD(_Q2.f64[1]) = LOWORD(_Q3.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              WORD1(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
              __asm { FCVT            H1, D0 }
              WORD2(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
              _Q0.f64[0] = _Q0.f64[1];
              __asm { FCVT            H0, D0 }
              HIWORD(_Q2.f64[1]) = LOWORD(_Q0.f64[0]);
              *v100++ = _Q2;
              v101 -= 8;
            }
            while (v101);
            v96 = v91 & 0xFFFFFFFFFFFFFFF8;
            if (v91 == v93)
              goto LABEL_41;
          }
        }
        v116 = v91 - v96;
        v117 = 2 * v97;
        v118 = (__int16 *)(v6 + 2 * v98);
        do
        {
          _H0 = *v118;
          __asm { FCVT            D0, H0 }
          _D0 = v99 * _D0;
          __asm { FCVT            H0, D0 }
          *v118 = LOWORD(_D0);
          v118 = (__int16 *)((char *)v118 + v117);
          --v116;
        }
        while (v116);
      }
LABEL_41:
      v95 += v92;
      ++v90;
      v94 = (float64x2_t *)((char *)v94 + 2 * v92);
      if (v90 == v85)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v47 = *v3;
    if (!*v3)
      return;
    v48 = 0;
    v49 = a1[8];
    v50 = v3[1];
    v51 = (uint64_t *)a1[5];
    v52 = *v51;
    v53 = v50 & 0xFFFFFFFFFFFFFFF8;
    v54 = (float64x2_t *)(v6 + 2 * v49);
    v55 = 2 * *v51;
    while (1)
    {
      if (v50)
      {
        v56 = 0;
        v57 = v51[1];
        v58 = v49;
        if (v50 < 8)
        {
          v59 = a2;
        }
        else
        {
          v59 = a2;
          if (v57 == 1)
          {
            v58 = v49 + v53;
            v60 = v54;
            v61 = v50 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q0 = *v60;
              _H1 = WORD1(*(_OWORD *)v60);
              __asm
              {
                FCVT            D1, H1
                FCVT            D2, H0
              }
              _Q2.f64[1] = _D1;
              LOWORD(_D1) = HIWORD(*(_QWORD *)&v60->f64[0]);
              __asm { FCVT            D1, H1 }
              _H3 = WORD2(*(_QWORD *)&v60->f64[0]);
              __asm { FCVT            D3, H3 }
              _Q3.f64[1] = _D1;
              *(_QWORD *)&_Q0.f64[0] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
              LOWORD(_D1) = WORD1(_Q0.f64[0]);
              __asm
              {
                FCVT            D1, H1
                FCVT            D4, H0
              }
              _Q4.f64[1] = _D1;
              LOWORD(_D1) = HIWORD(_Q0.f64[0]);
              __asm { FCVT            D1, H1 }
              LOWORD(_Q0.f64[0]) = WORD2(_Q0.f64[0]);
              __asm { FCVT            D0, H0 }
              _Q0.f64[1] = _D1;
              _Q0 = vmulq_n_f64(_Q0, a2);
              _Q1 = vmulq_n_f64(_Q3, a2);
              _Q2 = vmulq_n_f64(_Q2, a2);
              _Q3.f64[0] = _Q2.f64[1];
              __asm
              {
                FCVT            H3, D3
                FCVT            H2, D2
              }
              WORD1(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
              __asm { FCVT            H3, D1 }
              WORD2(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q2.f64[0]) = LOWORD(_Q1.f64[0]);
              _Q1 = vmulq_n_f64(_Q4, a2);
              __asm { FCVT            H3, D1 }
              LOWORD(_Q2.f64[1]) = LOWORD(_Q3.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              WORD1(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
              __asm { FCVT            H1, D0 }
              WORD2(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
              _Q0.f64[0] = _Q0.f64[1];
              __asm { FCVT            H0, D0 }
              HIWORD(_Q2.f64[1]) = LOWORD(_Q0.f64[0]);
              *v60++ = _Q2;
              v61 -= 8;
            }
            while (v61);
            v56 = v50 & 0xFFFFFFFFFFFFFFF8;
            if (v50 == v53)
              goto LABEL_24;
          }
        }
        v76 = v50 - v56;
        v77 = 2 * v57;
        v78 = (__int16 *)(v6 + 2 * v58);
        do
        {
          _H0 = *v78;
          __asm { FCVT            D0, H0 }
          _D0 = v59 * _D0;
          __asm { FCVT            H0, D0 }
          *v78 = LOWORD(_D0);
          v78 = (__int16 *)((char *)v78 + v77);
          --v76;
        }
        while (v76);
      }
LABEL_24:
      v49 += v52;
      ++v48;
      v54 = (float64x2_t *)((char *)v54 + v55);
      if (v48 == v47)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v122 = operator new(v4);
    bzero(v122, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v123 = 1;
    else
      v123 = v4 >> 3;
    v124 = a1[5];
    while (v123 >= 2)
    {
      v127 = 0;
      v128 = 0;
      v129 = v123 & 0x1FFFFFFFFFFFFFFELL;
      v130 = (_QWORD *)(v124 + 8);
      v131 = v122 + 1;
      do
      {
        v127 += *(v130 - 1) * *(v131 - 1);
        v128 += *v130 * *v131;
        v131 += 2;
        v130 += 2;
        v129 -= 2;
      }
      while (v129);
      v125 = v128 + v127;
      v126 = v123 & 0x1FFFFFFFFFFFFFFELL;
      if (v123 != (v123 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      v139 = 2 * v125;
      _H0 = *(_WORD *)(v6 + v139);
      __asm { FCVT            D0, H0 }
      _D0 = a2 * _D0;
      __asm { FCVT            H0, D0 }
      *(_WORD *)(v6 + v139) = LOWORD(_D0);
      if ((int)(v4 >> 3) >= 1)
      {
        v143 = (v4 >> 3) + 1;
        v144 = v4 >> 3;
        while (1)
        {
          v145 = (v143 - 2);
          v146 = v122[v145] + 1;
          v122[v145] = v146;
          if (v146 < v3[v145])
            break;
          v122[(v143 - 2)] = 0;
          LODWORD(v144) = v144 - 1;
          if ((unint64_t)--v143 <= 1)
            goto LABEL_71;
        }
        if ((int)v144 > 0)
          continue;
      }
LABEL_71:
      operator delete(v122);
      return;
    }
    v125 = 0;
    v126 = 0;
LABEL_63:
    v132 = v123 - v126;
    v133 = v126;
    v134 = (uint64_t *)(v124 + 8 * v126);
    v135 = &v122[v133];
    do
    {
      v137 = *v135++;
      v136 = v137;
      v138 = *v134++;
      v125 += v138 * v136;
      --v132;
    }
    while (v132);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 8)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    v21 = (float64x2_t *)(v6 + 2 * v18);
    v22 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      _Q0 = *v21;
      _H1 = WORD1(*(_OWORD *)v21);
      __asm
      {
        FCVT            D1, H1
        FCVT            D2, H0
      }
      _Q2.f64[1] = _D1;
      LOWORD(_D1) = HIWORD(*(_QWORD *)&v21->f64[0]);
      __asm { FCVT            D1, H1 }
      _H3 = WORD2(*(_QWORD *)&v21->f64[0]);
      __asm { FCVT            D3, H3 }
      _Q3.f64[1] = _D1;
      *(_QWORD *)&_Q0.f64[0] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
      LOWORD(_D1) = WORD1(_Q0.f64[0]);
      __asm
      {
        FCVT            D1, H1
        FCVT            D4, H0
      }
      _Q4.f64[1] = _D1;
      LOWORD(_D1) = HIWORD(_Q0.f64[0]);
      __asm { FCVT            D1, H1 }
      LOWORD(_Q0.f64[0]) = WORD2(_Q0.f64[0]);
      __asm { FCVT            D0, H0 }
      _Q0.f64[1] = _D1;
      _Q0 = vmulq_n_f64(_Q0, a2);
      _Q1 = vmulq_n_f64(_Q3, a2);
      _Q2 = vmulq_n_f64(_Q2, a2);
      _Q3.f64[0] = _Q2.f64[1];
      __asm
      {
        FCVT            H3, D3
        FCVT            H2, D2
      }
      WORD1(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
      __asm { FCVT            H3, D1 }
      WORD2(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
      _Q1.f64[0] = _Q1.f64[1];
      __asm { FCVT            H1, D1 }
      HIWORD(_Q2.f64[0]) = LOWORD(_Q1.f64[0]);
      _Q1 = vmulq_n_f64(_Q4, a2);
      __asm { FCVT            H3, D1 }
      LOWORD(_Q2.f64[1]) = LOWORD(_Q3.f64[0]);
      _Q1.f64[0] = _Q1.f64[1];
      __asm { FCVT            H1, D1 }
      WORD1(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
      __asm { FCVT            H1, D0 }
      WORD2(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
      _Q0.f64[0] = _Q0.f64[1];
      __asm { FCVT            H0, D0 }
      HIWORD(_Q2.f64[1]) = LOWORD(_Q0.f64[0]);
      *v21++ = _Q2;
      v22 -= 8;
    }
    while (v22);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v41 = v16 - v17;
      v42 = 2 * v19;
      v43 = (__int16 *)(v6 + 2 * v18);
      do
      {
        _H0 = *v43;
        __asm { FCVT            D0, H0 }
        _D0 = a2 * _D0;
        __asm { FCVT            H0, D0 }
        *v43 = LOWORD(_D0);
        v43 = (__int16 *)((char *)v43 + v42);
        --v41;
      }
      while (v41);
    }
  }
}

void sub_19122995C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator*=<double>(double)::{lambda(float &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  unint64_t v22;
  float32x4_t v23;
  unint64_t v24;
  uint64_t v25;
  float *v26;
  float v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  float32x2_t *v41;
  unint64_t v42;
  float32x4_t v43;
  unint64_t v44;
  uint64_t v45;
  float *v46;
  float v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  float32x2_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  float32x2_t *v66;
  unint64_t v67;
  float32x4_t v68;
  unint64_t v69;
  uint64_t v70;
  float *v71;
  float v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  size_t v93;
  uint64_t v94;
  unint64_t v95;

  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v48 = *v3;
    if (!*v3)
      return;
    v49 = 0;
    v50 = a1[8];
    v51 = v3[1];
    v52 = (uint64_t *)a1[5];
    v53 = *v52;
    v54 = v6 + 4 * v50 + 16;
    v55 = 4 * *v52;
    while (!v51)
    {
LABEL_38:
      v50 += v53;
      ++v49;
      v54 += v55;
      if (v49 == v48)
        return;
    }
    v56 = 0;
    v57 = v3[2];
    v58 = v52[1];
    v59 = v57 & 0xFFFFFFFFFFFFFFF8;
    v60 = (float32x2_t *)v54;
    v61 = v50;
    while (1)
    {
      if (v57)
      {
        v62 = 0;
        v63 = v52[2];
        v64 = v61;
        if (v57 < 8)
        {
          v65 = a2;
        }
        else
        {
          v65 = a2;
          if (v63 == 1)
          {
            v64 = v61 + v59;
            v66 = v60;
            v67 = v57 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v68 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v66), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v66->f32), a2));
              *(float32x4_t *)v66[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v66[-2]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v66[-2].f32), a2));
              *(float32x4_t *)v66->f32 = v68;
              v66 += 4;
              v67 -= 8;
            }
            while (v67);
            v62 = v57 & 0xFFFFFFFFFFFFFFF8;
            if (v57 == v59)
              goto LABEL_41;
          }
        }
        v69 = v57 - v62;
        v70 = 4 * v63;
        v71 = (float *)(v6 + 4 * v64);
        do
        {
          v72 = v65 * *v71;
          *v71 = v72;
          v71 = (float *)((char *)v71 + v70);
          --v69;
        }
        while (v69);
      }
LABEL_41:
      v61 += v58;
      ++v56;
      v60 = (float32x2_t *)((char *)v60 + 4 * v58);
      if (v56 == v51)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v28 = *v3;
    if (!*v3)
      return;
    v29 = 0;
    v30 = a1[8];
    v31 = v3[1];
    v32 = (uint64_t *)a1[5];
    v33 = *v32;
    v34 = v31 & 0xFFFFFFFFFFFFFFF8;
    v35 = v6 + 4 * v30 + 16;
    v36 = 4 * *v32;
    while (1)
    {
      if (v31)
      {
        v37 = 0;
        v38 = v32[1];
        v39 = v30;
        if (v31 < 8)
        {
          v40 = a2;
        }
        else
        {
          v40 = a2;
          if (v38 == 1)
          {
            v39 = v30 + v34;
            v41 = (float32x2_t *)v35;
            v42 = v31 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v43 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v41), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v41->f32), a2));
              *(float32x4_t *)v41[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v41[-2]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v41[-2].f32), a2));
              *(float32x4_t *)v41->f32 = v43;
              v41 += 4;
              v42 -= 8;
            }
            while (v42);
            v37 = v31 & 0xFFFFFFFFFFFFFFF8;
            if (v31 == v34)
              goto LABEL_24;
          }
        }
        v44 = v31 - v37;
        v45 = 4 * v38;
        v46 = (float *)(v6 + 4 * v39);
        do
        {
          v47 = v40 * *v46;
          *v46 = v47;
          v46 = (float *)((char *)v46 + v45);
          --v44;
        }
        while (v44);
      }
LABEL_24:
      v30 += v33;
      ++v29;
      v35 += v36;
      if (v29 == v28)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v73 = operator new(v4);
    bzero(v73, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v74 = 1;
    else
      v74 = v4 >> 3;
    v75 = a1[5];
    while (v74 >= 2)
    {
      v78 = 0;
      v79 = 0;
      v80 = v74 & 0x1FFFFFFFFFFFFFFELL;
      v81 = (_QWORD *)(v75 + 8);
      v82 = v73 + 1;
      do
      {
        v78 += *(v81 - 1) * *(v82 - 1);
        v79 += *v81 * *v82;
        v82 += 2;
        v81 += 2;
        v80 -= 2;
      }
      while (v80);
      v76 = v79 + v78;
      v77 = v74 & 0x1FFFFFFFFFFFFFFELL;
      if (v74 != (v74 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      v90 = 4 * v76;
      v91 = a2 * *(float *)(v6 + v90);
      *(float *)(v6 + v90) = v91;
      if ((int)(v4 >> 3) >= 1)
      {
        v92 = (v4 >> 3) + 1;
        v93 = v4 >> 3;
        while (1)
        {
          v94 = (v92 - 2);
          v95 = v73[v94] + 1;
          v73[v94] = v95;
          if (v95 < v3[v94])
            break;
          v73[(v92 - 2)] = 0;
          LODWORD(v93) = v93 - 1;
          if ((unint64_t)--v92 <= 1)
            goto LABEL_71;
        }
        if ((int)v93 > 0)
          continue;
      }
LABEL_71:
      operator delete(v73);
      return;
    }
    v76 = 0;
    v77 = 0;
LABEL_63:
    v83 = v74 - v77;
    v84 = v77;
    v85 = (uint64_t *)(v75 + 8 * v77);
    v86 = &v73[v84];
    do
    {
      v88 = *v86++;
      v87 = v88;
      v89 = *v85++;
      v76 += v89 * v87;
      --v83;
    }
    while (v83);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 8)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    v21 = (float32x2_t *)(v6 + 4 * v18 + 16);
    v22 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v21), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v21->f32), a2));
      *(float32x4_t *)v21[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v21[-2]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v21[-2].f32), a2));
      *(float32x4_t *)v21->f32 = v23;
      v21 += 4;
      v22 -= 8;
    }
    while (v22);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v24 = v16 - v17;
      v25 = 4 * v19;
      v26 = (float *)(v6 + 4 * v18);
      do
      {
        v27 = a2 * *v26;
        *v26 = v27;
        v26 = (float *)((char *)v26 + v25);
        --v24;
      }
      while (v24);
    }
  }
}

void sub_191229E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191229FD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191229FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191229FE4);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3::$_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_19122A1AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF5B8;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF5B8;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF5B8;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3::$_3((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19122A388(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF5B8;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3::$_3((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  std::string::size_type v5;
  std::string::size_type size;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  std::string::size_type v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string::size_type v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v24;
  std::string::size_type v25;
  unint64_t *v26;
  unint64_t v28;
  std::string __str;
  unsigned __int8 v30;
  __int128 __dst;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a1[1].__r_.__value_.__s.__data_[16])
  {
    if (a1[1].__r_.__value_.__s.__data_[17])
    {
LABEL_5:
      v5 = a1[2].__r_.__value_.__r.__words[0];
      a1[1].__r_.__value_.__s.__data_[17] = 1;
      size = a1[2].__r_.__value_.__l.__size_;
      __str.__r_.__value_.__r.__words[0] = v5;
      __str.__r_.__value_.__l.__size_ = size;
      if (size)
      {
        v7 = (unint64_t *)(size + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      __str.__r_.__value_.__r.__words[2] = 0;
      v30 = 0;
      if (&a1[2] != &__str)
      {
        v9 = (unint64_t *)a1[2].__r_.__value_.__r.__words[2];
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
        v30 = a1[3].__r_.__value_.__s.__data_[0];
        if (v30 - 2 < 4 || v30 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      if (__str.__r_.__value_.__r.__words[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      v13 = (unint64_t *)__str.__r_.__value_.__r.__words[2];
      v14 = v30;
      if (v30 - 2 < 4 || v30 == 9)
      {
        do
          v16 = __ldaxr(v13);
        while (__stlxr(v16 + 1, v13));
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__str);
      if (a1[4].__r_.__value_.__s.__data_[16])
      {
        if (a1[4].__r_.__value_.__s.__data_[17])
        {
LABEL_29:
          v18 = a1[5].__r_.__value_.__r.__words[0];
          a1[4].__r_.__value_.__s.__data_[17] = 1;
          v19 = a1[5].__r_.__value_.__l.__size_;
          __str.__r_.__value_.__r.__words[0] = v18;
          __str.__r_.__value_.__l.__size_ = v19;
          if (v19)
          {
            v20 = (unint64_t *)(v19 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          __str.__r_.__value_.__r.__words[2] = 0;
          v30 = 0;
          if (&a1[5] != &__str)
          {
            v22 = (unint64_t *)a1[5].__r_.__value_.__r.__words[2];
            __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v22;
            v30 = a1[6].__r_.__value_.__s.__data_[0];
            if (v30 - 2 < 4 || v30 == 9)
            {
              do
                v24 = __ldaxr(v22);
              while (__stlxr(v24 + 1, v22));
            }
          }
LABEL_42:
          if (!__str.__r_.__value_.__r.__words[0])
          {
            v26 = (unint64_t *)__str.__r_.__value_.__r.__words[2];
            if (v30 - 2 < 4 || v30 == 9)
            {
              do
                v28 = __ldaxr(v26);
              while (__stlxr(v28 + 1, v26));
            }
            nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__str);
            __asm { BR              X9 }
          }
          nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
        }
        v17 = a1[4].__r_.__value_.__l.__size_;
        if (v17)
        {
          (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v17 + 48))(&__dst, v17, a2);
          nitro::nitro_variable::operator=((uint64_t)&a1[5], &__dst);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__dst);
          goto LABEL_29;
        }
      }
      else
      {
        v25 = a1[4].__r_.__value_.__l.__size_;
        if (v25)
        {
          (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v25 + 48))(&__str, v25, a2);
          goto LABEL_42;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = a1[1].__r_.__value_.__l.__size_;
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v4 + 48))(&__dst, v4, a2);
      nitro::nitro_variable::operator=((uint64_t)&a1[2], &__dst);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__dst);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = a1[1].__r_.__value_.__l.__size_;
    if (v12)
    {
      (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v12 + 48))(&__str, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_19122B230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v43;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  void *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;

  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a26);
  switch((int)a9)
  {
    case 0:
      do
      {
        v45 = __ldaxr((unint64_t *)v43);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, (unint64_t *)v43));
      if (v46)
        v47 = 1;
      else
        v47 = v43 == 0;
      if (v47)
        goto LABEL_46;
      if (*(char *)(v43 + 31) < 0)
        operator delete(*(void **)(v43 + 8));
      v48 = v43;
      v49 = 0x1012C404EF22A49;
      goto LABEL_58;
    case 1:
      do
      {
        v56 = __ldaxr((unint64_t *)v43);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, (unint64_t *)v43));
      if (v57)
        v58 = 1;
      else
        v58 = v43 == 0;
      if (v58)
        goto LABEL_46;
      v59 = *(void **)(v43 + 8);
      if (v59)
      {
        *(_QWORD *)(v43 + 16) = v59;
        operator delete(v59);
      }
      v48 = v43;
      v49 = 0x1080C409938AC02;
      goto LABEL_58;
    case 2:
      do
      {
        v50 = __ldaxr((unint64_t *)v43);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, (unint64_t *)v43));
      if (v51)
        v52 = 1;
      else
        v52 = v43 == 0;
      if (v52)
        goto LABEL_46;
      v53 = *(_QWORD *)(v43 + 8);
      if (!v53)
        goto LABEL_39;
      v54 = *(_QWORD *)(v43 + 16);
      v55 = *(void **)(v43 + 8);
      if (v54 != v53)
      {
        do
        {
          v54 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v43 + 24, v54);
        }
        while (v54 != v53);
        v55 = *(void **)(v43 + 8);
      }
      *(_QWORD *)(v43 + 16) = v53;
      goto LABEL_38;
    case 3:
      do
      {
        v60 = __ldaxr((unint64_t *)v43);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, (unint64_t *)v43));
      if (v61)
        v62 = 1;
      else
        v62 = v43 == 0;
      if (v62)
        goto LABEL_46;
      v63 = *(_QWORD *)(v43 + 8);
      if (!v63)
        goto LABEL_39;
      v64 = *(_QWORD *)(v43 + 16);
      v65 = *(void **)(v43 + 8);
      if (v64 != v63)
      {
        do
          v64 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v64 - 32);
        while (v64 != v63);
        v65 = *(void **)(v43 + 8);
      }
      *(_QWORD *)(v43 + 16) = v63;
      v55 = v65;
LABEL_38:
      operator delete(v55);
LABEL_39:
      v48 = v43;
      v49 = 0x1020C405E66F15BLL;
      goto LABEL_58;
    case 7:
      do
      {
        v66 = __ldaxr((unint64_t *)v43);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, (unint64_t *)v43));
      if (v67)
        v68 = 1;
      else
        v68 = v43 == 0;
      if (v68)
        goto LABEL_46;
      v69 = *(void **)(v43 + 56);
      if (v69)
      {
        *(_QWORD *)(v43 + 64) = v69;
        operator delete(v69);
        v70 = *(void **)(v43 + 32);
        if (!v70)
        {
LABEL_49:
          v71 = *(std::__shared_weak_count **)(v43 + 24);
          if (!v71)
            goto LABEL_57;
          goto LABEL_53;
        }
      }
      else
      {
        v70 = *(void **)(v43 + 32);
        if (!v70)
          goto LABEL_49;
      }
      *(_QWORD *)(v43 + 40) = v70;
      operator delete(v70);
      v71 = *(std::__shared_weak_count **)(v43 + 24);
      if (!v71)
      {
LABEL_57:
        v48 = v43;
        v49 = 0x10B0C4002311774;
LABEL_58:
        MEMORY[0x19401CD90](v48, v49);
        _Unwind_Resume(a1);
      }
LABEL_53:
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      goto LABEL_57;
    default:
LABEL_46:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_3"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_3" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_3")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4::$_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_19122BA78(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF610;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF610;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF610;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4::$_4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19122BC54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF610;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4::$_4((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(std::string *a1, uint64_t a2)
{
  std::string::size_type v4;
  std::string::size_type v5;
  std::string::size_type size;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  std::string::size_type v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string::size_type v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v24;
  std::string::size_type v25;
  unint64_t *v26;
  unint64_t v28;
  std::string __str;
  unsigned __int8 v30;
  __int128 __dst;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a1[1].__r_.__value_.__s.__data_[16])
  {
    if (a1[1].__r_.__value_.__s.__data_[17])
    {
LABEL_5:
      v5 = a1[2].__r_.__value_.__r.__words[0];
      a1[1].__r_.__value_.__s.__data_[17] = 1;
      size = a1[2].__r_.__value_.__l.__size_;
      __str.__r_.__value_.__r.__words[0] = v5;
      __str.__r_.__value_.__l.__size_ = size;
      if (size)
      {
        v7 = (unint64_t *)(size + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      __str.__r_.__value_.__r.__words[2] = 0;
      v30 = 0;
      if (&a1[2] != &__str)
      {
        v9 = (unint64_t *)a1[2].__r_.__value_.__r.__words[2];
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
        v30 = a1[3].__r_.__value_.__s.__data_[0];
        if (v30 - 2 < 4 || v30 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      if (__str.__r_.__value_.__r.__words[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      v13 = (unint64_t *)__str.__r_.__value_.__r.__words[2];
      v14 = v30;
      if (v30 - 2 < 4 || v30 == 9)
      {
        do
          v16 = __ldaxr(v13);
        while (__stlxr(v16 + 1, v13));
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__str);
      if (a1[4].__r_.__value_.__s.__data_[16])
      {
        if (a1[4].__r_.__value_.__s.__data_[17])
        {
LABEL_29:
          v18 = a1[5].__r_.__value_.__r.__words[0];
          a1[4].__r_.__value_.__s.__data_[17] = 1;
          v19 = a1[5].__r_.__value_.__l.__size_;
          __str.__r_.__value_.__r.__words[0] = v18;
          __str.__r_.__value_.__l.__size_ = v19;
          if (v19)
          {
            v20 = (unint64_t *)(v19 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          __str.__r_.__value_.__r.__words[2] = 0;
          v30 = 0;
          if (&a1[5] != &__str)
          {
            v22 = (unint64_t *)a1[5].__r_.__value_.__r.__words[2];
            __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v22;
            v30 = a1[6].__r_.__value_.__s.__data_[0];
            if (v30 - 2 < 4 || v30 == 9)
            {
              do
                v24 = __ldaxr(v22);
              while (__stlxr(v24 + 1, v22));
            }
          }
LABEL_42:
          if (!__str.__r_.__value_.__r.__words[0])
          {
            v26 = (unint64_t *)__str.__r_.__value_.__r.__words[2];
            if (v30 - 2 < 4 || v30 == 9)
            {
              do
                v28 = __ldaxr(v26);
              while (__stlxr(v28 + 1, v26));
            }
            nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__str);
            __asm { BR              X9 }
          }
          nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
        }
        v17 = a1[4].__r_.__value_.__l.__size_;
        if (v17)
        {
          (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v17 + 48))(&__dst, v17, a2);
          nitro::nitro_variable::operator=((uint64_t)&a1[5], &__dst);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__dst);
          goto LABEL_29;
        }
      }
      else
      {
        v25 = a1[4].__r_.__value_.__l.__size_;
        if (v25)
        {
          (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v25 + 48))(&__str, v25, a2);
          goto LABEL_42;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = a1[1].__r_.__value_.__l.__size_;
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v4 + 48))(&__dst, v4, a2);
      nitro::nitro_variable::operator=((uint64_t)&a1[2], &__dst);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__dst);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = a1[1].__r_.__value_.__l.__size_;
    if (v12)
    {
      (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v12 + 48))(&__str, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_19122CB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v43;
  int v44;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;

  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__p);
  switch(v44)
  {
    case 0:
      do
      {
        v46 = __ldaxr((unint64_t *)v43);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, (unint64_t *)v43));
      if (v47)
        v48 = 1;
      else
        v48 = v43 == 0;
      if (v48)
        goto LABEL_46;
      if (*(char *)(v43 + 31) < 0)
        operator delete(*(void **)(v43 + 8));
      v49 = v43;
      v50 = 0x1012C404EF22A49;
      goto LABEL_58;
    case 1:
      do
      {
        v57 = __ldaxr((unint64_t *)v43);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, (unint64_t *)v43));
      if (v58)
        v59 = 1;
      else
        v59 = v43 == 0;
      if (v59)
        goto LABEL_46;
      v60 = *(void **)(v43 + 8);
      if (v60)
      {
        *(_QWORD *)(v43 + 16) = v60;
        operator delete(v60);
      }
      v49 = v43;
      v50 = 0x1080C409938AC02;
      goto LABEL_58;
    case 2:
      do
      {
        v51 = __ldaxr((unint64_t *)v43);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, (unint64_t *)v43));
      if (v52)
        v53 = 1;
      else
        v53 = v43 == 0;
      if (v53)
        goto LABEL_46;
      v54 = *(_QWORD *)(v43 + 8);
      if (!v54)
        goto LABEL_39;
      v55 = *(_QWORD *)(v43 + 16);
      v56 = *(void **)(v43 + 8);
      if (v55 != v54)
      {
        do
        {
          v55 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v43 + 24, v55);
        }
        while (v55 != v54);
        v56 = *(void **)(v43 + 8);
      }
      *(_QWORD *)(v43 + 16) = v54;
      goto LABEL_38;
    case 3:
      do
      {
        v61 = __ldaxr((unint64_t *)v43);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, (unint64_t *)v43));
      if (v62)
        v63 = 1;
      else
        v63 = v43 == 0;
      if (v63)
        goto LABEL_46;
      v64 = *(_QWORD *)(v43 + 8);
      if (!v64)
        goto LABEL_39;
      v65 = *(_QWORD *)(v43 + 16);
      v66 = *(void **)(v43 + 8);
      if (v65 != v64)
      {
        do
          v65 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v65 - 32);
        while (v65 != v64);
        v66 = *(void **)(v43 + 8);
      }
      *(_QWORD *)(v43 + 16) = v64;
      v56 = v66;
LABEL_38:
      operator delete(v56);
LABEL_39:
      v49 = v43;
      v50 = 0x1020C405E66F15BLL;
      goto LABEL_58;
    case 7:
      do
      {
        v67 = __ldaxr((unint64_t *)v43);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, (unint64_t *)v43));
      if (v68)
        v69 = 1;
      else
        v69 = v43 == 0;
      if (v69)
        goto LABEL_46;
      v70 = *(void **)(v43 + 56);
      if (v70)
      {
        *(_QWORD *)(v43 + 64) = v70;
        operator delete(v70);
        v71 = *(void **)(v43 + 32);
        if (!v71)
        {
LABEL_49:
          v72 = *(std::__shared_weak_count **)(v43 + 24);
          if (!v72)
            goto LABEL_57;
          goto LABEL_53;
        }
      }
      else
      {
        v71 = *(void **)(v43 + 32);
        if (!v71)
          goto LABEL_49;
      }
      *(_QWORD *)(v43 + 40) = v71;
      operator delete(v71);
      v72 = *(std::__shared_weak_count **)(v43 + 24);
      if (!v72)
      {
LABEL_57:
        v49 = v43;
        v50 = 0x10B0C4002311774;
LABEL_58:
        MEMORY[0x19401CD90](v49, v50);
        _Unwind_Resume(a1);
      }
LABEL_53:
      p_shared_owners = (unint64_t *)&v72->__shared_owners_;
      do
        v74 = __ldaxr(p_shared_owners);
      while (__stlxr(v74 - 1, p_shared_owners));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
      goto LABEL_57;
    default:
LABEL_46:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_4"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_4" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_4")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5::$_5(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_19122D3E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF668;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF668;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF668;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5::$_5((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19122D5BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF668;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5::$_5((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  unint64_t *v23;
  unsigned __int8 v24;
  _QWORD v25[2];
  unint64_t *v26;
  unsigned __int8 v27;
  __int128 v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      v5 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(a1 + 41) = 1;
      v6 = *(_QWORD *)(a1 + 56);
      v25[0] = v5;
      v25[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v26 = 0;
      v27 = 0;
      if ((_QWORD *)(a1 + 48) != v25)
      {
        v9 = *(unint64_t **)(a1 + 64);
        v26 = v9;
        v27 = *(_BYTE *)(a1 + 72);
        if (v27 - 2 < 4 || v27 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      if (v25[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      if (*(_BYTE *)(a1 + 112))
      {
        if (*(_BYTE *)(a1 + 113))
        {
LABEL_23:
          v14 = *(_QWORD *)(a1 + 120);
          *(_BYTE *)(a1 + 113) = 1;
          v15 = *(_QWORD *)(a1 + 128);
          v22[0] = v14;
          v22[1] = v15;
          if (v15)
          {
            v16 = (unint64_t *)(v15 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v23 = 0;
          v24 = 0;
          if ((_QWORD *)(a1 + 120) != v22)
          {
            v18 = *(unint64_t **)(a1 + 136);
            v23 = v18;
            v24 = *(_BYTE *)(a1 + 144);
            if (v24 - 2 < 4 || v24 == 9)
            {
              do
                v20 = __ldaxr(v18);
              while (__stlxr(v20 + 1, v18));
            }
          }
LABEL_36:
          if (!v22[0])
            __asm { BR              X10 }
          nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
        }
        v13 = *(_QWORD *)(a1 + 104);
        if (v13)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v28, v13, a2);
          nitro::nitro_variable::operator=(a1 + 120, v28);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
          goto LABEL_23;
        }
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 104);
        if (v21)
        {
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 48))(v22, v21, a2);
          goto LABEL_36;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v28, v4, a2);
      nitro::nitro_variable::operator=(a1 + 48, v28);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v25, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_19122DF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_5"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_5" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_5")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 256, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19122E2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v31, (uint64_t)a1);
      v3 = *(int *)(v31 + 4 * v37) == a2;
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      v4 = v32;
      if (!v32)
        return v3;
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v38, (uint64_t)a1);
      v3 = *(unsigned __int8 *)(v38 + v44) == a2;
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v4 = v39;
      if (!v39)
        return v3;
      v14 = (unint64_t *)&v39->__shared_owners_;
      do
        v6 = __ldaxr(v14);
      while (__stlxr(v6 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = *(float *)(v17 + 4 * v23) == (float)a2;
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v15 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v15);
      while (__stlxr(v6 - 1, v15));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v24, (uint64_t)a1);
      _H0 = *(_WORD *)(v24 + 2 * v30);
      __asm { FCVT            S0, H0 }
      v3 = _S0 == (float)a2;
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v4 = v25;
      if (!v25)
        return v3;
      v13 = (unint64_t *)&v25->__shared_owners_;
      do
        v6 = __ldaxr(v13);
      while (__stlxr(v6 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 256, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19122E648(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19122E65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19122E654);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19122E8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19122EA80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19122EA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19122EA8CLL);
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 252, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19122EDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  unint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v13;
  unint64_t *v14;
  float v15;
  unint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v33, (uint64_t)a1);
      v18 = *(int *)(v33 + 4 * v39);
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      _D9 = (double)v18;
      v5 = v34;
      if (!v34)
        return a2 == _D9;
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v40, (uint64_t)a1);
      LOBYTE(v2) = *(_BYTE *)(v40 + v46);
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      _D9 = (double)v2;
      v5 = v41;
      if (!v41)
        return a2 == _D9;
      v14 = (unint64_t *)&v41->__shared_owners_;
      do
        v7 = __ldaxr(v14);
      while (__stlxr(v7 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v19, (uint64_t)a1);
      v15 = *(float *)(v19 + 4 * v25);
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      _D9 = v15;
      v5 = v20;
      if (!v20)
        return a2 == _D9;
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(v16);
      while (__stlxr(v7 - 1, v16));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v26, (uint64_t)a1);
      _H9 = *(_WORD *)(v26 + 2 * v32);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      __asm { FCVT            D9, H9 }
      v5 = v27;
      if (!v27)
        return a2 == _D9;
      v13 = (unint64_t *)&v27->__shared_owners_;
      do
        v7 = __ldaxr(v13);
      while (__stlxr(v7 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a2 == _D9;
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 252, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19122F13C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19122F150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19122F148);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19122F3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19122F574(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19122F588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19122F580);
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 248, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19122F898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v31, (uint64_t)a1);
      v3 = *(int *)(v31 + 4 * v37) == a2;
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      v4 = v32;
      if (!v32)
        return v3;
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v38, (uint64_t)a1);
      v3 = *(unsigned __int8 *)(v38 + v44) == a2;
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v4 = v39;
      if (!v39)
        return v3;
      v14 = (unint64_t *)&v39->__shared_owners_;
      do
        v6 = __ldaxr(v14);
      while (__stlxr(v6 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = *(float *)(v17 + 4 * v23) == (float)a2;
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v15 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v15);
      while (__stlxr(v6 - 1, v15));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v24, (uint64_t)a1);
      _H1 = *(_WORD *)(v24 + 2 * v30);
      __asm { FCVT            S1, H1 }
      v3 = (float)a2 == _S1;
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v4 = v25;
      if (!v25)
        return v3;
      v13 = (unint64_t *)&v25->__shared_owners_;
      do
        v6 = __ldaxr(v13);
      while (__stlxr(v6 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 248, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19122FC3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19122FC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19122FC48);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19122FED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191230074(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191230088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191230080);
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 244, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191230398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  unint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v13;
  unint64_t *v14;
  float v15;
  unint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v33, (uint64_t)a1);
      v18 = *(int *)(v33 + 4 * v39);
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      _D9 = (double)v18;
      v5 = v34;
      if (!v34)
        return a2 == _D9;
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v40, (uint64_t)a1);
      LOBYTE(v2) = *(_BYTE *)(v40 + v46);
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      _D9 = (double)v2;
      v5 = v41;
      if (!v41)
        return a2 == _D9;
      v14 = (unint64_t *)&v41->__shared_owners_;
      do
        v7 = __ldaxr(v14);
      while (__stlxr(v7 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v19, (uint64_t)a1);
      v15 = *(float *)(v19 + 4 * v25);
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      _D9 = v15;
      v5 = v20;
      if (!v20)
        return a2 == _D9;
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(v16);
      while (__stlxr(v7 - 1, v16));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v26, (uint64_t)a1);
      _H9 = *(_WORD *)(v26 + 2 * v32);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      __asm { FCVT            D9, H9 }
      v5 = v27;
      if (!v27)
        return a2 == _D9;
      v13 = (unint64_t *)&v27->__shared_owners_;
      do
        v7 = __ldaxr(v13);
      while (__stlxr(v7 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a2 == _D9;
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 244, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191230730(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191230744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123073CLL);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1912309C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191230B68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191230B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191230B74);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6::$_6(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_191230D3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF6C0;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF6C0;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF6C0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6::$_6((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191230F18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF6C0;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6::$_6((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  unint64_t *v23;
  unsigned __int8 v24;
  _QWORD v25[2];
  unint64_t *v26;
  unsigned __int8 v27;
  __int128 v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      v5 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(a1 + 41) = 1;
      v6 = *(_QWORD *)(a1 + 56);
      v25[0] = v5;
      v25[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v26 = 0;
      v27 = 0;
      if ((_QWORD *)(a1 + 48) != v25)
      {
        v9 = *(unint64_t **)(a1 + 64);
        v26 = v9;
        v27 = *(_BYTE *)(a1 + 72);
        if (v27 - 2 < 4 || v27 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      if (v25[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      if (*(_BYTE *)(a1 + 112))
      {
        if (*(_BYTE *)(a1 + 113))
        {
LABEL_23:
          v14 = *(_QWORD *)(a1 + 120);
          *(_BYTE *)(a1 + 113) = 1;
          v15 = *(_QWORD *)(a1 + 128);
          v22[0] = v14;
          v22[1] = v15;
          if (v15)
          {
            v16 = (unint64_t *)(v15 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v23 = 0;
          v24 = 0;
          if ((_QWORD *)(a1 + 120) != v22)
          {
            v18 = *(unint64_t **)(a1 + 136);
            v23 = v18;
            v24 = *(_BYTE *)(a1 + 144);
            if (v24 - 2 < 4 || v24 == 9)
            {
              do
                v20 = __ldaxr(v18);
              while (__stlxr(v20 + 1, v18));
            }
          }
LABEL_36:
          if (!v22[0])
            __asm { BR              X10 }
          nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
        }
        v13 = *(_QWORD *)(a1 + 104);
        if (v13)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v28, v13, a2);
          nitro::nitro_variable::operator=(a1 + 120, v28);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
          goto LABEL_23;
        }
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 104);
        if (v21)
        {
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 48))(v22, v21, a2);
          goto LABEL_36;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v28, v4, a2);
      nitro::nitro_variable::operator=(a1 + 48, v28);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v25, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_191231880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_6"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_6" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_6")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_6" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7::$_7(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_191231AB0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF718;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF718;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF718;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7::$_7((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191231C8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF718;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7::$_7((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  unint64_t *v23;
  unsigned __int8 v24;
  _QWORD v25[2];
  unint64_t *v26;
  unsigned __int8 v27;
  __int128 v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      v5 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(a1 + 41) = 1;
      v6 = *(_QWORD *)(a1 + 56);
      v25[0] = v5;
      v25[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v26 = 0;
      v27 = 0;
      if ((_QWORD *)(a1 + 48) != v25)
      {
        v9 = *(unint64_t **)(a1 + 64);
        v26 = v9;
        v27 = *(_BYTE *)(a1 + 72);
        if (v27 - 2 < 4 || v27 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      if (v25[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      if (*(_BYTE *)(a1 + 112))
      {
        if (*(_BYTE *)(a1 + 113))
        {
LABEL_23:
          v14 = *(_QWORD *)(a1 + 120);
          *(_BYTE *)(a1 + 113) = 1;
          v15 = *(_QWORD *)(a1 + 128);
          v22[0] = v14;
          v22[1] = v15;
          if (v15)
          {
            v16 = (unint64_t *)(v15 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v23 = 0;
          v24 = 0;
          if ((_QWORD *)(a1 + 120) != v22)
          {
            v18 = *(unint64_t **)(a1 + 136);
            v23 = v18;
            v24 = *(_BYTE *)(a1 + 144);
            if (v24 - 2 < 4 || v24 == 9)
            {
              do
                v20 = __ldaxr(v18);
              while (__stlxr(v20 + 1, v18));
            }
          }
LABEL_36:
          if (!v22[0])
            __asm { BR              X10 }
          nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
        }
        v13 = *(_QWORD *)(a1 + 104);
        if (v13)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v28, v13, a2);
          nitro::nitro_variable::operator=(a1 + 120, v28);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
          goto LABEL_23;
        }
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 104);
        if (v21)
        {
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 48))(v22, v21, a2);
          goto LABEL_36;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v28, v4, a2);
      nitro::nitro_variable::operator=(a1 + 48, v28);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v25, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_1912325EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_7"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_7" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_7")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_7" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 100, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19123296C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v31, (uint64_t)a1);
      v3 = *(int *)(v31 + 4 * v37) < a2;
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      v4 = v32;
      if (!v32)
        return v3;
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v38, (uint64_t)a1);
      v3 = *(unsigned __int8 *)(v38 + v44) < a2;
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v4 = v39;
      if (!v39)
        return v3;
      v14 = (unint64_t *)&v39->__shared_owners_;
      do
        v6 = __ldaxr(v14);
      while (__stlxr(v6 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = *(float *)(v17 + 4 * v23) < (float)a2;
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v15 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v15);
      while (__stlxr(v6 - 1, v15));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v24, (uint64_t)a1);
      _H0 = *(_WORD *)(v24 + 2 * v30);
      __asm { FCVT            S0, H0 }
      v3 = _S0 < (float)a2;
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v4 = v25;
      if (!v25)
        return v3;
      v13 = (unint64_t *)&v25->__shared_owners_;
      do
        v6 = __ldaxr(v13);
      while (__stlxr(v6 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 100, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191232D10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191232D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191232D1CLL);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191232FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191233148(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123315C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191233154);
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 96, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19123346C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  unint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v13;
  unint64_t *v14;
  float v15;
  unint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v33, (uint64_t)a1);
      v18 = *(int *)(v33 + 4 * v39);
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      _D9 = (double)v18;
      v5 = v34;
      if (!v34)
        return a2 > _D9;
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v40, (uint64_t)a1);
      LOBYTE(v2) = *(_BYTE *)(v40 + v46);
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      _D9 = (double)v2;
      v5 = v41;
      if (!v41)
        return a2 > _D9;
      v14 = (unint64_t *)&v41->__shared_owners_;
      do
        v7 = __ldaxr(v14);
      while (__stlxr(v7 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v19, (uint64_t)a1);
      v15 = *(float *)(v19 + 4 * v25);
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      _D9 = v15;
      v5 = v20;
      if (!v20)
        return a2 > _D9;
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(v16);
      while (__stlxr(v7 - 1, v16));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v26, (uint64_t)a1);
      _H9 = *(_WORD *)(v26 + 2 * v32);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      __asm { FCVT            D9, H9 }
      v5 = v27;
      if (!v27)
        return a2 > _D9;
      v13 = (unint64_t *)&v27->__shared_owners_;
      do
        v7 = __ldaxr(v13);
      while (__stlxr(v7 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a2 > _D9;
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 96, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191233804(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191233818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191233810);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191233A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191233C3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191233C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191233C48);
}

void nitro::flexible_type_impl::lt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::lt_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191233F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v31, (uint64_t)a1);
      v3 = *(int *)(v31 + 4 * v37) > a2;
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      v4 = v32;
      if (!v32)
        return v3;
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v38, (uint64_t)a1);
      v3 = *(unsigned __int8 *)(v38 + v44) > a2;
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v4 = v39;
      if (!v39)
        return v3;
      v14 = (unint64_t *)&v39->__shared_owners_;
      do
        v6 = __ldaxr(v14);
      while (__stlxr(v6 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = *(float *)(v17 + 4 * v23) > (float)a2;
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v15 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v15);
      while (__stlxr(v6 - 1, v15));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v24, (uint64_t)a1);
      _H1 = *(_WORD *)(v24 + 2 * v30);
      __asm { FCVT            S1, H1 }
      v3 = (float)a2 < _S1;
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v4 = v25;
      if (!v25)
        return v3;
      v13 = (unint64_t *)&v25->__shared_owners_;
      do
        v6 = __ldaxr(v13);
      while (__stlxr(v6 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void nitro::flexible_type_impl::lt_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191234304(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191234318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191234310);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191234598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123473C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191234750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191234748);
}

void nitro::flexible_type_impl::lt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 88, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::lt_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191234A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  unint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v13;
  unint64_t *v14;
  float v15;
  unint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v33, (uint64_t)a1);
      v18 = *(int *)(v33 + 4 * v39);
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      _D9 = (double)v18;
      v5 = v34;
      if (!v34)
        return a2 < _D9;
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v40, (uint64_t)a1);
      LOBYTE(v2) = *(_BYTE *)(v40 + v46);
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      _D9 = (double)v2;
      v5 = v41;
      if (!v41)
        return a2 < _D9;
      v14 = (unint64_t *)&v41->__shared_owners_;
      do
        v7 = __ldaxr(v14);
      while (__stlxr(v7 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v19, (uint64_t)a1);
      v15 = *(float *)(v19 + 4 * v25);
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      _D9 = v15;
      v5 = v20;
      if (!v20)
        return a2 < _D9;
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(v16);
      while (__stlxr(v7 - 1, v16));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v26, (uint64_t)a1);
      _H9 = *(_WORD *)(v26 + 2 * v32);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      __asm { FCVT            D9, H9 }
      v5 = v27;
      if (!v27)
        return a2 < _D9;
      v13 = (unint64_t *)&v27->__shared_owners_;
      do
        v7 = __ldaxr(v13);
      while (__stlxr(v7 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a2 < _D9;
}

void nitro::flexible_type_impl::lt_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 88, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191234DF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191234E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191234E04);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19123508C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191235230(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191235244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123523CLL);
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"t.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 104, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191235554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_(_DWORD *a1, _DWORD *a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *v32;
  void *v33;
  void *__p;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  char v75;

  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v49, (uint64_t)a2);
      v55 = &v75;
      nitro::ndarray<int>::ndarray(&v56, &v49);
      v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v55);
      if (v60)
      {
        v61 = v60;
        operator delete(v60);
      }
      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
      v4 = v57;
      if (v57)
      {
        p_shared_owners = (unint64_t *)&v57->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (v53)
      {
        v54 = v53;
        operator delete(v53);
      }
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }
      v7 = v50;
      if (!v50)
        return v3;
      v8 = (unint64_t *)&v50->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v62, (uint64_t)a2);
      v68 = &v75;
      nitro::ndarray<unsigned char>::ndarray(&v69, &v62);
      v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v68);
      if (v73)
      {
        v74 = v73;
        operator delete(v73);
      }
      if (v71)
      {
        v72 = v71;
        operator delete(v71);
      }
      v14 = v70;
      if (v70)
      {
        v15 = (unint64_t *)&v70->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v66)
      {
        v67 = v66;
        operator delete(v66);
      }
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      v7 = v63;
      if (!v63)
        return v3;
      v17 = (unint64_t *)&v63->__shared_owners_;
      do
        v9 = __ldaxr(v17);
      while (__stlxr(v9 - 1, v17));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v23, (uint64_t)a2);
      v29 = &v75;
      nitro::ndarray<float>::ndarray(&v30, &v23);
      v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_(a1, (uint64_t)&v29);
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
      if (v32)
      {
        v33 = v32;
        operator delete(v32);
      }
      v18 = v31;
      if (v31)
      {
        v19 = (unint64_t *)&v31->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v7 = v24;
      if (!v24)
        return v3;
      v21 = (unint64_t *)&v24->__shared_owners_;
      do
        v9 = __ldaxr(v21);
      while (__stlxr(v9 - 1, v21));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v36, (uint64_t)a2);
      v42 = &v75;
      nitro::ndarray<half>::ndarray(&v43, &v36);
      v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v42);
      if (v47)
      {
        v48 = v47;
        operator delete(v47);
      }
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      v10 = v44;
      if (v44)
      {
        v11 = (unint64_t *)&v44->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      v7 = v37;
      if (!v37)
        return v3;
      v13 = (unint64_t *)&v37->__shared_owners_;
      do
        v9 = __ldaxr(v13);
      while (__stlxr(v9 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEv();
  }
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v3;
}

void sub_19123595C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)va1);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191235980(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v1 - 120));
  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_1912359A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a38);
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

void sub_1912359C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a57);
  nitro::ndarray<float>::~ndarray(&a48);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 104, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191235B28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191235B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191235B34);
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v23, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v23);
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v4 = v24;
      if (!v24)
        return v3;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v29, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v29);
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v4 = v30;
      if (!v30)
        return v3;
      v8 = (unint64_t *)&v30->__shared_owners_;
      do
        v6 = __ldaxr(v8);
      while (__stlxr(v6 - 1, v8));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v11, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v11);
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      v4 = v12;
      if (!v12)
        return v3;
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(v9);
      while (__stlxr(v6 - 1, v9));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v17);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v7 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void sub_191235D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191235D50(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_191235D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191235D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v23, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v23);
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v4 = v24;
      if (!v24)
        return v3;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v29, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v29);
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v4 = v30;
      if (!v30)
        return v3;
      v8 = (unint64_t *)&v30->__shared_owners_;
      do
        v6 = __ldaxr(v8);
      while (__stlxr(v6 - 1, v8));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v11, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v11);
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      v4 = v12;
      if (!v12)
        return v3;
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(v9);
      while (__stlxr(v6 - 1, v9));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v17);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v7 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void sub_191235F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191235F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_191235F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191235FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v23, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v23);
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v4 = v24;
      if (!v24)
        return v3;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v29, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v29);
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v4 = v30;
      if (!v30)
        return v3;
      v8 = (unint64_t *)&v30->__shared_owners_;
      do
        v6 = __ldaxr(v8);
      while (__stlxr(v6 - 1, v8));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v11, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v11);
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      v4 = v12;
      if (!v12)
        return v3;
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(v9);
      while (__stlxr(v6 - 1, v9));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v17);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v7 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void sub_1912361A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1912361B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1912361CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1912361E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v23, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v23);
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v4 = v24;
      if (!v24)
        return v3;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v29, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v29);
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v4 = v30;
      if (!v30)
        return v3;
      v8 = (unint64_t *)&v30->__shared_owners_;
      do
        v6 = __ldaxr(v8);
      while (__stlxr(v6 - 1, v8));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v11, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v11);
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      v4 = v12;
      if (!v12)
        return v3;
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(v9);
      while (__stlxr(v6 - 1, v9));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v17);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v7 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void sub_1912363D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1912363EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_191236400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_191236414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19123668C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<unsigned char>::ndarray(&v19, a2);
  nitro::ndarray<unsigned char>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(unsigned __int8 *)(v19 + v25);
  v4 = *(unsigned __int8 *)(v12 + v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 < v4;
}

void sub_191236804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<int>::ndarray(&v19, a2);
  nitro::ndarray<unsigned char>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(_DWORD *)(v19 + 4 * v25);
  v4 = *(unsigned __int8 *)(v12 + v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 < v4;
}

void sub_191236928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<half>::ndarray(&v24, a2);
  nitro::ndarray<unsigned char>::ndarray(&v17, (_QWORD *)(a1 + 8));
  _H8 = *(_WORD *)(v24 + 2 * v30);
  v4 = *(unsigned __int8 *)(v17 + v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S0, H8 }
  return _S0 < (float)v4;
}

void sub_191236A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  float v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<float>::ndarray(&v19, a2);
  nitro::ndarray<unsigned char>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(float *)(v19 + 4 * v25);
  v4 = *(unsigned __int8 *)(v12 + v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 < (float)v4;
}

void sub_191236B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191236DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191236F98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191236FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191236FA4);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<unsigned char>::ndarray(&v19, a2);
  nitro::ndarray<int>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(unsigned __int8 *)(v19 + v25);
  v4 = *(_DWORD *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4 > v3;
}

void sub_1912370D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<int>::ndarray(&v19, a2);
  nitro::ndarray<int>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(_DWORD *)(v19 + 4 * v25);
  v4 = *(_DWORD *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 < v4;
}

void sub_1912371FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<half>::ndarray(&v24, a2);
  nitro::ndarray<int>::ndarray(&v17, (_QWORD *)(a1 + 8));
  _H8 = *(_WORD *)(v24 + 2 * v30);
  v4 = *(_DWORD *)(v17 + 4 * v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S0, H8 }
  return _S0 < (float)v4;
}

void sub_191237328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  float v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<float>::ndarray(&v19, a2);
  nitro::ndarray<int>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(float *)(v19 + 4 * v25);
  v4 = *(_DWORD *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 < (float)v4;
}

void sub_191237450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1912376C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123786C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191237880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191237878);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<unsigned char>::ndarray(&v24, a2);
  nitro::ndarray<half>::ndarray(&v17, (_QWORD *)(a1 + 8));
  v3 = *(unsigned __int8 *)(v24 + v30);
  _H8 = *(_WORD *)(v17 + 2 * v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S1, H8 }
  return (float)v3 < _S1;
}

void sub_1912379B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<int>::ndarray(&v24, a2);
  nitro::ndarray<half>::ndarray(&v17, (_QWORD *)(a1 + 8));
  v3 = *(_DWORD *)(v24 + 4 * v30);
  _H8 = *(_WORD *)(v17 + 2 * v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S1, H8 }
  return (float)v3 < _S1;
}

void sub_191237AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  nitro::ndarray<half>::ndarray(&v25, a2);
  nitro::ndarray<half>::ndarray(&v18, (_QWORD *)(a1 + 8));
  _H8 = *(_WORD *)(v25 + 2 * v31);
  _H9 = *(_WORD *)(v18 + 2 * v24);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  v5 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v8 = v26;
  if (v26)
  {
    v9 = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm
  {
    FCVT            S0, H9
    FCVT            S1, H8
  }
  return _S1 < _S0;
}

void sub_191237C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  float v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<float>::ndarray(&v24, a2);
  nitro::ndarray<half>::ndarray(&v17, (_QWORD *)(a1 + 8));
  v3 = *(float *)(v24 + 4 * v30);
  _H9 = *(_WORD *)(v17 + 2 * v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S0, H9 }
  return v3 < _S0;
}

void sub_191237D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191237FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191238150(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191238164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123815CLL);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  float v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<unsigned char>::ndarray(&v19, a2);
  nitro::ndarray<float>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(unsigned __int8 *)(v19 + v25);
  v4 = *(float *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4 > (float)v3;
}

void sub_191238294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v3;
  float v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<int>::ndarray(&v19, a2);
  nitro::ndarray<float>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(_DWORD *)(v19 + 4 * v25);
  v4 = *(float *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4 > (float)v3;
}

void sub_1912383BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  float v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<half>::ndarray(&v24, a2);
  nitro::ndarray<float>::ndarray(&v17, (_QWORD *)(a1 + 8));
  _H8 = *(_WORD *)(v24 + 2 * v30);
  v4 = *(float *)(v17 + 4 * v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S0, H8 }
  return v4 > _S0;
}

void sub_1912384E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  float v3;
  float v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<float>::ndarray(&v19, a2);
  nitro::ndarray<float>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(float *)(v19 + 4 * v25);
  v4 = *(float *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 < v4;
}

void sub_191238608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_191238880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191238A24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191238A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191238A30);
}

void _ZZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191238B90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191238BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191238B9CLL);
}

BOOL nitro::flexible_type_impl::lt_operator::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (a2[1] == *a2)
    return a3[1] != *a3;
  if ((uint64_t)(a3[1] - *a3) >> 4)
    __asm { BR              X11 }
  return 0;
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 153, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_191239A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v31, (uint64_t)a1);
      v3 = *(int *)(v31 + 4 * v37) > a2;
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      v4 = v32;
      if (!v32)
        return v3;
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v38, (uint64_t)a1);
      v3 = *(unsigned __int8 *)(v38 + v44) > a2;
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v4 = v39;
      if (!v39)
        return v3;
      v14 = (unint64_t *)&v39->__shared_owners_;
      do
        v6 = __ldaxr(v14);
      while (__stlxr(v6 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = *(float *)(v17 + 4 * v23) > (float)a2;
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v15 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v15);
      while (__stlxr(v6 - 1, v15));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v24, (uint64_t)a1);
      _H0 = *(_WORD *)(v24 + 2 * v30);
      __asm { FCVT            S0, H0 }
      v3 = _S0 > (float)a2;
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v4 = v25;
      if (!v25)
        return v3;
      v13 = (unint64_t *)&v25->__shared_owners_;
      do
        v6 = __ldaxr(v13);
      while (__stlxr(v6 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 153, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_191239E2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_191239E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191239E38);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19123A0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123A264(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123A278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123A270);
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 149, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19123A588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  unint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v13;
  unint64_t *v14;
  float v15;
  unint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v33, (uint64_t)a1);
      v18 = *(int *)(v33 + 4 * v39);
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      _D9 = (double)v18;
      v5 = v34;
      if (!v34)
        return a2 < _D9;
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v40, (uint64_t)a1);
      LOBYTE(v2) = *(_BYTE *)(v40 + v46);
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      _D9 = (double)v2;
      v5 = v41;
      if (!v41)
        return a2 < _D9;
      v14 = (unint64_t *)&v41->__shared_owners_;
      do
        v7 = __ldaxr(v14);
      while (__stlxr(v7 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v19, (uint64_t)a1);
      v15 = *(float *)(v19 + 4 * v25);
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      _D9 = v15;
      v5 = v20;
      if (!v20)
        return a2 < _D9;
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(v16);
      while (__stlxr(v7 - 1, v16));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v26, (uint64_t)a1);
      _H9 = *(_WORD *)(v26 + 2 * v32);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      __asm { FCVT            D9, H9 }
      v5 = v27;
      if (!v27)
        return a2 < _D9;
      v13 = (unint64_t *)&v27->__shared_owners_;
      do
        v7 = __ldaxr(v13);
      while (__stlxr(v7 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a2 < _D9;
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 149, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123A920(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123A934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123A92CLL);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19123ABB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123AD58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123AD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123AD64);
}

void nitro::flexible_type_impl::gt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 145, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::gt_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19123B07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *__p;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v31, (uint64_t)a1);
      v3 = *(int *)(v31 + 4 * v37) < a2;
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      v4 = v32;
      if (!v32)
        return v3;
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v38, (uint64_t)a1);
      v3 = *(unsigned __int8 *)(v38 + v44) < a2;
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      v4 = v39;
      if (!v39)
        return v3;
      v14 = (unint64_t *)&v39->__shared_owners_;
      do
        v6 = __ldaxr(v14);
      while (__stlxr(v6 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = *(float *)(v17 + 4 * v23) < (float)a2;
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v15 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v15);
      while (__stlxr(v6 - 1, v15));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v24, (uint64_t)a1);
      _H1 = *(_WORD *)(v24 + 2 * v30);
      __asm { FCVT            S1, H1 }
      v3 = (float)a2 > _S1;
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      v4 = v25;
      if (!v25)
        return v3;
      v13 = (unint64_t *)&v25->__shared_owners_;
      do
        v6 = __ldaxr(v13);
      while (__stlxr(v6 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void nitro::flexible_type_impl::gt_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 145, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123B420(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123B434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123B42CLL);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19123B6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123B858(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123B86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123B864);
}

void nitro::flexible_type_impl::gt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"u.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 141, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::gt_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19123BB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  unint64_t v2;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v13;
  unint64_t *v14;
  float v15;
  unint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *v28;
  void *v29;
  void *__p;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v33, (uint64_t)a1);
      v18 = *(int *)(v33 + 4 * v39);
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      _D9 = (double)v18;
      v5 = v34;
      if (!v34)
        return a2 > _D9;
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v40, (uint64_t)a1);
      LOBYTE(v2) = *(_BYTE *)(v40 + v46);
      if (v44)
      {
        v45 = v44;
        operator delete(v44);
      }
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      _D9 = (double)v2;
      v5 = v41;
      if (!v41)
        return a2 > _D9;
      v14 = (unint64_t *)&v41->__shared_owners_;
      do
        v7 = __ldaxr(v14);
      while (__stlxr(v7 - 1, v14));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v19, (uint64_t)a1);
      v15 = *(float *)(v19 + 4 * v25);
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      _D9 = v15;
      v5 = v20;
      if (!v20)
        return a2 > _D9;
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(v16);
      while (__stlxr(v7 - 1, v16));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v26, (uint64_t)a1);
      _H9 = *(_WORD *)(v26 + 2 * v32);
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        v29 = v28;
        operator delete(v28);
      }
      __asm { FCVT            D9, H9 }
      v5 = v27;
      if (!v27)
        return a2 > _D9;
      v13 = (unint64_t *)&v27->__shared_owners_;
      do
        v7 = __ldaxr(v13);
      while (__stlxr(v7 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a2 > _D9;
}

void nitro::flexible_type_impl::gt_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 141, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123BF14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123BF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123BF20);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19123C1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123C34C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123C360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123C358);
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"t.num_elem()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 157, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19123C670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_(_DWORD *a1, _DWORD *a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *v32;
  void *v33;
  void *__p;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  char *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  char v75;

  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v49, (uint64_t)a2);
      v55 = &v75;
      nitro::ndarray<int>::ndarray(&v56, &v49);
      v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v55);
      if (v60)
      {
        v61 = v60;
        operator delete(v60);
      }
      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
      v4 = v57;
      if (v57)
      {
        p_shared_owners = (unint64_t *)&v57->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      if (v53)
      {
        v54 = v53;
        operator delete(v53);
      }
      if (v51)
      {
        v52 = v51;
        operator delete(v51);
      }
      v7 = v50;
      if (!v50)
        return v3;
      v8 = (unint64_t *)&v50->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v62, (uint64_t)a2);
      v68 = &v75;
      nitro::ndarray<unsigned char>::ndarray(&v69, &v62);
      v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v68);
      if (v73)
      {
        v74 = v73;
        operator delete(v73);
      }
      if (v71)
      {
        v72 = v71;
        operator delete(v71);
      }
      v14 = v70;
      if (v70)
      {
        v15 = (unint64_t *)&v70->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v66)
      {
        v67 = v66;
        operator delete(v66);
      }
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      v7 = v63;
      if (!v63)
        return v3;
      v17 = (unint64_t *)&v63->__shared_owners_;
      do
        v9 = __ldaxr(v17);
      while (__stlxr(v9 - 1, v17));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v23, (uint64_t)a2);
      v29 = &v75;
      nitro::ndarray<float>::ndarray(&v30, &v23);
      v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_(a1, (uint64_t)&v29);
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
      if (v32)
      {
        v33 = v32;
        operator delete(v32);
      }
      v18 = v31;
      if (v31)
      {
        v19 = (unint64_t *)&v31->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v7 = v24;
      if (!v24)
        return v3;
      v21 = (unint64_t *)&v24->__shared_owners_;
      do
        v9 = __ldaxr(v21);
      while (__stlxr(v9 - 1, v21));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v36, (uint64_t)a2);
      v42 = &v75;
      nitro::ndarray<half>::ndarray(&v43, &v36);
      v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v42);
      if (v47)
      {
        v48 = v47;
        operator delete(v47);
      }
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      v10 = v44;
      if (v44)
      {
        v11 = (unint64_t *)&v44->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (v40)
      {
        v41 = v40;
        operator delete(v40);
      }
      if (v38)
      {
        v39 = v38;
        operator delete(v38);
      }
      v7 = v37;
      if (!v37)
        return v3;
      v13 = (unint64_t *)&v37->__shared_owners_;
      do
        v9 = __ldaxr(v13);
      while (__stlxr(v9 - 1, v13));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEv();
  }
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v3;
}

void sub_19123CA78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)va1);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19123CA9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v1 - 120));
  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_19123CAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a38);
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

void sub_19123CAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a57);
  nitro::ndarray<float>::~ndarray(&a48);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 157, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123CC44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123CC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123CC50);
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v23, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v23);
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v4 = v24;
      if (!v24)
        return v3;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v29, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v29);
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v4 = v30;
      if (!v30)
        return v3;
      v8 = (unint64_t *)&v30->__shared_owners_;
      do
        v6 = __ldaxr(v8);
      while (__stlxr(v6 - 1, v8));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v11, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v11);
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      v4 = v12;
      if (!v12)
        return v3;
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(v9);
      while (__stlxr(v6 - 1, v9));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v17);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v7 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void sub_19123CE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19123CE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_19123CE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19123CE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v23, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v23);
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v4 = v24;
      if (!v24)
        return v3;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v29, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v29);
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v4 = v30;
      if (!v30)
        return v3;
      v8 = (unint64_t *)&v30->__shared_owners_;
      do
        v6 = __ldaxr(v8);
      while (__stlxr(v6 - 1, v8));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v11, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v11);
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      v4 = v12;
      if (!v12)
        return v3;
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(v9);
      while (__stlxr(v6 - 1, v9));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v17);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v7 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void sub_19123D08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19123D0A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_19123D0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19123D0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v23, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v23);
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v4 = v24;
      if (!v24)
        return v3;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v29, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v29);
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v4 = v30;
      if (!v30)
        return v3;
      v8 = (unint64_t *)&v30->__shared_owners_;
      do
        v6 = __ldaxr(v8);
      while (__stlxr(v6 - 1, v8));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v11, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v11);
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      v4 = v12;
      if (!v12)
        return v3;
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(v9);
      while (__stlxr(v6 - 1, v9));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v17);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v7 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void sub_19123D2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19123D2D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_19123D2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19123D2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_(_DWORD *a1, uint64_t a2)
{
  _BOOL8 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v23, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v23);
      if (v27)
      {
        v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        v26 = v25;
        operator delete(v25);
      }
      v4 = v24;
      if (!v24)
        return v3;
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v29, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v29);
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      v4 = v30;
      if (!v30)
        return v3;
      v8 = (unint64_t *)&v30->__shared_owners_;
      do
        v6 = __ldaxr(v8);
      while (__stlxr(v6 - 1, v8));
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v11, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v11);
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      v4 = v12;
      if (!v12)
        return v3;
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(v9);
      while (__stlxr(v6 - 1, v9));
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v17, (uint64_t)a1);
      v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v17);
      if (__p)
      {
        v22 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v4 = v18;
      if (!v18)
        return v3;
      v7 = (unint64_t *)&v18->__shared_owners_;
      do
        v6 = __ldaxr(v7);
      while (__stlxr(v6 - 1, v7));
      break;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEv();
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v3;
}

void sub_19123D4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19123D508(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_19123D51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19123D530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19123D7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<unsigned char>::ndarray(&v19, a2);
  nitro::ndarray<unsigned char>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(unsigned __int8 *)(v19 + v25);
  v4 = *(unsigned __int8 *)(v12 + v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 > v4;
}

void sub_19123D920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<int>::ndarray(&v19, a2);
  nitro::ndarray<unsigned char>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(_DWORD *)(v19 + 4 * v25);
  v4 = *(unsigned __int8 *)(v12 + v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 > v4;
}

void sub_19123DA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<half>::ndarray(&v24, a2);
  nitro::ndarray<unsigned char>::ndarray(&v17, (_QWORD *)(a1 + 8));
  _H8 = *(_WORD *)(v24 + 2 * v30);
  v4 = *(unsigned __int8 *)(v17 + v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S0, H8 }
  return _S0 > (float)v4;
}

void sub_19123DB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  float v3;
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<float>::ndarray(&v19, a2);
  nitro::ndarray<unsigned char>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(float *)(v19 + 4 * v25);
  v4 = *(unsigned __int8 *)(v12 + v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 > (float)v4;
}

void sub_19123DC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19123DF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123E0B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123E0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123E0C0);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<unsigned char>::ndarray(&v19, a2);
  nitro::ndarray<int>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(unsigned __int8 *)(v19 + v25);
  v4 = *(_DWORD *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4 < v3;
}

void sub_19123E1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<int>::ndarray(&v19, a2);
  nitro::ndarray<int>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(_DWORD *)(v19 + 4 * v25);
  v4 = *(_DWORD *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 > v4;
}

void sub_19123E318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<half>::ndarray(&v24, a2);
  nitro::ndarray<int>::ndarray(&v17, (_QWORD *)(a1 + 8));
  _H8 = *(_WORD *)(v24 + 2 * v30);
  v4 = *(_DWORD *)(v17 + 4 * v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S0, H8 }
  return _S0 > (float)v4;
}

void sub_19123E444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  float v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<float>::ndarray(&v19, a2);
  nitro::ndarray<int>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(float *)(v19 + 4 * v25);
  v4 = *(_DWORD *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 > (float)v4;
}

void sub_19123E56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19123E7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123E988(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123E99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123E994);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<unsigned char>::ndarray(&v24, a2);
  nitro::ndarray<half>::ndarray(&v17, (_QWORD *)(a1 + 8));
  v3 = *(unsigned __int8 *)(v24 + v30);
  _H8 = *(_WORD *)(v17 + 2 * v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S1, H8 }
  return (float)v3 > _S1;
}

void sub_19123EAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<int>::ndarray(&v24, a2);
  nitro::ndarray<half>::ndarray(&v17, (_QWORD *)(a1 + 8));
  v3 = *(_DWORD *)(v24 + 4 * v30);
  _H8 = *(_WORD *)(v17 + 2 * v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S1, H8 }
  return (float)v3 > _S1;
}

void sub_19123EBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  nitro::ndarray<half>::ndarray(&v25, a2);
  nitro::ndarray<half>::ndarray(&v18, (_QWORD *)(a1 + 8));
  _H8 = *(_WORD *)(v25 + 2 * v31);
  _H9 = *(_WORD *)(v18 + 2 * v24);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  v5 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v8 = v26;
  if (v26)
  {
    v9 = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm
  {
    FCVT            S0, H9
    FCVT            S1, H8
  }
  return _S1 > _S0;
}

void sub_19123ED28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  float v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<float>::ndarray(&v24, a2);
  nitro::ndarray<half>::ndarray(&v17, (_QWORD *)(a1 + 8));
  v3 = *(float *)(v24 + 4 * v30);
  _H9 = *(_WORD *)(v17 + 2 * v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S0, H9 }
  return v3 > _S0;
}

void sub_19123EE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19123F0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123F26C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123F280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123F278);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  float v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<unsigned char>::ndarray(&v19, a2);
  nitro::ndarray<float>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(unsigned __int8 *)(v19 + v25);
  v4 = *(float *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4 < (float)v3;
}

void sub_19123F3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  int v3;
  float v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<int>::ndarray(&v19, a2);
  nitro::ndarray<float>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(_DWORD *)(v19 + 4 * v25);
  v4 = *(float *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v4 < (float)v3;
}

void sub_19123F4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  float v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  void *v20;
  void *__p;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  nitro::ndarray<half>::ndarray(&v24, a2);
  nitro::ndarray<float>::ndarray(&v17, (_QWORD *)(a1 + 8));
  _H8 = *(_WORD *)(v24 + 2 * v30);
  v4 = *(float *)(v17 + 4 * v23);
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  v5 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v8 = v25;
  if (v25)
  {
    v9 = (unint64_t *)&v25->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __asm { FCVT            S0, H8 }
  return v4 < _S0;
}

void sub_19123F600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, _QWORD *a2)
{
  float v3;
  float v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;

  nitro::ndarray<float>::ndarray(&v19, a2);
  nitro::ndarray<float>::ndarray(&v12, (_QWORD *)(a1 + 8));
  v3 = *(float *)(v19 + 4 * v25);
  v4 = *(float *)(v12 + 4 * v18);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v3 > v4;
}

void sub_19123F724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19123F99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11gt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123FB40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123FB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123FB4CLL);
}

void _ZZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEvENKUlvE_clEv()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19123FCAC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19123FCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19123FCB8);
}

uint64_t nitro::flexible_type_impl::gt_operator::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (a2[1] == *a2)
    return 0;
  if ((uint64_t)(a3[1] - *a3) >> 4)
    __asm { BR              X11 }
  return 1;
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8::$_8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_191240A54(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF770;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF770;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF770;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8::$_8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191240C30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF770;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8::$_8((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  unint64_t *v23;
  unsigned __int8 v24;
  _QWORD v25[2];
  unint64_t *v26;
  unsigned __int8 v27;
  __int128 v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      v5 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(a1 + 41) = 1;
      v6 = *(_QWORD *)(a1 + 56);
      v25[0] = v5;
      v25[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v26 = 0;
      v27 = 0;
      if ((_QWORD *)(a1 + 48) != v25)
      {
        v9 = *(unint64_t **)(a1 + 64);
        v26 = v9;
        v27 = *(_BYTE *)(a1 + 72);
        if (v27 - 2 < 4 || v27 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      if (v25[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      if (*(_BYTE *)(a1 + 112))
      {
        if (*(_BYTE *)(a1 + 113))
        {
LABEL_23:
          v14 = *(_QWORD *)(a1 + 120);
          *(_BYTE *)(a1 + 113) = 1;
          v15 = *(_QWORD *)(a1 + 128);
          v22[0] = v14;
          v22[1] = v15;
          if (v15)
          {
            v16 = (unint64_t *)(v15 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v23 = 0;
          v24 = 0;
          if ((_QWORD *)(a1 + 120) != v22)
          {
            v18 = *(unint64_t **)(a1 + 136);
            v23 = v18;
            v24 = *(_BYTE *)(a1 + 144);
            if (v24 - 2 < 4 || v24 == 9)
            {
              do
                v20 = __ldaxr(v18);
              while (__stlxr(v20 + 1, v18));
            }
          }
LABEL_36:
          if (!v22[0])
            __asm { BR              X10 }
          nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
        }
        v13 = *(_QWORD *)(a1 + 104);
        if (v13)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v28, v13, a2);
          nitro::nitro_variable::operator=(a1 + 120, v28);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
          goto LABEL_23;
        }
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 104);
        if (v21)
        {
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 48))(v22, v21, a2);
          goto LABEL_36;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v28, v4, a2);
      nitro::nitro_variable::operator=(a1 + 48, v28);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v25, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_191241590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_8"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_8" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_8")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_8" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9::$_9(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_1912417C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF7C8;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF7C8;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF7C8;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9::$_9((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19124199C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF7C8;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9::$_9((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  unint64_t *v23;
  unsigned __int8 v24;
  _QWORD v25[2];
  unint64_t *v26;
  unsigned __int8 v27;
  __int128 v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      v5 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(a1 + 41) = 1;
      v6 = *(_QWORD *)(a1 + 56);
      v25[0] = v5;
      v25[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v26 = 0;
      v27 = 0;
      if ((_QWORD *)(a1 + 48) != v25)
      {
        v9 = *(unint64_t **)(a1 + 64);
        v26 = v9;
        v27 = *(_BYTE *)(a1 + 72);
        if (v27 - 2 < 4 || v27 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      if (v25[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      if (*(_BYTE *)(a1 + 112))
      {
        if (*(_BYTE *)(a1 + 113))
        {
LABEL_23:
          v14 = *(_QWORD *)(a1 + 120);
          *(_BYTE *)(a1 + 113) = 1;
          v15 = *(_QWORD *)(a1 + 128);
          v22[0] = v14;
          v22[1] = v15;
          if (v15)
          {
            v16 = (unint64_t *)(v15 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v23 = 0;
          v24 = 0;
          if ((_QWORD *)(a1 + 120) != v22)
          {
            v18 = *(unint64_t **)(a1 + 136);
            v23 = v18;
            v24 = *(_BYTE *)(a1 + 144);
            if (v24 - 2 < 4 || v24 == 9)
            {
              do
                v20 = __ldaxr(v18);
              while (__stlxr(v20 + 1, v18));
            }
          }
LABEL_36:
          if (!v22[0])
            __asm { BR              X10 }
          nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
        }
        v13 = *(_QWORD *)(a1 + 104);
        if (v13)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v28, v13, a2);
          nitro::nitro_variable::operator=(a1 + 120, v28);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
          goto LABEL_23;
        }
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 104);
        if (v21)
        {
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 48))(v22, v21, a2);
          goto LABEL_36;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v28, v4, a2);
      nitro::nitro_variable::operator=(a1 + 48, v28);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v25, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_19124286C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_9"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_9" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_9")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_9" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10::$_10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_191242A9C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF820;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF820;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF820;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10::$_10((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191242C78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF820;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10::$_10((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  unint64_t *v23;
  unsigned __int8 v24;
  _QWORD v25[2];
  unint64_t *v26;
  unsigned __int8 v27;
  __int128 v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      v5 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(a1 + 41) = 1;
      v6 = *(_QWORD *)(a1 + 56);
      v25[0] = v5;
      v25[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v26 = 0;
      v27 = 0;
      if ((_QWORD *)(a1 + 48) != v25)
      {
        v9 = *(unint64_t **)(a1 + 64);
        v26 = v9;
        v27 = *(_BYTE *)(a1 + 72);
        if (v27 - 2 < 4 || v27 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      if (v25[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      if (*(_BYTE *)(a1 + 112))
      {
        if (*(_BYTE *)(a1 + 113))
        {
LABEL_23:
          v14 = *(_QWORD *)(a1 + 120);
          *(_BYTE *)(a1 + 113) = 1;
          v15 = *(_QWORD *)(a1 + 128);
          v22[0] = v14;
          v22[1] = v15;
          if (v15)
          {
            v16 = (unint64_t *)(v15 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v23 = 0;
          v24 = 0;
          if ((_QWORD *)(a1 + 120) != v22)
          {
            v18 = *(unint64_t **)(a1 + 136);
            v23 = v18;
            v24 = *(_BYTE *)(a1 + 144);
            if (v24 - 2 < 4 || v24 == 9)
            {
              do
                v20 = __ldaxr(v18);
              while (__stlxr(v20 + 1, v18));
            }
          }
LABEL_36:
          if (!v22[0])
            __asm { BR              X10 }
          nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
        }
        v13 = *(_QWORD *)(a1 + 104);
        if (v13)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v28, v13, a2);
          nitro::nitro_variable::operator=(a1 + 120, v28);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
          goto LABEL_23;
        }
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 104);
        if (v21)
        {
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 48))(v22, v21, a2);
          goto LABEL_36;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v28, v4, a2);
      nitro::nitro_variable::operator=(a1 + 48, v28);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v25, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_191243B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_10"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_10" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_10")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_10" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11::$_11(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_191243D80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF878;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF878;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF878;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11::$_11((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191243F5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF878;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11::$_11((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  unint64_t *v26;
  unsigned __int8 v27;
  _QWORD v28[2];
  unint64_t *v29;
  unsigned __int8 v30;
  __int128 v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40))
  {
    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v28, v14, a2);
      goto LABEL_18;
    }
    goto LABEL_43;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v31, v6, a2);
      nitro::nitro_variable::operator=(a1 + 48, v31);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v31);
      goto LABEL_5;
    }
LABEL_43:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_5:
  v7 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 41) = 1;
  v8 = *(_QWORD *)(a1 + 56);
  v28[0] = v7;
  v28[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v29 = 0;
  v30 = 0;
  if ((_QWORD *)(a1 + 48) != v28)
  {
    v11 = *(unint64_t **)(a1 + 64);
    v29 = v11;
    v30 = *(_BYTE *)(a1 + 72);
    if (v30 - 2 < 4 || v30 == 9)
    {
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 + 1, v11));
    }
  }
LABEL_18:
  if (v28[0])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  if ((nitro::flexible_type::is_zero((nitro::flexible_type *)&v29) & 1) != 0)
  {
    v15 = 0;
    goto LABEL_40;
  }
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(_BYTE *)(a1 + 113))
    {
LABEL_25:
      v17 = *(_QWORD *)(a1 + 120);
      *(_BYTE *)(a1 + 113) = 1;
      v18 = *(_QWORD *)(a1 + 128);
      v25[0] = v17;
      v25[1] = v18;
      if (v18)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v26 = 0;
      v27 = 0;
      if ((_QWORD *)(a1 + 120) != v25)
      {
        v21 = *(unint64_t **)(a1 + 136);
        v26 = v21;
        v27 = *(_BYTE *)(a1 + 144);
        if (v27 - 2 < 4 || v27 == 9)
        {
          do
            v23 = __ldaxr(v21);
          while (__stlxr(v23 + 1, v21));
        }
      }
      goto LABEL_38;
    }
    v16 = *(_QWORD *)(a1 + 104);
    if (v16)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v31, v16, a2);
      nitro::nitro_variable::operator=(a1 + 120, v31);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v31);
      goto LABEL_25;
    }
LABEL_44:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v24 = *(_QWORD *)(a1 + 104);
  if (!v24)
    goto LABEL_44;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(v25, v24, a2);
LABEL_38:
  if (v25[0])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  v15 = nitro::flexible_type::is_zero((nitro::flexible_type *)&v26) ^ 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v25);
LABEL_40:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = v15;
  *(_BYTE *)(a3 + 24) = 0;
}

void sub_191244344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_11"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_11" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_11")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_11" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12::$_12(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_191244574(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF8D0;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF8D0;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF8D0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12::$_12((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191244750(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF8D0;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12::$_12((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  unint64_t *v26;
  unsigned __int8 v27;
  _QWORD v28[2];
  unint64_t *v29;
  unsigned __int8 v30;
  __int128 v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40))
  {
    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v28, v14, a2);
      goto LABEL_18;
    }
    goto LABEL_43;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v31, v6, a2);
      nitro::nitro_variable::operator=(a1 + 48, v31);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v31);
      goto LABEL_5;
    }
LABEL_43:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_5:
  v7 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 41) = 1;
  v8 = *(_QWORD *)(a1 + 56);
  v28[0] = v7;
  v28[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v29 = 0;
  v30 = 0;
  if ((_QWORD *)(a1 + 48) != v28)
  {
    v11 = *(unint64_t **)(a1 + 64);
    v29 = v11;
    v30 = *(_BYTE *)(a1 + 72);
    if (v30 - 2 < 4 || v30 == 9)
    {
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 + 1, v11));
    }
  }
LABEL_18:
  if (v28[0])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  if (!nitro::flexible_type::is_zero((nitro::flexible_type *)&v29))
  {
    v23 = 1;
    goto LABEL_40;
  }
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(_BYTE *)(a1 + 113))
    {
LABEL_24:
      v16 = *(_QWORD *)(a1 + 120);
      *(_BYTE *)(a1 + 113) = 1;
      v17 = *(_QWORD *)(a1 + 128);
      v25[0] = v16;
      v25[1] = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v26 = 0;
      v27 = 0;
      if ((_QWORD *)(a1 + 120) != v25)
      {
        v20 = *(unint64_t **)(a1 + 136);
        v26 = v20;
        v27 = *(_BYTE *)(a1 + 144);
        if (v27 - 2 < 4 || v27 == 9)
        {
          do
            v22 = __ldaxr(v20);
          while (__stlxr(v22 + 1, v20));
        }
      }
      goto LABEL_38;
    }
    v15 = *(_QWORD *)(a1 + 104);
    if (v15)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v31, v15, a2);
      nitro::nitro_variable::operator=(a1 + 120, v31);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v31);
      goto LABEL_24;
    }
LABEL_44:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v24 = *(_QWORD *)(a1 + 104);
  if (!v24)
    goto LABEL_44;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(v25, v24, a2);
LABEL_38:
  if (v25[0])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  v23 = nitro::flexible_type::is_zero((nitro::flexible_type *)&v26) ^ 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v25);
LABEL_40:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = v23;
  *(_BYTE *)(a3 + 24) = 0;
}

void sub_191244B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_12"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_12" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_12")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_12" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13::$_13(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_191244D68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF928;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAF928;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAF928;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13::$_13((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191244F44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF928;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13::$_13((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  void *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t *v89;
  void *v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *p_shared_owners;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unsigned __int8 v98;
  unint64_t *v99;
  unsigned __int8 v100;
  __int128 v101[2];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40))
  {
    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(&v95, v14, a2);
      goto LABEL_18;
    }
    goto LABEL_159;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v101, v6, a2);
      nitro::nitro_variable::operator=(a1 + 48, v101);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v101);
      goto LABEL_5;
    }
LABEL_159:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_5:
  v7 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 41) = 1;
  v8 = *(_QWORD *)(a1 + 56);
  v95 = v7;
  v96 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v97 = 0;
  v98 = 0;
  if ((uint64_t *)(a1 + 48) != &v95)
  {
    v11 = *(unint64_t **)(a1 + 64);
    v97 = v11;
    v98 = *(_BYTE *)(a1 + 72);
    if (v98 - 2 < 4 || v98 == 9)
    {
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 + 1, v11));
    }
  }
LABEL_18:
  if (v95)
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  v15 = v97;
  v99 = v97;
  v100 = v98;
  if (v98 - 2 < 4 || v98 == 9)
  {
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 + 1, v15));
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v95);
  if (!*(_BYTE *)(a1 + 112))
  {
    v26 = *(_QWORD *)(a1 + 104);
    if (v26)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v26 + 48))(&v95, v26, a2);
      goto LABEL_42;
    }
    goto LABEL_160;
  }
  if (!*(_BYTE *)(a1 + 113))
  {
    v18 = *(_QWORD *)(a1 + 104);
    if (v18)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(v101, v18, a2);
      nitro::nitro_variable::operator=(a1 + 120, v101);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v101);
      goto LABEL_29;
    }
LABEL_160:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_29:
  v19 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(a1 + 113) = 1;
  v20 = *(_QWORD *)(a1 + 128);
  v95 = v19;
  v96 = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v97 = 0;
  v98 = 0;
  if ((uint64_t *)(a1 + 120) != &v95)
  {
    v23 = *(unint64_t **)(a1 + 136);
    v97 = v23;
    v98 = *(_BYTE *)(a1 + 144);
    if (v98 - 2 < 4 || v98 == 9)
    {
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 + 1, v23));
    }
  }
LABEL_42:
  if (v95)
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  v27 = v97;
  v28 = v98 - 2;
  switch(v98)
  {
    case 2u:
    case 3u:
    case 9u:
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 + 1, v27));
      goto LABEL_45;
    case 4u:
      do
        v35 = __ldaxr(v27);
      while (__stlxr(v35 + 1, v27));
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v95);
      v36 = std::__find_impl[abi:ne180100]<nitro::flexible_type const*,nitro::flexible_type const*,nitro::flexible_type,std::__identity>(v27[1], v27[2], (uint64_t)&v99) != v27[2];
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = v36;
      *(_BYTE *)(a3 + 24) = 0;
      do
      {
LABEL_57:
        v37 = __ldaxr(v27);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v27));
      if (v38)
        v39 = 1;
      else
        v39 = v27 == 0;
      if (v39)
        goto LABEL_106;
      v40 = v27[1];
      if (!v40)
        goto LABEL_89;
      v41 = v27[2];
      v42 = (void *)v27[1];
      if (v41 != v40)
      {
        do
        {
          v41 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v27 + 3), v41);
        }
        while (v41 != v40);
        v42 = (void *)v27[1];
      }
      v27[2] = v40;
LABEL_88:
      operator delete(v42);
LABEL_89:
      v33 = v27;
      v34 = 0x1020C405E66F15BLL;
LABEL_105:
      MEMORY[0x19401CD90](v33, v34);
LABEL_106:
      switch(v100)
      {
        case 2u:
          v62 = v99;
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            v65 = v99;
            if (v99)
            {
              if (*((char *)v99 + 31) < 0)
                operator delete((void *)v99[1]);
              v66 = v65;
              v67 = 0x1012C404EF22A49;
              goto LABEL_155;
            }
          }
          break;
        case 3u:
          v75 = v99;
          do
          {
            v76 = __ldaxr(v75);
            v77 = v76 - 1;
          }
          while (__stlxr(v77, v75));
          if (!v77)
          {
            v78 = v99;
            if (v99)
            {
              v79 = (void *)v99[1];
              if (v79)
              {
                v99[2] = (unint64_t)v79;
                operator delete(v79);
              }
              v66 = v78;
              v67 = 0x1080C409938AC02;
              goto LABEL_155;
            }
          }
          break;
        case 4u:
          v68 = v99;
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (!v70)
          {
            v71 = v99;
            if (v99)
            {
              v72 = v99[1];
              if (!v72)
                goto LABEL_140;
              v73 = v99[2];
              v74 = (void *)v99[1];
              if (v73 != v72)
              {
                do
                {
                  v73 -= 16;
                  std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v71 + 3), v73);
                }
                while (v73 != v72);
                v74 = (void *)v71[1];
              }
              v71[2] = v72;
              goto LABEL_139;
            }
          }
          break;
        case 5u:
          v80 = v99;
          do
          {
            v81 = __ldaxr(v80);
            v82 = v81 - 1;
          }
          while (__stlxr(v82, v80));
          if (!v82)
          {
            v71 = v99;
            if (v99)
            {
              v83 = v99[1];
              if (v83)
              {
                v84 = v99[2];
                v85 = (void *)v99[1];
                if (v84 != v83)
                {
                  do
                    v84 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v84 - 32);
                  while (v84 != v83);
                  v85 = (void *)v71[1];
                }
                v71[2] = v83;
                v74 = v85;
LABEL_139:
                operator delete(v74);
              }
LABEL_140:
              v66 = v71;
              v67 = 0x1020C405E66F15BLL;
              goto LABEL_155;
            }
          }
          break;
        case 9u:
          v86 = v99;
          do
          {
            v87 = __ldaxr(v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v86));
          if (!v88)
          {
            v89 = v99;
            if (v99)
            {
              v90 = (void *)v99[7];
              if (v90)
              {
                v99[8] = (unint64_t)v90;
                operator delete(v90);
              }
              v91 = (void *)v89[4];
              if (v91)
              {
                v89[5] = (unint64_t)v91;
                operator delete(v91);
              }
              v92 = (std::__shared_weak_count *)v89[3];
              if (v92)
              {
                p_shared_owners = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldaxr(p_shared_owners);
                while (__stlxr(v94 - 1, p_shared_owners));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v66 = v89;
              v67 = 0x10B0C4002311774;
LABEL_155:
              MEMORY[0x19401CD90](v66, v67);
            }
          }
          break;
        default:
          return;
      }
      return;
    case 5u:
      do
        v43 = __ldaxr(v27);
      while (__stlxr(v43 + 1, v27));
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v95);
      if (v27[1] != v27[2])
        __asm { BR              X9 }
      goto LABEL_46;
    default:
LABEL_45:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v95);
LABEL_46:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_BYTE *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      switch(v28)
      {
        case 0:
          do
          {
            v30 = __ldaxr(v27);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v27));
          if (v31)
            v32 = 1;
          else
            v32 = v27 == 0;
          if (v32)
            goto LABEL_106;
          if (*((char *)v27 + 31) < 0)
            operator delete((void *)v27[1]);
          v33 = v27;
          v34 = 0x1012C404EF22A49;
          goto LABEL_105;
        case 1:
          do
          {
            v44 = __ldaxr(v27);
            v45 = v44 - 1;
          }
          while (__stlxr(v45, v27));
          if (v45)
            v46 = 1;
          else
            v46 = v27 == 0;
          if (v46)
            goto LABEL_106;
          v47 = (void *)v27[1];
          if (v47)
          {
            v27[2] = (unint64_t)v47;
            operator delete(v47);
          }
          v33 = v27;
          v34 = 0x1080C409938AC02;
          goto LABEL_105;
        case 2:
          goto LABEL_57;
        case 3:
          do
          {
            v48 = __ldaxr(v27);
            v49 = v48 - 1;
          }
          while (__stlxr(v49, v27));
          if (v49)
            v50 = 1;
          else
            v50 = v27 == 0;
          if (v50)
            goto LABEL_106;
          v51 = v27[1];
          if (!v51)
            goto LABEL_89;
          v52 = v27[2];
          v53 = (void *)v27[1];
          if (v52 != v51)
          {
            do
              v52 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v52 - 32);
            while (v52 != v51);
            v53 = (void *)v27[1];
          }
          v27[2] = v51;
          v42 = v53;
          break;
        case 7:
          do
          {
            v54 = __ldaxr(v27);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v27));
          if (v55)
            v56 = 1;
          else
            v56 = v27 == 0;
          if (v56)
            goto LABEL_106;
          v57 = (void *)v27[7];
          if (v57)
          {
            v27[8] = (unint64_t)v57;
            operator delete(v57);
          }
          v58 = (void *)v27[4];
          if (v58)
          {
            v27[5] = (unint64_t)v58;
            operator delete(v58);
          }
          v59 = (std::__shared_weak_count *)v27[3];
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v33 = v27;
          v34 = 0x10B0C4002311774;
          goto LABEL_105;
        default:
          goto LABEL_106;
      }
      goto LABEL_88;
  }
}

void sub_191245D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;

  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a10);
  switch(a15)
  {
    case 2:
      v16 = (unint64_t *)a14;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (v18)
        goto LABEL_2;
      v19 = (_QWORD *)a14;
      if (!a14)
        goto LABEL_2;
      if (*(char *)(a14 + 31) < 0)
        operator delete(*(void **)(a14 + 8));
      v20 = v19;
      v21 = 0x1012C404EF22A49;
      goto LABEL_53;
    case 3:
      v22 = (unint64_t *)a14;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (v24)
        goto LABEL_2;
      v25 = (_QWORD *)a14;
      if (!a14)
        goto LABEL_2;
      v26 = *(void **)(a14 + 8);
      if (v26)
      {
        *(_QWORD *)(a14 + 16) = v26;
        operator delete(v26);
      }
      v20 = v25;
      v21 = 0x1080C409938AC02;
      goto LABEL_53;
    case 4:
      v27 = (unint64_t *)a14;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (v29)
        goto LABEL_2;
      v30 = (_QWORD *)a14;
      if (!a14)
        goto LABEL_2;
      v31 = *(_QWORD *)(a14 + 8);
      if (!v31)
        goto LABEL_37;
      v32 = *(_QWORD *)(a14 + 16);
      v33 = *(void **)(a14 + 8);
      if (v32 != v31)
      {
        do
        {
          v32 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v30 + 3), v32);
        }
        while (v32 != v31);
        v33 = (void *)v30[1];
      }
      v30[2] = v31;
      goto LABEL_36;
    case 5:
      v34 = (unint64_t *)a14;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (v36)
        goto LABEL_2;
      v30 = (_QWORD *)a14;
      if (!a14)
        goto LABEL_2;
      v37 = *(_QWORD *)(a14 + 8);
      if (!v37)
        goto LABEL_37;
      v38 = *(_QWORD *)(a14 + 16);
      v39 = *(void **)(a14 + 8);
      if (v38 != v37)
      {
        do
          v38 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v38 - 32);
        while (v38 != v37);
        v39 = (void *)v30[1];
      }
      v30[2] = v37;
      v33 = v39;
LABEL_36:
      operator delete(v33);
LABEL_37:
      v20 = v30;
      v21 = 0x1020C405E66F15BLL;
      goto LABEL_53;
    case 9:
      v40 = (unint64_t *)a14;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (v42)
        goto LABEL_2;
      v43 = (_QWORD *)a14;
      if (!a14)
        goto LABEL_2;
      v44 = *(void **)(a14 + 56);
      if (v44)
      {
        *(_QWORD *)(a14 + 64) = v44;
        operator delete(v44);
        v45 = (void *)v43[4];
        if (!v45)
        {
LABEL_44:
          v46 = (std::__shared_weak_count *)v43[3];
          if (!v46)
            goto LABEL_52;
          goto LABEL_48;
        }
      }
      else
      {
        v45 = *(void **)(a14 + 32);
        if (!v45)
          goto LABEL_44;
      }
      v43[5] = v45;
      operator delete(v45);
      v46 = (std::__shared_weak_count *)v43[3];
      if (!v46)
      {
LABEL_52:
        v20 = v43;
        v21 = 0x10B0C4002311774;
LABEL_53:
        MEMORY[0x19401CD90](v20, v21);
        _Unwind_Resume(a1);
      }
LABEL_48:
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      goto LABEL_52;
    default:
LABEL_2:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_13"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_13" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_13")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE4$_13" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t std::__find_impl[abi:ne180100]<nitro::flexible_type const*,nitro::flexible_type const*,nitro::flexible_type,std::__identity>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
    __asm { BR              X9 }
  return result;
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAF400;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAF400;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  JUMPOUT(0x19401CD90);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t *v10;
  unint64_t v11;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E2DAF400;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 7) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_QWORD *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
    v8 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v8;
    if ((v8 - 2) < 4 || v8 == 9)
    {
      v10 = (unint64_t *)*((_QWORD *)v2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  return v2;
}

void sub_1912467DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a2 = &off_1E2DAF400;
  v4 = a2 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
      *(_QWORD *)(a2 + 32) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a2 + 64) = 0;
  v9 = (unint64_t **)(a2 + 64);
  *(_BYTE *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    v10 = *(unint64_t **)(a1 + 64);
    *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a1 + 72);
    *(_BYTE *)(a2 + 72) = v11;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      v13 = *v9;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  return result;
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  unint64_t *v12;
  unsigned __int8 v13;
  __int128 v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      v3 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(a1 + 41) = 1;
      v4 = *(_QWORD *)(a1 + 56);
      v11[0] = v3;
      v11[1] = v4;
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v12 = 0;
      v13 = 0;
      if ((_QWORD *)(a1 + 48) != v11)
      {
        v7 = *(unint64_t **)(a1 + 64);
        v12 = v7;
        v13 = *(_BYTE *)(a1 + 72);
        if (v13 - 2 < 4 || v13 == 9)
        {
          do
            v9 = __ldaxr(v7);
          while (__stlxr(v9 + 1, v7));
        }
      }
LABEL_18:
      if (!v11[0])
        __asm { BR              X9 }
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v2 + 48))(v14);
      nitro::nitro_variable::operator=(a1 + 48, v14);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v14);
      goto LABEL_5;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
    {
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v10 + 48))(v11);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](a1 + 24, v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  OUTLINED_FUNCTION_1_0();
}

{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = OUTLINED_FUNCTION_17(v3);
      while ((void *)v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    OUTLINED_FUNCTION_15_0(v4);
  }
  OUTLINED_FUNCTION_1_0();
}

void sub_191246ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAF458;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAF458;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  JUMPOUT(0x19401CD90);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t *v10;
  unint64_t v11;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E2DAF458;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 7) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_QWORD *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
    v8 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v8;
    if ((v8 - 2) < 4 || v8 == 9)
    {
      v10 = (unint64_t *)*((_QWORD *)v2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  return v2;
}

void sub_1912471F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a2 = &off_1E2DAF458;
  v4 = a2 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
      *(_QWORD *)(a2 + 32) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a2 + 64) = 0;
  v9 = (unint64_t **)(a2 + 64);
  *(_BYTE *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    v10 = *(unint64_t **)(a1 + 64);
    *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a1 + 72);
    *(_BYTE *)(a2 + 72) = v11;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      v13 = *v9;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  return result;
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int is_zero;
  _QWORD v14[2];
  unint64_t *v15;
  unsigned __int8 v16;
  __int128 v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40))
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v12 + 48))(v14);
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v4 + 48))(v17);
      nitro::nitro_variable::operator=(a1 + 48, v17);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v17);
      goto LABEL_5;
    }
LABEL_21:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_5:
  v5 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 41) = 1;
  v6 = *(_QWORD *)(a1 + 56);
  v14[0] = v5;
  v14[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v15 = 0;
  v16 = 0;
  if ((_QWORD *)(a1 + 48) != v14)
  {
    v9 = *(unint64_t **)(a1 + 64);
    v15 = v9;
    v16 = *(_BYTE *)(a1 + 72);
    if (v16 - 2 < 4 || v16 == 9)
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 + 1, v9));
    }
  }
LABEL_18:
  if (v14[0])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  is_zero = nitro::flexible_type::is_zero((nitro::flexible_type *)&v15);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = is_zero;
  *(_BYTE *)(a2 + 24) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v14);
}

void sub_191247508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_1"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir13UNARYOPERATOREE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::UNARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  *a1 = &off_1E2DAFA30;
  v2 = (char *)a1[1];
  if (!v2)
    return a1;
  v3 = (char *)a1[2];
  v4 = (void *)a1[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = (void *)a1[1];
LABEL_11:
  a1[2] = v2;
  operator delete(v4);
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  *a1 = &off_1E2DAFA30;
  v2 = (char *)a1[1];
  if (!v2)
    goto LABEL_12;
  v3 = (char *)a1[2];
  v4 = (void *)a1[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  while (1)
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_6;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
    if (v8 == v2)
    {
      v4 = (void *)a1[1];
LABEL_11:
      a1[2] = v2;
      operator delete(v4);
LABEL_12:
      JUMPOUT(0x19401CD90);
    }
  }
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *v3;

  v2 = (uint64_t *)(a1 + 8);
  v3 = operator new(0x30uLL);
  *v3 = &off_1E2DAFA30;
  std::vector<nitro::impl::delayed_variable>::vector(v3 + 1, v2);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(a1 + 32);
  return v3;
}

void sub_191247728(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a2->n128_u64[0] = (unint64_t)&off_1E2DAFA30;
  std::vector<nitro::impl::delayed_variable>::vector(&a2->n128_u64[1], &a1->n128_i64[1]);
  result = a1[2];
  a2[2] = result;
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  char *v1;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  v1 = *(char **)(a1 + 8);
  if (!v1)
    return;
  v3 = *(char **)(a1 + 16);
  v4 = *(void **)(a1 + 8);
  if (v3 == v1)
    goto LABEL_12;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v1);
  v4 = *(void **)(a1 + 8);
LABEL_12:
  *(_QWORD *)(a1 + 16) = v1;
  operator delete(v4);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *__p)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  v2 = (char *)__p[1];
  if (!v2)
    goto LABEL_12;
  v3 = (char *)__p[2];
  v4 = (void *)__p[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = (void *)__p[1];
LABEL_11:
  __p[2] = v2;
  operator delete(v4);
LABEL_12:
  operator delete(__p);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  int v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t **v41;
  unint64_t v42;
  uint64_t **v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  void *v62;
  file_logger *v63;
  file_logger *started;
  _QWORD *v65;
  char *v66;
  _QWORD *v67;
  void **v68;
  uint64_t v69;
  _QWORD *v70;
  void *v71;
  char *v72;
  char *v73;
  void *v74[2];
  unsigned __int8 v75;
  std::__shared_weak_count *v76;
  void *__p;
  _QWORD *v78;
  __int128 v79;
  unint64_t *v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v7 = a1[1];
  v6 = a1[2];
  v72 = 0;
  v73 = 0;
  v71 = 0;
  v8 = v6 - v7;
  if (v8)
  {
    v9 = 0x8E38E38E38E38E39 * (v8 >> 3);
    if (v9 >> 59)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = 0xC71C71C71C71C720 * (v8 >> 3);
    v71 = operator new(v10);
    v73 = (char *)v71 + 32 * v9;
    bzero(v71, 32 * v9);
    v11 = 0;
    v72 = (char *)v71 + v10;
    do
    {
      v12 = v7 + 72 * v11;
      if (*(_BYTE *)(v12 + 32))
      {
        v13 = v7 + 72 * v11;
        v15 = *(unsigned __int8 *)(v13 + 33);
        v14 = (_BYTE *)(v13 + 33);
        if (!v15)
        {
          v16 = *(_QWORD *)(v12 + 24);
          if (!v16)
            goto LABEL_95;
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v74, v16, a2);
          nitro::nitro_variable::operator=(v7 + 72 * v11 + 40, (__int128 *)v74);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v74);
        }
        *v14 = 1;
        v17 = v7 + 72 * v11;
        v19 = *(_QWORD *)(v17 + 40);
        v18 = v17 + 40;
        *(_QWORD *)&v79 = v19;
        v20 = *(_QWORD *)(v18 + 8);
        *((_QWORD *)&v79 + 1) = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v80 = 0;
        v81 = 0;
        if ((__int128 *)v18 != &v79)
        {
          v23 = v7 + 72 * v11;
          v24 = *(unint64_t **)(v23 + 56);
          v80 = v24;
          v25 = *(unsigned __int8 *)(v23 + 64);
          v81 = v25;
          if ((v25 - 2) < 4 || v25 == 9)
          {
            do
              v27 = __ldaxr(v24);
            while (__stlxr(v27 + 1, v24));
          }
        }
      }
      else
      {
        v28 = *(_QWORD *)(v12 + 24);
        if (!v28)
LABEL_95:
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v28 + 48))(&v79, v28, a2);
      }
      nitro::nitro_variable::operator=((uint64_t)v71 + 32 * v11, &v79);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v79);
      ++v11;
      v7 = a1[1];
    }
    while (v11 < 0x8E38E38E38E38E39 * ((a1[2] - v7) >> 3));
  }
  v29 = *(uint64_t ***)(a2 + 8);
  v30 = v29[10];
  if (v30)
  {
    v31 = a1[4];
    v32 = v29[10];
    do
    {
      v33 = v32[4];
      if (v31 >= v33)
      {
        if (v33 >= v31)
        {
          while (1)
          {
            while (1)
            {
              v34 = (uint64_t **)v30;
              v35 = v30[4];
              if (v31 < v35)
                break;
              if (v35 >= v31)
              {
                v59 = (uint64_t)v34[8];
                if (!v59)
                  goto LABEL_75;
                goto LABEL_67;
              }
              v30 = v34[1];
              if (!v30)
              {
                v36 = v34 + 1;
                goto LABEL_64;
              }
            }
            v30 = *v34;
            if (!*v34)
            {
              v36 = v34;
LABEL_64:
              v56 = (uint64_t *)operator new(0x48uLL);
              v56[4] = v31;
              v56[8] = 0;
              *v56 = 0;
              v56[1] = 0;
              v56[2] = (uint64_t)v34;
              *v36 = v56;
              v57 = (uint64_t *)*v29[9];
              v58 = v56;
              if (v57)
              {
                v29[9] = v57;
                v58 = *v36;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v29[10], v58);
              v29[11] = (uint64_t *)((char *)v29[11] + 1);
              v59 = v56[8];
              if (!v59)
LABEL_75:
                std::__throw_bad_function_call[abi:ne180100]();
LABEL_67:
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v59 + 48))(v59, &v71);
              goto LABEL_68;
            }
          }
        }
        ++v32;
      }
      v32 = (uint64_t *)*v32;
    }
    while (v32);
  }
  v37 = v29[1];
  if (!v37)
  {
LABEL_76:
    if (*((int *)global_logger() + 169) <= 6)
    {
      v63 = (file_logger *)global_logger();
      started = file_logger::start_stream(v63, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 273, 1);
      v65 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v65 && *((_BYTE *)v65 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65 + 2, (uint64_t)"function ", 9);
      nitro::get_symbol_from_id((nitro *)a1[4], (uint64_t)v74);
      v66 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
      if (v66 && v66[280])
      {
        v67 = v66 + 16;
        if ((v75 & 0x80u) == 0)
          v68 = v74;
        else
          v68 = (void **)v74[0];
        if ((v75 & 0x80u) == 0)
          v69 = v75;
        else
          v69 = (uint64_t)v74[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
      }
      v70 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v70 && *((_BYTE *)v70 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70 + 2, (uint64_t)" not found", 10);
      if ((char)v75 < 0)
        operator delete(v74[0]);
    }
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  }
  v38 = a1[4];
  v39 = v29[1];
  while (1)
  {
    v40 = v39[4];
    if (v38 >= v40)
      break;
LABEL_35:
    v39 = (uint64_t *)*v39;
    if (!v39)
      goto LABEL_76;
  }
  if (v40 < v38)
  {
    ++v39;
    goto LABEL_35;
  }
  do
  {
    while (1)
    {
      v41 = (uint64_t **)v37;
      v42 = v37[4];
      if (v38 < v42)
        break;
      if (v42 >= v38)
      {
        v44 = (char *)v41;
        goto LABEL_49;
      }
      v37 = v41[1];
      if (!v37)
      {
        v43 = v41 + 1;
        goto LABEL_45;
      }
    }
    v37 = *v41;
  }
  while (*v41);
  v43 = v41;
LABEL_45:
  v44 = (char *)operator new(0x70uLL);
  *((_QWORD *)v44 + 4) = v38;
  *((_QWORD *)v44 + 13) = 0;
  *(_OWORD *)(v44 + 40) = 0u;
  *(_OWORD *)(v44 + 56) = 0u;
  *(_OWORD *)(v44 + 72) = 0u;
  *(_OWORD *)(v44 + 88) = 0u;
  *((_DWORD *)v44 + 26) = 1065353216;
  *(_QWORD *)v44 = 0;
  *((_QWORD *)v44 + 1) = 0;
  *((_QWORD *)v44 + 2) = v41;
  *v43 = (uint64_t *)v44;
  v45 = (uint64_t *)**v29;
  v46 = (uint64_t *)v44;
  if (v45)
  {
    *v29 = v45;
    v46 = *v43;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v29[1], v46);
  v29[2] = (uint64_t *)((char *)v29[2] + 1);
LABEL_49:
  nitro::nitro_function::nitro_function((nitro::nitro_function *)v74, (const nitro::nitro_function *)(v44 + 40));
  nitro::nitro_function::run((__int128 *)v74, (uint64_t *)&v71, *(unint64_t **)(a2 + 8), a3);
  v47 = v78;
  if (v78)
  {
    do
    {
      v48 = (_QWORD *)*v47;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v47 + 3));
      operator delete(v47);
      v47 = v48;
    }
    while (v48);
  }
  v49 = __p;
  __p = 0;
  if (v49)
    operator delete(v49);
  v50 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)v74[1];
  if (v74[1])
  {
    v54 = (unint64_t *)((char *)v74[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
LABEL_68:
  v60 = (char *)v71;
  if (v71)
  {
    v61 = v72;
    v62 = v71;
    if (v72 != v71)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v61 - 32));
      while (v61 != v60);
      v62 = v71;
    }
    v72 = v60;
    operator delete(v62);
  }
}

void sub_191247E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char *v26;
  char *v27;

  if (a18 < 0)
    operator delete(__p);
  if (!a10)
    _Unwind_Resume(exception_object);
  v26 = a11;
  v27 = a10;
  if (a11 != a10)
  {
    do
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v26 - 32));
    while (v26 != a10);
    v27 = a10;
  }
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 274, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 274, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912482D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19124833C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;

  std::vector<nitro::impl::delayed_variable>::vector((_QWORD *)a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 48);
  if (!v4)
    goto LABEL_4;
  if (v4 != a2 + 24)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_4:
    *(_QWORD *)(a1 + 48) = v4;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = a1 + 24;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48));
LABEL_6:
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 80) = 0;
  v8 = (unint64_t **)(a1 + 80);
  *(_BYTE *)(a1 + 88) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 88);
    *(_BYTE *)(a1 + 88) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

void sub_19124844C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1((uint64_t)v1, *v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  void *v7;
  nitro::nitro_variable *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;

  *a1 = &off_1E2DAFA88;
  v2 = a1 + 4;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 9));
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (char *)a1[1];
  if (!v5)
    return a1;
  v6 = (char *)a1[2];
  v7 = (void *)a1[1];
  if (v6 == v5)
    goto LABEL_16;
  v8 = (nitro::nitro_variable *)(v6 - 32);
  do
  {
    v11 = (char *)v8 - 40;
    nitro::nitro_variable::~nitro_variable(v8);
    v9 = (_QWORD *)*((_QWORD *)v8 - 2);
    if ((_QWORD *)((char *)v8 - 40) == v9)
    {
      v9 = (_QWORD *)((char *)v8 - 40);
      v10 = 4;
LABEL_10:
      (*(void (**)(void))(*v9 + 8 * v10))();
      goto LABEL_11;
    }
    if (v9)
    {
      v10 = 5;
      goto LABEL_10;
    }
LABEL_11:
    v8 = (nitro::nitro_variable *)((char *)v8 - 72);
  }
  while (v11 != v5);
  v7 = (void *)a1[1];
LABEL_16:
  a1[2] = v5;
  operator delete(v7);
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  void *v7;
  nitro::nitro_variable *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;

  *a1 = &off_1E2DAFA88;
  v2 = a1 + 4;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 9));
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      v5 = (char *)a1[1];
      if (!v5)
        goto LABEL_17;
      v6 = (char *)a1[2];
      v7 = (void *)a1[1];
      if (v6 == v5)
        goto LABEL_16;
      v8 = (nitro::nitro_variable *)(v6 - 32);
      while (1)
      {
        v11 = (char *)v8 - 40;
        nitro::nitro_variable::~nitro_variable(v8);
        v9 = (_QWORD *)*((_QWORD *)v8 - 2);
        if ((_QWORD *)((char *)v8 - 40) == v9)
        {
          v9 = (_QWORD *)((char *)v8 - 40);
          v10 = 4;
        }
        else
        {
          if (!v9)
            goto LABEL_11;
          v10 = 5;
        }
        (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
        v8 = (nitro::nitro_variable *)((char *)v8 - 72);
        if (v11 == v5)
        {
          v7 = (void *)a1[1];
LABEL_16:
          a1[2] = v5;
          operator delete(v7);
LABEL_17:
          JUMPOUT(0x19401CD90);
        }
      }
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x70uLL);
  *v2 = &off_1E2DAFA88;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191248670(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAFA88;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  void *v7;
  nitro::nitro_variable *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;

  v2 = a1 + 4;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 9));
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (char *)a1[1];
  if (!v5)
    return;
  v6 = (char *)a1[2];
  v7 = (void *)a1[1];
  if (v6 == v5)
    goto LABEL_17;
  v8 = (nitro::nitro_variable *)(v6 - 32);
  do
  {
    v11 = (char *)v8 - 40;
    nitro::nitro_variable::~nitro_variable(v8);
    v9 = (_QWORD *)*((_QWORD *)v8 - 2);
    if ((_QWORD *)((char *)v8 - 40) == v9)
    {
      v9 = (_QWORD *)((char *)v8 - 40);
      v10 = 4;
LABEL_10:
      (*(void (**)(void))(*v9 + 8 * v10))();
      goto LABEL_11;
    }
    if (v9)
    {
      v10 = 5;
      goto LABEL_10;
    }
LABEL_11:
    v8 = (nitro::nitro_variable *)((char *)v8 - 72);
  }
  while (v11 != v5);
  v7 = (void *)a1[1];
LABEL_17:
  a1[2] = v5;
  operator delete(v7);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  void *v7;
  nitro::nitro_variable *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;

  v2 = a1 + 4;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 9));
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = (char *)a1[1];
  if (!v5)
    goto LABEL_17;
  v6 = (char *)a1[2];
  v7 = (void *)a1[1];
  if (v6 == v5)
    goto LABEL_16;
  v8 = (nitro::nitro_variable *)(v6 - 32);
  do
  {
    v11 = (char *)v8 - 40;
    nitro::nitro_variable::~nitro_variable(v8);
    v9 = (_QWORD *)*((_QWORD *)v8 - 2);
    if ((_QWORD *)((char *)v8 - 40) == v9)
    {
      v9 = (_QWORD *)((char *)v8 - 40);
      v10 = 4;
LABEL_10:
      (*(void (**)(void))(*v9 + 8 * v10))();
      goto LABEL_11;
    }
    if (v9)
    {
      v10 = 5;
      goto LABEL_10;
    }
LABEL_11:
    v8 = (nitro::nitro_variable *)((char *)v8 - 72);
  }
  while (v11 != v5);
  v7 = (void *)a1[1];
LABEL_16:
  a1[2] = v5;
  operator delete(v7);
LABEL_17:
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  nitro::nitro_instance *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  int v34;
  unint64_t v36;
  uint64_t v37;
  nitro::nitro_instance *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _BOOL4 has_member_function;
  _BOOL4 v43;
  unint64_t *v44;
  unint64_t v45;
  nitro::nitro_instance *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t **v70;
  unint64_t v71;
  uint64_t **v72;
  unint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t **v79;
  unint64_t v80;
  uint64_t **v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  void *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  char *v94;
  char *v95;
  void *v96;
  file_logger *v97;
  file_logger *started;
  _QWORD *v99;
  _BYTE *v100;
  _QWORD *v101;
  void *v102;
  char *v103;
  char *v104;
  __int128 v105;
  std::__shared_weak_count *v106;
  void *__p;
  _QWORD *v108;
  __int128 v109;
  unint64_t *v110;
  char v111;
  nitro::nitro_instance *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unsigned __int8 v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_BYTE *)(a1 + 65))
    {
LABEL_5:
      v7 = *(nitro::nitro_instance **)(a1 + 72);
      *(_BYTE *)(a1 + 65) = 1;
      v8 = *(std::__shared_weak_count **)(a1 + 80);
      v112 = v7;
      v113 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      v114 = 0;
      v115 = 0;
      if ((nitro::nitro_instance **)(a1 + 72) != &v112)
      {
        v11 = *(unint64_t **)(a1 + 88);
        v114 = v11;
        v115 = *(_BYTE *)(a1 + 96);
        if (v115 - 2 < 4 || v115 == 9)
        {
          do
            v13 = __ldaxr(v11);
          while (__stlxr(v13 + 1, v11));
        }
      }
      goto LABEL_18;
    }
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(&v105, v6, a2);
      nitro::nitro_variable::operator=(a1 + 72, &v105);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v105);
      goto LABEL_5;
    }
LABEL_141:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  v14 = *(_QWORD *)(a1 + 56);
  if (!v14)
    goto LABEL_141;
  (*(void (**)(nitro::nitro_instance **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(&v112, v14, a2);
LABEL_18:
  v16 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v103 = 0;
  v104 = 0;
  v102 = 0;
  v17 = v15 - v16;
  if (v17)
  {
    v18 = 0x8E38E38E38E38E39 * (v17 >> 3);
    if (v18 >> 59)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = 0xC71C71C71C71C720 * (v17 >> 3);
    v102 = operator new(v19);
    v104 = (char *)v102 + 32 * v18;
    bzero(v102, 32 * v18);
    v20 = 0;
    v103 = (char *)v102 + v19;
    do
    {
      v21 = v16 + 72 * v20;
      if (*(_BYTE *)(v21 + 32))
      {
        v22 = v16 + 72 * v20;
        v24 = *(unsigned __int8 *)(v22 + 33);
        v23 = (_BYTE *)(v22 + 33);
        if (!v24)
        {
          v25 = *(_QWORD *)(v21 + 24);
          if (!v25)
            goto LABEL_139;
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v25 + 48))(&v105, v25, a2);
          nitro::nitro_variable::operator=(v16 + 72 * v20 + 40, &v105);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v105);
        }
        *v23 = 1;
        v26 = v16 + 72 * v20;
        v28 = *(_QWORD *)(v26 + 40);
        v27 = v26 + 40;
        *(_QWORD *)&v109 = v28;
        v29 = *(_QWORD *)(v27 + 8);
        *((_QWORD *)&v109 + 1) = v29;
        if (v29)
        {
          v30 = (unint64_t *)(v29 + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v110 = 0;
        v111 = 0;
        if ((__int128 *)v27 != &v109)
        {
          v32 = v16 + 72 * v20;
          v33 = *(unint64_t **)(v32 + 56);
          v110 = v33;
          v34 = *(unsigned __int8 *)(v32 + 64);
          v111 = v34;
          if ((v34 - 2) < 4 || v34 == 9)
          {
            do
              v36 = __ldaxr(v33);
            while (__stlxr(v36 + 1, v33));
          }
        }
      }
      else
      {
        v37 = *(_QWORD *)(v21 + 24);
        if (!v37)
LABEL_139:
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v37 + 48))(&v109, v37, a2);
      }
      nitro::nitro_variable::operator=((uint64_t)v102 + 32 * v20, &v109);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v109);
      ++v20;
      v16 = *(_QWORD *)(a1 + 8);
    }
    while (v20 < 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 16) - v16) >> 3));
  }
  v38 = v112;
  if (v112)
  {
    v39 = v113;
    if (v113)
    {
      v40 = (unint64_t *)&v113->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    has_member_function = nitro::nitro_instance::has_member_function(v38, *(_QWORD *)(a1 + 104));
    v43 = has_member_function;
    if (!v39)
      goto LABEL_47;
    v44 = (unint64_t *)&v39->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      if (v43)
      {
LABEL_48:
        v46 = v112;
        if (!v112)
          nitro::nitro_variable::instance(void)const::{lambda(void)#1}::operator()();
        v47 = v113;
        if (v113)
        {
          v48 = (unint64_t *)&v113->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        nitro::nitro_instance::get_member_function(v46, *(_QWORD *)(a1 + 104), (nitro::nitro_function *)&v105);
        if (v47)
        {
          v50 = (unint64_t *)&v47->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        nitro::nitro_function::run(&v105, (uint64_t *)&v102, *(unint64_t **)(a2 + 8), a3);
        v52 = v108;
        if (v108)
        {
          do
          {
            v53 = (_QWORD *)*v52;
            nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v52 + 3));
            operator delete(v52);
            v52 = v53;
          }
          while (v53);
        }
        v54 = __p;
        __p = 0;
        if (v54)
          operator delete(v54);
        v55 = v106;
        if (v106)
        {
          v56 = (unint64_t *)&v106->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
        if (*((_QWORD *)&v105 + 1))
        {
          v59 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
LABEL_117:
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        goto LABEL_119;
      }
    }
    else
    {
LABEL_47:
      if (has_member_function)
        goto LABEL_48;
    }
  }
  v61 = *(_QWORD *)(a2 + 8);
  v62 = *(_QWORD **)(v61 + 80);
  if (v62)
  {
    v63 = *(_QWORD *)(a1 + 104);
    do
    {
      v64 = v62[4];
      if (v63 >= v64)
      {
        if (v64 >= v63)
        {
          std::vector<nitro::nitro_variable>::insert((char **)&v102, (uint64_t)v102, (uint64_t)&v112);
          v77 = *(_QWORD *)(a2 + 8);
          v79 = (uint64_t **)(v77 + 80);
          v78 = *(uint64_t **)(v77 + 80);
          v80 = *(_QWORD *)(a1 + 104);
          if (!v78)
          {
            v81 = (uint64_t **)(v77 + 80);
            goto LABEL_100;
          }
          while (1)
          {
            while (1)
            {
              v81 = (uint64_t **)v78;
              v82 = v78[4];
              if (v80 >= v82)
                break;
              v78 = *v81;
              v79 = v81;
              if (!*v81)
                goto LABEL_100;
            }
            if (v82 >= v80)
              break;
            v78 = v81[1];
            if (!v78)
            {
              v79 = v81 + 1;
LABEL_100:
              v83 = (uint64_t *)operator new(0x48uLL);
              v83[4] = v80;
              v83[8] = 0;
              *v83 = 0;
              v83[1] = 0;
              v83[2] = (uint64_t)v81;
              *v79 = v83;
              v84 = **(_QWORD **)(v77 + 72);
              v85 = v83;
              if (v84)
              {
                *(_QWORD *)(v77 + 72) = v84;
                v85 = *v79;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v77 + 80), v85);
              ++*(_QWORD *)(v77 + 88);
              v86 = v83[8];
              if (v86)
              {
LABEL_103:
                (*(void (**)(uint64_t, void **))(*(_QWORD *)v86 + 48))(v86, &v102);
                goto LABEL_119;
              }
LABEL_126:
              std::__throw_bad_function_call[abi:ne180100]();
            }
          }
          v86 = (uint64_t)v81[8];
          if (v86)
            goto LABEL_103;
          goto LABEL_126;
        }
        ++v62;
      }
      v62 = (_QWORD *)*v62;
    }
    while (v62);
  }
  v65 = *(_QWORD **)(v61 + 8);
  if (!v65)
  {
LABEL_128:
    if (*((int *)global_logger() + 169) <= 6)
    {
      v97 = (file_logger *)global_logger();
      started = file_logger::start_stream(v97, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 311, 1);
      v99 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v99 && *((_BYTE *)v99 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99 + 2, (uint64_t)"function ", 9);
      v100 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v100 && v100[280])
        std::ostream::operator<<();
      v101 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v101 && *((_BYTE *)v101 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101 + 2, (uint64_t)" not found", 10);
    }
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  }
  v66 = *(_QWORD *)(a1 + 104);
  while (1)
  {
    v67 = v65[4];
    if (v66 >= v67)
      break;
LABEL_79:
    v65 = (_QWORD *)*v65;
    if (!v65)
      goto LABEL_128;
  }
  if (v67 < v66)
  {
    ++v65;
    goto LABEL_79;
  }
  std::vector<nitro::nitro_variable>::insert((char **)&v102, (uint64_t)v102, (uint64_t)&v112);
  v68 = *(uint64_t ***)(a2 + 8);
  v70 = v68 + 1;
  v69 = v68[1];
  v71 = *(_QWORD *)(a1 + 104);
  if (v69)
  {
    while (1)
    {
      while (1)
      {
        v72 = (uint64_t **)v69;
        v73 = v69[4];
        if (v71 >= v73)
          break;
        v69 = *v72;
        v70 = v72;
        if (!*v72)
          goto LABEL_90;
      }
      if (v73 >= v71)
        break;
      v69 = v72[1];
      if (!v69)
      {
        v70 = v72 + 1;
        goto LABEL_90;
      }
    }
    v74 = (char *)v72;
  }
  else
  {
    v72 = v68 + 1;
LABEL_90:
    v74 = (char *)operator new(0x70uLL);
    *((_QWORD *)v74 + 4) = v71;
    *((_QWORD *)v74 + 13) = 0;
    *(_OWORD *)(v74 + 40) = 0u;
    *(_OWORD *)(v74 + 56) = 0u;
    *(_OWORD *)(v74 + 72) = 0u;
    *(_OWORD *)(v74 + 88) = 0u;
    *((_DWORD *)v74 + 26) = 1065353216;
    *(_QWORD *)v74 = 0;
    *((_QWORD *)v74 + 1) = 0;
    *((_QWORD *)v74 + 2) = v72;
    *v70 = (uint64_t *)v74;
    v75 = (uint64_t *)**v68;
    v76 = (uint64_t *)v74;
    if (v75)
    {
      *v68 = v75;
      v76 = *v70;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v68[1], v76);
    v68[2] = (uint64_t *)((char *)v68[2] + 1);
  }
  nitro::nitro_function::nitro_function((nitro::nitro_function *)&v105, (const nitro::nitro_function *)(v74 + 40));
  nitro::nitro_function::run(&v105, (uint64_t *)&v102, *(unint64_t **)(a2 + 8), a3);
  v87 = v108;
  if (v108)
  {
    do
    {
      v88 = (_QWORD *)*v87;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v87 + 3));
      operator delete(v87);
      v87 = v88;
    }
    while (v88);
  }
  v89 = __p;
  __p = 0;
  if (v89)
    operator delete(v89);
  v90 = v106;
  if (v106)
  {
    v91 = (unint64_t *)&v106->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
  if (*((_QWORD *)&v105 + 1))
  {
    v93 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
    do
      v60 = __ldaxr(v93);
    while (__stlxr(v60 - 1, v93));
    goto LABEL_117;
  }
LABEL_119:
  v94 = (char *)v102;
  if (v102)
  {
    v95 = v103;
    v96 = v102;
    if (v103 != v102)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v95 - 32));
      while (v95 != v94);
      v96 = v102;
    }
    v103 = v94;
    operator delete(v96);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v112);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_1"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4CALLEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t *std::vector<nitro::nitro_variable>::insert(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  _QWORD *v49;

  v3 = (uint64_t *)a3;
  v5 = (uint64_t *)*a1;
  v6 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 5;
  v9 = (uint64_t *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    v16 = ((uint64_t)(v6 - (_QWORD)v5) >> 5) + 1;
    if (v16 >> 59)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v17 = v10 - (_QWORD)v5;
    if (v17 >> 4 > v16)
      v16 = v17 >> 4;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v18 = 0x7FFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v49 = a1 + 2;
    if (v18)
    {
      if (v18 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = (char *)operator new(32 * v18);
    }
    else
    {
      v19 = 0;
    }
    v45 = (uint64_t *)v19;
    v46 = &v19[32 * v8];
    v47 = (uint64_t *)v46;
    v48 = &v19[32 * v18];
    std::__split_buffer<nitro::nitro_variable>::push_back[abi:ne180100]((uint64_t)&v45, (uint64_t)v3);
    v30 = v46;
    v31 = (uint64_t *)*a1;
    v32 = v46;
    if (*a1 != (char *)v9)
    {
      v33 = 0;
      do
      {
        v34 = &v30[v33 * 8];
        v35 = &v9[v33];
        *((_OWORD *)v34 - 2) = *(_OWORD *)&v9[v33 - 4];
        *(v35 - 4) = 0;
        *(v35 - 3) = 0;
        *((_QWORD *)v34 - 2) = 0;
        *(v34 - 8) = 0;
        v36 = v9[v33 - 2];
        *(v34 - 8) = v9[v33 - 1];
        *((_QWORD *)v34 - 2) = v36;
        *(v34 - 8) = v9[v33 - 1];
        *((_BYTE *)v35 - 8) = 0;
        v33 -= 4;
      }
      while (&v9[v33] != v31);
      v32 = &v30[v33 * 8];
    }
    v46 = v32;
    v37 = (uint64_t *)a1[1];
    v38 = v47;
    if (v37 != v9)
    {
      do
      {
        *(_OWORD *)v38 = *(_OWORD *)v9;
        *v9 = 0;
        v9[1] = 0;
        v38[2] = 0;
        *((_BYTE *)v38 + 24) = 0;
        v39 = v9[2];
        *((_BYTE *)v38 + 24) = *((_BYTE *)v9 + 24);
        v38[2] = v39;
        *((_BYTE *)v38 + 24) = *((_BYTE *)v9 + 24);
        *((_BYTE *)v9 + 24) = 0;
        v38 += 4;
        v9 += 4;
      }
      while (v9 != v37);
      v32 = v46;
      v9 = (uint64_t *)a1[1];
    }
    v40 = (uint64_t *)*a1;
    *a1 = v32;
    a1[1] = (char *)v38;
    v41 = a1[2];
    a1[2] = v48;
    v47 = v9;
    v48 = v41;
    v45 = v40;
    v46 = (char *)v40;
    if (v9 != v40)
    {
      do
      {
        v47 = v9 - 4;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v9 - 4));
        v9 = v47;
      }
      while (v47 != v40);
      v9 = v45;
    }
    if (v9)
      operator delete(v9);
    return (uint64_t *)v30;
  }
  else if (v9 == (uint64_t *)v6)
  {
    *v9 = *(_QWORD *)a3;
    v20 = *(_QWORD *)(a3 + 8);
    v9[1] = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = &v5[4 * v8];
    v23[2] = 0;
    v24 = v23 + 2;
    *((_BYTE *)v24 + 8) = 0;
    if (v9 != (uint64_t *)a3)
    {
      v25 = *(_QWORD *)(a3 + 16);
      *((_BYTE *)v24 + 8) = *(_BYTE *)(a3 + 24);
      *v24 = v25;
      v26 = *(unsigned __int8 *)(a3 + 24);
      *((_BYTE *)v24 + 8) = v26;
      if ((v26 - 2) < 4 || v26 == 9)
      {
        v28 = (unint64_t *)*v24;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 + 1, v28));
      }
    }
    a1[1] = (char *)(v9 + 4);
  }
  else
  {
    v11 = v9 + 4;
    v12 = v6 - 32;
    if (v6 < 0x20)
    {
      v14 = a1[1];
    }
    else
    {
      v13 = v6 - 32;
      v14 = a1[1];
      do
      {
        *(_OWORD *)v14 = *(_OWORD *)v13;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 8) = 0;
        *((_QWORD *)v14 + 2) = 0;
        v14[24] = 0;
        v15 = *(_QWORD *)(v13 + 16);
        v14[24] = *(_BYTE *)(v13 + 24);
        *((_QWORD *)v14 + 2) = v15;
        v14[24] = *(_BYTE *)(v13 + 24);
        *(_BYTE *)(v13 + 24) = 0;
        v14 += 32;
        v13 += 32;
      }
      while (v13 < v6);
    }
    a1[1] = v14;
    if ((_QWORD *)v6 != v11)
    {
      v42 = 32 * ((uint64_t)(v6 - (_QWORD)v11) >> 5);
      v43 = (uint64_t)&v5[4 * v8 - 4];
      do
      {
        nitro::nitro_variable::operator=(v12, (__int128 *)(v43 + v42));
        v12 -= 32;
        v42 -= 32;
      }
      while (v42);
    }
    if (v9 <= v3)
      v3 += 4 * (a1[1] > (char *)v3);
    nitro::nitro_variable::operator=((uint64_t)v9, v3);
  }
  return v9;
}

void sub_191249598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nitro::nitro_variable>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 312, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 312, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912498C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191249928(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void std::__split_buffer<nitro::nitro_variable>::push_back[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  nitro::nitro_variable *v21;
  nitro::nitro_variable *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t **v26;
  unint64_t *v27;
  int v28;
  unint64_t *v30;
  unint64_t v31;

  v4 = *(_QWORD **)(a1 + 16);
  if (v4 != *(_QWORD **)(a1 + 24))
    goto LABEL_22;
  v6 = *(_BYTE **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 <= *(_QWORD *)a1)
  {
    v12 = ((char *)v4 - v6) >> 4;
    if (v4 == (_QWORD *)v6)
      v12 = 1;
    if (v12 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = v12 >> 2;
    v14 = 32 * v12;
    v15 = (char *)operator new(32 * v12);
    v16 = &v15[32 * v13];
    v17 = &v15[v14];
    if (v4 == (_QWORD *)v5)
    {
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = v17;
      if (!v6)
        goto LABEL_19;
    }
    else
    {
      v18 = (char *)v4 + (_QWORD)v16 - v5;
      v19 = 32 * v13;
      do
      {
        v20 = &v15[v19];
        *(_OWORD *)v20 = *(_OWORD *)v5;
        *(_QWORD *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        *((_QWORD *)v20 + 2) = *(_QWORD *)(v5 + 16);
        v20[24] = *(_BYTE *)(v5 + 24);
        *(_BYTE *)(v5 + 24) = 0;
        v19 += 32;
        v5 += 32;
      }
      while (v20 + 32 != v18);
      v6 = *(_BYTE **)a1;
      v21 = *(nitro::nitro_variable **)(a1 + 8);
      v22 = *(nitro::nitro_variable **)(a1 + 16);
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v18;
      *(_QWORD *)(a1 + 24) = v17;
      while (v22 != v21)
      {
        v22 = (nitro::nitro_variable *)((char *)v22 - 32);
        nitro::nitro_variable::~nitro_variable(v22);
      }
      if (!v6)
        goto LABEL_19;
    }
    operator delete(v6);
LABEL_19:
    v4 = *(_QWORD **)(a1 + 16);
    goto LABEL_22;
  }
  v7 = (uint64_t)(v5 - *(_QWORD *)a1) >> 5;
  if (v7 >= -1)
    v8 = v7 + 1;
  else
    v8 = v7 + 2;
  v9 = v8 >> 1;
  v10 = -v9;
  if ((_QWORD *)v5 == v4)
  {
    v11 = (_QWORD *)(v5 - 32 * v9);
  }
  else
  {
    do
    {
      nitro::nitro_variable::operator=(v5 + 32 * v10, (__int128 *)v5);
      v5 += 32;
    }
    while ((_QWORD *)v5 != v4);
    v4 = *(_QWORD **)(a1 + 8);
    v11 = (_QWORD *)(v5 + 32 * v10);
  }
  *(_QWORD *)(a1 + 8) = &v4[4 * v10];
  *(_QWORD *)(a1 + 16) = v11;
  v4 = v11;
LABEL_22:
  v23 = *(_QWORD *)(a2 + 8);
  *v4 = *(_QWORD *)a2;
  v4[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v4[2] = 0;
  v26 = (unint64_t **)(v4 + 2);
  *((_BYTE *)v4 + 24) = 0;
  if (v4 != (_QWORD *)a2)
  {
    v27 = *(unint64_t **)(a2 + 16);
    *((_BYTE *)v4 + 24) = *(_BYTE *)(a2 + 24);
    *v26 = v27;
    v28 = *(unsigned __int8 *)(a2 + 24);
    *((_BYTE *)v4 + 24) = v28;
    if ((v28 - 2) < 4 || v28 == 9)
    {
      v30 = *v26;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 + 1, v30));
    }
  }
  *(_QWORD *)(a1 + 16) += 32;
}

uint64_t std::__split_buffer<nitro::nitro_variable>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)a1 = off_1E2DAF3A8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(char **)(a1 + 8);
    if (!v2)
      return a1;
  }
  else
  {
    v2 = *(char **)(a1 + 8);
    if (!v2)
      return a1;
  }
  v3 = *(char **)(a1 + 16);
  v4 = v2;
  if (v3 == v2)
    goto LABEL_14;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_8:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_9;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_8;
    }
LABEL_9:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = *(char **)(a1 + 8);
LABEL_14:
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)a1 = off_1E2DAF3A8;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(char **)(a1 + 8);
    if (!v2)
      goto LABEL_15;
  }
  else
  {
    v2 = *(char **)(a1 + 8);
    if (!v2)
      goto LABEL_15;
  }
  v3 = *(char **)(a1 + 16);
  v4 = v2;
  if (v3 == v2)
    goto LABEL_14;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  while (1)
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_9;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_9:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
    if (v8 == v2)
    {
      v4 = *(char **)(a1 + 8);
LABEL_14:
      *(_QWORD *)(a1 + 16) = v2;
      operator delete(v4);
LABEL_15:
      JUMPOUT(0x19401CD90);
    }
  }
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_1E2DAF3A8;
  std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_191249D5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E2DAF3A8;
  return std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(char **)(a1 + 8);
    if (!v2)
      return;
  }
  else
  {
    v2 = *(char **)(a1 + 8);
    if (!v2)
      return;
  }
  v3 = *(char **)(a1 + 16);
  v4 = v2;
  if (v3 == v2)
    goto LABEL_14;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_6:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_7;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_6;
    }
LABEL_7:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = *(char **)(a1 + 8);
LABEL_14:
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v4);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void **__p)
{
  char *v2;
  char *v3;
  char *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  if (*((char *)__p + 55) < 0)
  {
    operator delete(__p[4]);
    v2 = (char *)__p[1];
    if (!v2)
      goto LABEL_15;
  }
  else
  {
    v2 = (char *)__p[1];
    if (!v2)
      goto LABEL_15;
  }
  v3 = (char *)__p[2];
  v4 = v2;
  if (v3 == v2)
    goto LABEL_14;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_8:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_9;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_8;
    }
LABEL_9:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = (char *)__p[1];
LABEL_14:
  __p[2] = v2;
  operator delete(v4);
LABEL_15:
  operator delete(__p);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  int v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t **v31;
  int v32;
  size_t v33;
  const void *v34;
  int v35;
  size_t v36;
  uint64_t *v37;
  size_t v38;
  int v39;
  BOOL v40;
  int v41;
  _BOOL4 v42;
  uint64_t **v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  char *v50;
  char *v51;
  void *v52;
  file_logger *v53;
  file_logger *started;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  std::string *v58;
  std::string::size_type size;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::ios_base *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  const std::locale::facet *v71;
  file_logger *v72;
  file_logger *v73;
  char *v74;
  _QWORD *v75;
  void **v76;
  uint64_t v77;
  file_logger *v78;
  file_logger *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  void *v85;
  _QWORD *exception;
  std::string v87;
  void *__p;
  char *v89;
  char *v90;
  void *v91[2];
  unsigned __int8 v92;
  __int128 v93;
  unint64_t *v94;
  char v95;
  _QWORD v96[13];
  int v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v89 = 0;
  v90 = 0;
  __p = 0;
  v8 = v6 - v7;
  if (v8)
  {
    v9 = 0x8E38E38E38E38E39 * (v8 >> 3);
    if (v9 >> 59)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = 0xC71C71C71C71C720 * (v8 >> 3);
    __p = operator new(v10);
    v90 = (char *)__p + 32 * v9;
    bzero(__p, 32 * v9);
    v11 = 0;
    v89 = (char *)__p + v10;
    do
    {
      v12 = v7 + 72 * v11;
      if (*(_BYTE *)(v12 + 32))
      {
        v13 = v7 + 72 * v11;
        v15 = *(unsigned __int8 *)(v13 + 33);
        v14 = (_BYTE *)(v13 + 33);
        if (!v15)
        {
          v16 = *(_QWORD *)(v12 + 24);
          if (!v16)
            goto LABEL_67;
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v96, v16, a2);
          nitro::nitro_variable::operator=(v7 + 72 * v11 + 40, (__int128 *)v96);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v96);
        }
        *v14 = 1;
        v17 = v7 + 72 * v11;
        v19 = *(_QWORD *)(v17 + 40);
        v18 = v17 + 40;
        *(_QWORD *)&v93 = v19;
        v20 = *(_QWORD *)(v18 + 8);
        *((_QWORD *)&v93 + 1) = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v94 = 0;
        v95 = 0;
        if ((__int128 *)v18 != &v93)
        {
          v23 = v7 + 72 * v11;
          v24 = *(unint64_t **)(v23 + 56);
          v94 = v24;
          v25 = *(unsigned __int8 *)(v23 + 64);
          v95 = v25;
          if ((v25 - 2) < 4 || v25 == 9)
          {
            do
              v27 = __ldaxr(v24);
            while (__stlxr(v27 + 1, v24));
          }
        }
      }
      else
      {
        v28 = *(_QWORD *)(v12 + 24);
        if (!v28)
LABEL_67:
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v28 + 48))(&v93, v28, a2);
      }
      nitro::nitro_variable::operator=((uint64_t)__p + 32 * v11, &v93);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v93);
      ++v11;
      v7 = *(_QWORD *)(a1 + 8);
    }
    while (v11 < 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 16) - v7) >> 3));
  }
  v29 = *(_QWORD *)(a2 + 8);
  v30 = *(uint64_t ***)(v29 + 32);
  if (!v30)
  {
LABEL_61:
    if (*((int *)global_logger() + 169) <= 6)
    {
      v53 = (file_logger *)global_logger();
      started = file_logger::start_stream(v53, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 333, 1);
      v55 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v55 && *((_BYTE *)v55 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55 + 2, (uint64_t)"class ", 6);
      if (*(char *)(a1 + 55) < 0)
        std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
      else
        v87 = *(std::string *)(a1 + 32);
      v56 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
      if (v56 && v56[280])
      {
        v57 = v56 + 16;
        if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = &v87;
        else
          v58 = (std::string *)v87.__r_.__value_.__r.__words[0];
        if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
        else
          size = v87.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, size);
      }
      v60 = pthread_getspecific(*((_QWORD *)started + 74));
      if (v60 && *((_BYTE *)v60 + 280))
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60 + 2, (uint64_t)" not found", 10);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
    }
    v61 = MEMORY[0x1E0DE4FE0];
    v62 = MEMORY[0x1E0DE4FE0] + 64;
    v63 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v64 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v98 = MEMORY[0x1E0DE4FE0] + 64;
    v96[0] = v63;
    *(_QWORD *)((char *)v96 + *(_QWORD *)(v63 - 24)) = v64;
    v65 = (std::ios_base *)((char *)v96 + *(_QWORD *)(v96[0] - 24));
    std::ios_base::init(v65, &v96[1]);
    v65[1].__vftable = 0;
    v65[1].__fmtflags_ = -1;
    v96[0] = v61 + 24;
    v98 = v62;
    std::streambuf::basic_streambuf();
    v96[1] = MEMORY[0x1E0DE4FB8] + 16;
    memset(&v96[9], 0, 32);
    v97 = 16;
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"Check failed (", 14);
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)":", 1);
    v68 = (_QWORD *)std::ostream::operator<<();
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"): ", 3);
    v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"false", 5);
    std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(_QWORD *)(*v70 - 24)));
    v71 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
    std::locale::~locale((std::locale *)&v93);
    std::ostream::put();
    std::ostream::flush();
    if (*((int *)global_logger() + 169) <= 6)
    {
      v72 = (file_logger *)global_logger();
      v73 = file_logger::start_stream(v72, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 334, 1);
      std::stringbuf::str();
      v74 = (char *)pthread_getspecific(*((_QWORD *)v73 + 74));
      if (v74 && v74[280])
      {
        v75 = v74 + 16;
        if ((v92 & 0x80u) == 0)
          v76 = v91;
        else
          v76 = (void **)v91[0];
        if ((v92 & 0x80u) == 0)
          v77 = v92;
        else
          v77 = (uint64_t)v91[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
      }
      if ((char)v92 < 0)
        operator delete(v91[0]);
    }
    __print_back_trace();
    if (*((int *)global_logger() + 169) <= 6)
    {
      v78 = (file_logger *)global_logger();
      v79 = file_logger::start_stream(v78, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 334, 1);
      std::stringbuf::str();
      v80 = (char *)pthread_getspecific(*((_QWORD *)v79 + 74));
      if (v80 && v80[280])
      {
        v81 = v80 + 16;
        if (SHIBYTE(v94) >= 0)
          v82 = (uint64_t)&v93;
        else
          v82 = v93;
        if (SHIBYTE(v94) >= 0)
          v83 = HIBYTE(v94);
        else
          v83 = *((_QWORD *)&v93 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, v82, v83);
      }
      v84 = pthread_getspecific(*((_QWORD *)v79 + 74));
      if (v84)
      {
        if (*((_BYTE *)v84 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84 + 2, (uint64_t)"\n", 1);
          file_logger::stream_flush(v79);
          if (*((_DWORD *)v79 + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
          }
        }
      }
      if (SHIBYTE(v94) < 0)
        operator delete((void *)v93);
    }
    v85 = __cxa_allocate_exception(0x18uLL);
    std::stringbuf::str();
  }
  v31 = (uint64_t **)(v29 + 24);
  v32 = *(char *)(a1 + 55);
  if (v32 >= 0)
    v33 = *(unsigned __int8 *)(a1 + 55);
  else
    v33 = *(_QWORD *)(a1 + 40);
  if (v32 >= 0)
    v34 = (const void *)(a1 + 32);
  else
    v34 = *(const void **)(a1 + 32);
  while (1)
  {
    v35 = *((char *)v30 + 55);
    if (v35 >= 0)
      v36 = *((unsigned __int8 *)v30 + 55);
    else
      v36 = (size_t)v30[5];
    if (v35 >= 0)
      v37 = (uint64_t *)(v30 + 4);
    else
      v37 = v30[4];
    if (v36 >= v33)
      v38 = v33;
    else
      v38 = v36;
    v39 = memcmp(v34, v37, v38);
    v40 = v33 < v36;
    if (v39)
      v40 = v39 < 0;
    if (v40)
      goto LABEL_29;
    v41 = memcmp(v37, v34, v38);
    v42 = v36 < v33;
    if (v41)
      v42 = v41 < 0;
    if (!v42)
      break;
    ++v30;
LABEL_29:
    v30 = (uint64_t **)*v30;
    if (!v30)
      goto LABEL_61;
  }
  *(_QWORD *)&v93 = a1 + 32;
  v43 = std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, (const void **)(a1 + 32), (uint64_t)&std::piecewise_construct, (__int128 **)&v93);
  nitro::nitro_class::make_instance(v43[7], (uint64_t *)&__p, (nitro::nitro_instance **)v96);
  v44 = v96[1];
  *(_QWORD *)a3 = v96[0];
  *(_QWORD *)(a3 + 8) = v44;
  if (v44)
  {
    v45 = (unint64_t *)(v44 + 8);
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    v47 = (std::__shared_weak_count *)v96[1];
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 24) = 0;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(p_shared_owners);
      while (__stlxr(v49 - 1, p_shared_owners));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  else
  {
    *(_QWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  v50 = (char *)__p;
  if (__p)
  {
    v51 = v89;
    v52 = __p;
    if (v89 != __p)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v51 - 32));
      while (v51 != v50);
      v52 = __p;
    }
    v89 = v50;
    operator delete(v52);
  }
}

void sub_19124A6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, char *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v50;
  char *v51;

  if (a30 < 0)
    operator delete(__p);
  a32 = *v47;
  *(uint64_t *)((char *)&a32 + *(_QWORD *)(a32 - 24)) = v47[3];
  a33 = v48 + 16;
  if (a46 < 0)
    operator delete(a41);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v46);
  if (!a16)
    _Unwind_Resume(a1);
  v50 = a17;
  v51 = a16;
  if (a17 != a16)
  {
    do
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v50 - 32));
    while (v50 != a16);
    v51 = a16;
  }
  operator delete(v51);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir10MAKEOBJECTEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir10MAKEOBJECTEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir10MAKEOBJECTEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir10MAKEOBJECTEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0 const&,0ul>(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  v4 = (std::string *)(std::vector<nitro::impl::delayed_variable>::vector(a1, (uint64_t *)a2) + 3);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_19124A8B0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1((uint64_t)v1, *v1);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  _QWORD *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = operator new(0x48uLL);
    v24 = (std::string *)(v23 + 4);
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23[6] = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    v23[7] = 0;
    v23[8] = 0;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *v7 = v23;
    v27 = (uint64_t *)**a1;
    v28 = v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19124AA54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_19124AC0C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAFC98;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAFC98;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAFC98;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19124ADE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAFC98;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  unint64_t *v13;
  unsigned __int8 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  ++*(_QWORD *)(a2 + 24);
  v3 = (_QWORD *)(a1 + 48);
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      *(_BYTE *)(a1 + 41) = 1;
      v5 = *(_QWORD *)(a1 + 56);
      v12[0] = *(_QWORD *)(a1 + 48);
      v12[1] = v5;
      if (v5)
      {
        v6 = (unint64_t *)(v5 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v13 = 0;
      v14 = 0;
      if (v3 != v12)
      {
        v8 = *(unint64_t **)(a1 + 64);
        v13 = v8;
        v14 = *(_BYTE *)(a1 + 72);
        if (v14 - 2 < 4 || v14 == 9)
        {
          do
            v10 = __ldaxr(v8);
          while (__stlxr(v10 + 1, v8));
        }
      }
LABEL_18:
      if (!v12[0])
        __asm { BR              X9 }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(&v15, v4, a2);
      nitro::nitro_variable::operator=((uint64_t)v3, &v15);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v15);
      goto LABEL_5;
    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v12, v11, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_19124B524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  void *v38;

  if (v38)
    operator delete(v38);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a37);
  --*(_QWORD *)(v37 + 24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5WHILEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5WHILEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5WHILEEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5WHILEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"cond.is_value()", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 348, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 348, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19124B9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19124BA44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t **v28;
  unint64_t *v29;
  int v30;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t *v41;
  unint64_t v42;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96), a1 + 72);
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  v24 = *(_QWORD *)(a2 + 168);
  if (!v24)
    goto LABEL_36;
  if (v24 != a2 + 144)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
LABEL_36:
    *(_QWORD *)(a1 + 168) = v24;
    goto LABEL_38;
  }
  *(_QWORD *)(a1 + 168) = a1 + 144;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 168) + 24))(*(_QWORD *)(a2 + 168), a1 + 144);
LABEL_38:
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  v25 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  *(_QWORD *)(a1 + 200) = 0;
  v28 = (unint64_t **)(a1 + 200);
  *(_BYTE *)(a1 + 208) = 0;
  if (a2 != a1)
  {
    v29 = *(unint64_t **)(a2 + 200);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *v28 = v29;
    v30 = *(unsigned __int8 *)(a2 + 208);
    *(_BYTE *)(a1 + 208) = v30;
    if ((v30 - 2) < 4 || v30 == 9)
    {
      v32 = *v28;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
  }
  v34 = *(_QWORD *)(a2 + 240);
  if (!v34)
    goto LABEL_52;
  if (v34 != a2 + 216)
  {
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
LABEL_52:
    *(_QWORD *)(a1 + 240) = v34;
    goto LABEL_54;
  }
  *(_QWORD *)(a1 + 240) = a1 + 216;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 240) + 24))(*(_QWORD *)(a2 + 240));
LABEL_54:
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  v35 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  if (a2 != a1)
  {
    v38 = *(_QWORD *)(a2 + 272);
    *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
    *(_QWORD *)(a1 + 272) = v38;
    v39 = *(unsigned __int8 *)(a2 + 280);
    *(_BYTE *)(a1 + 280) = v39;
    if ((v39 - 2) < 4 || v39 == 9)
    {
      v41 = *(unint64_t **)(a1 + 272);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 + 1, v41));
    }
  }
  return a1;
}

void sub_19124BDA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v3;
  nitro::nitro_variable *v4;
  _QWORD *v5;
  nitro::nitro_variable *v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  nitro::nitro_variable::~nitro_variable(v6);
  v8 = (_QWORD *)v1[21];
  if (v8 == v5)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v9 = 5;
    v5 = (_QWORD *)v1[21];
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v9))(v5);
LABEL_6:
  nitro::nitro_variable::~nitro_variable(v4);
  v10 = (_QWORD *)v1[12];
  if (v10 == v3)
  {
    v11 = 4;
  }
  else
  {
    if (!v10)
      goto LABEL_11;
    v11 = 5;
    v3 = (_QWORD *)v1[12];
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v11))(v3);
LABEL_11:
  nitro::nitro_variable::~nitro_variable(v2);
  v12 = (_QWORD *)v1[3];
  if (v12 == v1)
  {
    v13 = 4;
  }
  else
  {
    if (!v12)
      goto LABEL_16;
    v13 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v13))(v1);
LABEL_16:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  *a1 = &off_1E2DAF9D8;
  v2 = a1 + 28;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 33));
  v3 = (_QWORD *)a1[31];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 24));
  v5 = (_QWORD *)a1[22];
  if (v5 == a1 + 19)
  {
    v6 = 4;
    v5 = a1 + 19;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v7 = (_QWORD *)a1[13];
  if (v7 == a1 + 10)
  {
    v8 = 4;
    v7 = a1 + 10;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v9 = (_QWORD *)a1[4];
  if (v9 == a1 + 1)
  {
    v10 = 4;
    v9 = a1 + 1;
    goto LABEL_20;
  }
  if (v9)
  {
    v10 = 5;
LABEL_20:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  *a1 = &off_1E2DAF9D8;
  v2 = a1 + 28;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 33));
  v3 = (_QWORD *)a1[31];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 24));
  v5 = (_QWORD *)a1[22];
  if (v5 == a1 + 19)
  {
    v6 = 4;
    v5 = a1 + 19;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v7 = (_QWORD *)a1[13];
  if (v7 == a1 + 10)
  {
    v8 = 4;
    v7 = a1 + 10;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v9 = (_QWORD *)a1[4];
  if (v9 == a1 + 1)
  {
    v10 = 4;
    v9 = a1 + 1;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x128uLL);
  *v2 = &off_1E2DAF9D8;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19124C0DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF9D8;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((_QWORD *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  unint64_t *v22;
  unsigned __int8 v23;
  _QWORD v24[2];
  unint64_t *v25;
  unsigned __int8 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 41))
    {
LABEL_5:
      v5 = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(a1 + 41) = 1;
      v6 = *(_QWORD *)(a1 + 56);
      v24[0] = v5;
      v24[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v25 = 0;
      v26 = 0;
      if ((_QWORD *)(a1 + 48) != v24)
      {
        v9 = *(unint64_t **)(a1 + 64);
        v25 = v9;
        v26 = *(_BYTE *)(a1 + 72);
        if (v26 - 2 < 4 || v26 == 9)
        {
          do
            v11 = __ldaxr(v9);
          while (__stlxr(v11 + 1, v9));
        }
      }
LABEL_18:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v24);
      ++*(_QWORD *)(a2 + 24);
      if (*(_BYTE *)(a1 + 112))
      {
        if (*(_BYTE *)(a1 + 113))
        {
LABEL_22:
          *(_BYTE *)(a1 + 113) = 1;
          v14 = *(_QWORD *)(a1 + 128);
          v21[0] = *(_QWORD *)(a1 + 120);
          v21[1] = v14;
          if (v14)
          {
            v15 = (unint64_t *)(v14 + 8);
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          v22 = 0;
          v23 = 0;
          if ((_QWORD *)(a1 + 120) != v21)
          {
            v17 = *(unint64_t **)(a1 + 136);
            v22 = v17;
            v23 = *(_BYTE *)(a1 + 144);
            if (v23 - 2 < 4 || v23 == 9)
            {
              do
                v19 = __ldaxr(v17);
              while (__stlxr(v19 + 1, v17));
            }
          }
LABEL_35:
          if (!v21[0])
            __asm { BR              X9 }
          nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
        }
        v13 = *(_QWORD *)(a1 + 104);
        if (v13)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(&v27, v13, a2);
          nitro::nitro_variable::operator=(a1 + 120, &v27);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v27);
          goto LABEL_22;
        }
      }
      else
      {
        v20 = *(_QWORD *)(a1 + 104);
        if (v20)
        {
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v20 + 48))(v21, v20, a2);
          goto LABEL_35;
        }
      }
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(&v27, v4, a2);
      nitro::nitro_variable::operator=(a1 + 48, &v27);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v27);
      goto LABEL_5;
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v24, v12, a2);
      goto LABEL_18;
    }
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_19124C8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;
  void *v44;

  if (v44)
    operator delete(v44);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a43);
  --*(_QWORD *)(v43 + 24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir3FOREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir3FOREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir3FOREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir3FOREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = a1 + 27;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 32));
  v3 = (_QWORD *)a1[30];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 23));
  v5 = (_QWORD *)a1[21];
  if (v5 == a1 + 18)
  {
    v6 = 4;
    v5 = a1 + 18;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 14));
  v7 = (_QWORD *)a1[12];
  if (v7 == a1 + 9)
  {
    v8 = 4;
    v7 = a1 + 9;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 5));
  v9 = (_QWORD *)a1[3];
  if (v9 == a1)
  {
    (*(void (**)(_QWORD *))(*a1 + 32))(a1);
  }
  else if (v9)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)a1[3] + 40))(a1[3]);
  }
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"cond.is_value()", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 372, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 372, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19124CE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19124CEF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

void sub_19124D0CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAFF00;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAFF00;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xA0uLL);
  *v2 = &off_1E2DAFF00;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19124D2A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAFF00;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t *v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t *v36;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v47;
  uint64_t v48;
  file_logger *v49;
  file_logger *started;
  pthread_key_t *v51;
  const char *v52;
  char *v53;
  _QWORD *v54;
  size_t v55;
  size_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::ios_base *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  const std::locale::facet *v67;
  file_logger *v68;
  file_logger *v69;
  char *v70;
  _QWORD *v71;
  void **v72;
  uint64_t v73;
  file_logger *v74;
  file_logger *v75;
  char *v76;
  _QWORD *v77;
  void *locale;
  uint64_t v79;
  _QWORD *v80;
  void *v81;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v84;
  std::locale v85;
  uint64_t v86;
  unint64_t *v87;
  unsigned __int8 v88;
  _QWORD v89[2];
  unint64_t *v90;
  unsigned __int8 v91;
  __int128 v92;
  unint64_t *v93;
  unsigned __int8 v94;
  __int128 v95;
  __int128 v96;
  int v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40))
  {
    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v89, v14, a2);
      goto LABEL_18;
    }
    goto LABEL_91;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(&v92, v6, a2);
      nitro::nitro_variable::operator=(a1 + 48, &v92);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v92);
      goto LABEL_5;
    }
LABEL_91:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_5:
  v7 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 41) = 1;
  v8 = *(_QWORD *)(a1 + 56);
  v89[0] = v7;
  v89[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v90 = 0;
  v91 = 0;
  if ((_QWORD *)(a1 + 48) != v89)
  {
    v11 = *(unint64_t **)(a1 + 64);
    v90 = v11;
    v91 = *(_BYTE *)(a1 + 72);
    if (v91 - 2 < 4 || v91 == 9)
    {
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 + 1, v11));
    }
  }
LABEL_18:
  if (v89[0])
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  ++*(_QWORD *)(a2 + 24);
  if (v91 == 5)
  {
    v32 = v90[1];
    v33 = v90[2];
    if (v32 != v33)
    {
      do
      {
        v92 = 0uLL;
        v94 = 0;
        v93 = 0;
        if (&v93 != (unint64_t **)v32)
        {
          v36 = *(unint64_t **)v32;
          v93 = *(unint64_t **)v32;
          v94 = *(_BYTE *)(v32 + 8);
          if (v94 - 2 < 4 || v94 == 9)
          {
            do
              v38 = __ldaxr(v36);
            while (__stlxr(v38 + 1, v36));
          }
        }
        v39 = *(_QWORD *)a2;
        __p[0] = (void *)(a1 + 152);
        v40 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v39, (unint64_t *)(a1 + 152), (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
        nitro::nitro_variable::operator=((uint64_t)(v40 + 24), &v92);
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v92);
        if (*(_BYTE *)(a1 + 112))
        {
          if (!*(_BYTE *)(a1 + 113))
          {
            v41 = *(_QWORD *)(a1 + 104);
            if (!v41)
              goto LABEL_90;
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v41 + 48))(&v92, v41, a2);
            nitro::nitro_variable::operator=(a1 + 120, &v92);
            nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v92);
          }
          *(_BYTE *)(a1 + 113) = 1;
          v42 = *(_QWORD *)(a1 + 128);
          v85.__locale_ = *(std::locale::__imp **)(a1 + 120);
          v86 = v42;
          if (v42)
          {
            v43 = (unint64_t *)(v42 + 8);
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          v87 = 0;
          v88 = 0;
          if ((std::locale *)(a1 + 120) != &v85)
          {
            v45 = *(unint64_t **)(a1 + 136);
            v87 = v45;
            v88 = *(_BYTE *)(a1 + 144);
            if (v88 - 2 < 4 || v88 == 9)
            {
              do
                v47 = __ldaxr(v45);
              while (__stlxr(v47 + 1, v45));
            }
          }
        }
        else
        {
          v48 = *(_QWORD *)(a1 + 104);
          if (!v48)
LABEL_90:
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(std::locale *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v48 + 48))(&v85, v48, a2);
        }
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v85);
        v32 += 32;
        if (*(_BYTE *)(a2 + 16))
          v34 = 0;
        else
          v34 = *(_BYTE *)(a2 + 17) == 0;
      }
      while (v34 && v32 != v33);
    }
  }
  else
  {
    if (v91 != 4)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        v49 = (file_logger *)global_logger();
        started = file_logger::start_stream(v49, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 413, 1);
        v51 = (pthread_key_t *)started;
        if ((unint64_t)(char)v91 > 9)
          v52 = "undefined";
        else
          v52 = off_1E2DD18B8[(char)v91];
        v53 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
        if (v53)
        {
          if (v53[280])
          {
            v54 = v53 + 16;
            v55 = strlen(v52);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v52, v55);
            v56 = strlen(v52);
            if (v56)
            {
              if (v52[v56 - 1] == 10)
                file_logger::stream_flush((file_logger *)v51);
            }
          }
        }
        v57 = pthread_getspecific(v51[74]);
        if (v57 && *((_BYTE *)v57 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57 + 2, (uint64_t)" is not an iterable type\n", 25);
          file_logger::stream_flush((file_logger *)v51);
        }
      }
      v58 = MEMORY[0x1E0DE4FE0];
      v59 = MEMORY[0x1E0DE4FE0] + 64;
      v98 = MEMORY[0x1E0DE4FE0] + 64;
      v60 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      *(_QWORD *)&v92 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      *(_QWORD *)((char *)&v92 + *(_QWORD *)(v92 - 24)) = v60;
      v61 = (std::ios_base *)((char *)&v92 + *(_QWORD *)(v92 - 24));
      std::ios_base::init(v61, (char *)&v92 + 8);
      v61[1].__vftable = 0;
      v61[1].__fmtflags_ = -1;
      *(_QWORD *)&v92 = v58 + 24;
      v98 = v59;
      std::streambuf::basic_streambuf();
      *((_QWORD *)&v92 + 1) = MEMORY[0x1E0DE4FB8] + 16;
      v95 = 0u;
      v96 = 0u;
      v97 = 16;
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v92, (uint64_t)"Check failed (", 14);
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)":", 1);
      v64 = (_QWORD *)std::ostream::operator<<();
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"): ", 3);
      v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"false", 5);
      std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
      v67 = std::locale::use_facet(&v85, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
      std::locale::~locale(&v85);
      std::ostream::put();
      std::ostream::flush();
      if (*((int *)global_logger() + 169) <= 6)
      {
        v68 = (file_logger *)global_logger();
        v69 = file_logger::start_stream(v68, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 414, 1);
        std::stringbuf::str();
        v70 = (char *)pthread_getspecific(*((_QWORD *)v69 + 74));
        if (v70 && v70[280])
        {
          v71 = v70 + 16;
          if ((v84 & 0x80u) == 0)
            v72 = __p;
          else
            v72 = (void **)__p[0];
          if ((v84 & 0x80u) == 0)
            v73 = v84;
          else
            v73 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
        }
        if ((char)v84 < 0)
          operator delete(__p[0]);
      }
      __print_back_trace();
      if (*((int *)global_logger() + 169) <= 6)
      {
        v74 = (file_logger *)global_logger();
        v75 = file_logger::start_stream(v74, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 414, 1);
        std::stringbuf::str();
        v76 = (char *)pthread_getspecific(*((_QWORD *)v75 + 74));
        if (v76 && v76[280])
        {
          v77 = v76 + 16;
          if (SHIBYTE(v87) >= 0)
            locale = &v85;
          else
            locale = v85.__locale_;
          if (SHIBYTE(v87) >= 0)
            v79 = HIBYTE(v87);
          else
            v79 = v86;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)locale, v79);
        }
        v80 = pthread_getspecific(*((_QWORD *)v75 + 74));
        if (v80)
        {
          if (*((_BYTE *)v80 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80 + 2, (uint64_t)"\n", 1);
            file_logger::stream_flush(v75);
            if (*((_DWORD *)v75 + 150) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
            }
          }
        }
        if (SHIBYTE(v87) < 0)
          operator delete(v85.__locale_);
      }
      v81 = __cxa_allocate_exception(0x18uLL);
      std::stringbuf::str();
    }
    v15 = v90[1];
    v16 = v90[2];
    if (v15 != v16)
    {
      do
      {
        v92 = 0uLL;
        v94 = 0;
        v93 = 0;
        if (&v93 != (unint64_t **)v15)
        {
          v19 = *(unint64_t **)v15;
          v93 = *(unint64_t **)v15;
          v94 = *(_BYTE *)(v15 + 8);
          if (v94 - 2 < 4 || v94 == 9)
          {
            do
              v21 = __ldaxr(v19);
            while (__stlxr(v21 + 1, v19));
          }
        }
        v22 = *(_QWORD *)a2;
        __p[0] = (void *)(a1 + 152);
        v23 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v22, (unint64_t *)(a1 + 152), (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
        nitro::nitro_variable::operator=((uint64_t)(v23 + 24), &v92);
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v92);
        if (*(_BYTE *)(a1 + 112))
        {
          if (!*(_BYTE *)(a1 + 113))
          {
            v24 = *(_QWORD *)(a1 + 104);
            if (!v24)
              goto LABEL_89;
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(&v92, v24, a2);
            nitro::nitro_variable::operator=(a1 + 120, &v92);
            nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v92);
          }
          *(_BYTE *)(a1 + 113) = 1;
          v25 = *(_QWORD *)(a1 + 128);
          v85.__locale_ = *(std::locale::__imp **)(a1 + 120);
          v86 = v25;
          if (v25)
          {
            v26 = (unint64_t *)(v25 + 8);
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          v87 = 0;
          v88 = 0;
          if ((std::locale *)(a1 + 120) != &v85)
          {
            v28 = *(unint64_t **)(a1 + 136);
            v87 = v28;
            v88 = *(_BYTE *)(a1 + 144);
            if (v88 - 2 < 4 || v88 == 9)
            {
              do
                v30 = __ldaxr(v28);
              while (__stlxr(v30 + 1, v28));
            }
          }
        }
        else
        {
          v31 = *(_QWORD *)(a1 + 104);
          if (!v31)
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(std::locale *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v31 + 48))(&v85, v31, a2);
        }
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v85);
        v15 += 16;
        if (*(_BYTE *)(a2 + 16))
          v17 = 0;
        else
          v17 = *(_BYTE *)(a2 + 17) == 0;
      }
      while (v17 && v15 != v16);
    }
  }
  *a3 = 0u;
  a3[1] = 0u;
  --*(_QWORD *)(a2 + 24);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v89);
}

void sub_19124DCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;

  if (a22 < 0)
    operator delete(__p);
  a28 = *v44;
  *(uint64_t *)((char *)&a28 + *(_QWORD *)(a28 - 24)) = v44[3];
  a29 = v46 + 16;
  if (a42 < 0)
    operator delete(*(void **)(v45 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v43);
  --*(_QWORD *)(v42 + 24);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a24);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir7FOREACHEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir7FOREACHEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir7FOREACHEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir7FOREACHEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"iterator.is_value()", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 393, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 393, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19124E15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19124E1C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t **v28;
  unint64_t *v29;
  int v30;
  unint64_t *v32;
  unint64_t v33;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96), a1 + 72);
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  v24 = *(_QWORD *)(a2 + 168);
  if (!v24)
    goto LABEL_36;
  if (v24 != a2 + 144)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
LABEL_36:
    *(_QWORD *)(a1 + 168) = v24;
    goto LABEL_38;
  }
  *(_QWORD *)(a1 + 168) = a1 + 144;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 168) + 24))(*(_QWORD *)(a2 + 168));
LABEL_38:
  *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
  v25 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  *(_QWORD *)(a1 + 200) = 0;
  v28 = (unint64_t **)(a1 + 200);
  *(_BYTE *)(a1 + 208) = 0;
  if (a2 != a1)
  {
    v29 = *(unint64_t **)(a2 + 200);
    *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
    *v28 = v29;
    v30 = *(unsigned __int8 *)(a2 + 208);
    *(_BYTE *)(a1 + 208) = v30;
    if ((v30 - 2) < 4 || v30 == 9)
    {
      v32 = *v28;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
  }
  return a1;
}

void sub_19124E458(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v3;
  nitro::nitro_variable *v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  nitro::nitro_variable::~nitro_variable(v4);
  v6 = (_QWORD *)v1[12];
  if (v6 == v3)
  {
    v7 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
    v3 = (_QWORD *)v1[12];
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v7))(v3);
LABEL_6:
  nitro::nitro_variable::~nitro_variable(v2);
  v8 = (_QWORD *)v1[3];
  if (v8 == v1)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v9))(v1);
LABEL_11:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &off_1E2DAF980;
  v2 = a1 + 19;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 24));
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v5 = (_QWORD *)a1[13];
  if (v5 == a1 + 10)
  {
    v6 = 4;
    v5 = a1 + 10;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &off_1E2DAF980;
  v2 = a1 + 19;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 24));
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v5 = (_QWORD *)a1[13];
  if (v5 == a1 + 10)
  {
    v6 = 4;
    v5 = a1 + 10;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xE0uLL);
  *v2 = &off_1E2DAF980;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19124E6E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF980;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  v2 = a1 + 19;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 24));
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v5 = (_QWORD *)a1[13];
  if (v5 == a1 + 10)
  {
    v6 = 4;
    v5 = a1 + 10;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == a1 + 1)
  {
    v8 = 4;
    result = a1 + 1;
  }
  else
  {
    if (!result)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 19;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 24));
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v5 = (_QWORD *)a1[13];
  if (v5 == a1 + 10)
  {
    v6 = 4;
    v5 = a1 + 10;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  unint64_t *v31;
  unsigned __int8 v32;
  __int128 v33;
  unint64_t *v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40))
  {
    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v30, v14, a2);
      goto LABEL_18;
    }
    goto LABEL_51;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(&v33, v6, a2);
      nitro::nitro_variable::operator=(a1 + 48, &v33);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
      goto LABEL_5;
    }
LABEL_51:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_5:
  v7 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 41) = 1;
  v8 = *(_QWORD *)(a1 + 56);
  v30[0] = v7;
  v30[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v31 = 0;
  v32 = 0;
  if ((_QWORD *)(a1 + 48) != v30)
  {
    v11 = *(unint64_t **)(a1 + 64);
    v31 = v11;
    v32 = *(_BYTE *)(a1 + 72);
    if (v32 - 2 < 4 || v32 == 9)
    {
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 + 1, v11));
    }
  }
LABEL_18:
  if (v30[0])
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  if (nitro::flexible_type_converter<int>::get((uint64_t)&v33, (unsigned __int8 *)&v31))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (*(_BYTE *)(a1 + 113))
        goto LABEL_24;
      v15 = *(_QWORD *)(a1 + 104);
      if (v15)
      {
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(&v33, v15, a2);
        nitro::nitro_variable::operator=(a1 + 120, &v33);
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
LABEL_24:
        v16 = *(_QWORD *)(a1 + 120);
        *(_BYTE *)(a1 + 113) = 1;
        v17 = *(_QWORD *)(a1 + 128);
        *(_QWORD *)&v33 = v16;
        *((_QWORD *)&v33 + 1) = v17;
        if (v17)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        v34 = 0;
        v35 = 0;
        if ((__int128 *)(a1 + 120) != &v33)
        {
          v20 = *(unint64_t **)(a1 + 136);
          v34 = v20;
          v21 = *(unsigned __int8 *)(a1 + 144);
LABEL_38:
          v35 = v21;
          if ((v21 - 2) < 4 || v21 == 9)
          {
            do
              v28 = __ldaxr(v20);
            while (__stlxr(v28 + 1, v20));
          }
          goto LABEL_49;
        }
        goto LABEL_49;
      }
LABEL_52:
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v29 = *(_QWORD *)(a1 + 104);
    if (!v29)
      goto LABEL_52;
LABEL_48:
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v29 + 48))(&v33, v29, a2);
    goto LABEL_49;
  }
  if (!*(_BYTE *)(a1 + 184))
  {
    v29 = *(_QWORD *)(a1 + 176);
    if (!v29)
      goto LABEL_52;
    goto LABEL_48;
  }
  if (!*(_BYTE *)(a1 + 185))
  {
    v22 = *(_QWORD *)(a1 + 176);
    if (!v22)
      goto LABEL_52;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v22 + 48))(&v33, v22, a2);
    nitro::nitro_variable::operator=(a1 + 192, &v33);
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
  }
  v23 = *(_QWORD *)(a1 + 192);
  *(_BYTE *)(a1 + 185) = 1;
  v24 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)&v33 = v23;
  *((_QWORD *)&v33 + 1) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v34 = 0;
  v35 = 0;
  if ((__int128 *)(a1 + 192) != &v33)
  {
    v20 = *(unint64_t **)(a1 + 208);
    v34 = v20;
    v21 = *(unsigned __int8 *)(a1 + 216);
    goto LABEL_38;
  }
LABEL_49:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
  *a3 = 0u;
  a3[1] = 0u;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v30);
}

void sub_19124EBD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir2IFEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir2IFEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir2IFEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir2IFEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"cond.is_value()", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 428, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 428, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19124EF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19124EFC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_19124F194(_Unwind_Exception *a1)
{
  _QWORD *v1;
  nitro::nitro_variable *v2;
  _QWORD *v4;
  uint64_t v5;

  nitro::nitro_variable::~nitro_variable(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAFFB0;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAFFB0;
  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x98uLL);
  *v2 = &off_1E2DAFFB0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19124F370(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAFFB0;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  v4 = (_QWORD *)a1[13];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t __dst, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  unint64_t *v48;
  unsigned __int8 v49;
  _QWORD v50[2];
  unint64_t *v51;
  unsigned __int8 v52;
  std::string __str;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40))
  {
    v37 = *(_QWORD *)(a1 + 32);
    if (v37)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v37 + 48))(v50, v37, a2);
      goto LABEL_18;
    }
    goto LABEL_45;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v29 = *(_QWORD *)(a1 + 32);
    if (v29)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v29 + 48))(&__str, v29, a2);
      nitro::nitro_variable::operator=(a1 + 48, (__int128 *)&__str);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__str);
      goto LABEL_5;
    }
LABEL_45:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_5:
  v30 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 41) = 1;
  v31 = *(_QWORD *)(a1 + 56);
  v50[0] = v30;
  v50[1] = v31;
  if (v31)
  {
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v51 = 0;
  v52 = 0;
  if ((_QWORD *)(a1 + 48) != v50)
  {
    v34 = *(unint64_t **)(a1 + 64);
    v51 = v34;
    v52 = *(_BYTE *)(a1 + 72);
    if (v52 - 2 < 4 || v52 == 9)
    {
      do
        v36 = __ldaxr(v34);
      while (__stlxr(v36 + 1, v34));
    }
  }
LABEL_18:
  if (!*(_BYTE *)(a1 + 112))
  {
    v46 = *(_QWORD *)(a1 + 104);
    if (v46)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v46 + 48))(v47, v46, a2);
      goto LABEL_35;
    }
    goto LABEL_46;
  }
  if (!*(_BYTE *)(a1 + 113))
  {
    v38 = *(_QWORD *)(a1 + 104);
    if (v38)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v38 + 48))(&__str, v38, a2);
      nitro::nitro_variable::operator=(a1 + 120, (__int128 *)&__str);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__str);
      goto LABEL_22;
    }
LABEL_46:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_22:
  v39 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(a1 + 113) = 1;
  v40 = *(_QWORD *)(a1 + 128);
  v47[0] = v39;
  v47[1] = v40;
  if (v40)
  {
    v41 = (unint64_t *)(v40 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v48 = 0;
  v49 = 0;
  if ((_QWORD *)(a1 + 120) != v47)
  {
    v43 = *(unint64_t **)(a1 + 136);
    v48 = v43;
    v49 = *(_BYTE *)(a1 + 144);
    if (v49 - 2 < 4 || v49 == 9)
    {
      do
        v45 = __ldaxr(v43);
      while (__stlxr(v45 + 1, v43));
    }
  }
LABEL_35:
  if (v50[0])
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  if (v47[0])
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#2}::operator()();
  if (v52 == 5)
  {
    if (v51[2] != v51[1])
      __asm { BR              X11 }
  }
  else if (v52 == 4)
  {
    __asm { BR              X10 }
  }
  *a3 = 0u;
  a3[1] = 0u;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v47);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v50);
}

void sub_1912502B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  int v34;
  void *v35;

  if (a29 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a16);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXGETEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXGETEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXGETEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXGETEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"leftvar.is_value()", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 445, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 445, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191250768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912507D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"idxvar.is_value()", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 446, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 446, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191250B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191250B74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t **v19;
  unint64_t *v20;
  int v21;
  unint64_t *v23;
  unint64_t v24;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(_QWORD *)(a2 + 56);
  if (!v5)
    goto LABEL_9;
  if (v5 != a2 + 32)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_9:
    *(_QWORD *)(a1 + 56) = v5;
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 56) = a1 + 32;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56), a1 + 32);
LABEL_11:
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 88) = 0;
  v9 = (unint64_t **)(a1 + 88);
  *(_BYTE *)(a1 + 96) = 0;
  if (a2 != a1)
  {
    v10 = *(unint64_t **)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a2 + 96);
    *(_BYTE *)(a1 + 96) = v11;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      v13 = *v9;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  v15 = *(_QWORD *)(a2 + 128);
  if (!v15)
    goto LABEL_25;
  if (v15 != a2 + 104)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
LABEL_25:
    *(_QWORD *)(a1 + 128) = v15;
    goto LABEL_27;
  }
  *(_QWORD *)(a1 + 128) = a1 + 104;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 128) + 24))(*(_QWORD *)(a2 + 128));
LABEL_27:
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  v16 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 160) = 0;
  v19 = (unint64_t **)(a1 + 160);
  *(_BYTE *)(a1 + 168) = 0;
  if (a2 != a1)
  {
    v20 = *(unint64_t **)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *v19 = v20;
    v21 = *(unsigned __int8 *)(a2 + 168);
    *(_BYTE *)(a1 + 168) = v21;
    if ((v21 - 2) < 4 || v21 == 9)
    {
      v23 = *v19;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
    }
  }
  return a1;
}

void sub_191250D84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  nitro::nitro_variable *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  nitro::nitro_variable::~nitro_variable(v3);
  v5 = (_QWORD *)v1[7];
  if (v5 == v2)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v2 = (_QWORD *)v1[7];
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v6))(v2);
LABEL_6:
  v7 = (_QWORD *)v1[3];
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &off_1E2DB0008;
  v2 = a1 + 14;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 19));
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &off_1E2DB0008;
  v2 = a1 + 14;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 19));
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xB8uLL);
  *v2 = &off_1E2DB0008;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191250FF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB0008;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  v2 = a1 + 14;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 19));
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  result = (_QWORD *)a1[4];
  if (result == a1 + 1)
  {
    v8 = 4;
    result = a1 + 1;
  }
  else
  {
    if (!result)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 14;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 19));
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD v36[2];
  unint64_t *v37;
  unsigned __int8 v38;
  _QWORD v39[2];
  unint64_t *v40;
  unsigned __int8 v41;
  __int128 __dst;
  unint64_t *v43;
  void *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    goto LABEL_64;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  if (!*(_BYTE *)(a1 + 72))
  {
    v16 = *(_QWORD *)(a1 + 64);
    if (v16)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(v39, v16, a2);
      goto LABEL_19;
    }
    goto LABEL_64;
  }
  if (!*(_BYTE *)(a1 + 73))
  {
    v8 = *(_QWORD *)(a1 + 64);
    if (v8)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(&__dst, v8, a2);
      nitro::nitro_variable::operator=(a1 + 80, &__dst);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__dst);
      goto LABEL_6;
    }
LABEL_64:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_6:
  v9 = *(_QWORD *)(a1 + 80);
  *(_BYTE *)(a1 + 73) = 1;
  v10 = *(_QWORD *)(a1 + 88);
  v39[0] = v9;
  v39[1] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v40 = 0;
  v41 = 0;
  if ((_QWORD *)(a1 + 80) != v39)
  {
    v13 = *(unint64_t **)(a1 + 96);
    v40 = v13;
    v41 = *(_BYTE *)(a1 + 104);
    if (v41 - 2 < 4 || v41 == 9)
    {
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 + 1, v13));
    }
  }
LABEL_19:
  if (!*(_BYTE *)(a1 + 144))
  {
    v25 = *(_QWORD *)(a1 + 136);
    if (v25)
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v25 + 48))(v36, v25, a2);
      goto LABEL_36;
    }
    goto LABEL_65;
  }
  if (!*(_BYTE *)(a1 + 145))
  {
    v17 = *(_QWORD *)(a1 + 136);
    if (v17)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v17 + 48))(&__dst, v17, a2);
      nitro::nitro_variable::operator=(a1 + 152, &__dst);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__dst);
      goto LABEL_23;
    }
LABEL_65:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_23:
  v18 = *(_QWORD *)(a1 + 152);
  *(_BYTE *)(a1 + 145) = 1;
  v19 = *(_QWORD *)(a1 + 160);
  v36[0] = v18;
  v36[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v37 = 0;
  v38 = 0;
  if ((_QWORD *)(a1 + 152) != v36)
  {
    v22 = *(unint64_t **)(a1 + 168);
    v37 = v22;
    v38 = *(_BYTE *)(a1 + 176);
    if (v38 - 2 < 4 || v38 == 9)
    {
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 + 1, v22));
    }
  }
LABEL_36:
  if (*(_QWORD *)v7)
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()();
  if (v39[0])
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#2}::operator()();
  if (v36[0])
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#3}::operator()();
  v26 = *(unsigned __int8 *)(v7 + 24);
  if (v26 == 5)
  {
    v27 = *(_QWORD *)(v7 + 16);
    if (*(_QWORD *)(v27 + 16) != *(_QWORD *)(v27 + 8))
      __asm { BR              X11 }
    v28 = v40;
    *(_QWORD *)&__dst = v40;
    BYTE8(__dst) = v41;
    if (v41 - 2 < 4 || v41 == 9)
    {
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 + 1, v28));
    }
    v31 = v37;
    v43 = v37;
    LOBYTE(v44) = v38;
    if (v38 - 2 < 4 || v38 == 9)
    {
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 + 1, v31));
    }
    v34 = *(_QWORD *)(v27 + 16);
    if (v34 >= *(_QWORD *)(v27 + 24))
    {
      v35 = std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__push_back_slow_path<std::pair<nitro::flexible_type,nitro::flexible_type>>((void **)(v27 + 8), (uint64_t)&__dst);
    }
    else
    {
      *(_QWORD *)v34 = __dst;
      *(_BYTE *)(v34 + 8) = BYTE8(__dst);
      BYTE8(__dst) = 0;
      *(_QWORD *)(v34 + 16) = v43;
      *(_BYTE *)(v34 + 24) = (_BYTE)v44;
      LOBYTE(v44) = 0;
      v35 = (char *)(v34 + 32);
    }
    *(_QWORD *)(v27 + 16) = v35;
    std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)&__dst);
  }
  else if (v26 == 4)
  {
    __asm { BR              X10 }
  }
  *a3 = 0u;
  a3[1] = 0u;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v36);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v39);
}

void sub_1912523A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  int v34;
  void *v35;

  if (a29 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a16);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXPUTEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXPUTEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXPUTEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8INDEXPUTEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"leftvar.is_value()", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 477, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 477, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191252864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912528CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"idxvar.is_value()", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 478, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 478, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191252C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191252C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::operator() const(nitro::impl::nitro_eval &)::{lambda(void)#3}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"valuevar.is_value()", 19);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 479, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 479, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191252FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191253014(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__push_back_slow_path<std::pair<nitro::flexible_type,nitro::flexible_type>>(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v11[8] = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a2 + 8) = 0;
  v11[24] = *(_BYTE *)(a2 + 24);
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 24) = 0;
  v13 = v11 + 32;
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v14)
      return v13;
    goto LABEL_14;
  }
  v16 = 0;
  do
  {
    v17 = &v11[v16];
    v18 = &v14[v16];
    *((_QWORD *)v17 - 4) = *(_QWORD *)&v14[v16 - 32];
    *(v17 - 24) = v14[v16 - 24];
    *(v18 - 24) = 0;
    *((_QWORD *)v17 - 2) = *(_QWORD *)&v14[v16 - 16];
    *(v17 - 8) = v14[v16 - 8];
    *(v18 - 8) = 0;
    v16 -= 32;
  }
  while (&v14[v16] != v15);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = &v11[v16];
  a1[1] = v13;
  a1[2] = v12;
  if (v14 != v19)
  {
    do
      v14 = (char *)std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)(v14 - 32));
    while (v14 != v19);
    v14 = v19;
  }
  if (v14)
LABEL_14:
    operator delete(v14);
  return v13;
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAFCF0;
  v2 = a1 + 1;
  v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAFCF0;
  v2 = a1 + 1;
  v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x70uLL);
  *v2 = &off_1E2DAFCF0;
  std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191253314(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAFCF0;
  return std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t **v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  void *v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t **v68;
  unint64_t *v69;
  int v70;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  __int128 v75;
  void *__p[2];
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    goto LABEL_105;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  if (!*(_BYTE *)(a1 + 72))
  {
    v16 = *(_QWORD *)(a1 + 64);
    if (v16)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(&v74, v16, a2);
      goto LABEL_19;
    }
    goto LABEL_105;
  }
  if (!*(_BYTE *)(a1 + 73))
  {
    v8 = *(_QWORD *)(a1 + 64);
    if (v8)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(&v74, v8, a2);
      nitro::nitro_variable::operator=(a1 + 80, (__int128 *)&v74);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v74);
      goto LABEL_6;
    }
LABEL_105:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_6:
  v9 = *(_QWORD *)(a1 + 80);
  *(_BYTE *)(a1 + 73) = 1;
  v10 = *(_QWORD *)(a1 + 88);
  v74 = v9;
  *(_QWORD *)&v75 = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *((_QWORD *)&v75 + 1) = 0;
  LOBYTE(__p[0]) = 0;
  if ((uint64_t *)(a1 + 80) != &v74)
  {
    v13 = *(unint64_t **)(a1 + 96);
    *((_QWORD *)&v75 + 1) = v13;
    LOBYTE(__p[0]) = *(_BYTE *)(a1 + 104);
    if (LOBYTE(__p[0]) - 2 < 4 || LOBYTE(__p[0]) == 9)
    {
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 + 1, v13));
    }
  }
LABEL_19:
  nitro::nitro_variable::operator=(v7, (__int128 *)&v74);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v74);
  if (*(_QWORD *)v7)
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  v17 = (_BYTE *)(v7 + 24);
  v18 = (unint64_t **)(v7 + 16);
  if (*(_BYTE *)(v7 + 24) == 9)
  {
    nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)(v7 + 16) + 8), (uint64_t)&v74);
    if (*(_QWORD *)v7)
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    switch(*v17)
    {
      case 2:
        v19 = *v18;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          v22 = *v18;
          if (!*v18)
            goto LABEL_73;
          if (*((char *)v22 + 31) < 0)
            operator delete((void *)v22[1]);
          v23 = v22;
          v24 = 0x1012C404EF22A49;
          goto LABEL_72;
        }
        break;
      case 3:
        v26 = *v18;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          v29 = *v18;
          if (!*v18)
            goto LABEL_73;
          v30 = (void *)v29[1];
          if (v30)
          {
            v29[2] = (unint64_t)v30;
            operator delete(v30);
          }
          v23 = v29;
          v24 = 0x1080C409938AC02;
          goto LABEL_72;
        }
        break;
      case 4:
        v31 = *v18;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          v34 = *v18;
          if (!*v18)
            goto LABEL_73;
          v35 = v34[1];
          if (v35)
          {
            v36 = v34[2];
            v37 = (void *)v34[1];
            if (v36 != v35)
            {
              do
              {
                v36 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v34 + 3), v36);
              }
              while (v36 != v35);
              v37 = (void *)v34[1];
            }
            v34[2] = v35;
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        break;
      case 5:
        v38 = *v18;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          v34 = *v18;
          if (!*v18)
            goto LABEL_73;
          v41 = v34[1];
          if (v41)
          {
            v42 = v34[2];
            v43 = (void *)v34[1];
            if (v42 != v41)
            {
              do
                v42 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v42 - 32);
              while (v42 != v41);
              v43 = (void *)v34[1];
            }
            v34[2] = v41;
            v37 = v43;
LABEL_56:
            operator delete(v37);
          }
LABEL_57:
          v23 = v34;
          v24 = 0x1020C405E66F15BLL;
          goto LABEL_72;
        }
        break;
      case 9:
        v44 = *v18;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          v47 = *v18;
          if (*v18)
          {
            v48 = (void *)v47[7];
            if (v48)
            {
              v47[8] = (unint64_t)v48;
              operator delete(v48);
            }
            v49 = (void *)v47[4];
            if (v49)
            {
              v47[5] = (unint64_t)v49;
              operator delete(v49);
            }
            v50 = (std::__shared_weak_count *)v47[3];
            if (v50)
            {
              p_shared_owners = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(p_shared_owners);
              while (__stlxr(v52 - 1, p_shared_owners));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v23 = v47;
            v24 = 0x10B0C4002311774;
LABEL_72:
            MEMORY[0x19401CD90](v23, v24);
          }
LABEL_73:
          *v18 = 0;
        }
        break;
      default:
        break;
    }
    *v18 = 0;
    *v17 = 9;
    v53 = operator new();
    *(_QWORD *)v53 = 0;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v53 + 8));
    *v18 = (unint64_t *)v53;
    *(_QWORD *)v53 = 1;
    *(_DWORD *)(v53 + 8) = v74;
    v54 = v75;
    v75 = 0uLL;
    v55 = *(std::__shared_weak_count **)(v53 + 24);
    *(_OWORD *)(v53 + 16) = v54;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = *(void **)(v53 + 32);
    if (v58)
    {
      *(_QWORD *)(v53 + 40) = v58;
      operator delete(v58);
      *(_QWORD *)(v53 + 32) = 0;
      *(_QWORD *)(v53 + 40) = 0;
      *(_QWORD *)(v53 + 48) = 0;
    }
    v59 = *(void **)(v53 + 56);
    *(_OWORD *)(v53 + 32) = *(_OWORD *)__p;
    *(_QWORD *)(v53 + 48) = v77;
    __p[1] = 0;
    v77 = 0;
    __p[0] = 0;
    if (v59)
    {
      *(_QWORD *)(v53 + 64) = v59;
      operator delete(v59);
      *(_QWORD *)(v53 + 56) = 0;
      *(_QWORD *)(v53 + 64) = 0;
      *(_QWORD *)(v53 + 72) = 0;
      v59 = __p[0];
    }
    *(_OWORD *)(v53 + 56) = v78;
    v60 = v79;
    v61 = v80;
    v79 = 0;
    v78 = 0uLL;
    *(_QWORD *)(v53 + 72) = v60;
    *(_QWORD *)(v53 + 80) = v61;
    if (v59)
    {
      __p[1] = v59;
      operator delete(v59);
    }
    v62 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
    if (*((_QWORD *)&v75 + 1))
    {
      v63 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v25 = *(_QWORD *)v7;
  }
  else
  {
    v25 = 0;
  }
  *(_QWORD *)a3 = v25;
  v65 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(a3 + 8) = v65;
  if (v65)
  {
    v66 = (unint64_t *)(v65 + 8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  *(_QWORD *)(a3 + 16) = 0;
  v68 = (unint64_t **)(a3 + 16);
  *(_BYTE *)(a3 + 24) = 0;
  if (v7 != a3)
  {
    v69 = *v18;
    *(_BYTE *)(a3 + 24) = *(_BYTE *)(v7 + 24);
    *v68 = v69;
    v70 = *v17;
    *(_BYTE *)(a3 + 24) = v70;
    if ((v70 - 2) < 4 || v70 == 9)
    {
      v72 = *v68;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 + 1, v72));
    }
  }
}

void sub_191253A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
      v5 = *(_QWORD *)(a2 + 56);
      if (!v5)
      {
LABEL_10:
        *(_QWORD *)(a1 + 56) = v5;
        goto LABEL_12;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      v5 = *(_QWORD *)(a2 + 56);
      if (!v5)
        goto LABEL_10;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    v5 = *(_QWORD *)(a2 + 56);
    if (!v5)
      goto LABEL_10;
  }
  if (v5 != a2 + 32)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 56) = a1 + 32;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
LABEL_12:
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 88) = 0;
  v9 = (unint64_t **)(a1 + 88);
  *(_BYTE *)(a1 + 96) = 0;
  if (a2 != a1)
  {
    v10 = *(unint64_t **)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a2 + 96);
    *(_BYTE *)(a1 + 96) = v11;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      v13 = *v9;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  return a1;
}

void sub_191253BFC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAFD48;
  v2 = a1 + 1;
  v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_1E2DAFD48;
  v2 = a1 + 1;
  v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x70uLL);
  *v2 = &off_1E2DAFD48;
  std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_191253DC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAFD48;
  return std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v7 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = a1 + 1;
  v3 = a1 + 5;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 10));
  v4 = (_QWORD *)a1[8];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[4];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  int v21;
  unint64_t v23;
  __int128 v24;
  unint64_t *v25;
  unsigned __int8 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    goto LABEL_30;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  if (!*(_BYTE *)(a1 + 72))
  {
    v16 = *(_QWORD *)(a1 + 64);
    if (v16)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 48))(&v24, v16, a2);
      goto LABEL_19;
    }
    goto LABEL_30;
  }
  if (!*(_BYTE *)(a1 + 73))
  {
    v8 = *(_QWORD *)(a1 + 64);
    if (v8)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 48))(&v24, v8, a2);
      nitro::nitro_variable::operator=(a1 + 80, &v24);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v24);
      goto LABEL_6;
    }
LABEL_30:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_6:
  v9 = *(_QWORD *)(a1 + 80);
  *(_BYTE *)(a1 + 73) = 1;
  v10 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)&v24 = v9;
  *((_QWORD *)&v24 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v25 = 0;
  v26 = 0;
  if ((__int128 *)(a1 + 80) != &v24)
  {
    v13 = *(unint64_t **)(a1 + 96);
    v25 = v13;
    v26 = *(_BYTE *)(a1 + 104);
    if (v26 - 2 < 4 || v26 == 9)
    {
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 + 1, v13));
    }
  }
LABEL_19:
  nitro::nitro_variable::operator=(v7, &v24);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v24);
  *(_QWORD *)a3 = *(_QWORD *)v7;
  v17 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(a3 + 8) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (v7 != a3)
  {
    v20 = *(unint64_t **)(v7 + 16);
    *(_QWORD *)(a3 + 16) = v20;
    v21 = *(unsigned __int8 *)(v7 + 24);
    *(_BYTE *)(a3 + 24) = v21;
    if ((v21 - 2) < 4 || v21 == 9)
    {
      do
        v23 = __ldaxr(v20);
      while (__stlxr(v23 + 1, v20));
    }
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_1"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6ASSIGNEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
      v5 = *(_QWORD *)(a2 + 56);
      if (!v5)
      {
LABEL_10:
        *(_QWORD *)(a1 + 56) = v5;
        goto LABEL_12;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      v5 = *(_QWORD *)(a2 + 56);
      if (!v5)
        goto LABEL_10;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    v5 = *(_QWORD *)(a2 + 56);
    if (!v5)
      goto LABEL_10;
  }
  if (v5 != a2 + 32)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 56) = a1 + 32;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
LABEL_12:
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a1 + 88) = 0;
  v9 = (unint64_t **)(a1 + 88);
  *(_BYTE *)(a1 + 96) = 0;
  if (a2 != a1)
  {
    v10 = *(unint64_t **)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a2 + 96);
    *(_BYTE *)(a1 + 96) = v11;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      v13 = *v9;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  return a1;
}

void sub_191254278(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)v1[3];
  if (v3 == v1)
  {
    v4 = 4;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v4))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0x8E38E38E38E38E39 * (v5 >> 4);
    if (v6 >= 0x1C71C71C71C71C8)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[144 * v6];
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__construct_at_end<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*,std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*>((uint64_t)a1, v3, v4);
  }
  return a1;
}

void sub_191254354(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::vector((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__construct_at_end<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*,std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>::pair[abi:ne180100](v4 + v7, a2 + v7);
      v7 += 144;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(v3 + 8) = v4;
  return result;
}

void sub_1912543DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (v3)
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__construct_at_end<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*,std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*>((uint64_t)v2 + v3, v2);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t **v8;
  unint64_t *v9;
  int v10;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  int v20;
  unint64_t *v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (unint64_t **)(a1 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    v9 = *(unint64_t **)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *v8 = v9;
    v10 = *(unsigned __int8 *)(a2 + 64);
    *(_BYTE *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9)
    {
      v12 = *v8;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
  }
  v14 = *(_QWORD *)(a2 + 96);
  if (!v14)
    goto LABEL_20;
  if (v14 != a2 + 72)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_20:
    *(_QWORD *)(a1 + 96) = v14;
    goto LABEL_22;
  }
  *(_QWORD *)(a1 + 96) = a1 + 72;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 96) + 24))(*(_QWORD *)(a2 + 96));
LABEL_22:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 128) = 0;
  v18 = (unint64_t **)(a1 + 128);
  *(_BYTE *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    v19 = *(unint64_t **)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *v18 = v19;
    v20 = *(unsigned __int8 *)(a2 + 136);
    *(_BYTE *)(a1 + 136) = v20;
    if ((v20 - 2) < 4 || v20 == 9)
    {
      v22 = *v18;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
  }
  return a1;
}

void sub_191254594(_Unwind_Exception *a1)
{
  nitro::impl::delayed_variable *v1;

  nitro::impl::delayed_variable::~delayed_variable(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  *a1 = &off_1E2DAFAE0;
  v2 = (_QWORD *)a1[1];
  if (!v2)
    return a1;
  v3 = (_QWORD *)a1[2];
  v4 = (void *)a1[1];
  if (v3 == v2)
    goto LABEL_16;
  v5 = v3 - 9;
  do
  {
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v5 + 5));
    v8 = (_QWORD *)v5[3];
    if (v5 == v8)
    {
      v8 = v5;
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_12;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
    v10 = v5 - 9;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v5 - 4));
    v6 = (_QWORD *)*(v5 - 6);
    if (v5 - 9 == v6)
    {
      v6 = v5 - 9;
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 -= 18;
  }
  while (v10 != v2);
  v4 = (void *)a1[1];
LABEL_16:
  a1[2] = v2;
  operator delete(v4);
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  *a1 = &off_1E2DAFAE0;
  v2 = (_QWORD *)a1[1];
  if (!v2)
    goto LABEL_17;
  v3 = (_QWORD *)a1[2];
  v4 = (void *)a1[1];
  if (v3 == v2)
    goto LABEL_16;
  v5 = v3 - 9;
  while (1)
  {
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v5 + 5));
    v8 = (_QWORD *)v5[3];
    if (v5 == v8)
    {
      v8 = v5;
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_12;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
    v10 = v5 - 9;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v5 - 4));
    v6 = (_QWORD *)*(v5 - 6);
    if (v5 - 9 == v6)
    {
      v6 = v5 - 9;
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_6;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
    v5 -= 18;
    if (v10 == v2)
    {
      v4 = (void *)a1[1];
LABEL_16:
      a1[2] = v2;
      operator delete(v4);
LABEL_17:
      JUMPOUT(0x19401CD90);
    }
  }
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x20uLL);
  *v2 = &off_1E2DAFAE0;
  std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::vector(v2 + 1, v1);
  return v2;
}

void sub_1912547A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAFAE0;
  return std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::vector(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD **)(a1 + 8);
  if (!v1)
    return;
  v3 = *(_QWORD **)(a1 + 16);
  v4 = *(void **)(a1 + 8);
  if (v3 == v1)
    goto LABEL_17;
  v5 = v3 - 9;
  do
  {
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v5 + 5));
    v8 = (_QWORD *)v5[3];
    if (v5 == v8)
    {
      v8 = v5;
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_12;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
    v10 = v5 - 9;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v5 - 4));
    v6 = (_QWORD *)*(v5 - 6);
    if (v5 - 9 == v6)
    {
      v6 = v5 - 9;
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 -= 18;
  }
  while (v10 != v1);
  v4 = *(void **)(a1 + 8);
LABEL_17:
  *(_QWORD *)(a1 + 16) = v1;
  operator delete(v4);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = (_QWORD *)__p[1];
  if (!v2)
    goto LABEL_17;
  v3 = (_QWORD *)__p[2];
  v4 = (void *)__p[1];
  if (v3 == v2)
    goto LABEL_16;
  v5 = v3 - 9;
  do
  {
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v5 + 5));
    v8 = (_QWORD *)v5[3];
    if (v5 == v8)
    {
      v8 = v5;
      v9 = 4;
    }
    else
    {
      if (!v8)
        goto LABEL_12;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_12:
    v10 = v5 - 9;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v5 - 4));
    v6 = (_QWORD *)*(v5 - 6);
    if (v5 - 9 == v6)
    {
      v6 = v5 - 9;
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 -= 18;
  }
  while (v10 != v2);
  v4 = (void *)__p[1];
LABEL_16:
  __p[2] = v2;
  operator delete(v4);
LABEL_17:
  operator delete(__p);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  int v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v42;
  unint64_t *v43;
  void **v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t *v51;
  uint64_t *v52;
  void *v53;
  void *__p;
  uint64_t *v56;
  _QWORD v57[2];
  unint64_t *v58;
  unsigned __int8 v59;
  _QWORD v60[2];
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  unsigned __int8 v64;
  unint64_t *v65;
  unsigned __int8 v66;
  __int128 v67[2];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a1 + 16);
  v6 = (uint64_t *)(a1 + 8);
  std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::vector(&__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 4));
  v7 = *v6;
  if (*v5 != *v6)
  {
    v8 = 0;
    do
    {
      v9 = v7 + 144 * v8;
      if (*(_BYTE *)(v9 + 32))
      {
        if (!*(_BYTE *)(v9 + 33))
        {
          v10 = *(_QWORD *)(v9 + 24);
          if (!v10)
            goto LABEL_72;
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v67, v10, a2);
          nitro::nitro_variable::operator=(v9 + 40, v67);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v67);
        }
        v11 = *(_QWORD *)(v9 + 40);
        *(_BYTE *)(v9 + 33) = 1;
        v60[0] = v11;
        v12 = *(_QWORD *)(v9 + 48);
        v60[1] = v12;
        if (v12)
        {
          v13 = (unint64_t *)(v12 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v61 = 0;
        v62 = 0;
        if ((_QWORD *)(v9 + 40) != v60)
        {
          v15 = *(unint64_t **)(v9 + 56);
          v61 = (uint64_t)v15;
          v62 = *(_BYTE *)(v9 + 64);
          if (v62 - 2 < 4 || v62 == 9)
          {
            do
              v17 = __ldaxr(v15);
            while (__stlxr(v17 + 1, v15));
          }
        }
      }
      else
      {
        v18 = *(_QWORD *)(v9 + 24);
        if (!v18)
LABEL_72:
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 48))(v60, v18, a2);
      }
      if (v60[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      v19 = *(_QWORD *)(a1 + 8);
      v20 = v19 + 144 * v8;
      if (*(_BYTE *)(v20 + 104))
      {
        v21 = v19 + 144 * v8;
        v23 = *(unsigned __int8 *)(v21 + 105);
        v22 = (_BYTE *)(v21 + 105);
        if (!v23)
        {
          v24 = *(_QWORD *)(v20 + 96);
          if (!v24)
            goto LABEL_71;
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v24 + 48))(v67, v24, a2);
          nitro::nitro_variable::operator=(v19 + 144 * v8 + 112, v67);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v67);
        }
        *v22 = 1;
        v25 = v19 + 144 * v8;
        v27 = *(_QWORD *)(v25 + 112);
        v26 = (_QWORD *)(v25 + 112);
        v57[0] = v27;
        v28 = v26[1];
        v57[1] = v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
        v58 = 0;
        v59 = 0;
        if (v26 != v57)
        {
          v31 = v19 + 144 * v8;
          v32 = *(unint64_t **)(v31 + 128);
          v58 = v32;
          v33 = *(unsigned __int8 *)(v31 + 136);
          v59 = v33;
          if ((v33 - 2) < 4 || v33 == 9)
          {
            do
              v35 = __ldaxr(v32);
            while (__stlxr(v35 + 1, v32));
          }
        }
      }
      else
      {
        v36 = *(_QWORD *)(v20 + 96);
        if (!v36)
LABEL_71:
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v36 + 48))(v57, v36, a2);
      }
      if (v57[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      v37 = (unint64_t *)v61;
      v63 = v61;
      v64 = v62;
      if (v62 - 2 < 4 || v62 == 9)
      {
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 + 1, v37));
      }
      v40 = v58;
      v65 = v58;
      v66 = v59;
      if (v59 - 2 < 4 || v59 == 9)
      {
        do
          v42 = __ldaxr(v40);
        while (__stlxr(v42 + 1, v40));
      }
      std::pair<nitro::flexible_type,nitro::flexible_type>::operator=[abi:ne180100]((uint64_t)__p + 32 * v8, &v63);
      std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)&v63);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v57);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v60);
      ++v8;
      v7 = *(_QWORD *)(a1 + 8);
    }
    while (v8 < 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 16) - v7) >> 4));
  }
  v43 = (unint64_t *)operator new();
  *v43 = 0;
  v43[1] = 0;
  v44 = (void **)(v43 + 1);
  v43[2] = 0;
  v43[3] = 0;
  *v43 = 1;
  std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((uint64_t *)v43 + 1, (uint64_t *)__p, v56, ((char *)v56 - (_BYTE *)__p) >> 5);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = v43;
  *(_BYTE *)(a3 + 24) = 5;
  do
    v45 = __ldaxr(v43);
  while (__stlxr(v45 + 1, v43));
  do
  {
    v46 = __ldaxr(v43);
    v47 = v46 - 1;
  }
  while (__stlxr(v47, v43));
  if (!v47)
  {
    v48 = *v44;
    if (*v44)
    {
      v49 = v43[2];
      v50 = *v44;
      if ((void *)v49 != v48)
      {
        do
          v49 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v49 - 32);
        while ((void *)v49 != v48);
        v50 = *v44;
      }
      v43[2] = (unint64_t)v48;
      operator delete(v50);
    }
    MEMORY[0x19401CD90](v43, 0x1020C405E66F15BLL);
  }
  v51 = (uint64_t *)__p;
  if (__p)
  {
    v52 = v56;
    v53 = __p;
    if (v56 != __p)
    {
      do
        v52 = (uint64_t *)std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)(v52 - 4));
      while (v52 != v51);
      v53 = __p;
    }
    v56 = v51;
    operator delete(v53);
  }
}

void sub_191254E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v18;
  void *v19;

  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a13);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a17);
  if (__p)
  {
    v18 = a11;
    v19 = __p;
    if (a11 != __p)
    {
      do
        v18 = (void *)std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)v18 - 32);
      while (v18 != __p);
      v19 = __p;
    }
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4DICTEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4DICTEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4DICTEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4DICTEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

_QWORD *std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 59)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(32 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[32 * a2];
    a1[2] = v5;
    do
    {
      *(_QWORD *)v4 = 0;
      v4[8] = 0;
      *((_QWORD *)v4 + 2) = 0;
      v4[24] = 0;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_191254F98(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  if (*v1)
    std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::vector((uint64_t)(v1 + 1));
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<nitro::flexible_type,nitro::flexible_type>::operator=[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  unint64_t **v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  void *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(_BYTE *)(a1 + 8))
    {
      case 2:
        v4 = *(unint64_t **)a1;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_52;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_51;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a1;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_52;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_51;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a1;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_52;
          v19 = v18[1];
          if (v19)
          {
            v20 = v18[2];
            v21 = (void *)v18[1];
            if (v20 != v19)
            {
              do
              {
                v20 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v18 + 3), v20);
              }
              while (v20 != v19);
              v21 = (void *)v18[1];
            }
            v18[2] = v19;
            goto LABEL_35;
          }
          goto LABEL_36;
        }
        break;
      case 5:
        v22 = *(unint64_t **)a1;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_52;
          v25 = v18[1];
          if (v25)
          {
            v26 = v18[2];
            v21 = (void *)v18[1];
            if (v26 != v25)
            {
              do
              {
                v26 -= 32;
                std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v26);
              }
              while (v26 != v25);
              v21 = (void *)v18[1];
            }
            v18[2] = v25;
LABEL_35:
            operator delete(v21);
          }
LABEL_36:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_51;
        }
        break;
      case 9:
        v27 = *(unint64_t **)a1;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          v30 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v31 = (void *)v30[7];
            if (v31)
            {
              v30[8] = (unint64_t)v31;
              operator delete(v31);
            }
            v32 = (void *)v30[4];
            if (v32)
            {
              v30[5] = (unint64_t)v32;
              operator delete(v32);
            }
            v33 = (std::__shared_weak_count *)v30[3];
            if (v33)
            {
              p_shared_owners = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldaxr(p_shared_owners);
              while (__stlxr(v35 - 1, p_shared_owners));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v8 = v30;
            v9 = 0x10B0C4002311774;
LABEL_51:
            MEMORY[0x19401CD90](v8, v9);
          }
LABEL_52:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v36 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = v36;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *((_BYTE *)a2 + 8) = 0;
    v37 = (unint64_t **)(a1 + 16);
    switch(*(_BYTE *)(a1 + 24))
    {
      case 2:
        v38 = *v37;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          v41 = *v37;
          if (!*v37)
            goto LABEL_103;
          if (*((char *)v41 + 31) < 0)
            operator delete((void *)v41[1]);
          v42 = v41;
          v43 = 0x1012C404EF22A49;
          goto LABEL_102;
        }
        break;
      case 3:
        v44 = *v37;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          v47 = *v37;
          if (!*v37)
            goto LABEL_103;
          v48 = (void *)v47[1];
          if (v48)
          {
            v47[2] = (unint64_t)v48;
            operator delete(v48);
          }
          v42 = v47;
          v43 = 0x1080C409938AC02;
          goto LABEL_102;
        }
        break;
      case 4:
        v49 = *v37;
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          v52 = *v37;
          if (!*v37)
            goto LABEL_103;
          v53 = v52[1];
          if (v53)
          {
            v54 = v52[2];
            v55 = (void *)v52[1];
            if (v54 != v53)
            {
              do
              {
                v54 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v52 + 3), v54);
              }
              while (v54 != v53);
              v55 = (void *)v52[1];
            }
            v52[2] = v53;
            goto LABEL_86;
          }
          goto LABEL_87;
        }
        break;
      case 5:
        v56 = *v37;
        do
        {
          v57 = __ldaxr(v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, v56));
        if (!v58)
        {
          v52 = *v37;
          if (!*v37)
            goto LABEL_103;
          v59 = v52[1];
          if (v59)
          {
            v60 = v52[2];
            v61 = (void *)v52[1];
            if (v60 != v59)
            {
              do
                v60 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v60 - 32);
              while (v60 != v59);
              v61 = (void *)v52[1];
            }
            v52[2] = v59;
            v55 = v61;
LABEL_86:
            operator delete(v55);
          }
LABEL_87:
          v42 = v52;
          v43 = 0x1020C405E66F15BLL;
          goto LABEL_102;
        }
        break;
      case 9:
        v62 = *v37;
        do
        {
          v63 = __ldaxr(v62);
          v64 = v63 - 1;
        }
        while (__stlxr(v64, v62));
        if (!v64)
        {
          v65 = *v37;
          if (*v37)
          {
            v66 = (void *)v65[7];
            if (v66)
            {
              v65[8] = (unint64_t)v66;
              operator delete(v66);
            }
            v67 = (void *)v65[4];
            if (v67)
            {
              v65[5] = (unint64_t)v67;
              operator delete(v67);
            }
            v68 = (std::__shared_weak_count *)v65[3];
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v42 = v65;
            v43 = 0x10B0C4002311774;
LABEL_102:
            MEMORY[0x19401CD90](v42, v43);
          }
LABEL_103:
          *v37 = 0;
        }
        break;
      default:
        break;
    }
    v71 = (unint64_t *)a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *v37 = v71;
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *((_BYTE *)a2 + 24) = 0;
  }
  return a1;
}

{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t *v40;
  unint64_t v41;
  unint64_t **v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  void *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  int v77;
  unint64_t *v79;
  unint64_t v80;

  if (a2 != (uint64_t *)a1)
  {
    switch(*(_BYTE *)(a1 + 8))
    {
      case 2:
        v4 = *(unint64_t **)a1;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
        {
          v7 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_52;
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_51;
        }
        break;
      case 3:
        v10 = *(unint64_t **)a1;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          v13 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_52;
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_51;
        }
        break;
      case 4:
        v15 = *(unint64_t **)a1;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_52;
          v19 = v18[1];
          if (v19)
          {
            v20 = v18[2];
            v21 = (void *)v18[1];
            if (v20 != v19)
            {
              do
              {
                v20 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v18 + 3), v20);
              }
              while (v20 != v19);
              v21 = (void *)v18[1];
            }
            v18[2] = v19;
            goto LABEL_35;
          }
          goto LABEL_36;
        }
        break;
      case 5:
        v22 = *(unint64_t **)a1;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v18 = *(unint64_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_52;
          v25 = v18[1];
          if (v25)
          {
            v26 = v18[2];
            v27 = (void *)v18[1];
            if (v26 != v25)
            {
              do
                v26 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v26 - 32);
              while (v26 != v25);
              v27 = (void *)v18[1];
            }
            v18[2] = v25;
            v21 = v27;
LABEL_35:
            operator delete(v21);
          }
LABEL_36:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_51;
        }
        break;
      case 9:
        v28 = *(unint64_t **)a1;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *(unint64_t **)a1;
          if (*(_QWORD *)a1)
          {
            v32 = (void *)v31[7];
            if (v32)
            {
              v31[8] = (unint64_t)v32;
              operator delete(v32);
            }
            v33 = (void *)v31[4];
            if (v33)
            {
              v31[5] = (unint64_t)v33;
              operator delete(v33);
            }
            v34 = (std::__shared_weak_count *)v31[3];
            if (v34)
            {
              p_shared_owners = (unint64_t *)&v34->__shared_owners_;
              do
                v36 = __ldaxr(p_shared_owners);
              while (__stlxr(v36 - 1, p_shared_owners));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            v8 = v31;
            v9 = 0x10B0C4002311774;
LABEL_51:
            MEMORY[0x19401CD90](v8, v9);
          }
LABEL_52:
          *(_QWORD *)a1 = 0;
        }
        break;
      default:
        break;
    }
    v37 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = v37;
    v38 = *((unsigned __int8 *)a2 + 8);
    *(_BYTE *)(a1 + 8) = v38;
    if ((v38 - 2) < 4 || v38 == 9)
    {
      v40 = *(unint64_t **)a1;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
    }
    v42 = (unint64_t **)(a1 + 16);
    switch(*(_BYTE *)(a1 + 24))
    {
      case 2:
        v43 = *v42;
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          v46 = *v42;
          if (!*v42)
            goto LABEL_110;
          if (*((char *)v46 + 31) < 0)
            operator delete((void *)v46[1]);
          v47 = v46;
          v48 = 0x1012C404EF22A49;
          goto LABEL_109;
        }
        break;
      case 3:
        v49 = *v42;
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          v52 = *v42;
          if (!*v42)
            goto LABEL_110;
          v53 = (void *)v52[1];
          if (v53)
          {
            v52[2] = (unint64_t)v53;
            operator delete(v53);
          }
          v47 = v52;
          v48 = 0x1080C409938AC02;
          goto LABEL_109;
        }
        break;
      case 4:
        v54 = *v42;
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          v57 = *v42;
          if (!*v42)
            goto LABEL_110;
          v58 = v57[1];
          if (v58)
          {
            v59 = v57[2];
            v60 = (void *)v57[1];
            if (v59 != v58)
            {
              do
              {
                v59 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v57 + 3), v59);
              }
              while (v59 != v58);
              v60 = (void *)v57[1];
            }
            v57[2] = v58;
            goto LABEL_93;
          }
          goto LABEL_94;
        }
        break;
      case 5:
        v61 = *v42;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          v57 = *v42;
          if (!*v42)
            goto LABEL_110;
          v64 = v57[1];
          if (v64)
          {
            v65 = v57[2];
            v66 = (void *)v57[1];
            if (v65 != v64)
            {
              do
                v65 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v65 - 32);
              while (v65 != v64);
              v66 = (void *)v57[1];
            }
            v57[2] = v64;
            v60 = v66;
LABEL_93:
            operator delete(v60);
          }
LABEL_94:
          v47 = v57;
          v48 = 0x1020C405E66F15BLL;
          goto LABEL_109;
        }
        break;
      case 9:
        v67 = *v42;
        do
        {
          v68 = __ldaxr(v67);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v67));
        if (!v69)
        {
          v70 = *v42;
          if (*v42)
          {
            v71 = (void *)v70[7];
            if (v71)
            {
              v70[8] = (unint64_t)v71;
              operator delete(v71);
            }
            v72 = (void *)v70[4];
            if (v72)
            {
              v70[5] = (unint64_t)v72;
              operator delete(v72);
            }
            v73 = (std::__shared_weak_count *)v70[3];
            if (v73)
            {
              v74 = (unint64_t *)&v73->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v47 = v70;
            v48 = 0x10B0C4002311774;
LABEL_109:
            MEMORY[0x19401CD90](v47, v48);
          }
LABEL_110:
          *v42 = 0;
        }
        break;
      default:
        break;
    }
    v76 = (unint64_t *)a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    *v42 = v76;
    v77 = *((unsigned __int8 *)a2 + 24);
    *(_BYTE *)(a1 + 24) = v77;
    if ((v77 - 2) < 4 || v77 == 9)
    {
      v79 = *v42;
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 + 1, v79));
    }
  }
  return a1;
}

uint64_t std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t *v39;
  unint64_t v40;
  unint64_t **v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (a4 <= (v8 - *a1) >> 5)
  {
    result = a1[1];
    v32 = (result - v9) >> 5;
    if (v32 >= a4)
    {
      if (a2 == a3)
      {
        v53 = v9;
      }
      else
      {
        v53 = v9;
        do
        {
          std::pair<nitro::flexible_type,nitro::flexible_type>::operator=[abi:ne180100](v9, v6);
          v6 += 4;
          v9 += 32;
          v53 += 32;
        }
        while (v6 != a3);
        result = a1[1];
      }
      while (result != v53)
        result = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(result - 32);
      a1[1] = v53;
    }
    else
    {
      v33 = &a2[4 * v32];
      if (result != v9)
      {
        v34 = 32 * v32;
        do
        {
          result = std::pair<nitro::flexible_type,nitro::flexible_type>::operator=[abi:ne180100](v9, v6);
          v6 += 4;
          v9 += 32;
          v34 -= 32;
        }
        while (v34);
        v9 = a1[1];
      }
      v35 = v9;
      if (v33 != a3)
      {
        v35 = v9;
        do
        {
          *(_QWORD *)v35 = 0;
          *(_BYTE *)(v35 + 8) = 0;
          if (v33 == (uint64_t *)v35)
          {
            v33[2] = 0;
            *((_BYTE *)v33 + 24) = 0;
          }
          else
          {
            v36 = *v33;
            *(_BYTE *)(v35 + 8) = *((_BYTE *)v33 + 8);
            *(_QWORD *)v35 = v36;
            v37 = *((unsigned __int8 *)v33 + 8);
            *(_BYTE *)(v35 + 8) = v37;
            if ((v37 - 2) < 4 || v37 == 9)
            {
              v39 = *(unint64_t **)v35;
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 + 1, v39));
            }
            *(_QWORD *)(v35 + 16) = 0;
            v41 = (unint64_t **)(v35 + 16);
            *(_BYTE *)(v35 + 24) = 0;
            v42 = v33[2];
            *(_BYTE *)(v35 + 24) = *((_BYTE *)v33 + 24);
            *(_QWORD *)(v35 + 16) = v42;
            LODWORD(v42) = *((unsigned __int8 *)v33 + 24);
            *(_BYTE *)(v35 + 24) = v42;
            switch((int)v42)
            {
              case 2:
                v43 = *v41;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 + 1, v43));
                break;
              case 3:
                v45 = *v41;
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(v46 + 1, v45));
                break;
              case 4:
                v47 = *v41;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 + 1, v47));
                break;
              case 5:
                v49 = *v41;
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 + 1, v49));
                break;
              case 9:
                v51 = *v41;
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 + 1, v51));
                break;
              default:
                break;
            }
          }
          v33 += 4;
          v35 += 32;
        }
        while (v33 != a3);
      }
      a1[1] = v35;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          v10 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v10 - 32);
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      goto LABEL_84;
    v12 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v12 = a4;
    v13 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v14 = 0x7FFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (v14 >> 59)
LABEL_84:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = 32 * v14;
    result = (uint64_t)operator new(32 * v14);
    *a1 = result;
    a1[1] = result;
    for (a1[2] = result + v15; v6 != a3; result += 32)
    {
      *(_QWORD *)result = 0;
      *(_BYTE *)(result + 8) = 0;
      if (v6 == (uint64_t *)result)
      {
        v6[2] = 0;
        *((_BYTE *)v6 + 24) = 0;
      }
      else
      {
        *(_QWORD *)result = *v6;
        v17 = *((unsigned __int8 *)v6 + 8);
        *(_BYTE *)(result + 8) = v17;
        if ((v17 - 2) < 4 || v17 == 9)
        {
          v19 = *(unint64_t **)result;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 + 1, v19));
        }
        *(_QWORD *)(result + 16) = v6[2];
        v21 = *((unsigned __int8 *)v6 + 24);
        *(_BYTE *)(result + 24) = v21;
        switch(v21)
        {
          case 2:
            v22 = *(unint64_t **)(result + 16);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 + 1, v22));
            break;
          case 3:
            v24 = *(unint64_t **)(result + 16);
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 + 1, v24));
            break;
          case 4:
            v26 = *(unint64_t **)(result + 16);
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 + 1, v26));
            break;
          case 5:
            v28 = *(unint64_t **)(result + 16);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 + 1, v28));
            break;
          case 9:
            v30 = *(unint64_t **)(result + 16);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 + 1, v30));
            break;
          default:
            break;
        }
      }
      v6 += 4;
    }
    a1[1] = result;
  }
  return result;
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  *a1 = &off_1E2DAFB38;
  v2 = (char *)a1[1];
  if (!v2)
    return a1;
  v3 = (char *)a1[2];
  v4 = (void *)a1[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = (void *)a1[1];
LABEL_11:
  a1[2] = v2;
  operator delete(v4);
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  *a1 = &off_1E2DAFB38;
  v2 = (char *)a1[1];
  if (!v2)
    goto LABEL_12;
  v3 = (char *)a1[2];
  v4 = (void *)a1[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  while (1)
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_6;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
    if (v8 == v2)
    {
      v4 = (void *)a1[1];
LABEL_11:
      a1[2] = v2;
      operator delete(v4);
LABEL_12:
      JUMPOUT(0x19401CD90);
    }
  }
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x20uLL);
  *v2 = &off_1E2DAFB38;
  std::vector<nitro::impl::delayed_variable>::vector(v2 + 1, v1);
  return v2;
}

void sub_191255ED8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAFB38;
  return std::vector<nitro::impl::delayed_variable>::vector(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  char *v1;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  v1 = *(char **)(a1 + 8);
  if (!v1)
    return;
  v3 = *(char **)(a1 + 16);
  v4 = *(void **)(a1 + 8);
  if (v3 == v1)
    goto LABEL_12;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v1);
  v4 = *(void **)(a1 + 8);
LABEL_12:
  *(_QWORD *)(a1 + 16) = v1;
  operator delete(v4);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *__p)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  v2 = (char *)__p[1];
  if (!v2)
    goto LABEL_12;
  v3 = (char *)__p[2];
  v4 = (void *)__p[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = (void *)__p[1];
LABEL_11:
  __p[2] = v2;
  operator delete(v4);
LABEL_12:
  operator delete(__p);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t **v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  void *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t *v61;
  int v62;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  void **v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t *v74;
  uint64_t *v75;
  void *v76;
  void *__p;
  uint64_t *v78;
  uint64_t v79;
  _QWORD v80[2];
  unint64_t *v81;
  unsigned __int8 v82;
  __int128 v83[2];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)(a1 + 16);
  v7 = (uint64_t *)(a1 + 8);
  std::vector<nitro::flexible_type>::vector(&__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v8 = *v7;
  if (*v6 != v8)
  {
    v9 = 0;
    do
    {
      v10 = v8 + 72 * v9;
      if (*(_BYTE *)(v10 + 32))
      {
        v11 = v8 + 72 * v9;
        v13 = *(unsigned __int8 *)(v11 + 33);
        v12 = (_BYTE *)(v11 + 33);
        if (!v13)
        {
          v14 = *(_QWORD *)(v10 + 24);
          if (!v14)
            goto LABEL_99;
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v83, v14, a2);
          nitro::nitro_variable::operator=(v8 + 72 * v9 + 40, v83);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v83);
        }
        *v12 = 1;
        v15 = v8 + 72 * v9;
        v17 = *(_QWORD *)(v15 + 40);
        v16 = (_QWORD *)(v15 + 40);
        v80[0] = v17;
        v18 = v16[1];
        v80[1] = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v81 = 0;
        v82 = 0;
        if (v16 != v80)
        {
          v21 = v8 + 72 * v9;
          v22 = *(unint64_t **)(v21 + 56);
          v81 = v22;
          v23 = *(unsigned __int8 *)(v21 + 64);
          v82 = v23;
          if ((v23 - 2) < 4 || v23 == 9)
          {
            do
              v25 = __ldaxr(v22);
            while (__stlxr(v25 + 1, v22));
          }
        }
      }
      else
      {
        v26 = *(_QWORD *)(v10 + 24);
        if (!v26)
LABEL_99:
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v26 + 48))(v80, v26, a2);
      }
      if (v80[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      v27 = (unint64_t **)((char *)__p + 16 * v9);
      if (&v81 != v27)
      {
        switch(*((_BYTE *)v27 + 8))
        {
          case 2:
            v28 = *v27;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              v31 = *v27;
              if (!*v27)
                goto LABEL_73;
              if (*((char *)v31 + 31) < 0)
                operator delete((void *)v31[1]);
              v32 = v31;
              v33 = 0x1012C404EF22A49;
              goto LABEL_72;
            }
            break;
          case 3:
            v41 = *v27;
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              v44 = *v27;
              if (!*v27)
                goto LABEL_73;
              v45 = (void *)v44[1];
              if (v45)
              {
                v44[2] = (unint64_t)v45;
                operator delete(v45);
              }
              v32 = v44;
              v33 = 0x1080C409938AC02;
              goto LABEL_72;
            }
            break;
          case 4:
            v34 = *v27;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v37 = *v27;
              if (!*v27)
                goto LABEL_73;
              v38 = v37[1];
              if (v38)
              {
                v39 = v37[2];
                v40 = (void *)v37[1];
                if (v39 != v38)
                {
                  do
                  {
                    v39 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v37 + 3), v39);
                  }
                  while (v39 != v38);
                  v40 = (void *)v37[1];
                }
                v37[2] = v38;
                goto LABEL_56;
              }
              goto LABEL_57;
            }
            break;
          case 5:
            v46 = *v27;
            do
            {
              v47 = __ldaxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
            {
              v37 = *v27;
              if (*v27)
              {
                v49 = v37[1];
                if (v49)
                {
                  v50 = v37[2];
                  v51 = (void *)v37[1];
                  if (v50 != v49)
                  {
                    do
                      v50 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v50 - 32);
                    while (v50 != v49);
                    v51 = (void *)v37[1];
                  }
                  v37[2] = v49;
                  v40 = v51;
LABEL_56:
                  operator delete(v40);
                }
LABEL_57:
                MEMORY[0x19401CD90](v37, 0x1020C405E66F15BLL);
              }
              goto LABEL_73;
            }
            break;
          case 9:
            v52 = *v27;
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              v55 = *v27;
              if (*v27)
              {
                v56 = (void *)v55[7];
                if (v56)
                {
                  v55[8] = (unint64_t)v56;
                  operator delete(v56);
                }
                v57 = (void *)v55[4];
                if (v57)
                {
                  v55[5] = (unint64_t)v57;
                  operator delete(v57);
                }
                v58 = (std::__shared_weak_count *)v55[3];
                if (v58)
                {
                  p_shared_owners = (unint64_t *)&v58->__shared_owners_;
                  do
                    v60 = __ldaxr(p_shared_owners);
                  while (__stlxr(v60 - 1, p_shared_owners));
                  if (!v60)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                v32 = v55;
                v33 = 0x10B0C4002311774;
LABEL_72:
                MEMORY[0x19401CD90](v32, v33);
              }
LABEL_73:
              *v27 = 0;
            }
            break;
          default:
            break;
        }
        v61 = v81;
        *((_BYTE *)v27 + 8) = v82;
        *v27 = v61;
        v62 = v82;
        *((_BYTE *)v27 + 8) = v82;
        if ((v62 - 2) < 4 || v62 == 9)
        {
          v64 = *v27;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 + 1, v64));
        }
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v80);
      ++v9;
      v8 = *(_QWORD *)(a1 + 8);
    }
    while (v9 < 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 16) - v8) >> 3));
  }
  v66 = (unint64_t *)operator new();
  *v66 = 0;
  v66[1] = 0;
  v67 = (void **)(v66 + 1);
  v66[2] = 0;
  v66[3] = 0;
  *v66 = 1;
  std::vector<nitro::flexible_type>::__assign_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>((uint64_t *)v66 + 1, (uint64_t *)__p, v78, ((char *)v78 - (_BYTE *)__p) >> 4);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = v66;
  *(_BYTE *)(a3 + 24) = 4;
  do
    v68 = __ldaxr(v66);
  while (__stlxr(v68 + 1, v66));
  do
  {
    v69 = __ldaxr(v66);
    v70 = v69 - 1;
  }
  while (__stlxr(v70, v66));
  if (!v70)
  {
    v71 = *v67;
    if (*v67)
    {
      v72 = v66[2];
      v73 = *v67;
      if ((void *)v72 != v71)
      {
        do
        {
          v72 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v66 + 3), v72);
        }
        while ((void *)v72 != v71);
        v73 = *v67;
      }
      v66[2] = (unint64_t)v71;
      operator delete(v73);
    }
    MEMORY[0x19401CD90](v66, 0x1020C405E66F15BLL);
  }
  v74 = (uint64_t *)__p;
  if (__p)
  {
    v75 = v78;
    v76 = __p;
    if (v78 != __p)
    {
      do
      {
        v75 -= 2;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v79, (uint64_t)v75);
      }
      while (v75 != v74);
      v76 = __p;
    }
    v78 = v74;
    operator delete(v76);
  }
}

void sub_1912565D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, char a14)
{
  char *v15;
  char *v16;

  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a14);
  if (__p)
  {
    v15 = a12;
    v16 = __p;
    if (a12 != __p)
    {
      do
      {
        v15 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&a13, (uint64_t)v15);
      }
      while (v15 != __p);
      v16 = __p;
    }
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4LISTEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4LISTEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4LISTEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4LISTEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

_QWORD *std::vector<nitro::flexible_type>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  char *v5;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a2)
  {
    if (a2 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(16 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[16 * a2];
    a1[2] = v5;
    do
    {
      *(_QWORD *)v4 = 0;
      v4[8] = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_191256770(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  void *v6;

  v4 = *v1;
  if (*v1)
  {
    v5 = (uint64_t)v1[1];
    v6 = *v1;
    if ((void *)v5 != v4)
    {
      do
      {
        v5 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v2, v5);
      }
      while ((void *)v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  *a1 = &off_1E2DAFC40;
  v2 = (char *)a1[1];
  if (!v2)
    return a1;
  v3 = (char *)a1[2];
  v4 = (void *)a1[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = (void *)a1[1];
LABEL_11:
  a1[2] = v2;
  operator delete(v4);
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  *a1 = &off_1E2DAFC40;
  v2 = (char *)a1[1];
  if (!v2)
    goto LABEL_12;
  v3 = (char *)a1[2];
  v4 = (void *)a1[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  while (1)
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_6;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
    if (v8 == v2)
    {
      v4 = (void *)a1[1];
LABEL_11:
      a1[2] = v2;
      operator delete(v4);
LABEL_12:
      JUMPOUT(0x19401CD90);
    }
  }
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x20uLL);
  *v2 = &off_1E2DAFC40;
  std::vector<nitro::impl::delayed_variable>::vector(v2 + 1, v1);
  return v2;
}

void sub_191256950(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAFC40;
  return std::vector<nitro::impl::delayed_variable>::vector(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  char *v1;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  v1 = *(char **)(a1 + 8);
  if (!v1)
    return;
  v3 = *(char **)(a1 + 16);
  v4 = *(void **)(a1 + 8);
  if (v3 == v1)
    goto LABEL_12;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v1);
  v4 = *(void **)(a1 + 8);
LABEL_12:
  *(_QWORD *)(a1 + 16) = v1;
  operator delete(v4);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *__p)
{
  char *v2;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  v2 = (char *)__p[1];
  if (!v2)
    goto LABEL_12;
  v3 = (char *)__p[2];
  v4 = (void *)__p[1];
  if (v3 == v2)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v8 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v6 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v6)
    {
      v6 = (_QWORD *)((char *)v5 - 40);
      v7 = 4;
LABEL_5:
      (*(void (**)(void))(*v6 + 8 * v7))();
      goto LABEL_6;
    }
    if (v6)
    {
      v7 = 5;
      goto LABEL_5;
    }
LABEL_6:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v8 != v2);
  v4 = (void *)__p[1];
LABEL_11:
  __p[2] = v2;
  operator delete(v4);
LABEL_12:
  operator delete(__p);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t **v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  void *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  void *v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t *v61;
  int v62;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  void **v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t *v74;
  uint64_t *v75;
  void *v76;
  void *__p;
  uint64_t *v78;
  uint64_t v79;
  _QWORD v80[2];
  unint64_t *v81;
  unsigned __int8 v82;
  __int128 v83[2];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)(a1 + 16);
  v7 = (uint64_t *)(a1 + 8);
  std::vector<nitro::flexible_type>::vector(&__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v8 = *v7;
  if (*v6 != v8)
  {
    v9 = 0;
    do
    {
      v10 = v8 + 72 * v9;
      if (*(_BYTE *)(v10 + 32))
      {
        v11 = v8 + 72 * v9;
        v13 = *(unsigned __int8 *)(v11 + 33);
        v12 = (_BYTE *)(v11 + 33);
        if (!v13)
        {
          v14 = *(_QWORD *)(v10 + 24);
          if (!v14)
            goto LABEL_99;
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v83, v14, a2);
          nitro::nitro_variable::operator=(v8 + 72 * v9 + 40, v83);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v83);
        }
        *v12 = 1;
        v15 = v8 + 72 * v9;
        v17 = *(_QWORD *)(v15 + 40);
        v16 = (_QWORD *)(v15 + 40);
        v80[0] = v17;
        v18 = v16[1];
        v80[1] = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v81 = 0;
        v82 = 0;
        if (v16 != v80)
        {
          v21 = v8 + 72 * v9;
          v22 = *(unint64_t **)(v21 + 56);
          v81 = v22;
          v23 = *(unsigned __int8 *)(v21 + 64);
          v82 = v23;
          if ((v23 - 2) < 4 || v23 == 9)
          {
            do
              v25 = __ldaxr(v22);
            while (__stlxr(v25 + 1, v22));
          }
        }
      }
      else
      {
        v26 = *(_QWORD *)(v10 + 24);
        if (!v26)
LABEL_99:
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v26 + 48))(v80, v26, a2);
      }
      if (v80[0])
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
      v27 = (unint64_t **)((char *)__p + 16 * v9);
      if (&v81 != v27)
      {
        switch(*((_BYTE *)v27 + 8))
        {
          case 2:
            v28 = *v27;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
            {
              v31 = *v27;
              if (!*v27)
                goto LABEL_73;
              if (*((char *)v31 + 31) < 0)
                operator delete((void *)v31[1]);
              v32 = v31;
              v33 = 0x1012C404EF22A49;
              goto LABEL_72;
            }
            break;
          case 3:
            v41 = *v27;
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
            {
              v44 = *v27;
              if (!*v27)
                goto LABEL_73;
              v45 = (void *)v44[1];
              if (v45)
              {
                v44[2] = (unint64_t)v45;
                operator delete(v45);
              }
              v32 = v44;
              v33 = 0x1080C409938AC02;
              goto LABEL_72;
            }
            break;
          case 4:
            v34 = *v27;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              v37 = *v27;
              if (!*v27)
                goto LABEL_73;
              v38 = v37[1];
              if (v38)
              {
                v39 = v37[2];
                v40 = (void *)v37[1];
                if (v39 != v38)
                {
                  do
                  {
                    v39 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v37 + 3), v39);
                  }
                  while (v39 != v38);
                  v40 = (void *)v37[1];
                }
                v37[2] = v38;
                goto LABEL_56;
              }
              goto LABEL_57;
            }
            break;
          case 5:
            v46 = *v27;
            do
            {
              v47 = __ldaxr(v46);
              v48 = v47 - 1;
            }
            while (__stlxr(v48, v46));
            if (!v48)
            {
              v37 = *v27;
              if (*v27)
              {
                v49 = v37[1];
                if (v49)
                {
                  v50 = v37[2];
                  v51 = (void *)v37[1];
                  if (v50 != v49)
                  {
                    do
                      v50 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v50 - 32);
                    while (v50 != v49);
                    v51 = (void *)v37[1];
                  }
                  v37[2] = v49;
                  v40 = v51;
LABEL_56:
                  operator delete(v40);
                }
LABEL_57:
                MEMORY[0x19401CD90](v37, 0x1020C405E66F15BLL);
              }
              goto LABEL_73;
            }
            break;
          case 9:
            v52 = *v27;
            do
            {
              v53 = __ldaxr(v52);
              v54 = v53 - 1;
            }
            while (__stlxr(v54, v52));
            if (!v54)
            {
              v55 = *v27;
              if (*v27)
              {
                v56 = (void *)v55[7];
                if (v56)
                {
                  v55[8] = (unint64_t)v56;
                  operator delete(v56);
                }
                v57 = (void *)v55[4];
                if (v57)
                {
                  v55[5] = (unint64_t)v57;
                  operator delete(v57);
                }
                v58 = (std::__shared_weak_count *)v55[3];
                if (v58)
                {
                  p_shared_owners = (unint64_t *)&v58->__shared_owners_;
                  do
                    v60 = __ldaxr(p_shared_owners);
                  while (__stlxr(v60 - 1, p_shared_owners));
                  if (!v60)
                  {
                    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                    std::__shared_weak_count::__release_weak(v58);
                  }
                }
                v32 = v55;
                v33 = 0x10B0C4002311774;
LABEL_72:
                MEMORY[0x19401CD90](v32, v33);
              }
LABEL_73:
              *v27 = 0;
            }
            break;
          default:
            break;
        }
        v61 = v81;
        *((_BYTE *)v27 + 8) = v82;
        *v27 = v61;
        v62 = v82;
        *((_BYTE *)v27 + 8) = v82;
        if ((v62 - 2) < 4 || v62 == 9)
        {
          v64 = *v27;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 + 1, v64));
        }
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v80);
      ++v9;
      v8 = *(_QWORD *)(a1 + 8);
    }
    while (v9 < 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 16) - v8) >> 3));
  }
  v66 = (unint64_t *)operator new();
  *v66 = 0;
  v66[1] = 0;
  v67 = (void **)(v66 + 1);
  v66[2] = 0;
  v66[3] = 0;
  *v66 = 1;
  std::vector<nitro::flexible_type>::__assign_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>((uint64_t *)v66 + 1, (uint64_t *)__p, v78, ((char *)v78 - (_BYTE *)__p) >> 4);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = v66;
  *(_BYTE *)(a3 + 24) = 4;
  do
    v68 = __ldaxr(v66);
  while (__stlxr(v68 + 1, v66));
  do
  {
    v69 = __ldaxr(v66);
    v70 = v69 - 1;
  }
  while (__stlxr(v70, v66));
  if (!v70)
  {
    v71 = *v67;
    if (*v67)
    {
      v72 = v66[2];
      v73 = *v67;
      if ((void *)v72 != v71)
      {
        do
        {
          v72 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v66 + 3), v72);
        }
        while ((void *)v72 != v71);
        v73 = *v67;
      }
      v66[2] = (unint64_t)v71;
      operator delete(v73);
    }
    MEMORY[0x19401CD90](v66, 0x1020C405E66F15BLL);
  }
  v74 = (uint64_t *)__p;
  if (__p)
  {
    v75 = v78;
    v76 = __p;
    if (v78 != __p)
    {
      do
      {
        v75 -= 2;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v79, (uint64_t)v75);
      }
      while (v75 != v74);
      v76 = __p;
    }
    v78 = v74;
    operator delete(v76);
  }
}

void sub_191257050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, char *a12, uint64_t a13, char a14)
{
  char *v15;
  char *v16;

  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a14);
  if (__p)
  {
    v15 = a12;
    v16 = __p;
    if (a12 != __p)
    {
      do
      {
        v15 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&a13, (uint64_t)v15);
      }
      while (v15 != __p);
      v16 = __p;
    }
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5TUPLEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5TUPLEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5TUPLEEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5TUPLEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DB0060;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DB0060;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  JUMPOUT(0x19401CD90);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t *v10;
  unint64_t v11;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_1E2DB0060;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 7) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_QWORD *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
    v8 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v8;
    if ((v8 - 2) < 4 || v8 == 9)
    {
      v10 = (unint64_t *)*((_QWORD *)v2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  *((_QWORD *)v2 + 10) = *(_QWORD *)(a1 + 80);
  return v2;
}

void sub_191257324(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a2 = &off_1E2DB0060;
  v4 = a2 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
      *(_QWORD *)(a2 + 32) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a2 + 64) = 0;
  v9 = (unint64_t **)(a2 + 64);
  *(_BYTE *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    v10 = *(unint64_t **)(a1 + 64);
    *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a1 + 72);
    *(_BYTE *)(a2 + 72) = v11;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      v13 = *v9;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  return result;
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  void *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  _QWORD v47[2];
  unint64_t *v48;
  unsigned __int8 v49;
  __int128 v50[2];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40))
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v12 + 48))(v47);
      goto LABEL_18;
    }
    goto LABEL_82;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v4 + 48))(v50);
      nitro::nitro_variable::operator=(a1 + 48, v50);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v50);
      goto LABEL_5;
    }
LABEL_82:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_5:
  v5 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 41) = 1;
  v6 = *(_QWORD *)(a1 + 56);
  v47[0] = v5;
  v47[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v48 = 0;
  v49 = 0;
  if ((_QWORD *)(a1 + 48) != v47)
  {
    v9 = *(unint64_t **)(a1 + 64);
    v48 = v9;
    v49 = *(_BYTE *)(a1 + 72);
    if (v49 - 2 < 4 || v49 == 9)
    {
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 + 1, v9));
    }
  }
LABEL_18:
  if (v47[0])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  v13 = v48[1] + 16 * *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)v13;
  v15 = *(unsigned __int8 *)(v13 + 8);
  v16 = v15 - 2;
  if ((v15 - 2) < 4 || v15 == 9)
  {
    do
      v18 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v18 + 1, (unint64_t *)v14));
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v14;
    *(_BYTE *)(a2 + 24) = v15;
    do
      v19 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v19 + 1, (unint64_t *)v14));
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = v14;
    *(_BYTE *)(a2 + 24) = v15;
    if (v16 > 7)
      goto LABEL_64;
  }
  switch(v16)
  {
    case 0u:
      do
      {
        v20 = __ldaxr((unint64_t *)v14);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unint64_t *)v14));
      if (v21)
        v22 = 1;
      else
        v22 = v14 == 0;
      if (!v22)
      {
        v23 = 0x1012C404EF22A49;
        if ((*(char *)(v14 + 31) & 0x80000000) == 0)
          goto LABEL_63;
        v24 = *(void **)(v14 + 8);
        goto LABEL_62;
      }
      break;
    case 1u:
      do
      {
        v30 = __ldaxr((unint64_t *)v14);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, (unint64_t *)v14));
      if (v31)
        v32 = 1;
      else
        v32 = v14 == 0;
      if (!v32)
      {
        v23 = 0x1080C409938AC02;
        v24 = *(void **)(v14 + 8);
        if (!v24)
          goto LABEL_63;
        *(_QWORD *)(v14 + 16) = v24;
        goto LABEL_62;
      }
      break;
    case 2u:
      do
      {
        v25 = __ldaxr((unint64_t *)v14);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unint64_t *)v14));
      if (v26)
        v27 = 1;
      else
        v27 = v14 == 0;
      if (!v27)
      {
        v23 = 0x1020C405E66F15BLL;
        v28 = *(_QWORD *)(v14 + 8);
        if (!v28)
          goto LABEL_63;
        v29 = *(_QWORD *)(v14 + 16);
        v24 = *(void **)(v14 + 8);
        if (v29 != v28)
        {
          do
          {
            v29 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v14 + 24, v29);
          }
          while (v29 != v28);
          v24 = *(void **)(v14 + 8);
        }
        *(_QWORD *)(v14 + 16) = v28;
        goto LABEL_62;
      }
      break;
    case 3u:
      do
      {
        v33 = __ldaxr((unint64_t *)v14);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, (unint64_t *)v14));
      if (v34)
        v35 = 1;
      else
        v35 = v14 == 0;
      if (!v35)
      {
        v23 = 0x1020C405E66F15BLL;
        v36 = *(_QWORD *)(v14 + 8);
        if (v36)
        {
          v37 = *(_QWORD *)(v14 + 16);
          v38 = *(void **)(v14 + 8);
          if (v37 != v36)
          {
            do
              v37 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v37 - 32);
            while (v37 != v36);
            v38 = *(void **)(v14 + 8);
          }
          *(_QWORD *)(v14 + 16) = v36;
          v24 = v38;
LABEL_62:
          operator delete(v24);
        }
        goto LABEL_63;
      }
      break;
    case 7u:
      do
      {
        v39 = __ldaxr((unint64_t *)v14);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, (unint64_t *)v14));
      if (v40)
        v41 = 1;
      else
        v41 = v14 == 0;
      if (!v41)
      {
        v42 = *(void **)(v14 + 56);
        if (v42)
        {
          *(_QWORD *)(v14 + 64) = v42;
          operator delete(v42);
        }
        v43 = *(void **)(v14 + 32);
        if (v43)
        {
          *(_QWORD *)(v14 + 40) = v43;
          operator delete(v43);
        }
        v23 = 0x10B0C4002311774;
        v44 = *(std::__shared_weak_count **)(v14 + 24);
        if (v44)
        {
          p_shared_owners = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(p_shared_owners);
          while (__stlxr(v46 - 1, p_shared_owners));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
LABEL_63:
        MEMORY[0x19401CD90](v14, v23);
      }
      break;
    default:
      break;
  }
LABEL_64:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v47);
}

void sub_191257880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8TUPLEGETEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8TUPLEGETEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8TUPLEGETEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8TUPLEGETEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::TUPLEGET const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAFB90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAFB90;
  a2[1] = v2;
  return result;
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  int v11;
  unint64_t v13;
  _QWORD *v14;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *a2;
  v14 = v4;
  result = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, v4, (uint64_t)&std::piecewise_construct, &v14);
  v7 = *((_QWORD *)result + 4);
  *(_QWORD *)a3 = *((_QWORD *)result + 3);
  *(_QWORD *)(a3 + 8) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (result + 24 != (char *)a3)
  {
    v10 = (unint64_t *)*((_QWORD *)result + 5);
    *(_QWORD *)(a3 + 16) = v10;
    v11 = result[48];
    *(_BYTE *)(a3 + 24) = v11;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      do
        v13 = __ldaxr(v10);
      while (__stlxr(v13 + 1, v10));
    }
  }
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4THISEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4THISEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4THISEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir4THISEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::THIS const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAFE50;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAFE50;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  JUMPOUT(0x19401CD90);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t *v10;
  unint64_t v11;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_1E2DAFE50;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 7) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_QWORD *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
    v8 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v8;
    if ((v8 - 2) < 4 || v8 == 9)
    {
      v10 = (unint64_t *)*((_QWORD *)v2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  return v2;
}

void sub_191257C28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a2 = &off_1E2DAFE50;
  v4 = a2 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
      *(_QWORD *)(a2 + 32) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a2 + 64) = 0;
  v9 = (unint64_t **)(a2 + 64);
  *(_BYTE *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    v10 = *(unint64_t **)(a1 + 64);
    *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a1 + 72);
    *(_BYTE *)(a2 + 72) = v11;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      v13 = *v9;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  return result;
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  operator delete(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  __int128 v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40))
  {
    v15 = *(_QWORD *)(a1 + 32);
    if (v15)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 48))(v15, a2);
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v17, v6, a2);
      nitro::nitro_variable::operator=(a1 + 48, v17);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v17);
      goto LABEL_5;
    }
LABEL_19:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_5:
  v7 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 41) = 1;
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (a1 + 48 != a3)
  {
    v11 = *(unint64_t **)(a1 + 64);
    *(_QWORD *)(a3 + 16) = v11;
    v12 = *(unsigned __int8 *)(a1 + 72);
    *(_BYTE *)(a3 + 24) = v12;
    if ((v12 - 2) < 4 || v12 == 9)
    {
      do
        v14 = __ldaxr(v11);
      while (__stlxr(v14 + 1, v11));
    }
  }
LABEL_18:
  *(_BYTE *)(a2 + 16) = 1;
  return nitro::nitro_variable::operator=(a2 + 32, (uint64_t *)a3);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6RETURNEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6RETURNEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6RETURNEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6RETURNEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::RETURN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DAFBE8;
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAFBE8;
}

double std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 17) = 1;
  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5BREAKEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5BREAKEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5BREAKEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir5BREAKEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BREAK const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DAFF58;
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAFF58;
}

double std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  double result;

  *(_BYTE *)(a1 + 18) = 1;
  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8CONTINUEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8CONTINUEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8CONTINUEEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir8CONTINUEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CONTINUE const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *exception;
  char v9;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.hpp", "operator()", 98, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed: ", 14);
    v6 = pthread_getspecific(started[74]);
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"false", 5);
    v7 = pthread_getspecific(started[74]);
    if (v7)
    {
      if (*((_BYTE *)v7 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)":\n", 2);
        file_logger::stream_flush((file_logger *)started);
      }
    }
  }
  log_dispatch<true>::exec(6, "Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.hpp", "operator()", 98, "Op invalid to use as an LHS", v0, v1, v2, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  *exception = "assertion failure";
  __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAF2F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAF2F8;
  a2[1] = v2;
  return result;
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, int8x8_t **a2)
{
  unint64_t v3;
  _QWORD *v4;
  int8x8_t *v5;
  int8x8_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  int8x8_t *v12;
  int8x8_t *v13;
  int8x8_t *v14;
  int8x8_t *v15;
  int8x8_t *v16;
  unint64_t v17;
  BOOL v18;
  int8x8_t **v19;
  char *v20;
  uint64_t v21;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = (*a2)[1];
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = v3;
      if (v3 >= *(_QWORD *)&v6)
        v8 = v3 % *(_QWORD *)&v6;
    }
    else
    {
      v8 = (*(_QWORD *)&v6 - 1) & v3;
    }
    v9 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v8);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v3)
        {
          if (i[2] == v3)
            return (char *)(i + 3);
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= *(_QWORD *)&v6)
              v11 %= *(_QWORD *)&v6;
          }
          else
          {
            v11 &= *(_QWORD *)&v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  v12 = a2[1];
  v15 = (int8x8_t *)v12[7];
  v13 = v12 + 7;
  v14 = v15;
  if (!v15)
    goto LABEL_28;
  v16 = v13;
  do
  {
    v17 = (unint64_t)v14[4];
    v18 = v17 >= v3;
    if (v17 >= v3)
      v19 = (int8x8_t **)v14;
    else
      v19 = (int8x8_t **)&v14[1];
    if (v18)
      v16 = v14;
    v14 = *v19;
  }
  while (*v19);
  if (v16 != v13 && v3 >= *(_QWORD *)&v16[4])
    return (char *)&v16[5];
LABEL_28:
  v24 = 0uLL;
  v26 = 0;
  v25 = 0;
  v23 = v4;
  v20 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v5, v4, (uint64_t)&std::piecewise_construct, &v23);
  nitro::nitro_variable::operator=((uint64_t)(v20 + 24), &v24);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v24);
  v21 = (uint64_t)*a2;
  *(_QWORD *)&v24 = v4;
  return std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v21, v4, (uint64_t)&std::piecewise_construct, (_QWORD **)&v24)+ 24;
}

void sub_191258440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6SYMBOLEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6SYMBOLEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6SYMBOLEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6SYMBOLEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::target_type()
{
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAF2A0;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAF2A0;
  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  JUMPOUT(0x19401CD90);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t *v10;
  unint64_t v11;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = &off_1E2DAF2A0;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)v2 + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 7) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_QWORD *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((_QWORD *)v2 + 8) = *(_QWORD *)(a1 + 64);
    v8 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v8;
    if ((v8 - 2) < 4 || v8 == 9)
    {
      v10 = (unint64_t *)*((_QWORD *)v2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  *((_QWORD *)v2 + 10) = *(_QWORD *)(a1 + 80);
  return v2;
}

void sub_191258674(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t **v9;
  unint64_t *v10;
  int v11;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a2 = &off_1E2DAF2A0;
  v4 = a2 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
      *(_QWORD *)(a2 + 32) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_QWORD *)(a2 + 64) = 0;
  v9 = (unint64_t **)(a2 + 64);
  *(_BYTE *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    v10 = *(unint64_t **)(a1 + 64);
    *(_BYTE *)(a2 + 72) = *(_BYTE *)(a1 + 72);
    *v9 = v10;
    v11 = *(unsigned __int8 *)(a1 + 72);
    *(_BYTE *)(a2 + 72) = v11;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      v13 = *v9;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  return result;
}

_QWORD *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::destroy(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *result;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  result = (_QWORD *)a1[4];
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::destroy_deallocate(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  operator delete(a1);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unsigned __int8 v23;
  __int128 v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 40))
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v10 + 48))(&v20);
      goto LABEL_18;
    }
    goto LABEL_29;
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v2 + 48))(v24);
      nitro::nitro_variable::operator=(a1 + 48, v24);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v24);
      goto LABEL_5;
    }
LABEL_29:
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_5:
  v3 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 41) = 1;
  v4 = *(std::__shared_weak_count **)(a1 + 56);
  v20 = v3;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v22 = 0;
  v23 = 0;
  if ((uint64_t *)(a1 + 48) != &v20)
  {
    v7 = *(unint64_t **)(a1 + 64);
    v22 = v7;
    v23 = *(_BYTE *)(a1 + 72);
    if (v23 - 2 < 4 || v23 == 9)
    {
      do
        v9 = __ldaxr(v7);
      while (__stlxr(v9 + 1, v7));
    }
  }
LABEL_18:
  v11 = v20;
  if (!v20)
    nitro::nitro_variable::instance(void)const::{lambda(void)#1}::operator()();
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v19 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)&v24[0] = &v19;
  v15 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v11 + 16, &v19, (uint64_t)&std::piecewise_construct, (_QWORD **)v24);
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v20);
  return v15 + 24;
}

void sub_1912589F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6MEMBEREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6MEMBEREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6MEMBEREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval14exec_referenceERKNS_2ir6MEMBEREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_reference(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t OUTLINED_FUNCTION_2_1@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(*a1 + 8 * a2))();
}

void OUTLINED_FUNCTION_5_2()
{
  uint64_t v0;
  uint64_t v1;

  std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v1, v0 - 16);
}

uint64_t OUTLINED_FUNCTION_6_2(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t OUTLINED_FUNCTION_10_3(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_11_0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

void OUTLINED_FUNCTION_15_0(void *a1@<X8>)
{
  operator delete(a1);
}

void OUTLINED_FUNCTION_16_0()
{
  JUMPOUT(0x19401CD90);
}

uint64_t OUTLINED_FUNCTION_17(uint64_t a1)
{
  return std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(a1 - 32);
}

void OUTLINED_FUNCTION_18(void *__p)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  operator delete(__p);
}

uint64_t OUTLINED_FUNCTION_20@<X0>(uint64_t (*a1)(uint64_t)@<X8>)
{
  uint64_t v1;

  return a1(v1);
}

uint64_t OUTLINED_FUNCTION_21_0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  return result;
}

void OUTLINED_FUNCTION_24()
{
  nitro::nitro_variable *v0;

  nitro::nitro_variable::~nitro_variable(v0);
}

void OUTLINED_FUNCTION_25()
{
  unint64_t *v0;
  unint64_t v1;

  v1 = __ldaxr(v0);
  __stlxr(v1 - 1, v0);
}

uint64_t OUTLINED_FUNCTION_28()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_30()
{
  uint64_t v0;
  uint64_t v1;

  std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v1, v0 - 16);
}

void OUTLINED_FUNCTION_33(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = __p;
  operator delete(__p);
}

uint64_t OUTLINED_FUNCTION_34(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t OUTLINED_FUNCTION_35()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_38()
{
  uint64_t v0;

  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v0 + 24));
}

uint64_t OUTLINED_FUNCTION_39()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 16);
}

void OUTLINED_FUNCTION_40()
{
  nitro::nitro_variable *v0;

  nitro::nitro_variable::~nitro_variable(v0);
}

void OUTLINED_FUNCTION_41(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_42()
{
  uint64_t v0;

  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v0 + 40));
}

void OUTLINED_FUNCTION_43(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = __p;
  operator delete(__p);
}

uint64_t OUTLINED_FUNCTION_44()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_45()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_46()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void OUTLINED_FUNCTION_47()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void OUTLINED_FUNCTION_48()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void OUTLINED_FUNCTION_49(void *__p)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  operator delete(__p);
}

uint64_t OUTLINED_FUNCTION_51()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_52()
{
  uint64_t v0;

  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v0 - 32));
}

uint64_t OUTLINED_FUNCTION_53()
{
  uint64_t v0;

  return v0;
}

void nitro::impl::nitro_lazy_eval::exec_function_body(uint64_t a1, uint64_t a2)
{
  void **v2;
  void *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = (void *)OUTLINED_FUNCTION_10_3(a1, a2);
  if (!v4)
  {
    while (1)
    {
      OUTLINED_FUNCTION_24();
      v5 = (_QWORD *)OUTLINED_FUNCTION_39();
      if (v4)
        break;
      if (v5)
      {
        v6 = 5;
LABEL_6:
        OUTLINED_FUNCTION_2_1(v5, v6);
      }
      OUTLINED_FUNCTION_36();
      if (v4)
      {
        v3 = *v2;
        goto LABEL_10;
      }
    }
    v5 = (_QWORD *)OUTLINED_FUNCTION_28();
    goto LABEL_6;
  }
LABEL_10:
  OUTLINED_FUNCTION_18(v3);
  OUTLINED_FUNCTION_10();
}

void nitro::impl::nitro_lazy_eval::exec(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  nitro::nitro_variable *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = (char *)*a1;
  if (!*a1)
    goto LABEL_12;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v1)
    goto LABEL_11;
  v5 = (nitro::nitro_variable *)(v3 - 32);
  do
  {
    v6 = (char *)v5 - 40;
    nitro::nitro_variable::~nitro_variable(v5);
    v7 = (_QWORD *)*((_QWORD *)v5 - 2);
    if ((_QWORD *)((char *)v5 - 40) == v7)
    {
      v7 = (_QWORD *)((char *)v5 - 40);
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_9;
      v8 = 5;
    }
    OUTLINED_FUNCTION_2_1(v7, v8);
LABEL_9:
    v5 = (nitro::nitro_variable *)((char *)v5 - 72);
  }
  while (v6 != v1);
  v4 = *a1;
LABEL_11:
  a1[1] = v1;
  operator delete(v4);
LABEL_12:
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_19();
}

void std::vector<nitro::impl::delayed_variable>::vector(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void **v6;
  uint64_t v7;
  char v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v5 = (void *)OUTLINED_FUNCTION_5_0(a1, a2);
  if (!v8)
  {
    v9 = v6;
    v10 = v7 - 32;
    while (1)
    {
      OUTLINED_FUNCTION_40();
      v11 = *(_QWORD **)(v10 - 16);
      if (v4 == v11)
        break;
      if (v11)
      {
        v12 = 5;
LABEL_7:
        OUTLINED_FUNCTION_2_1(v11, v12);
      }
      v10 -= 72;
      if (v4 == v2)
      {
        v5 = *v9;
        goto LABEL_10;
      }
    }
    v11 = (_QWORD *)OUTLINED_FUNCTION_35();
    goto LABEL_7;
  }
LABEL_10:
  *v3 = v2;
  OUTLINED_FUNCTION_0_2(v5);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(char **a1, char **a2)
{
  char *v2;
  char *v5;
  char *v6;
  nitro::nitro_variable *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  v2 = *a1;
  if (!*a1)
    return 1;
  v5 = a1[1];
  v6 = *a1;
  if (v5 == v2)
    goto LABEL_11;
  v7 = (nitro::nitro_variable *)(v5 - 32);
  do
  {
    v8 = (char *)v7 - 40;
    nitro::nitro_variable::~nitro_variable(v7);
    v9 = (_QWORD *)*((_QWORD *)v7 - 2);
    if ((_QWORD *)((char *)v7 - 40) == v9)
    {
      v9 = (_QWORD *)OUTLINED_FUNCTION_35();
    }
    else
    {
      if (!v9)
        goto LABEL_9;
      v10 = 5;
    }
    OUTLINED_FUNCTION_2_1(v9, v10);
LABEL_9:
    v7 = (nitro::nitro_variable *)((char *)v7 - 72);
  }
  while (v8 != v2);
  v6 = *a1;
LABEL_11:
  result = 0;
  *a2 = v6;
  a1[1] = v2;
  return result;
}

void nitro::impl::nitro_lazy_eval::exec(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v7 = (_QWORD *)a1[1];
  v8 = a2;
  if (v7 != a2)
  {
    v9 = v7 - 4;
    while (1)
    {
      OUTLINED_FUNCTION_40();
      v10 = (_QWORD *)*(v9 - 2);
      if (v3 == v10)
        break;
      if (v10)
      {
        v11 = 5;
LABEL_7:
        OUTLINED_FUNCTION_2_1(v10, v11);
      }
      v9 -= 9;
      if (v3 == a2)
      {
        v8 = (_QWORD *)*a1;
        goto LABEL_10;
      }
    }
    v10 = (_QWORD *)OUTLINED_FUNCTION_35();
    goto LABEL_7;
  }
LABEL_10:
  *a3 = v8;
  a1[1] = a2;
  OUTLINED_FUNCTION_21();
}

void nitro::impl::nitro_lazy_eval::exec()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_9_1();
  v2 = (_QWORD *)(v1 + 144);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v1 + 184));
  v3 = (_QWORD *)v0[21];
  if (v3 == v2)
  {
    v3 = (_QWORD *)OUTLINED_FUNCTION_51();
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  OUTLINED_FUNCTION_2_1(v3, v4);
LABEL_6:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v0 + 14));
  v5 = (_QWORD *)v0[12];
  if (v5 == v0 + 9)
  {
    v5 = (_QWORD *)OUTLINED_FUNCTION_51();
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  OUTLINED_FUNCTION_2_1(v5, v6);
LABEL_11:
  OUTLINED_FUNCTION_42();
  v7 = (_QWORD *)v0[3];
  if (v7 == v0)
  {
    v8 = 4;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
    v0 = (_QWORD *)v0[3];
LABEL_15:
    OUTLINED_FUNCTION_20(*(uint64_t (**)(uint64_t))(*v0 + 8 * v8));
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_21();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  OUTLINED_FUNCTION_9_1();
  v2 = (_QWORD *)(v1 + 72);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v1 + 112));
  v3 = (_QWORD *)v0[12];
  if (v3 == v2)
  {
    v3 = (_QWORD *)OUTLINED_FUNCTION_51();
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  OUTLINED_FUNCTION_2_1(v3, v4);
LABEL_6:
  OUTLINED_FUNCTION_42();
  v5 = (_QWORD *)v0[3];
  if (v5 == v0)
  {
    v6 = 4;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
    v0 = (_QWORD *)v0[3];
LABEL_10:
    OUTLINED_FUNCTION_20(*(uint64_t (**)(uint64_t))(*v0 + 8 * v6));
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_21();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  OUTLINED_FUNCTION_9_1();
  v2 = (_QWORD *)(v1 + 32);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v1 + 72));
  v3 = (_QWORD *)v0[7];
  if (v3 == v2)
  {
    v3 = (_QWORD *)OUTLINED_FUNCTION_51();
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  OUTLINED_FUNCTION_2_1(v3, v4);
LABEL_6:
  v5 = (_QWORD *)v0[3];
  if (v5 == v0)
  {
    v6 = 4;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
    v0 = (_QWORD *)v0[3];
LABEL_10:
    OUTLINED_FUNCTION_20(*(uint64_t (**)(uint64_t))(*v0 + 8 * v6));
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_21();
}

void nitro::impl::nitro_lazy_eval::exec(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void **v3;
  void *v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v4 = (void *)OUTLINED_FUNCTION_10_3(a1, a2);
  if (!v6)
  {
    v7 = (_QWORD *)(v5 - 72);
    while (1)
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v7 + 5));
      v8 = (_QWORD *)v7[3];
      if (v7 == v8)
      {
        v8 = v7;
        v9 = 4;
      }
      else
      {
        if (!v8)
          goto LABEL_8;
        v9 = 5;
      }
      OUTLINED_FUNCTION_2_1(v8, v9);
LABEL_8:
      v10 = v7 - 9;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v7 - 4));
      v11 = (_QWORD *)*(v7 - 6);
      if (v7 - 9 == v11)
      {
        v11 = (_QWORD *)OUTLINED_FUNCTION_28();
        goto LABEL_12;
      }
      if (v11)
      {
        v12 = 5;
LABEL_12:
        OUTLINED_FUNCTION_2_1(v11, v12);
      }
      v7 -= 18;
      if (v10 == v2)
      {
        v4 = *v3;
        break;
      }
    }
  }
  OUTLINED_FUNCTION_18(v4);
  OUTLINED_FUNCTION_10();
}

void std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::vector(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void **v6;
  uint64_t v7;
  char v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v5 = (void *)OUTLINED_FUNCTION_5_0(a1, a2);
  if (!v8)
  {
    v9 = v6;
    v10 = (_QWORD *)(v7 - 72);
    while (1)
    {
      OUTLINED_FUNCTION_42();
      v11 = (_QWORD *)v10[3];
      if (v10 == v11)
      {
        v11 = (_QWORD *)OUTLINED_FUNCTION_28();
      }
      else
      {
        if (!v11)
          goto LABEL_8;
        v12 = 5;
      }
      OUTLINED_FUNCTION_2_1(v11, v12);
LABEL_8:
      OUTLINED_FUNCTION_52();
      v13 = (_QWORD *)*(v10 - 6);
      if (v4 == v13)
      {
        v13 = (_QWORD *)OUTLINED_FUNCTION_35();
        goto LABEL_12;
      }
      if (v13)
      {
        v14 = 5;
LABEL_12:
        OUTLINED_FUNCTION_2_1(v13, v14);
      }
      v10 -= 18;
      if (v4 == v2)
      {
        v5 = *v9;
        break;
      }
    }
  }
  *v3 = v2;
  OUTLINED_FUNCTION_0_2(v5);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(std::__shared_weak_count *a1)
{
  ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
  std::__shared_weak_count::__release_weak(a1);
  OUTLINED_FUNCTION_2();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  void *v5;
  char v6;

  OUTLINED_FUNCTION_9_1();
  do
    OUTLINED_FUNCTION_25();
  while (v3);
  if (v0 && v2 == 1)
  {
    v4 = *(_QWORD *)(v0 + 8);
    if (v4)
    {
      v5 = (void *)OUTLINED_FUNCTION_45();
      if (!v6)
      {
        do
          OUTLINED_FUNCTION_30();
        while (v1 != v4);
        v5 = *(void **)(v0 + 8);
      }
      OUTLINED_FUNCTION_49(v5);
    }
    OUTLINED_FUNCTION_1_0();
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_19();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;

  OUTLINED_FUNCTION_9_1();
  do
    OUTLINED_FUNCTION_25();
  while (v2);
  if (v0 && v1 == 1)
  {
    v3 = *(_QWORD *)(v0 + 8);
    if (v3)
    {
      v4 = OUTLINED_FUNCTION_44();
      if (!v6)
      {
        do
          v4 = OUTLINED_FUNCTION_17(v4);
        while (v4 != v3);
        v5 = *(void **)(v0 + 8);
      }
      *(_QWORD *)(v0 + 16) = v3;
      OUTLINED_FUNCTION_15_0(v5);
    }
    OUTLINED_FUNCTION_1_0();
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_21();
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, unint64_t *a2)
{
  void *v3;
  void *v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;

  if (a1)
  {
    v3 = (void *)a2[7];
    if (v3)
      OUTLINED_FUNCTION_43(v3);
    v4 = (void *)a2[4];
    if (v4)
      OUTLINED_FUNCTION_41(v4);
    v5 = a2[3];
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        OUTLINED_FUNCTION_8(v6);
      while (v8);
      if (!v7)
      {
        OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_47();
      }
    }
    OUTLINED_FUNCTION_16_0();
  }
  do
    v9 = __ldaxr(a2);
  while (__stlxr(v9 - 1, a2));
  return 1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  int v7;

  v2 = (void *)a1[7];
  if (v2)
    OUTLINED_FUNCTION_43(v2);
  v3 = (void *)a1[4];
  if (v3)
    OUTLINED_FUNCTION_41(v3);
  v4 = a1[3];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      OUTLINED_FUNCTION_8(v5);
    while (v7);
    if (!v6)
    {
      OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_47();
    }
  }
  OUTLINED_FUNCTION_16_0();
}

void sub_1912593A0()
{
  OUTLINED_FUNCTION_2();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  int v11;

  v7 = (void *)OUTLINED_FUNCTION_34(a1);
  if (v7)
  {
    *(_QWORD *)(v6 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(std::__shared_weak_count **)(v6 + 16);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      OUTLINED_FUNCTION_8(p_shared_owners);
    while (v11);
    if (!v10)
    {
      OUTLINED_FUNCTION_46();
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)v2 = v5;
  *(_DWORD *)(v2 + 8) = v3;
  *v1 = v4;
  OUTLINED_FUNCTION_21();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;

  v3 = OUTLINED_FUNCTION_6_2(a1);
  if (!v5)
  {
    do
      v3 = OUTLINED_FUNCTION_17(v3);
    while (v3 != v1);
    v4 = *(void **)v2;
  }
  *(_QWORD *)(v2 + 8) = v1;
  OUTLINED_FUNCTION_15_0(v4);
  OUTLINED_FUNCTION_2();
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  int v6;

  v2 = (void *)OUTLINED_FUNCTION_11_0(a1);
  if (v2)
    OUTLINED_FUNCTION_33(v2);
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      OUTLINED_FUNCTION_8(v4);
    while (v6);
    if (!v5)
    {
      OUTLINED_FUNCTION_7();
      OUTLINED_FUNCTION_12();
    }
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;
  char v6;

  v5 = (void *)OUTLINED_FUNCTION_6(a1, a2);
  if (!v6)
  {
    do
      OUTLINED_FUNCTION_5_2();
    while (v4 != v2);
    v5 = *v3;
  }
  OUTLINED_FUNCTION_18(v5);
  OUTLINED_FUNCTION_10();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(void **a1, uint64_t a2, uint64_t *a3)
{
  void *v4;
  uint64_t v7;
  void *v8;

  v4 = *a1;
  if (*a1)
  {
    v7 = *a3;
    v8 = *a1;
    if ((void *)*a3 != v4)
    {
      do
      {
        v7 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](a2 + 24, v7);
      }
      while ((void *)v7 != v4);
      v8 = *a1;
    }
    *a3 = (uint64_t)v4;
    operator delete(v8);
  }
  OUTLINED_FUNCTION_1_0();
}

{
  void *v3;
  uint64_t v6;
  void *v7;

  v3 = *a1;
  if (*a1)
  {
    v6 = *a3;
    v7 = v3;
    if ((void *)*a3 != v3)
    {
      do
        v6 = OUTLINED_FUNCTION_17(v6);
      while ((void *)v6 != v3);
      v7 = *a1;
    }
    *a3 = (uint64_t)v3;
    OUTLINED_FUNCTION_15_0(v7);
  }
  OUTLINED_FUNCTION_1_0();
}

void sub_191259520()
{
  OUTLINED_FUNCTION_21();
}

void sub_19125957C()
{
  OUTLINED_FUNCTION_10();
}

void sub_1912595E0()
{
  OUTLINED_FUNCTION_10();
}

void sub_191259630()
{
  OUTLINED_FUNCTION_2();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int v10;

  v2 = (void *)OUTLINED_FUNCTION_21_0(a1);
  if (v2)
    operator delete(v2);
  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      OUTLINED_FUNCTION_8(v4);
    while (v6);
    if (!v5)
    {
      OUTLINED_FUNCTION_32();
      OUTLINED_FUNCTION_48();
    }
  }
  v7 = *(_QWORD *)(v1 + 8);
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      OUTLINED_FUNCTION_8(v8);
    while (v10);
    if (!v9)
    {
      OUTLINED_FUNCTION_7();
      OUTLINED_FUNCTION_12();
    }
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_21();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()()
{
  uint64_t v0;

  do
  {
    OUTLINED_FUNCTION_38();
    OUTLINED_FUNCTION_50();
  }
  while (v0);
  OUTLINED_FUNCTION_2();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  char v6;
  void **v7;

  v3 = OUTLINED_FUNCTION_29(a1);
  if (!v6)
  {
    v7 = v4;
    do
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v3 - 32));
    while (v3 != v1);
    v5 = *v7;
  }
  *v2 = v1;
  OUTLINED_FUNCTION_15_0(v5);
  OUTLINED_FUNCTION_10();
}

void nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = (void *)OUTLINED_FUNCTION_10_3(a1, a2);
  if (!v5)
  {
    while (1)
    {
      OUTLINED_FUNCTION_24();
      v6 = (_QWORD *)OUTLINED_FUNCTION_39();
      if (v5)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_6:
        OUTLINED_FUNCTION_2_1(v6, v7);
      }
      OUTLINED_FUNCTION_36();
      if (v5)
      {
        v4 = *(void **)v3;
        goto LABEL_10;
      }
    }
    v6 = (_QWORD *)OUTLINED_FUNCTION_28();
    goto LABEL_6;
  }
LABEL_10:
  *(_QWORD *)(v3 + 8) = v2;
  OUTLINED_FUNCTION_0_5(v4);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(_QWORD *a1)
{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  int v7;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      OUTLINED_FUNCTION_8(p_shared_owners);
    while (v7);
    if (!v6)
    {
      OUTLINED_FUNCTION_31();
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  OUTLINED_FUNCTION_2();
}

void std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__construct_at_end<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*,std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = (_QWORD *)(a1 - 72);
  do
  {
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v3 + 5));
    v4 = (_QWORD *)v3[3];
    if (v3 == v4)
    {
      v4 = v3;
      v5 = 4;
    }
    else
    {
      if (!v4)
        goto LABEL_7;
      v5 = 5;
    }
    OUTLINED_FUNCTION_2_1(v4, v5);
LABEL_7:
    v6 = v3 - 9;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v3 - 4));
    v7 = (_QWORD *)*(v3 - 6);
    if (v3 - 9 == v7)
    {
      v7 = v3 - 9;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_12;
      v8 = 5;
    }
    OUTLINED_FUNCTION_2_1(v7, v8);
LABEL_12:
    v3 -= 18;
  }
  while (v6 != a2);
  OUTLINED_FUNCTION_10();
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(void **a1, uint64_t a2)
{
  void *v3;
  uint64_t v5;
  void *v6;

  v3 = *a1;
  if (*a1)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = v3;
    if ((void *)v5 != v3)
    {
      do
        v5 = OUTLINED_FUNCTION_17(v5);
      while ((void *)v5 != v3);
      v6 = *a1;
    }
    *(_QWORD *)(a2 + 16) = v3;
    OUTLINED_FUNCTION_15_0(v6);
  }
  OUTLINED_FUNCTION_1_0();
}

void sub_191259894()
{
  OUTLINED_FUNCTION_10();
}

void std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::vector(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  char v6;
  void **v7;

  v3 = OUTLINED_FUNCTION_29(a1);
  if (!v6)
  {
    v7 = v4;
    do
      v3 = OUTLINED_FUNCTION_17(v3);
    while (v3 != v1);
    v5 = *v7;
  }
  *v2 = v1;
  OUTLINED_FUNCTION_0_5(v5);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::LIST const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t *a1, uint64_t a2)
{
  void **v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  char v7;

  v5 = *a1;
  if (*a1)
  {
    v6 = (void *)OUTLINED_FUNCTION_53();
    if (!v7)
    {
      do
        OUTLINED_FUNCTION_5_2();
      while (v3 != v5);
      v6 = *v2;
    }
    *(_QWORD *)(a2 + 16) = v5;
    operator delete(v6);
  }
  OUTLINED_FUNCTION_1_0();
}

void sub_191259924()
{
  OUTLINED_FUNCTION_21();
}

uint64_t nitro::get_symbol_id(const std::string *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  std::string *v7;
  unint64_t v8;
  const std::string *v9;

  v2 = (_QWORD *)nitro::symmap;
  if (!nitro::symmap)
  {
    v3 = operator new();
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_DWORD *)(v3 + 32) = 1065353216;
    nitro::symmap = v3;
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)(v4 + 32) = 1065353216;
    nitro::inv_symmap = v4;
    v2 = (_QWORD *)nitro::symmap;
  }
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v2, (uint64_t)a1))
  {
    v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((_QWORD *)nitro::symmap, (uint64_t)a1);
    if (!v5)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    return v5[5];
  }
  else
  {
    v8 = *(_QWORD *)(nitro::symmap + 24);
    v9 = a1;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(nitro::symmap, (uint64_t)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v9)[5] = v8;
    v9 = (const std::string *)&v8;
    v7 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(nitro::inv_symmap, &v8, (uint64_t)&std::piecewise_construct, (uint64_t **)&v9);
    std::string::operator=(v7 + 1, a1);
    return v8;
  }
}

void nitro::get_symbol_from_id(nitro *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t ***v9;
  uint64_t **v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  __int128 v16;

  if (nitro::symmap)
  {
    v4 = nitro::inv_symmap;
    v5 = *(_QWORD *)(nitro::inv_symmap + 8);
    if (!v5)
      goto LABEL_20;
  }
  else
  {
    v6 = operator new();
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_DWORD *)(v6 + 32) = 1065353216;
    nitro::symmap = v6;
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)(v4 + 32) = 1065353216;
    nitro::inv_symmap = v4;
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5)
    {
LABEL_20:
      *(_BYTE *)(a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      return;
    }
  }
  v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = (unint64_t)this;
    if (v5 <= (unint64_t)this)
      v8 = (unint64_t)this % v5;
  }
  else
  {
    v8 = (v5 - 1) & (unint64_t)this;
  }
  v9 = *(uint64_t ****)(*(_QWORD *)v4 + 8 * v8);
  if (!v9)
    goto LABEL_20;
  v10 = *v9;
  if (!*v9)
    goto LABEL_20;
  v11 = v5 - 1;
  while (1)
  {
    v12 = (unint64_t)v10[1];
    if ((nitro *)v12 == this)
      break;
    if (v7.u32[0] > 1uLL)
    {
      if (v12 >= v5)
        v12 %= v5;
    }
    else
    {
      v12 &= v11;
    }
    if (v12 != v8)
      goto LABEL_20;
LABEL_13:
    v10 = (uint64_t **)*v10;
    if (!v10)
      goto LABEL_20;
  }
  if (v10[2] != (uint64_t *)this)
    goto LABEL_13;
  if (v7.u32[0] > 1uLL)
  {
    v13 = (unint64_t)this;
    if (v5 <= (unint64_t)this)
      v13 = (unint64_t)this % v5;
  }
  else
  {
    v13 = v11 & (unint64_t)this;
  }
  v14 = *(uint64_t **)(*(_QWORD *)v4 + 8 * v13);
  if (!v14)
LABEL_35:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  do
  {
    while (1)
    {
      v14 = (uint64_t *)*v14;
      if (!v14)
        goto LABEL_35;
      v15 = v14[1];
      if ((nitro *)v15 == this)
        break;
      if (v7.u32[0] > 1uLL)
      {
        if (v15 >= v5)
          v15 %= v5;
      }
      else
      {
        v15 &= v11;
      }
      if (v15 != v13)
        goto LABEL_35;
    }
  }
  while ((nitro *)v14[2] != this);
  if (*((char *)v14 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, (const std::string::value_type *)v14[3], v14[4]);
  }
  else
  {
    v16 = *(_OWORD *)(v14 + 3);
    *(_QWORD *)(a2 + 16) = v14[5];
    *(_OWORD *)a2 = v16;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_30;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_30:
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *i = *v25;
LABEL_55:
    *v25 = i;
    goto LABEL_56;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v24 + 8 * v4) = v13;
  if (*i)
  {
    v26 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_55;
  }
LABEL_56:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_191259F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_string_sequence(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;

  if (*(_BYTE *)a1)
    nitro::ir::parse_string_sequence(nitro::SExp const&)::$_0::operator()();
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if (v3 != v4)
  {
    v5 = 0;
    v6 = v3 + 16;
    do
    {
      v8 = v6 - 16;
      if (!*(_BYTE *)(v6 - 16))
        nitro::ir::parse_string_sequence(nitro::SExp const&)::$_1::operator()();
      if (!*(_BYTE *)(v6 - 15))
        nitro::ir::parse_string_sequence(nitro::SExp const&)::$_2::operator()();
      v9 = (__int128 *)(v6 - 8);
      if ((unint64_t)v5 < *(_QWORD *)(a2 + 16))
      {
        if (*(char *)(v6 + 15) < 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v6 - 8), *(_QWORD *)v6);
        }
        else
        {
          v7 = *v9;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 8);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
        }
        *(_QWORD *)(a2 + 8) = ++v5;
      }
      else
      {
        v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)v9);
      }
      *(_QWORD *)(a2 + 8) = v5;
      v6 += 72;
    }
    while (v8 + 72 != v4);
  }
}

void nitro::ir::parse_string_sequence(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!sexp.is_value", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 59, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 59, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19125A35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19125A3C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_string_sequence(nitro::SExp const&)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"s.is_value", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 62, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 62, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19125A700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19125A768(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_string_sequence(nitro::SExp const&)::$_2::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"s.is_string_value", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 63, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 63, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19125AAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19125AB0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::NODE>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v14;
  _BYTE *v18;
  uint64_t v20;
  int v23;
  int v24;
  int v26;
  int v27;
  uint64_t symbol_id;
  uint64_t v30;
  std::string *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  file_logger *v40;
  pthread_key_t *started;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *exception;
  _QWORD *v46;
  _QWORD *v47;
  __int128 v48;
  std::string *v49;
  uint64_t v50;
  char **v51;
  char *v52[2];
  char **v53;
  char *v54[2];
  _BYTE v55[32];
  void *v56;
  char v57;
  char v58;
  int v59;
  void *v60[2];
  char v61;
  int v62;
  void *v63[2];
  char v64;
  int v65;
  void *v66[2];
  char v67;
  int v68;
  void *v69[2];
  char v70;
  int v71;
  void *v72[2];
  char v73;
  int v74;
  void *v75[2];
  char v76;
  int v77;
  void *v78[2];
  char v79;
  int v80;
  void *v81[2];
  char v82;
  int v83;
  void *v84[2];
  char v85;
  int v86;
  void *v87[2];
  char v88;
  int v89;
  void *v90[2];
  char v91;
  int v92;
  void *__p[2];
  char v94;
  int v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v55[23] = 1;
  strcpy(v55, "+");
  *(_DWORD *)&v55[24] = 0;
  v58 = 1;
  LOWORD(v56) = 45;
  v59 = 1;
  v61 = 1;
  LOWORD(v60[0]) = 42;
  v62 = 2;
  v64 = 1;
  LOWORD(v63[0]) = 47;
  v65 = 3;
  v67 = 2;
  strcpy((char *)v66, "//");
  v68 = 4;
  v70 = 2;
  strcpy((char *)v69, "!=");
  v71 = 6;
  v73 = 2;
  strcpy((char *)v72, "==");
  v74 = 5;
  v76 = 1;
  LOWORD(v75[0]) = 60;
  v77 = 7;
  v79 = 1;
  LOWORD(v78[0]) = 62;
  v80 = 8;
  v82 = 2;
  strcpy((char *)v81, "<=");
  v83 = 9;
  v85 = 2;
  strcpy((char *)v84, ">=");
  v86 = 10;
  v88 = 2;
  strcpy((char *)v87, "&&");
  v89 = 11;
  v91 = 2;
  strcpy((char *)v90, "||");
  v92 = 12;
  v94 = 2;
  strcpy((char *)__p, "in");
  v95 = 13;
  v54[0] = 0;
  v54[1] = 0;
  v53 = v54;
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v55, (uint64_t)v55);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)&v56, (uint64_t)&v56);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v60, (uint64_t)v60);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v63, (uint64_t)v63);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v66, (uint64_t)v66);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v69, (uint64_t)v69);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v72, (uint64_t)v72);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v75, (uint64_t)v75);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v78, (uint64_t)v78);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v81, (uint64_t)v81);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v84, (uint64_t)v84);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v87, (uint64_t)v87);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)v90, (uint64_t)v90);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v53, (uint64_t *)v54, (const void **)__p, (uint64_t)__p);
  if (v94 < 0)
  {
    operator delete(__p[0]);
    if ((v91 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v88 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v91 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v90[0]);
  if ((v88 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v85 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v87[0]);
  if ((v85 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v82 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v84[0]);
  if ((v82 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v79 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v81[0]);
  if ((v79 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v76 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v78[0]);
  if ((v76 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v73 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v75[0]);
  if ((v73 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v70 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v72[0]);
  if ((v70 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v67 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v69[0]);
  if ((v67 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v64 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v66[0]);
  if ((v64 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v61 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v63[0]);
  if ((v61 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v58 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_33:
    operator delete(v56);
    if ((v55[23] & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_32:
  operator delete(v60[0]);
  if (v58 < 0)
    goto LABEL_33;
LABEL_14:
  if ((v55[23] & 0x80000000) == 0)
    goto LABEL_15;
LABEL_34:
  operator delete(*(void **)v55);
LABEL_15:
  *(_WORD *)&v55[23] = 11521;
  strcpy(v55, "!");
  v57 = 1;
  v55[25] = 0;
  v52[0] = 0;
  v52[1] = 0;
  v51 = v52;
  std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)&v51, (uint64_t *)v52, (const void **)v55, (uint64_t)v55);
  std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)&v51, (uint64_t *)v52, (const void **)&v55[24], (uint64_t)&v55[24]);
  if (v57 < 0)
  {
    operator delete(*(void **)&v55[24]);
    if ((v55[23] & 0x80000000) == 0)
    {
LABEL_17:
      if (*(_BYTE *)a1)
        goto LABEL_18;
LABEL_37:
      v4 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)(a1 + 56) == v4)
      {
        if (*((int *)global_logger() + 169) <= 6)
        {
          v40 = (file_logger *)global_logger();
          started = (pthread_key_t *)file_logger::start_stream(v40, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 122, 1);
          v42 = pthread_getspecific(started[74]);
          if (v42 && *((_BYTE *)v42 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42 + 2, (uint64_t)"Check failed: ", 14);
          v43 = pthread_getspecific(started[74]);
          if (v43 && *((_BYTE *)v43 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43 + 2, (uint64_t)"false", 5);
          v44 = pthread_getspecific(started[74]);
          if (v44 && *((_BYTE *)v44 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44 + 2, (uint64_t)":\n", 2);
            file_logger::stream_flush((file_logger *)started);
          }
        }
        log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 122, "Cannot parse empty SExp node", v37, v38, v39, v48);
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "assertion failure";
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
      if (!*(_BYTE *)(v4 + 1))
        nitro::ir::parse<nitro::ir::NODE>(nitro::SExp const&)::$_2::operator()();
      if (*(char *)(v4 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v55, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
      }
      else
      {
        v5 = *(_OWORD *)(v4 + 8);
        *(_QWORD *)&v55[16] = *(_QWORD *)(v4 + 24);
        *(_OWORD *)v55 = v5;
      }
      if ((v55[23] & 0x80000000) != 0)
      {
        v14 = *(_QWORD *)&v55[8];
        if (*(_QWORD *)&v55[8] == 5)
        {
          if (**(_DWORD **)v55 == 1430668612 && *(_BYTE *)(*(_QWORD *)v55 + 4) == 78)
          {
LABEL_122:
            nitro::ir::parse<nitro::ir::DEFUN>(a1, &v48);
            goto LABEL_193;
          }
          v14 = *(_QWORD *)&v55[8];
        }
        else if (*(_QWORD *)&v55[8] == 6
               && **(_DWORD **)v55 == 1447445828
               && *(_WORD *)(*(_QWORD *)v55 + 4) == 21057)
        {
LABEL_113:
          nitro::ir::parse<nitro::ir::DEFVAR>(a1, (uint64_t *)&v48);
          goto LABEL_193;
        }
        if (v14 == 12)
        {
          if (**(_QWORD **)v55 == 0x45424D454D464544 && *(_DWORD *)(*(_QWORD *)v55 + 8) == 1314211410)
          {
LABEL_124:
            nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(a1, &v48);
            goto LABEL_193;
          }
          v14 = *(_QWORD *)&v55[8];
        }
        if (v14 == 8)
        {
          if (**(_QWORD **)v55 == 0x5353414C43464544)
          {
LABEL_121:
            nitro::ir::parse<nitro::ir::DEFCLASS>(a1, (uint64_t *)&v48);
            goto LABEL_193;
          }
          v14 = *(_QWORD *)&v55[8];
        }
        if (v14 != 6)
          goto LABEL_146;
        v18 = *(_BYTE **)v55;
      }
      else
      {
        switch(v55[23])
        {
          case 5:
            if (*(_DWORD *)v55 != 1430668612 || v55[4] != 78)
              goto LABEL_146;
            goto LABEL_122;
          case 6:
            if (*(_DWORD *)v55 == 1447445828 && *(unsigned __int16 *)&v55[4] == 21057)
              goto LABEL_113;
            goto LABEL_141;
          case 8:
            goto LABEL_120;
          case 0xC:
            if (*(_QWORD *)v55 == 0x45424D454D464544 && *(_DWORD *)&v55[8] == 1314211410)
              goto LABEL_124;
            if (v55[23] == 6)
              goto LABEL_141;
            if (v55[23] != 8)
              goto LABEL_146;
LABEL_120:
            if (*(_QWORD *)v55 == 0x5353414C43464544)
              goto LABEL_121;
            if (v55[23] != 6)
              goto LABEL_146;
LABEL_141:
            v18 = v55;
            break;
          default:
            goto LABEL_146;
        }
      }
      v26 = *(_DWORD *)v18;
      v27 = *((unsigned __int16 *)v18 + 2);
      if (v26 == 1112360269 && v27 == 21061)
      {
        nitro::ir::parse<nitro::ir::MEMBER>(a1, &v48);
        goto LABEL_193;
      }
LABEL_146:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "CALL"))
      {
        nitro::ir::parse<nitro::ir::CALL>(a1, (uint64_t *)&v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "MAKE_OBJECT"))
      {
        nitro::ir::parse<nitro::ir::MAKEOBJECT>(a1, (uint64_t *)&v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "WHILE"))
      {
        nitro::ir::parse<nitro::ir::WHILE>(a1, (uint64_t *)&v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "FOR"))
      {
        nitro::ir::parse<nitro::ir::FOR>(a1, (uint64_t *)&v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "FOREACH"))
      {
        nitro::ir::parse<nitro::ir::FOREACH>(a1, (uint64_t *)&v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "IF"))
      {
        nitro::ir::parse<nitro::ir::IF>(a1, (uint64_t *)&v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "INDEX_GET"))
      {
        nitro::ir::parse<nitro::ir::INDEXGET>(a1, &v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "INDEX_PUT"))
      {
        nitro::ir::parse<nitro::ir::INDEXPUT>(a1, &v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "HINT"))
      {
        nitro::ir::parse<nitro::ir::HINT>(a1, (uint64_t *)&v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "ASSIGN"))
      {
        nitro::ir::parse<nitro::ir::ASSIGN>(a1, &v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "LIST"))
      {
        nitro::ir::parse<nitro::ir::LIST>(a1, (uint64_t *)&v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "DICT"))
      {
        nitro::ir::parse<nitro::ir::DICT>(a1, (uint64_t *)&v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "TUPLE"))
      {
        nitro::ir::parse<nitro::ir::TUPLE>(a1, (uint64_t *)&v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "RETURN"))
      {
        nitro::ir::parse<nitro::ir::RETURN>(a1, &v48);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v55, "TUPLE_GET"))
      {
        nitro::ir::parse<nitro::ir::TUPLEGET>(a1, v30, v31, v32, v33, v34, v35, v36, v48, *((uint64_t *)&v48 + 1), v49);
      }
      else if (std::set<std::string>::count[abi:ne180100]((uint64_t)&v51, (const void **)v55)
             && *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48) == 144)
      {
        nitro::ir::parse<nitro::ir::UNARYOPERATOR>(a1, &v48);
      }
      else
      {
        if (!std::set<std::string>::count[abi:ne180100]((uint64_t)&v53, (const void **)v55)
          || *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48) != 216)
        {
          v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Unparseable: ", 13);
          v47 = nitro::operator<<(v46, a1);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v47);
          nitro::ir::parse<nitro::ir::NODE>(nitro::SExp const&)::$_3::operator()();
        }
        nitro::ir::parse<nitro::ir::BINARYOPERATOR>(a1, (uint64_t *)&v48);
      }
LABEL_193:
      *a2 = v48;
      if ((v55[23] & 0x80000000) == 0)
        goto LABEL_163;
      goto LABEL_194;
    }
  }
  else if ((v55[23] & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(*(void **)v55);
  if (!*(_BYTE *)a1)
    goto LABEL_37;
LABEL_18:
  if (!*(_BYTE *)(a1 + 1))
  {
    v6 = operator new();
    *(_QWORD *)v6 = off_1E2D5C428;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 0;
    if (v6 + 8 != a1 + 32)
    {
      v7 = *(unint64_t **)(a1 + 32);
      *(_QWORD *)(v6 + 8) = v7;
      v8 = *(unsigned __int8 *)(a1 + 40);
      *(_BYTE *)(v6 + 16) = v8;
      if ((v8 - 2) < 4 || v8 == 9)
      {
        do
          v9 = __ldaxr(v7);
        while (__stlxr(v9 + 1, v7));
      }
    }
    *a2 = v6;
    goto LABEL_163;
  }
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v55, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)v55 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)&v55[16] = *(_QWORD *)(a1 + 24);
  }
  if ((v55[23] & 0x80000000) != 0)
  {
    v11 = *(_QWORD *)&v55[8];
    v10 = *(_BYTE **)v55;
    if (*(_QWORD *)&v55[8] == 4 && **(_DWORD **)v55 == 1163219540)
      goto LABEL_106;
    if (*(_QWORD *)&v55[8] == 5)
    {
      if (**(_DWORD **)v55 == 1397506374 && *(_BYTE *)(*(_QWORD *)v55 + 4) == 69)
      {
LABEL_107:
        v20 = operator new();
        *(_BYTE *)(v20 + 16) = 0;
        *(_QWORD *)v20 = off_1E2D5C428;
        *(_QWORD *)(v20 + 8) = 0;
        goto LABEL_161;
      }
      v11 = *(_QWORD *)&v55[8];
      v10 = *(_BYTE **)v55;
    }
    if (v11 != 4)
    {
      if (v11 == 5)
        goto LABEL_129;
LABEL_63:
      if (v11 != 8)
        goto LABEL_157;
LABEL_64:
      if (*(_QWORD *)v10 == 0x45554E49544E4F43)
      {
LABEL_123:
        v20 = operator new();
        *(_QWORD *)v20 = off_1E2D5C628;
        goto LABEL_161;
      }
      if ((v55[23] & 0x80) == 0)
        goto LABEL_134;
      if (*v10 == 34)
      {
        v11 = 8;
        goto LABEL_136;
      }
LABEL_160:
      symbol_id = nitro::get_symbol_id((const std::string *)v55);
      v20 = operator new();
      *(_QWORD *)v20 = off_1E2D5C5A8;
      *(_QWORD *)(v20 + 8) = symbol_id;
      goto LABEL_161;
    }
  }
  else
  {
    if (v55[23] != 4)
    {
      if (v55[23] != 5)
      {
        if (v55[23] != 8 || *(_QWORD *)v55 != 0x45554E49544E4F43)
        {
LABEL_134:
          if (v55[0] == 34)
          {
LABEL_135:
            v11 = v55[23];
            goto LABEL_136;
          }
          goto LABEL_160;
        }
        goto LABEL_123;
      }
      if (*(_DWORD *)v55 != 1397506374 || v55[4] != 69)
      {
        v10 = v55;
        goto LABEL_129;
      }
      goto LABEL_107;
    }
    if (*(_DWORD *)v55 == 1163219540)
    {
LABEL_106:
      v20 = operator new();
      *(_BYTE *)(v20 + 16) = 0;
      *(_QWORD *)v20 = off_1E2D5C428;
      *(_QWORD *)(v20 + 8) = 1;
LABEL_161:
      *a2 = v20;
LABEL_162:
      if ((v55[23] & 0x80000000) == 0)
        goto LABEL_163;
LABEL_194:
      operator delete(*(void **)v55);
      goto LABEL_163;
    }
    v10 = v55;
  }
  if (*(_DWORD *)v10 == 1397311572)
  {
    v20 = operator new();
    *(_QWORD *)v20 = off_1E2D5C328;
    goto LABEL_161;
  }
  if ((v55[23] & 0x80) == 0)
    goto LABEL_134;
  v11 = *(_QWORD *)&v55[8];
  v10 = *(_BYTE **)v55;
  if (*(_QWORD *)&v55[8] != 5)
    goto LABEL_63;
LABEL_129:
  v23 = *(_DWORD *)v10;
  v24 = v10[4];
  if (v23 == 1095062082 && v24 == 75)
  {
    v20 = operator new();
    *(_QWORD *)v20 = off_1E2D5C368;
    goto LABEL_161;
  }
  if ((v55[23] & 0x80) == 0)
    goto LABEL_134;
  v11 = *(_QWORD *)&v55[8];
  v10 = *(_BYTE **)v55;
  if (*(_QWORD *)&v55[8] == 8)
    goto LABEL_64;
LABEL_157:
  if (*v10 != 34)
    goto LABEL_160;
  if ((v55[23] & 0x80) == 0)
    goto LABEL_135;
LABEL_136:
  std::string::substr[abi:ne180100](v55, 1uLL, v11 - 2, &v48);
  std::make_unique[abi:ne180100]<nitro::ir::VALUE,std::string>(&v48, &v50);
  *a2 = v50;
  v50 = 0;
  if ((SHIBYTE(v49) & 0x80000000) == 0)
    goto LABEL_162;
  operator delete((void *)v48);
  if ((v55[23] & 0x80000000) != 0)
    goto LABEL_194;
LABEL_163:
  std::__tree<std::string>::destroy((uint64_t)&v51, v52[0]);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy((uint64_t)&v53, v54[0]);
}

void sub_19125B9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy((uint64_t)&a13, (char *)a14);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy((uint64_t)&a16, (char *)a17);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<nitro::ir::VALUE,std::string>@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = off_1E2D5C428;
  result = nitro::flexible_type::flexible_type<std::string>((uint64_t)(v4 + 1), a1);
  *a2 = v4;
  return result;
}

void sub_19125BC94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10A3C40D350F95CLL);
  _Unwind_Resume(a1);
}

_QWORD *std::string::substr[abi:ne180100]@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  unint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = result;
  if (*((char *)result + 23) < 0)
  {
    v7 = result[1];
    if (v7 < a2)
      goto LABEL_18;
    v5 = (_QWORD *)*result;
  }
  else
  {
    v7 = *((unsigned __int8 *)result + 23);
    if (v7 < a2)
LABEL_18:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v8 = v7 - a2;
  if (v8 >= a3)
    v9 = a3;
  else
    v9 = v8;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9 >= 0x17)
  {
    v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v10 = v9 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    a4[1] = v9;
    a4[2] = v11 | 0x8000000000000000;
    *a4 = v12;
    a4 = v12;
  }
  else
  {
    *((_BYTE *)a4 + 23) = v9;
    if (!v9)
      goto LABEL_17;
  }
  result = memmove(a4, (char *)v5 + a2, v9);
LABEL_17:
  *((_BYTE *)a4 + v9) = 0;
  return result;
}

void nitro::ir::parse<nitro::ir::NODE>(nitro::SExp const&)::$_2::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children[0].is_string_value", 32);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 125, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 125, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19125C0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19125C110(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::ir::parse<nitro::ir::DEFVAR>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  std::string::size_type size;
  uint64_t v8;
  uint64_t symbol_id;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  std::string __s1;
  unsigned int v15;
  uint64_t *__s2[2];
  char v17;
  const char *v18;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  __s1.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 216)
  {
    __s2[0] = (uint64_t *)&__s1;
    nitro::ir::parse<nitro::ir::DEFVAR>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(v3 + 8);
    __s1.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v6;
  }
  v18 = "DEFVAR";
  v17 = 6;
  strcpy((char *)__s2, "DEFVAR");
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  if (size != 6)
    goto LABEL_22;
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, __s2, __s1.__r_.__value_.__l.__size_))
      goto LABEL_22;
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
  {
    v8 = 0;
    while (__s1.__r_.__value_.__s.__data_[v8] == *((unsigned __int8 *)__s2 + v8))
    {
      if (HIBYTE(__s1.__r_.__value_.__r.__words[2]) == ++v8)
        goto LABEL_17;
    }
LABEL_22:
    __s2[0] = (uint64_t *)&__s1;
    __s2[1] = (uint64_t *)&v18;
    nitro::ir::parse<nitro::ir::DEFVAR>(nitro::SExp const&)::$_1::operator()(__s2);
  }
LABEL_17:
  symbol_id = nitro::get_symbol_id((const std::string *)(*(_QWORD *)(a1 + 48) + 80));
  nitro::ir::parse_type((nitro::ir *)(*(_QWORD *)(a1 + 48) + 144), (uint64_t)&__s1);
  result = operator new();
  v11 = result;
  *(_QWORD *)result = off_1E2D5C4E8;
  *(_QWORD *)(result + 8) = symbol_id;
  *(_BYTE *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = -1;
  v12 = v15;
  if (v15 == -1)
  {
    *a2 = result;
  }
  else
  {
    result = ((uint64_t (*)(const char **, uint64_t, std::string *))off_1E2DD1940[v15])(&v18, result + 16, &__s1);
    *(_DWORD *)(v11 + 48) = v12;
    v13 = v15;
    *a2 = v11;
    if ((_DWORD)v13 != -1)
      return ((uint64_t (*)(uint64_t **, std::string *))off_1E2DD1908[v13])(__s2, &__s1);
  }
  return result;
}

void sub_19125C330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v18 = *(unsigned int *)(v15 + 48);
  if ((_DWORD)v18 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD1908[v18])(&a15, v16);
  *(_DWORD *)(v15 + 48) = -1;
  MEMORY[0x19401CD90](v15, 0x10B3C40F12CF9BDLL);
  nitro::variable_type::~variable_type((nitro::variable_type *)&a9);
  _Unwind_Resume(a1);
}

void sub_19125C394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse<nitro::ir::DEFUN>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  std::string::size_type size;
  uint64_t v8;
  const nitro::SExp *v9;
  std::string *v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  void *v26;
  std::string::size_type v27;
  uint64_t v28;
  void *__p;
  _QWORD *v30;
  void *v31;
  char *v32;
  char *v33;
  std::string v34;
  _BYTE v35[32];
  int v36;
  uint64_t symbol_id;
  std::string *__s2;
  std::string *v39;
  char v40;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  v34.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 360)
  {
    __s2 = &v34;
    nitro::ir::parse<nitro::ir::DEFUN>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(v3 + 8);
    v34.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v6;
  }
  v31 = "DEFUN";
  v40 = 5;
  strcpy((char *)&__s2, "DEFUN");
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  else
    size = v34.__r_.__value_.__l.__size_;
  if (size != 5)
    goto LABEL_50;
  if ((*((_BYTE *)&v34.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v34.__r_.__value_.__l.__data_, &__s2, v34.__r_.__value_.__l.__size_))
      goto LABEL_50;
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  else if (*((_BYTE *)&v34.__r_.__value_.__s + 23))
  {
    v8 = 0;
    while (v34.__r_.__value_.__s.__data_[v8] == *((unsigned __int8 *)&__s2 + v8))
    {
      if (HIBYTE(v34.__r_.__value_.__r.__words[2]) == ++v8)
        goto LABEL_17;
    }
LABEL_50:
    __s2 = &v34;
    v39 = (std::string *)&v31;
    nitro::ir::parse<nitro::ir::DEFUN>(nitro::SExp const&)::$_1::operator()((uint64_t **)&__s2);
  }
LABEL_17:
  symbol_id = 0;
  symbol_id = nitro::get_symbol_id((const std::string *)(*(_QWORD *)(a1 + 48) + 80));
  nitro::ir::parse_function_type((nitro::ir *)(*(_QWORD *)(a1 + 48) + 144), v9, (uint64_t)&v34);
  nitro::ir::parse_string_sequence(*(_QWORD *)(a1 + 48) + 216, (uint64_t)&__s2);
  v10 = __s2;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  if (v39 != __s2)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)__s2) >> 3);
    if (v11 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = 0x5555555555555558 * (((char *)v39 - (char *)__s2) >> 3);
    v31 = operator new(v12);
    v33 = (char *)v31 + 8 * v11;
    bzero(v31, 8 * v11);
    v13 = 0;
    v14 = 0;
    v32 = (char *)v31 + v12;
    do
    {
      *((_QWORD *)v31 + v14++) = nitro::get_symbol_id(&v10[v13]);
      v10 = __s2;
      ++v13;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)__s2) >> 3));
  }
  nitro::ir::parse_sequence<nitro::ir::NODE>((_QWORD *)(*(_QWORD *)(a1 + 48) + 288), &__p);
  v15 = (_QWORD *)operator new();
  *v15 = off_1E2D5C3A8;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJmNS_6vectorIN5nitro13variable_typeENS_9allocatorIS5_EEEES5_NS3_ImNS6_ImEEEENS3_INS_10unique_ptrINS4_2ir4NODEENS_14default_deleteISD_EEEENS6_ISG_EEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4EEJmS8_S5_SA_SI_EJEJEJRmRS8_RS5_RSA_SI_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSQ_IJDpT2_EEEDpOT3_((uint64_t)(v15 + 1), &symbol_id, (uint64_t *)&v34, (uint64_t)v35, (uint64_t)&v31, (uint64_t)&__p);
  *a2 = v15;
  v16 = __p;
  if (__p)
  {
    v17 = v30;
    v18 = __p;
    if (v30 != __p)
    {
      do
      {
        v20 = *--v17;
        v19 = v20;
        *v17 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
      }
      while (v17 != v16);
      v18 = __p;
    }
    v30 = v16;
    operator delete(v18);
  }
  if (v31)
  {
    v32 = (char *)v31;
    operator delete(v31);
  }
  v21 = __s2;
  if (__s2)
  {
    v22 = v39;
    v23 = __s2;
    if (v39 != __s2)
    {
      do
      {
        if (SHIBYTE(v22[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22[-1].__r_.__value_.__l.__data_);
        --v22;
      }
      while (v22 != v21);
      v23 = __s2;
    }
    v39 = v21;
    operator delete(v23);
  }
  if (v36 != -1)
    ((void (*)(std::string **, _BYTE *))off_1E2DD1908[v36])(&__s2, v35);
  v36 = -1;
  v24 = v34.__r_.__value_.__r.__words[0];
  if (v34.__r_.__value_.__r.__words[0])
  {
    v25 = v34.__r_.__value_.__l.__size_;
    v26 = (void *)v34.__r_.__value_.__r.__words[0];
    if (v34.__r_.__value_.__l.__size_ != v34.__r_.__value_.__r.__words[0])
    {
      do
      {
        v27 = v25 - 40;
        v28 = *(unsigned int *)(v25 - 8);
        if ((_DWORD)v28 != -1)
          ((void (*)(std::string **, std::string::size_type))off_1E2DD1908[v28])(&__s2, v25 - 40);
        *(_DWORD *)(v25 - 8) = -1;
        v25 -= 40;
      }
      while (v27 != v24);
      v26 = (void *)v34.__r_.__value_.__r.__words[0];
    }
    v34.__r_.__value_.__l.__size_ = v24;
    operator delete(v26);
  }
}

void sub_19125C764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x19401CD90](v15, 0x10B3C40FEA5DBC3);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v16 - 88));
  std::pair<std::vector<nitro::variable_type>,nitro::variable_type>::~pair(&a15);
  _Unwind_Resume(a1);
}

void sub_19125C7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  std::string::size_type size;
  uint64_t v8;
  const nitro::SExp *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  void *v26;
  std::string::size_type v27;
  uint64_t v28;
  void *__p;
  _QWORD *v30;
  void *v31;
  char *v32;
  char *v33;
  std::string v34;
  _BYTE v35[32];
  int v36;
  uint64_t symbol_id;
  __int128 __s2;
  char v39;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  v34.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 360)
  {
    *(_QWORD *)&__s2 = &v34;
    nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(v3 + 8);
    v34.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v6;
  }
  v31 = "DEFMEMBERFUN";
  v39 = 12;
  strcpy((char *)&__s2, "DEFMEMBERFUN");
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  else
    size = v34.__r_.__value_.__l.__size_;
  if (size != 12)
    goto LABEL_50;
  if ((*((_BYTE *)&v34.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v34.__r_.__value_.__l.__data_, &__s2, v34.__r_.__value_.__l.__size_))
      goto LABEL_50;
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  else if (*((_BYTE *)&v34.__r_.__value_.__s + 23))
  {
    v8 = 0;
    while (v34.__r_.__value_.__s.__data_[v8] == *((unsigned __int8 *)&__s2 + v8))
    {
      if (HIBYTE(v34.__r_.__value_.__r.__words[2]) == ++v8)
        goto LABEL_17;
    }
LABEL_50:
    *(_QWORD *)&__s2 = &v34;
    *((_QWORD *)&__s2 + 1) = &v31;
    nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::$_1::operator()((uint64_t **)&__s2);
  }
LABEL_17:
  symbol_id = 0;
  symbol_id = nitro::get_symbol_id((const std::string *)(*(_QWORD *)(a1 + 48) + 80));
  nitro::ir::parse_function_type((nitro::ir *)(*(_QWORD *)(a1 + 48) + 144), v9, (uint64_t)&v34);
  nitro::ir::parse_string_sequence(*(_QWORD *)(a1 + 48) + 216, (uint64_t)&__s2);
  v10 = __s2;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  if (*((_QWORD *)&__s2 + 1) != (_QWORD)__s2)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__s2 + 1) - __s2) >> 3);
    if (v11 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = 0x5555555555555558 * ((uint64_t)(*((_QWORD *)&__s2 + 1) - __s2) >> 3);
    v31 = operator new(v12);
    v33 = (char *)v31 + 8 * v11;
    bzero(v31, 8 * v11);
    v13 = 0;
    v14 = 0;
    v32 = (char *)v31 + v12;
    do
    {
      *((_QWORD *)v31 + v14++) = nitro::get_symbol_id((const std::string *)(v10 + v13));
      v10 = __s2;
      v13 += 24;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&__s2 + 1) - __s2) >> 3));
  }
  nitro::ir::parse_sequence<nitro::ir::NODE>((_QWORD *)(*(_QWORD *)(a1 + 48) + 288), &__p);
  v15 = (_QWORD *)operator new();
  *v15 = off_1E2D5C0E8;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJmNS_6vectorIN5nitro13variable_typeENS_9allocatorIS5_EEEES5_NS3_ImNS6_ImEEEENS3_INS_10unique_ptrINS4_2ir4NODEENS_14default_deleteISD_EEEENS6_ISG_EEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4EEJmS8_S5_SA_SI_EJEJEJRmRS8_RS5_RSA_SI_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSQ_IJDpT2_EEEDpOT3_((uint64_t)(v15 + 1), &symbol_id, (uint64_t *)&v34, (uint64_t)v35, (uint64_t)&v31, (uint64_t)&__p);
  *a2 = v15;
  v16 = __p;
  if (__p)
  {
    v17 = v30;
    v18 = __p;
    if (v30 != __p)
    {
      do
      {
        v20 = *--v17;
        v19 = v20;
        *v17 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
      }
      while (v17 != v16);
      v18 = __p;
    }
    v30 = v16;
    operator delete(v18);
  }
  if (v31)
  {
    v32 = (char *)v31;
    operator delete(v31);
  }
  v21 = __s2;
  if ((_QWORD)__s2)
  {
    v22 = *((_QWORD *)&__s2 + 1);
    v23 = (void *)__s2;
    if (*((_QWORD *)&__s2 + 1) != (_QWORD)__s2)
    {
      do
      {
        if (*(char *)(v22 - 1) < 0)
          operator delete(*(void **)(v22 - 24));
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = (void *)__s2;
    }
    *((_QWORD *)&__s2 + 1) = v21;
    operator delete(v23);
  }
  if (v36 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E2DD1908[v36])(&__s2, v35);
  v36 = -1;
  v24 = v34.__r_.__value_.__r.__words[0];
  if (v34.__r_.__value_.__r.__words[0])
  {
    v25 = v34.__r_.__value_.__l.__size_;
    v26 = (void *)v34.__r_.__value_.__r.__words[0];
    if (v34.__r_.__value_.__l.__size_ != v34.__r_.__value_.__r.__words[0])
    {
      do
      {
        v27 = v25 - 40;
        v28 = *(unsigned int *)(v25 - 8);
        if ((_DWORD)v28 != -1)
          ((void (*)(__int128 *, std::string::size_type))off_1E2DD1908[v28])(&__s2, v25 - 40);
        *(_DWORD *)(v25 - 8) = -1;
        v25 -= 40;
      }
      while (v27 != v24);
      v26 = (void *)v34.__r_.__value_.__r.__words[0];
    }
    v34.__r_.__value_.__l.__size_ = v24;
    operator delete(v26);
  }
}

void sub_19125CBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;

  MEMORY[0x19401CD90](v15, 0x10B3C40FEA5DBC3);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v16 - 88));
  std::pair<std::vector<nitro::variable_type>,nitro::variable_type>::~pair(&a15);
  _Unwind_Resume(a1);
}

void sub_19125CC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse<nitro::ir::DEFCLASS>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  std::string::size_type size;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  __int128 __s2;
  uint64_t v15;
  std::string v16;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  v16.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 288)
  {
    *(_QWORD *)&__s2 = &v16;
    nitro::ir::parse<nitro::ir::DEFCLASS>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(v3 + 8);
    v16.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)&v12 = "DEFCLASS";
  HIBYTE(v15) = 8;
  strcpy((char *)&__s2, "DEFCLASS");
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    size = v16.__r_.__value_.__l.__size_;
  if (size != 8)
    goto LABEL_26;
  if ((*((_BYTE *)&v16.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v16.__r_.__value_.__l.__data_, &__s2, v16.__r_.__value_.__l.__size_))
      goto LABEL_26;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else if (*((_BYTE *)&v16.__r_.__value_.__s + 23))
  {
    v8 = 0;
    while (v16.__r_.__value_.__s.__data_[v8] == *((unsigned __int8 *)&__s2 + v8))
    {
      if (HIBYTE(v16.__r_.__value_.__r.__words[2]) == ++v8)
        goto LABEL_17;
    }
LABEL_26:
    *(_QWORD *)&__s2 = &v16;
    *((_QWORD *)&__s2 + 1) = &v12;
    nitro::ir::parse<nitro::ir::DEFCLASS>(nitro::SExp const&)::$_1::operator()((uint64_t **)&__s2);
  }
LABEL_17:
  v9 = *(_QWORD *)(a1 + 48);
  if (*(char *)(v9 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v9 + 80), *(_QWORD *)(v9 + 88));
    v9 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v16 = *(std::string *)(v9 + 80);
  }
  nitro::ir::parse_sequence<nitro::ir::DEFVAR>((_QWORD *)(v9 + 144), &__s2);
  nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>((_QWORD *)(*(_QWORD *)(a1 + 48) + 216), &v12);
  v10 = operator new();
  *(_QWORD *)v10 = off_1E2D5C668;
  v11 = (std::string *)(v10 + 8);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    *(_QWORD *)(v10 + 24) = *((_QWORD *)&v16.__r_.__value_.__l + 2);
  }
  *(_OWORD *)(v10 + 32) = __s2;
  *(_QWORD *)(v10 + 48) = v15;
  *(_OWORD *)(v10 + 56) = v12;
  *(_QWORD *)(v10 + 72) = v13;
  *a2 = v10;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

_QWORD *nitro::ir::parse<nitro::ir::MEMBER>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  std::string::size_type size;
  uint64_t v8;
  uint64_t v9;
  uint64_t symbol_id;
  _QWORD *result;
  std::string::size_type v12;
  uint64_t *v13[2];
  char v14;
  const char *v15;
  std::string v16;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  v16.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 216)
  {
    v13[0] = (uint64_t *)&v16;
    nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(v3 + 8);
    v16.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
  }
  v15 = "MEMBER";
  v14 = 6;
  strcpy((char *)v13, "MEMBER");
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    size = v16.__r_.__value_.__l.__size_;
  if (size != 6)
    goto LABEL_19;
  if ((*((_BYTE *)&v16.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v16.__r_.__value_.__l.__data_, v13, v16.__r_.__value_.__l.__size_))
      goto LABEL_19;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else if (*((_BYTE *)&v16.__r_.__value_.__s + 23))
  {
    v8 = 0;
    while (v16.__r_.__value_.__s.__data_[v8] == *((unsigned __int8 *)v13 + v8))
    {
      if (HIBYTE(v16.__r_.__value_.__r.__words[2]) == ++v8)
        goto LABEL_17;
    }
LABEL_19:
    v13[0] = (uint64_t *)&v16;
    v13[1] = (uint64_t *)&v15;
    nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_1::operator()(v13);
  }
LABEL_17:
  nitro::ir::parse<nitro::ir::NODE>(&v16, *(_QWORD *)(a1 + 48) + 72);
  v9 = *(_QWORD *)(a1 + 48);
  if (!*(_BYTE *)(v9 + 145))
    nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_2::operator()();
  symbol_id = nitro::get_symbol_id((const std::string *)(v9 + 152));
  result = (_QWORD *)operator new();
  v12 = v16.__r_.__value_.__r.__words[0];
  *result = off_1E2D5C528;
  result[1] = v12;
  result[2] = symbol_id;
  *a2 = result;
  return result;
}

void sub_19125D034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double nitro::ir::parse<nitro::ir::CALL>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t symbol_id;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  *(_QWORD *)&v10 = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 216)
  {
    v12 = &v10;
    nitro::ir::parse<nitro::ir::CALL>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(_BYTE *)(v3 + 73))
  {
    symbol_id = nitro::get_symbol_id((const std::string *)(v3 + 80));
    v7 = 0;
  }
  else
  {
    nitro::ir::parse<nitro::ir::MEMBER>(v3 + 72, &v10);
    v7 = v10;
    symbol_id = -1;
  }
  nitro::ir::parse_sequence<nitro::ir::NODE>((_QWORD *)(*(_QWORD *)(a1 + 48) + 144), &v10);
  v8 = operator new();
  *(_QWORD *)v8 = off_1E2D5C228;
  *(_QWORD *)(v8 + 8) = symbol_id;
  *(_QWORD *)(v8 + 16) = v7;
  result = *(double *)&v10;
  *(_OWORD *)(v8 + 24) = v10;
  *(_QWORD *)(v8 + 40) = v11;
  *a2 = v8;
  return result;
}

void nitro::ir::parse<nitro::ir::MAKEOBJECT>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  std::string *v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  std::string v11;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  v11.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 216)
  {
    *(_QWORD *)&v9 = &v11;
    nitro::ir::parse<nitro::ir::MAKEOBJECT>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v3 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v3 + 80), *(_QWORD *)(v3 + 88));
    v3 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v11 = *(std::string *)(v3 + 80);
  }
  nitro::ir::parse_sequence<nitro::ir::NODE>((_QWORD *)(v3 + 144), &v9);
  v6 = operator new();
  *(_QWORD *)v6 = off_1E2D5C0A8;
  v7 = (std::string *)(v6 + 8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    v8 = SHIBYTE(v11.__r_.__value_.__r.__words[2]);
    *(_OWORD *)(v6 + 32) = v9;
    *(_QWORD *)(v6 + 48) = v10;
    *a2 = v6;
    if (v8 < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
    *(_QWORD *)(v6 + 24) = *((_QWORD *)&v11.__r_.__value_.__l + 2);
    *(_OWORD *)(v6 + 32) = v9;
    *(_QWORD *)(v6 + 48) = v10;
    *a2 = v6;
  }
}

double nitro::ir::parse<nitro::ir::WHILE>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 *v7;
  double result;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  *(_QWORD *)&v9 = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 216)
  {
    v11 = &v9;
    nitro::ir::parse<nitro::ir::WHILE>(nitro::SExp const&)::$_0::operator()();
  }
  nitro::ir::parse<nitro::ir::NODE>(&v11, v3 + 72);
  nitro::ir::parse_sequence<nitro::ir::NODE>((_QWORD *)(*(_QWORD *)(a1 + 48) + 144), &v9);
  v6 = operator new();
  v7 = v11;
  *(_QWORD *)v6 = off_1E2D5C468;
  *(_QWORD *)(v6 + 8) = v7;
  result = *(double *)&v9;
  *(_OWORD *)(v6 + 16) = v9;
  *(_QWORD *)(v6 + 32) = v10;
  *a2 = v6;
  return result;
}

double nitro::ir::parse<nitro::ir::FOR>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  double result;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  *(_QWORD *)&v10 = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 360)
  {
    v14 = &v10;
    nitro::ir::parse<nitro::ir::FOR>(nitro::SExp const&)::$_0::operator()();
  }
  nitro::ir::parse<nitro::ir::NODE>(&v14, v3 + 72);
  nitro::ir::parse<nitro::ir::NODE>(&v13, *(_QWORD *)(a1 + 48) + 144);
  nitro::ir::parse<nitro::ir::NODE>(&v12, *(_QWORD *)(a1 + 48) + 216);
  nitro::ir::parse_sequence<nitro::ir::NODE>((_QWORD *)(*(_QWORD *)(a1 + 48) + 288), &v10);
  v6 = operator new();
  v7 = v14;
  *(_QWORD *)v6 = off_1E2D5C1E8;
  *(_QWORD *)(v6 + 8) = v7;
  v8 = v12;
  *(_QWORD *)(v6 + 16) = v13;
  *(_QWORD *)(v6 + 24) = v8;
  result = *(double *)&v10;
  *(_OWORD *)(v6 + 32) = v10;
  *(_QWORD *)(v6 + 48) = v11;
  *a2 = v6;
  return result;
}

double nitro::ir::parse<nitro::ir::FOREACH>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t symbol_id;
  uint64_t v7;
  __int128 *v8;
  double result;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  *(_QWORD *)&v10 = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 288)
  {
    v12 = &v10;
    nitro::ir::parse<nitro::ir::FOREACH>(nitro::SExp const&)::$_0::operator()();
  }
  symbol_id = nitro::get_symbol_id((const std::string *)(v3 + 80));
  nitro::ir::parse<nitro::ir::NODE>(&v12, *(_QWORD *)(a1 + 48) + 144);
  nitro::ir::parse_sequence<nitro::ir::NODE>((_QWORD *)(*(_QWORD *)(a1 + 48) + 216), &v10);
  v7 = operator new();
  v8 = v12;
  *(_QWORD *)v7 = off_1E2D5C5E8;
  *(_QWORD *)(v7 + 8) = v8;
  *(_QWORD *)(v7 + 16) = symbol_id;
  result = *(double *)&v10;
  *(_OWORD *)(v7 + 24) = v10;
  *(_QWORD *)(v7 + 40) = v11;
  *a2 = v7;
  return result;
}

double nitro::ir::parse<nitro::ir::IF>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  *(_QWORD *)&v11 = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 288)
  {
    *(_QWORD *)&v9 = &v11;
    nitro::ir::parse<nitro::ir::IF>(nitro::SExp const&)::$_0::operator()();
  }
  nitro::ir::parse<nitro::ir::NODE>(&v13, v3 + 72);
  nitro::ir::parse_sequence<nitro::ir::NODE>((_QWORD *)(*(_QWORD *)(a1 + 48) + 144), &v11);
  nitro::ir::parse_sequence<nitro::ir::NODE>((_QWORD *)(*(_QWORD *)(a1 + 48) + 216), &v9);
  v6 = operator new();
  v7 = v13;
  *(_QWORD *)v6 = off_1E2D5C1A8;
  *(_QWORD *)(v6 + 8) = v7;
  *(_OWORD *)(v6 + 16) = v11;
  *(_QWORD *)(v6 + 32) = v12;
  result = *(double *)&v9;
  *(_OWORD *)(v6 + 40) = v9;
  *(_QWORD *)(v6 + 56) = v10;
  *a2 = v6;
  return result;
}

_QWORD *nitro::ir::parse<nitro::ir::INDEXGET>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  v9 = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 216)
  {
    v8 = &v9;
    nitro::ir::parse<nitro::ir::INDEXGET>(nitro::SExp const&)::$_0::operator()();
  }
  nitro::ir::parse<nitro::ir::NODE>(&v9, v3 + 72);
  nitro::ir::parse<nitro::ir::NODE>(&v8, *(_QWORD *)(a1 + 48) + 144);
  result = (_QWORD *)operator new();
  v7 = v9;
  *result = off_1E2D5C6A8;
  result[1] = v7;
  result[2] = v8;
  *a2 = result;
  return result;
}

_QWORD *nitro::ir::parse<nitro::ir::INDEXPUT>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  v11 = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 288)
  {
    v10 = &v11;
    nitro::ir::parse<nitro::ir::INDEXPUT>(nitro::SExp const&)::$_0::operator()();
  }
  nitro::ir::parse<nitro::ir::NODE>(&v11, v3 + 72);
  nitro::ir::parse<nitro::ir::NODE>(&v10, *(_QWORD *)(a1 + 48) + 144);
  nitro::ir::parse<nitro::ir::NODE>(&v9, *(_QWORD *)(a1 + 48) + 216);
  result = (_QWORD *)operator new();
  v7 = v11;
  *result = off_1E2D5C6E8;
  result[1] = v7;
  v8 = v9;
  result[2] = v10;
  result[3] = v8;
  *a2 = result;
  return result;
}

uint64_t nitro::ir::parse<nitro::ir::HINT>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD v10[4];
  unsigned int v11;
  _QWORD *v12;
  _BYTE v13[2];

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  v10[0] = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 216)
  {
    v12 = v10;
    nitro::ir::parse<nitro::ir::HINT>(nitro::SExp const&)::$_0::operator()();
  }
  nitro::ir::parse_type((nitro::ir *)(v3 + 72), (uint64_t)v10);
  nitro::ir::parse<nitro::ir::NODE>(&v12, *(_QWORD *)(a1 + 48) + 144);
  result = operator new();
  v7 = result;
  *(_QWORD *)result = off_1E2D5C2A8;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 40) = -1;
  v8 = v11;
  if (v11 == -1)
  {
    *(_QWORD *)(result + 48) = v12;
    *a2 = result;
  }
  else
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, _QWORD *))off_1E2DD1940[v11])(v13, result + 8, v10);
    *(_DWORD *)(v7 + 40) = v8;
    v9 = v11;
    *(_QWORD *)(v7 + 48) = v12;
    *a2 = v7;
    if ((_DWORD)v9 != -1)
      return ((uint64_t (*)(_QWORD **, _QWORD *))off_1E2DD1908[v9])(&v12, v10);
  }
  return result;
}

void sub_19125DAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v19 = *(unsigned int *)(v15 + 40);
  if ((_DWORD)v19 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E2DD1908[v19])(v17 - 33, v16);
  *(_DWORD *)(v15 + 40) = -1;
  MEMORY[0x19401CD90](v15, 0x10B3C4072FD431ALL);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 40))(a15);
  nitro::variable_type::~variable_type((nitro::variable_type *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ir::parse<nitro::ir::ASSIGN>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  v9 = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 216)
  {
    v8 = &v9;
    nitro::ir::parse<nitro::ir::ASSIGN>(nitro::SExp const&)::$_0::operator()();
  }
  nitro::ir::parse<nitro::ir::NODE>(&v9, v3 + 72);
  nitro::ir::parse<nitro::ir::NODE>(&v8, *(_QWORD *)(a1 + 48) + 144);
  result = (_QWORD *)operator new();
  v7 = v9;
  *result = off_1E2D5C4A8;
  result[1] = v7;
  result[2] = v8;
  *a2 = result;
  return result;
}

double nitro::ir::parse<nitro::ir::LIST>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  *(_QWORD *)&v7 = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 144)
  {
    v9 = &v7;
    nitro::ir::parse<nitro::ir::LIST>(nitro::SExp const&)::$_0::operator()();
  }
  nitro::ir::parse_sequence<nitro::ir::NODE>((_QWORD *)(v3 + 72), &v7);
  v5 = operator new();
  *(_QWORD *)v5 = off_1E2D5C2E8;
  result = *(double *)&v7;
  *(_OWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 24) = v8;
  *a2 = v5;
  return result;
}

void nitro::ir::parse<nitro::ir::DICT>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  _QWORD v19[10];

  v19[9] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  v19[0] = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 144)
  {
    *(_QWORD *)&v17 = v19;
    nitro::ir::parse<nitro::ir::DICT>(nitro::SExp const&)::$_0::operator()();
  }
  nitro::SExp::SExp((uint64_t)v19, v3 + 72);
  v17 = 0uLL;
  v18 = 0;
  v5 = v19[6];
  v6 = v19[7];
  while (v5 != v6)
  {
    nitro::ir::parse<nitro::ir::NODE>(&v15, *(_QWORD *)(v5 + 48));
    nitro::ir::parse<nitro::ir::NODE>(&v14, *(_QWORD *)(v5 + 48) + 72);
    v7 = v15;
    v15 = 0;
    *(_QWORD *)&v16 = v7;
    *((_QWORD *)&v16 + 1) = v14;
    v8 = *((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1) >= v18)
    {
      v10 = std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::__push_back_slow_path<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(&v17, &v16);
    }
    else
    {
      *(_QWORD *)&v16 = 0;
      **((_QWORD **)&v17 + 1) = v7;
      v9 = *((_QWORD *)&v16 + 1);
      *((_QWORD *)&v16 + 1) = 0;
      *(_QWORD *)(v8 + 8) = v9;
      v10 = (_OWORD *)(v8 + 16);
    }
    *((_QWORD *)&v17 + 1) = v10;
    v11 = *((_QWORD *)&v16 + 1);
    *((_QWORD *)&v16 + 1) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    v12 = v16;
    *(_QWORD *)&v16 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v5 += 72;
  }
  v13 = operator new();
  *(_QWORD *)v13 = off_1E2D5C268;
  *(_OWORD *)(v13 + 8) = v17;
  *(_QWORD *)(v13 + 24) = v18;
  *a2 = v13;
  nitro::SExp::~SExp((nitro::SExp *)v19);
}

void sub_19125DED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::~vector[abi:ne180100]((void **)va);
  nitro::SExp::~SExp((nitro::SExp *)va1);
  _Unwind_Resume(a1);
}

double nitro::ir::parse<nitro::ir::TUPLE>@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  *(_QWORD *)&v7 = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 144)
  {
    v9 = &v7;
    nitro::ir::parse<nitro::ir::TUPLE>(nitro::SExp const&)::$_0::operator()();
  }
  nitro::ir::parse_sequence<nitro::ir::NODE>((_QWORD *)(v3 + 72), &v7);
  v5 = operator new();
  *(_QWORD *)v5 = off_1E2D5C3E8;
  result = *(double *)&v7;
  *(_OWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 24) = v8;
  *a2 = v5;
  return result;
}

_QWORD *nitro::ir::parse<nitro::ir::RETURN>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  v7 = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 144)
    nitro::ir::parse<nitro::ir::RETURN>(nitro::SExp const&)::$_0::operator()();
  nitro::ir::parse<nitro::ir::NODE>(&v7, v3 + 72);
  result = (_QWORD *)operator new();
  v6 = v7;
  *result = off_1E2D5C568;
  result[1] = v6;
  *a2 = result;
  return result;
}

void nitro::ir::parse<nitro::ir::TUPLEGET>(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::string *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t __dst;
  std::string v16;

  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56) - v11;
  __dst = 0x8E38E38E38E38E39 * (v12 >> 3);
  if (v12 == 216)
  {
    if (*(_BYTE *)(v11 + 144))
    {
      nitro::ir::parse<nitro::ir::NODE>(&v14, v11 + 72);
      __asm { BR              X11 }
    }
    nitro::ir::parse<nitro::ir::TUPLEGET>(nitro::SExp const&)::$_1::operator()();
  }
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  nitro::ir::parse<nitro::ir::TUPLEGET>(nitro::SExp const&)::$_0::operator()();
}

void sub_19125E4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  int v29;
  void *v30;

  if (a16 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v29 & 1) == 0)
    {
LABEL_8:
      if (a10)
        (*(void (**)(uint64_t))(*(_QWORD *)a10 + 40))(a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

uint64_t std::set<std::string>::count[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t **v2;
  int v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t *v9;
  size_t v10;
  int v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;

  v2 = *(uint64_t ***)(a1 + 8);
  if (v2)
  {
    v3 = *((char *)a2 + 23);
    if (v3 >= 0)
      v4 = *((unsigned __int8 *)a2 + 23);
    else
      v4 = (size_t)a2[1];
    if (v3 >= 0)
      v5 = a2;
    else
      v5 = *a2;
    v6 = 1;
    do
    {
      v7 = *((char *)v2 + 55);
      if (v7 >= 0)
        v8 = *((unsigned __int8 *)v2 + 55);
      else
        v8 = (size_t)v2[5];
      if (v7 >= 0)
        v9 = (uint64_t *)(v2 + 4);
      else
        v9 = v2[4];
      if (v8 >= v4)
        v10 = v4;
      else
        v10 = v8;
      v11 = memcmp(v5, v9, v10);
      v12 = v4 < v8;
      if (v11)
        v12 = v11 < 0;
      if (!v12)
      {
        v13 = memcmp(v9, v5, v10);
        v14 = v8 < v4;
        if (v13)
          v14 = v13 < 0;
        if (!v14)
          return v6;
        ++v2;
      }
      v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return 0;
}

void nitro::ir::parse<nitro::ir::UNARYOPERATOR>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v7;
  std::string *v8;
  int v9;
  std::string __p;
  std::string *p_p;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56) - v3;
  __p.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v4 >> 3);
  if (v4 != 144)
  {
    p_p = &__p;
    nitro::ir::parse<nitro::ir::UNARYOPERATOR>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
    v3 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v5 = *(_OWORD *)(v3 + 8);
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  nitro::ir::parse<nitro::ir::NODE>(&p_p, v3 + 72);
  v7 = (_QWORD *)operator new();
  *v7 = off_1E2D5C128;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v7[4] = p_p;
    *a2 = v7;
    if (v9 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    v7[4] = p_p;
    *a2 = v7;
  }
}

void nitro::ir::parse<nitro::ir::BINARYOPERATOR>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char *v7;
  std::string::size_type size;
  std::string *v9;
  int v10;
  size_t v11;
  const void *v12;
  size_t v13;
  int v14;
  BOOL v15;
  int v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  char *v23[2];
  std::string *v24;
  std::string v25;
  int v26;
  void *v27[2];
  char v28;
  int v29;
  void *v30[2];
  char v31;
  int v32;
  void *v33[2];
  char v34;
  int v35;
  void *v36[2];
  char v37;
  int v38;
  void *v39[2];
  char v40;
  int v41;
  void *v42[2];
  char v43;
  int v44;
  void *v45[2];
  char v46;
  int v47;
  void *v48[2];
  char v49;
  int v50;
  void *v51[2];
  char v52;
  int v53;
  void *v54[2];
  char v55;
  int v56;
  void *v57[2];
  char v58;
  int v59;
  void *v60[2];
  char v61;
  int v62;
  void *__p[2];
  char v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)&v25.__r_.__value_.__s + 23) = 1;
  LOWORD(v25.__r_.__value_.__l.__data_) = 43;
  v26 = 0;
  v28 = 1;
  LOWORD(v27[0]) = 45;
  v29 = 1;
  v31 = 1;
  LOWORD(v30[0]) = 42;
  v32 = 2;
  v34 = 1;
  LOWORD(v33[0]) = 47;
  v35 = 3;
  v37 = 2;
  strcpy((char *)v36, "//");
  v38 = 4;
  v40 = 2;
  strcpy((char *)v39, "!=");
  v41 = 6;
  v43 = 2;
  strcpy((char *)v42, "==");
  v44 = 5;
  v46 = 1;
  LOWORD(v45[0]) = 60;
  v47 = 7;
  v49 = 1;
  LOWORD(v48[0]) = 62;
  v50 = 8;
  v52 = 2;
  strcpy((char *)v51, "<=");
  v53 = 9;
  v55 = 2;
  strcpy((char *)v54, ">=");
  v56 = 10;
  v58 = 2;
  strcpy((char *)v57, "&&");
  v59 = 11;
  v61 = 2;
  strcpy((char *)v60, "||");
  v62 = 12;
  v64 = 2;
  strcpy((char *)__p, "in");
  v65 = 13;
  v23[0] = 0;
  v23[1] = 0;
  v22 = v23;
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)&v25.__r_.__value_.__l.__data_, (uint64_t)&v25);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v27, (uint64_t)v27);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v30, (uint64_t)v30);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v33, (uint64_t)v33);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v36, (uint64_t)v36);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v39, (uint64_t)v39);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v42, (uint64_t)v42);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v45, (uint64_t)v45);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v48, (uint64_t)v48);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v51, (uint64_t)v51);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v54, (uint64_t)v54);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v57, (uint64_t)v57);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)v60, (uint64_t)v60);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>((uint64_t **)&v22, (uint64_t *)v23, (const void **)__p, (uint64_t)__p);
  if (v64 < 0)
  {
    operator delete(__p[0]);
    if ((v61 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v58 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((v61 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v60[0]);
  if ((v58 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v55 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v57[0]);
  if ((v55 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v52 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v54[0]);
  if ((v52 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v49 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v51[0]);
  if ((v49 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v46 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v48[0]);
  if ((v46 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v43 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v45[0]);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v40 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v42[0]);
  if ((v40 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v37 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v39[0]);
  if ((v37 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v34 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v36[0]);
  if ((v34 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v31 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v33[0]);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v28 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_30:
    operator delete(v27[0]);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_31:
    operator delete(v25.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
LABEL_29:
  operator delete(v30[0]);
  if (v28 < 0)
    goto LABEL_30;
LABEL_14:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
LABEL_15:
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56) - v4;
  v25.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v5 >> 3);
  if (v5 != 216)
  {
    v24 = &v25;
    nitro::ir::parse<nitro::ir::BINARYOPERATOR>(nitro::SExp const&)::$_0::operator()();
  }
  if (*(char *)(v4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(v4 + 8);
    v25.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 24);
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
  }
  v7 = v23[0];
  if (!v23[0])
LABEL_61:
    nitro::ir::parse<nitro::ir::BINARYOPERATOR>(nitro::SExp const&)::$_1::operator()();
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    size = v25.__r_.__value_.__l.__size_;
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v25;
  else
    v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
  while (1)
  {
    v10 = v7[55];
    if (v10 >= 0)
      v11 = v7[55];
    else
      v11 = *((_QWORD *)v7 + 5);
    if (v10 >= 0)
      v12 = v7 + 32;
    else
      v12 = (const void *)*((_QWORD *)v7 + 4);
    if (v11 >= size)
      v13 = size;
    else
      v13 = v11;
    v14 = memcmp(v9, v12, v13);
    v15 = size < v11;
    if (v14)
      v15 = v14 < 0;
    if (v15)
      goto LABEL_40;
    v16 = memcmp(v12, v9, v13);
    v17 = v11 < size;
    if (v16)
      v17 = v16 < 0;
    if (!v17)
      break;
    v7 += 8;
LABEL_40:
    v7 = *(char **)v7;
    if (!v7)
      goto LABEL_61;
  }
  v24 = &v25;
  v18 = *((_DWORD *)std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v22, (const void **)&v25.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v24)+ 14);
  nitro::ir::parse<nitro::ir::NODE>(&v24, *(_QWORD *)(a1 + 48) + 72);
  nitro::ir::parse<nitro::ir::NODE>(&v21, *(_QWORD *)(a1 + 48) + 144);
  v19 = operator new();
  *(_QWORD *)v19 = off_1E2D5C168;
  *(_DWORD *)(v19 + 8) = v18;
  v20 = v21;
  *(_QWORD *)(v19 + 16) = v24;
  *(_QWORD *)(v19 + 24) = v20;
  *a2 = v19;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy((uint64_t)&v22, v23[0]);
}

void sub_19125EE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy((uint64_t)&a11, (char *)a12);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::NODE>(nitro::SExp const&)::$_3::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 174, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 174, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19125F310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19125F378(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFVAR>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 182, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 182, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19125F744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19125F7AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFVAR>(nitro::SExp const&)::$_1::operator()(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  file_logger *v25;
  file_logger *started;
  char *v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  file_logger *v31;
  file_logger *v32;
  char *v33;
  _QWORD *v34;
  void *locale;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43[8];
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  std::locale v48;
  uint64_t v49;
  unsigned __int8 v50;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v47 = MEMORY[0x1E0DE4FE0] + 64;
  v42 = v4;
  *(uint64_t *)((char *)&v43[-1] + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)((char *)&v43[-1] + *(_QWORD *)(v42 - 24));
  std::ios_base::init(v6, v43);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v42 = v2 + 24;
  v47 = v3;
  std::streambuf::basic_streambuf();
  v43[0] = MEMORY[0x1E0DE4FB8] + 16;
  v44 = 0u;
  v45 = 0u;
  v46 = 16;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Assertion failed: (", 19);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"): ", 3);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"sexp.children[0].string_value", 29);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"==", 2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"DEFVAR\"", 8);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"  [", 3);
  v15 = *((char *)*a1 + 23);
  if (v15 >= 0)
    v16 = (uint64_t)*a1;
  else
    v16 = **a1;
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)*a1 + 23);
  else
    v17 = (*a1)[1];
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  LOBYTE(v48.__locale_) = 32;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v48, 1);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"==", 2);
  LOBYTE(v48.__locale_) = 32;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v48, 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"DEFVAR", 6);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet(&v48, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v25 = (file_logger *)global_logger();
    started = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 183, 1);
    std::stringbuf::str();
    v27 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v27 && v27[280])
    {
      v28 = v27 + 16;
      if ((v41 & 0x80u) == 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if ((v41 & 0x80u) == 0)
        v30 = v41;
      else
        v30 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    if ((char)v41 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v31 = (file_logger *)global_logger();
    v32 = file_logger::start_stream(v31, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 183, 1);
    std::stringbuf::str();
    v33 = (char *)pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v33 && v33[280])
    {
      v34 = v33 + 16;
      if ((v50 & 0x80u) == 0)
        locale = &v48;
      else
        locale = v48.__locale_;
      if ((v50 & 0x80u) == 0)
        v36 = v50;
      else
        v36 = v49;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)locale, v36);
    }
    v37 = pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v37)
    {
      if (*((_BYTE *)v37 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v32);
        if (*((_DWORD *)v32 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v50 < 0)
      operator delete(v48.__locale_);
  }
  v38 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19125FB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19125FBFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::variable_type::~variable_type(nitro::variable_type *this)
{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 8);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, nitro::variable_type *))off_1E2DD1908[v2])(&v3, this);
  *((_DWORD *)this + 8) = -1;
}

void nitro::ir::parse<nitro::ir::DEFUN>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"5", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 192, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 192, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191260020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191260088(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFUN>(nitro::SExp const&)::$_1::operator()(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  file_logger *v25;
  file_logger *started;
  char *v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  file_logger *v31;
  file_logger *v32;
  char *v33;
  _QWORD *v34;
  void *locale;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43[8];
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  std::locale v48;
  uint64_t v49;
  unsigned __int8 v50;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v47 = MEMORY[0x1E0DE4FE0] + 64;
  v42 = v4;
  *(uint64_t *)((char *)&v43[-1] + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)((char *)&v43[-1] + *(_QWORD *)(v42 - 24));
  std::ios_base::init(v6, v43);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v42 = v2 + 24;
  v47 = v3;
  std::streambuf::basic_streambuf();
  v43[0] = MEMORY[0x1E0DE4FB8] + 16;
  v44 = 0u;
  v45 = 0u;
  v46 = 16;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Assertion failed: (", 19);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"): ", 3);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"sexp.children[0].string_value", 29);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"==", 2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"DEFUN\"", 7);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"  [", 3);
  v15 = *((char *)*a1 + 23);
  if (v15 >= 0)
    v16 = (uint64_t)*a1;
  else
    v16 = **a1;
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)*a1 + 23);
  else
    v17 = (*a1)[1];
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  LOBYTE(v48.__locale_) = 32;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v48, 1);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"==", 2);
  LOBYTE(v48.__locale_) = 32;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v48, 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"DEFUN", 5);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet(&v48, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v25 = (file_logger *)global_logger();
    started = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 193, 1);
    std::stringbuf::str();
    v27 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v27 && v27[280])
    {
      v28 = v27 + 16;
      if ((v41 & 0x80u) == 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if ((v41 & 0x80u) == 0)
        v30 = v41;
      else
        v30 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    if ((char)v41 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v31 = (file_logger *)global_logger();
    v32 = file_logger::start_stream(v31, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 193, 1);
    std::stringbuf::str();
    v33 = (char *)pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v33 && v33[280])
    {
      v34 = v33 + 16;
      if ((v50 & 0x80u) == 0)
        locale = &v48;
      else
        locale = v48.__locale_;
      if ((v50 & 0x80u) == 0)
        v36 = v50;
      else
        v36 = v49;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)locale, v36);
    }
    v37 = pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v37)
    {
      if (*((_BYTE *)v37 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v32);
        if (*((_DWORD *)v32 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v50 < 0)
      operator delete(v48.__locale_);
  }
  v38 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191260470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912604D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ir::parse_sequence<nitro::ir::NODE>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (*(_BYTE *)result)
    nitro::ir::parse_sequence<nitro::ir::NODE>(nitro::SExp const&)::{lambda(void)#1}::operator()();
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = result[6];
  v4 = result[7];
  while (v3 != v4)
  {
    nitro::ir::parse<nitro::ir::NODE>(&v8, v3);
    v5 = (uint64_t *)a2[1];
    if ((unint64_t)v5 >= a2[2])
    {
      v7 = std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t *)&v8);
    }
    else
    {
      v6 = (uint64_t)v8;
      v8 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    a2[1] = v7;
    result = v8;
    v8 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
    v3 += 72;
  }
  return result;
}

void sub_1912605B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 40))(a9);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char **std::pair<std::vector<nitro::variable_type>,nitro::variable_type>::~pair(char **a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char v9;
  char v10;

  v2 = *((unsigned int *)a1 + 14);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char **))off_1E2DD1908[v2])(&v9, a1 + 3);
  *((_DWORD *)a1 + 14) = -1;
  v3 = *a1;
  if (*a1)
  {
    v4 = a1[1];
    v5 = *a1;
    if (v4 != v3)
    {
      do
      {
        v6 = v4 - 40;
        v7 = *((unsigned int *)v4 - 2);
        if ((_DWORD)v7 != -1)
          ((void (*)(char *, char *))off_1E2DD1908[v7])(&v10, v4 - 40);
        *((_DWORD *)v4 - 2) = -1;
        v4 -= 40;
      }
      while (v6 != v3);
      v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

void nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"5", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 207, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 207, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191260ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191260B34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::$_1::operator()(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  file_logger *v25;
  file_logger *started;
  char *v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  file_logger *v31;
  file_logger *v32;
  char *v33;
  _QWORD *v34;
  void *locale;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43[8];
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  std::locale v48;
  uint64_t v49;
  unsigned __int8 v50;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v47 = MEMORY[0x1E0DE4FE0] + 64;
  v42 = v4;
  *(uint64_t *)((char *)&v43[-1] + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)((char *)&v43[-1] + *(_QWORD *)(v42 - 24));
  std::ios_base::init(v6, v43);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v42 = v2 + 24;
  v47 = v3;
  std::streambuf::basic_streambuf();
  v43[0] = MEMORY[0x1E0DE4FB8] + 16;
  v44 = 0u;
  v45 = 0u;
  v46 = 16;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Assertion failed: (", 19);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"): ", 3);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"sexp.children[0].string_value", 29);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"==", 2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"DEFMEMBERFUN\"", 14);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"  [", 3);
  v15 = *((char *)*a1 + 23);
  if (v15 >= 0)
    v16 = (uint64_t)*a1;
  else
    v16 = **a1;
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)*a1 + 23);
  else
    v17 = (*a1)[1];
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  LOBYTE(v48.__locale_) = 32;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v48, 1);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"==", 2);
  LOBYTE(v48.__locale_) = 32;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v48, 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"DEFMEMBERFUN", 12);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet(&v48, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v25 = (file_logger *)global_logger();
    started = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 208, 1);
    std::stringbuf::str();
    v27 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v27 && v27[280])
    {
      v28 = v27 + 16;
      if ((v41 & 0x80u) == 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if ((v41 & 0x80u) == 0)
        v30 = v41;
      else
        v30 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    if ((char)v41 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v31 = (file_logger *)global_logger();
    v32 = file_logger::start_stream(v31, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 208, 1);
    std::stringbuf::str();
    v33 = (char *)pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v33 && v33[280])
    {
      v34 = v33 + 16;
      if ((v50 & 0x80u) == 0)
        locale = &v48;
      else
        locale = v48.__locale_;
      if ((v50 & 0x80u) == 0)
        v36 = v50;
      else
        v36 = v49;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)locale, v36);
    }
    v37 = pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v37)
    {
      if (*((_BYTE *)v37 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v32);
        if (*((_DWORD *)v32 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v50 < 0)
      operator delete(v48.__locale_);
  }
  v38 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191260F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191260F84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFCLASS>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 222, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 222, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191261350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912613B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DEFCLASS>(nitro::SExp const&)::$_1::operator()(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  file_logger *v25;
  file_logger *started;
  char *v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  file_logger *v31;
  file_logger *v32;
  char *v33;
  _QWORD *v34;
  void *locale;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43[8];
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  std::locale v48;
  uint64_t v49;
  unsigned __int8 v50;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v47 = MEMORY[0x1E0DE4FE0] + 64;
  v42 = v4;
  *(uint64_t *)((char *)&v43[-1] + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)((char *)&v43[-1] + *(_QWORD *)(v42 - 24));
  std::ios_base::init(v6, v43);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v42 = v2 + 24;
  v47 = v3;
  std::streambuf::basic_streambuf();
  v43[0] = MEMORY[0x1E0DE4FB8] + 16;
  v44 = 0u;
  v45 = 0u;
  v46 = 16;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Assertion failed: (", 19);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"): ", 3);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"sexp.children[0].string_value", 29);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"==", 2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"DEFCLASS\"", 10);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"  [", 3);
  v15 = *((char *)*a1 + 23);
  if (v15 >= 0)
    v16 = (uint64_t)*a1;
  else
    v16 = **a1;
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)*a1 + 23);
  else
    v17 = (*a1)[1];
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  LOBYTE(v48.__locale_) = 32;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v48, 1);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"==", 2);
  LOBYTE(v48.__locale_) = 32;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v48, 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"DEFCLASS", 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet(&v48, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v25 = (file_logger *)global_logger();
    started = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 223, 1);
    std::stringbuf::str();
    v27 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v27 && v27[280])
    {
      v28 = v27 + 16;
      if ((v41 & 0x80u) == 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if ((v41 & 0x80u) == 0)
        v30 = v41;
      else
        v30 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    if ((char)v41 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v31 = (file_logger *)global_logger();
    v32 = file_logger::start_stream(v31, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 223, 1);
    std::stringbuf::str();
    v33 = (char *)pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v33 && v33[280])
    {
      v34 = v33 + 16;
      if ((v50 & 0x80u) == 0)
        locale = &v48;
      else
        locale = v48.__locale_;
      if ((v50 & 0x80u) == 0)
        v36 = v50;
      else
        v36 = v49;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)locale, v36);
    }
    v37 = pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v37)
    {
      if (*((_BYTE *)v37 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v32);
        if (*((_DWORD *)v32 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v50 < 0)
      operator delete(v48.__locale_);
  }
  v38 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912617A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191261808(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ir::parse_sequence<nitro::ir::DEFVAR>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (*(_BYTE *)result)
    nitro::ir::parse_sequence<nitro::ir::DEFVAR>(nitro::SExp const&)::{lambda(void)#1}::operator()();
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = result[6];
  v4 = result[7];
  while (v3 != v4)
  {
    nitro::ir::parse<nitro::ir::DEFVAR>(v3, (uint64_t *)&v8);
    v5 = (uint64_t *)a2[1];
    if ((unint64_t)v5 >= a2[2])
    {
      v7 = std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t *)&v8);
    }
    else
    {
      v6 = (uint64_t)v8;
      v8 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    a2[1] = v7;
    result = v8;
    v8 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
    v3 += 72;
  }
  return result;
}

void sub_1912618E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 40))(a9);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (*(_BYTE *)result)
    nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::{lambda(void)#1}::operator()();
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = result[6];
  v4 = result[7];
  while (v3 != v4)
  {
    nitro::ir::parse<nitro::ir::DEFMEMBERFUN>(v3, &v8);
    v5 = (uint64_t *)a2[1];
    if ((unint64_t)v5 >= a2[2])
    {
      v7 = std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t *)&v8);
    }
    else
    {
      v6 = (uint64_t)v8;
      v8 = 0;
      *v5 = v6;
      v7 = v5 + 1;
    }
    a2[1] = v7;
    result = v8;
    v8 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
    v3 += 72;
  }
  return result;
}

void sub_1912619CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 40))(a9);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 234, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 234, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191261DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191261E0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_1::operator()(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  file_logger *v25;
  file_logger *started;
  char *v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  file_logger *v31;
  file_logger *v32;
  char *v33;
  _QWORD *v34;
  void *locale;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43[8];
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  std::locale v48;
  uint64_t v49;
  unsigned __int8 v50;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v47 = MEMORY[0x1E0DE4FE0] + 64;
  v42 = v4;
  *(uint64_t *)((char *)&v43[-1] + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)((char *)&v43[-1] + *(_QWORD *)(v42 - 24));
  std::ios_base::init(v6, v43);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v42 = v2 + 24;
  v47 = v3;
  std::streambuf::basic_streambuf();
  v43[0] = MEMORY[0x1E0DE4FB8] + 16;
  v44 = 0u;
  v45 = 0u;
  v46 = 16;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Assertion failed: (", 19);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"): ", 3);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"sexp.children[0].string_value", 29);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"==", 2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"MEMBER\"", 8);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"  [", 3);
  v15 = *((char *)*a1 + 23);
  if (v15 >= 0)
    v16 = (uint64_t)*a1;
  else
    v16 = **a1;
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)*a1 + 23);
  else
    v17 = (*a1)[1];
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  LOBYTE(v48.__locale_) = 32;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v48, 1);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"==", 2);
  LOBYTE(v48.__locale_) = 32;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v48, 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"MEMBER", 6);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet(&v48, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v25 = (file_logger *)global_logger();
    started = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 235, 1);
    std::stringbuf::str();
    v27 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v27 && v27[280])
    {
      v28 = v27 + 16;
      if ((v41 & 0x80u) == 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if ((v41 & 0x80u) == 0)
        v30 = v41;
      else
        v30 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    if ((char)v41 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v31 = (file_logger *)global_logger();
    v32 = file_logger::start_stream(v31, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 235, 1);
    std::stringbuf::str();
    v33 = (char *)pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v33 && v33[280])
    {
      v34 = v33 + 16;
      if ((v50 & 0x80u) == 0)
        locale = &v48;
      else
        locale = v48.__locale_;
      if ((v50 & 0x80u) == 0)
        v36 = v50;
      else
        v36 = v49;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)locale, v36);
    }
    v37 = pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v37)
    {
      if (*((_BYTE *)v37 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v32);
        if (*((_DWORD *)v32 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v50 < 0)
      operator delete(v48.__locale_);
  }
  v38 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912621F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19126225C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::MEMBER>(nitro::SExp const&)::$_2::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children[2].is_string_value", 32);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 237, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 237, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191262598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191262600(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::BINARYOPERATOR>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 262, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 262, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912629CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191262A34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::BINARYOPERATOR>(nitro::SExp const&)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"str_to_binary_op.count(op)", 26);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 264, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 264, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191262D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191262DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::UNARYOPERATOR>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 275, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 275, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912631A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19126320C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::CALL>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 285, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 285, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912635D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191263640(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::MAKEOBJECT>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 300, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 300, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191263A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191263A74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::WHILE>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 309, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 309, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191263E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191263EA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::FOR>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"5", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 318, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 318, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191264274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912642DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::FOREACH>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 330, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 330, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912646A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191264710(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::IF>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 340, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 340, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191264ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191264B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::INDEXGET>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 350, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 350, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191264F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191264F78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::INDEXPUT>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 359, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 359, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191265344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912653AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::HINT>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 369, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 369, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191265778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912657E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::ASSIGN>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 378, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 378, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191265BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191265C14(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::LIST>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 386, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 386, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191265FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191266048(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::DICT>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 393, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 393, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191266414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19126647C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        *((_QWORD *)v3 - 1) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v6 = *((_QWORD *)v3 - 2);
        *((_QWORD *)v3 - 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void nitro::ir::parse<nitro::ir::TUPLE>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 407, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 407, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912668D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191266940(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::TUPLEGET>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 415, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 415, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191266D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191266D74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::TUPLEGET>(nitro::SExp const&)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children[2].is_value", 25);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 416, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 416, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912670B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191267118(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse<nitro::ir::RETURN>(nitro::SExp const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 425, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 425, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912674E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19126754C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ir::operator<<(_QWORD *a1, int *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  int v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  void *v22;
  char v23;
  int v24;
  void *v25;
  char v26;
  int v27;
  void *v28;
  char v29;
  int v30;
  void *v31;
  char v32;
  int v33;
  void *v34[2];
  char v35;
  int v36;
  void *v37[2];
  char v38;
  int v39;
  void *v40[2];
  char v41;
  int v42;
  void *v43;
  char v44;
  int v45;
  void *v46;
  char v47;
  int v48;
  void *v49[2];
  char v50;
  int v51;
  void *v52[2];
  char v53;
  int v54;
  void *v55[2];
  char v56;
  int v57;
  void *v58[2];
  char v59;
  int v60;
  void *__p[2];
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v23 = 1;
  LOWORD(v22) = 43;
  v24 = 1;
  v26 = 1;
  LOWORD(v25) = 45;
  v27 = 2;
  v29 = 1;
  LOWORD(v28) = 42;
  v30 = 3;
  v32 = 1;
  LOWORD(v31) = 47;
  v33 = 3;
  v35 = 2;
  strcpy((char *)v34, "//");
  v36 = 6;
  v38 = 2;
  strcpy((char *)v37, "!=");
  v39 = 5;
  v41 = 2;
  strcpy((char *)v40, "==");
  v42 = 7;
  v44 = 1;
  LOWORD(v43) = 60;
  v45 = 8;
  v47 = 1;
  LOWORD(v46) = 62;
  v48 = 9;
  v50 = 2;
  strcpy((char *)v49, "<=");
  v51 = 10;
  v53 = 2;
  strcpy((char *)v52, ">=");
  v54 = 11;
  v56 = 2;
  strcpy((char *)v55, "&&");
  v57 = 12;
  v59 = 2;
  strcpy((char *)v58, "||");
  v60 = 12;
  v62 = 2;
  strcpy((char *)__p, "IN");
  v4 = &v19;
  v19 = 0;
  v20 = 0;
  v18 = &v19;
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v21, (uint64_t)&v21);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v24, (uint64_t)&v24);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v27, (uint64_t)&v27);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v30, (uint64_t)&v30);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v33, (uint64_t)&v33);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v36, (uint64_t)&v36);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v39, (uint64_t)&v39);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v42, (uint64_t)&v42);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v45, (uint64_t)&v45);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v48, (uint64_t)&v48);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v51, (uint64_t)&v51);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v54, (uint64_t)&v54);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v57, (uint64_t)&v57);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(&v18, (uint64_t *)&v19, &v60, (uint64_t)&v60);
  if (v62 < 0)
  {
    operator delete(__p[0]);
    if ((v59 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v56 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v59 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v58[0]);
  if ((v56 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v53 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v55[0]);
  if ((v53 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v50 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v52[0]);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v47 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v49[0]);
  if ((v47 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v44 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v46);
  if ((v44 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v41 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v43);
  if ((v41 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v38 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v40[0]);
  if ((v38 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v35 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v37[0]);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v32 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v34[0]);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v31);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v26 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_37:
    operator delete(v25);
    if ((v23 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_36:
  operator delete(v28);
  if (v26 < 0)
    goto LABEL_37;
LABEL_14:
  if ((v23 & 0x80000000) == 0)
    goto LABEL_15;
LABEL_38:
  operator delete(v22);
LABEL_15:
  v5 = v19;
  v6 = *a2;
  v7 = &v19;
  if (v19)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v6 >= v8)
          break;
        v5 = *v7;
        v4 = v7;
        if (!*v7)
          goto LABEL_22;
      }
      if (v8 >= v6)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v4 = v7 + 1;
        goto LABEL_22;
      }
    }
    v9 = v7;
  }
  else
  {
LABEL_22:
    v9 = operator new(0x40uLL);
    v9[8] = v6;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = 0;
    *((_QWORD *)v9 + 5) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v4 = (uint64_t *)v9;
    v10 = (uint64_t *)v9;
    if (*v18)
    {
      v18 = (uint64_t **)*v18;
      v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v19, v10);
    ++v20;
  }
  v13 = *((_QWORD *)v9 + 5);
  v12 = (char *)(v9 + 10);
  v11 = v13;
  v14 = v12[23];
  if (v14 >= 0)
    v15 = (uint64_t)v12;
  else
    v15 = v11;
  if (v14 >= 0)
    v16 = v12[23];
  else
    v16 = *((_QWORD *)v12 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v15, v16);
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::destroy((uint64_t)&v18, (char *)v19);
  return a1;
}

void sub_191267A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10)
{
  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_191267A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;

  std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::destroy((uint64_t)&a9, (char *)a10);
  if (a82 < 0)
  {
    operator delete(a81);
    if ((a80 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a78 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((a80 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a67 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a69);
  if ((a67 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a60 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a62);
  if ((a60 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a53 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a55);
  if ((a53 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a46 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a48);
  if ((a46 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(a41);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a34);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a27);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_14:
    if (a18 < 0)
      goto LABEL_15;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a20);
  if (a18 < 0)
  {
LABEL_15:
    operator delete(__p);
    _Unwind_Resume(a1);
  }
LABEL_29:
  _Unwind_Resume(a1);
}

uint64_t std::tuple<unsigned long,nitro::variable_type>::~tuple(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD1908[v2])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void nitro::ir::DEFVAR::~DEFVAR(nitro::ir::DEFVAR *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E2D5C4E8;
  v2 = *((unsigned int *)this + 12);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E2DD1908[v2])(&v3, (char *)this + 16);
  *((_DWORD *)this + 12) = -1;
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E2D5C4E8;
  v2 = *((unsigned int *)this + 12);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E2DD1908[v2])(&v3, (char *)this + 16);
  *((_DWORD *)this + 12) = -1;
  MEMORY[0x19401CD90](this, 0x10B3C40F12CF9BDLL);
}

void nitro::ir::VALUE::~VALUE(nitro::ir::VALUE *this)
{
  *(_QWORD *)this = off_1E2D5C428;
  std::__tuple_leaf<0ul,nitro::flexible_type,false>::~__tuple_leaf((uint64_t)this + 8);
}

{
  *(_QWORD *)this = off_1E2D5C428;
  std::__tuple_leaf<0ul,nitro::flexible_type,false>::~__tuple_leaf((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

void nitro::ir::SYMBOL::~SYMBOL(nitro::ir::SYMBOL *this)
{
  JUMPOUT(0x19401CD90);
}

void nitro::ir::DEFUN::~DEFUN(nitro::ir::DEFUN *this)
{
  *(_QWORD *)this = off_1E2D5C3A8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)this + 8);
}

{
  *(_QWORD *)this = off_1E2D5C3A8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

void nitro::ir::DEFMEMBERFUN::~DEFMEMBERFUN(nitro::ir::DEFMEMBERFUN *this)
{
  *(_QWORD *)this = off_1E2D5C0E8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)this + 8);
}

{
  *(_QWORD *)this = off_1E2D5C0E8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

void nitro::ir::DEFCLASS::~DEFCLASS(nitro::ir::DEFCLASS *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E2D5C668;
  v2 = (_QWORD *)*((_QWORD *)this + 7);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 8);
    v4 = (void *)*((_QWORD *)this + 7);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v2;
    operator delete(v4);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 4);
  if (v7)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 5);
    v9 = (void *)*((_QWORD *)this + 4);
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v7;
    operator delete(v9);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  nitro::ir::DEFCLASS::~DEFCLASS(this);
  JUMPOUT(0x19401CD90);
}

uint64_t std::tuple<std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::~tuple(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v4);
  }
  v7 = *(_QWORD **)(a1 + 24);
  if (v7)
  {
    v8 = *(_QWORD **)(a1 + 32);
    v9 = *(void **)(a1 + 24);
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      }
      while (v8 != v7);
      v9 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v9);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void nitro::ir::MEMBER::~MEMBER(nitro::ir::MEMBER *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D5C528;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D5C528;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  JUMPOUT(0x19401CD90);
}

void nitro::ir::BINARYOPERATOR::~BINARYOPERATOR(nitro::ir::BINARYOPERATOR *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2D5C168;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2D5C168;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  JUMPOUT(0x19401CD90);
}

void nitro::ir::UNARYOPERATOR::~UNARYOPERATOR(nitro::ir::UNARYOPERATOR *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2D5C128;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2D5C128;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x19401CD90);
}

_QWORD *std::tuple<unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)a1[2];
  if (v2)
  {
    v3 = (_QWORD *)a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  return a1;
}

void nitro::ir::CALL::~CALL(nitro::ir::CALL *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E2D5C228;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E2D5C228;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  JUMPOUT(0x19401CD90);
}

uint64_t std::tuple<std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void nitro::ir::MAKEOBJECT::~MAKEOBJECT(nitro::ir::MAKEOBJECT *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2D5C0A8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2D5C0A8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x19401CD90);
}

uint64_t *std::tuple<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)a1[1];
  if (v2)
  {
    v3 = (_QWORD *)a1[2];
    v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[1];
    }
    a1[2] = (uint64_t)v2;
    operator delete(v4);
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  return a1;
}

void nitro::ir::WHILE::~WHILE(nitro::ir::WHILE *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E2D5C468;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E2D5C468;
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 3);
    v4 = (void *)*((_QWORD *)this + 2);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  JUMPOUT(0x19401CD90);
}

uint64_t *std::tuple<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = (uint64_t)v2;
    operator delete(v4);
  }
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v8 = a1[1];
  a1[1] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v9 = *a1;
  *a1 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  return a1;
}

void nitro::ir::FOR::~FOR(nitro::ir::FOR *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E2D5C1E8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E2D5C1E8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  JUMPOUT(0x19401CD90);
}

uint64_t *std::tuple<std::unique_ptr<nitro::ir::NODE>,unsigned long,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)a1[2];
  if (v2)
  {
    v3 = (_QWORD *)a1[3];
    v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[2];
    }
    a1[3] = (uint64_t)v2;
    operator delete(v4);
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  return a1;
}

void nitro::ir::FOREACH::~FOREACH(nitro::ir::FOREACH *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E2D5C5E8;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E2D5C5E8;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  JUMPOUT(0x19401CD90);
}

void nitro::ir::IF::~IF(nitro::ir::IF *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E2D5C1A8;
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 2);
  if (v7)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 3);
    v9 = (void *)*((_QWORD *)this + 2);
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v7;
    operator delete(v9);
  }
  v12 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
}

{
  nitro::ir::IF::~IF(this);
  JUMPOUT(0x19401CD90);
}

uint64_t *std::tuple<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    v3 = (_QWORD *)a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = (uint64_t)v2;
    operator delete(v4);
  }
  v7 = (_QWORD *)a1[1];
  if (v7)
  {
    v8 = (_QWORD *)a1[2];
    v9 = (void *)a1[1];
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      }
      while (v8 != v7);
      v9 = (void *)a1[1];
    }
    a1[2] = (uint64_t)v7;
    operator delete(v9);
  }
  v12 = *a1;
  *a1 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  return a1;
}

void nitro::ir::INDEXGET::~INDEXGET(nitro::ir::INDEXGET *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2D5C6A8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2D5C6A8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  JUMPOUT(0x19401CD90);
}

uint64_t *std::tuple<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::~tuple(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return a1;
}

void nitro::ir::INDEXPUT::~INDEXPUT(nitro::ir::INDEXPUT *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E2D5C6E8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E2D5C6E8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  JUMPOUT(0x19401CD90);
}

uint64_t std::tuple<nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>::~tuple(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD1908[v3])(&v5, a1);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void nitro::ir::HINT::~HINT(nitro::ir::HINT *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_1E2D5C2A8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E2DD1908[v3])(&v4, (char *)this + 8);
  *((_DWORD *)this + 10) = -1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_1E2D5C2A8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E2DD1908[v3])(&v4, (char *)this + 8);
  *((_DWORD *)this + 10) = -1;
  MEMORY[0x19401CD90](this, 0x10B3C4072FD431ALL);
}

void nitro::ir::ASSIGN::~ASSIGN(nitro::ir::ASSIGN *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2D5C4A8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2D5C4A8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  JUMPOUT(0x19401CD90);
}

void nitro::ir::LIST::~LIST(nitro::ir::LIST *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2D5C2E8;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2D5C2E8;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x19401CD90);
}

void nitro::ir::DICT::~DICT(nitro::ir::DICT *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2D5C268;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v6 = *(_QWORD *)(v3 - 16);
        *(_QWORD *)(v3 - 16) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2D5C268;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        v6 = *(_QWORD *)(v3 - 16);
        *(_QWORD *)(v3 - 16) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x19401CD90);
}

void nitro::ir::TUPLE::~TUPLE(nitro::ir::TUPLE *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2D5C3E8;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2D5C3E8;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x19401CD90);
}

void nitro::ir::TUPLEGET::~TUPLEGET(nitro::ir::TUPLEGET *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D5C728;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D5C728;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  JUMPOUT(0x19401CD90);
}

void nitro::ir::THIS::~THIS(nitro::ir::THIS *this)
{
  JUMPOUT(0x19401CD90);
}

void nitro::ir::RETURN::~RETURN(nitro::ir::RETURN *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D5C568;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E2D5C568;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  JUMPOUT(0x19401CD90);
}

void nitro::ir::BREAK::~BREAK(nitro::ir::BREAK *this)
{
  JUMPOUT(0x19401CD90);
}

void nitro::ir::CONTINUE::~CONTINUE(nitro::ir::CONTINUE *this)
{
  JUMPOUT(0x19401CD90);
}

void nitro::ir::NodeMixin<nitro::ir::DEFVAR>::print(const void *a1, _QWORD *a2)
{
  void *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<unsigned long,nitro::variable_type>(a2, (uint64_t)&__p, (uint64_t)v4 + 8);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126979C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ir::NodeMixin<nitro::ir::DEFVAR>::copy@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE v9[32];
  unsigned int v10;
  _BYTE v11[32];
  unsigned int v12;
  char v13;

  if (a1)
  v3 = a1[1];
  nitro::ir::copy_tuple<1ul,unsigned long,nitro::variable_type>::copy((uint64_t)(a1 + 1), (uint64_t)v11);
  v9[0] = 0;
  v10 = -1;
  v4 = v12;
  if (v12 != -1)
  {
    ((void (*)(char *, _BYTE *, _BYTE *))off_1E2DD1978[v12])(&v13, v9, v11);
    v10 = v4;
    if (v12 != -1)
      ((void (*)(char *, _BYTE *))off_1E2DD1908[v12])(&v13, v11);
  }
  result = operator new();
  v6 = result;
  *(_QWORD *)result = off_1E2D5C4E8;
  *(_QWORD *)(result + 8) = v3;
  *(_BYTE *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = -1;
  v7 = v10;
  if (v10 == -1)
  {
    *a2 = result;
  }
  else
  {
    result = ((uint64_t (*)(_BYTE *, uint64_t, _BYTE *))off_1E2DD1978[v10])(v11, result + 16, v9);
    *(_DWORD *)(v6 + 48) = v7;
    v8 = v10;
    *a2 = v6;
    if ((_DWORD)v8 != -1)
      return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E2DD1908[v8])(v11, v9);
  }
  return result;
}

void sub_191269948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::tuple<unsigned long,nitro::variable_type>::~tuple((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void nitro::ir::DEFVAR::node_type(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "DEFVAR");
}

uint64_t nitro::ir::DEFVAR::node_type_enum(nitro::ir::DEFVAR *this)
{
  return 0;
}

void nitro::ir::NodeMixin<nitro::ir::VALUE>::print(const void *a1, _QWORD *a2)
{
  void *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  std::string __p;
  std::string v10;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  nitro::ir::print_element<nitro::flexible_type>((uint64_t)a2, (uint64_t)v4 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_191269AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ir::NodeMixin<nitro::ir::VALUE>::copy@<X0>(const void *a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v3;
  unint64_t *v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v11;
  char v12;
  unint64_t *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = (unint64_t *)*((_QWORD *)v3 + 1);
  v5 = v3[16];
  if ((v5 - 2) < 4 || v5 == 9)
  {
    do
      v7 = __ldaxr(v4);
    while (__stlxr(v7 + 1, v4));
  }
  v13 = v4;
  v11 = v4;
  v12 = v5;
  v14 = 0;
  std::__tuple_leaf<0ul,nitro::flexible_type,false>::~__tuple_leaf((uint64_t)&v13);
  v8 = operator new();
  v9 = v11;
  *(_QWORD *)v8 = off_1E2D5C428;
  *(_QWORD *)(v8 + 8) = v9;
  *(_BYTE *)(v8 + 16) = v12;
  v12 = 0;
  *a2 = v8;
  return std::__tuple_leaf<0ul,nitro::flexible_type,false>::~__tuple_leaf((uint64_t)&v11);
}

void sub_191269BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tuple_leaf<0ul,nitro::flexible_type,false>::~__tuple_leaf((uint64_t)va);
  _Unwind_Resume(a1);
}

void nitro::ir::VALUE::node_type(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "VALUE");
}

uint64_t nitro::ir::VALUE::node_type_enum(nitro::ir::VALUE *this)
{
  return 1;
}

void nitro::ir::NodeMixin<nitro::ir::SYMBOL>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  std::string __p;
  std::string v9;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    __p = v9;
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_191269D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::SYMBOL>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = off_1E2D5C5A8;
  result[1] = v3;
  *a2 = result;
  return result;
}

void nitro::ir::SYMBOL::node_type(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "SYMBOL");
}

uint64_t nitro::ir::SYMBOL::node_type_enum(nitro::ir::SYMBOL *this)
{
  return 2;
}

void nitro::ir::NodeMixin<nitro::ir::DEFUN>::print(const void *a1, _QWORD *a2)
{
  void *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  std::string __p;
  std::string v10;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  nitro::ir::print_tuple<4ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a2, (uint64_t)v4 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_191269F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ir::NodeMixin<nitro::ir::DEFUN>::copy@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  if (a1)
  nitro::ir::copy_tuple<5ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(a1 + 1, (uint64_t)&v7);
  v3 = operator new();
  v4 = v7;
  *(_QWORD *)v3 = off_1E2D5C3A8;
  *(_QWORD *)(v3 + 8) = v4;
  *(_OWORD *)(v3 + 16) = v8;
  *(_QWORD *)(v3 + 32) = v9;
  v8 = 0uLL;
  v9 = 0;
  *(_BYTE *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 72) = -1;
  v5 = v11;
  if (v11 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E2DD1978[v11])(&v16, v3 + 40, &v10);
    *(_DWORD *)(v3 + 72) = v5;
  }
  *(_OWORD *)(v3 + 80) = v12;
  *(_QWORD *)(v3 + 96) = v13;
  v12 = 0uLL;
  *(_OWORD *)(v3 + 104) = v14;
  *(_QWORD *)(v3 + 120) = v15;
  v13 = 0;
  v14 = 0uLL;
  v15 = 0;
  *a2 = v3;
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)&v7);
}

void sub_19126A0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void nitro::ir::DEFUN::node_type(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "DEFUN");
}

uint64_t nitro::ir::DEFUN::node_type_enum(nitro::ir::DEFUN *this)
{
  return 3;
}

void nitro::ir::NodeMixin<nitro::ir::DEFMEMBERFUN>::print(const void *a1, _QWORD *a2)
{
  void *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  std::string __p;
  std::string v10;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  nitro::ir::print_tuple<4ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a2, (uint64_t)v4 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_19126A210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ir::NodeMixin<nitro::ir::DEFMEMBERFUN>::copy@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  if (a1)
  nitro::ir::copy_tuple<5ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(a1 + 1, (uint64_t)&v7);
  v3 = operator new();
  v4 = v7;
  *(_QWORD *)v3 = off_1E2D5C0E8;
  *(_QWORD *)(v3 + 8) = v4;
  *(_OWORD *)(v3 + 16) = v8;
  *(_QWORD *)(v3 + 32) = v9;
  v8 = 0uLL;
  v9 = 0;
  *(_BYTE *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 72) = -1;
  v5 = v11;
  if (v11 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E2DD1978[v11])(&v16, v3 + 40, &v10);
    *(_DWORD *)(v3 + 72) = v5;
  }
  *(_OWORD *)(v3 + 80) = v12;
  *(_QWORD *)(v3 + 96) = v13;
  v12 = 0uLL;
  *(_OWORD *)(v3 + 104) = v14;
  *(_QWORD *)(v3 + 120) = v15;
  v13 = 0;
  v14 = 0uLL;
  v15 = 0;
  *a2 = v3;
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)&v7);
}

void sub_19126A36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void nitro::ir::DEFMEMBERFUN::node_type(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "DEFMEMBERFUN");
}

uint64_t nitro::ir::DEFMEMBERFUN::node_type_enum(nitro::ir::DEFMEMBERFUN *this)
{
  return 4;
}

void nitro::ir::NodeMixin<nitro::ir::DEFCLASS>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::string __p;
  std::string v13;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  else
    __p = v13;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  v9 = *((char *)v4 + 31);
  if (v9 >= 0)
    v10 = (uint64_t)(v4 + 1);
  else
    v10 = v4[1];
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)v4 + 31);
  else
    v11 = v4[2];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  nitro::ir::print_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::print(a2, v4 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_20:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
}

void sub_19126A504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

double nitro::ir::NodeMixin<nitro::ir::DEFCLASS>::copy@<D0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  double result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1)
  nitro::ir::copy_tuple<3ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::copy((uint64_t)a1 + 8, (uint64_t)&v6);
  v3 = operator new();
  *(_QWORD *)v3 = off_1E2D5C668;
  *(_OWORD *)(v3 + 8) = v6;
  *(_QWORD *)(v3 + 24) = v7;
  v4 = v9;
  *(_OWORD *)(v3 + 32) = v8;
  *(_OWORD *)(v3 + 48) = v4;
  result = *(double *)&v10;
  *(_OWORD *)(v3 + 64) = v10;
  *a2 = v3;
  return result;
}

void sub_19126A5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::tuple<std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::~tuple((uint64_t)va);
  _Unwind_Resume(a1);
}

void nitro::ir::DEFCLASS::node_type(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "DEFCLASS");
}

uint64_t nitro::ir::DEFCLASS::node_type_enum(nitro::ir::DEFCLASS *this)
{
  return 5;
}

void nitro::ir::NodeMixin<nitro::ir::MEMBER>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,unsigned long>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126A6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::MEMBER>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  if (!a1)
  {
    v3 = 0;
    v4 = MEMORY[8];
    if (MEMORY[8])
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v4 = v3[1];
  if (!v4)
    goto LABEL_5;
LABEL_3:
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 8))(&v8);
  v5 = v8;
LABEL_6:
  v6 = v3[2];
  result = (_QWORD *)operator new();
  *result = off_1E2D5C528;
  result[1] = v5;
  result[2] = v6;
  *a2 = result;
  return result;
}

void sub_19126A7D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void nitro::ir::MEMBER::node_type(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "MEMBER");
}

uint64_t nitro::ir::MEMBER::node_type_enum(nitro::ir::MEMBER *this)
{
  return 6;
}

void nitro::ir::NodeMixin<nitro::ir::BINARYOPERATOR>::print(const void *a1, _QWORD *a2)
{
  void *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<nitro::ir::binary_op_enum,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, (uint64_t)v4 + 8);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126A8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ir::NodeMixin<nitro::ir::BINARYOPERATOR>::copy@<X0>(const void *a1@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  if (a1)
  else
    v3 = 0;
  v4 = v3[2];
  v5 = *((_QWORD *)v3 + 2);
  if (!v5)
  {
    v6 = 0;
    v7 = *((_QWORD *)v3 + 3);
    if (v7)
      goto LABEL_6;
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 8))(&v10);
  v6 = v10;
  v7 = *((_QWORD *)v3 + 3);
  if (!v7)
    goto LABEL_8;
LABEL_6:
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 8))(&v10);
  v8 = v10;
LABEL_9:
  result = operator new();
  *(_QWORD *)result = off_1E2D5C168;
  *(_DWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v8;
  *a2 = result;
  return result;
}

void sub_19126A9F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void nitro::ir::BINARYOPERATOR::node_type(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "BINARYOPERATOR");
}

uint64_t nitro::ir::BINARYOPERATOR::node_type_enum(nitro::ir::BINARYOPERATOR *this)
{
  return 7;
}

void nitro::ir::NodeMixin<nitro::ir::UNARYOPERATOR>::print(const void *a1, _QWORD *a2)
{
  void *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::string,std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, (uint64_t)v4 + 8);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126AB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

double nitro::ir::NodeMixin<nitro::ir::UNARYOPERATOR>::copy@<D0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  double result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  nitro::ir::copy_tuple<2ul,std::string,std::unique_ptr<nitro::ir::NODE>>::copy((uint64_t)a1 + 8, (uint64_t)&v6);
  v3 = operator new();
  *(_QWORD *)v3 = off_1E2D5C128;
  result = *(double *)&v6;
  *(_OWORD *)(v3 + 8) = v6;
  v5 = v8;
  *(_QWORD *)(v3 + 24) = v7;
  *(_QWORD *)(v3 + 32) = v5;
  *a2 = v3;
  return result;
}

void sub_19126ABF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;

  v13 = a12;
  a12 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  nitro::ir::NodeMixin<nitro::ir::UNARYOPERATOR>::copy((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void nitro::ir::UNARYOPERATOR::node_type(char *a1@<X8>)
{
  a1[23] = 13;
  strcpy(a1, "UNARYOPERATOR");
}

uint64_t nitro::ir::UNARYOPERATOR::node_type_enum(nitro::ir::UNARYOPERATOR *this)
{
  return 8;
}

void nitro::ir::NodeMixin<nitro::ir::CALL>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  std::string __p;
  std::string v10;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  nitro::ir::print_tuple<2ul,unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a2, v4 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_19126AD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::CALL>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD *result;
  void *lpsrc[3];

  if (a1)
  {
    v5 = v3[1];
    v4 = v3[2];
    if (!v4)
      goto LABEL_7;
  }
  else
  {
    v3 = 0;
    v5 = MEMORY[8];
    v4 = MEMORY[0x10];
    if (!MEMORY[0x10])
    {
LABEL_7:
      v7 = 0;
      goto LABEL_8;
    }
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v4 + 8))(lpsrc);
  v6 = lpsrc[0];
  lpsrc[0] = 0;
  if (!v6)
    goto LABEL_7;
LABEL_8:
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>(v3 + 3, lpsrc);
  v8 = lpsrc[0];
  v9 = lpsrc[1];
  v10 = lpsrc[2];
  result = (_QWORD *)operator new();
  *result = off_1E2D5C228;
  result[1] = v5;
  result[2] = v7;
  result[3] = v8;
  result[4] = v9;
  result[5] = v10;
  *a2 = result;
  return result;
}

void sub_19126AEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::tuple<unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(&a9);
  _Unwind_Resume(a1);
}

void sub_19126AED8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void nitro::ir::CALL::node_type(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "CALL");
}

uint64_t nitro::ir::CALL::node_type_enum(nitro::ir::CALL *this)
{
  return 9;
}

void nitro::ir::NodeMixin<nitro::ir::MAKEOBJECT>::print(const void *a1, _QWORD *a2)
{
  void *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  std::string __p;
  std::string v10;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  nitro::ir::print_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a2, (uint64_t)v4 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_19126B02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

double nitro::ir::NodeMixin<nitro::ir::MAKEOBJECT>::copy@<D0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if (a1)
  nitro::ir::copy_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy((uint64_t)a1 + 8, (uint64_t)&v5);
  v3 = operator new();
  *(_QWORD *)v3 = off_1E2D5C0A8;
  *(_OWORD *)(v3 + 8) = v5;
  *(_QWORD *)(v3 + 24) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(v3 + 32) = v7;
  *(_QWORD *)(v3 + 48) = v8;
  *a2 = v3;
  return result;
}

void sub_19126B10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::tuple<std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void nitro::ir::MAKEOBJECT::node_type(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "MAKEOBJECT");
}

uint64_t nitro::ir::MAKEOBJECT::node_type_enum(nitro::ir::MAKEOBJECT *this)
{
  return 10;
}

void nitro::ir::NodeMixin<nitro::ir::WHILE>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  std::string __p;
  std::string v10;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  nitro::ir::print_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a2, v4 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_19126B260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::WHILE>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  _QWORD v10[3];

  if (!a1)
  {
    v3 = 0;
    v4 = MEMORY[8];
    if (MEMORY[8])
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v4 = v3[1];
  if (!v4)
    goto LABEL_5;
LABEL_3:
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v4 + 8))(v10);
  v5 = v10[0];
LABEL_6:
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>(v3 + 2, v10);
  v6 = v10[0];
  v7 = v10[1];
  v8 = v10[2];
  result = (_QWORD *)operator new();
  *result = off_1E2D5C468;
  result[1] = v5;
  result[2] = v6;
  result[3] = v7;
  result[4] = v8;
  *a2 = result;
  return result;
}

void sub_19126B37C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::tuple<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19126B390(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void nitro::ir::WHILE::node_type(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "WHILE");
}

uint64_t nitro::ir::WHILE::node_type_enum(nitro::ir::WHILE *this)
{
  return 11;
}

void nitro::ir::NodeMixin<nitro::ir::FOR>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126B490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

double nitro::ir::NodeMixin<nitro::ir::FOR>::copy@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;

  if (a1)
  nitro::ir::copy_tuple<4ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(a1 + 1, (uint64_t)v6);
  v3 = operator new();
  *(_QWORD *)v3 = off_1E2D5C1E8;
  v4 = v6[1];
  *(_OWORD *)(v3 + 8) = v6[0];
  *(_OWORD *)(v3 + 24) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(v3 + 40) = v7;
  *a2 = v3;
  return result;
}

void sub_19126B564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::tuple<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(&a9);
  _Unwind_Resume(a1);
}

void nitro::ir::FOR::node_type(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 5394246;
}

uint64_t nitro::ir::FOR::node_type_enum(nitro::ir::FOR *this)
{
  return 12;
}

void nitro::ir::NodeMixin<nitro::ir::FOREACH>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,unsigned long,std::vector<std::unique_ptr<nitro::ir::NODE>>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126B650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::FOREACH>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD v11[3];

  if (!a1)
  {
    v3 = 0;
    v4 = MEMORY[8];
    if (MEMORY[8])
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v4 = v3[1];
  if (!v4)
    goto LABEL_5;
LABEL_3:
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v4 + 8))(v11);
  v5 = v11[0];
LABEL_6:
  v6 = v3[2];
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>(v3 + 3, v11);
  v7 = v11[0];
  v8 = v11[1];
  v9 = v11[2];
  result = (_QWORD *)operator new();
  *result = off_1E2D5C5E8;
  result[1] = v5;
  result[2] = v6;
  result[3] = v7;
  result[4] = v8;
  result[5] = v9;
  *a2 = result;
  return result;
}

void sub_19126B774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::tuple<std::unique_ptr<nitro::ir::NODE>,unsigned long,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple(&a9);
  _Unwind_Resume(a1);
}

void sub_19126B788(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void nitro::ir::FOREACH::node_type(char *a1@<X8>)
{
  a1[23] = 7;
  strcpy(a1, "FOREACH");
}

uint64_t nitro::ir::FOREACH::node_type_enum(nitro::ir::FOREACH *this)
{
  return 13;
}

void nitro::ir::NodeMixin<nitro::ir::IF>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126B890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::IF>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  _QWORD v13[6];

  if (!a1)
  {
    v4 = 8;
    v3 = MEMORY[8];
    if (MEMORY[8])
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v3 = *(_QWORD *)v4;
  if (!*(_QWORD *)v4)
    goto LABEL_5;
LABEL_3:
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 8))(v13);
  v5 = v13[0];
LABEL_6:
  nitro::ir::copy_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(v4, (uint64_t)v13);
  v6 = v13[0];
  v7 = v13[1];
  v8 = v13[2];
  v9 = v13[3];
  v10 = v13[4];
  v11 = v13[5];
  result = (_QWORD *)operator new();
  *result = off_1E2D5C1A8;
  result[1] = v5;
  result[2] = v6;
  result[3] = v7;
  result[4] = v8;
  result[5] = v9;
  result[6] = v10;
  result[7] = v11;
  *a2 = result;
  return result;
}

void sub_19126B9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::tuple<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~tuple((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19126B9D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void nitro::ir::IF::node_type(char *a1@<X8>)
{
  a1[23] = 2;
  strcpy(a1, "IF");
}

uint64_t nitro::ir::IF::node_type_enum(nitro::ir::IF *this)
{
  return 14;
}

void nitro::ir::NodeMixin<nitro::ir::INDEXGET>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126BAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::INDEXGET>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  if (a1)
  {
    v4 = v3[1];
    if (v4)
      goto LABEL_3;
LABEL_6:
    v5 = 0;
    v6 = v3[2];
    if (v6)
      goto LABEL_4;
LABEL_7:
    v7 = 0;
    goto LABEL_8;
  }
  v3 = 0;
  v4 = MEMORY[8];
  if (!MEMORY[8])
    goto LABEL_6;
LABEL_3:
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 8))(&v9);
  v5 = v9;
  v6 = v3[2];
  if (!v6)
    goto LABEL_7;
LABEL_4:
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 8))(&v9);
  v7 = v9;
LABEL_8:
  result = (_QWORD *)operator new();
  *result = off_1E2D5C6A8;
  result[1] = v5;
  result[2] = v7;
  *a2 = result;
  return result;
}

void sub_19126BBEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void nitro::ir::INDEXGET::node_type(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "INDEXGET");
}

uint64_t nitro::ir::INDEXGET::node_type_enum(nitro::ir::INDEXGET *this)
{
  return 15;
}

void nitro::ir::NodeMixin<nitro::ir::INDEXPUT>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126BD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::INDEXPUT>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  if (a1)
  {
    v4 = v3[1];
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v3 = 0;
    v4 = MEMORY[8];
    if (MEMORY[8])
    {
LABEL_3:
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 8))(&v11);
      v5 = v11;
      v6 = v3[2];
      if (v6)
        goto LABEL_4;
LABEL_8:
      v7 = 0;
      v8 = v3[3];
      if (v8)
        goto LABEL_5;
LABEL_9:
      v9 = 0;
      goto LABEL_10;
    }
  }
  v5 = 0;
  v6 = v3[2];
  if (!v6)
    goto LABEL_8;
LABEL_4:
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 8))(&v11);
  v7 = v11;
  v8 = v3[3];
  if (!v8)
    goto LABEL_9;
LABEL_5:
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v8 + 8))(&v11);
  v9 = v11;
LABEL_10:
  result = (_QWORD *)operator new();
  *result = off_1E2D5C6E8;
  result[1] = v5;
  result[2] = v7;
  result[3] = v9;
  *a2 = result;
  return result;
}

void sub_19126BE5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    if (!v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void sub_19126BEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::tuple<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>::~tuple(&a9);
  _Unwind_Resume(a1);
}

void nitro::ir::INDEXPUT::node_type(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "INDEXPUT");
}

uint64_t nitro::ir::INDEXPUT::node_type_enum(nitro::ir::INDEXPUT *this)
{
  return 16;
}

void nitro::ir::NodeMixin<nitro::ir::HINT>::print(const void *a1, _QWORD *a2)
{
  void *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, (uint64_t)v4 + 8);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126BFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ir::NodeMixin<nitro::ir::HINT>::copy@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE v7[32];
  unsigned int v8;
  uint64_t v9;
  char v10;

  if (a1)
  nitro::ir::copy_tuple<2ul,nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>::copy((uint64_t)a1 + 8, (uint64_t)v7);
  result = operator new();
  v4 = result;
  *(_QWORD *)result = off_1E2D5C2A8;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 40) = -1;
  v5 = v8;
  if (v8 == -1)
  {
    *(_QWORD *)(result + 48) = v9;
    *a2 = result;
  }
  else
  {
    result = ((uint64_t (*)(char *, uint64_t, _BYTE *))off_1E2DD1978[v8])(&v10, result + 8, v7);
    *(_DWORD *)(v4 + 40) = v5;
    v6 = v8;
    *(_QWORD *)(v4 + 48) = v9;
    *a2 = v4;
    v9 = 0;
    if ((_DWORD)v6 != -1)
      return ((uint64_t (*)(char *, _BYTE *))off_1E2DD1908[v6])(&v10, v7);
  }
  return result;
}

void sub_19126C0EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::tuple<nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>::~tuple((uint64_t)va);
  _Unwind_Resume(a1);
}

void nitro::ir::HINT::node_type(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "HINT");
}

uint64_t nitro::ir::HINT::node_type_enum(nitro::ir::HINT *this)
{
  return 17;
}

void nitro::ir::NodeMixin<nitro::ir::ASSIGN>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126C1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::ASSIGN>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  if (a1)
  {
    v4 = v3[1];
    if (v4)
      goto LABEL_3;
LABEL_6:
    v5 = 0;
    v6 = v3[2];
    if (v6)
      goto LABEL_4;
LABEL_7:
    v7 = 0;
    goto LABEL_8;
  }
  v3 = 0;
  v4 = MEMORY[8];
  if (!MEMORY[8])
    goto LABEL_6;
LABEL_3:
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 8))(&v9);
  v5 = v9;
  v6 = v3[2];
  if (!v6)
    goto LABEL_7;
LABEL_4:
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 8))(&v9);
  v7 = v9;
LABEL_8:
  result = (_QWORD *)operator new();
  *result = off_1E2D5C4A8;
  result[1] = v5;
  result[2] = v7;
  *a2 = result;
  return result;
}

void sub_19126C2F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void nitro::ir::ASSIGN::node_type(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "ASSIGN");
}

uint64_t nitro::ir::ASSIGN::node_type_enum(nitro::ir::ASSIGN *this)
{
  return 18;
}

void nitro::ir::NodeMixin<nitro::ir::LIST>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::vector<std::unique_ptr<nitro::ir::NODE>>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126C41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::LIST>::copy@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD v7[3];

  if (a1)
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>(a1 + 1, v7);
  v3 = v7[0];
  v4 = v7[1];
  v5 = v7[2];
  result = (_QWORD *)operator new();
  *result = off_1E2D5C2E8;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  *a2 = result;
  return result;
}

void sub_19126C4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void nitro::ir::LIST::node_type(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "LIST");
}

uint64_t nitro::ir::LIST::node_type_enum(nitro::ir::LIST *this)
{
  return 19;
}

void nitro::ir::NodeMixin<nitro::ir::DICT>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  std::string __p;
  std::string v10;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    __p = v10;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  nitro::ir::print_element<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(a2, v4 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_19126C654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::DICT>::copy@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD v7[3];

  if (a1)
  nitro::ir::copy_element<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(a1 + 1, v7);
  v3 = v7[0];
  v4 = v7[1];
  v5 = v7[2];
  result = (_QWORD *)operator new();
  *result = off_1E2D5C268;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  *a2 = result;
  return result;
}

void sub_19126C730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::~vector[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void nitro::ir::DICT::node_type(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "DICT");
}

uint64_t nitro::ir::DICT::node_type_enum(nitro::ir::DICT *this)
{
  return 20;
}

void nitro::ir::NodeMixin<nitro::ir::TUPLE>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::vector<std::unique_ptr<nitro::ir::NODE>>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126C820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::TUPLE>::copy@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD v7[3];

  if (a1)
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>(a1 + 1, v7);
  v3 = v7[0];
  v4 = v7[1];
  v5 = v7[2];
  result = (_QWORD *)operator new();
  *result = off_1E2D5C3E8;
  result[1] = v3;
  result[2] = v4;
  result[3] = v5;
  *a2 = result;
  return result;
}

void sub_19126C8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void nitro::ir::TUPLE::node_type(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "TUPLE");
}

uint64_t nitro::ir::TUPLE::node_type_enum(nitro::ir::TUPLE *this)
{
  return 21;
}

void nitro::ir::NodeMixin<nitro::ir::TUPLEGET>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,unsigned long>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126C9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::TUPLEGET>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  if (!a1)
  {
    v3 = 0;
    v4 = MEMORY[8];
    if (MEMORY[8])
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v4 = v3[1];
  if (!v4)
    goto LABEL_5;
LABEL_3:
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 8))(&v8);
  v5 = v8;
LABEL_6:
  v6 = v3[2];
  result = (_QWORD *)operator new();
  *result = off_1E2D5C728;
  result[1] = v5;
  result[2] = v6;
  *a2 = result;
  return result;
}

void sub_19126CAE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void nitro::ir::TUPLEGET::node_type(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "TUPLEGET");
}

uint64_t nitro::ir::TUPLEGET::node_type_enum(nitro::ir::TUPLEGET *this)
{
  return 22;
}

void nitro::ir::NodeMixin<nitro::ir::THIS>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  std::string __p;
  std::string v9;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    __p = v9;
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_19126CC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::THIS>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  if (a1)
  result = (_QWORD *)operator new();
  *result = off_1E2D5C328;
  *a2 = result;
  return result;
}

void nitro::ir::THIS::node_type(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "THIS");
}

uint64_t nitro::ir::THIS::node_type_enum(nitro::ir::THIS *this)
{
  return 23;
}

void nitro::ir::NodeMixin<nitro::ir::RETURN>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string __p;
  std::string v6;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t)&__p, v4 + 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

void sub_19126CDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::RETURN>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 8))(&v6);
    v4 = v6;
  }
  else
  {
    v4 = 0;
  }
  result = (_QWORD *)operator new();
  *result = off_1E2D5C568;
  result[1] = v4;
  *a2 = result;
  return result;
}

void sub_19126CE90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

void nitro::ir::RETURN::node_type(char *a1@<X8>)
{
  a1[23] = 6;
  strcpy(a1, "RETURN");
}

uint64_t nitro::ir::RETURN::node_type_enum(nitro::ir::RETURN *this)
{
  return 24;
}

void nitro::ir::NodeMixin<nitro::ir::BREAK>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  std::string __p;
  std::string v9;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    __p = v9;
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_19126CFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::BREAK>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  if (a1)
  result = (_QWORD *)operator new();
  *result = off_1E2D5C368;
  *a2 = result;
  return result;
}

void nitro::ir::BREAK::node_type(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "BREAK");
}

uint64_t nitro::ir::BREAK::node_type_enum(nitro::ir::BREAK *this)
{
  return 25;
}

void nitro::ir::NodeMixin<nitro::ir::CONTINUE>::print(const void *a1, _QWORD *a2)
{
  _QWORD *v4;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v7;
  std::string __p;
  std::string v9;

  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a1 + 16))(&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  else
    __p = v9;
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(", 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
}

void sub_19126D1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::NodeMixin<nitro::ir::CONTINUE>::copy@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  if (a1)
  result = (_QWORD *)operator new();
  *result = off_1E2D5C628;
  *a2 = result;
  return result;
}

void nitro::ir::CONTINUE::node_type(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "CONTINUE");
}

uint64_t nitro::ir::CONTINUE::node_type_enum(nitro::ir::CONTINUE *this)
{
  return 26;
}

void **std::vector<nitro::variable_type>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 40;
        v6 = *((unsigned int *)v3 - 2);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, char *))off_1E2DD1908[v6])(&v8, v3 - 40);
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 40;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::~vector[abi:ne180100](void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v3 - 32);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__tuple_leaf<0ul,nitro::flexible_type,false>::~__tuple_leaf(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  switch(*(_BYTE *)(a1 + 8))
  {
    case 2:
      v2 = *(unint64_t **)a1;
      do
      {
        v3 = __ldaxr(v2);
        v4 = v3 - 1;
      }
      while (__stlxr(v4, v2));
      if (!v4)
      {
        v5 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v5 + 31) < 0)
            operator delete((void *)v5[1]);
          v6 = v5;
          v7 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v8 = *(unint64_t **)a1;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (unint64_t)v12;
            operator delete(v12);
          }
          v6 = v11;
          v7 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v13 = *(unint64_t **)a1;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v17 = v16[1];
          if (!v17)
            goto LABEL_35;
          v18 = v16[2];
          v19 = (void *)v16[1];
          if (v18 != v17)
          {
            do
            {
              v18 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v16 + 3), v18);
            }
            while (v18 != v17);
            v19 = (void *)v16[1];
          }
          v16[2] = v17;
          goto LABEL_34;
        }
      }
      break;
    case 5:
      v20 = *(unint64_t **)a1;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        v16 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v23 = v16[1];
          if (v23)
          {
            v24 = v16[2];
            v25 = (void *)v16[1];
            if (v24 != v23)
            {
              do
                v24 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v24 - 32);
              while (v24 != v23);
              v25 = (void *)v16[1];
            }
            v16[2] = v23;
            v19 = v25;
LABEL_34:
            operator delete(v19);
          }
LABEL_35:
          v6 = v16;
          v7 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 9:
      v26 = *(unint64_t **)a1;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v30 = (void *)v29[7];
          if (v30)
          {
            v29[8] = (unint64_t)v30;
            operator delete(v30);
          }
          v31 = (void *)v29[4];
          if (v31)
          {
            v29[5] = (unint64_t)v31;
            operator delete(v31);
          }
          v32 = (std::__shared_weak_count *)v29[3];
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v6 = v29;
          v7 = 0x10B0C4002311774;
LABEL_50:
          MEMORY[0x19401CD90](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  return a1;
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  char v16;

  v2 = *(_QWORD **)(a1 + 96);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 104);
    v4 = *(void **)(a1 + 96);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v4);
  }
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = v7;
    operator delete(v7);
  }
  v8 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD1908[v8])(&v15, a1 + 32);
  *(_DWORD *)(a1 + 64) = -1;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(void **)(a1 + 8);
    if (v10 != v9)
    {
      do
      {
        v12 = v10 - 40;
        v13 = *(unsigned int *)(v10 - 8);
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, uint64_t))off_1E2DD1908[v13])(&v16, v10 - 40);
        *(_DWORD *)(v10 - 8) = -1;
        v10 -= 40;
      }
      while (v12 != v9);
      v11 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v9;
    operator delete(v11);
  }
  return a1;
}

uint64_t std::__tuple_leaf<2ul,nitro::variable_type,false>::~__tuple_leaf(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD1908[v2])(&v4, a1);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void **std::__tuple_leaf<1ul,std::vector<nitro::variable_type>,false>::~__tuple_leaf(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 40;
        v6 = *((unsigned int *)v3 - 2);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, char *))off_1E2DD1908[v6])(&v8, v3 - 40);
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 40;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nitro::ir::binary_op_enum> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t *v8;
  std::string *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;

  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(a1, a2, &v15, &v14, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (char *)operator new(0x40uLL);
    v9 = (std::string *)(v7 + 32);
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
      *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    }
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a4 + 24);
    v10 = v15;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v8 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_19126D8CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

_QWORD *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  std::string *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;

  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__find_equal<std::string>(a1, a2, &v15, &v14, a3);
  v7 = (_QWORD *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = operator new(0x38uLL);
    v9 = (std::string *)(v7 + 4);
    if (*(char *)(a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
      v7[6] = *(_QWORD *)(a4 + 16);
    }
    v10 = v15;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v10;
    *v8 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_19126D9FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type::flexible_type<std::string>(uint64_t a1, __int128 *a2)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  nitro::flexible_type::operator=<std::string>((uint64_t *)a1, a2);
  return a1;
}

void sub_19126DA3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  switch(*(_BYTE *)(v1 + 8))
  {
    case 2:
      if ((nitro::flexible_type::flexible_type<std::string>((unint64_t **)v1) & 1) != 0)
        break;
      goto LABEL_9;
    case 3:
      if ((nitro::flexible_type::flexible_type<std::string>((unint64_t **)v1) & 1) != 0)
        break;
      goto LABEL_9;
    case 4:
      if ((nitro::flexible_type::flexible_type<std::string>((unint64_t **)v1) & 1) != 0)
        break;
      goto LABEL_9;
    case 5:
      if ((nitro::flexible_type::flexible_type<std::string>((unint64_t **)v1) & 1) == 0)
        goto LABEL_9;
      break;
    case 9:
      if ((nitro::flexible_type::flexible_type<std::string>((unint64_t **)v1) & 1) != 0)
        break;
LABEL_9:
      *(_QWORD *)v1 = 0;
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::flexible_type::operator=<std::string>(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  _QWORD *v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t *v42;
  std::string *v43;
  __int128 v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  int64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  const nitro::ndarray_container *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;

  v4 = 0x1012C404EF22A49;
  switch(*((_BYTE *)a1 + 8))
  {
    case 2:
      v5 = (unint64_t *)*a1;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_51;
        if (*((char *)v8 + 31) < 0)
          operator delete((void *)v8[1]);
        v9 = v8;
        v10 = 0x1012C404EF22A49;
        goto LABEL_50;
      }
      break;
    case 3:
      v18 = (unint64_t *)*a1;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_51;
        v22 = (void *)v21[1];
        if (v22)
        {
          v21[2] = (unint64_t)v22;
          operator delete(v22);
        }
        v9 = v21;
        v10 = 0x1080C409938AC02;
        goto LABEL_50;
      }
      break;
    case 4:
      v11 = (unint64_t *)*a1;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_51;
        v15 = v14[1];
        if (v15)
        {
          v16 = v14[2];
          v17 = (void *)v14[1];
          if (v16 != v15)
          {
            do
            {
              v16 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v14 + 3), v16);
            }
            while (v16 != v15);
            v17 = (void *)v14[1];
          }
          v14[2] = v15;
          goto LABEL_34;
        }
        goto LABEL_35;
      }
      break;
    case 5:
      v23 = (unint64_t *)*a1;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v14 = (unint64_t *)*a1;
        if (!*a1)
          goto LABEL_51;
        v26 = v14[1];
        if (v26)
        {
          v27 = v14[2];
          v28 = (void *)v14[1];
          if (v27 != v26)
          {
            do
              v27 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v27 - 32);
            while (v27 != v26);
            v28 = (void *)v14[1];
          }
          v14[2] = v26;
          v17 = v28;
LABEL_34:
          operator delete(v17);
        }
LABEL_35:
        v9 = v14;
        v10 = 0x1020C405E66F15BLL;
        goto LABEL_50;
      }
      break;
    case 9:
      v29 = (unint64_t *)*a1;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = (unint64_t *)*a1;
        if (*a1)
        {
          v33 = (void *)v32[7];
          if (v33)
          {
            v32[8] = (unint64_t)v33;
            operator delete(v33);
          }
          v34 = (void *)v32[4];
          if (v34)
          {
            v32[5] = (unint64_t)v34;
            operator delete(v34);
          }
          v35 = (std::__shared_weak_count *)v32[3];
          if (v35)
          {
            p_shared_owners = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v9 = v32;
          v10 = 0x10B0C4002311774;
LABEL_50:
          MEMORY[0x19401CD90](v9, v10);
        }
LABEL_51:
        *a1 = 0;
      }
      break;
    default:
      break;
  }
  *a1 = 0;
  *((_BYTE *)a1 + 8) = 2;
  v38 = (_QWORD *)operator new();
  *v38 = 0;
  v38[1] = 0;
  v39 = (void **)(v38 + 1);
  v38[2] = 0;
  v38[3] = 0;
  *a1 = (uint64_t)v38;
  *v38 = 1;
  v40 = (uint64_t)v38;
  switch(*((_BYTE *)a1 + 8))
  {
    case 2:
      if (*v38 != 1)
      {
        v41 = (_QWORD *)operator new();
        v42 = (unint64_t *)*a1;
        *v41 = *(_QWORD *)*a1;
        v43 = (std::string *)(v41 + 1);
        if (*((char *)v42 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v43, (const std::string::value_type *)v42[1], v42[2]);
        }
        else
        {
          v44 = *(_OWORD *)(v42 + 1);
          v41[3] = v42[3];
          *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
        }
        *a1 = (uint64_t)v41;
        *v41 = 1;
        do
        {
          v68 = __ldaxr((unint64_t *)v40);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, (unint64_t *)v40));
        if (!v69)
        {
          if ((*(char *)(v40 + 31) & 0x80000000) == 0)
            goto LABEL_87;
          v59 = *v39;
          goto LABEL_86;
        }
      }
      break;
    case 3:
      if (*v38 != 1)
      {
        v4 = 0x1080C409938AC02;
        v49 = (_QWORD *)operator new();
        v50 = (unint64_t *)*a1;
        v51 = *(_QWORD *)*a1;
        v49[1] = 0;
        *v49 = v51;
        v49[2] = 0;
        v49[3] = 0;
        v53 = (_BYTE *)v50[1];
        v52 = (_BYTE *)v50[2];
        v54 = v52 - v53;
        if (v52 != v53)
        {
          if (v54 < 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v55 = (char *)operator new(v52 - v53);
          v49[1] = v55;
          v56 = &v55[8 * (v54 >> 3)];
          v49[3] = v56;
          memcpy(v55, v53, v54);
          v49[2] = v56;
        }
        *a1 = (uint64_t)v49;
        *v49 = 1;
        do
        {
          v57 = __ldaxr((unint64_t *)v40);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, (unint64_t *)v40));
        if (!v58)
        {
          v59 = *v39;
          if (*v39)
          {
            *(_QWORD *)(v40 + 16) = v59;
LABEL_86:
            operator delete(v59);
          }
          goto LABEL_87;
        }
      }
      break;
    case 4:
      if (*v38 != 1)
      {
        v4 = 0x1020C405E66F15BLL;
        v45 = (_QWORD *)operator new();
        v46 = (unint64_t *)*a1;
        *v45 = *(_QWORD *)*a1;
        v45[2] = 0;
        v45[3] = 0;
        v45[1] = 0;
        std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(v45 + 1, (_QWORD *)v46[1], (_QWORD *)v46[2], (uint64_t)(v46[2] - v46[1]) >> 4);
        *a1 = (uint64_t)v45;
        *v45 = 1;
        do
        {
          v47 = __ldaxr((unint64_t *)v40);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, (unint64_t *)v40));
        if (!v48)
        {
          std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v40);
          goto LABEL_87;
        }
      }
      break;
    case 5:
      if (*v38 != 1)
      {
        v4 = 0x1020C405E66F15BLL;
        v60 = operator new();
        v61 = (unint64_t *)*a1;
        *(_QWORD *)v60 = *(_QWORD *)*a1;
        *(_QWORD *)(v60 + 16) = 0;
        *(_QWORD *)(v60 + 24) = 0;
        *(_QWORD *)(v60 + 8) = 0;
        std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)(v60 + 8), (char *)v61[1], (char *)v61[2], (uint64_t)(v61[2] - v61[1]) >> 5);
        *a1 = v60;
        *(_QWORD *)v60 = 1;
        do
        {
          v62 = __ldaxr((unint64_t *)v40);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, (unint64_t *)v40));
        if (!v63)
        {
          std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v40);
          goto LABEL_87;
        }
      }
      break;
    case 9:
      if (*v38 != 1)
      {
        v4 = 0x10B0C4002311774;
        v64 = (_QWORD *)operator new();
        v65 = (const nitro::ndarray_container *)(*a1 + 8);
        *v64 = *(_QWORD *)*a1;
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v64 + 1), v65);
        *a1 = (uint64_t)v64;
        *v64 = 1;
        do
        {
          v66 = __ldaxr((unint64_t *)v40);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, (unint64_t *)v40));
        if (!v67)
        {
          std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((_QWORD *)v40);
LABEL_87:
          MEMORY[0x19401CD90](v40, v4);
        }
      }
      break;
    default:
      break;
  }
  v70 = *a1 + 8;
  if (*(char *)(*a1 + 31) < 0)
    operator delete(*(void **)v70);
  v71 = *a2;
  *(_QWORD *)(v70 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v70 = v71;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  return a1;
}

void sub_19126E0B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_sequence<nitro::ir::NODE>(nitro::SExp const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!sexp.is_value", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  std::vector<std::unique_ptr<nitro::ir::NODE>> nitro::ir::parse_sequence<nitro::ir::NODE>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19126E3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<nitro::ir::NODE>> nitro::ir::parse_sequence<nitro::ir::NODE>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19126E544(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19126E558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19126E550);
}

_QWORD *std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_26;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_34;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_26:
    operator delete(v15);
  return v13;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJmNS_6vectorIN5nitro13variable_typeENS_9allocatorIS5_EEEES5_NS3_ImNS6_ImEEEENS3_INS_10unique_ptrINS4_2ir4NODEENS_14default_deleteISD_EEEENS6_ISG_EEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4EEJmS8_S5_SA_SI_EJEJEJRmRS8_RS5_RSA_SI_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSQ_IJDpT2_EEEDpOT3_(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  char v16[2];

  *(_QWORD *)a1 = *a2;
  std::vector<nitro::variable_type>::vector((_QWORD *)(a1 + 8), a3);
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  v10 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_1E2DD1940[v10])(v16, a1 + 32, a4);
    *(_DWORD *)(a1 + 64) = v10;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = *(const void **)a5;
  v12 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v12)
  {
    if (v12 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(v12);
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v13;
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)(a1 + 88) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 80) = v14;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a6;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a6 + 16);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  return a1;
}

void sub_19126E838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v13 + 64);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD1908[v17])(&a13, v15);
  *(_DWORD *)(v13 + 64) = -1;
  std::__tuple_leaf<1ul,std::vector<nitro::variable_type>,false>::~__tuple_leaf(v14);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<nitro::variable_type>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 3);
    if (v7 >= 0x666666666666667)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[40 * v7];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::variable_type>,nitro::variable_type*,nitro::variable_type*,nitro::variable_type*>(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_19126E954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  void *v14;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  uint64_t v20;

  v13[1] = v14;
  v16 = (char *)*v13;
  if (*v13)
  {
    v17 = (char *)v13[1];
    v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        v19 = v17 - 40;
        v20 = *((unsigned int *)v17 - 2);
        if ((_DWORD)v20 != -1)
          ((void (*)(char *, char *))off_1E2DD1908[v20])(&a13, v17 - 40);
        *((_DWORD *)v17 - 2) = -1;
        v17 -= 40;
      }
      while (v19 != v16);
      v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse_sequence<nitro::ir::DEFVAR>(nitro::SExp const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!sexp.is_value", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  std::vector<std::unique_ptr<nitro::ir::DEFVAR>> nitro::ir::parse_sequence<nitro::ir::DEFVAR>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19126EC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<nitro::ir::DEFVAR>> nitro::ir::parse_sequence<nitro::ir::DEFVAR>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19126EDE0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19126EDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19126EDECLL);
}

void nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!sexp.is_value", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>> nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19126F074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>> nitro::ir::parse_sequence<nitro::ir::DEFMEMBERFUN>(nitro::SExp const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/syntax_tree.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19126F218(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19126F22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19126F224);
}

uint64_t **std::__tree<std::__value_type<std::string,nitro::ir::binary_op_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::ir::binary_op_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::ir::binary_op_enum>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  std::string *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x40uLL);
    v24 = (std::string *)(v23 + 32);
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    *((_DWORD *)v23 + 14) = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_19126F3D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_OWORD *std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::__push_back_slow_path<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(_QWORD *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  float64x2x2_t v31;

  v3 = a1[1] - *a1;
  v4 = (v3 >> 4) + 1;
  if (v4 >> 60)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v17 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v6 = 0xFFFFFFFFFFFFFFFLL;
  if (!v17)
    v6 = v4;
  if (v6 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = 16 * v6;
  v9 = (char *)operator new(16 * v6);
  v10 = &v9[16 * (v3 >> 4)];
  v11 = &v9[v8];
  v12 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v10 = v12;
  v13 = v10 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_28;
  }
  v16 = (unint64_t)&v15[-*a1 - 16];
  if (v16 < 0x90)
    goto LABEL_17;
  v17 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0) - 16] >= v10 || &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] >= v15;
  if (!v17)
    goto LABEL_17;
  v18 = (v16 >> 4) + 1;
  v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFELL);
  v20 = &v10[-v19];
  v21 = &v15[-v19];
  v22 = (double *)(v10 - 32);
  v23 = (const double *)(v15 - 32);
  v24 = v18 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v31 = vld2q_f64(v23);
    *(_OWORD *)v23 = 0uLL;
    *((_OWORD *)v23 + 1) = 0uLL;
    v23 -= 4;
    vst2q_f64(v22, v31);
    v22 -= 4;
    v24 -= 2;
  }
  while (v24);
  v10 = v20;
  v15 = v21;
  if (v18 != (v18 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_17:
    v20 = v10;
    do
    {
      v25 = *((_QWORD *)v15 - 2);
      v15 -= 16;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v20 - 2) = v25;
      v20 -= 16;
      v26 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v20 + 1) = v26;
    }
    while (v15 != v14);
  }
  v27 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v20;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v27)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      *((_QWORD *)v15 - 1) = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
      v29 = *((_QWORD *)v15 - 2);
      *((_QWORD *)v15 - 2) = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
      v15 -= 16;
    }
    while (v15 != v27);
    v15 = v27;
  }
  if (v15)
LABEL_28:
    operator delete(v15);
  return v13;
}

char *std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__emplace_hint_unique_key_args<nitro::ir::binary_op_enum,std::pair<nitro::ir::binary_op_enum const,std::string> const&>(_QWORD **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t *v8;
  std::string *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;

  v6 = std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__find_equal<nitro::ir::binary_op_enum>(a1, a2, &v15, &v14, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (char *)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *(_DWORD *)a4;
    v9 = (std::string *)(v7 + 40);
    if (*(char *)(a4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 8);
      *((_QWORD *)v7 + 7) = *(_QWORD *)(a4 + 24);
    }
    v10 = v15;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v10;
    *v8 = (uint64_t)v7;
    v11 = (_QWORD *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_19126F68C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::__find_equal<nitro::ir::binary_op_enum>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
    }
    else
    {
      v19 = a1 + 1;
    }
LABEL_25:
    *a3 = v19;
    return v5;
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
      }
      else
      {
        v23 = a1 + 1;
      }
LABEL_41:
      *a3 = v23;
      return v5;
    }
  }
}

void std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<nitro::ir::binary_op_enum,std::string>,std::__map_value_compare<nitro::ir::binary_op_enum,std::__value_type<nitro::ir::binary_op_enum,std::string>,std::less<nitro::ir::binary_op_enum>,true>,std::allocator<std::__value_type<nitro::ir::binary_op_enum,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

_QWORD *nitro::ir::print_element<unsigned long,nitro::variable_type>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  nitro::operator<<(a1, (int *)(a3 + 8));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

uint64_t nitro::ir::copy_tuple<1ul,unsigned long,nitro::variable_type>::copy@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t (*v4)();
  _BYTE v5[32];
  int v6;
  _BYTE v7[32];
  int v8;
  char v9;

  v7[0] = 0;
  v8 = -1;
  v3 = *(unsigned int *)(result + 40);
  if ((_DWORD)v3 == -1)
  {
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 32) = -1;
  }
  else
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_1E2DD1940[v3])(&v9, v7, result + 8);
    v8 = v3;
    v5[0] = 0;
    v6 = -1;
    v4 = off_1E2DD1978[v3];
    ((void (*)(char *, _BYTE *, _BYTE *))v4)(&v9, v5, v7);
    v6 = v3;
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(a2 + 32) = -1;
    result = ((uint64_t (*)(char *, uint64_t, _BYTE *))v4)(&v9, a2, v5);
    *(_DWORD *)(a2 + 32) = v3;
    if (v6 != -1)
      result = ((uint64_t (*)(char *, _BYTE *))off_1E2DD1908[v6])(&v9, v5);
  }
  if (v8 != -1)
    return ((uint64_t (*)(_BYTE *, _BYTE *))off_1E2DD1908[v8])(v5, v7);
  return result;
}

void sub_19126FAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1)
    ((void (*)(char *, char *))off_1E2DD1908[a19])(&a10, &a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::tuple<nitro::variable_type>::~tuple(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD1908[v2])(&v4, a1);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void nitro::ir::print_element<nitro::flexible_type>(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_19126FBB8(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 __p, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t __pa,uint64_t __p_8,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  std::ios_base *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  uint64_t v69;
  void *v70[2];
  unsigned __int8 v71;
  _QWORD v72[2];
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  char v76;
  int v77;
  uint64_t v78;

  v58 = MEMORY[0x1E0DE4FD0];
  v59 = MEMORY[0x1E0DE4FD0] + 104;
  v78 = MEMORY[0x1E0DE4FD0] + 104;
  v60 = MEMORY[0x1E0DE4FD0] + 64;
  v61 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v62 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v63 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v73 = MEMORY[0x1E0DE4FD0] + 64;
  v72[0] = v62;
  *(_QWORD *)((char *)v72 + *(_QWORD *)(v62 - 24)) = v63;
  v72[1] = 0;
  v64 = (std::ios_base *)((char *)v72 + *(_QWORD *)(v72[0] - 24));
  std::ios_base::init(v64, &v74);
  v64[1].__vftable = 0;
  v64[1].__fmtflags_ = -1;
  v65 = v61[5];
  v73 = v61[4];
  *(uint64_t *)((char *)&v73 + *(_QWORD *)(v73 - 24)) = v65;
  v72[0] = v61[1];
  *(_QWORD *)((char *)v72 + *(_QWORD *)(v72[0] - 24)) = v61[6];
  v78 = v59;
  v72[0] = v58 + 24;
  v73 = v60;
  std::streambuf::basic_streambuf();
  v66 = MEMORY[0x1E0DE4FB8];
  v74 = MEMORY[0x1E0DE4FB8] + 16;
  v75 = 0u;
  *(_OWORD *)(v57 + 104) = 0u;
  v77 = 24;
  std::ostream::operator<<();
  std::stringbuf::str();
  v72[0] = *v61;
  v67 = v61[9];
  *(_QWORD *)((char *)v72 + *(_QWORD *)(v72[0] - 24)) = v61[8];
  v73 = v67;
  v74 = v66 + 16;
  if (v76 < 0)
    operator delete((void *)v75);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v78);
  if ((v71 & 0x80u) == 0)
    v68 = v70;
  else
    v68 = (void **)v70[0];
  if ((v71 & 0x80u) == 0)
    v69 = v71;
  else
    v69 = (uint64_t)v70[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v68, v69);
  if ((char)v71 < 0)
    operator delete(v70[0]);
}

void sub_19126FF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](a10);
  _Unwind_Resume(a1);
}

void sub_19126FF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::print_tuple<4ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(_QWORD *a1, uint64_t a2)
{
  int *v4;
  int *i;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v4 = *(int **)(a2 + 8);
  for (i = *(int **)(a2 + 16); v4 != i; v4 += 10)
  {
    nitro::operator<<(a1, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  nitro::operator<<(a1, (int *)(a2 + 32));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  return nitro::ir::print_tuple<2ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, (_QWORD *)a2);
}

_QWORD *nitro::ir::print_tuple<2ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v4 = a2[9];
  v5 = a2[10];
  while (v4 != v5)
  {
    v4 += 8;
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v6 = (_QWORD *)a2[12];
  for (i = (_QWORD *)a2[13]; v6 != i; ++v6)
  {
    if (*v6)
      (**(void (***)(_QWORD, _QWORD *))*v6)(*v6, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

char **nitro::ir::copy_tuple<5ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  v3 = *a1;
  nitro::ir::copy_tuple<4ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy((uint64_t)a1, (uint64_t)&v6);
  *(_QWORD *)a2 = v3;
  *(_OWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  v6 = 0uLL;
  v7 = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 64) = -1;
  v4 = v9;
  if (v9 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t *))off_1E2DD1978[v9])(&v14, a2 + 32, &v8);
    *(_DWORD *)(a2 + 64) = v4;
  }
  *(_OWORD *)(a2 + 72) = v10;
  *(_QWORD *)(a2 + 88) = v11;
  v10 = 0uLL;
  *(_OWORD *)(a2 + 96) = v12;
  *(_QWORD *)(a2 + 112) = v13;
  v11 = 0;
  v12 = 0uLL;
  v13 = 0;
  return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl((char **)&v6);
}

void nitro::ir::copy_tuple<4ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  int v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;

  nitro::ir::copy_element<nitro::variable_type>((char *)(a1 + 8), (uint64_t)&v22);
  v4 = v22;
  v5 = v23;
  v19 = v22;
  v20 = v23;
  v6 = v24;
  v21 = v24;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  nitro::ir::copy_tuple<3ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(a1, (uint64_t)v13);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 56) = -1;
  v7 = v14;
  if (v14 != -1)
  {
    ((void (*)(char *, uint64_t, _BYTE *))off_1E2DD1978[v14])(&v25, a2 + 24, v13);
    *(_DWORD *)(a2 + 56) = v7;
  }
  *(_OWORD *)(a2 + 64) = v15;
  *(_QWORD *)(a2 + 80) = v16;
  v15 = 0uLL;
  *(_OWORD *)(a2 + 88) = v17;
  *(_QWORD *)(a2 + 104) = v18;
  v16 = 0;
  v17 = 0uLL;
  v18 = 0;
  if (v14 != -1)
    ((void (*)(char *, _BYTE *))off_1E2DD1908[v14])(&v25, v13);
  v8 = v22;
  if (v22)
  {
    v9 = v23;
    v10 = v22;
    if (v23 != v22)
    {
      do
      {
        v11 = v9 - 40;
        v12 = *((unsigned int *)v9 - 2);
        if ((_DWORD)v12 != -1)
          ((void (*)(_BYTE *, char *))off_1E2DD1908[v12])(v13, v9 - 40);
        *((_DWORD *)v9 - 2) = -1;
        v9 -= 40;
      }
      while (v11 != v8);
      v10 = v22;
    }
    v23 = v8;
    operator delete(v10);
  }
}

void sub_1912703A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  std::tuple<std::vector<nitro::variable_type>>::~tuple((void **)va);
  std::vector<nitro::variable_type>::~vector[abi:ne180100]((void **)(v12 - 80));
  _Unwind_Resume(a1);
}

char *nitro::ir::copy_element<nitro::variable_type>@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _BYTE v8[32];
  int v9;
  char v10;
  char v11;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *(_QWORD *)result;
  v3 = *((_QWORD *)result + 1);
  if (*(_QWORD *)result != v3)
  {
    do
    {
      v8[0] = 0;
      v9 = -1;
      v5 = *(unsigned int *)(v2 + 32);
      if ((_DWORD)v5 != -1)
      {
        ((void (*)(char *, _BYTE *, uint64_t))off_1E2DD1940[v5])(&v10, v8, v2);
        v9 = v5;
      }
      v6 = *(_QWORD *)(a2 + 8);
      if (v6 >= *(_QWORD *)(a2 + 16))
      {
        result = std::vector<nitro::variable_type>::__push_back_slow_path<nitro::variable_type>((char **)a2, (uint64_t)v8);
      }
      else
      {
        *(_BYTE *)v6 = 0;
        *(_DWORD *)(v6 + 32) = -1;
        v7 = v9;
        if (v9 != -1)
        {
          ((void (*)(char *, unint64_t, _BYTE *))off_1E2DD1978[v9])(&v11, v6, v8);
          *(_DWORD *)(v6 + 32) = v7;
        }
        result = (char *)(v6 + 40);
      }
      *(_QWORD *)(a2 + 8) = result;
      if (v9 != -1)
        result = (char *)((uint64_t (*)(char *, _BYTE *))off_1E2DD1908[v9])(&v11, v8);
      v2 += 40;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1912704E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, int a15, __int16 a16, char a17, char a18)
{
  void **v18;

  nitro::variable_type::~variable_type((nitro::variable_type *)&a9);
  std::vector<nitro::variable_type>::~vector[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void nitro::ir::copy_tuple<3ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _BYTE v10[32];
  int v11;
  _BYTE v12[32];
  int v13;
  char v14;

  v12[0] = 0;
  v13 = -1;
  v4 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v4 == -1)
  {
    v10[0] = 0;
    v11 = -1;
  }
  else
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))off_1E2DD1940[v4])(v10, v12, a1 + 32);
    v13 = v4;
    v10[0] = 0;
    v11 = -1;
    ((void (*)(__int128 *, _BYTE *, _BYTE *))off_1E2DD1978[v4])(&v6, v10, v12);
    v11 = v4;
  }
  nitro::ir::copy_tuple<2ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(a1, (uint64_t)&v6);
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  v5 = v11;
  if (v11 != -1)
  {
    ((void (*)(char *, uint64_t, _BYTE *))off_1E2DD1978[v11])(&v14, a2, v10);
    *(_DWORD *)(a2 + 32) = v5;
  }
  *(_OWORD *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 56) = v7;
  *(_OWORD *)(a2 + 64) = v8;
  *(_QWORD *)(a2 + 80) = v9;
  if (v11 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E2DD1908[v11])(&v6, v10);
  if (v13 != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E2DD1908[v13])(&v6, v12);
}

void sub_191270684(_Unwind_Exception *exception_object, ...)
{
  uint64_t v1;
  uint64_t v3;
  va_list va;

  va_start(va, exception_object);
  v3 = *(unsigned int *)(v1 - 48);
  if ((_DWORD)v3 != -1)
    ((void (*)(uint64_t *, uint64_t))off_1E2DD1908[v3])((uint64_t *)va, v1 - 80);
  _Unwind_Resume(exception_object);
}

void sub_1912706B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  std::tuple<nitro::variable_type>::~tuple((uint64_t)va);
  nitro::variable_type::~variable_type((nitro::variable_type *)(v8 - 80));
  _Unwind_Resume(a1);
}

void **std::tuple<std::vector<nitro::variable_type>>::~tuple(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 40;
        v6 = *((unsigned int *)v3 - 2);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, char *))off_1E2DD1908[v6])(&v8, v3 - 40);
        *((_DWORD *)v3 - 2) = -1;
        v3 -= 40;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<nitro::variable_type>::__push_back_slow_path<nitro::variable_type>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v20;
  char v21;
  char v22;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v5];
  *v10 = 0;
  *((_DWORD *)v10 + 8) = -1;
  v11 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v11 != -1)
  {
    ((void (*)(char *, char *, uint64_t))off_1E2DD1978[v11])(&v20, v10, a2);
    *((_DWORD *)v10 + 8) = v11;
    v3 = *a1;
    v4 = a1[1];
  }
  v12 = &v9[40 * v8];
  v13 = v10 + 40;
  if (v4 == v3)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v12;
    if (!v3)
      return v13;
    goto LABEL_25;
  }
  v14 = 0;
  do
  {
    v10[v14 - 40] = 0;
    *(_DWORD *)&v10[v14 - 8] = -1;
    v15 = *(unsigned int *)&v4[v14 - 8];
    if ((_DWORD)v15 != -1)
    {
      ((void (*)(char *, char *, char *))off_1E2DD1978[v15])(&v21, &v10[v14 - 40], &v4[v14 - 40]);
      *(_DWORD *)&v10[v14 - 8] = v15;
    }
    v14 -= 40;
  }
  while (&v4[v14] != v3);
  v16 = *a1;
  v3 = a1[1];
  v13 = v10 + 40;
  *a1 = &v10[v14];
  a1[1] = v10 + 40;
  a1[2] = v12;
  if (v3 != v16)
  {
    do
    {
      v17 = v3 - 40;
      v18 = *((unsigned int *)v3 - 2);
      if ((_DWORD)v18 != -1)
        ((void (*)(char *, char *))off_1E2DD1908[v18])(&v22, v3 - 40);
      *((_DWORD *)v3 - 2) = -1;
      v3 -= 40;
    }
    while (v17 != v16);
    v3 = v16;
  }
  if (v3)
LABEL_25:
    operator delete(v3);
  return v13;
}

void nitro::ir::copy_tuple<2ul,unsigned long,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  void *__p[2];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  nitro::ir::copy_element<unsigned long>((uint64_t **)(a1 + 72), (char **)__p);
  v7 = *(_OWORD *)__p;
  v4 = v9;
  __p[1] = 0;
  v9 = 0;
  __p[0] = 0;
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>((_QWORD *)(a1 + 96), &v10);
  v5 = v11;
  v6 = v10;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 40) = v5;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_191270A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, void *__p, uint64_t a11)
{
  void *v12;

  if ((_QWORD)a9)
  {
    operator delete((void *)a9);
    v12 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v12 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

void nitro::ir::copy_element<unsigned long>(uint64_t **a1@<X0>, char **a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t *v25;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v25 = a1[1];
    while (1)
    {
      v9 = *v4;
      if (v7 >= v6)
        break;
      *(_QWORD *)v7 = v9;
      v8 = v7 + 8;
LABEL_4:
      a2[1] = v8;
      ++v4;
      v7 = v8;
      if (v4 == v3)
        return;
    }
    v10 = (v7 - v5) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    if ((v6 - v5) >> 2 > v11)
      v11 = (v6 - v5) >> 2;
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v10];
    *(_QWORD *)v14 = v9;
    v8 = v14 + 8;
    if (v7 == v5)
      goto LABEL_20;
    v15 = v7 - v5 - 8;
    if (v15 < 0x168)
    {
      v16 = v7;
      goto LABEL_19;
    }
    v18 = (v7 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
    if (&v13[v7 - v5 - 8 - v18] > &v13[v7 - v5 - 8])
    {
      v16 = v7;
    }
    else
    {
      if (&v7[-v18 - 8] <= v7 - 8)
      {
        if ((unint64_t)(v5 - v13) < 0x20)
        {
          v16 = v7;
          goto LABEL_19;
        }
        v19 = (v15 >> 3) + 1;
        v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        v16 = &v7[-v20];
        v14 -= v20;
        v21 = &v13[8 * v10 - 16];
        v22 = v7 - 16;
        v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 4;
        }
        while (v23);
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_19;
LABEL_20:
        v6 = &v13[8 * v12];
        *a2 = v14;
        a2[1] = v8;
        a2[2] = v6;
        if (v5)
          operator delete(v5);
        v5 = v14;
        v3 = v25;
        goto LABEL_4;
      }
      v16 = v7;
    }
    do
    {
LABEL_19:
      v17 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v14 - 1) = v17;
      v14 -= 8;
    }
    while (v16 != v5);
    goto LABEL_20;
  }
}

void sub_191270C38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *result;
  v3 = result[1];
  if (*result != v3)
  {
    do
    {
      if (*(_QWORD *)v2)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v2 + 8))(&v9);
        v5 = v9;
      }
      else
      {
        v5 = 0;
      }
      v8 = (_QWORD *)v5;
      v6 = (uint64_t *)a2[1];
      if ((unint64_t)v6 >= a2[2])
      {
        v7 = std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t *)&v8);
      }
      else
      {
        v8 = 0;
        *v6 = v5;
        v7 = v6 + 1;
      }
      a2[1] = v7;
      result = v8;
      v8 = 0;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
      v2 += 8;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_191270D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 40))(a9);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

char **std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::vector<nitro::variable_type>,nitro::variable_type,std::vector<unsigned long>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::~__tuple_impl(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  char v15;
  char v16;

  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = a1[11];
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        *(_QWORD *)v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      while (v3 != v2);
      v4 = a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  v7 = a1[8];
  if (v7)
  {
    a1[9] = v7;
    operator delete(v7);
  }
  v8 = *((unsigned int *)a1 + 14);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char **))off_1E2DD1908[v8])(&v15, a1 + 3);
  *((_DWORD *)a1 + 14) = -1;
  v9 = *a1;
  if (*a1)
  {
    v10 = a1[1];
    v11 = *a1;
    if (v10 != v9)
    {
      do
      {
        v12 = v10 - 40;
        v13 = *((unsigned int *)v10 - 2);
        if ((_DWORD)v13 != -1)
          ((void (*)(char *, char *))off_1E2DD1908[v13])(&v16, v10 - 40);
        *((_DWORD *)v10 - 2) = -1;
        v10 -= 40;
      }
      while (v12 != v9);
      v11 = *a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

_QWORD *nitro::ir::print_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::print(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *i;
  _QWORD *v6;
  _QWORD *j;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v4 = (_QWORD *)a2[3];
  for (i = (_QWORD *)a2[4]; v4 != i; ++v4)
  {
    if (*v4)
      (**(void (***)(_QWORD, _QWORD *))*v4)(*v4, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v6 = (_QWORD *)a2[6];
  for (j = (_QWORD *)a2[7]; v6 != j; ++v6)
  {
    if (*v6)
      (**(void (***)(_QWORD, _QWORD *))*v6)(*v6, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

void nitro::ir::copy_tuple<3ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::string v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v11 = *(std::string *)a1;
  v12[0] = v11.__r_.__value_.__l.__size_;
  v4 = v11.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&v11.__r_.__value_.__r.__words[1] + 7);
  v5 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  memset(&v11, 0, sizeof(v11));
  nitro::ir::copy_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::copy(a1, (uint64_t)&v7);
  v6 = v12[0];
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v12 + 7);
  *(_BYTE *)(a2 + 23) = v5;
  *(_OWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 40) = v8;
  *(_OWORD *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1912710A0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1912710AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (v21 < 0)
    operator delete(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::copy_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::DEFVAR>>,std::vector<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  nitro::ir::copy_element<std::unique_ptr<nitro::ir::DEFVAR>>((void ***)(a1 + 24), &__p);
  v4 = __p;
  v5 = v15;
  v6 = v16;
  __p = 0;
  v15 = 0;
  v16 = 0;
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>((void ***)(a1 + 48), &v17);
  v7 = v18;
  v8 = v17;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 40) = v7;
  v9 = __p;
  if (__p)
  {
    v10 = v15;
    v11 = __p;
    if (v15 != __p)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      }
      while (v10 != v9);
      v11 = __p;
    }
    v15 = v9;
    operator delete(v11);
  }
}

void sub_19127119C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](&a9);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void ***nitro::ir::copy_element<std::unique_ptr<nitro::ir::DEFVAR>>@<X0>(void ***result@<X0>, _QWORD *a2@<X8>)
{
  void **v2;
  void **v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void ***v8;
  void *lpsrc;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *result;
  v3 = result[1];
  if (*result != v3)
  {
    do
    {
      v5 = *v2;
      if (*v2)
      {
        (*(void (**)(void **__return_ptr))(*v5 + 8))(&lpsrc);
        v5 = lpsrc;
        lpsrc = 0;
        if (v5)
        v8 = (void ***)v5;
      }
      else
      {
        v8 = 0;
      }
      v6 = (_QWORD *)a2[1];
      if ((unint64_t)v6 >= a2[2])
      {
        v7 = std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t *)&v8);
      }
      else
      {
        v8 = 0;
        *v6 = v5;
        v7 = v6 + 1;
      }
      a2[1] = v7;
      result = v8;
      v8 = 0;
      if (result)
        result = (void ***)((uint64_t (*)(void ***))(*result)[5])(result);
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1912712A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 40))(a9);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void ***nitro::ir::copy_element<std::unique_ptr<nitro::ir::DEFMEMBERFUN>>@<X0>(void ***result@<X0>, _QWORD *a2@<X8>)
{
  void **v2;
  void **v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void ***v8;
  void *lpsrc;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *result;
  v3 = result[1];
  if (*result != v3)
  {
    do
    {
      v5 = *v2;
      if (*v2)
      {
        (*(void (**)(void **__return_ptr))(*v5 + 8))(&lpsrc);
        v5 = lpsrc;
        lpsrc = 0;
        if (v5)
        v8 = (void ***)v5;
      }
      else
      {
        v8 = 0;
      }
      v6 = (_QWORD *)a2[1];
      if ((unint64_t)v6 >= a2[2])
      {
        v7 = std::vector<std::unique_ptr<nitro::ir::NODE>>::__push_back_slow_path<std::unique_ptr<nitro::ir::NODE>>(a2, (uint64_t *)&v8);
      }
      else
      {
        v8 = 0;
        *v6 = v5;
        v7 = v6 + 1;
      }
      a2[1] = v7;
      result = v8;
      v8 = 0;
      if (result)
        result = (void ***)((uint64_t (*)(void ***))(*result)[5])(result);
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1912713CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 40))(a9);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,unsigned long>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3)
    (**(void (***)(_QWORD, _QWORD *))*a3)(*a3, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

_QWORD *nitro::ir::print_element<nitro::ir::binary_op_enum,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void (***v12)(_QWORD, _QWORD *);
  void (***v13)(_QWORD, _QWORD *);

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  v11 = nitro::ir::operator<<(a1, (int *)a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
  v12 = *(void (****)(_QWORD, _QWORD *))(a3 + 8);
  if (v12)
    (**v12)(v12, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  v13 = *(void (****)(_QWORD, _QWORD *))(a3 + 16);
  if (v13)
    (**v13)(v13, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

_QWORD *nitro::ir::print_element<std::string,std::unique_ptr<nitro::ir::NODE>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void (***v14)(_QWORD, _QWORD *);

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  v11 = *(char *)(a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(_QWORD *)a3;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a3 + 23);
  else
    v13 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  v14 = *(void (****)(_QWORD, _QWORD *))(a3 + 24);
  if (v14)
    (**v14)(v14, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

void nitro::ir::copy_tuple<2ul,std::string,std::unique_ptr<nitro::ir::NODE>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  std::string __p;
  uint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  v13[0] = __p.__r_.__value_.__l.__size_;
  v4 = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v13 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 8))(&v12);
    v7 = v12;
    v8 = v13[0];
    v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v13 + 7);
    *(_BYTE *)(a2 + 23) = v5;
    *(_QWORD *)(a2 + 24) = v7;
    if (v9 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = v13[0];
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v13 + 7);
    *(_BYTE *)(a2 + 23) = v5;
    *(_QWORD *)(a2 + 24) = 0;
  }
}

void sub_191271784(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_191271790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (v15 < 0)
    operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::print_tuple<2ul,unsigned long,std::unique_ptr<nitro::ir::MEMBER>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(_QWORD *a1, _QWORD *a2)
{
  void (***v4)(_QWORD, _QWORD *);
  _QWORD *v5;
  _QWORD *i;

  v4 = (void (***)(_QWORD, _QWORD *))a2[1];
  if (v4)
    (**v4)(v4, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v5 = (_QWORD *)a2[2];
  for (i = (_QWORD *)a2[3]; v5 != i; ++v5)
  {
    if (*v5)
      (**(void (***)(_QWORD, _QWORD *))*v5)(*v5, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

_QWORD *nitro::ir::print_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *i;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v6 = *(_QWORD **)(v2 + 24);
  for (i = *(_QWORD **)(v2 + 32); v6 != i; ++v6)
  {
    if (*v6)
      (**(void (***)(_QWORD, _QWORD *))*v6)(*v6, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

void nitro::ir::copy_tuple<2ul,std::string,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::string __p;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  v12[0] = __p.__r_.__value_.__l.__size_;
  v4 = __p.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>((_QWORD *)(a1 + 24), &v10);
  v6 = v11;
  v7 = v12[0];
  v8 = v10;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v12 + 7);
  *(_BYTE *)(a2 + 23) = v5;
  *(_OWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 40) = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_191271A50(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_191271A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (v15 < 0)
    operator delete(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::print_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *i;

  if (*a2)
    (**(void (***)(_QWORD, _QWORD *))*a2)(*a2, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v4 = (_QWORD *)a2[1];
  for (i = (_QWORD *)a2[2]; v4 != i; ++v4)
  {
    if (*v4)
      (**(void (***)(_QWORD, _QWORD *))*v4)(*v4, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

_QWORD *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (***v11)(_QWORD, _QWORD *);

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3)
    (**(void (***)(_QWORD, _QWORD *))*a3)(*a3, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  v11 = (void (***)(_QWORD, _QWORD *))a3[1];
  if (v11)
    (**v11)(v11, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  nitro::ir::print_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, a3);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

_QWORD *nitro::ir::print_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(_QWORD *a1, _QWORD *a2)
{
  void (***v4)(_QWORD, _QWORD *);
  _QWORD *v5;
  _QWORD *i;

  v4 = (void (***)(_QWORD, _QWORD *))a2[2];
  if (v4)
    (**v4)(v4, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v5 = (_QWORD *)a2[3];
  for (i = (_QWORD *)a2[4]; v5 != i; ++v5)
  {
    if (*v5)
      (**(void (***)(_QWORD, _QWORD *))*v5)(*v5, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

__n128 nitro::ir::copy_tuple<4ul,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 result;
  __n128 v12;
  uint64_t v13;

  v4 = *a1;
  if (v4)
  {
    (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v4 + 8))(&v12);
    v5 = v12.n128_u64[0];
    v6 = a1[1];
    if (v6)
      goto LABEL_3;
LABEL_6:
    v7 = 0;
    v8 = a1[2];
    if (v8)
      goto LABEL_4;
LABEL_7:
    v9 = 0;
    goto LABEL_8;
  }
  v5 = 0;
  v6 = a1[1];
  if (!v6)
    goto LABEL_6;
LABEL_3:
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v6 + 8))(&v12);
  v7 = v12.n128_u64[0];
  v8 = a1[2];
  if (!v8)
    goto LABEL_7;
LABEL_4:
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v8 + 8))(&v12);
  v9 = v12.n128_u64[0];
LABEL_8:
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>(a1 + 3, &v12);
  v10 = v13;
  result = v12;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v9;
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = v10;
  return result;
}

void sub_191271DE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    if (!v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,unsigned long,std::vector<std::unique_ptr<nitro::ir::NODE>>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3)
    (**(void (***)(_QWORD, _QWORD *))*a3)(*a3, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  nitro::ir::print_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,unsigned long,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, (uint64_t)a3);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

_QWORD *nitro::ir::print_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,unsigned long,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *i;

  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v4 = *(_QWORD **)(a2 + 16);
  for (i = *(_QWORD **)(a2 + 24); v4 != i; ++v4)
  {
    if (*v4)
      (**(void (***)(_QWORD, _QWORD *))*v4)(*v4, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

_QWORD *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3)
    (**(void (***)(_QWORD, _QWORD *))*a3)(*a3, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  nitro::ir::print_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(a1, a3);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

_QWORD *nitro::ir::print_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::print(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *i;
  _QWORD *v6;
  _QWORD *j;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v4 = (_QWORD *)a2[1];
  for (i = (_QWORD *)a2[2]; v4 != i; ++v4)
  {
    if (*v4)
      (**(void (***)(_QWORD, _QWORD *))*v4)(*v4, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v6 = (_QWORD *)a2[4];
  for (j = (_QWORD *)a2[5]; v6 != j; ++v6)
  {
    if (*v6)
      (**(void (***)(_QWORD, _QWORD *))*v6)(*v6, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
}

void nitro::ir::copy_tuple<2ul,std::unique_ptr<nitro::ir::NODE>,std::vector<std::unique_ptr<nitro::ir::NODE>>,std::vector<std::unique_ptr<nitro::ir::NODE>>>::copy(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>((_QWORD *)(a1 + 8), &__p);
  v4 = __p;
  v5 = v15;
  v6 = v16;
  __p = 0;
  v15 = 0;
  v16 = 0;
  nitro::ir::copy_element<std::unique_ptr<nitro::ir::NODE>>((_QWORD *)(a1 + 32), &v17);
  v7 = v18;
  v8 = v17;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 40) = v7;
  v9 = __p;
  if (__p)
  {
    v10 = v15;
    v11 = __p;
    if (v15 != __p)
    {
      do
      {
        v13 = *--v10;
        v12 = v13;
        *v10 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      }
      while (v10 != v9);
      v11 = __p;
    }
    v15 = v9;
    operator delete(v11);
  }
}

void sub_19127228C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](&a9);
  std::vector<std::unique_ptr<nitro::ir::NODE>>::~vector[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (***v11)(_QWORD, _QWORD *);

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3)
    (**(void (***)(_QWORD, _QWORD *))*a3)(*a3, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  v11 = (void (***)(_QWORD, _QWORD *))a3[1];
  if (v11)
    (**v11)(v11, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

_QWORD *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (***v11)(_QWORD, _QWORD *);
  void (***v12)(_QWORD, _QWORD *);

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3)
    (**(void (***)(_QWORD, _QWORD *))*a3)(*a3, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  v11 = (void (***)(_QWORD, _QWORD *))a3[1];
  if (v11)
    (**v11)(v11, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  v12 = (void (***)(_QWORD, _QWORD *))a3[2];
  if (v12)
    (**v12)(v12, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

_QWORD *nitro::ir::print_element<nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (***v11)(_QWORD, _QWORD *);

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  nitro::operator<<(a1, (int *)a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  v11 = *(void (****)(_QWORD, _QWORD *))(a3 + 40);
  if (v11)
    (**v11)(v11, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

_QWORD *nitro::ir::copy_tuple<2ul,nitro::variable_type,std::unique_ptr<nitro::ir::NODE>>::copy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];
  unsigned int v9;
  _BYTE v10[32];
  int v11;
  uint64_t v12;

  v10[0] = 0;
  v11 = -1;
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4 == -1)
  {
    v8[0] = 0;
    v9 = -1;
    result = *(_QWORD **)(a1 + 40);
    if (result)
      goto LABEL_3;
  }
  else
  {
    ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E2DD1940[v4])(&v12, v10, a1);
    v11 = v4;
    v8[0] = 0;
    v9 = -1;
    ((void (*)(uint64_t *, _BYTE *, _BYTE *))off_1E2DD1978[v4])(&v12, v8, v10);
    v9 = v4;
    result = *(_QWORD **)(a1 + 40);
    if (result)
    {
LABEL_3:
      result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*result + 8))(&v12);
      v6 = v12;
      LODWORD(v4) = v9;
      goto LABEL_6;
    }
  }
  v6 = 0;
LABEL_6:
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 32) = -1;
  if ((_DWORD)v4 == -1)
  {
    *(_QWORD *)(a2 + 40) = v6;
  }
  else
  {
    result = (_QWORD *)((uint64_t (*)(uint64_t *, uint64_t, _BYTE *))off_1E2DD1978[v4])(&v12, a2, v8);
    *(_DWORD *)(a2 + 32) = v4;
    v7 = v9;
    *(_QWORD *)(a2 + 40) = v6;
    if ((_DWORD)v7 != -1)
      result = (_QWORD *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E2DD1908[v7])(&v12, v8);
  }
  if (v11 != -1)
    return (_QWORD *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E2DD1908[v11])(v8, v10);
  return result;
}

void sub_191272690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::tuple<nitro::variable_type>::~tuple((uint64_t)va);
  nitro::variable_type::~variable_type((nitro::variable_type *)va1);
  _Unwind_Resume(a1);
}

void sub_1912726B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a19 != -1)
    ((void (*)(char *, char *))off_1E2DD1908[a19])(&a10, &a15);
  _Unwind_Resume(exception_object);
}

_QWORD *nitro::ir::print_element<std::vector<std::unique_ptr<nitro::ir::NODE>>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v11 = (_QWORD *)*a3;
  v12 = (_QWORD *)a3[1];
  if ((_QWORD *)*a3 != v12)
  {
    do
    {
      if (*v11)
        (**(void (***)(_QWORD, _QWORD *))*v11)(*v11, a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      ++v11;
    }
    while (v11 != v12);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

_QWORD *nitro::ir::print_element<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void (***v6)(_QWORD, _QWORD *);

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v4 = (_QWORD *)*a2;
  v5 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v5)
  {
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
      if (*v4)
        (**(void (***)(_QWORD, _QWORD *))*v4)(*v4, a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      v6 = (void (***)(_QWORD, _QWORD *))v4[1];
      if (v6)
        (**v6)(v6, a1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
      v4 += 2;
    }
    while (v4 != v5);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

_QWORD *nitro::ir::copy_element<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (_QWORD *)*result;
  v3 = (_QWORD *)result[1];
  if ((_QWORD *)*result != v3)
  {
    do
    {
      if (*v2)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v2 + 8))(&v13);
        v5 = v13;
        v6 = v2[1];
        if (!v6)
          goto LABEL_8;
      }
      else
      {
        v5 = 0;
        v6 = v2[1];
        if (!v6)
        {
LABEL_8:
          v7 = 0;
          goto LABEL_9;
        }
      }
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 8))(&v13);
      v7 = v13;
LABEL_9:
      *(_QWORD *)&v12 = v5;
      *((_QWORD *)&v12 + 1) = v7;
      v8 = (_QWORD *)a2[1];
      if ((unint64_t)v8 >= a2[2])
      {
        v10 = std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::__push_back_slow_path<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>(a2, &v12);
      }
      else
      {
        *(_QWORD *)&v12 = 0;
        *v8 = v5;
        v9 = *((_QWORD *)&v12 + 1);
        *((_QWORD *)&v12 + 1) = 0;
        v8[1] = v9;
        v10 = v8 + 2;
      }
      a2[1] = v10;
      v11 = *((_QWORD *)&v12 + 1);
      *((_QWORD *)&v12 + 1) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      result = (_QWORD *)v12;
      *(_QWORD *)&v12 = 0;
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
      v2 += 2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1912729EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void **v11;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 40))(a11);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 40))(a10);
  std::vector<std::pair<std::unique_ptr<nitro::ir::NODE>,std::unique_ptr<nitro::ir::NODE>>>::~vector[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

_QWORD *nitro::ir::print_element<std::unique_ptr<nitro::ir::NODE>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  if (*a3)
    (**(void (***)(_QWORD, _QWORD *))*a3)(*a3, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)")", 1);
}

uint64_t nitro::ir::parse<nitro::ir::DICT>(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t nitro::flexible_type::flexible_type<std::string>(unint64_t **a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_8(v1);
  while (v4);
  if (v3 != 1)
    return 1;
  v5 = *v2;
  if (*v2)
  {
    if (*(char *)(v5 + 31) < 0)
      operator delete(*(void **)(v5 + 8));
    MEMORY[0x19401CD90](v5, 0x1012C404EF22A49);
  }
  return 0;
}

{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *v6;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_8(v1);
  while (v4);
  if (v3 != 1)
    return 1;
  v5 = *v2;
  if (*v2)
  {
    v6 = *(void **)(v5 + 8);
    if (v6)
    {
      *(_QWORD *)(v5 + 16) = v6;
      operator delete(v6);
    }
    MEMORY[0x19401CD90](v5, 0x1080C409938AC02);
  }
  return 0;
}

{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  _QWORD *v6;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_8(v1);
  while (v4);
  if (v3 != 1)
    return 1;
  result = *v2;
  if (result)
  {
    v6 = std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((_QWORD *)result);
    MEMORY[0x19401CD90](v6, 0x10B0C4002311774);
    return 0;
  }
  return result;
}

{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_8(v1);
  while (v4);
  if (v3 != 1)
    return 1;
  result = *v2;
  if (result)
  {
    std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(result);
    OUTLINED_FUNCTION_1_0();
  }
  return result;
}

{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_8(v1);
  while (v4);
  if (v3 != 1)
    return 1;
  result = *v2;
  if (result)
  {
    std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(result);
    OUTLINED_FUNCTION_1_0();
  }
  return result;
}

_DWORD *nitro::variable_type::variable_type(_DWORD *result, _DWORD *a2)
{
  *result = 0;
  result[8] = 0;
  *result = *a2;
  return result;
}

uint64_t std::variant<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>::~variant[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD19B0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

_DWORD *nitro::variable_type::variable_type(_DWORD *a1, uint64_t a2)
{
  uint64_t v4[3];

  *a1 = 0;
  a1[8] = 0;
  v4[0] = (uint64_t)a1;
  v4[1] = a2;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>>::__assign_alt[abi:ne180100]<1ul,nitro::tensor_type,nitro::tensor_type const&>(std::__variant_detail::__alt<1ul,nitro::tensor_type> &,nitro::tensor_type const&)::{unnamed type#1}::operator()[abi:ne180100](v4);
  return a1;
}

void sub_191272D60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned int *)(v1 + 32);
  if ((_DWORD)v4 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E2DD19B0[v4])(v2 - 17, v1);
  *(_DWORD *)(v1 + 32) = -1;
  _Unwind_Resume(exception_object);
}

nitro::variable_type *nitro::variable_type::variable_type(nitro::variable_type *this, const nitro::tuple_type *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v11;

  *(_DWORD *)this = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB6118;
  v5 = v4 + 3;
  std::vector<nitro::variable_type>::vector(v4 + 3, (uint64_t *)a2);
  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_9;
  if ((_DWORD)v6 != 2)
  {
    ((void (*)(char *, nitro::variable_type *))off_1E2DD19B0[v6])(&v11, this);
LABEL_9:
    *(_QWORD *)this = v5;
    *((_QWORD *)this + 1) = v4;
    *((_DWORD *)this + 8) = 2;
    return this;
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 1) = v4;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return this;
}

void sub_191272E80(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  std::variant<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>::~variant[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

nitro::variable_type *nitro::variable_type::variable_type(nitro::variable_type *this, const nitro::list_type *a2)
{
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  char v13;

  *(_DWORD *)this = 0;
  *((_DWORD *)this + 8) = 0;
  std::allocate_shared[abi:ne180100]<nitro::list_type,std::allocator<nitro::list_type>,nitro::list_type const&,void>((uint64_t)a2, &v12);
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 == -1)
    goto LABEL_9;
  if ((_DWORD)v3 != 3)
  {
    ((void (*)(char *, nitro::variable_type *))off_1E2DD19B0[v3])(&v13, this);
LABEL_9:
    *(_OWORD *)this = v12;
    v12 = 0uLL;
    *((_DWORD *)this + 8) = 3;
    goto LABEL_10;
  }
  v4 = v12;
  v12 = 0uLL;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_OWORD *)this = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_10:
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return this;
}

void sub_191272FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::variant<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>::~variant[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_DWORD *nitro::variable_type::variable_type(_DWORD *result)
{
  *result = 0;
  result[8] = 4;
  return result;
}

std::string *nitro::variable_type::variable_type(std::string *a1, uint64_t a2)
{
  int v3;
  std::string v5;
  char v6;

  LODWORD(a1->__r_.__value_.__l.__data_) = 0;
  LODWORD(a1[1].__r_.__value_.__r.__words[1]) = 0;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v3 = 0;
    v5 = *(std::string *)a2;
LABEL_4:
    ((void (*)(char *, std::string *))off_1E2DD19B0[v3])(&v6, a1);
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  v3 = a1[1].__r_.__value_.__r.__words[1];
  if (v3 != -1)
    goto LABEL_4;
LABEL_5:
  *a1 = v5;
  LODWORD(a1[1].__r_.__value_.__r.__words[1]) = 5;
  return a1;
}

void sub_191273070(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned int *)(v1 + 32);
  if ((_DWORD)v4 != -1)
    ((void (*)(uint64_t, uint64_t))off_1E2DD19B0[v4])(v2 - 17, v1);
  *(_DWORD *)(v1 + 32) = -1;
  _Unwind_Resume(exception_object);
}

nitro::variable_type *nitro::variable_type::variable_type(nitro::variable_type *this, const nitro::dict_type *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v11;

  *(_DWORD *)this = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB6268;
  v5 = v4 + 3;
  nitro::dict_type::dict_type((uint64_t)(v4 + 3), (uint64_t)a2);
  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_9;
  if ((_DWORD)v6 != 6)
  {
    ((void (*)(char *, nitro::variable_type *))off_1E2DD19B0[v6])(&v11, this);
LABEL_9:
    *(_QWORD *)this = v5;
    *((_QWORD *)this + 1) = v4;
    *((_DWORD *)this + 8) = 6;
    return this;
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = v5;
  *((_QWORD *)this + 1) = v4;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return this;
}

void sub_191273194(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  std::variant<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>::~variant[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *nitro::operator<<(_QWORD *a1, int *a2)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *a2;
  if (v4 > 0xB)
    v5 = "";
  else
    v5 = off_1E2DD1A20[v4];
  v6 = strlen(v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
  if (*((_QWORD *)a2 + 2) != *((_QWORD *)a2 + 1))
  {
    v7 = 0;
    do
    {
      std::ostream::operator<<();
      ++v7;
      v8 = (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3;
      if (v7 < v8)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
        v8 = (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3;
      }
    }
    while (v7 < v8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

{
  uint64_t v3;
  const char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  const char *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  size_t v12;

  switch(a2[8])
  {
    case 0:
      v3 = *a2;
      if (v3 > 0xB)
        v4 = "";
      else
        v4 = off_1E2DD1A20[v3];
      v12 = strlen(v4);
      v9 = a1;
      v8 = v4;
      goto LABEL_12;
    case 1:
      nitro::operator<<(a1, a2);
      return a1;
    case 2:
      v5 = *(uint64_t **)a2;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
      v6 = *v5;
      for (i = v5[1]; v6 != i; v6 += 40)
        nitro::operator<<(a1, v6);
      v8 = ")";
      v9 = a1;
      goto LABEL_8;
    case 3:
      v10 = *(uint64_t **)a2;
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[", 1);
      v9 = (_QWORD *)nitro::operator<<(v11, v10);
      v8 = "]";
LABEL_8:
      v12 = 1;
LABEL_12:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v8, v12);
      break;
    default:
      return a1;
  }
  return a1;
}

void std::__shared_ptr_emplace<nitro::tuple_type>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::tuple_type>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<nitro::tuple_type>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 40;
        v6 = *(unsigned int *)(v3 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_1E2DD19B0[v6])(&v7, v3 - 40);
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 40;
      }
      while (v5 != v1);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<nitro::list_type,std::allocator<nitro::list_type>,nitro::list_type const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  _BYTE v8[2];

  result = operator new(0x40uLL);
  v5 = result;
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E2DB62A0;
  *((_BYTE *)result + 24) = 0;
  v6 = (char *)(result + 3);
  *((_DWORD *)result + 14) = -1;
  v7 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v7 != -1)
  {
    result = (_QWORD *)((uint64_t (*)(_BYTE *, char *, uint64_t))off_1E2DD19E8[v7])(v8, v6, a1);
    *((_DWORD *)v5 + 14) = v7;
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void sub_191273540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;

  v16 = *(unsigned int *)(v13 + 56);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD19B0[v16])(&a13, v14);
  *(_DWORD *)(v13 + 56) = -1;
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v13);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<nitro::list_type>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB62A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::list_type>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB62A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<nitro::list_type>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  v2 = *(unsigned int *)(result + 56);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E2DD19B0[v2])(&v3, result + 24);
  *(_DWORD *)(v1 + 56) = -1;
  return result;
}

void std::__shared_ptr_emplace<nitro::dict_type>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::dict_type>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<nitro::dict_type>::__on_zero_shared(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v1 = result;
  v2 = *(unsigned int *)(result + 96);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E2DD19B0[v2])(&v4, result + 64);
  *(_DWORD *)(v1 + 96) = -1;
  v3 = *(unsigned int *)(v1 + 56);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E2DD19B0[v3])(&v5, v1 + 24);
  *(_DWORD *)(v1 + 56) = -1;
  return result;
}

uint64_t nitro::dict_type::dict_type(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[2];
  _BYTE v8[3];

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 32) = -1;
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_1E2DD19E8[v4])(v7, a1, a2);
    *(_DWORD *)(a1 + 32) = v4;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  v5 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_1E2DD19E8[v5])(v8, a1 + 40, a2 + 40);
    *(_DWORD *)(a1 + 72) = v5;
  }
  return a1;
}

void sub_191273788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v17 = *(unsigned int *)(v14 + 72);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD19B0[v17])(&a13, v15);
  *(_DWORD *)(v14 + 72) = -1;
  v18 = *(unsigned int *)(v14 + 32);
  if ((_DWORD)v18 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD19B0[v18])(&a14, v14);
  *(_DWORD *)(v14 + 32) = -1;
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse_type_internal(nitro::ir *this@<X0>, const nitro::SExp *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int v6;
  char *v8;
  uint64_t v9;
  int v12;
  int v13;
  int v15;
  uint64_t v17;
  const nitro::SExp *v18;
  uint64_t v19;
  nitro::ir *v20;
  uint64_t v21;
  const nitro::SExp *v22;
  uint64_t v23;
  nitro::ir *v24;
  uint64_t v25;
  const nitro::SExp *v26;
  const nitro::SExp *v27;
  uint64_t v28;
  uint64_t i;
  nitro::ir *v30;
  const nitro::SExp *v31;
  uint64_t v32;
  const std::string::value_type **v33;
  __int128 v34;
  std::string::size_type v35;
  file_logger *v36;
  file_logger *started;
  pthread_key_t *v38;
  uint64_t v39;
  void *__p;
  void *v41;
  uint64_t v42;
  void *v43[4];
  int v44;
  _BYTE v45[72];
  uint64_t v46[4];
  _QWORD v48[6];
  nitro::ir *v49;
  nitro::ir *v50;
  std::string v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)((char *)this + 8);
  v6 = *((unsigned __int8 *)this + 31);
  if (*((char *)this + 31) < 0)
  {
    v9 = *((_QWORD *)this + 2);
    if (v9 == 3)
    {
      if (*(_WORD *)*v5 == 28265 && *(_BYTE *)(*v5 + 2) == 116)
        goto LABEL_45;
      v9 = *((_QWORD *)this + 2);
    }
    else if (v9 == 4 && *(_DWORD *)*v5 == 1819242338)
    {
      goto LABEL_39;
    }
    if (v9 == 4)
    {
      if (*(_DWORD *)*v5 == 1953393013)
        goto LABEL_58;
      v9 = *((_QWORD *)this + 2);
      if (v9 == 4)
      {
        if (*(_DWORD *)*v5 == 947154537)
          goto LABEL_56;
        if ((v6 & 0x80) == 0)
          goto LABEL_44;
      }
    }
    if (v9 != 5)
      goto LABEL_44;
    if (*(_DWORD *)*v5 != 829714025 || *(_BYTE *)(*v5 + 4) != 54)
    {
      if (*((_QWORD *)this + 2) != 5)
        goto LABEL_44;
      v8 = (char *)*v5;
      goto LABEL_31;
    }
LABEL_52:
    LODWORD(v51.__r_.__value_.__l.__data_) = 2;
    nitro::variable_type::variable_type((_DWORD *)a3, &v51);
    return;
  }
  if (v6 != 3)
  {
    if (v6 != 4)
    {
      if (v6 != 5)
        goto LABEL_44;
      if (*(_DWORD *)v5 != 829714025 || *((_BYTE *)this + 12) != 54)
      {
        v8 = (char *)this + 8;
LABEL_31:
        v12 = *(_DWORD *)v8;
        v13 = v8[4];
        if (v12 == 863268457 && v13 == 50)
        {
          LODWORD(v51.__r_.__value_.__l.__data_) = 3;
          nitro::variable_type::variable_type((_DWORD *)a3, &v51);
          return;
        }
        goto LABEL_44;
      }
      goto LABEL_52;
    }
    v15 = *(_DWORD *)v5;
    if (*(_DWORD *)v5 != 1953393013)
    {
      if (v15 == 1819242338)
      {
LABEL_39:
        LODWORD(v51.__r_.__value_.__l.__data_) = 0;
        nitro::variable_type::variable_type((_DWORD *)a3, &v51);
        return;
      }
      if (v15 != 947154537)
        goto LABEL_44;
LABEL_56:
      LODWORD(v51.__r_.__value_.__l.__data_) = 1;
      nitro::variable_type::variable_type((_DWORD *)a3, &v51);
      return;
    }
LABEL_58:
    LODWORD(v51.__r_.__value_.__l.__data_) = 8;
    nitro::variable_type::variable_type((_DWORD *)a3, &v51);
    return;
  }
  if (*(_WORD *)v5 == 28265 && *((_BYTE *)this + 10) == 116)
    goto LABEL_45;
LABEL_44:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)this + 1, "int64"))
  {
LABEL_45:
    LODWORD(v51.__r_.__value_.__l.__data_) = 4;
    nitro::variable_type::variable_type((_DWORD *)a3, &v51);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "uint8"))
  {
    LODWORD(v51.__r_.__value_.__l.__data_) = 5;
    nitro::variable_type::variable_type((_DWORD *)a3, &v51);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "uint16"))
  {
    LODWORD(v51.__r_.__value_.__l.__data_) = 6;
    nitro::variable_type::variable_type((_DWORD *)a3, &v51);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "uint32"))
  {
    LODWORD(v51.__r_.__value_.__l.__data_) = 7;
    nitro::variable_type::variable_type((_DWORD *)a3, &v51);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "uint64"))
    goto LABEL_58;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "float")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "fp32"))
  {
    LODWORD(v51.__r_.__value_.__l.__data_) = 9;
    nitro::variable_type::variable_type((_DWORD *)a3, &v51);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, "fp64"))
  {
    LODWORD(v51.__r_.__value_.__l.__data_) = 10;
    nitro::variable_type::variable_type((_DWORD *)a3, &v51);
    return;
  }
  v17 = *((_QWORD *)this + 6);
  if (*((_QWORD *)this + 7) == v17)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v17 + 8), "list"))
  {
    v19 = *((_QWORD *)this + 6);
    v20 = *(nitro::ir **)(v19 + 120);
    v21 = *(_QWORD *)(v19 + 128) - (_QWORD)v20;
    v51.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v21 >> 3);
    if (v21 != 72)
    {
      v48[0] = &v51;
      nitro::ir::parse_type_internal(nitro::SExp const&)::$_1::operator()();
    }
    nitro::ir::parse_type_internal((uint64_t *)&v51, v20, v18);
    nitro::variable_type::variable_type((nitro::variable_type *)a3, (const nitro::list_type *)&v51);
    nitro::list_type::~list_type((nitro::list_type *)&v51);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*((_QWORD *)this + 6) + 8), "dict"))
  {
    v23 = *((_QWORD *)this + 6);
    v24 = *(nitro::ir **)(v23 + 120);
    v25 = *(_QWORD *)(v23 + 128) - (_QWORD)v24;
    v51.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v25 >> 3);
    if (v25 != 144)
    {
      v48[0] = &v51;
      nitro::ir::parse_type_internal(nitro::SExp const&)::$_2::operator()();
    }
    nitro::ir::parse_type_internal((uint64_t *)&v51, v24, v22);
    nitro::ir::parse_type_internal(&v52, (nitro::ir *)(*(_QWORD *)(*((_QWORD *)this + 6) + 120) + 72), v26);
    nitro::variable_type::variable_type((nitro::variable_type *)a3, (const nitro::dict_type *)&v51);
    nitro::dict_type::~dict_type((nitro::dict_type *)&v51);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*((_QWORD *)this + 6) + 8), "string"))
  {
    nitro::variable_type::variable_type((_DWORD *)a3);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*((_QWORD *)this + 6) + 8), "tensor"))
  {
    nitro::SExp::SExp((uint64_t)v48, *((_QWORD *)this + 6) + 72);
    v51.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * ((v50 - v49) >> 3);
    if (v50 == v49)
    {
      v46[0] = (uint64_t)&v51;
      nitro::ir::parse_type_internal(nitro::SExp const&)::$_3::operator()();
    }
    nitro::ir::parse_type_internal((uint64_t *)v43, v49, v27);
    __p = 0;
    v41 = 0;
    v42 = 0;
    if (0x8E38E38E38E38E39 * ((v50 - v49) >> 3) >= 2)
    {
      nitro::SExp::SExp((uint64_t)v46, (uint64_t)v49 + 72);
      __asm { BR              X9 }
    }
    if (v44)
      std::__throw_bad_variant_access[abi:ne180100]();
    nitro::tensor_type::tensor_type((uint64_t)&v51, (int)v43[0], (uint64_t)&__p);
    nitro::variable_type::variable_type((_DWORD *)a3, (uint64_t)&v51);
    if (v51.__r_.__value_.__l.__size_)
    {
      v51.__r_.__value_.__r.__words[2] = v51.__r_.__value_.__l.__size_;
      operator delete((void *)v51.__r_.__value_.__l.__size_);
    }
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    nitro::variable_type::~variable_type((nitro::variable_type *)v43);
    nitro::SExp::~SExp((nitro::SExp *)v48);
    return;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(*((_QWORD *)this + 6) + 8), "tuple"))
  {
    nitro::SExp::SExp((uint64_t)&v51, *((_QWORD *)this + 6) + 72);
    memset(v43, 0, 24);
    v28 = v53;
    for (i = v54; v28 != i; v28 += 72)
    {
      v30 = (nitro::ir *)nitro::SExp::SExp((uint64_t)v48, v28);
      nitro::ir::parse_type_internal(v46, v30, v31);
      std::vector<nitro::variable_type>::push_back[abi:ne180100]((uint64_t)v43, (uint64_t)v46);
      nitro::variable_type::~variable_type((nitro::variable_type *)v46);
      nitro::SExp::~SExp((nitro::SExp *)v48);
    }
    std::vector<nitro::variable_type>::vector(v48, (uint64_t *)v43);
    nitro::variable_type::variable_type((nitro::variable_type *)a3, (const nitro::tuple_type *)v48);
    nitro::tuple_type::~tuple_type((nitro::tuple_type *)v48);
    std::vector<nitro::variable_type>::~vector[abi:ne180100](v43);
    nitro::SExp::~SExp((nitro::SExp *)&v51);
    return;
  }
  v32 = *((_QWORD *)this + 6);
  v33 = (const std::string::value_type **)(v32 + 8);
  if ((*(char *)(v32 + 31) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v32 + 31))
    {
      v34 = *(_OWORD *)v33;
      v51.__r_.__value_.__r.__words[2] = *(_QWORD *)(v32 + 24);
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
      goto LABEL_93;
    }
LABEL_100:
    if (*((int *)global_logger() + 169) <= 6)
    {
      v36 = (file_logger *)global_logger();
      started = file_logger::start_stream(v36, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "parse_type_internal", 85, 1);
      v38 = file_logger::operator<<((pthread_key_t *)started, "Unrecognized expression ");
      nitro::SExp::SExp((uint64_t)v45, (uint64_t)this);
      v39 = file_logger::operator<<<nitro::SExp>((uint64_t)v38, (uint64_t)v45);
      file_logger::operator<<(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      nitro::SExp::~SExp((nitro::SExp *)v45);
    }
    nitro::ir::parse_type_internal(nitro::SExp const&)::$_4::operator()();
  }
  v35 = *(_QWORD *)(v32 + 16);
  if (!v35)
    goto LABEL_100;
  std::string::__init_copy_ctor_external(&v51, *v33, v35);
LABEL_93:
  nitro::variable_type::variable_type((std::string *)a3, (uint64_t)&v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
}

void sub_19127422C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  nitro::SExp::~SExp((nitro::SExp *)&a40);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_type_internal(nitro::SExp const&)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"t.children[1].children.size()", 29);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 48, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 48, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912747B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191274818(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::list_type::~list_type(nitro::list_type *this)
{
  uint64_t v2;
  char v3;

  v2 = *((unsigned int *)this + 8);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, nitro::list_type *))off_1E2DD1A80[v2])(&v3, this);
  *((_DWORD *)this + 8) = -1;
}

void nitro::ir::parse_type_internal(nitro::SExp const&)::$_2::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"t.children[1].children.size()", 29);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 52, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191274C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191274CA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::dict_type::~dict_type(nitro::dict_type *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *((unsigned int *)this + 18);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))off_1E2DD1A80[v2])(&v4, (char *)this + 40);
  *((_DWORD *)this + 18) = -1;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, nitro::dict_type *))off_1E2DD1A80[v3])(&v5, this);
  *((_DWORD *)this + 8) = -1;
}

void nitro::ir::parse_type_internal(nitro::SExp const&)::$_3::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"params.children.size()", 22);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)">=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">=", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 60, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 60, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912750F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19127515C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::push_back[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_27;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v14[8 * v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t nitro::tensor_type::tensor_type(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;

  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = *(const void **)a3;
  v4 = *(_QWORD *)(a3 + 8);
  v6 = v4 - *(_QWORD *)a3;
  if (v4 != *(_QWORD *)a3)
  {
    if (v6 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - *(_QWORD *)a3);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v7;
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 24) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 16) = v8;
  }
  return a1;
}

void sub_191275360(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<nitro::variable_type>::push_back[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  char *result;
  char v6;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= *(_QWORD *)(a1 + 16))
  {
    result = std::vector<nitro::variable_type>::__push_back_slow_path<nitro::variable_type>((char **)a1, a2);
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_DWORD *)(v3 + 32) = -1;
    v4 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *, unint64_t, uint64_t))off_1E2DD1B28[v4])(&v6, v3, a2);
      *(_DWORD *)(v3 + 32) = v4;
    }
    result = (char *)(v3 + 40);
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void nitro::tuple_type::~tuple_type(nitro::tuple_type *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *(void **)this;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 40;
        v6 = *(unsigned int *)(v3 - 8);
        if ((_DWORD)v6 != -1)
          ((void (*)(char *, uint64_t))off_1E2DD1A80[v6])(&v7, v3 - 40);
        *(_DWORD *)(v3 - 8) = -1;
        v3 -= 40;
      }
      while (v5 != v2);
      v4 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v2;
    operator delete(v4);
  }
}

pthread_key_t *file_logger::operator<<(pthread_key_t *a1, const char *a2)
{
  char *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;

  v4 = (char *)pthread_getspecific(a1[74]);
  if (v4)
  {
    if (v4[280])
    {
      v5 = v4 + 16;
      v6 = strlen(a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)a2, v6);
      v7 = strlen(a2);
      if (v7)
      {
        if (a2[v7 - 1] == 10)
          file_logger::stream_flush((file_logger *)a1);
      }
    }
  }
  return a1;
}

uint64_t file_logger::operator<<<nitro::SExp>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v4 && *((_BYTE *)v4 + 280))
    nitro::operator<<(v4 + 2, a2);
  return a1;
}

uint64_t file_logger::operator<<(uint64_t a1, _QWORD *(*a2)(_QWORD *a1))
{
  _QWORD *v4;
  _QWORD *exception;

  v4 = pthread_getspecific(*(_QWORD *)(a1 + 592));
  if (v4)
  {
    if (a2 == std::endl[abi:ne180100]<char,std::char_traits<char>>)
    {
      if (*((_BYTE *)v4 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush((file_logger *)a1);
        if (*(_DWORD *)(a1 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
  }
  return a1;
}

void nitro::ir::parse_type_internal(nitro::SExp const&)::$_4::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  file_logger *v3;
  pthread_key_t *started;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *exception;
  char v9;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 86, 1);
    v5 = pthread_getspecific(started[74]);
    if (v5 && *((_BYTE *)v5 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed: ", 14);
    v6 = pthread_getspecific(started[74]);
    if (v6 && *((_BYTE *)v6 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"false", 5);
    v7 = pthread_getspecific(started[74]);
    if (v7)
    {
      if (*((_BYTE *)v7 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)":\n", 2);
        file_logger::stream_flush((file_logger *)started);
      }
    }
  }
  log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 86, "Unrecognized expression", v0, v1, v2, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  *exception = "assertion failure";
  __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
}

void nitro::ir::parse_type(nitro::ir *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  __int128 v6;
  std::string::size_type size;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const nitro::SExp *v11;
  uint64_t *v12[2];
  char v13;
  const char *v14;
  std::string v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 6);
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 8);
    v15.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 24);
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  }
  v14 = "TYPE";
  v13 = 4;
  strcpy((char *)v12, "TYPE");
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  if (size != 4)
    goto LABEL_18;
  if ((*((_BYTE *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v15.__r_.__value_.__l.__data_, v12, v15.__r_.__value_.__l.__size_))
      goto LABEL_18;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else if (*((_BYTE *)&v15.__r_.__value_.__s + 23))
  {
    v8 = 0;
    while (v15.__r_.__value_.__s.__data_[v8] == *((unsigned __int8 *)v12 + v8))
    {
      if (HIBYTE(v15.__r_.__value_.__r.__words[2]) == ++v8)
        goto LABEL_16;
    }
LABEL_18:
    v12[0] = (uint64_t *)&v15;
    v12[1] = (uint64_t *)&v14;
    nitro::ir::parse_type(nitro::SExp const&)::$_0::operator()(v12);
  }
LABEL_16:
  v9 = *((_QWORD *)this + 6);
  v10 = *((_QWORD *)this + 7) - v9;
  v15.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v10 >> 3);
  if (v10 != 144)
  {
    v12[0] = (uint64_t *)&v15;
    nitro::ir::parse_type(nitro::SExp const&)::$_1::operator()();
  }
  nitro::SExp::SExp((uint64_t)&v15, v9 + 72);
  nitro::ir::parse_type_internal((nitro::ir *)&v15, v11, a2);
  nitro::SExp::~SExp((nitro::SExp *)&v15);
}

void sub_19127589C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  nitro::SExp::~SExp((nitro::SExp *)va);
  _Unwind_Resume(a1);
}

void sub_1912758B0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1912758BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse_type(nitro::SExp const&)::$_0::operator()(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  file_logger *v25;
  file_logger *started;
  char *v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  file_logger *v31;
  file_logger *v32;
  char *v33;
  _QWORD *v34;
  void *locale;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43[8];
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  std::locale v48;
  uint64_t v49;
  unsigned __int8 v50;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v47 = MEMORY[0x1E0DE4FE0] + 64;
  v42 = v4;
  *(uint64_t *)((char *)&v43[-1] + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)((char *)&v43[-1] + *(_QWORD *)(v42 - 24));
  std::ios_base::init(v6, v43);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v42 = v2 + 24;
  v47 = v3;
  std::streambuf::basic_streambuf();
  v43[0] = MEMORY[0x1E0DE4FB8] + 16;
  v44 = 0u;
  v45 = 0u;
  v46 = 16;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Assertion failed: (", 19);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"): ", 3);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"sexp.children[0].string_value", 29);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"==", 2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"TYPE\"", 6);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"  [", 3);
  v15 = *((char *)*a1 + 23);
  if (v15 >= 0)
    v16 = (uint64_t)*a1;
  else
    v16 = **a1;
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)*a1 + 23);
  else
    v17 = (*a1)[1];
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  LOBYTE(v48.__locale_) = 32;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v48, 1);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"==", 2);
  LOBYTE(v48.__locale_) = 32;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v48, 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"TYPE", 4);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet(&v48, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v25 = (file_logger *)global_logger();
    started = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 92, 1);
    std::stringbuf::str();
    v27 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v27 && v27[280])
    {
      v28 = v27 + 16;
      if ((v41 & 0x80u) == 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if ((v41 & 0x80u) == 0)
        v30 = v41;
      else
        v30 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    if ((char)v41 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v31 = (file_logger *)global_logger();
    v32 = file_logger::start_stream(v31, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 92, 1);
    std::stringbuf::str();
    v33 = (char *)pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v33 && v33[280])
    {
      v34 = v33 + 16;
      if ((v50 & 0x80u) == 0)
        locale = &v48;
      else
        locale = v48.__locale_;
      if ((v50 & 0x80u) == 0)
        v36 = v50;
      else
        v36 = v49;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)locale, v36);
    }
    v37 = pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v37)
    {
      if (*((_BYTE *)v37 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v32);
        if (*((_DWORD *)v32 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v50 < 0)
      operator delete(v48.__locale_);
  }
  v38 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191275C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191275D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_type(nitro::SExp const&)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 93, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 93, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912760CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191276134(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_function_type(nitro::ir *this@<X0>, const nitro::SExp *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  std::string::size_type size;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const nitro::SExp *v11;
  uint64_t v12;
  nitro::ir *v13;
  nitro::ir *i;
  char *v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t *__s2[2];
  char v24;
  int v25;
  std::string v26;
  int v27;
  void *__p;
  char *v29;
  unint64_t v30;
  std::string *v31;

  v5 = *((_QWORD *)this + 6);
  if (*(char *)(v5 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 8);
    v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 24);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v6;
  }
  __p = "TYPE";
  v24 = 4;
  strcpy((char *)__s2, "TYPE");
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  else
    size = v26.__r_.__value_.__l.__size_;
  if (size != 4)
    goto LABEL_45;
  if ((*((_BYTE *)&v26.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v26.__r_.__value_.__l.__data_, __s2, v26.__r_.__value_.__l.__size_))
      goto LABEL_45;
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
  {
    v8 = 0;
    while (v26.__r_.__value_.__s.__data_[v8] == *((unsigned __int8 *)__s2 + v8))
    {
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) == ++v8)
        goto LABEL_16;
    }
LABEL_45:
    __s2[0] = (uint64_t *)&v26;
    __s2[1] = (uint64_t *)&__p;
    nitro::ir::parse_function_type(nitro::SExp const&)::$_0::operator()(__s2);
  }
LABEL_16:
  v9 = *((_QWORD *)this + 6);
  v10 = *((_QWORD *)this + 7) - v9;
  v26.__r_.__value_.__r.__words[0] = 0x8E38E38E38E38E39 * (v10 >> 3);
  if (v10 != 216)
  {
    __s2[0] = (uint64_t *)&v26;
    nitro::ir::parse_function_type(nitro::SExp const&)::$_1::operator()();
  }
  __p = 0;
  v29 = 0;
  v30 = 0;
  LODWORD(v26.__r_.__value_.__l.__data_) = 0;
  v27 = 0;
  nitro::ir::parse_type_internal((nitro::ir *)(v9 + 72), a2, (uint64_t)__s2);
  if (v27 == -1)
  {
    if (v25 == -1)
      goto LABEL_24;
  }
  else if (v25 == -1)
  {
    ((void (*)(std::string **, std::string *))off_1E2DD1A80[v27])(&v31, &v26);
    v27 = -1;
    goto LABEL_22;
  }
  v31 = &v26;
  ((void (*)(std::string **, std::string *, uint64_t **))off_1E2DD1AB8[v25])(&v31, &v26, __s2);
LABEL_22:
  if (v25 != -1)
    ((void (*)(std::string **, uint64_t **))off_1E2DD1A80[v25])(&v31, __s2);
LABEL_24:
  v12 = *((_QWORD *)this + 6);
  v13 = *(nitro::ir **)(v12 + 192);
  for (i = *(nitro::ir **)(v12 + 200); v13 != i; v13 = (nitro::ir *)((char *)v13 + 72))
  {
    nitro::ir::parse_type_internal(v13, v11, (uint64_t)__s2);
    v15 = v29;
    if ((unint64_t)v29 >= v30)
    {
      v17 = std::vector<nitro::variable_type>::__push_back_slow_path<nitro::variable_type>((char **)&__p, (uint64_t)__s2);
    }
    else
    {
      *v29 = 0;
      *((_DWORD *)v15 + 8) = -1;
      v16 = v25;
      if (v25 != -1)
      {
        ((void (*)(std::string **, char *, uint64_t **))off_1E2DD1B28[v25])(&v31, v15, __s2);
        *((_DWORD *)v15 + 8) = v16;
      }
      v17 = v15 + 40;
    }
    v29 = v17;
    if (v25 != -1)
      ((void (*)(std::string **, uint64_t **))off_1E2DD1A80[v25])(&v31, __s2);
  }
  std::pair<std::vector<nitro::variable_type>,nitro::variable_type>::pair[abi:ne180100]<std::vector<nitro::variable_type>&,nitro::variable_type&,0>(a3, (uint64_t *)&__p, (uint64_t)&v26);
  if (v27 != -1)
    ((void (*)(uint64_t **, std::string *))off_1E2DD1A80[v27])(__s2, &v26);
  v18 = (char *)__p;
  if (__p)
  {
    v19 = v29;
    v20 = __p;
    if (v29 != __p)
    {
      do
      {
        v21 = v19 - 40;
        v22 = *((unsigned int *)v19 - 2);
        if ((_DWORD)v22 != -1)
          ((void (*)(std::string *, char *))off_1E2DD1A80[v22])(&v26, v19 - 40);
        *((_DWORD *)v19 - 2) = -1;
        v19 -= 40;
      }
      while (v21 != v18);
      v20 = __p;
    }
    v29 = v18;
    operator delete(v20);
  }
}

void sub_1912764AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  nitro::variable_type::~variable_type((nitro::variable_type *)va);
  std::vector<nitro::variable_type>::~vector[abi:ne180100]((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1912764EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ir::parse_function_type(nitro::SExp const&)::$_0::operator()(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  file_logger *v25;
  file_logger *started;
  char *v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  file_logger *v31;
  file_logger *v32;
  char *v33;
  _QWORD *v34;
  void *locale;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43[8];
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  std::locale v48;
  uint64_t v49;
  unsigned __int8 v50;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v47 = MEMORY[0x1E0DE4FE0] + 64;
  v42 = v4;
  *(uint64_t *)((char *)&v43[-1] + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)((char *)&v43[-1] + *(_QWORD *)(v42 - 24));
  std::ios_base::init(v6, v43);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v42 = v2 + 24;
  v47 = v3;
  std::streambuf::basic_streambuf();
  v43[0] = MEMORY[0x1E0DE4FB8] + 16;
  v44 = 0u;
  v45 = 0u;
  v46 = 16;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Assertion failed: (", 19);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"): ", 3);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"sexp.children[0].string_value", 29);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"==", 2);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"TYPE\"", 6);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"  [", 3);
  v15 = *((char *)*a1 + 23);
  if (v15 >= 0)
    v16 = (uint64_t)*a1;
  else
    v16 = **a1;
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)*a1 + 23);
  else
    v17 = (*a1)[1];
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  LOBYTE(v48.__locale_) = 32;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v48, 1);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"==", 2);
  LOBYTE(v48.__locale_) = 32;
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v48, 1);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"TYPE", 4);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
  v24 = std::locale::use_facet(&v48, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v25 = (file_logger *)global_logger();
    started = file_logger::start_stream(v25, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 100, 1);
    std::stringbuf::str();
    v27 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v27 && v27[280])
    {
      v28 = v27 + 16;
      if ((v41 & 0x80u) == 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if ((v41 & 0x80u) == 0)
        v30 = v41;
      else
        v30 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    }
    if ((char)v41 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v31 = (file_logger *)global_logger();
    v32 = file_logger::start_stream(v31, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 100, 1);
    std::stringbuf::str();
    v33 = (char *)pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v33 && v33[280])
    {
      v34 = v33 + 16;
      if ((v50 & 0x80u) == 0)
        locale = &v48;
      else
        locale = v48.__locale_;
      if ((v50 & 0x80u) == 0)
        v36 = v50;
      else
        v36 = v49;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)locale, v36);
    }
    v37 = pthread_getspecific(*((_QWORD *)v32 + 74));
    if (v37)
    {
      if (*((_BYTE *)v37 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v32);
        if (*((_DWORD *)v32 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v50 < 0)
      operator delete(v48.__locale_);
  }
  v38 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912768C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191276930(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ir::parse_function_type(nitro::SExp const&)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sexp.children.size()", 20);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 101, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/parse_types.cpp", "operator()", 101, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_191276CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_191276D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::vector<nitro::variable_type>,nitro::variable_type>::pair[abi:ne180100]<std::vector<nitro::variable_type>&,nitro::variable_type&,0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[3];

  v5 = std::vector<nitro::variable_type>::vector((_QWORD *)a1, a2);
  *((_BYTE *)v5 + 24) = 0;
  *((_DWORD *)v5 + 14) = -1;
  v6 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(_BYTE *, _QWORD *, uint64_t))off_1E2DD1AF0[v6])(v8, v5 + 3, a3);
    *(_DWORD *)(a1 + 56) = v6;
  }
  return a1;
}

void sub_191276E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  char **v13;
  uint64_t v14;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;

  v16 = *((unsigned int *)v13 + 14);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD1A80[v16])(&a12, v14);
  *((_DWORD *)v13 + 14) = -1;
  v17 = *v13;
  if (*v13)
  {
    v18 = v13[1];
    v19 = *v13;
    if (v18 != v17)
    {
      do
      {
        v20 = v18 - 40;
        v21 = *((unsigned int *)v18 - 2);
        if ((_DWORD)v21 != -1)
          ((void (*)(char *, char *))off_1E2DD1A80[v21])(&a13, v18 - 40);
        *((_DWORD *)v18 - 2) = -1;
        v18 -= 40;
      }
      while (v20 != v17);
      v19 = *v13;
    }
    v13[1] = v17;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E2DD1A80[v5])(&v6, v4);
  }
  *v4 = *a3;
  v4[8] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  _QWORD *v8;
  __n128 result;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 32);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_1E2DD1A80[v5])(&v10, v4);
LABEL_7:
    *(_DWORD *)v4 = *(_DWORD *)a3;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 8) = 0;
    result = *(__n128 *)(a3 + 8);
    *(__n128 *)(v4 + 8) = result;
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_DWORD *)(v4 + 32) = 1;
    return result;
  }
  *(_DWORD *)a2 = *(_DWORD *)a3;
  v8 = (_QWORD *)(a2 + 8);
  v7 = *(void **)(a2 + 8);
  if (v7)
  {
    *(_QWORD *)(a2 + 16) = v7;
    operator delete(v7);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = (*a1)[2].n128_u32[0];
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 2)
  {
    ((void (*)(char *, __n128 *))off_1E2DD1A80[v5])(&v10, v4);
LABEL_9:
    result = *a3;
    *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[2].n128_u32[0] = 2;
    return result;
  }
  result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = (*a1)[2].n128_u32[0];
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 3)
  {
    ((void (*)(char *, __n128 *))off_1E2DD1A80[v5])(&v10, v4);
LABEL_9:
    result = *a3;
    *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[2].n128_u32[0] = 3;
    return result;
  }
  result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 4)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E2DD1A80[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(__n128 **a1, uint64_t a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v8;

  v4 = *a1;
  v5 = (*a1)[2].n128_u32[0];
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 5)
  {
    ((void (*)(char *, __n128 *))off_1E2DD1A80[v5])(&v8, v4);
LABEL_7:
    v4[2].n128_u32[0] = -1;
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[2].n128_u32[0] = 5;
    return result;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *a3;
  *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEEOSY_EEEDcSQ_DpT0_(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = (*a1)[2].n128_u32[0];
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 6)
  {
    ((void (*)(char *, __n128 *))off_1E2DD1A80[v5])(&v10, v4);
LABEL_9:
    result = *a3;
    *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[2].n128_u32[0] = 6;
    return result;
  }
  result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return result;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1912773B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *global_logger(void)
{
  unsigned __int8 v0;

  {
    file_logger::file_logger((file_logger *)&global_logger(void)::l);
    __cxa_atexit((void (*)(void *))file_logger::~file_logger, &global_logger(void)::l, &dword_190DAF000);
  }
  return &global_logger(void)::l;
}

void sub_191277448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t streambuffdestructor(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1E0DE4F50];
    v3 = *MEMORY[0x1E0DE4F50];
    *(_QWORD *)result = *MEMORY[0x1E0DE4F50];
    v4 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(result + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(result + 24) = MEMORY[0x1E0DE4FB8] + 16;
    *(_QWORD *)(result + 16) = v4;
    if (*(char *)(result + 111) < 0)
      operator delete(*(void **)(result + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x19401CCD0](v1 + 128);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

void file_logger::file_logger(file_logger *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FB0];
  v3 = MEMORY[0x1E0DE4FB0] + 64;
  *((_QWORD *)this + 52) = MEMORY[0x1E0DE4FB0] + 64;
  v4 = (char *)this + 8;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  std::ios_base::init(v7, (char *)this + 8);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *(_QWORD *)this = v2 + 24;
  *((_QWORD *)this + 52) = v3;
  MEMORY[0x19401C8B0](v4);
  *((_QWORD *)this + 73) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((_QWORD *)this + 85) = -1;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 101) = 0;
  *((_QWORD *)this + 105) = 0;
  *((_QWORD *)this + 109) = 0;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 117) = 0;
  MEMORY[0x19401C808]((char *)this + 568, "");
  *((_BYTE *)this + 672) = 1;
  *((_DWORD *)this + 169) = 3;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 608), 0);
  pthread_key_create((pthread_key_t *)this + 74, (void (__cdecl *)(void *))streambuffdestructor);
}

void sub_191277614(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 416);
  _Unwind_Resume(a1);
}

void sub_19127763C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v4 = *(_QWORD **)(v1 + 936);
  if (v4 == (_QWORD *)(v1 + 912))
  {
    v5 = 4;
    v4 = (_QWORD *)(v1 + 912);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD **)(v1 + 904);
  if (v6 == (_QWORD *)(v1 + 880))
  {
    v7 = 4;
    v6 = (_QWORD *)(v1 + 880);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *(_QWORD **)(v1 + 872);
  if (v8 == (_QWORD *)(v1 + 848))
  {
    v9 = 4;
    v8 = (_QWORD *)(v1 + 848);
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = *(_QWORD **)(v1 + 840);
  if (v10 == (_QWORD *)(v1 + 816))
  {
    v11 = 4;
    v10 = (_QWORD *)(v1 + 816);
  }
  else
  {
    if (!v10)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_21:
  v12 = *(_QWORD **)(v1 + 808);
  if (v12 == (_QWORD *)(v1 + 784))
  {
    v13 = 4;
    v12 = (_QWORD *)(v1 + 784);
  }
  else
  {
    if (!v12)
      goto LABEL_26;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_26:
  v14 = *(_QWORD **)(v1 + 776);
  if (v14 == (_QWORD *)(v1 + 752))
  {
    v15 = 4;
    v14 = (_QWORD *)(v1 + 752);
  }
  else
  {
    if (!v14)
      goto LABEL_31;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_31:
  v16 = *(_QWORD **)(v1 + 744);
  if (v16 == (_QWORD *)(v1 + 720))
  {
    v17 = 4;
    v16 = (_QWORD *)(v1 + 720);
  }
  else
  {
    if (!v16)
      goto LABEL_36;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_36:
  v18 = *(_QWORD **)(v1 + 712);
  if (v18 == (_QWORD *)(v1 + 688))
  {
    v19 = 4;
    v18 = (_QWORD *)(v1 + 688);
  }
  else
  {
    if (!v18)
      goto LABEL_41;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_41:
  if (*(char *)(v1 + 591) < 0)
    operator delete(*v2);
  std::ofstream::~ofstream((_QWORD *)v1);
  _Unwind_Resume(a1);
}

void file_logger::~file_logger(file_logger *this)
{
  pthread_mutex_t *v2;
  file_logger *v3;
  uint64_t v4;
  file_logger *v5;
  uint64_t v6;
  file_logger *v7;
  uint64_t v8;
  file_logger *v9;
  uint64_t v10;
  file_logger *v11;
  uint64_t v12;
  file_logger *v13;
  uint64_t v14;
  file_logger *v15;
  uint64_t v16;
  file_logger *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = (pthread_mutex_t *)((char *)this + 608);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
  if (!*(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32))
  {
    std::ostream::flush();
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) | 4);
  }
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  v3 = (file_logger *)*((_QWORD *)this + 117);
  if (v3 == (file_logger *)((char *)this + 912))
  {
    v4 = 4;
    v3 = (file_logger *)((char *)this + 912);
  }
  else
  {
    if (!v3)
      goto LABEL_9;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_9:
  v5 = (file_logger *)*((_QWORD *)this + 113);
  if (v5 == (file_logger *)((char *)this + 880))
  {
    v6 = 4;
    v5 = (file_logger *)((char *)this + 880);
  }
  else
  {
    if (!v5)
      goto LABEL_14;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_14:
  v7 = (file_logger *)*((_QWORD *)this + 109);
  if (v7 == (file_logger *)((char *)this + 848))
  {
    v8 = 4;
    v7 = (file_logger *)((char *)this + 848);
  }
  else
  {
    if (!v7)
      goto LABEL_19;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_19:
  v9 = (file_logger *)*((_QWORD *)this + 105);
  if (v9 == (file_logger *)((char *)this + 816))
  {
    v10 = 4;
    v9 = (file_logger *)((char *)this + 816);
  }
  else
  {
    if (!v9)
      goto LABEL_24;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_24:
  v11 = (file_logger *)*((_QWORD *)this + 101);
  if (v11 == (file_logger *)((char *)this + 784))
  {
    v12 = 4;
    v11 = (file_logger *)((char *)this + 784);
  }
  else
  {
    if (!v11)
      goto LABEL_29;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_29:
  v13 = (file_logger *)*((_QWORD *)this + 97);
  if (v13 == (file_logger *)((char *)this + 752))
  {
    v14 = 4;
    v13 = (file_logger *)((char *)this + 752);
  }
  else
  {
    if (!v13)
      goto LABEL_34;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_34:
  v15 = (file_logger *)*((_QWORD *)this + 93);
  if (v15 == (file_logger *)((char *)this + 720))
  {
    v16 = 4;
    v15 = (file_logger *)((char *)this + 720);
  }
  else
  {
    if (!v15)
      goto LABEL_39;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_39:
  v17 = (file_logger *)*((_QWORD *)this + 89);
  if (v17 == (file_logger *)((char *)this + 688))
  {
    v18 = 4;
    v17 = (file_logger *)((char *)this + 688);
  }
  else
  {
    if (!v17)
      goto LABEL_44;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_44:
  if (*((char *)this + 591) < 0)
    operator delete(*((void **)this + 71));
  v19 = MEMORY[0x1E0DE4F48];
  v20 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)this = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)this + *(_QWORD *)(v20 - 24)) = *(_QWORD *)(v19 + 24);
  MEMORY[0x19401C8BC]((char *)this + 8);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0]((char *)this + 416);
}

uint64_t file_logger::_log(uint64_t this, int a2, const char *a3, const char *a4, int a5, const char *a6, va_list a7)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  char __str[1024];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(this + 676) <= a2)
  {
    v10 = this;
    v11 = snprintf(__str, 0x400uLL, "%s(%s:%d): ", (&messages)[a2], a4, a5);
    v12 = v11;
    v13 = &__str[v11];
    v14 = vsnprintf(v13, 1024 - v11, a6, a7);
    v15 = v12 + v14;
    __str[v15] = 10;
    __str[(int)v15 + 1] = 0;
    if (*(_DWORD *)(v10 + 4 * a2 + 944))
    {
      v16 = v14;
      pthread_mutex_lock((pthread_mutex_t *)(v10 + 608));
      v17 = *(_QWORD *)(v10 + 32 * a2 + 712);
      if (v17)
      {
        v20 = a2;
        v18 = v16;
        v19 = v13;
        (*(void (**)(uint64_t, int *, char **, uint64_t *))(*(_QWORD *)v17 + 48))(v17, &v20, &v19, &v18);
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v10 + 608));
    }
    return file_logger::_lograw((file_logger *)v10, a2, __str);
  }
  return this;
}

uint64_t file_logger::_lograw(file_logger *this, int a2, const char *a3)
{
  pthread_mutex_t *v5;
  uint64_t result;
  FILE **v7;
  FILE *v8;
  int v9;
  FILE **v10;
  FILE **v11;
  FILE **v12;
  FILE **v13;
  FILE *v14;
  FILE *v15;
  char __str[20];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (pthread_mutex_t *)((char *)this + 608);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
  if (!*(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32))
  {
    std::ostream::write();
    std::ostream::flush();
  }
  result = pthread_mutex_unlock(v5);
  if (*((_BYTE *)this + 672) || *((_BYTE *)this + 673))
  {
    pthread_mutex_lock(v5);
    switch(a2)
    {
      case 1:
        v7 = (FILE **)MEMORY[0x1E0C80C10];
        if (!*((_BYTE *)this + 673))
          v7 = (FILE **)MEMORY[0x1E0C80C20];
        v8 = *v7;
        v9 = 33;
        goto LABEL_20;
      case 3:
        v10 = (FILE **)MEMORY[0x1E0C80C10];
        if (!*((_BYTE *)this + 673))
          v10 = (FILE **)MEMORY[0x1E0C80C20];
        v8 = *v10;
        v9 = 32;
        goto LABEL_20;
      case 5:
        v11 = (FILE **)MEMORY[0x1E0C80C10];
        if (!*((_BYTE *)this + 673))
          v11 = (FILE **)MEMORY[0x1E0C80C20];
        v8 = *v11;
        v9 = 35;
        goto LABEL_20;
      case 6:
        v12 = (FILE **)MEMORY[0x1E0C80C10];
        if (!*((_BYTE *)this + 673))
          v12 = (FILE **)MEMORY[0x1E0C80C20];
        v8 = *v12;
        v9 = 31;
LABEL_20:
        snprintf(__str, 0xDuLL, "%c[%d;%dm", 27, 1, v9);
        fputs(__str, v8);
        goto LABEL_21;
      case 7:
        v14 = (FILE *)*MEMORY[0x1E0C80C10];
        snprintf(__str, 0xDuLL, "%c[%d;%dm", 27, 1, 31);
        fputs(__str, v14);
        goto LABEL_25;
      default:
        if (a2 < 7)
        {
LABEL_21:
          std::ostream::write();
          pthread_mutex_unlock(v5);
          v13 = (FILE **)MEMORY[0x1E0C80C10];
          if (!*((_BYTE *)this + 673))
            v13 = (FILE **)MEMORY[0x1E0C80C20];
        }
        else
        {
LABEL_25:
          std::ostream::write();
          pthread_mutex_unlock(v5);
          v13 = (FILE **)MEMORY[0x1E0C80C10];
        }
        v15 = *v13;
        snprintf(__str, 0x14uLL, "%c[0m", 27);
        result = fputs(__str, v15);
        break;
    }
  }
  return result;
}

file_logger *file_logger::start_stream(file_logger *this, int a2, const char *a3, const char *a4, int a5, char a6)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *exception;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v10 = (uint64_t)pthread_getspecific(*((_QWORD *)this + 74));
  if (!v10)
  {
    v10 = operator new();
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v10);
    pthread_setspecific(*((_QWORD *)this + 74), (const void *)v10);
  }
  std::stringbuf::str();
  if (v25 < 0)
  {
    operator delete(v23);
    if (!v24)
      goto LABEL_10;
  }
  else if (!v25)
  {
    goto LABEL_10;
  }
  v11 = pthread_getspecific(*((_QWORD *)this + 74));
  if (v11)
  {
    if (*((_BYTE *)v11 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"\n", 1);
      file_logger::stream_flush(this);
      if (*((_DWORD *)this + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
    }
  }
LABEL_10:
  *(_DWORD *)(v10 + 296) = a2;
  if (*((_DWORD *)this + 169) > a2 || (a6 & 1) == 0)
  {
    *(_BYTE *)(v10 + 280) = 0;
    return this;
  }
  std::stringbuf::str();
  if (v25 < 0)
  {
    operator delete(v23);
    if (v24)
      goto LABEL_19;
  }
  else if (v25)
  {
    goto LABEL_19;
  }
  time(0);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" : ", 3);
  v15 = strlen((&messages)[a2]);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)(&messages)[a2], v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
  v18 = strlen(a4);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)a4, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)":", 1);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"): ", 3);
LABEL_19:
  *(_BYTE *)(v10 + 280) = 1;
  *((_DWORD *)this + 150) = a2;
  v21 = v10 + 16 + *(_QWORD *)(*(_QWORD *)(v10 + 16) - 24);
  if ((*(_BYTE *)(v21 + 32) & 5) != 0)
  {
    *(_QWORD *)(v10 + 288) = -1;
  }
  else
  {
    (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v21 + 40) + 32))(&v23, *(_QWORD *)(v21 + 40), 0, 1, 16);
    *(_QWORD *)(v10 + 288) = v26;
  }
  return this;
}

void sub_1912780B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x19401CD90](v1, 0x10B2C40F675228ALL);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::register_builtins(uint64_t a1)
{
  uint64_t (***v2)();
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (***v14)();
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t (***v26)();
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t (***v34)();
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t (***v38)();
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t (***v42)();
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t (***v46)();
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t (***v50)();
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t (***v54)();
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t (***v58)();
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t (***v62)();
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t (***v66)();
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t (***v70)();
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t (***v74)();
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t (***v78)();
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t (***v82)();
  uint64_t v83;
  uint64_t (***v84)();
  uint64_t v85;
  uint64_t (***v86)();
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t (***v90)();
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  std::string *v94;
  std::string *p_p;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t (***v99)();
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t (***v103)();
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t (***v107)();
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t (***v111)();
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t (***v115)();
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t (***v119)();
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t (***v123)();
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t (***v127)();
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t (***v131)();
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t (***v135)();
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t (***v139)();
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t (***v143)();
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t (***v147)();
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t (***v151)();
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t (***v155)();
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t (***v159)();
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t (***v163)();
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t (***v167)();
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t (***v171)();
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  std::string v175;
  _QWORD v176[3];
  _QWORD *v177;
  _QWORD v178[3];
  _QWORD *v179;
  _QWORD v180[3];
  _QWORD *v181;
  _QWORD v182[3];
  _QWORD *v183;
  _QWORD v184[3];
  _QWORD *v185;
  _QWORD v186[3];
  _QWORD *v187;
  _QWORD v188[3];
  _QWORD *v189;
  _QWORD v190[3];
  _QWORD *v191;
  _QWORD v192[3];
  _QWORD *v193;
  _QWORD v194[3];
  _QWORD *v195;
  _QWORD v196[3];
  _QWORD *v197;
  _QWORD v198[3];
  _QWORD *v199;
  _QWORD v200[3];
  _QWORD *v201;
  _QWORD v202[3];
  _QWORD *v203;
  _QWORD v204[3];
  _QWORD *v205;
  _QWORD v206[3];
  _QWORD *v207;
  _QWORD v208[3];
  _QWORD *v209;
  _QWORD v210[3];
  _QWORD *v211;
  _QWORD v212[3];
  _QWORD *v213;
  _QWORD v214[3];
  _QWORD *v215;
  std::string __p;
  std::string *v217;
  _QWORD v218[3];
  _QWORD *v219;
  _QWORD v220[3];
  _QWORD *v221;
  _QWORD v222[3];
  _QWORD *v223;
  _QWORD v224[3];
  _QWORD *v225;
  _QWORD v226[3];
  _QWORD *v227;
  _QWORD v228[3];
  _QWORD *v229;
  _QWORD v230[3];
  _QWORD *v231;
  _QWORD v232[3];
  _QWORD *v233;
  _QWORD v234[3];
  _QWORD *v235;
  _QWORD v236[3];
  _QWORD *v237;
  _QWORD v238[3];
  _QWORD *v239;
  _QWORD v240[3];
  _QWORD *v241;
  _QWORD v242[3];
  _QWORD *v243;
  _QWORD v244[3];
  _QWORD *v245;
  _QWORD v246[3];
  _QWORD *v247;
  _QWORD v248[3];
  _QWORD *v249;
  _QWORD v250[3];
  _QWORD *v251;
  _QWORD v252[3];
  _QWORD *v253;
  _QWORD v254[3];
  _QWORD *v255;
  _QWORD v256[3];
  _QWORD *v257;
  _QWORD v258[3];
  _QWORD *v259;
  _QWORD v260[3];
  _QWORD *v261;
  uint64_t (**v262)();
  void *v263;
  uint64_t (***v264)();
  uint64_t v265;

  v265 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "__len__");
  v260[0] = &off_1E2DACA68;
  v260[1] = nitro::nitro_builtins::arr_len;
  v261 = v260;
  nitro::nitro_builtins::wrap_ft_function(v260, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v2 = v264;
  if (v264 == &v262)
  {
    v3 = 4;
    v2 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_6;
    v3 = 5;
  }
  (*v2)[v3]();
LABEL_6:
  v4 = v261;
  if (v261 == v260)
  {
    v5 = 4;
    v4 = v260;
  }
  else
  {
    if (!v261)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "__str__");
  v258[0] = &off_1E2DACA68;
  v258[1] = nitro::nitro_builtins::cast_str;
  v259 = v258;
  nitro::nitro_builtins::wrap_ft_function(v258, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v6 = v264;
  if (v264 == &v262)
  {
    v7 = 4;
    v6 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_18;
    v7 = 5;
  }
  (*v6)[v7]();
LABEL_18:
  v8 = v259;
  if (v259 == v258)
  {
    v9 = 4;
    v8 = v258;
  }
  else
  {
    if (!v259)
      goto LABEL_23;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_23:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&__p, "__double__");
  v256[0] = &off_1E2DACA68;
  v256[1] = nitro::nitro_builtins::cast_double;
  v257 = v256;
  nitro::nitro_builtins::wrap_ft_function(v256, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v10 = v264;
  if (v264 == &v262)
  {
    v11 = 4;
    v10 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_30;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_30:
  v12 = v257;
  if (v257 == v256)
  {
    v13 = 4;
    v12 = v256;
  }
  else
  {
    if (!v257)
      goto LABEL_35;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_35:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "__float__");
  v254[0] = &off_1E2DACA68;
  v254[1] = nitro::nitro_builtins::cast_double;
  v255 = v254;
  nitro::nitro_builtins::wrap_ft_function(v254, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v14 = v264;
  if (v264 == &v262)
  {
    v15 = 4;
    v14 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_42;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_42:
  v16 = v255;
  if (v255 == v254)
  {
    v17 = 4;
    v16 = v254;
  }
  else
  {
    if (!v255)
      goto LABEL_47;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_47:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "__int__");
  v252[0] = &off_1E2DACA68;
  v252[1] = nitro::nitro_builtins::cast_int;
  v253 = v252;
  nitro::nitro_builtins::wrap_ft_function(v252, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v18 = v264;
  if (v264 == &v262)
  {
    v19 = 4;
    v18 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_54;
    v19 = 5;
  }
  (*v18)[v19]();
LABEL_54:
  v20 = v253;
  if (v253 == v252)
  {
    v21 = 4;
    v20 = v252;
  }
  else
  {
    if (!v253)
      goto LABEL_59;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_59:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "__max__");
  v250[0] = &off_1E2DACCD0;
  v250[1] = nitro::nitro_builtins::flex_max;
  v251 = v250;
  nitro::nitro_builtins::wrap_ft_function(v250, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v22 = v264;
  if (v264 == &v262)
  {
    v23 = 4;
    v22 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_66;
    v23 = 5;
  }
  (*v22)[v23]();
LABEL_66:
  v24 = v251;
  if (v251 == v250)
  {
    v25 = 4;
    v24 = v250;
  }
  else
  {
    if (!v251)
      goto LABEL_71;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_71:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "__min__");
  v248[0] = &off_1E2DACCD0;
  v248[1] = nitro::nitro_builtins::flex_min;
  v249 = v248;
  nitro::nitro_builtins::wrap_ft_function(v248, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v26 = v264;
  if (v264 == &v262)
  {
    v27 = 4;
    v26 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_78;
    v27 = 5;
  }
  (*v26)[v27]();
LABEL_78:
  v28 = v249;
  if (v249 == v248)
  {
    v29 = 4;
    v28 = v248;
  }
  else
  {
    if (!v249)
      goto LABEL_83;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_83:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "MakeTensorArray");
  v246[0] = &off_1E2DACAC0;
  v246[1] = nitro::nitro_builtins::MakeTensorArray;
  v247 = v246;
  nitro::nitro_builtins::wrap_ft_function(v246, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v30 = v264;
  if (v264 == &v262)
  {
    v31 = 4;
    v30 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_90;
    v31 = 5;
  }
  (*v30)[v31]();
LABEL_90:
  v32 = v247;
  if (v247 == v246)
  {
    v33 = 4;
    v32 = v246;
  }
  else
  {
    if (!v247)
      goto LABEL_95;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_95:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__p, "TensorArrayScatter");
  v244[0] = &off_1E2DACB18;
  v244[1] = nitro::nitro_builtins::TensorArrayScatter;
  v245 = v244;
  nitro::nitro_builtins::wrap_ft_function(v244, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v34 = v264;
  if (v264 == &v262)
  {
    v35 = 4;
    v34 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_102;
    v35 = 5;
  }
  (*v34)[v35]();
LABEL_102:
  v36 = v245;
  if (v245 == v244)
  {
    v37 = 4;
    v36 = v244;
  }
  else
  {
    if (!v245)
      goto LABEL_107;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_107:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "TensorArrayGather");
  v242[0] = &off_1E2DACAC0;
  v242[1] = nitro::nitro_builtins::TensorArrayGather;
  v243 = v242;
  nitro::nitro_builtins::wrap_ft_function(v242, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v38 = v264;
  if (v264 == &v262)
  {
    v39 = 4;
    v38 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_114;
    v39 = 5;
  }
  (*v38)[v39]();
LABEL_114:
  v40 = v243;
  if (v243 == v242)
  {
    v41 = 4;
    v40 = v242;
  }
  else
  {
    if (!v243)
      goto LABEL_119;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_119:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "TensorArrayRead");
  v240[0] = &off_1E2DACAC0;
  v240[1] = nitro::nitro_builtins::TensorArrayRead;
  v241 = v240;
  nitro::nitro_builtins::wrap_ft_function(v240, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v42 = v264;
  if (v264 == &v262)
  {
    v43 = 4;
    v42 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_126;
    v43 = 5;
  }
  (*v42)[v43]();
LABEL_126:
  v44 = v241;
  if (v241 == v240)
  {
    v45 = 4;
    v44 = v240;
  }
  else
  {
    if (!v241)
      goto LABEL_131;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_131:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__p, "TensorArrayWrite");
  v238[0] = &off_1E2DACB18;
  v238[1] = nitro::nitro_builtins::TensorArrayWrite;
  v239 = v238;
  nitro::nitro_builtins::wrap_ft_function(v238, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v46 = v264;
  if (v264 == &v262)
  {
    v47 = 4;
    v46 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_138;
    v47 = 5;
  }
  (*v46)[v47]();
LABEL_138:
  v48 = v239;
  if (v239 == v238)
  {
    v49 = 4;
    v48 = v238;
  }
  else
  {
    if (!v239)
      goto LABEL_143;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_143:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "TensorArraySize");
  v236[0] = &off_1E2DACC78;
  v236[1] = nitro::nitro_builtins::TensorArraySize;
  v237 = v236;
  nitro::nitro_builtins::wrap_ft_function(v236, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v50 = v264;
  if (v264 == &v262)
  {
    v51 = 4;
    v50 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_150;
    v51 = 5;
  }
  (*v50)[v51]();
LABEL_150:
  v52 = v237;
  if (v237 == v236)
  {
    v53 = 4;
    v52 = v236;
  }
  else
  {
    if (!v237)
      goto LABEL_155;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_155:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "Skip");
  v234[0] = &off_1E2DACA68;
  v234[1] = nitro::nitro_builtins::Skip;
  v235 = v234;
  nitro::nitro_builtins::wrap_ft_function(v234, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v54 = v264;
  if (v264 == &v262)
  {
    v55 = 4;
    v54 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_162;
    v55 = 5;
  }
  (*v54)[v55]();
LABEL_162:
  v56 = v235;
  if (v235 == v234)
  {
    v57 = 4;
    v56 = v234;
  }
  else
  {
    if (!v235)
      goto LABEL_167;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_167:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&__p, "ExpandDims");
  v232[0] = &off_1E2DACAC0;
  v232[1] = nitro::nitro_builtins::ExpandDims;
  v233 = v232;
  nitro::nitro_builtins::wrap_ft_function(v232, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v58 = v264;
  if (v264 == &v262)
  {
    v59 = 4;
    v58 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_174;
    v59 = 5;
  }
  (*v58)[v59]();
LABEL_174:
  v60 = v233;
  if (v233 == v232)
  {
    v61 = 4;
    v60 = v232;
  }
  else
  {
    if (!v233)
      goto LABEL_179;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_179:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "Range");
  v230[0] = &off_1E2DACB70;
  v230[1] = nitro::nitro_builtins::Range;
  v231 = v230;
  nitro::nitro_builtins::wrap_ft_function(v230, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v62 = v264;
  if (v264 == &v262)
  {
    v63 = 4;
    v62 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_186;
    v63 = 5;
  }
  (*v62)[v63]();
LABEL_186:
  v64 = v231;
  if (v231 == v230)
  {
    v65 = 4;
    v64 = v230;
  }
  else
  {
    if (!v231)
      goto LABEL_191;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_191:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "Split");
  v228[0] = &off_1E2DACB70;
  v228[1] = nitro::nitro_builtins::Split;
  v229 = v228;
  nitro::nitro_builtins::wrap_ft_function(v228, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v66 = v264;
  if (v264 == &v262)
  {
    v67 = 4;
    v66 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_198;
    v67 = 5;
  }
  (*v66)[v67]();
LABEL_198:
  v68 = v229;
  if (v229 == v228)
  {
    v69 = 4;
    v68 = v228;
  }
  else
  {
    if (!v229)
      goto LABEL_203;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_203:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "Transpose");
  v226[0] = &off_1E2DACAC0;
  v226[1] = nitro::nitro_builtins::Transpose;
  v227 = v226;
  nitro::nitro_builtins::wrap_ft_function(v226, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v70 = v264;
  if (v264 == &v262)
  {
    v71 = 4;
    v70 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_210;
    v71 = 5;
  }
  (*v70)[v71]();
LABEL_210:
  v72 = v227;
  if (v227 == v226)
  {
    v73 = 4;
    v72 = v226;
  }
  else
  {
    if (!v227)
      goto LABEL_215;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_215:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "BiasAdd");
  v224[0] = &off_1E2DACAC0;
  v224[1] = nitro::nitro_builtins::BiasAdd;
  v225 = v224;
  nitro::nitro_builtins::wrap_ft_function(v224, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v74 = v264;
  if (v264 == &v262)
  {
    v75 = 4;
    v74 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_222;
    v75 = 5;
  }
  (*v74)[v75]();
LABEL_222:
  v76 = v225;
  if (v225 == v224)
  {
    v77 = 4;
    v76 = v224;
  }
  else
  {
    if (!v225)
      goto LABEL_227;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_227:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7173459;
  v222[0] = &off_1E2DACB70;
  v222[1] = nitro::nitro_builtins::Sum;
  v223 = v222;
  nitro::nitro_builtins::wrap_ft_function(v222, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v78 = v264;
  if (v264 == &v262)
  {
    v79 = 4;
    v78 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_234;
    v79 = 5;
  }
  (*v78)[v79]();
LABEL_234:
  v80 = v223;
  if (v223 == v222)
  {
    v81 = 4;
    v80 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_239;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_239:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "MatMul");
  v262 = &off_1E2DAF090;
  v264 = &v262;
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v82 = v264;
  if (v264 == &v262)
  {
    v83 = 4;
    v82 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_246;
    v83 = 5;
  }
  (*v82)[v83]();
LABEL_246:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "Concat");
  v262 = &off_1E2DACD28;
  v263 = nitro::nitro_builtins::Concat;
  v264 = &v262;
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v84 = v264;
  if (v264 == &v262)
  {
    v85 = 4;
    v84 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_253;
    v85 = 5;
  }
  (*v84)[v85]();
LABEL_253:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "Shape");
  v220[0] = &off_1E2DACA68;
  v220[1] = nitro::nitro_builtins::Shape;
  v221 = v220;
  nitro::nitro_builtins::wrap_ft_function(v220, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v86 = v264;
  if (v264 == &v262)
  {
    v87 = 4;
    v86 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_260;
    v87 = 5;
  }
  (*v86)[v87]();
LABEL_260:
  v88 = v221;
  if (v221 == v220)
  {
    v89 = 4;
    v88 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_265;
    v89 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v89))();
LABEL_265:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "Slice");
  v218[0] = &off_1E2DACB70;
  v218[1] = nitro::nitro_builtins::Slice;
  v219 = v218;
  nitro::nitro_builtins::wrap_ft_function(v218, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v90 = v264;
  if (v264 == &v262)
  {
    v91 = 4;
    v90 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_272;
    v91 = 5;
  }
  (*v90)[v91]();
LABEL_272:
  v92 = v219;
  if (v219 == v218)
  {
    v93 = 4;
    v92 = v218;
  }
  else
  {
    if (!v219)
      goto LABEL_277;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_277:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&v175.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v175, "SliceMask");
  v214[0] = &off_1E2DACC20;
  v214[1] = nitro::nitro_builtins::SliceMask;
  v215 = v214;
  v264 = &v262;
  v262 = &off_1E2DACC20;
  v263 = nitro::nitro_builtins::SliceMask;
  v217 = 0;
  v94 = (std::string *)operator new(0x28uLL);
  v94->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DAF248;
  v94->__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E2DACC20;
  v94[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v94->__r_.__value_.__l.__size_;
  v94->__r_.__value_.__r.__words[2] = (std::string::size_type)nitro::nitro_builtins::SliceMask;
  v217 = v94;
  nitro::nitro_execution_context::register_builtin(a1, &v175, &__p);
  p_p = v217;
  if (v217 == &__p)
  {
    v96 = 4;
    p_p = &__p;
  }
  else
  {
    if (!v217)
      goto LABEL_284;
    v96 = 5;
  }
  (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v96))();
LABEL_284:
  v97 = v215;
  if (v215 == v214)
  {
    v98 = 4;
    v97 = v214;
  }
  else
  {
    if (!v215)
      goto LABEL_289;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_289:
  if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v175.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "Gather");
  v212[0] = &off_1E2DACB70;
  v212[1] = nitro::nitro_builtins::Gather;
  v213 = v212;
  nitro::nitro_builtins::wrap_ft_function(v212, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v99 = v264;
  if (v264 == &v262)
  {
    v100 = 4;
    v99 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_296;
    v100 = 5;
  }
  (*v99)[v100]();
LABEL_296:
  v101 = v213;
  if (v213 == v212)
  {
    v102 = 4;
    v101 = v212;
  }
  else
  {
    if (!v213)
      goto LABEL_301;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_301:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&__p, "QuantizeGather");
  v210[0] = &off_1E2DACBC8;
  v210[1] = nitro::nitro_builtins::QuantizeGather;
  v211 = v210;
  nitro::nitro_builtins::wrap_ft_function(v210, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v103 = v264;
  if (v264 == &v262)
  {
    v104 = 4;
    v103 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_308;
    v104 = 5;
  }
  (*v103)[v104]();
LABEL_308:
  v105 = v211;
  if (v211 == v210)
  {
    v106 = 4;
    v105 = v210;
  }
  else
  {
    if (!v211)
      goto LABEL_313;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_313:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "Stack");
  v208[0] = &off_1E2DACAC0;
  v208[1] = nitro::nitro_builtins::Stack;
  v209 = v208;
  nitro::nitro_builtins::wrap_ft_function(v208, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v107 = v264;
  if (v264 == &v262)
  {
    v108 = 4;
    v107 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_320;
    v108 = 5;
  }
  (*v107)[v108]();
LABEL_320:
  v109 = v209;
  if (v209 == v208)
  {
    v110 = 4;
    v109 = v208;
  }
  else
  {
    if (!v209)
      goto LABEL_325;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_325:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "TopK");
  v206[0] = &off_1E2DACAC0;
  v206[1] = nitro::nitro_builtins::TopK;
  v207 = v206;
  nitro::nitro_builtins::wrap_ft_function(v206, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v111 = v264;
  if (v264 == &v262)
  {
    v112 = 4;
    v111 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_332;
    v112 = 5;
  }
  (*v111)[v112]();
LABEL_332:
  v113 = v207;
  if (v207 == v206)
  {
    v114 = 4;
    v113 = v206;
  }
  else
  {
    if (!v207)
      goto LABEL_337;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_337:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "Reshape");
  v204[0] = &off_1E2DACAC0;
  v204[1] = nitro::nitro_builtins::Reshape;
  v205 = v204;
  nitro::nitro_builtins::wrap_ft_function(v204, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v115 = v264;
  if (v264 == &v262)
  {
    v116 = 4;
    v115 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_344;
    v116 = 5;
  }
  (*v115)[v116]();
LABEL_344:
  v117 = v205;
  if (v205 == v204)
  {
    v118 = 4;
    v117 = v204;
  }
  else
  {
    if (!v205)
      goto LABEL_349;
    v118 = 5;
  }
  (*(void (**)(void))(*v117 + 8 * v118))();
LABEL_349:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "Softmax");
  v202[0] = &off_1E2DACA68;
  v202[1] = nitro::nitro_builtins::Softmax;
  v203 = v202;
  nitro::nitro_builtins::wrap_ft_function(v202, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v119 = v264;
  if (v264 == &v262)
  {
    v120 = 4;
    v119 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_356;
    v120 = 5;
  }
  (*v119)[v120]();
LABEL_356:
  v121 = v203;
  if (v203 == v202)
  {
    v122 = 4;
    v121 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_361;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_361:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "ReverseSequence");
  v200[0] = &off_1E2DACBC8;
  v200[1] = nitro::nitro_builtins::ReverseSequence;
  v201 = v200;
  nitro::nitro_builtins::wrap_ft_function(v200, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v123 = v264;
  if (v264 == &v262)
  {
    v124 = 4;
    v123 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_368;
    v124 = 5;
  }
  (*v123)[v124]();
LABEL_368:
  v125 = v201;
  if (v201 == v200)
  {
    v126 = 4;
    v125 = v200;
  }
  else
  {
    if (!v201)
      goto LABEL_373;
    v126 = 5;
  }
  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_373:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7889229;
  v198[0] = &off_1E2DACAC0;
  v198[1] = nitro::nitro_builtins::Max;
  v199 = v198;
  nitro::nitro_builtins::wrap_ft_function(v198, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v127 = v264;
  if (v264 == &v262)
  {
    v128 = 4;
    v127 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_380;
    v128 = 5;
  }
  (*v127)[v128]();
LABEL_380:
  v129 = v199;
  if (v199 == v198)
  {
    v130 = 4;
    v129 = v198;
  }
  else
  {
    if (!v199)
      goto LABEL_385;
    v130 = 5;
  }
  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_385:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7235917;
  v196[0] = &off_1E2DACAC0;
  v196[1] = nitro::nitro_builtins::Min;
  v197 = v196;
  nitro::nitro_builtins::wrap_ft_function(v196, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v131 = v264;
  if (v264 == &v262)
  {
    v132 = 4;
    v131 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_392;
    v132 = 5;
  }
  (*v131)[v132]();
LABEL_392:
  v133 = v197;
  if (v197 == v196)
  {
    v134 = 4;
    v133 = v196;
  }
  else
  {
    if (!v197)
      goto LABEL_397;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_397:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "Maximum");
  v194[0] = &off_1E2DACAC0;
  v194[1] = nitro::nitro_builtins::Maximum;
  v195 = v194;
  nitro::nitro_builtins::wrap_ft_function(v194, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v135 = v264;
  if (v264 == &v262)
  {
    v136 = 4;
    v135 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_404;
    v136 = 5;
  }
  (*v135)[v136]();
LABEL_404:
  v137 = v195;
  if (v195 == v194)
  {
    v138 = 4;
    v137 = v194;
  }
  else
  {
    if (!v195)
      goto LABEL_409;
    v138 = 5;
  }
  (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_409:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "Minimum");
  v192[0] = &off_1E2DACAC0;
  v192[1] = nitro::nitro_builtins::Minimum;
  v193 = v192;
  nitro::nitro_builtins::wrap_ft_function(v192, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v139 = v264;
  if (v264 == &v262)
  {
    v140 = 4;
    v139 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_416;
    v140 = 5;
  }
  (*v139)[v140]();
LABEL_416:
  v141 = v193;
  if (v193 == v192)
  {
    v142 = 4;
    v141 = v192;
  }
  else
  {
    if (!v193)
      goto LABEL_421;
    v142 = 5;
  }
  (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_421:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7105601;
  v190[0] = &off_1E2DACAC0;
  v190[1] = nitro::nitro_builtins::All;
  v191 = v190;
  nitro::nitro_builtins::wrap_ft_function(v190, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v143 = v264;
  if (v264 == &v262)
  {
    v144 = 4;
    v143 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_428;
    v144 = 5;
  }
  (*v143)[v144]();
LABEL_428:
  v145 = v191;
  if (v191 == v190)
  {
    v146 = 4;
    v145 = v190;
  }
  else
  {
    if (!v191)
      goto LABEL_433;
    v146 = 5;
  }
  (*(void (**)(void))(*v145 + 8 * v146))();
LABEL_433:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 6578512;
  v188[0] = &off_1E2DACB70;
  v188[1] = nitro::nitro_builtins::Pad;
  v189 = v188;
  nitro::nitro_builtins::wrap_ft_function(v188, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v147 = v264;
  if (v264 == &v262)
  {
    v148 = 4;
    v147 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_440;
    v148 = 5;
  }
  (*v147)[v148]();
LABEL_440:
  v149 = v189;
  if (v189 == v188)
  {
    v150 = 4;
    v149 = v188;
  }
  else
  {
    if (!v189)
      goto LABEL_445;
    v150 = 5;
  }
  (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_445:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&__p, "LogicalNot");
  v186[0] = &off_1E2DACA68;
  v186[1] = nitro::nitro_builtins::LogicalNot;
  v187 = v186;
  nitro::nitro_builtins::wrap_ft_function(v186, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v151 = v264;
  if (v264 == &v262)
  {
    v152 = 4;
    v151 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_452;
    v152 = 5;
  }
  (*v151)[v152]();
LABEL_452:
  v153 = v187;
  if (v187 == v186)
  {
    v154 = 4;
    v153 = v186;
  }
  else
  {
    if (!v187)
      goto LABEL_457;
    v154 = 5;
  }
  (*(void (**)(void))(*v153 + 8 * v154))();
LABEL_457:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "Fill");
  v184[0] = &off_1E2DACAC0;
  v184[1] = nitro::nitro_builtins::Fill;
  v185 = v184;
  nitro::nitro_builtins::wrap_ft_function(v184, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v155 = v264;
  if (v264 == &v262)
  {
    v156 = 4;
    v155 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_464;
    v156 = 5;
  }
  (*v155)[v156]();
LABEL_464:
  v157 = v185;
  if (v185 == v184)
  {
    v158 = 4;
    v157 = v184;
  }
  else
  {
    if (!v185)
      goto LABEL_469;
    v158 = 5;
  }
  (*(void (**)(void))(*v157 + 8 * v158))();
LABEL_469:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "Squeeze");
  v182[0] = &off_1E2DACAC0;
  v182[1] = nitro::nitro_builtins::Squeeze;
  v183 = v182;
  nitro::nitro_builtins::wrap_ft_function(v182, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v159 = v264;
  if (v264 == &v262)
  {
    v160 = 4;
    v159 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_476;
    v160 = 5;
  }
  (*v159)[v160]();
LABEL_476:
  v161 = v183;
  if (v183 == v182)
  {
    v162 = 4;
    v161 = v182;
  }
  else
  {
    if (!v183)
      goto LABEL_481;
    v162 = 5;
  }
  (*(void (**)(void))(*v161 + 8 * v162))();
LABEL_481:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "Tanh");
  v180[0] = &off_1E2DACA68;
  v180[1] = nitro::nitro_builtins::Tanh;
  v181 = v180;
  nitro::nitro_builtins::wrap_ft_function(v180, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v163 = v264;
  if (v264 == &v262)
  {
    v164 = 4;
    v163 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_488;
    v164 = 5;
  }
  (*v163)[v164]();
LABEL_488:
  v165 = v181;
  if (v181 == v180)
  {
    v166 = 4;
    v165 = v180;
  }
  else
  {
    if (!v181)
      goto LABEL_493;
    v166 = 5;
  }
  (*(void (**)(void))(*v165 + 8 * v166))();
LABEL_493:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7565123;
  v178[0] = &off_1E2DACA68;
  v178[1] = nitro::nitro_builtins::Cos;
  v179 = v178;
  nitro::nitro_builtins::wrap_ft_function(v178, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v167 = v264;
  if (v264 == &v262)
  {
    v168 = 4;
    v167 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_500;
    v168 = 5;
  }
  (*v167)[v168]();
LABEL_500:
  v169 = v179;
  if (v179 == v178)
  {
    v170 = 4;
    v169 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_505;
    v170 = 5;
  }
  (*(void (**)(void))(*v169 + 8 * v170))();
LABEL_505:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 3;
  LODWORD(__p.__r_.__value_.__l.__data_) = 7235923;
  v176[0] = &off_1E2DACA68;
  v176[1] = nitro::nitro_builtins::Sin;
  v177 = v176;
  nitro::nitro_builtins::wrap_ft_function(v176, (uint64_t)&v262);
  nitro::nitro_execution_context::register_builtin(a1, &__p, &v262);
  v171 = v264;
  if (v264 == &v262)
  {
    v172 = 4;
    v171 = &v262;
  }
  else
  {
    if (!v264)
      goto LABEL_512;
    v172 = 5;
  }
  (*v171)[v172]();
LABEL_512:
  v173 = v177;
  if (v177 == v176)
  {
    v174 = 4;
    v173 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_517;
    v174 = 5;
  }
  (*(void (**)(void))(*v173 + 8 * v174))();
LABEL_517:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_19127A1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v19 = *(_QWORD **)(v17 - 80);
  if (v19 == v16)
  {
    v20 = 4;
    v19 = (_QWORD *)(v17 - 104);
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  v21 = (_QWORD *)a16;
  if ((char *)a16 == &a13)
  {
    v22 = 4;
    v21 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  _Unwind_Resume(a1);
}

_QWORD *nitro::nitro_builtins::wrap_ft_function@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v3 + 16))(a1[3]);
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(a2 + 24) = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &off_1E2DAF0E8;
  if (v9)
  {
    if (v9 == v8)
    {
      v4[4] = v4 + 1;
      (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
    }
    else
    {
      v4[4] = v9;
      v9 = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_QWORD *)(a2 + 24) = v5;
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v3 + 16))(a1[3]);
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(a2 + 24) = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &off_1E2DAF140;
  if (v9)
  {
    if (v9 == v8)
    {
      v4[4] = v4 + 1;
      (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
    }
    else
    {
      v4[4] = v9;
      v9 = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_QWORD *)(a2 + 24) = v5;
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v3 + 16))(a1[3]);
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(a2 + 24) = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &off_1E2DAF198;
  if (v9)
  {
    if (v9 == v8)
    {
      v4[4] = v4 + 1;
      (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
    }
    else
    {
      v4[4] = v9;
      v9 = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_QWORD *)(a2 + 24) = v5;
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v3 + 16))(a1[3]);
    }
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(a2 + 24) = 0;
  v4 = operator new(0x28uLL);
  v5 = v4;
  *v4 = &off_1E2DAF1F0;
  if (v9)
  {
    if (v9 == v8)
    {
      v4[4] = v4 + 1;
      (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
    }
    else
    {
      v4[4] = v9;
      v9 = 0;
    }
  }
  else
  {
    v4[4] = 0;
  }
  *(_QWORD *)(a2 + 24) = v5;
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_19127B13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_BYTE *nitro::nitro_builtins::arr_len@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _BYTE **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = 1;
  switch(result[8])
  {
    case 3:
      v3 = (_QWORD *)(*(_QWORD *)result + 8);
      v4 = (_QWORD *)(*(_QWORD *)result + 16);
      v5 = 3;
      goto LABEL_5;
    case 4:
      v3 = (_QWORD *)(*(_QWORD *)result + 8);
      v4 = (_QWORD *)(*(_QWORD *)result + 16);
      v5 = 4;
      goto LABEL_5;
    case 5:
      v3 = (_QWORD *)(*(_QWORD *)result + 8);
      v4 = (_QWORD *)(*(_QWORD *)result + 16);
      v5 = 5;
LABEL_5:
      v2 = (uint64_t)(*v4 - *v3) >> v5;
      goto LABEL_6;
    case 9:
      v7 = *(_QWORD *)(*(_QWORD *)result + 32);
      v6 = *(uint64_t **)(*(_QWORD *)result + 40);
      v2 = (uint64_t)v6 - v7;
      if (v6 == (uint64_t *)v7)
        goto LABEL_6;
      if (!*(_QWORD *)(*(_QWORD *)result + 16))
      {
        v2 = 0;
        goto LABEL_6;
      }
      if ((unint64_t)(v2 - 8) < 8)
      {
        v2 = 1;
        v8 = *(uint64_t **)(*(_QWORD *)result + 32);
        do
        {
LABEL_15:
          v14 = *v8++;
          v2 *= v14;
        }
        while (v8 != v6);
        goto LABEL_6;
      }
      v9 = ((unint64_t)(v2 - 8) >> 3) + 1;
      v8 = (uint64_t *)(v7 + 8 * (v9 & 0x3FFFFFFFFFFFFFFELL));
      v10 = (_BYTE **)(v7 + 8);
      v11 = 1;
      v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
      v13 = 1;
      do
      {
        result = *v10;
        v11 *= (_QWORD)*(v10 - 1);
        v13 *= (_QWORD)*v10;
        v10 += 2;
        v12 -= 2;
      }
      while (v12);
      v2 = v13 * v11;
      if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_15;
LABEL_6:
      *(_BYTE *)(a2 + 8) = 0;
      *(_QWORD *)a2 = v2;
      return result;
    default:
      goto LABEL_6;
  }
}

void nitro::nitro_builtins::cast_str(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_19127B2F4(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 __p, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t __pa,uint64_t __p_8,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  std::ios_base *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  char v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  char v74;
  int v75;
  uint64_t v76;

  v58 = MEMORY[0x1E0DE4FD0];
  v59 = MEMORY[0x1E0DE4FD0] + 104;
  v76 = MEMORY[0x1E0DE4FD0] + 104;
  v60 = MEMORY[0x1E0DE4FD0] + 64;
  v61 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v62 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v63 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v71 = MEMORY[0x1E0DE4FD0] + 64;
  v70[0] = v62;
  *(_QWORD *)((char *)v70 + *(_QWORD *)(v62 - 24)) = v63;
  v70[1] = 0;
  v64 = (std::ios_base *)((char *)v70 + *(_QWORD *)(v70[0] - 24));
  std::ios_base::init(v64, &v72);
  v64[1].__vftable = 0;
  v64[1].__fmtflags_ = -1;
  v65 = v61[5];
  v71 = v61[4];
  *(uint64_t *)((char *)&v71 + *(_QWORD *)(v71 - 24)) = v65;
  v70[0] = v61[1];
  *(_QWORD *)((char *)v70 + *(_QWORD *)(v70[0] - 24)) = v61[6];
  v76 = v59;
  v70[0] = v58 + 24;
  v71 = v60;
  std::streambuf::basic_streambuf();
  v66 = MEMORY[0x1E0DE4FB8];
  v72 = MEMORY[0x1E0DE4FB8] + 16;
  v73 = 0u;
  *(_OWORD *)(v57 + 104) = 0u;
  v75 = 24;
  std::ostream::operator<<();
  std::stringbuf::str();
  v70[0] = *v61;
  v67 = v61[9];
  *(_QWORD *)((char *)v70 + *(_QWORD *)(v70[0] - 24)) = v61[8];
  v71 = v67;
  v72 = v66 + 16;
  if (v74 < 0)
    operator delete((void *)v73);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v76);
  nitro::flexible_type::flexible_type<std::string>(v56, &v68);
  if (v69 < 0)
    operator delete((void *)v68);
}

void sub_19127B638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](a10);
  _Unwind_Resume(a1);
}

void sub_19127B68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::cast_double(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t *sub_19127B6EC(uint64_t *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, void *a7, uint64_t a8, void *__pa, void *a10, uint64_t a11, void *a12, uint64_t a13, std::string *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  double v28;

  v28 = (double)*__p;
  *(_BYTE *)(v27 + 8) = 1;
  *(double *)v27 = v28;
  return __p;
}

void sub_19127BA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  void *v28;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v27 & 1) != 0)
    {
LABEL_7:
      __cxa_free_exception(v28);
      _Unwind_Resume(a1);
    }
  }
  else if (v27)
  {
    goto LABEL_7;
  }
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_builtins::cast_int@<X0>(nitro::nitro_builtins *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v5;

  result = nitro::flexible_type_converter<int>::get((uint64_t)&v5, (unsigned __int8 *)this);
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)a2 = (int)result;
  return result;
}

void sub_19127BC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::flex_max(nitro::nitro_builtins *a1, nitro::nitro_builtins *a2)
{
  _BYTE v3[16];
  _BYTE v4[16];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  nitro::nitro_builtins::get_scalar(a1, (nitro::nitro_builtins *)v4);
  nitro::nitro_builtins::get_scalar(a2, (nitro::nitro_builtins *)v3);
  __asm { BR              X10 }
}

uint64_t sub_19127BD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  return ((uint64_t (*)(void))((char *)sub_19127BD50 + 4 * word_191A91254[a17]))();
}

void sub_19127BD50()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;

  if (v53 <= v51)
  {
    *(_QWORD *)v0 = v51;
    *(_BYTE *)(v0 + 8) = v52;
  }
  else
  {
    *(_QWORD *)v0 = v53;
    *(_BYTE *)(v0 + 8) = v54;
    v54 = 0;
    switch(v52)
    {
      case 2:
        do
        {
          v26 = __ldaxr((unint64_t *)v51);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, (unint64_t *)v51));
        if (!v27 && v51)
        {
          if (*(char *)(v51 + 31) < 0)
            operator delete(*(void **)(v51 + 8));
          v28 = v51;
          v29 = 0x1012C404EF22A49;
          goto LABEL_94;
        }
        break;
      case 3:
        do
        {
          v36 = __ldaxr((unint64_t *)v51);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, (unint64_t *)v51));
        if (!v37 && v51)
        {
          v38 = *(void **)(v51 + 8);
          if (v38)
          {
            *(_QWORD *)(v51 + 16) = v38;
            operator delete(v38);
          }
          v28 = v51;
          v29 = 0x1080C409938AC02;
          goto LABEL_94;
        }
        break;
      case 4:
        do
        {
          v30 = __ldaxr((unint64_t *)v51);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, (unint64_t *)v51));
        if (!v31)
        {
          v32 = v51;
          if (v51)
          {
            v33 = *(_QWORD *)(v51 + 8);
            if (!v33)
              goto LABEL_80;
            v34 = *(_QWORD *)(v51 + 16);
            v35 = *(void **)(v51 + 8);
            if (v34 != v33)
            {
              do
              {
                v34 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v51 + 24, v34);
              }
              while (v34 != v33);
              v35 = *(void **)(v51 + 8);
            }
            *(_QWORD *)(v51 + 16) = v33;
            goto LABEL_79;
          }
        }
        break;
      case 5:
        do
        {
          v39 = __ldaxr((unint64_t *)v51);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, (unint64_t *)v51));
        if (!v40)
        {
          v32 = v51;
          if (v51)
          {
            v41 = *(_QWORD *)(v51 + 8);
            if (v41)
            {
              v42 = *(_QWORD *)(v51 + 16);
              v43 = *(void **)(v51 + 8);
              if (v42 != v41)
              {
                do
                  v42 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v42 - 32);
                while (v42 != v41);
                v43 = *(void **)(v51 + 8);
              }
              *(_QWORD *)(v51 + 16) = v41;
              v35 = v43;
LABEL_79:
              operator delete(v35);
            }
LABEL_80:
            v28 = v32;
            v29 = 0x1020C405E66F15BLL;
            goto LABEL_94;
          }
        }
        break;
      case 9:
        do
        {
          v44 = __ldaxr((unint64_t *)v51);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, (unint64_t *)v51));
        if (!v45 && v51)
        {
          v46 = *(void **)(v51 + 56);
          if (v46)
          {
            *(_QWORD *)(v51 + 64) = v46;
            operator delete(v46);
          }
          v47 = *(void **)(v51 + 32);
          if (v47)
          {
            *(_QWORD *)(v51 + 40) = v47;
            operator delete(v47);
          }
          v48 = *(std::__shared_weak_count **)(v51 + 24);
          if (v48)
          {
            p_shared_owners = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(p_shared_owners);
            while (__stlxr(v50 - 1, p_shared_owners));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v28 = v51;
          v29 = 0x10B0C4002311774;
LABEL_94:
          MEMORY[0x19401CD90](v28, v29);
        }
        break;
      default:
        break;
    }
  }
  switch(v54)
  {
    case 2:
      do
      {
        v1 = __ldaxr((unint64_t *)v53);
        v2 = v1 - 1;
      }
      while (__stlxr(v2, (unint64_t *)v53));
      if (!v2 && v53)
      {
        if (*(char *)(v53 + 31) < 0)
          operator delete(*(void **)(v53 + 8));
        v3 = v53;
        v4 = 0x1012C404EF22A49;
        goto LABEL_48;
      }
      break;
    case 3:
      do
      {
        v11 = __ldaxr((unint64_t *)v53);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unint64_t *)v53));
      if (!v12 && v53)
      {
        v13 = *(void **)(v53 + 8);
        if (v13)
        {
          *(_QWORD *)(v53 + 16) = v13;
          operator delete(v13);
        }
        v3 = v53;
        v4 = 0x1080C409938AC02;
        goto LABEL_48;
      }
      break;
    case 4:
      do
      {
        v5 = __ldaxr((unint64_t *)v53);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unint64_t *)v53));
      if (!v6)
      {
        v7 = v53;
        if (v53)
        {
          v8 = *(_QWORD *)(v53 + 8);
          if (!v8)
            goto LABEL_34;
          v9 = *(_QWORD *)(v53 + 16);
          v10 = *(void **)(v53 + 8);
          if (v9 != v8)
          {
            do
            {
              v9 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v53 + 24, v9);
            }
            while (v9 != v8);
            v10 = *(void **)(v53 + 8);
          }
          *(_QWORD *)(v53 + 16) = v8;
          goto LABEL_33;
        }
      }
      break;
    case 5:
      do
      {
        v14 = __ldaxr((unint64_t *)v53);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unint64_t *)v53));
      if (!v15)
      {
        v7 = v53;
        if (v53)
        {
          v16 = *(_QWORD *)(v53 + 8);
          if (v16)
          {
            v17 = *(_QWORD *)(v53 + 16);
            v18 = *(void **)(v53 + 8);
            if (v17 != v16)
            {
              do
                v17 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v17 - 32);
              while (v17 != v16);
              v18 = *(void **)(v53 + 8);
            }
            *(_QWORD *)(v53 + 16) = v16;
            v10 = v18;
LABEL_33:
            operator delete(v10);
          }
LABEL_34:
          v3 = v7;
          v4 = 0x1020C405E66F15BLL;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      do
      {
        v19 = __ldaxr((unint64_t *)v53);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unint64_t *)v53));
      if (!v20 && v53)
      {
        v21 = *(void **)(v53 + 56);
        if (v21)
        {
          *(_QWORD *)(v53 + 64) = v21;
          operator delete(v21);
        }
        v22 = *(void **)(v53 + 32);
        if (v22)
        {
          *(_QWORD *)(v53 + 40) = v22;
          operator delete(v22);
        }
        v23 = *(std::__shared_weak_count **)(v53 + 24);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v3 = v53;
        v4 = 0x10B0C4002311774;
LABEL_48:
        MEMORY[0x19401CD90](v3, v4);
      }
      break;
    default:
      return;
  }
}

void sub_19127C6CC(_Unwind_Exception *exception_object, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v21 = a2;
  switch((char)a16)
  {
    case 2:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()();
      goto LABEL_7;
    case 3:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()();
      goto LABEL_7;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()();
      goto LABEL_7;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()();
      goto LABEL_7;
    case 9:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()();
LABEL_7:
      exception_object = a12;
      break;
    default:
      break;
  }
  switch(a20)
  {
    case 2:
      do
      {
        v22 = __ldaxr((unint64_t *)a19);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unint64_t *)a19));
      if (v23 || !a19)
        goto LABEL_35;
      if (*(char *)(a19 + 31) < 0)
        operator delete(*(void **)(a19 + 8));
      v24 = a19;
      v25 = 0x1012C404EF22A49;
      break;
    case 3:
      do
      {
        v26 = __ldaxr((unint64_t *)a19);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unint64_t *)a19));
      if (v27 || !a19)
        goto LABEL_35;
      v28 = *(void **)(a19 + 8);
      if (v28)
      {
        *(_QWORD *)(a19 + 16) = v28;
        operator delete(v28);
      }
      v24 = a19;
      v25 = 0x1080C409938AC02;
      break;
    case 4:
      do
      {
        v29 = __ldaxr((unint64_t *)a19);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unint64_t *)a19));
      if (v30 || !a19)
        goto LABEL_35;
      v24 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a19);
      goto LABEL_29;
    case 5:
      do
      {
        v31 = __ldaxr((unint64_t *)a19);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, (unint64_t *)a19));
      if (v32 || !a19)
        goto LABEL_35;
      v24 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(a19);
LABEL_29:
      v25 = 0x1020C405E66F15BLL;
      break;
    case 9:
      do
      {
        v33 = __ldaxr((unint64_t *)a19);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, (unint64_t *)a19));
      if (v34 || !a19)
        goto LABEL_35;
      v24 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((_QWORD *)a19);
      v25 = 0x10B0C4002311774;
      break;
    default:
LABEL_35:
      _Unwind_Resume(exception_object);
      return;
  }
  MEMORY[0x19401CD90](v24, v25, v21);
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::flex_min(nitro::nitro_builtins *a1, nitro::nitro_builtins *a2)
{
  _BYTE v3[16];
  _BYTE v4[16];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  nitro::nitro_builtins::get_scalar(a1, (nitro::nitro_builtins *)v4);
  nitro::nitro_builtins::get_scalar(a2, (nitro::nitro_builtins *)v3);
  __asm { BR              X10 }
}

uint64_t sub_19127C92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  return ((uint64_t (*)(void))((char *)sub_19127C948 + 4 * word_191A912CC[a17]))();
}

void sub_19127C948()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;

  if (v53 >= v51)
  {
    *(_QWORD *)v0 = v51;
    *(_BYTE *)(v0 + 8) = v52;
  }
  else
  {
    *(_QWORD *)v0 = v53;
    *(_BYTE *)(v0 + 8) = v54;
    v54 = 0;
    switch(v52)
    {
      case 2:
        do
        {
          v26 = __ldaxr((unint64_t *)v51);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, (unint64_t *)v51));
        if (!v27 && v51)
        {
          if (*(char *)(v51 + 31) < 0)
            operator delete(*(void **)(v51 + 8));
          v28 = v51;
          v29 = 0x1012C404EF22A49;
          goto LABEL_94;
        }
        break;
      case 3:
        do
        {
          v30 = __ldaxr((unint64_t *)v51);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, (unint64_t *)v51));
        if (!v31 && v51)
        {
          v32 = *(void **)(v51 + 8);
          if (v32)
          {
            *(_QWORD *)(v51 + 16) = v32;
            operator delete(v32);
          }
          v28 = v51;
          v29 = 0x1080C409938AC02;
          goto LABEL_94;
        }
        break;
      case 4:
        do
        {
          v33 = __ldaxr((unint64_t *)v51);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, (unint64_t *)v51));
        if (!v34)
        {
          v35 = v51;
          if (v51)
          {
            v36 = *(_QWORD *)(v51 + 8);
            if (!v36)
              goto LABEL_80;
            v37 = *(_QWORD *)(v51 + 16);
            v38 = *(void **)(v51 + 8);
            if (v37 != v36)
            {
              do
              {
                v37 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v51 + 24, v37);
              }
              while (v37 != v36);
              v38 = *(void **)(v51 + 8);
            }
            *(_QWORD *)(v51 + 16) = v36;
            goto LABEL_79;
          }
        }
        break;
      case 5:
        do
        {
          v39 = __ldaxr((unint64_t *)v51);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, (unint64_t *)v51));
        if (!v40)
        {
          v35 = v51;
          if (v51)
          {
            v41 = *(_QWORD *)(v51 + 8);
            if (v41)
            {
              v42 = *(_QWORD *)(v51 + 16);
              v43 = *(void **)(v51 + 8);
              if (v42 != v41)
              {
                do
                  v42 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v42 - 32);
                while (v42 != v41);
                v43 = *(void **)(v51 + 8);
              }
              *(_QWORD *)(v51 + 16) = v41;
              v38 = v43;
LABEL_79:
              operator delete(v38);
            }
LABEL_80:
            v28 = v35;
            v29 = 0x1020C405E66F15BLL;
            goto LABEL_94;
          }
        }
        break;
      case 9:
        do
        {
          v44 = __ldaxr((unint64_t *)v51);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, (unint64_t *)v51));
        if (!v45 && v51)
        {
          v46 = *(void **)(v51 + 56);
          if (v46)
          {
            *(_QWORD *)(v51 + 64) = v46;
            operator delete(v46);
          }
          v47 = *(void **)(v51 + 32);
          if (v47)
          {
            *(_QWORD *)(v51 + 40) = v47;
            operator delete(v47);
          }
          v48 = *(std::__shared_weak_count **)(v51 + 24);
          if (v48)
          {
            p_shared_owners = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(p_shared_owners);
            while (__stlxr(v50 - 1, p_shared_owners));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v28 = v51;
          v29 = 0x10B0C4002311774;
LABEL_94:
          MEMORY[0x19401CD90](v28, v29);
        }
        break;
      default:
        break;
    }
  }
  switch(v54)
  {
    case 2:
      do
      {
        v1 = __ldaxr((unint64_t *)v53);
        v2 = v1 - 1;
      }
      while (__stlxr(v2, (unint64_t *)v53));
      if (!v2 && v53)
      {
        if (*(char *)(v53 + 31) < 0)
          operator delete(*(void **)(v53 + 8));
        v3 = v53;
        v4 = 0x1012C404EF22A49;
        goto LABEL_48;
      }
      break;
    case 3:
      do
      {
        v11 = __ldaxr((unint64_t *)v53);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unint64_t *)v53));
      if (!v12 && v53)
      {
        v13 = *(void **)(v53 + 8);
        if (v13)
        {
          *(_QWORD *)(v53 + 16) = v13;
          operator delete(v13);
        }
        v3 = v53;
        v4 = 0x1080C409938AC02;
        goto LABEL_48;
      }
      break;
    case 4:
      do
      {
        v5 = __ldaxr((unint64_t *)v53);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unint64_t *)v53));
      if (!v6)
      {
        v7 = v53;
        if (v53)
        {
          v8 = *(_QWORD *)(v53 + 8);
          if (!v8)
            goto LABEL_34;
          v9 = *(_QWORD *)(v53 + 16);
          v10 = *(void **)(v53 + 8);
          if (v9 != v8)
          {
            do
            {
              v9 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v53 + 24, v9);
            }
            while (v9 != v8);
            v10 = *(void **)(v53 + 8);
          }
          *(_QWORD *)(v53 + 16) = v8;
          goto LABEL_33;
        }
      }
      break;
    case 5:
      do
      {
        v14 = __ldaxr((unint64_t *)v53);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unint64_t *)v53));
      if (!v15)
      {
        v7 = v53;
        if (v53)
        {
          v16 = *(_QWORD *)(v53 + 8);
          if (v16)
          {
            v17 = *(_QWORD *)(v53 + 16);
            v18 = *(void **)(v53 + 8);
            if (v17 != v16)
            {
              do
                v17 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v17 - 32);
              while (v17 != v16);
              v18 = *(void **)(v53 + 8);
            }
            *(_QWORD *)(v53 + 16) = v16;
            v10 = v18;
LABEL_33:
            operator delete(v10);
          }
LABEL_34:
          v3 = v7;
          v4 = 0x1020C405E66F15BLL;
          goto LABEL_48;
        }
      }
      break;
    case 9:
      do
      {
        v19 = __ldaxr((unint64_t *)v53);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unint64_t *)v53));
      if (!v20 && v53)
      {
        v21 = *(void **)(v53 + 56);
        if (v21)
        {
          *(_QWORD *)(v53 + 64) = v21;
          operator delete(v21);
        }
        v22 = *(void **)(v53 + 32);
        if (v22)
        {
          *(_QWORD *)(v53 + 40) = v22;
          operator delete(v22);
        }
        v23 = *(std::__shared_weak_count **)(v53 + 24);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v3 = v53;
        v4 = 0x10B0C4002311774;
LABEL_48:
        MEMORY[0x19401CD90](v3, v4);
      }
      break;
    default:
      return;
  }
}

void sub_19127D2C4(_Unwind_Exception *exception_object, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v21 = a2;
  switch((char)a16)
  {
    case 2:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()();
      goto LABEL_7;
    case 3:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()();
      goto LABEL_7;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()();
      goto LABEL_7;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()();
      goto LABEL_7;
    case 9:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()();
LABEL_7:
      exception_object = a12;
      break;
    default:
      break;
  }
  switch(a20)
  {
    case 2:
      do
      {
        v22 = __ldaxr((unint64_t *)a19);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unint64_t *)a19));
      if (v23 || !a19)
        goto LABEL_35;
      if (*(char *)(a19 + 31) < 0)
        operator delete(*(void **)(a19 + 8));
      v24 = a19;
      v25 = 0x1012C404EF22A49;
      break;
    case 3:
      do
      {
        v26 = __ldaxr((unint64_t *)a19);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unint64_t *)a19));
      if (v27 || !a19)
        goto LABEL_35;
      v28 = *(void **)(a19 + 8);
      if (v28)
      {
        *(_QWORD *)(a19 + 16) = v28;
        operator delete(v28);
      }
      v24 = a19;
      v25 = 0x1080C409938AC02;
      break;
    case 4:
      do
      {
        v29 = __ldaxr((unint64_t *)a19);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, (unint64_t *)a19));
      if (v30 || !a19)
        goto LABEL_35;
      v24 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a19);
      goto LABEL_29;
    case 5:
      do
      {
        v31 = __ldaxr((unint64_t *)a19);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, (unint64_t *)a19));
      if (v32 || !a19)
        goto LABEL_35;
      v24 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(a19);
LABEL_29:
      v25 = 0x1020C405E66F15BLL;
      break;
    case 9:
      do
      {
        v33 = __ldaxr((unint64_t *)a19);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, (unint64_t *)a19));
      if (v34 || !a19)
        goto LABEL_35;
      v24 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((_QWORD *)a19);
      v25 = 0x10B0C4002311774;
      break;
    default:
LABEL_35:
      _Unwind_Resume(exception_object);
      return;
  }
  MEMORY[0x19401CD90](v24, v25, v21);
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::MakeTensorArray(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  const nitro::ndarray_container *v7;
  int v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  unint64_t v16;
  std::string::size_type v17;
  char *v18;
  void *v19;
  std::string::size_type v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type v30;
  char *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int *v36;
  int *v37;
  std::string::size_type v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  void *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  size_t v76;
  char *v77;
  char *v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  char *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  size_t __idx;
  size_t v94;
  uint64_t v95;
  std::string v96;
  std::string::size_type v97;
  void *__p;
  void *v99;
  void *v100[2];
  char *v101;
  void *v102[2];
  char *v103;
  int __dst;
  uint64_t __dst_8;
  std::__shared_weak_count *v106;
  void *v107;
  char *v108;
  void *v109;
  char *v110;
  uint64_t v111;

  v100[0] = 0;
  v100[1] = 0;
  v101 = 0;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (v4 == 9)
  {
    v6 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(v6 + 8);
    v7 = (const nitro::ndarray_container *)(v6 + 8);
    if (v8 == 3)
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, v7);
    else
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v7, (uint64_t)&__dst);
    nitro::ndarray<int>::ndarray((uint64_t)&v96, (uint64_t)&__dst);
    nitro::ndarray<int>::get_elements_copy((uint64_t *)&v96, (uint64_t *)v102);
    *(_OWORD *)v100 = *(_OWORD *)v102;
    v101 = v103;
    v102[1] = 0;
    v103 = 0;
    v102[0] = 0;
    if (__p)
    {
      v99 = __p;
      operator delete(__p);
    }
    if (v96.__r_.__value_.__r.__words[2])
    {
      v97 = v96.__r_.__value_.__r.__words[2];
      operator delete((void *)v96.__r_.__value_.__r.__words[2]);
    }
    size = (std::__shared_weak_count *)v96.__r_.__value_.__l.__size_;
    if (v96.__r_.__value_.__l.__size_)
    {
      v10 = (unint64_t *)(v96.__r_.__value_.__l.__size_ + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (v109)
    {
      v110 = (char *)v109;
      operator delete(v109);
    }
    if (v107)
    {
      v108 = (char *)v107;
      operator delete(v107);
    }
    v12 = v106;
    if (v106)
    {
      p_shared_owners = (unint64_t *)&v106->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else if (v4 == 4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (*(_QWORD *)(*(_QWORD *)a2 + 16) != v5)
      __asm { BR              X10 }
  }
  memset(&v96, 0, sizeof(v96));
  v15 = nitro::flexible_type_converter<int>::get((uint64_t)&__dst, (unsigned __int8 *)this);
  v16 = v15;
  v17 = v96.__r_.__value_.__l.__size_;
  if (v96.__r_.__value_.__l.__size_ >= v96.__r_.__value_.__r.__words[2])
  {
    v19 = (void *)v96.__r_.__value_.__r.__words[0];
    v20 = v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0];
    v21 = (uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 3;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v23 = v96.__r_.__value_.__r.__words[2] - v96.__r_.__value_.__r.__words[0];
    if ((uint64_t)(v96.__r_.__value_.__r.__words[2] - v96.__r_.__value_.__r.__words[0]) >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = (char *)operator new(8 * v24);
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[8 * v21];
    *(_QWORD *)v26 = v16;
    v18 = v26 + 8;
    if ((void *)v17 != v19)
    {
      v27 = v17 - (_QWORD)v19 - 8;
      if (v27 < 0x58)
        goto LABEL_147;
      if (v17 - (_QWORD)v25 - v20 < 0x20)
        goto LABEL_147;
      v28 = (v27 >> 3) + 1;
      v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
      v30 = v17 - v29;
      v26 -= v29;
      v31 = &v25[8 * v21 - 16];
      v32 = (__int128 *)(v17 - 16);
      v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v34 = *v32;
        *((_OWORD *)v31 - 1) = *(v32 - 1);
        *(_OWORD *)v31 = v34;
        v31 -= 32;
        v32 -= 2;
        v33 -= 4;
      }
      while (v33);
      v17 = v30;
      if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_147:
        do
        {
          v35 = *(_QWORD *)(v17 - 8);
          v17 -= 8;
          *((_QWORD *)v26 - 1) = v35;
          v26 -= 8;
        }
        while ((void *)v17 != v19);
      }
    }
    v96.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    v96.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
    v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&v25[8 * v24];
    if (v19)
      operator delete(v19);
  }
  else
  {
    *(_QWORD *)v96.__r_.__value_.__l.__size_ = v15;
    v18 = (char *)(v17 + 8);
  }
  v96.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
  v36 = (int *)v100[0];
  v37 = (int *)v100[1];
  while (v36 != v37)
  {
    v39 = *v36;
    if ((v39 & 0x80000000) == 0)
    {
      if ((unint64_t)v18 < v96.__r_.__value_.__r.__words[2])
      {
        *(_QWORD *)v18 = v39;
        v38 = (std::string::size_type)(v18 + 8);
      }
      else
      {
        v40 = (char *)v96.__r_.__value_.__r.__words[0];
        v41 = &v18[-v96.__r_.__value_.__r.__words[0]];
        v42 = (uint64_t)&v18[-v96.__r_.__value_.__r.__words[0]] >> 3;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v44 = v96.__r_.__value_.__r.__words[2] - v96.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v96.__r_.__value_.__r.__words[2] - v96.__r_.__value_.__r.__words[0]) >> 2 > v43)
          v43 = v44 >> 2;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v46 = operator new(8 * v45);
        }
        else
        {
          v46 = 0;
        }
        v54 = (char *)v46 + 8 * v42;
        *v54 = v39;
        v38 = (std::string::size_type)(v54 + 1);
        if (v18 != v40)
        {
          v55 = v18 - v40 - 8;
          if (v55 < 0x168)
          {
            v56 = v18;
            goto LABEL_78;
          }
          v58 = (v18 - 8 - v40) & 0xFFFFFFFFFFFFFFF8;
          if (&v41[(_QWORD)v46 - 8 - v58] > &v41[(_QWORD)v46 - 8])
          {
            v56 = v18;
            goto LABEL_78;
          }
          if (&v18[-v58 - 8] > v18 - 8)
          {
            v56 = v18;
            goto LABEL_78;
          }
          if ((unint64_t)(v18 - &v41[(_QWORD)v46]) < 0x20)
          {
            v56 = v18;
            goto LABEL_78;
          }
          v64 = (v55 >> 3) + 1;
          v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
          v56 = &v18[-v65];
          v54 = (_QWORD *)((char *)v54 - v65);
          v66 = (char *)v46 + 8 * v42 - 16;
          v67 = v18 - 16;
          v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v69 = *(_OWORD *)v67;
            *(v66 - 1) = *((_OWORD *)v67 - 1);
            *v66 = v69;
            v66 -= 2;
            v67 -= 32;
            v68 -= 4;
          }
          while (v68);
          if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_78:
              v57 = *((_QWORD *)v56 - 1);
              v56 -= 8;
              *--v54 = v57;
            }
            while (v56 != v40);
          }
        }
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
        v96.__r_.__value_.__l.__size_ = v38;
        v96.__r_.__value_.__r.__words[2] = (std::string::size_type)v46 + 8 * v45;
        if (v40)
          operator delete(v40);
      }
      v96.__r_.__value_.__l.__size_ = v38;
      v16 *= *v36;
      goto LABEL_50;
    }
    if ((unint64_t)v18 >= v96.__r_.__value_.__r.__words[2])
    {
      v47 = (char *)v96.__r_.__value_.__r.__words[0];
      v48 = &v18[-v96.__r_.__value_.__r.__words[0]];
      v49 = (uint64_t)&v18[-v96.__r_.__value_.__r.__words[0]] >> 3;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v51 = v96.__r_.__value_.__r.__words[2] - v96.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v96.__r_.__value_.__r.__words[2] - v96.__r_.__value_.__r.__words[0]) >> 2 > v50)
        v50 = v51 >> 2;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
      {
        if (v52 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v53 = operator new(8 * v52);
      }
      else
      {
        v53 = 0;
      }
      v59 = &v53[8 * v49];
      *v59 = 1;
      v38 = (std::string::size_type)(v59 + 1);
      if (v18 != v47)
      {
        v60 = v18 - v47 - 8;
        if (v60 < 0x168)
        {
          v61 = v18;
          goto LABEL_89;
        }
        v63 = (v18 - 8 - v47) & 0xFFFFFFFFFFFFFFF8;
        if (&v48[(_QWORD)v53 - 8 - v63] > &v48[(_QWORD)v53 - 8])
        {
          v61 = v18;
          goto LABEL_89;
        }
        if (&v18[-v63 - 8] > v18 - 8)
        {
          v61 = v18;
          goto LABEL_89;
        }
        if ((unint64_t)(v18 - v53 - (_QWORD)v48) < 0x20)
        {
          v61 = v18;
          goto LABEL_89;
        }
        v70 = (v60 >> 3) + 1;
        v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v61 = &v18[-v71];
        v59 = (_QWORD *)((char *)v59 - v71);
        v72 = &v53[8 * v49 - 16];
        v73 = v18 - 16;
        v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v75 = *(_OWORD *)v73;
          *(v72 - 1) = *((_OWORD *)v73 - 1);
          *v72 = v75;
          v72 -= 2;
          v73 -= 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_89:
            v62 = *((_QWORD *)v61 - 1);
            v61 -= 8;
            *--v59 = v62;
          }
          while (v61 != v47);
        }
      }
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
      v96.__r_.__value_.__l.__size_ = v38;
      v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&v53[8 * v52];
      if (v47)
        operator delete(v47);
      goto LABEL_92;
    }
    *(_QWORD *)v18 = 1;
    v38 = (std::string::size_type)(v18 + 8);
LABEL_92:
    v96.__r_.__value_.__l.__size_ = v38;
LABEL_50:
    ++v36;
    v18 = (char *)v38;
  }
  v102[0] = 0;
  v102[1] = 0;
  v103 = 0;
  if (v16)
  {
    if (v16 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v76 = 4 * v16;
    v77 = (char *)operator new(4 * v16);
    v78 = &v77[4 * v16];
    v102[0] = v77;
    v103 = v78;
    bzero(v77, v76);
    v102[1] = v78;
  }
  __idx = 0;
  v94 = 0;
  v95 = 0;
  nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__dst, (uint64_t)v102, &v96.__r_.__value_.__l.__data_, (char **)&__idx, 0);
  if (__idx)
  {
    v94 = __idx;
    operator delete((void *)__idx);
  }
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 9;
  v79 = (_QWORD *)operator new();
  *v79 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v79 + 1));
  *(_QWORD *)a4 = v79;
  *v79 = 1;
  *((_DWORD *)v79 + 2) = __dst;
  v81 = __dst_8;
  v80 = v106;
  if (v106)
  {
    v82 = (unint64_t *)&v106->__shared_owners_;
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
  }
  v84 = (std::__shared_weak_count *)v79[3];
  v79[2] = v81;
  v79[3] = v80;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v79 + 4, (char *)v107, v108, (v108 - (_BYTE *)v107) >> 3);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v79 + 7, (char *)v109, v110, (v110 - (_BYTE *)v109) >> 3);
  v87 = (char *)v109;
  v79[10] = v111;
  if (v87)
  {
    v110 = v87;
    operator delete(v87);
  }
  if (v107)
  {
    v108 = (char *)v107;
    operator delete(v107);
  }
  v88 = v106;
  if (v106)
  {
    v89 = (unint64_t *)&v106->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  if (v102[0])
  {
    v102[1] = v102[0];
    operator delete(v102[0]);
  }
  if (v96.__r_.__value_.__r.__words[0])
  {
    v96.__r_.__value_.__l.__size_ = v96.__r_.__value_.__r.__words[0];
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (v100[0])
    operator delete(v100[0]);
}

void sub_19127E0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;

  if (a39 < 0)
    operator delete(__p);
  if (a19 < 0)
  {
    operator delete(a14);
    if ((v40 & 1) == 0)
    {
LABEL_8:
      if (a26)
        operator delete(a26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  goto LABEL_8;
}

void sub_19127E510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::TensorArrayScatter(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, const nitro::flexible_type *a4@<X8>)
{
  uint64_t v9;
  uint64_t *v10;
  int64_t v11;
  unint64_t v12;
  int *begin;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  std::vector<int>::pointer v19;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  __int128 v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int8x16_t v31;
  int64_t v32;
  int64_t v33;
  char *v34;
  int64_t v35;
  char *v36;
  _BYTE *v37;
  _BYTE *v38;
  int64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  int64_t v75;
  char *v76;
  char *v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  int64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  int64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  int64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  int64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  __int128 v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  void *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 *v158;
  __int128 *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  std::vector<int>::pointer v164;
  unint64_t v165;
  __int128 *v166;
  int64x2_t *v167;
  uint64_t *v168;
  __n128 v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  __int128 v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  const nitro::flexible_type *v187;
  unint64_t v188;
  void ***v189;
  void *v190[2];
  void *v191[2];
  void *v192;
  void *v193[2];
  uint64_t v194;
  uint64_t v195;
  void *v196;
  void *v197;
  char *v198;
  int64x2_t v199;
  unint64_t v200;
  int64x2_t *v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  void *v205[2];
  uint64_t v206;
  uint64_t v207;
  void *v208;
  char *v209;
  char *v210;
  void *v211;
  _BYTE *v212;
  char *v213;
  std::vector<int> v214;
  int v215;
  __int128 v216;
  __int128 __p;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  __int128 *v222;
  __int128 *v223;
  __int128 *v224;
  __int128 *v225;
  void *v226;
  void *v227;
  uint64_t *v228;
  uint64_t *v229;
  uint64_t *v230;

  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v215, (const nitro::ndarray_container *)(*(_QWORD *)a3 + 8));
  v9 = *(_QWORD *)a2;
  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)this, &v214);
  if (v214.__end_ == v214.__begin_)
  {
    *(_QWORD *)a4 = 0;
    *((_BYTE *)a4 + 8) = 0;
    if (a3 != a4)
    {
      *(_QWORD *)a4 = *(_QWORD *)a3;
      v14 = *((unsigned __int8 *)a3 + 8);
      *((_BYTE *)a4 + 8) = v14;
      switch(v14)
      {
        case 2:
          v15 = *(unint64_t **)a4;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
          break;
        case 3:
          v89 = *(unint64_t **)a4;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 + 1, v89));
          break;
        case 4:
          v87 = *(unint64_t **)a4;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 + 1, v87));
          break;
        case 5:
          v91 = *(unint64_t **)a4;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 + 1, v91));
          break;
        case 9:
          v93 = *(unint64_t **)a4;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 + 1, v93));
          break;
        default:
          goto LABEL_290;
      }
    }
    goto LABEL_290;
  }
  v10 = (uint64_t *)__p;
  v11 = *(_QWORD *)__p - 1;
  v12 = (char *)v214.__end_ - (char *)v214.__begin_ - 4;
  if (v12 >= 0x1C)
  {
    v17 = (v12 >> 2) + 1;
    v18 = vdupq_n_s64(v11);
    begin = &v214.__begin_[v17 & 0x7FFFFFFFFFFFFFF8];
    v19 = v214.__begin_ + 4;
    v20 = v17 & 0x7FFFFFFFFFFFFFF8;
    v21 = v18;
    v22 = v18;
    v23 = v18;
    do
    {
      v24 = *((_OWORD *)v19 - 1);
      v25.i64[0] = (int)v24;
      v25.i64[1] = SDWORD1(v24);
      v26 = v25;
      v25.i64[0] = SDWORD2(v24);
      v25.i64[1] = SHIDWORD(v24);
      v27 = v25;
      v25.i64[0] = (int)*(_OWORD *)v19;
      v25.i64[1] = (int)HIDWORD(*(_QWORD *)v19);
      v28 = v25;
      v25.i64[0] = (int)*((_QWORD *)v19 + 1);
      v25.i64[1] = (int)HIDWORD(*(_OWORD *)v19);
      v21 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v21, v27), (int8x16_t)v21, (int8x16_t)v27);
      v18 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v18, v26), (int8x16_t)v18, (int8x16_t)v26);
      v23 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v23, v25), (int8x16_t)v23, (int8x16_t)v25);
      v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, v28), (int8x16_t)v22, (int8x16_t)v28);
      v19 += 8;
      v20 -= 8;
    }
    while (v20);
    v29 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v18, v22), (int8x16_t)v18, (int8x16_t)v22);
    v30 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v21, v23), (int8x16_t)v21, (int8x16_t)v23);
    v31 = vbslq_s8((int8x16_t)vcgtq_s64(v29, v30), (int8x16_t)v29, (int8x16_t)v30);
    v30.i64[0] = vextq_s8(v31, v31, 8uLL).u64[0];
    v11 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v31.i64[0], v30.i64[0]), *(int8x8_t *)v31.i8, *(int8x8_t *)v30.i8);
    if (v17 == (v17 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_15;
  }
  else
  {
    begin = v214.__begin_;
  }
  do
  {
    v33 = *begin++;
    v32 = v33;
    if (v11 <= v33)
      v11 = v32;
  }
  while (begin != v214.__end_);
LABEL_15:
  v34 = (char *)operator new(8uLL);
  v35 = v11 + 1;
  *(_QWORD *)v34 = v35;
  v36 = v34 + 8;
  v212 = v34 + 8;
  v213 = v34 + 8;
  v210 = 0;
  v211 = v34;
  v208 = 0;
  v209 = 0;
  v38 = *(_BYTE **)(v9 + 32);
  v37 = *(_BYTE **)(v9 + 40);
  v39 = v37 - v38;
  v188 = v35;
  if (v37 == v38)
  {
    v40 = 0;
    v41 = 0;
  }
  else
  {
    if (v39 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v40 = (char *)operator new(v37 - v38);
    v41 = &v40[8 * (v39 >> 3)];
    v208 = v40;
    v210 = v41;
    memcpy(v40, v38, v39);
    v209 = v41;
  }
  if ((unint64_t)(v41 - v40) >= 9)
  {
    v187 = a4;
    v42 = (v41 - v40) >> 3;
    v43 = 1;
    while (v36 < v213)
    {
      *(_QWORD *)v36 = *(_QWORD *)&v40[8 * v43];
      v44 = v36 + 8;
LABEL_22:
      v212 = v44;
      ++v43;
      v36 = (char *)v44;
      if (v42 <= v43)
      {
        v10 = (uint64_t *)__p;
        a4 = v187;
        goto LABEL_51;
      }
    }
    v45 = (char *)v211;
    v46 = v36 - (_BYTE *)v211;
    v47 = (v36 - (_BYTE *)v211) >> 3;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v49 = v213 - (_BYTE *)v211;
    if ((v213 - (_BYTE *)v211) >> 2 > v48)
      v48 = v49 >> 2;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v50 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v51 = operator new(8 * v50);
    }
    else
    {
      v51 = 0;
    }
    v52 = &v51[8 * v47];
    *v52 = *(_QWORD *)&v40[8 * v43];
    v44 = v52 + 1;
    if (v36 == v45)
      goto LABEL_38;
    v53 = v36 - v45 - 8;
    if (v53 < 0x168)
    {
      v54 = v36;
      goto LABEL_37;
    }
    v56 = (v36 - 8 - v45) & 0xFFFFFFFFFFFFFFF8;
    if (&v51[v46 - 8 - v56] > &v51[v46 - 8])
    {
      v54 = v36;
    }
    else
    {
      if (&v36[-v56 - 8] <= v36 - 8)
      {
        if ((unint64_t)(v36 - v51 - v46) < 0x20)
        {
          v54 = v36;
          goto LABEL_37;
        }
        v57 = (v53 >> 3) + 1;
        v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
        v54 = &v36[-v58];
        v52 = (_QWORD *)((char *)v52 - v58);
        v59 = &v51[8 * v47 - 16];
        v60 = v36 - 16;
        v61 = v57 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v62 = *(_OWORD *)v60;
          *(v59 - 1) = *((_OWORD *)v60 - 1);
          *v59 = v62;
          v59 -= 2;
          v60 -= 32;
          v61 -= 4;
        }
        while (v61);
        if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_37;
LABEL_38:
        v211 = v52;
        v212 = v44;
        v213 = &v51[8 * v50];
        if (v45)
          operator delete(v45);
        goto LABEL_22;
      }
      v54 = v36;
    }
    do
    {
LABEL_37:
      v55 = *((_QWORD *)v54 - 1);
      v54 -= 8;
      *--v52 = v55;
    }
    while (v54 != v45);
    goto LABEL_38;
  }
LABEL_51:
  if (*((uint64_t **)&__p + 1) == v10 || (_QWORD)v216 == 0)
    goto LABEL_67;
  v64 = *((_QWORD *)&__p + 1) - (_QWORD)v10 - 8;
  if (v64 < 8)
  {
    v65 = 1;
    v66 = v10;
    do
    {
LABEL_60:
      v72 = *v66++;
      v65 *= v72;
    }
    while (v66 != *((uint64_t **)&__p + 1));
    goto LABEL_61;
  }
  v67 = (v64 >> 3) + 1;
  v66 = &v10[v67 & 0x3FFFFFFFFFFFFFFELL];
  v68 = v10 + 1;
  v69 = 1;
  v70 = v67 & 0x3FFFFFFFFFFFFFFELL;
  v71 = 1;
  do
  {
    v69 *= *(v68 - 1);
    v71 *= *v68;
    v68 += 2;
    v70 -= 2;
  }
  while (v70);
  v65 = v71 * v69;
  if (v67 != (v67 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_60;
LABEL_61:
  if (!v65)
  {
LABEL_67:
    nitro::ndarray_container::init_from_shape(v215, (uint64_t **)&v211, (uint64_t)&v201);
    v215 = (int)v201;
    v78 = v202;
    v202 = 0uLL;
    v79 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
    v216 = v78;
    if (v79)
    {
      p_shared_owners = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldaxr(p_shared_owners);
      while (__stlxr(v81 - 1, p_shared_owners));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    __p = v203;
    v218 = v204;
    v204 = 0;
    v203 = 0uLL;
    v82 = (void *)v219;
    if ((_QWORD)v219)
    {
      *((_QWORD *)&v219 + 1) = v219;
      operator delete((void *)v219);
      v82 = (void *)v203;
    }
    v219 = *(_OWORD *)v205;
    v83 = v206;
    v205[1] = 0;
    v206 = 0;
    v205[0] = 0;
    v220 = v83;
    v221 = v207;
    if (v82)
    {
      *((_QWORD *)&v203 + 1) = v82;
      operator delete(v82);
    }
    v84 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
    if (*((_QWORD *)&v202 + 1))
    {
      v85 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    goto LABEL_238;
  }
  v73 = v188 - *v10;
  if (v188 > *v10)
  {
    v199 = 0uLL;
    v200 = 0;
    v199.i64[1] = std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v199, (const nitro::ndarray_container *)&v215);
    if (v73 != -1)
    {
      v74 = v211;
      *(_QWORD *)v211 = v73 + 1;
      v197 = 0;
      v198 = 0;
      v196 = 0;
      v75 = v212 - v74;
      if (v212 == v74)
      {
        v77 = 0;
        v76 = 0;
      }
      else
      {
        if (v75 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v76 = (char *)operator new(v212 - v74);
        v77 = &v76[8 * (v75 >> 3)];
        v196 = v76;
        v198 = v77;
        memcpy(v76, v74, v75);
        v197 = v77;
      }
      switch(v215)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v222, (uint64_t)&v215);
          v228 = 0;
          v229 = 0;
          v230 = 0;
          v95 = v77 - v76;
          if (v77 != v76)
          {
            if (v95 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v96 = (uint64_t *)operator new(v77 - v76);
            v97 = &v96[v95 >> 3];
            v228 = v96;
            v230 = v97;
            memcpy(v96, v76, v95);
            v229 = v97;
          }
          nitro::ndarray<int>::init_from_shape(&v228, &v189);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v201, &v189);
          if (v192)
          {
            v193[0] = v192;
            operator delete(v192);
          }
          if (v190[1])
          {
            v191[0] = v190[1];
            operator delete(v190[1]);
          }
          v98 = (std::__shared_weak_count *)v190[0];
          if (v190[0])
          {
            v99 = (unint64_t *)((char *)v190[0] + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          if (v228)
          {
            v229 = v228;
            operator delete(v228);
          }
          if (v226)
          {
            v227 = v226;
            operator delete(v226);
          }
          if (v224)
          {
            v225 = v224;
            operator delete(v224);
          }
          v101 = (std::__shared_weak_count *)v223;
          if (!v223)
            goto LABEL_186;
          v102 = (unint64_t *)v223 + 1;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          break;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v222, (uint64_t)&v215);
          v228 = 0;
          v229 = 0;
          v230 = 0;
          v118 = v77 - v76;
          if (v77 != v76)
          {
            if (v118 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v119 = (uint64_t *)operator new(v77 - v76);
            v120 = &v119[v118 >> 3];
            v228 = v119;
            v230 = v120;
            memcpy(v119, v76, v118);
            v229 = v120;
          }
          nitro::ndarray<unsigned char>::init_from_shape(&v228, &v189);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&v201, &v189);
          if (v192)
          {
            v193[0] = v192;
            operator delete(v192);
          }
          if (v190[1])
          {
            v191[0] = v190[1];
            operator delete(v190[1]);
          }
          v121 = (std::__shared_weak_count *)v190[0];
          if (v190[0])
          {
            v122 = (unint64_t *)((char *)v190[0] + 8);
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
          if (v228)
          {
            v229 = v228;
            operator delete(v228);
          }
          if (v226)
          {
            v227 = v226;
            operator delete(v226);
          }
          if (v224)
          {
            v225 = v224;
            operator delete(v224);
          }
          v101 = (std::__shared_weak_count *)v223;
          if (!v223)
            goto LABEL_186;
          v124 = (unint64_t *)v223 + 1;
          do
            v103 = __ldaxr(v124);
          while (__stlxr(v103 - 1, v124));
          break;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v222, (uint64_t)&v215);
          v228 = 0;
          v229 = 0;
          v230 = 0;
          v104 = v77 - v76;
          if (v77 != v76)
          {
            if (v104 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v105 = (uint64_t *)operator new(v77 - v76);
            v106 = &v105[v104 >> 3];
            v228 = v105;
            v230 = v106;
            memcpy(v105, v76, v104);
            v229 = v106;
          }
          nitro::ndarray<float>::init_from_shape(&v228, &v189);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v201, &v189);
          if (v192)
          {
            v193[0] = v192;
            operator delete(v192);
          }
          if (v190[1])
          {
            v191[0] = v190[1];
            operator delete(v190[1]);
          }
          v107 = (std::__shared_weak_count *)v190[0];
          if (v190[0])
          {
            v108 = (unint64_t *)((char *)v190[0] + 8);
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
          if (v228)
          {
            v229 = v228;
            operator delete(v228);
          }
          if (v226)
          {
            v227 = v226;
            operator delete(v226);
          }
          if (v224)
          {
            v225 = v224;
            operator delete(v224);
          }
          v101 = (std::__shared_weak_count *)v223;
          if (!v223)
            goto LABEL_186;
          v110 = (unint64_t *)v223 + 1;
          do
            v103 = __ldaxr(v110);
          while (__stlxr(v103 - 1, v110));
          break;
        case 11:
          nitro::ndarray<half>::ndarray((uint64_t)&v222, (uint64_t)&v215);
          v228 = 0;
          v229 = 0;
          v230 = 0;
          v111 = v77 - v76;
          if (v77 != v76)
          {
            if (v111 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v112 = (uint64_t *)operator new(v77 - v76);
            v113 = &v112[v111 >> 3];
            v228 = v112;
            v230 = v113;
            memcpy(v112, v76, v111);
            v229 = v113;
          }
          nitro::ndarray<half>::init_from_shape(&v228, &v189);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&v201, &v189);
          if (v192)
          {
            v193[0] = v192;
            operator delete(v192);
          }
          if (v190[1])
          {
            v191[0] = v190[1];
            operator delete(v190[1]);
          }
          v114 = (std::__shared_weak_count *)v190[0];
          if (v190[0])
          {
            v115 = (unint64_t *)((char *)v190[0] + 8);
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
            if (!v116)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          if (v228)
          {
            v229 = v228;
            operator delete(v228);
          }
          if (v226)
          {
            v227 = v226;
            operator delete(v226);
          }
          if (v224)
          {
            v225 = v224;
            operator delete(v224);
          }
          v101 = (std::__shared_weak_count *)v223;
          if (!v223)
            goto LABEL_186;
          v117 = (unint64_t *)v223 + 1;
          do
            v103 = __ldaxr(v117);
          while (__stlxr(v103 - 1, v117));
          break;
        default:
          printf("%d\n", v215);
          nitro::ndarray_container::visit<nitro::nitro_builtins::TensorArrayScatter(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0>(nitro::nitro_builtins::TensorArrayScatter(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0)::{lambda(void)#1}::operator()();
      }
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
LABEL_186:
      if (v196)
      {
        v197 = v196;
        operator delete(v196);
      }
      v125 = v199.i64[1];
      if (v199.i64[1] >= v200)
      {
        v126 = std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v199, (const nitro::ndarray_container *)&v201);
      }
      else
      {
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v199.i64[1], (const nitro::ndarray_container *)&v201);
        v126 = v125 + 80;
      }
      v199.i64[1] = v126;
      if (v205[0])
      {
        v205[1] = v205[0];
        operator delete(v205[0]);
      }
      if ((_QWORD)v203)
      {
        *((_QWORD *)&v203 + 1) = v203;
        operator delete((void *)v203);
      }
      v127 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
      if (*((_QWORD *)&v202 + 1))
      {
        v128 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
        }
      }
    }
    nitro::ndarray_container::concat((nitro::ndarray_container **)&v199, 0, (nitro::ndarray_container *)&v189);
    v130 = operator new();
    *(_QWORD *)v130 = 0;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v130 + 8));
    *(_QWORD *)v130 = 1;
    *(_DWORD *)(v130 + 8) = (_DWORD)v189;
    v131 = *(_OWORD *)v190;
    v190[0] = 0;
    v190[1] = 0;
    v132 = *(std::__shared_weak_count **)(v130 + 24);
    *(_OWORD *)(v130 + 16) = v131;
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v135 = *(void **)(v130 + 32);
    if (v135)
    {
      *(_QWORD *)(v130 + 40) = v135;
      operator delete(v135);
      *(_QWORD *)(v130 + 32) = 0;
      *(_QWORD *)(v130 + 40) = 0;
      *(_QWORD *)(v130 + 48) = 0;
    }
    v136 = *(void **)(v130 + 56);
    *(_OWORD *)(v130 + 32) = *(_OWORD *)v191;
    *(_QWORD *)(v130 + 48) = v192;
    v191[1] = 0;
    v192 = 0;
    v191[0] = 0;
    if (v136)
    {
      *(_QWORD *)(v130 + 64) = v136;
      operator delete(v136);
      *(_QWORD *)(v130 + 56) = 0;
      *(_QWORD *)(v130 + 64) = 0;
      *(_QWORD *)(v130 + 72) = 0;
    }
    *(_OWORD *)(v130 + 56) = *(_OWORD *)v193;
    v137 = v194;
    v138 = v195;
    v193[1] = 0;
    v194 = 0;
    v193[0] = 0;
    *(_QWORD *)(v130 + 72) = v137;
    *(_QWORD *)(v130 + 80) = v138;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v201, (const nitro::ndarray_container *)(v130 + 8));
    v215 = (int)v201;
    v139 = v202;
    v202 = 0uLL;
    v140 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
    v216 = v139;
    if (v140)
    {
      v141 = (unint64_t *)&v140->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    __p = v203;
    v218 = v204;
    v204 = 0;
    v203 = 0uLL;
    v143 = (void *)v219;
    if ((_QWORD)v219)
    {
      *((_QWORD *)&v219 + 1) = v219;
      operator delete((void *)v219);
      v143 = (void *)v203;
    }
    v219 = *(_OWORD *)v205;
    v144 = v206;
    v205[1] = 0;
    v206 = 0;
    v205[0] = 0;
    v220 = v144;
    v221 = v207;
    if (v143)
    {
      *((_QWORD *)&v203 + 1) = v143;
      operator delete(v143);
    }
    v145 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
    if (*((_QWORD *)&v202 + 1))
    {
      v146 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    do
    {
      v148 = __ldaxr((unint64_t *)v130);
      v149 = v148 - 1;
    }
    while (__stlxr(v149, (unint64_t *)v130));
    if (!v149)
    {
      v150 = std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((_QWORD *)v130);
      MEMORY[0x19401CD90](v150, 0x10B0C4002311774);
    }
    if (v193[0])
    {
      v193[1] = v193[0];
      operator delete(v193[0]);
    }
    if (v191[0])
    {
      v191[1] = v191[0];
      operator delete(v191[0]);
    }
    v151 = (std::__shared_weak_count *)v190[1];
    if (v190[1])
    {
      v152 = (unint64_t *)((char *)v190[1] + 8);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    v201 = &v199;
    std::vector<nitro::ndarray_container>::__destroy_vector::operator()[abi:ne180100]((void ***)&v201);
  }
LABEL_238:
  v155 = *(_QWORD *)(v9 + 32);
  v154 = *(_QWORD *)(v9 + 40);
  v223 = 0;
  v224 = 0;
  v222 = 0;
  v156 = v154 - v155;
  if (v156)
  {
    if ((unint64_t)v156 > 0x5555555555555550)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v157 = v156 >> 3;
    v158 = (__int128 *)operator new(24 * (v156 >> 3));
    v159 = (__int128 *)((char *)v158 + 24 * v157);
    v222 = v158;
    v224 = v159;
    do
    {
      *(_QWORD *)v158 = -1;
      *((_QWORD *)v158 + 1) = -1;
      *((_QWORD *)v158 + 2) = 1;
      v158 = (__int128 *)((char *)v158 + 24);
    }
    while (v158 != v159);
    v223 = v159;
  }
  v229 = 0;
  v230 = 0;
  v228 = 0;
  v160 = *((_QWORD *)&__p + 1) - __p;
  if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
  {
    if ((unint64_t)v160 > 0x5555555555555550)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v161 = v160 >> 3;
    v162 = (uint64_t *)operator new(24 * (v160 >> 3));
    v163 = &v162[3 * v161];
    v228 = v162;
    v230 = v163;
    do
    {
      *v162 = -1;
      v162[1] = -1;
      v162[2] = 1;
      v162 += 3;
    }
    while (v162 != v163);
    v229 = v163;
  }
  v164 = v214.__begin_;
  if (v214.__end_ != v214.__begin_)
  {
    v165 = 0;
    while (1)
    {
      v201 = (int64x2_t *)v165;
      if ((v165 & 0x8000000000000000) != 0)
      {
        v189 = (void ***)&v201;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
      }
      v166 = v222;
      *(_QWORD *)v222 = v165;
      *(__int128 *)((char *)v166 + 8) = xmmword_191A92A20;
      v167 = (int64x2_t *)v164[v165];
      v201 = v167;
      if ((v167 & 0x80000000) != 0)
      {
        v189 = (void ***)&v201;
        nitro::slice_range::slice_range<int,(void *)0>(int)::{lambda(void)#1}::operator()();
      }
      v168 = v228;
      *v228 = (uint64_t)v167;
      *(_OWORD *)(v168 + 1) = xmmword_191A92A20;
      nitro::ndarray_container::slice((uint64_t)&v215, (__int128 **)&v228, (uint64_t)&v201, (__n128)xmmword_191A92A20);
      nitro::ndarray_container::slice(v9 + 8, &v222, (uint64_t)&v189, v169);
      nitro::ndarray_container::assign((nitro::ndarray_container *)&v201, (const nitro::ndarray_container *)&v189);
      if (v193[0])
      {
        v193[1] = v193[0];
        operator delete(v193[0]);
      }
      if (v191[0])
      {
        v191[1] = v191[0];
        operator delete(v191[0]);
      }
      v170 = (std::__shared_weak_count *)v190[1];
      if (v190[1])
      {
        v171 = (unint64_t *)((char *)v190[1] + 8);
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        if (!v172)
          break;
      }
      v173 = v205[0];
      if (v205[0])
        goto LABEL_262;
LABEL_263:
      if ((_QWORD)v203)
      {
        *((_QWORD *)&v203 + 1) = v203;
        operator delete((void *)v203);
      }
      v174 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
      if (*((_QWORD *)&v202 + 1))
      {
        v175 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      ++v165;
      v164 = v214.__begin_;
      if (v165 >= v214.__end_ - v214.__begin_)
        goto LABEL_274;
    }
    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
    std::__shared_weak_count::__release_weak(v170);
    v173 = v205[0];
    if (!v205[0])
      goto LABEL_263;
LABEL_262:
    v205[1] = v173;
    operator delete(v173);
    goto LABEL_263;
  }
LABEL_274:
  *(_QWORD *)a4 = 0;
  *((_BYTE *)a4 + 8) = 9;
  v177 = operator new();
  *(_QWORD *)v177 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v177 + 8));
  *(_QWORD *)a4 = v177;
  *(_QWORD *)v177 = 1;
  *(_DWORD *)(v177 + 8) = v215;
  v178 = v216;
  if (*((_QWORD *)&v216 + 1))
  {
    v179 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
    do
      v180 = __ldxr(v179);
    while (__stxr(v180 + 1, v179));
  }
  v181 = *(std::__shared_weak_count **)(v177 + 24);
  *(_OWORD *)(v177 + 16) = v178;
  if (v181)
  {
    v182 = (unint64_t *)&v181->__shared_owners_;
    do
      v183 = __ldaxr(v182);
    while (__stlxr(v183 - 1, v182));
    if (!v183)
    {
      ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
      std::__shared_weak_count::__release_weak(v181);
    }
  }
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)(v177 + 32), (char *)__p, *((char **)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)(v177 + 56), (char *)v219, *((char **)&v219 + 1), (uint64_t)(*((_QWORD *)&v219 + 1) - v219) >> 3);
  *(_QWORD *)(v177 + 80) = v221;
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  if (v222)
  {
    v223 = v222;
    operator delete(v222);
  }
  if (v208)
    operator delete(v208);
  if (v211)
  {
    v212 = v211;
    operator delete(v211);
  }
LABEL_290:
  if (v214.__begin_)
  {
    v214.__end_ = v214.__begin_;
    operator delete(v214.__begin_);
  }
  if ((_QWORD)v219)
  {
    *((_QWORD *)&v219 + 1) = v219;
    operator delete((void *)v219);
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v184 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v185 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
}

void sub_19127F754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;
  void *v52;
  void *v53;
  void *v54;

  v52 = *(void **)(v50 - 112);
  if (v52)
  {
    *(_QWORD *)(v50 - 104) = v52;
    operator delete(v52);
    v53 = *(void **)(v50 - 184);
    if (!v53)
    {
LABEL_3:
      v54 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v53 = *(void **)(v50 - 184);
    if (!v53)
      goto LABEL_3;
  }
  *(_QWORD *)(v50 - 176) = v53;
  operator delete(v53);
  v54 = __p;
  if (!__p)
  {
LABEL_5:
    if (a44)
      operator delete(a44);
    if (a47)
      operator delete(a47);
    nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a50);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v54);
  goto LABEL_5;
}

void nitro::nitro_builtins::TensorArrayGather(__int128 **this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v38 = 0;
  nitro::nitro_builtins::Gather((nitro::nitro_builtins *)&v38, a2, this, a3, a4);
  switch(v39)
  {
    case 2:
      v5 = (unint64_t *)v38;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        v8 = (_QWORD *)v38;
        if (v38)
        {
          if (*(char *)(v38 + 31) < 0)
            operator delete(*(void **)(v38 + 8));
          v9 = v8;
          v10 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v11 = (unint64_t *)v38;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = (_QWORD *)v38;
        if (v38)
        {
          v15 = *(void **)(v38 + 8);
          if (v15)
          {
            *(_QWORD *)(v38 + 16) = v15;
            operator delete(v15);
          }
          v9 = v14;
          v10 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v16 = (unint64_t *)v38;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = (_QWORD *)v38;
        if (v38)
        {
          v20 = *(_QWORD *)(v38 + 8);
          if (!v20)
            goto LABEL_35;
          v21 = *(_QWORD *)(v38 + 16);
          v22 = *(void **)(v38 + 8);
          if (v21 != v20)
          {
            do
            {
              v21 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v19 + 3), v21);
            }
            while (v21 != v20);
            v22 = (void *)v19[1];
          }
          v19[2] = v20;
          goto LABEL_34;
        }
      }
      break;
    case 5:
      v23 = (unint64_t *)v38;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        v19 = (_QWORD *)v38;
        if (v38)
        {
          v26 = *(_QWORD *)(v38 + 8);
          if (v26)
          {
            v27 = *(_QWORD *)(v38 + 16);
            v28 = *(void **)(v38 + 8);
            if (v27 != v26)
            {
              do
                v27 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v27 - 32);
              while (v27 != v26);
              v28 = (void *)v19[1];
            }
            v19[2] = v26;
            v22 = v28;
LABEL_34:
            operator delete(v22);
          }
LABEL_35:
          v9 = v19;
          v10 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 9:
      v29 = (unint64_t *)v38;
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        v32 = (_QWORD *)v38;
        if (v38)
        {
          v33 = *(void **)(v38 + 56);
          if (v33)
          {
            *(_QWORD *)(v38 + 64) = v33;
            operator delete(v33);
          }
          v34 = (void *)v32[4];
          if (v34)
          {
            v32[5] = v34;
            operator delete(v34);
          }
          v35 = (std::__shared_weak_count *)v32[3];
          if (v35)
          {
            p_shared_owners = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v9 = v32;
          v10 = 0x10B0C4002311774;
LABEL_50:
          MEMORY[0x19401CD90](v9, v10);
        }
      }
      break;
    default:
      return;
  }
}

void sub_19127FD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, __int16 a11, char a12, char a13)
{
  switch((char)a11)
  {
    case 2:
      nitro::nitro_builtins::TensorArrayGather(&a10);
      break;
    case 3:
      nitro::nitro_builtins::TensorArrayGather(&a10);
      break;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 9:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::TensorArrayRead(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_19127FE70(uint64_t *a1)
{
  uint64_t v1;
  const nitro::flexible_type *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  const nitro::flexible_type *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  void *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  void *v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  void *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  void *v117;
  void *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  _QWORD *v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  char *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  void *v134;
  void *v135;
  _QWORD *v136;
  void *v137;
  void *v138;
  _DWORD *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  int v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  void *v149;
  void *v150;
  uint64_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;

  v5 = *a1;
  v6 = operator new(4uLL);
  v137 = v6;
  *v6 = v5;
  v138 = v6 + 1;
  v139 = v6 + 1;
  v7 = operator new(8uLL);
  *(_QWORD *)(v4 - 240) = v7;
  *v7++ = 1;
  *(_QWORD *)(v4 - 232) = v7;
  *(_QWORD *)(v4 - 224) = v7;
  *(_QWORD *)(v4 - 160) = 0;
  *(_QWORD *)(v4 - 152) = 0;
  *(_QWORD *)(v4 - 144) = 0;
  nitro::ndarray<int>::ndarray((uint64_t)&v140, (uint64_t)&v137, (char **)(v4 - 240), (char **)(v4 - 160), 0);
  nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v146, &v140);
  *(_QWORD *)(v4 - 136) = 0;
  *(_BYTE *)(v4 - 128) = 9;
  v8 = operator new();
  *(_QWORD *)v8 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v8 + 8));
  *(_QWORD *)(v4 - 136) = v8;
  *(_QWORD *)v8 = 1;
  *(_DWORD *)(v8 + 8) = v146;
  v10 = *(_OWORD *)((char *)v3 + 8);
  v147 = 0;
  v148 = 0;
  v11 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v10;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(void **)(v8 + 32);
  if (v14)
  {
    *(_QWORD *)(v8 + 40) = v14;
    operator delete(v14);
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
  }
  v15 = *(void **)(v8 + 56);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)((char *)v3 + 24);
  *(_QWORD *)(v8 + 48) = v151;
  v150 = 0;
  v151 = 0;
  v149 = 0;
  if (v15)
  {
    *(_QWORD *)(v8 + 64) = v15;
    operator delete(v15);
    *(_QWORD *)(v8 + 56) = 0;
    *(_QWORD *)(v8 + 64) = 0;
    *(_QWORD *)(v8 + 72) = 0;
  }
  *(_OWORD *)(v8 + 56) = v3[3];
  v16 = v154;
  v17 = v155;
  v153 = 0;
  v154 = 0;
  v152 = 0;
  *(_QWORD *)(v8 + 72) = v16;
  *(_QWORD *)(v8 + 80) = v17;
  nitro::nitro_builtins::Gather((nitro::nitro_builtins *)(v4 - 120), v2, (__int128 **)(v4 - 136), v9, v4 - 104);
  v18 = *(unint64_t **)(v4 - 104);
  v19 = operator new(8uLL);
  v134 = v19;
  *v19 = 0;
  v135 = v19 + 1;
  v136 = v19 + 1;
  nitro::ndarray_container::squeeze((uint64_t)(v18 + 1), &v134, (uint64_t)&v156);
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  switch(*(_BYTE *)(v4 - 96))
  {
    case 2:
      do
      {
        v20 = __ldaxr(v18);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v18));
      if (!v21)
      {
        v22 = *(_QWORD *)(v4 - 104);
        if (v22)
        {
          if (*(char *)(v22 + 31) < 0)
            operator delete(*(void **)(v22 + 8));
          v23 = (_QWORD *)v22;
          v24 = 0x1012C404EF22A49;
          goto LABEL_56;
        }
      }
      break;
    case 3:
      do
      {
        v31 = __ldaxr(v18);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v18));
      if (!v32)
      {
        v33 = *(_QWORD **)(v4 - 104);
        if (v33)
        {
          v34 = (void *)v33[1];
          if (v34)
          {
            v33[2] = v34;
            operator delete(v34);
          }
          v23 = v33;
          v24 = 0x1080C409938AC02;
          goto LABEL_56;
        }
      }
      break;
    case 4:
      do
      {
        v25 = __ldaxr(v18);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v18));
      if (!v26)
      {
        v27 = *(_QWORD **)(v4 - 104);
        if (v27)
        {
          v28 = v27[1];
          if (!v28)
            goto LABEL_42;
          v29 = v27[2];
          v30 = (void *)v27[1];
          if (v29 != v28)
          {
            do
            {
              v29 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v27 + 3), v29);
            }
            while (v29 != v28);
            v30 = (void *)v27[1];
          }
          v27[2] = v28;
          goto LABEL_41;
        }
      }
      break;
    case 5:
      do
      {
        v35 = __ldaxr(v18);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v18));
      if (!v36)
      {
        v27 = *(_QWORD **)(v4 - 104);
        if (v27)
        {
          v37 = v27[1];
          if (v37)
          {
            v38 = v27[2];
            v39 = (void *)v27[1];
            if (v38 != v37)
            {
              do
                v38 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v38 - 32);
              while (v38 != v37);
              v39 = (void *)v27[1];
            }
            v27[2] = v37;
            v30 = v39;
LABEL_41:
            operator delete(v30);
          }
LABEL_42:
          v23 = v27;
          v24 = 0x1020C405E66F15BLL;
          goto LABEL_56;
        }
      }
      break;
    case 9:
      do
      {
        v40 = __ldaxr(v18);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v18));
      if (!v41)
      {
        v42 = *(_QWORD **)(v4 - 104);
        if (v42)
        {
          v43 = (void *)v42[7];
          if (v43)
          {
            v42[8] = v43;
            operator delete(v43);
          }
          v44 = (void *)v42[4];
          if (v44)
          {
            v42[5] = v44;
            operator delete(v44);
          }
          v45 = (std::__shared_weak_count *)v42[3];
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v23 = v42;
          v24 = 0x10B0C4002311774;
LABEL_56:
          MEMORY[0x19401CD90](v23, v24);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(v4 - 104) = 0;
  *(_BYTE *)(v4 - 96) = 0;
  switch(*(_BYTE *)(v4 - 128))
  {
    case 2:
      v48 = *(unint64_t **)(v4 - 136);
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        v51 = *(_QWORD *)(v4 - 136);
        if (v51)
        {
          if (*(char *)(v51 + 31) < 0)
            operator delete(*(void **)(v51 + 8));
          v52 = (_QWORD *)v51;
          v53 = 0x1012C404EF22A49;
          goto LABEL_106;
        }
      }
      break;
    case 3:
      v61 = *(unint64_t **)(v4 - 136);
      do
      {
        v62 = __ldaxr(v61);
        v63 = v62 - 1;
      }
      while (__stlxr(v63, v61));
      if (!v63)
      {
        v64 = *(_QWORD **)(v4 - 136);
        if (v64)
        {
          v65 = (void *)v64[1];
          if (v65)
          {
            v64[2] = v65;
            operator delete(v65);
          }
          v52 = v64;
          v53 = 0x1080C409938AC02;
          goto LABEL_106;
        }
      }
      break;
    case 4:
      v54 = *(unint64_t **)(v4 - 136);
      do
      {
        v55 = __ldaxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
      {
        v57 = *(_QWORD **)(v4 - 136);
        if (v57)
        {
          v58 = v57[1];
          if (!v58)
            goto LABEL_91;
          v59 = v57[2];
          v60 = (void *)v57[1];
          if (v59 != v58)
          {
            do
            {
              v59 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v57 + 3), v59);
            }
            while (v59 != v58);
            v60 = (void *)v57[1];
          }
          v57[2] = v58;
          goto LABEL_90;
        }
      }
      break;
    case 5:
      v66 = *(unint64_t **)(v4 - 136);
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        v57 = *(_QWORD **)(v4 - 136);
        if (v57)
        {
          v69 = v57[1];
          if (v69)
          {
            v70 = v57[2];
            v71 = (void *)v57[1];
            if (v70 != v69)
            {
              do
                v70 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v70 - 32);
              while (v70 != v69);
              v71 = (void *)v57[1];
            }
            v57[2] = v69;
            v60 = v71;
LABEL_90:
            operator delete(v60);
          }
LABEL_91:
          v52 = v57;
          v53 = 0x1020C405E66F15BLL;
          goto LABEL_106;
        }
      }
      break;
    case 9:
      v72 = *(unint64_t **)(v4 - 136);
      do
      {
        v73 = __ldaxr(v72);
        v74 = v73 - 1;
      }
      while (__stlxr(v74, v72));
      if (!v74)
      {
        v75 = *(_QWORD **)(v4 - 136);
        if (v75)
        {
          v76 = (void *)v75[7];
          if (v76)
          {
            v75[8] = v76;
            operator delete(v76);
          }
          v77 = (void *)v75[4];
          if (v77)
          {
            v75[5] = v77;
            operator delete(v77);
          }
          v78 = (std::__shared_weak_count *)v75[3];
          if (v78)
          {
            v79 = (unint64_t *)&v78->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v52 = v75;
          v53 = 0x10B0C4002311774;
LABEL_106:
          MEMORY[0x19401CD90](v52, v53);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)(v4 - 136) = 0;
  *(_BYTE *)(v4 - 128) = 0;
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  v81 = v148;
  if (v148)
  {
    v82 = (unint64_t *)&v148->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  v84 = v141;
  if (v141)
  {
    v85 = (unint64_t *)&v141->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = *(void **)(v4 - 160);
  if (v87)
  {
    *(_QWORD *)(v4 - 152) = v87;
    operator delete(v87);
  }
  v88 = *(void **)(v4 - 240);
  if (v88)
  {
    *(_QWORD *)(v4 - 232) = v88;
    operator delete(v88);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  switch(*(_BYTE *)(v4 - 112))
  {
    case 2:
      v89 = *(unint64_t **)(v4 - 120);
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v92 = *(_QWORD *)(v4 - 120);
        if (v92)
        {
          if (*(char *)(v92 + 31) < 0)
            operator delete(*(void **)(v92 + 8));
          v93 = (_QWORD *)v92;
          v94 = 0x1012C404EF22A49;
          goto LABEL_180;
        }
      }
      break;
    case 3:
      v102 = *(unint64_t **)(v4 - 120);
      do
      {
        v103 = __ldaxr(v102);
        v104 = v103 - 1;
      }
      while (__stlxr(v104, v102));
      if (!v104)
      {
        v105 = *(_QWORD **)(v4 - 120);
        if (v105)
        {
          v106 = (void *)v105[1];
          if (v106)
          {
            v105[2] = v106;
            operator delete(v106);
          }
          v93 = v105;
          v94 = 0x1080C409938AC02;
          goto LABEL_180;
        }
      }
      break;
    case 4:
      v95 = *(unint64_t **)(v4 - 120);
      do
      {
        v96 = __ldaxr(v95);
        v97 = v96 - 1;
      }
      while (__stlxr(v97, v95));
      if (!v97)
      {
        v98 = *(_QWORD **)(v4 - 120);
        if (v98)
        {
          v99 = v98[1];
          if (!v99)
            goto LABEL_165;
          v100 = v98[2];
          v101 = (void *)v98[1];
          if (v100 != v99)
          {
            do
            {
              v100 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v98 + 3), v100);
            }
            while (v100 != v99);
            v101 = (void *)v98[1];
          }
          v98[2] = v99;
          goto LABEL_164;
        }
      }
      break;
    case 5:
      v107 = *(unint64_t **)(v4 - 120);
      do
      {
        v108 = __ldaxr(v107);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v107));
      if (!v109)
      {
        v98 = *(_QWORD **)(v4 - 120);
        if (v98)
        {
          v110 = v98[1];
          if (v110)
          {
            v111 = v98[2];
            v112 = (void *)v98[1];
            if (v111 != v110)
            {
              do
                v111 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v111 - 32);
              while (v111 != v110);
              v112 = (void *)v98[1];
            }
            v98[2] = v110;
            v101 = v112;
LABEL_164:
            operator delete(v101);
          }
LABEL_165:
          v93 = v98;
          v94 = 0x1020C405E66F15BLL;
          goto LABEL_180;
        }
      }
      break;
    case 9:
      v113 = *(unint64_t **)(v4 - 120);
      do
      {
        v114 = __ldaxr(v113);
        v115 = v114 - 1;
      }
      while (__stlxr(v115, v113));
      if (!v115)
      {
        v116 = *(_QWORD **)(v4 - 120);
        if (v116)
        {
          v117 = (void *)v116[7];
          if (v117)
          {
            v116[8] = v117;
            operator delete(v117);
          }
          v118 = (void *)v116[4];
          if (v118)
          {
            v116[5] = v118;
            operator delete(v118);
          }
          v119 = (std::__shared_weak_count *)v116[3];
          if (v119)
          {
            v120 = (unint64_t *)&v119->__shared_owners_;
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          v93 = v116;
          v94 = 0x10B0C4002311774;
LABEL_180:
          MEMORY[0x19401CD90](v93, v94);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)v1 = 0;
  *(_BYTE *)(v1 + 8) = 9;
  v122 = (_QWORD *)operator new();
  *v122 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v122 + 1));
  *(_QWORD *)v1 = v122;
  *v122 = 1;
  *((_DWORD *)v122 + 2) = v156;
  v124 = v157;
  v123 = v158;
  if (v158)
  {
    v125 = (unint64_t *)&v158->__shared_owners_;
    do
      v126 = __ldxr(v125);
    while (__stxr(v126 + 1, v125));
  }
  v127 = (std::__shared_weak_count *)v122[3];
  v122[2] = v124;
  v122[3] = v123;
  if (v127)
  {
    v128 = (unint64_t *)&v127->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v122 + 4, v159, v160, (v160 - v159) >> 3);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v122 + 7, v161, v162, (v162 - v161) >> 3);
  v130 = v161;
  v122[10] = v163;
  if (v130)
  {
    v162 = v130;
    operator delete(v130);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  v131 = v158;
  if (v158)
  {
    v132 = (unint64_t *)&v158->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
}

void sub_191280BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  void *v35;
  int v36;
  uint64_t v37;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;

  if (*(char *)(v37 - 217) < 0)
    operator delete(*(void **)(v37 - 240));
  if (*(char *)(v37 - 137) < 0)
  {
    operator delete(*(void **)(v37 - 160));
    if ((v36 & 1) == 0)
    {
LABEL_8:
      switch(*(_BYTE *)(v37 - 112))
      {
        case 2:
          v39 = *(unint64_t **)(v37 - 120);
          do
          {
            v40 = __ldaxr(v39);
            v41 = v40 - 1;
          }
          while (__stlxr(v41, v39));
          if (v41)
            goto LABEL_40;
          v42 = *(_QWORD *)(v37 - 120);
          if (!v42)
            goto LABEL_40;
          if (*(char *)(v42 + 31) < 0)
            operator delete(*(void **)(v42 + 8));
          v43 = v42;
          v44 = 0x1012C404EF22A49;
          break;
        case 3:
          v45 = *(unint64_t **)(v37 - 120);
          do
          {
            v46 = __ldaxr(v45);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v45));
          if (v47)
            goto LABEL_40;
          v48 = *(_QWORD *)(v37 - 120);
          if (!v48)
            goto LABEL_40;
          v49 = *(void **)(v48 + 8);
          if (v49)
          {
            *(_QWORD *)(v48 + 16) = v49;
            operator delete(v49);
          }
          v43 = v48;
          v44 = 0x1080C409938AC02;
          break;
        case 4:
          v50 = *(unint64_t **)(v37 - 120);
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (v52)
            goto LABEL_40;
          v53 = *(_QWORD *)(v37 - 120);
          if (!v53)
            goto LABEL_40;
          v43 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v53);
          goto LABEL_33;
        case 5:
          v54 = *(unint64_t **)(v37 - 120);
          do
          {
            v55 = __ldaxr(v54);
            v56 = v55 - 1;
          }
          while (__stlxr(v56, v54));
          if (v56)
            goto LABEL_40;
          v57 = *(_QWORD *)(v37 - 120);
          if (!v57)
            goto LABEL_40;
          v43 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v57);
LABEL_33:
          v44 = 0x1020C405E66F15BLL;
          break;
        case 9:
          v58 = *(unint64_t **)(v37 - 120);
          do
          {
            v59 = __ldaxr(v58);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v58));
          if (v60)
            goto LABEL_40;
          v61 = *(_QWORD **)(v37 - 120);
          if (!v61)
            goto LABEL_40;
          v43 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v61);
          v44 = 0x10B0C4002311774;
          break;
        default:
LABEL_40:
          _Unwind_Resume(a1);
          return;
      }
      MEMORY[0x19401CD90](v43, v44);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

void nitro::nitro_builtins::TensorArrayWrite(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, nitro::flexible_type *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v7;
  int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _QWORD *v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  nitro::ndarray_container *v62;
  _BYTE *v63;
  int64_t v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  char *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  unint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  __int128 *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  _OWORD *v120;
  __int128 *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  _OWORD *v135;
  __int128 *v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  const nitro::ndarray_container *v163;
  _QWORD *v164;
  uint64_t v165;
  char *v166;
  void *v167;
  void *v168[2];
  void *v169[2];
  void *v170;
  void *v171[2];
  uint64_t v172;
  uint64_t v173;
  int64x2_t v174;
  unint64_t v175;
  void *v176;
  _BYTE *v177;
  char *v178;
  _QWORD v179[2];
  std::__shared_weak_count *v180;
  void *v181;
  char *v182;
  void *__p;
  char *v184;
  uint64_t v185;
  _QWORD v186[2];
  std::__shared_weak_count *v187;
  void *v188;
  _BYTE *v189;
  void *v190;
  void *v191;
  void *v192;
  uint64_t *v193;
  uint64_t *v194;
  void *v195;
  std::__shared_weak_count *v196;
  void *v197;
  void *v198;
  void *v199;
  void *v200;
  std::string v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;

  v7 = *(_QWORD **)a3;
  v163 = (const nitro::ndarray_container *)(*(_QWORD *)a3 + 8);
  v8 = nitro::flexible_type_converter<int>::get((uint64_t)v186, (unsigned __int8 *)this);
  v9 = (char *)v7[4];
  v10 = (char *)v7[5];
  v11 = v10 - v9;
  if (v10 == v9 || !v7[2])
    goto LABEL_16;
  if ((unint64_t)(v11 - 8) < 8)
  {
    v12 = 1;
    v13 = (char *)v7[4];
    do
    {
LABEL_8:
      v19 = *(_QWORD *)v13;
      v13 += 8;
      v12 *= v19;
    }
    while (v13 != v10);
    goto LABEL_9;
  }
  v14 = ((unint64_t)(v11 - 8) >> 3) + 1;
  v13 = &v9[8 * (v14 & 0x3FFFFFFFFFFFFFFELL)];
  v15 = v9 + 8;
  v16 = 1;
  v17 = v14 & 0x3FFFFFFFFFFFFFFELL;
  v18 = 1;
  do
  {
    v16 *= *(v15 - 1);
    v18 *= *v15;
    v15 += 2;
    v17 -= 2;
  }
  while (v17);
  v12 = v18 * v16;
  if (v14 != (v14 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (v12 && *(_QWORD *)v9 > (unint64_t)v8)
  {
    v192 = 0;
    v193 = 0;
    v194 = 0;
    if ((unint64_t)v11 < 0x5555555555555551)
    {
      v20 = v8;
      v21 = v11 >> 3;
      v22 = operator new(24 * (v11 >> 3));
      v192 = v22;
      v194 = &v22[3 * v21];
      v23 = v22;
      do
      {
        *v23 = -1;
        v23[1] = -1;
        v23[2] = 1;
        v23 += 3;
      }
      while (v23 != &v22[3 * v21]);
      v193 = &v22[3 * v21];
      v186[0] = v20;
      if ((v20 & 0x80000000) == 0)
      {
        *v22 = v20;
        *(_OWORD *)(v22 + 1) = xmmword_191A92A20;
        nitro::ndarray_container::slice((uint64_t)v163, (__int128 **)&v192, (uint64_t)v186, (__n128)xmmword_191A92A20);
        __asm { BR              X10 }
      }
      v179[0] = v186;
      nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
    }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
LABEL_16:
  v162 = v8;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v186, (const nitro::ndarray_container *)(*(_QWORD *)a2 + 8));
  v192 = 0;
  v193 = 0;
  v194 = 0;
  v24 = v188;
  v25 = v189 - (_BYTE *)v188;
  if (v189 == v188)
  {
    v27 = 0;
    v26 = 0;
  }
  else
  {
    if (v25 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v26 = (uint64_t *)operator new(v189 - (_BYTE *)v188);
    v27 = &v26[v25 >> 3];
    v192 = v26;
    v194 = v27;
    memcpy(v26, v24, v25);
    v193 = v27;
  }
  v164 = v7;
  v165 = a5;
  v28 = (char *)operator new(8uLL);
  *(_QWORD *)v28 = 1;
  v29 = v28 + 8;
  v178 = v28 + 8;
  v176 = v28;
  v177 = v28 + 8;
  if (v26 != v27)
  {
    while (1)
    {
      v31 = *v26;
      if (v29 >= v178)
        break;
      *(_QWORD *)v29 = v31;
      v30 = v29 + 8;
LABEL_23:
      v177 = v30;
      ++v26;
      v29 = (char *)v30;
      if (v26 == v27)
        goto LABEL_51;
    }
    v32 = (char *)v176;
    v33 = v29 - (_BYTE *)v176;
    v34 = (v29 - (_BYTE *)v176) >> 3;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v36 = v178 - (_BYTE *)v176;
    if ((v178 - (_BYTE *)v176) >> 2 > v35)
      v35 = v36 >> 2;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      if (v37 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v38 = operator new(8 * v37);
    }
    else
    {
      v38 = 0;
    }
    v39 = &v38[8 * v34];
    *v39 = v31;
    v30 = v39 + 1;
    if (v29 == v32)
      goto LABEL_39;
    v40 = v29 - v32 - 8;
    if (v40 < 0x168)
    {
      v41 = v29;
      goto LABEL_38;
    }
    v43 = (v29 - 8 - v32) & 0xFFFFFFFFFFFFFFF8;
    if (&v38[v33 - 8 - v43] > &v38[v33 - 8])
    {
      v41 = v29;
    }
    else
    {
      if (&v29[-v43 - 8] <= v29 - 8)
      {
        if ((unint64_t)(v29 - v38 - v33) < 0x20)
        {
          v41 = v29;
          goto LABEL_38;
        }
        v44 = (v40 >> 3) + 1;
        v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = &v29[-v45];
        v39 = (_QWORD *)((char *)v39 - v45);
        v46 = &v38[8 * v34 - 16];
        v47 = v29 - 16;
        v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v49 = *(_OWORD *)v47;
          *(v46 - 1) = *((_OWORD *)v47 - 1);
          *v46 = v49;
          v46 -= 2;
          v47 -= 32;
          v48 -= 4;
        }
        while (v48);
        if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_38;
LABEL_39:
        v176 = v39;
        v177 = v30;
        v178 = &v38[8 * v37];
        if (v32)
          operator delete(v32);
        goto LABEL_23;
      }
      v41 = v29;
    }
    do
    {
LABEL_38:
      v42 = *((_QWORD *)v41 - 1);
      v41 -= 8;
      *--v39 = v42;
    }
    while (v41 != v32);
    goto LABEL_39;
  }
LABEL_51:
  nitro::ndarray_container::reshape(v186, (int64x2_t **)&v176, (uint64_t)v179);
  v50 = (char *)v164[4];
  v51 = (char *)v164[5];
  if (v51 == v50 || !v164[2])
    goto LABEL_64;
  v52 = v51 - v50 - 8;
  if (v52 < 8)
  {
    v53 = 1;
    v54 = (char *)v164[4];
    do
    {
LABEL_58:
      v60 = *(_QWORD *)v54;
      v54 += 8;
      v53 *= v60;
    }
    while (v54 != v51);
    goto LABEL_59;
  }
  v55 = (v52 >> 3) + 1;
  v54 = &v50[8 * (v55 & 0x3FFFFFFFFFFFFFFELL)];
  v56 = v50 + 8;
  v57 = 1;
  v58 = v55 & 0x3FFFFFFFFFFFFFFELL;
  v59 = 1;
  do
  {
    v57 *= *(v56 - 1);
    v59 *= *v56;
    v56 += 2;
    v58 -= 2;
  }
  while (v58);
  v53 = v59 * v57;
  if (v55 != (v55 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_58;
LABEL_59:
  if (v53)
  {
    v61 = *(_QWORD *)v50;
    v174 = 0uLL;
    v175 = 0;
    v62 = (nitro::ndarray_container *)std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v174, v163);
    v174.i64[1] = (uint64_t)v62;
    if (v162 != v61)
    {
      v63 = v176;
      *(_QWORD *)v176 = v162 - v61;
      v166 = 0;
      v64 = v177 - v63;
      if (v177 == v63)
      {
        v66 = 0;
        v65 = 0;
      }
      else
      {
        if (v64 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v65 = (char *)operator new(v177 - v63);
        v66 = &v65[8 * (v64 >> 3)];
        v166 = v65;
        memcpy(v65, v63, v64);
      }
      switch(*(_DWORD *)v163)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v195, (uint64_t)v163);
          memset(&v201, 0, sizeof(v201));
          v82 = v66 - v65;
          if (v66 != v65)
          {
            if (v82 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v83 = (char *)operator new(v66 - v65);
            v201.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
            v201.__r_.__value_.__r.__words[2] = (std::string::size_type)&v83[8 * (v82 >> 3)];
            v84 = v65;
            v85 = v83;
            if ((unint64_t)(v82 - 8) < 0x18)
              goto LABEL_255;
            v86 = ((unint64_t)(v82 - 8) >> 3) + 1;
            v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
            v84 = &v65[v87];
            v85 = &v83[v87];
            v88 = v83 + 16;
            v89 = (__int128 *)(v65 + 16);
            v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v91 = *v89;
              *(v88 - 1) = *(v89 - 1);
              *v88 = v91;
              v88 += 2;
              v89 += 2;
              v90 -= 4;
            }
            while (v90);
            if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_255:
              do
              {
                v92 = *(_QWORD *)v84;
                v84 += 8;
                *(_QWORD *)v85 = v92;
                v85 += 8;
              }
              while (v84 != v66);
            }
            v201.__r_.__value_.__l.__size_ = (std::string::size_type)v85;
          }
          nitro::ndarray<int>::init_from_shape((uint64_t **)&v201, &v202);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v167, &v202);
          if (v206)
          {
            v207 = v206;
            operator delete(v206);
          }
          if (v204)
          {
            v205 = v204;
            operator delete(v204);
          }
          v93 = v203;
          if (v203)
          {
            p_shared_owners = (unint64_t *)&v203->__shared_owners_;
            do
              v95 = __ldaxr(p_shared_owners);
            while (__stlxr(v95 - 1, p_shared_owners));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          if (v201.__r_.__value_.__r.__words[0])
          {
            v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
            operator delete(v201.__r_.__value_.__l.__data_);
          }
          if (v199)
          {
            v200 = v199;
            operator delete(v199);
          }
          if (v197)
          {
            v198 = v197;
            operator delete(v197);
          }
          v96 = v196;
          if (!v196)
            goto LABEL_205;
          v97 = (unint64_t *)&v196->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          break;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v195, (uint64_t)v163);
          memset(&v201, 0, sizeof(v201));
          v129 = v66 - v65;
          if (v66 != v65)
          {
            if (v129 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v130 = (char *)operator new(v66 - v65);
            v201.__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
            v201.__r_.__value_.__r.__words[2] = (std::string::size_type)&v130[8 * (v129 >> 3)];
            v131 = v65;
            v132 = v130;
            if ((unint64_t)(v129 - 8) < 0x18)
              goto LABEL_256;
            v133 = ((unint64_t)(v129 - 8) >> 3) + 1;
            v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
            v131 = &v65[v134];
            v132 = &v130[v134];
            v135 = v130 + 16;
            v136 = (__int128 *)(v65 + 16);
            v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v138 = *v136;
              *(v135 - 1) = *(v136 - 1);
              *v135 = v138;
              v135 += 2;
              v136 += 2;
              v137 -= 4;
            }
            while (v137);
            if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_256:
              do
              {
                v139 = *(_QWORD *)v131;
                v131 += 8;
                *(_QWORD *)v132 = v139;
                v132 += 8;
              }
              while (v131 != v66);
            }
            v201.__r_.__value_.__l.__size_ = (std::string::size_type)v132;
          }
          nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v201, &v202);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&v167, &v202);
          if (v206)
          {
            v207 = v206;
            operator delete(v206);
          }
          if (v204)
          {
            v205 = v204;
            operator delete(v204);
          }
          v140 = v203;
          if (v203)
          {
            v141 = (unint64_t *)&v203->__shared_owners_;
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
          if (v201.__r_.__value_.__r.__words[0])
          {
            v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
            operator delete(v201.__r_.__value_.__l.__data_);
          }
          if (v199)
          {
            v200 = v199;
            operator delete(v199);
          }
          if (v197)
          {
            v198 = v197;
            operator delete(v197);
          }
          v96 = v196;
          if (!v196)
            goto LABEL_205;
          v143 = (unint64_t *)&v196->__shared_owners_;
          do
            v98 = __ldaxr(v143);
          while (__stlxr(v98 - 1, v143));
          break;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v195, (uint64_t)v163);
          memset(&v201, 0, sizeof(v201));
          v99 = v66 - v65;
          if (v66 != v65)
          {
            if (v99 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v100 = (char *)operator new(v66 - v65);
            v201.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
            v201.__r_.__value_.__r.__words[2] = (std::string::size_type)&v100[8 * (v99 >> 3)];
            v101 = v65;
            v102 = v100;
            if ((unint64_t)(v99 - 8) < 0x18)
              goto LABEL_257;
            v103 = ((unint64_t)(v99 - 8) >> 3) + 1;
            v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
            v101 = &v65[v104];
            v102 = &v100[v104];
            v105 = v100 + 16;
            v106 = (__int128 *)(v65 + 16);
            v107 = v103 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v108 = *v106;
              *(v105 - 1) = *(v106 - 1);
              *v105 = v108;
              v105 += 2;
              v106 += 2;
              v107 -= 4;
            }
            while (v107);
            if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_257:
              do
              {
                v109 = *(_QWORD *)v101;
                v101 += 8;
                *(_QWORD *)v102 = v109;
                v102 += 8;
              }
              while (v101 != v66);
            }
            v201.__r_.__value_.__l.__size_ = (std::string::size_type)v102;
          }
          nitro::ndarray<float>::init_from_shape((uint64_t **)&v201, &v202);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v167, &v202);
          if (v206)
          {
            v207 = v206;
            operator delete(v206);
          }
          if (v204)
          {
            v205 = v204;
            operator delete(v204);
          }
          v110 = v203;
          if (v203)
          {
            v111 = (unint64_t *)&v203->__shared_owners_;
            do
              v112 = __ldaxr(v111);
            while (__stlxr(v112 - 1, v111));
            if (!v112)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          if (v201.__r_.__value_.__r.__words[0])
          {
            v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
            operator delete(v201.__r_.__value_.__l.__data_);
          }
          if (v199)
          {
            v200 = v199;
            operator delete(v199);
          }
          if (v197)
          {
            v198 = v197;
            operator delete(v197);
          }
          v96 = v196;
          if (!v196)
            goto LABEL_205;
          v113 = (unint64_t *)&v196->__shared_owners_;
          do
            v98 = __ldaxr(v113);
          while (__stlxr(v98 - 1, v113));
          break;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v195, (uint64_t)v163);
          memset(&v201, 0, sizeof(v201));
          v114 = v66 - v65;
          if (v66 != v65)
          {
            if (v114 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v115 = (char *)operator new(v66 - v65);
            v201.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
            v201.__r_.__value_.__r.__words[2] = (std::string::size_type)&v115[8 * (v114 >> 3)];
            v116 = v65;
            v117 = v115;
            if ((unint64_t)(v114 - 8) < 0x18)
              goto LABEL_258;
            v118 = ((unint64_t)(v114 - 8) >> 3) + 1;
            v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
            v116 = &v65[v119];
            v117 = &v115[v119];
            v120 = v115 + 16;
            v121 = (__int128 *)(v65 + 16);
            v122 = v118 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v123 = *v121;
              *(v120 - 1) = *(v121 - 1);
              *v120 = v123;
              v120 += 2;
              v121 += 2;
              v122 -= 4;
            }
            while (v122);
            if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_258:
              do
              {
                v124 = *(_QWORD *)v116;
                v116 += 8;
                *(_QWORD *)v117 = v124;
                v117 += 8;
              }
              while (v116 != v66);
            }
            v201.__r_.__value_.__l.__size_ = (std::string::size_type)v117;
          }
          nitro::ndarray<half>::init_from_shape((uint64_t **)&v201, &v202);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&v167, &v202);
          if (v206)
          {
            v207 = v206;
            operator delete(v206);
          }
          if (v204)
          {
            v205 = v204;
            operator delete(v204);
          }
          v125 = v203;
          if (v203)
          {
            v126 = (unint64_t *)&v203->__shared_owners_;
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          if (v201.__r_.__value_.__r.__words[0])
          {
            v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
            operator delete(v201.__r_.__value_.__l.__data_);
          }
          if (v199)
          {
            v200 = v199;
            operator delete(v199);
          }
          if (v197)
          {
            v198 = v197;
            operator delete(v197);
          }
          v96 = v196;
          if (!v196)
            goto LABEL_205;
          v128 = (unint64_t *)&v196->__shared_owners_;
          do
            v98 = __ldaxr(v128);
          while (__stlxr(v98 - 1, v128));
          break;
        default:
          nitro::ndarray_container::visit<nitro::nitro_builtins::TensorArrayWrite(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0>(nitro::nitro_builtins::TensorArrayWrite(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0)const::{lambda(void)#1}::operator()();
      }
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
LABEL_205:
      if (v166)
        operator delete(v166);
      v144 = v174.i64[1];
      if (v174.i64[1] >= v175)
      {
        v145 = std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v174, (const nitro::ndarray_container *)&v167);
      }
      else
      {
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v174.i64[1], (const nitro::ndarray_container *)&v167);
        v145 = v144 + 80;
      }
      v174.i64[1] = v145;
      if (v171[0])
      {
        v171[1] = v171[0];
        operator delete(v171[0]);
      }
      if (v169[0])
      {
        v169[1] = v169[0];
        operator delete(v169[0]);
      }
      v146 = (std::__shared_weak_count *)v168[1];
      if (v168[1])
      {
        v147 = (unint64_t *)((char *)v168[1] + 8);
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      v62 = (nitro::ndarray_container *)v174.i64[1];
    }
    if ((unint64_t)v62 >= v175)
    {
      v149 = std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v174, (const nitro::ndarray_container *)v179);
    }
    else
    {
      nitro::ndarray_container::ndarray_container(v62, (const nitro::ndarray_container *)v179);
      v149 = (uint64_t)v62 + 80;
    }
    v174.i64[1] = v149;
    nitro::ndarray_container::concat((nitro::ndarray_container **)&v174, 0, (nitro::ndarray_container *)&v167);
    *(_QWORD *)v165 = 0;
    *(_BYTE *)(v165 + 8) = 9;
    v150 = operator new();
    *(_QWORD *)v150 = 0;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v150 + 8));
    *(_QWORD *)v165 = v150;
    *(_QWORD *)v150 = 1;
    *(_DWORD *)(v150 + 8) = (_DWORD)v167;
    v151 = *(_OWORD *)v168;
    v168[0] = 0;
    v168[1] = 0;
    v152 = *(std::__shared_weak_count **)(v150 + 24);
    *(_OWORD *)(v150 + 16) = v151;
    if (v152)
    {
      v153 = (unint64_t *)&v152->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    v155 = *(void **)(v150 + 32);
    if (v155)
    {
      *(_QWORD *)(v150 + 40) = v155;
      operator delete(v155);
      *(_QWORD *)(v150 + 32) = 0;
      *(_QWORD *)(v150 + 40) = 0;
      *(_QWORD *)(v150 + 48) = 0;
    }
    v156 = *(void **)(v150 + 56);
    *(_OWORD *)(v150 + 32) = *(_OWORD *)v169;
    *(_QWORD *)(v150 + 48) = v170;
    v169[1] = 0;
    v170 = 0;
    v169[0] = 0;
    if (v156)
    {
      *(_QWORD *)(v150 + 64) = v156;
      operator delete(v156);
      *(_QWORD *)(v150 + 56) = 0;
      *(_QWORD *)(v150 + 64) = 0;
      *(_QWORD *)(v150 + 72) = 0;
      v156 = v169[0];
    }
    *(_OWORD *)(v150 + 56) = *(_OWORD *)v171;
    v157 = v172;
    v158 = v173;
    v171[1] = 0;
    v172 = 0;
    v171[0] = 0;
    *(_QWORD *)(v150 + 72) = v157;
    *(_QWORD *)(v150 + 80) = v158;
    if (v156)
    {
      v169[1] = v156;
      operator delete(v156);
    }
    v159 = (std::__shared_weak_count *)v168[1];
    if (v168[1])
    {
      v160 = (unint64_t *)((char *)v168[1] + 8);
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    v167 = &v174;
    std::vector<nitro::ndarray_container>::__destroy_vector::operator()[abi:ne180100]((void ***)&v167);
    v75 = (char *)__p;
    if (!__p)
      goto LABEL_74;
LABEL_73:
    v184 = v75;
    operator delete(v75);
    goto LABEL_74;
  }
LABEL_64:
  *(_QWORD *)v165 = 0;
  *(_BYTE *)(v165 + 8) = 9;
  v67 = (_QWORD *)operator new();
  *v67 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v67 + 1));
  *(_QWORD *)v165 = v67;
  *v67 = 1;
  *((_DWORD *)v67 + 2) = v179[0];
  v69 = v179[1];
  v68 = v180;
  if (v180)
  {
    v70 = (unint64_t *)&v180->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = (std::__shared_weak_count *)v67[3];
  v67[2] = v69;
  v67[3] = v68;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v67 + 4, (char *)v181, v182, (v182 - (_BYTE *)v181) >> 3);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v67 + 7, (char *)__p, v184, (v184 - (_BYTE *)__p) >> 3);
  v67[10] = v185;
  v75 = (char *)__p;
  if (__p)
    goto LABEL_73;
LABEL_74:
  if (v181)
  {
    v182 = (char *)v181;
    operator delete(v181);
  }
  v76 = v180;
  if (v180)
  {
    v77 = (unint64_t *)&v180->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  if (v176)
  {
    v177 = v176;
    operator delete(v176);
  }
  if (v192)
    operator delete(v192);
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  if (v188)
  {
    v189 = v188;
    operator delete(v188);
  }
  v79 = v187;
  if (v187)
  {
    v80 = (unint64_t *)&v187->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_191282868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191282D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t **a13)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;

  MEMORY[0x19401CD90](v13, 0x10B0C4002311774);
  v14 = *a13;
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
  {
    if (*a13)
    {
      v17 = std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*a13);
      MEMORY[0x19401CD90](v17, 0x10B0C4002311774);
    }
    *a13 = 0;
  }
  *a13 = 0;
  *((_BYTE *)a13 + 8) = 0;
  JUMPOUT(0x191282E18);
}

void sub_191282E94()
{
  JUMPOUT(0x191282E9CLL);
}

void nitro::nitro_builtins::TensorArraySize(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  const void *v5;
  size_t v6;
  _QWORD *v7;

  v3 = *(_OWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v5 = (const void *)v3;
  v6 = v4 - v3;
  if (v4 - (uint64_t)v3 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v7 = operator new(v4 - v3);
  memcpy(v7, v5, v6);
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)a2 = *v7;
  operator delete(v7);
}

void sub_191282F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::nitro_builtins::Skip@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  if (result != a2)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    v2 = *(unsigned __int8 *)(result + 8);
    *(_BYTE *)(a2 + 8) = v2;
    if ((v2 - 2) < 4 || v2 == 9)
    {
      v4 = *(unint64_t **)a2;
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
  }
  return result;
}

void nitro::nitro_builtins::ExpandDims(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  double v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  const void *v23;
  int64_t v24;
  char *v25;
  const void *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v67;
  float v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  BOOL v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  uint64_t v137;
  void *v138[2];
  void *v139[2];
  void *v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  void *v145;
  char *v146;
  void *v147;
  void *v148;
  char *v149;
  void *__p;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  void *v154[2];
  uint64_t v155;
  uint64_t v156;

  v5 = *((unsigned __int8 *)this + 8);
  if (v5 == 9)
  {
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__p, (const nitro::ndarray_container *)(*(_QWORD *)this + 8));
    v147 = 0;
    v148 = 0;
    v149 = 0;
    v23 = (const void *)v152;
    v24 = *((_QWORD *)&v152 + 1) - v152;
    if (*((_QWORD *)&v152 + 1) == (_QWORD)v152)
    {
      v25 = 0;
    }
    else
    {
      if (v24 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v25 = (char *)operator new(*((_QWORD *)&v152 + 1) - v152);
      v147 = v25;
      v149 = &v25[8 * (v24 >> 3)];
      memcpy(v25, v23, v24);
      v148 = v149;
    }
    v144 = 0;
    v145 = 0;
    v146 = 0;
    v26 = v154[0];
    v27 = (char *)v154[1] - (char *)v154[0];
    if (v154[1] != v154[0])
    {
      if (v27 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v144 = operator new((char *)v154[1] - (char *)v154[0]);
      v146 = (char *)v144 + 8 * (v27 >> 3);
      memcpy(v144, v26, v27);
      v145 = v146;
    }
    v28 = *(_QWORD *)a2;
    v137 = 1;
    std::vector<unsigned long>::insert((char **)&v147, (uint64_t)&v25[8 * v28], &v137);
    std::vector<unsigned long>::insert(&v144, (_BYTE *)v144 + 8 * v28, (char *)v144 + 8 * v28);
    nitro::ndarray_container::ndarray_container((uint64_t)&v137, &v151, (int)__p, (uint64_t)&v147, (uint64_t)&v144, v156);
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 9;
    v29 = operator new();
    *(_QWORD *)v29 = 0;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v29 + 8));
    *(_QWORD *)a3 = v29;
    *(_QWORD *)v29 = 1;
    *(_DWORD *)(v29 + 8) = v137;
    v30 = *(_OWORD *)v138;
    v138[0] = 0;
    v138[1] = 0;
    v31 = *(std::__shared_weak_count **)(v29 + 24);
    *(_OWORD *)(v29 + 16) = v30;
    if (v31)
    {
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = *(void **)(v29 + 32);
    if (v34)
    {
      *(_QWORD *)(v29 + 40) = v34;
      operator delete(v34);
      *(_QWORD *)(v29 + 32) = 0;
      *(_QWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
    }
    v35 = *(void **)(v29 + 56);
    *(_OWORD *)(v29 + 32) = *(_OWORD *)v139;
    *(_QWORD *)(v29 + 48) = v140;
    v139[1] = 0;
    v140 = 0;
    v139[0] = 0;
    if (v35)
    {
      *(_QWORD *)(v29 + 64) = v35;
      operator delete(v35);
      *(_QWORD *)(v29 + 56) = 0;
      *(_QWORD *)(v29 + 64) = 0;
      *(_QWORD *)(v29 + 72) = 0;
      v35 = v139[0];
    }
    *(_OWORD *)(v29 + 56) = v141;
    v36 = v142;
    v37 = v143;
    v142 = 0;
    v141 = 0uLL;
    *(_QWORD *)(v29 + 72) = v36;
    *(_QWORD *)(v29 + 80) = v37;
    if (v35)
    {
      v139[1] = v35;
      operator delete(v35);
    }
    v38 = (std::__shared_weak_count *)v138[1];
    if (v138[1])
    {
      v39 = (unint64_t *)((char *)v138[1] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v144)
    {
      v145 = v144;
      operator delete(v144);
    }
    if (v147)
    {
      v148 = v147;
      operator delete(v147);
    }
    if (v154[0])
    {
      v154[1] = v154[0];
      operator delete(v154[0]);
    }
    if ((_QWORD)v152)
    {
      *((_QWORD *)&v152 + 1) = v152;
      operator delete((void *)v152);
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
    if (!*((_QWORD *)&v151 + 1))
      return;
    v42 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
LABEL_168:
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    return;
  }
  if (v5 == 1)
  {
    v14 = *(double *)this;
    v15 = operator new(8uLL);
    __p = v15;
    *v15 = 1;
    *(_QWORD *)&v151 = v15 + 1;
    *((_QWORD *)&v151 + 1) = v15 + 1;
    nitro::ndarray<float>::init_from_shape((uint64_t **)&__p, &v137);
    if (__p)
    {
      *(_QWORD *)&v151 = __p;
      operator delete(__p);
    }
    if (v142)
      goto LABEL_171;
    v17 = v138[1];
    v16 = (uint64_t *)v139[0];
    v18 = v137;
    v19 = (char *)v139[0] - (char *)v138[1];
    if (v139[0] == v138[1])
    {
      v17 = v139[0];
LABEL_71:
      v65 = 0;
      v67 = v139[0] == v17 || v137 == 0;
      v69 = (char *)v139[0] - (char *)v17 - 8;
      v70 = (v69 >> 3) + 1;
      if (!v67)
        goto LABEL_80;
LABEL_87:
      v71 = 0;
      while (1)
      {
        if (v65 >= v71)
        {
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__p, &v137);
          *(_QWORD *)a3 = 0;
          *(_BYTE *)(a3 + 8) = 9;
          v78 = operator new();
          *(_QWORD *)v78 = 0;
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v78 + 8));
          *(_QWORD *)a3 = v78;
          *(_QWORD *)v78 = 1;
          *(_DWORD *)(v78 + 8) = (_DWORD)__p;
          v79 = v151;
          v151 = 0uLL;
          v80 = *(std::__shared_weak_count **)(v78 + 24);
          *(_OWORD *)(v78 + 16) = v79;
          if (v80)
          {
            v81 = (unint64_t *)&v80->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v83 = *(void **)(v78 + 32);
          if (v83)
          {
            *(_QWORD *)(v78 + 40) = v83;
            operator delete(v83);
            *(_QWORD *)(v78 + 32) = 0;
            *(_QWORD *)(v78 + 40) = 0;
            *(_QWORD *)(v78 + 48) = 0;
          }
          v84 = *(void **)(v78 + 56);
          *(_OWORD *)(v78 + 32) = v152;
          *(_QWORD *)(v78 + 48) = v153;
          v153 = 0;
          v152 = 0uLL;
          if (v84)
          {
            *(_QWORD *)(v78 + 64) = v84;
            operator delete(v84);
            *(_QWORD *)(v78 + 56) = 0;
            *(_QWORD *)(v78 + 64) = 0;
            *(_QWORD *)(v78 + 72) = 0;
            v84 = (void *)v152;
          }
          *(_OWORD *)(v78 + 56) = *(_OWORD *)v154;
          v85 = v155;
          v86 = v156;
          v154[1] = 0;
          v155 = 0;
          v154[0] = 0;
          *(_QWORD *)(v78 + 72) = v85;
          *(_QWORD *)(v78 + 80) = v86;
          if (v84)
          {
            *((_QWORD *)&v152 + 1) = v84;
            operator delete(v84);
          }
          v87 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
          if (*((_QWORD *)&v151 + 1))
          {
            v88 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          if (v140)
          {
            *(_QWORD *)&v141 = v140;
            operator delete(v140);
          }
          if (v138[1])
          {
            v139[0] = v138[1];
            operator delete(v138[1]);
          }
          v41 = (std::__shared_weak_count *)v138[0];
          if (!v138[0])
            return;
          v90 = (unint64_t *)((char *)v138[0] + 8);
          do
            v43 = __ldaxr(v90);
          while (__stlxr(v43 - 1, v90));
          goto LABEL_168;
        }
        v68 = v14;
        *(float *)(v18 + 4 * v65++) = v68;
        if (v67)
          goto LABEL_87;
LABEL_80:
        if (v69 < 8)
          break;
        v73 = v70 & 0x3FFFFFFFFFFFFFFELL;
        v74 = v17 + 1;
        v75 = 1;
        v76 = 1;
        do
        {
          v75 *= *(v74 - 1);
          v76 *= *v74;
          v74 += 2;
          v73 -= 2;
        }
        while (v73);
        v71 = v76 * v75;
        v72 = &v17[v70 & 0x3FFFFFFFFFFFFFFELL];
        if (v70 != (v70 & 0x3FFFFFFFFFFFFFFELL))
        {
          do
          {
LABEL_85:
            v77 = *v72++;
            v71 *= v77;
          }
          while (v72 != v16);
        }
      }
      v71 = 1;
      v72 = v17;
      goto LABEL_85;
    }
    if (!v137)
    {
      v20 = 0;
      goto LABEL_61;
    }
    if ((unint64_t)(v19 - 8) >= 8)
    {
      v44 = ((unint64_t)(v19 - 8) >> 3) + 1;
      v21 = (uint64_t *)((char *)v138[1] + 8 * (v44 & 0x3FFFFFFFFFFFFFFELL));
      v45 = (char *)v138[1] + 8;
      v46 = 1;
      v47 = v44 & 0x3FFFFFFFFFFFFFFELL;
      v48 = 1;
      do
      {
        v46 *= *(v45 - 1);
        v48 *= *v45;
        v45 += 2;
        v47 -= 2;
      }
      while (v47);
      v20 = v48 * v46;
      if (v44 == (v44 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_61:
        v50 = v19 >> 3;
        if ((unint64_t)(v19 >> 3) <= 1)
          v50 = 1;
        if (v50 >= 2)
        {
          v53 = 0;
          v54 = 0;
          v51 = v50 & 0xFFFFFFFFFFFFFFFELL;
          v55 = (char *)v138[1] + 8;
          v56 = (char *)v140 + 8;
          v57 = v50 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v53 += *(v56 - 1) * (*(v55 - 1) - 1);
            v54 += *v56 * (*v55 - 1);
            v55 += 2;
            v56 += 2;
            v57 -= 2;
          }
          while (v57);
          v52 = v54 + v53;
          if (v50 == v51)
          {
LABEL_70:
            if (v20 == v52 + 1)
              goto LABEL_71;
LABEL_171:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          }
        }
        else
        {
          v51 = 0;
          v52 = 0;
        }
        v58 = v50 - v51;
        v59 = 8 * v51;
        v60 = (uint64_t *)((char *)v140 + v59);
        v61 = (uint64_t *)((char *)v138[1] + v59);
        do
        {
          v62 = *v61++;
          v63 = v62 - 1;
          v64 = *v60++;
          v52 += v64 * v63;
          --v58;
        }
        while (v58);
        goto LABEL_70;
      }
    }
    else
    {
      v20 = 1;
      v21 = (uint64_t *)v138[1];
    }
    do
    {
      v49 = *v21++;
      v20 *= v49;
    }
    while (v21 != v139[0]);
    goto LABEL_61;
  }
  if (*((_BYTE *)this + 8))
    nitro::nitro_builtins::ExpandDims(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()();
  v6 = *(_QWORD *)this;
  v7 = operator new(8uLL);
  __p = v7;
  *v7 = 1;
  *(_QWORD *)&v151 = v7 + 1;
  *((_QWORD *)&v151 + 1) = v7 + 1;
  nitro::ndarray<float>::init_from_shape((uint64_t **)&__p, &v137);
  if (__p)
  {
    *(_QWORD *)&v151 = __p;
    operator delete(__p);
  }
  if (v142)
    goto LABEL_172;
  v9 = v138[1];
  v8 = (uint64_t *)v139[0];
  v10 = v137;
  v11 = (char *)v139[0] - (char *)v138[1];
  if (v139[0] != v138[1])
  {
    if (!v137)
    {
      v12 = 0;
      goto LABEL_117;
    }
    if ((unint64_t)(v11 - 8) >= 8)
    {
      v91 = ((unint64_t)(v11 - 8) >> 3) + 1;
      v13 = (uint64_t *)((char *)v138[1] + 8 * (v91 & 0x3FFFFFFFFFFFFFFELL));
      v92 = (char *)v138[1] + 8;
      v93 = 1;
      v94 = v91 & 0x3FFFFFFFFFFFFFFELL;
      v95 = 1;
      do
      {
        v93 *= *(v92 - 1);
        v95 *= *v92;
        v92 += 2;
        v94 -= 2;
      }
      while (v94);
      v12 = v95 * v93;
      if (v91 == (v91 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_117:
        v97 = v11 >> 3;
        if ((unint64_t)(v11 >> 3) <= 1)
          v97 = 1;
        if (v97 >= 2)
        {
          v100 = 0;
          v101 = 0;
          v98 = v97 & 0xFFFFFFFFFFFFFFFELL;
          v102 = (char *)v138[1] + 8;
          v103 = (char *)v140 + 8;
          v104 = v97 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v100 += *(v103 - 1) * (*(v102 - 1) - 1);
            v101 += *v103 * (*v102 - 1);
            v102 += 2;
            v103 += 2;
            v104 -= 2;
          }
          while (v104);
          v99 = v101 + v100;
          if (v97 == v98)
          {
LABEL_126:
            if (v12 == v99 + 1)
              goto LABEL_127;
LABEL_172:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          }
        }
        else
        {
          v98 = 0;
          v99 = 0;
        }
        v105 = v97 - v98;
        v106 = 8 * v98;
        v107 = (uint64_t *)((char *)v140 + v106);
        v108 = (uint64_t *)((char *)v138[1] + v106);
        do
        {
          v109 = *v108++;
          v110 = v109 - 1;
          v111 = *v107++;
          v99 += v111 * v110;
          --v105;
        }
        while (v105);
        goto LABEL_126;
      }
    }
    else
    {
      v12 = 1;
      v13 = (uint64_t *)v138[1];
    }
    do
    {
      v96 = *v13++;
      v12 *= v96;
    }
    while (v13 != v139[0]);
    goto LABEL_117;
  }
  v9 = v139[0];
LABEL_127:
  v112 = 0;
  v114 = v139[0] == v9 || v137 == 0;
  v115 = (char *)v139[0] - (char *)v9 - 8;
  v116 = (v115 >> 3) + 1;
  if (!v114)
    goto LABEL_136;
LABEL_143:
  v117 = 0;
  while (v112 < v117)
  {
    *(float *)(v10 + 4 * v112++) = (float)v6;
    if (v114)
      goto LABEL_143;
LABEL_136:
    if (v115 < 8)
    {
      v117 = 1;
      v118 = v9;
      goto LABEL_141;
    }
    v119 = v116 & 0x3FFFFFFFFFFFFFFELL;
    v120 = v9 + 1;
    v121 = 1;
    v122 = 1;
    do
    {
      v121 *= *(v120 - 1);
      v122 *= *v120;
      v120 += 2;
      v119 -= 2;
    }
    while (v119);
    v117 = v122 * v121;
    v118 = &v9[v116 & 0x3FFFFFFFFFFFFFFELL];
    if (v116 != (v116 & 0x3FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_141:
        v123 = *v118++;
        v117 *= v123;
      }
      while (v118 != v8);
    }
  }
  nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__p, &v137);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 9;
  v124 = operator new();
  *(_QWORD *)v124 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v124 + 8));
  *(_QWORD *)a3 = v124;
  *(_QWORD *)v124 = 1;
  *(_DWORD *)(v124 + 8) = (_DWORD)__p;
  v125 = v151;
  v151 = 0uLL;
  v126 = *(std::__shared_weak_count **)(v124 + 24);
  *(_OWORD *)(v124 + 16) = v125;
  if (v126)
  {
    v127 = (unint64_t *)&v126->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = *(void **)(v124 + 32);
  if (v129)
  {
    *(_QWORD *)(v124 + 40) = v129;
    operator delete(v129);
    *(_QWORD *)(v124 + 32) = 0;
    *(_QWORD *)(v124 + 40) = 0;
    *(_QWORD *)(v124 + 48) = 0;
  }
  v130 = *(void **)(v124 + 56);
  *(_OWORD *)(v124 + 32) = v152;
  *(_QWORD *)(v124 + 48) = v153;
  v153 = 0;
  v152 = 0uLL;
  if (v130)
  {
    *(_QWORD *)(v124 + 64) = v130;
    operator delete(v130);
    *(_QWORD *)(v124 + 56) = 0;
    *(_QWORD *)(v124 + 64) = 0;
    *(_QWORD *)(v124 + 72) = 0;
    v130 = (void *)v152;
  }
  *(_OWORD *)(v124 + 56) = *(_OWORD *)v154;
  v131 = v155;
  v132 = v156;
  v154[1] = 0;
  v155 = 0;
  v154[0] = 0;
  *(_QWORD *)(v124 + 72) = v131;
  *(_QWORD *)(v124 + 80) = v132;
  if (v130)
  {
    *((_QWORD *)&v152 + 1) = v130;
    operator delete(v130);
  }
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  if (v140)
  {
    *(_QWORD *)&v141 = v140;
    operator delete(v140);
  }
  if (v138[1])
  {
    v139[0] = v138[1];
    operator delete(v138[1]);
  }
  v41 = (std::__shared_weak_count *)v138[0];
  if (v138[0])
  {
    v136 = (unint64_t *)((char *)v138[0] + 8);
    do
      v43 = __ldaxr(v136);
    while (__stlxr(v43 - 1, v136));
    goto LABEL_168;
  }
}

void sub_191283A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  _Unwind_Resume(a1);
}

void sub_191283BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x191283C0CLL);
}

void nitro::nitro_builtins::Range(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _DWORD *v21;
  unint64_t v22;
  char *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  char *v62;
  int v63;
  __int128 v64;
  __int128 __p;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v7 = nitro::flexible_type_converter<int>::get((uint64_t)&v63, (unsigned __int8 *)this);
  v8 = nitro::flexible_type_converter<int>::get((uint64_t)&v63, (unsigned __int8 *)a2);
  v9 = nitro::flexible_type_converter<int>::get((uint64_t)&v63, (unsigned __int8 *)a3);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  if (v7 < v8)
  {
    v10 = 0;
    v11 = v9;
    v12 = v7;
    while (v10 < v62)
    {
      *(_DWORD *)v10 = v12;
      v13 = v10 + 4;
LABEL_4:
      v61 = v13;
      v12 += v11;
      v10 = (char *)v13;
      if (v12 >= v8)
        goto LABEL_32;
    }
    v14 = (char *)v60;
    v15 = v10 - (_BYTE *)v60;
    v16 = (v10 - (_BYTE *)v60) >> 2;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v18 = v62 - (_BYTE *)v60;
    if ((v62 - (_BYTE *)v60) >> 1 > v17)
      v17 = v18 >> 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = operator new(4 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[4 * v16];
    *v21 = v12;
    v13 = v21 + 1;
    if (v10 == v14)
      goto LABEL_20;
    v22 = v10 - v14 - 4;
    if (v22 < 0xBC)
    {
      v23 = v10;
      goto LABEL_19;
    }
    v25 = (v10 - 4 - v14) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v20[v15 - 4 - v25] > &v20[v15 - 4])
    {
      v23 = v10;
    }
    else
    {
      if (&v10[-v25 - 4] <= v10 - 4)
      {
        if ((unint64_t)(v10 - v20 - v15) < 0x20)
        {
          v23 = v10;
          goto LABEL_19;
        }
        v26 = (v22 >> 2) + 1;
        v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
        v23 = &v10[-v27];
        v21 = (_DWORD *)((char *)v21 - v27);
        v28 = &v20[4 * v16 - 16];
        v29 = v10 - 16;
        v30 = v26 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 8;
        }
        while (v30);
        if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_19;
LABEL_20:
        v60 = v21;
        v61 = v13;
        v62 = &v20[4 * v19];
        if (v14)
          operator delete(v14);
        goto LABEL_4;
      }
      v23 = v10;
    }
    do
    {
LABEL_19:
      v24 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *--v21 = v24;
    }
    while (v23 != v14);
    goto LABEL_20;
  }
LABEL_32:
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  nitro::ndarray<int>::ndarray((uint64_t)&v54, (uint64_t)&v60, (char **)&v51, (char **)&v48, 0);
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 9;
  v32 = operator new();
  *(_QWORD *)v32 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v32 + 8));
  *(_QWORD *)a4 = v32;
  *(_QWORD *)v32 = 1;
  nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v63, &v54);
  *(_DWORD *)(v32 + 8) = v63;
  v33 = v64;
  v64 = 0uLL;
  v34 = *(std::__shared_weak_count **)(v32 + 24);
  *(_OWORD *)(v32 + 16) = v33;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = *(void **)(v32 + 32);
  if (v37)
  {
    *(_QWORD *)(v32 + 40) = v37;
    operator delete(v37);
    *(_QWORD *)(v32 + 32) = 0;
    *(_QWORD *)(v32 + 40) = 0;
    *(_QWORD *)(v32 + 48) = 0;
  }
  v38 = *(void **)(v32 + 56);
  *(_OWORD *)(v32 + 32) = __p;
  *(_QWORD *)(v32 + 48) = v66;
  v66 = 0;
  __p = 0uLL;
  if (v38)
  {
    *(_QWORD *)(v32 + 64) = v38;
    operator delete(v38);
    *(_QWORD *)(v32 + 56) = 0;
    *(_QWORD *)(v32 + 64) = 0;
    *(_QWORD *)(v32 + 72) = 0;
    v38 = (void *)__p;
  }
  *(_OWORD *)(v32 + 56) = v67;
  v39 = v68;
  v40 = v69;
  v68 = 0;
  v67 = 0uLL;
  *(_QWORD *)(v32 + 72) = v39;
  *(_QWORD *)(v32 + 80) = v40;
  if (v38)
  {
    *((_QWORD *)&__p + 1) = v38;
    operator delete(v38);
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  v44 = v55;
  if (v55)
  {
    v45 = (unint64_t *)&v55->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
}

void sub_191284040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  void *v31;

  MEMORY[0x19401CD90](v26, 0x10B0C4002311774);
  do
  {
    v28 = __ldaxr(0);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, 0));
  if (!v29)
    nitro::nitro_builtins::Range(a9);
  *(_QWORD *)a9 = 0;
  *(_BYTE *)(a9 + 8) = 0;
  nitro::ndarray<float>::~ndarray(&a16);
  if (__p)
  {
    operator delete(__p);
    v30 = a13;
    if (!a13)
    {
LABEL_7:
      v31 = a25;
      if (!a25)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  else
  {
    v30 = a13;
    if (!a13)
      goto LABEL_7;
  }
  operator delete(v30);
  v31 = a25;
  if (!a25)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_11:
  a26 = (uint64_t)v31;
  operator delete(v31);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Split(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::vector<int>::pointer end;
  unint64_t v31;
  int *v32;
  std::vector<int>::pointer begin;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  _BYTE *v38;
  int *v39;
  unint64_t v40;
  int *v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  unint64_t v50;
  int *v51;
  int *v52;
  uint64_t v53;
  int32x4_t *v54;
  int64x2_t v55;
  uint64_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  char **v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int *v68;
  std::vector<int>::pointer v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  char *v88;
  int v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  void *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  void *v119;
  void *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  const nitro::flexible_type *v127;
  char **v128;
  int *v129;
  _QWORD *v130;
  std::vector<int>::pointer v131;
  std::vector<int> *v132;
  void *v133[2];
  void *v134[2];
  void *__p;
  void *v136[2];
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  std::__shared_weak_count *v141;
  void *v142;
  _BYTE *v143;
  void *v144;
  void *v145;
  std::vector<int> v146;
  std::vector<int> v147;
  _QWORD v148[2];
  uint64_t v149;
  unsigned __int8 v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v8 = nitro::flexible_type_converter<int>::get((uint64_t)&v139, (unsigned __int8 *)this);
  v9 = (int *)v8;
  memset(&v147, 0, sizeof(v147));
  v10 = *((unsigned __int8 *)a2 + 8);
  v129 = (int *)v8;
  if (*((_BYTE *)a2 + 8))
  {
    if (v10 == 9)
    {
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 3)
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v139, (const nitro::ndarray_container *)(*(_QWORD *)a2 + 8));
      else
        _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)(*(_QWORD *)a2 + 8), (uint64_t)&v139);
      nitro::ndarray<int>::ndarray((uint64_t)&v132, (uint64_t)&v139);
      nitro::ndarray<int>::get_elements_copy((uint64_t *)&v132, (uint64_t *)&v146);
      if (v147.__begin_)
      {
        v147.__end_ = v147.__begin_;
        operator delete(v147.__begin_);
      }
      v147 = v146;
      memset(&v146, 0, sizeof(v146));
      if (__p)
      {
        v136[0] = __p;
        operator delete(__p);
      }
      if (v133[1])
      {
        v134[0] = v133[1];
        operator delete(v133[1]);
      }
      v21 = (std::__shared_weak_count *)v133[0];
      if (v133[0])
      {
        v22 = (unint64_t *)((char *)v133[0] + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v144)
      {
        v145 = v144;
        operator delete(v144);
      }
      if (v142)
      {
        v143 = v142;
        operator delete(v142);
      }
      v24 = v141;
      if (v141)
      {
        p_shared_owners = (unint64_t *)&v141->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else if (v10 == 4)
    {
      v11 = *(_QWORD *)a2;
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      v13 = *(_QWORD *)(*(_QWORD *)a2 + 16);
      if (v13 != v12)
      {
        std::vector<Device>::__append(&v147, (v13 - v12) >> 4);
        v12 = *(_QWORD *)(v11 + 8);
        v13 = *(_QWORD *)(v11 + 16);
      }
      if (v13 != v12)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = nitro::flexible_type_converter<int>::get((uint64_t)&v139, (unsigned __int8 *)(v12 + v14));
          v147.__begin_[v15++] = v16;
          v12 = *(_QWORD *)(v11 + 8);
          v14 += 16;
        }
        while (v15 < (*(_QWORD *)(v11 + 16) - v12) >> 4);
      }
    }
    goto LABEL_70;
  }
  v17 = *(_QWORD *)a3;
  v140 = 0;
  v141 = 0;
  v139 = 0;
  v19 = *(_BYTE **)(v17 + 32);
  v18 = *(_BYTE **)(v17 + 40);
  v20 = v18 - v19;
  if (v18 == v19)
  {
    v130 = 0;
  }
  else
  {
    if (v20 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v139 = (char *)operator new(v18 - v19);
    v140 = v139;
    v141 = (std::__shared_weak_count *)&v139[8 * (v20 >> 3)];
    v130 = v139;
    memcpy(v139, v19, v20);
  }
  v127 = a3;
  v27 = nitro::flexible_type_converter<int>::get((uint64_t)&v132, (unsigned __int8 *)a2);
  v9 = v129;
  if (v27)
  {
    v28 = 0;
    v29 = v27;
    end = v147.__end_;
    v31 = v130[(_QWORD)v129] / (unint64_t)v27;
    while (end < v147.__end_cap_.__value_)
    {
      *end = v31;
      v32 = end + 1;
LABEL_40:
      v147.__end_ = v32;
      ++v28;
      end = v32;
      if (v28 == v29)
        goto LABEL_67;
    }
    begin = v147.__begin_;
    v34 = end - v147.__begin_;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v36 = (char *)v147.__end_cap_.__value_ - (char *)v147.__begin_;
    if (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 1 > v35)
      v35 = v36 >> 1;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
      v37 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      if (v37 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v38 = operator new(4 * v37);
    }
    else
    {
      v38 = 0;
    }
    v39 = (int *)&v38[4 * v34];
    *v39 = v31;
    v32 = v39 + 1;
    if (end == begin)
    {
      v9 = v129;
      goto LABEL_58;
    }
    v40 = (char *)end - (char *)begin - 4;
    if (v40 < 0xBC
      || (v43 = ((char *)(end - 1) - (char *)begin) & 0xFFFFFFFFFFFFFFFCLL,
          &v38[(char *)end - (char *)begin - 4 - v43] > &v38[(char *)end - (char *)begin - 4])
      || (std::vector<int>::pointer)((char *)end - v43 - 4) > end - 1
      || (unint64_t)((char *)begin - v38) < 0x20)
    {
      v41 = end;
      v9 = v129;
    }
    else
    {
      v44 = (v40 >> 2) + 1;
      v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
      v41 = &end[v45 / 0xFFFFFFFFFFFFFFFCLL];
      v39 = (int *)((char *)v39 - v45);
      v46 = &v38[4 * v34 - 16];
      v47 = (__int128 *)(end - 4);
      v48 = v44 & 0x7FFFFFFFFFFFFFF8;
      v9 = v129;
      do
      {
        v49 = *v47;
        *(v46 - 1) = *(v47 - 1);
        *v46 = v49;
        v46 -= 2;
        v47 -= 2;
        v48 -= 8;
      }
      while (v48);
      if (v44 == (v44 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_58:
        v147.__begin_ = v39;
        v147.__end_ = v32;
        v147.__end_cap_.__value_ = (int *)&v38[4 * v37];
        if (begin)
          operator delete(begin);
        goto LABEL_40;
      }
    }
    do
    {
      v42 = *--v41;
      *--v39 = v42;
    }
    while (v41 != begin);
    goto LABEL_58;
  }
LABEL_67:
  if (v130)
    operator delete(v130);
  a3 = v127;
LABEL_70:
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v139, (const nitro::ndarray_container *)(*(_QWORD *)a3 + 8));
  if (v147.__begin_ == v147.__end_)
  {
    v51 = 0;
    goto LABEL_78;
  }
  v50 = (char *)v147.__end_ - (char *)v147.__begin_ - 4;
  if (v50 < 0x1C)
  {
    v51 = 0;
    v52 = v147.__begin_;
    do
    {
LABEL_77:
      v61 = *v52++;
      v51 = (int *)((char *)v51 + v61);
    }
    while (v52 != v147.__end_);
    goto LABEL_78;
  }
  v53 = (v50 >> 2) + 1;
  v52 = &v147.__begin_[v53 & 0x7FFFFFFFFFFFFFF8];
  v54 = (int32x4_t *)(v147.__begin_ + 4);
  v55 = 0uLL;
  v56 = v53 & 0x7FFFFFFFFFFFFFF8;
  v57 = 0uLL;
  v58 = 0uLL;
  v59 = 0uLL;
  do
  {
    v60 = v54[-1];
    v57 = vaddw_high_s32(v57, v60);
    v55 = vaddw_s32(v55, *(int32x2_t *)v60.i8);
    v59 = vaddw_high_s32(v59, *v54);
    v58 = vaddw_s32(v58, *(int32x2_t *)v54->i8);
    v54 += 2;
    v56 -= 8;
  }
  while (v56);
  v51 = (int *)vaddvq_s64(vaddq_s64(vaddq_s64(v58, v55), vaddq_s64(v59, v57)));
  if (v53 != (v53 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_77;
LABEL_78:
  v146.__begin_ = v9;
  v148[0] = (v143 - (_BYTE *)v142) >> 3;
  if (v148[0] <= (uint64_t)v9)
  {
    v132 = &v146;
    v133[0] = v148;
    nitro::nitro_builtins::Split(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()();
  }
  v146.__begin_ = v51;
  v148[0] = *((_QWORD *)v142 + (_QWORD)v9);
  if (v51 != (int *)v148[0])
  {
    v132 = &v146;
    v133[0] = v148;
    nitro::nitro_builtins::Split(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_1::operator()();
  }
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 4;
  v62 = operator new();
  *(_QWORD *)v62 = 0;
  *(_QWORD *)(v62 + 8) = 0;
  v63 = (char **)(v62 + 8);
  *(_QWORD *)(v62 + 16) = 0;
  *(_QWORD *)(v62 + 24) = 0;
  *(_QWORD *)a4 = v62;
  *(_QWORD *)v62 = 1;
  std::vector<nitro::flexible_type>::reserve((char **)(v62 + 8), v147.__end_ - v147.__begin_);
  memset(&v146, 0, sizeof(v146));
  v65 = v143 - (_BYTE *)v142;
  if (v143 == v142)
  {
    v67 = 0;
  }
  else
  {
    if ((unint64_t)v65 >= 0x5555555555555551)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v66 = v65 >> 3;
    v67 = (int *)operator new(24 * (v65 >> 3));
    v146.__begin_ = v67;
    v146.__end_cap_.__value_ = &v67[6 * v66];
    v68 = v67;
    do
    {
      *(_QWORD *)v68 = -1;
      *((_QWORD *)v68 + 1) = -1;
      *((_QWORD *)v68 + 2) = 1;
      v68 += 6;
    }
    while (v68 != &v67[6 * v66]);
    v146.__end_ = &v67[6 * v66];
  }
  v69 = v147.__begin_;
  v131 = v147.__end_;
  if (v147.__begin_ != v147.__end_)
  {
    v70 = 0;
    do
    {
      v72 = *v69;
      v132 = (std::vector<int> *)v70;
      if (v70 < 0)
      {
        v148[0] = &v132;
        nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#1}::operator()();
      }
      v148[0] = v70 + v72;
      v149 = v70;
      if ((int)v72 <= 0)
      {
        v132 = (std::vector<int> *)v148;
        v133[0] = &v149;
        nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#2}::operator()();
      }
      v73 = &v146.__begin_[6 * (int)v9];
      *(_QWORD *)v73 = v70;
      *((_QWORD *)v73 + 1) = v70 + v72;
      *((_QWORD *)v73 + 2) = 1;
      nitro::ndarray_container::slice((uint64_t)&v139, (__int128 **)&v146, (uint64_t)&v132, v64);
      v149 = 0;
      v150 = 9;
      v74 = operator new();
      *(_QWORD *)v74 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v74 + 8));
      v149 = v74;
      *(_QWORD *)v74 = 1;
      *(_DWORD *)(v74 + 8) = (_DWORD)v132;
      v75 = *(_OWORD *)v133;
      v133[0] = 0;
      v133[1] = 0;
      v76 = *(std::__shared_weak_count **)(v74 + 24);
      *(_OWORD *)(v74 + 16) = v75;
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      v79 = *(void **)(v74 + 32);
      if (v79)
      {
        *(_QWORD *)(v74 + 40) = v79;
        operator delete(v79);
        *(_QWORD *)(v74 + 32) = 0;
        *(_QWORD *)(v74 + 40) = 0;
        *(_QWORD *)(v74 + 48) = 0;
      }
      v80 = *(void **)(v74 + 56);
      *(_OWORD *)(v74 + 32) = *(_OWORD *)v134;
      *(_QWORD *)(v74 + 48) = __p;
      v134[1] = 0;
      __p = 0;
      v134[0] = 0;
      if (v80)
      {
        *(_QWORD *)(v74 + 64) = v80;
        operator delete(v80);
        *(_QWORD *)(v74 + 56) = 0;
        *(_QWORD *)(v74 + 64) = 0;
        *(_QWORD *)(v74 + 72) = 0;
      }
      v64 = *(__n128 *)v136;
      *(_OWORD *)(v74 + 56) = *(_OWORD *)v136;
      v81 = v137;
      v82 = v138;
      v136[1] = 0;
      v137 = 0;
      v136[0] = 0;
      *(_QWORD *)(v74 + 72) = v81;
      *(_QWORD *)(v74 + 80) = v82;
      v83 = *(_QWORD *)(v62 + 16);
      if (v83 >= *(_QWORD *)(v62 + 24))
      {
        v88 = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>(v63, (uint64_t)&v149);
        v89 = v150;
        *(_QWORD *)(v62 + 16) = v88;
        switch(v89)
        {
          case 2:
            v90 = (unint64_t *)v149;
            do
            {
              v91 = __ldaxr(v90);
              v92 = v91 - 1;
            }
            while (__stlxr(v92, v90));
            if (!v92)
            {
              v93 = (_QWORD *)v149;
              if (v149)
              {
                if (*(char *)(v149 + 31) < 0)
                  operator delete(*(void **)(v149 + 8));
                v94 = v93;
                v95 = 0x1012C404EF22A49;
                goto LABEL_160;
              }
            }
            break;
          case 3:
            v103 = (unint64_t *)v149;
            do
            {
              v104 = __ldaxr(v103);
              v105 = v104 - 1;
            }
            while (__stlxr(v105, v103));
            if (!v105)
            {
              v106 = (_QWORD *)v149;
              if (v149)
              {
                v107 = *(void **)(v149 + 8);
                if (v107)
                {
                  *(_QWORD *)(v149 + 16) = v107;
                  operator delete(v107);
                }
                v94 = v106;
                v95 = 0x1080C409938AC02;
                goto LABEL_160;
              }
            }
            break;
          case 4:
            v96 = (unint64_t *)v149;
            do
            {
              v97 = __ldaxr(v96);
              v98 = v97 - 1;
            }
            while (__stlxr(v98, v96));
            if (!v98)
            {
              v99 = v149;
              if (v149)
              {
                v128 = v63;
                v100 = *(_QWORD *)(v149 + 8);
                if (v100)
                {
                  v101 = *(_QWORD *)(v149 + 16);
                  v102 = *(void **)(v149 + 8);
                  if (v101 != v100)
                  {
                    do
                    {
                      v101 -= 16;
                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v99 + 24, v101);
                    }
                    while (v101 != v100);
                    v102 = *(void **)(v99 + 8);
                    LODWORD(v9) = (_DWORD)v129;
                  }
                  *(_QWORD *)(v99 + 16) = v100;
                  operator delete(v102);
                }
                MEMORY[0x19401CD90](v99, 0x1020C405E66F15BLL);
                v63 = v128;
              }
            }
            break;
          case 5:
            v108 = (unint64_t *)v149;
            do
            {
              v109 = __ldaxr(v108);
              v110 = v109 - 1;
            }
            while (__stlxr(v110, v108));
            if (!v110)
            {
              v111 = (_QWORD *)v149;
              if (v149)
              {
                v112 = *(_QWORD *)(v149 + 8);
                if (v112)
                {
                  v113 = *(_QWORD *)(v149 + 16);
                  v114 = *(void **)(v149 + 8);
                  if (v113 != v112)
                  {
                    do
                      v113 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v113 - 32);
                    while (v113 != v112);
                    v114 = (void *)v111[1];
                  }
                  v111[2] = v112;
                  operator delete(v114);
                }
                v94 = v111;
                v95 = 0x1020C405E66F15BLL;
                goto LABEL_160;
              }
            }
            break;
          case 9:
            v115 = (unint64_t *)v149;
            do
            {
              v116 = __ldaxr(v115);
              v117 = v116 - 1;
            }
            while (__stlxr(v117, v115));
            if (!v117)
            {
              v118 = (_QWORD *)v149;
              if (v149)
              {
                v119 = *(void **)(v149 + 56);
                if (v119)
                {
                  *(_QWORD *)(v149 + 64) = v119;
                  operator delete(v119);
                }
                v120 = (void *)v118[4];
                if (v120)
                {
                  v118[5] = v120;
                  operator delete(v120);
                }
                v121 = (std::__shared_weak_count *)v118[3];
                if (v121)
                {
                  v122 = (unint64_t *)&v121->__shared_owners_;
                  do
                    v123 = __ldaxr(v122);
                  while (__stlxr(v123 - 1, v122));
                  if (!v123)
                  {
                    ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                    std::__shared_weak_count::__release_weak(v121);
                  }
                }
                v94 = v118;
                v95 = 0x10B0C4002311774;
LABEL_160:
                MEMORY[0x19401CD90](v94, v95);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        *(_QWORD *)v83 = 0;
        *(_BYTE *)(v83 + 8) = 0;
        v84 = v149;
        *(_BYTE *)(v83 + 8) = v150;
        *(_QWORD *)v83 = v84;
        *(_BYTE *)(v83 + 8) = v150;
        *(_QWORD *)(v62 + 16) = v83 + 16;
      }
      v149 = 0;
      v150 = 0;
      if (v136[0])
      {
        v136[1] = v136[0];
        operator delete(v136[0]);
      }
      if (v134[0])
      {
        v134[1] = v134[0];
        operator delete(v134[0]);
      }
      v85 = (std::__shared_weak_count *)v133[1];
      if (v133[1])
      {
        v86 = (unint64_t *)((char *)v133[1] + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v71 = *v69++;
      v70 += v71;
    }
    while (v69 != v131);
    v67 = v146.__begin_;
  }
  if (v67)
  {
    v146.__end_ = v67;
    operator delete(v67);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  v124 = v141;
  if (v141)
  {
    v125 = (unint64_t *)&v141->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  if (v147.__begin_)
  {
    v147.__end_ = v147.__begin_;
    operator delete(v147.__begin_);
  }
}

void sub_191284C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, uint64_t a11, void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  uint64_t v34;
  _QWORD **v36;
  _QWORD *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;

  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  v36 = a10;
  switch(*((_BYTE *)a10 + 8))
  {
    case 2:
      v37 = a10;
      v38 = *a10;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (v40)
        goto LABEL_36;
      v41 = *a10;
      if (!*a10)
        goto LABEL_35;
      if (*((char *)v41 + 31) < 0)
        operator delete((void *)v41[1]);
      v42 = (uint64_t)v41;
      v43 = 0x1012C404EF22A49;
      goto LABEL_34;
    case 3:
      v37 = a10;
      v47 = *a10;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (v49)
        goto LABEL_36;
      v50 = *a10;
      if (!*a10)
        goto LABEL_35;
      v51 = (void *)v50[1];
      if (v51)
      {
        v50[2] = v51;
        operator delete(v51);
      }
      v42 = (uint64_t)v50;
      v43 = 0x1080C409938AC02;
      goto LABEL_34;
    case 4:
      v37 = a10;
      v44 = *a10;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (v46)
        goto LABEL_36;
      if (!*a10)
        goto LABEL_35;
      v42 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair((uint64_t)*a10);
      goto LABEL_28;
    case 5:
      v37 = a10;
      v52 = *a10;
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (v54)
        goto LABEL_36;
      if (!*a10)
        goto LABEL_35;
      v42 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair((uint64_t)*a10);
LABEL_28:
      v43 = 0x1020C405E66F15BLL;
      goto LABEL_34;
    case 9:
      v37 = a10;
      v55 = *a10;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (v57)
      {
LABEL_36:
        v36 = (_QWORD **)v37;
      }
      else
      {
        if (*a10)
        {
          v42 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*a10);
          v43 = 0x10B0C4002311774;
LABEL_34:
          MEMORY[0x19401CD90](v42, v43);
        }
LABEL_35:
        v36 = (_QWORD **)v37;
        *v37 = 0;
      }
LABEL_37:
      *v36 = 0;
      *((_BYTE *)v36 + 8) = 0;
      nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a23);
      v58 = *(void **)(v34 - 160);
      if (!v58)
        _Unwind_Resume(a1);
      *(_QWORD *)(v34 - 152) = v58;
      operator delete(v58);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_37;
  }
}

void nitro::nitro_builtins::Transpose(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  int64_t v8;
  _OWORD *v9;
  std::vector<int>::pointer v10;
  _QWORD *v11;
  unint64_t v12;
  _OWORD *v13;
  std::vector<int>::pointer v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int *value;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *__p;
  void *v38;
  char *v39;
  std::vector<int> v40;
  void *v41[2];
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[16];
  std::__shared_weak_count *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;

  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v46, (const nitro::ndarray_container *)(*(_QWORD *)this + 8));
  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)a2, &v40);
  begin = v40.__begin_;
  end = v40.__end_;
  __p = 0;
  v38 = 0;
  v39 = 0;
  v8 = (char *)v40.__end_ - (char *)v40.__begin_;
  if (v40.__end_ != v40.__begin_)
  {
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = operator new(2 * v8);
    __p = v9;
    v39 = (char *)v9 + 8 * (v8 >> 2);
    v10 = begin;
    v11 = v9;
    if ((unint64_t)(v8 - 4) < 0x1C)
      goto LABEL_42;
    v12 = ((unint64_t)(v8 - 4) >> 2) + 1;
    v10 = &begin[v12 & 0x7FFFFFFFFFFFFFF8];
    v11 = (_QWORD *)v9 + (v12 & 0x7FFFFFFFFFFFFFF8);
    v13 = v9 + 2;
    v14 = begin + 4;
    v15 = v12 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v16 = *((_OWORD *)v14 - 1);
      *(_QWORD *)&v17 = (int)v16;
      *((_QWORD *)&v17 + 1) = SDWORD1(v16);
      v18 = v17;
      *(_QWORD *)&v17 = SDWORD2(v16);
      *((_QWORD *)&v17 + 1) = SHIDWORD(v16);
      v19 = v17;
      *(_QWORD *)&v17 = (int)*(_OWORD *)v14;
      *((_QWORD *)&v17 + 1) = (int)HIDWORD(*(_QWORD *)v14);
      v20 = v17;
      *(_QWORD *)&v17 = (int)*((_QWORD *)v14 + 1);
      *((_QWORD *)&v17 + 1) = (int)HIDWORD(*(_OWORD *)v14);
      *(v13 - 2) = v18;
      *(v13 - 1) = v19;
      *v13 = v20;
      v13[1] = v17;
      v13 += 4;
      v14 += 8;
      v15 -= 8;
    }
    while (v15);
    if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_42:
      do
      {
        v21 = *v10++;
        *v11++ = v21;
      }
      while (v10 != end);
    }
    v38 = v11;
  }
  nitro::ndarray_container::transpose((uint64_t)v46, (uint64_t)&__p, (uint64_t)&v40);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 9;
  v22 = operator new();
  *(_QWORD *)v22 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v22 + 8));
  *(_QWORD *)a3 = v22;
  *(_QWORD *)v22 = 1;
  *(_DWORD *)(v22 + 8) = v40.__begin_;
  v23 = *(_OWORD *)&v40.__end_;
  *(_OWORD *)&v40.__end_ = 0uLL;
  v24 = *(std::__shared_weak_count **)(v22 + 24);
  *(_OWORD *)(v22 + 16) = v23;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = *(void **)(v22 + 32);
  if (v27)
  {
    *(_QWORD *)(v22 + 40) = v27;
    operator delete(v27);
    *(_QWORD *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 40) = 0;
    *(_QWORD *)(v22 + 48) = 0;
  }
  v28 = *(void **)(v22 + 56);
  *(_OWORD *)(v22 + 32) = *(_OWORD *)v41;
  *(_QWORD *)(v22 + 48) = v42;
  v41[1] = 0;
  v42 = 0;
  v41[0] = 0;
  if (v28)
  {
    *(_QWORD *)(v22 + 64) = v28;
    operator delete(v28);
    *(_QWORD *)(v22 + 56) = 0;
    *(_QWORD *)(v22 + 64) = 0;
    *(_QWORD *)(v22 + 72) = 0;
    v28 = v41[0];
  }
  *(_OWORD *)(v22 + 56) = v43;
  v29 = v44;
  v30 = v45;
  v44 = 0;
  v43 = 0uLL;
  *(_QWORD *)(v22 + 72) = v29;
  *(_QWORD *)(v22 + 80) = v30;
  if (v28)
  {
    v41[1] = v28;
    operator delete(v28);
  }
  value = v40.__end_cap_.__value_;
  if (v40.__end_cap_.__value_)
  {
    v32 = (unint64_t *)(v40.__end_cap_.__value_ + 2);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(int *))(*(_QWORD *)value + 16))(value);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)value);
    }
  }
  if (begin)
    operator delete(begin);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  v34 = v47;
  if (v47)
  {
    v35 = (unint64_t *)&v47->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_1912853A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;

  MEMORY[0x19401CD90](v25, 0x10B0C4002311774);
  do
  {
    v27 = __ldaxr(0);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, 0));
  if (!v28)
    nitro::nitro_builtins::Range(v24);
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a13);
  if (v23)
    operator delete(v23);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a23);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::BiasAdd(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  nitro::ndarray_container *v6;
  int v7;
  double v8;
  float v9;
  int *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD v63[2];
  std::__shared_weak_count *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  _QWORD v69[2];
  std::__shared_weak_count *v70;
  void *v71;
  void *v72;
  void *__p;
  void *v74;
  int *v75;
  std::__shared_weak_count *v76;
  void *v77;
  uint64_t *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  float v82[4];
  std::__shared_weak_count *v83;
  void *v84;
  _BYTE *v85;
  void *v86;
  void *v87;
  int v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE v95[16];
  std::__shared_weak_count *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  int v101;

  v6 = nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v95, (const nitro::ndarray_container *)(*(_QWORD *)this + 8));
  nitro::ndarray_container::copy(v6, (uint64_t)&v88);
  v7 = *((unsigned __int8 *)a2 + 8);
  if (v7 == 1)
  {
    v8 = *(double *)a2;
  }
  else
  {
    if (*((_BYTE *)a2 + 8))
      goto LABEL_6;
    v8 = (double)*(uint64_t *)a2;
  }
  v9 = v8;
  v82[0] = v9;
  nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(&v88, v82);
  v7 = *((unsigned __int8 *)a2 + 8);
LABEL_6:
  if (v7 != 9)
    goto LABEL_77;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v82, (const nitro::ndarray_container *)(*(_QWORD *)a2 + 8));
  v69[0] = (v85 - (_BYTE *)v84) >> 3;
  if (v85 - (_BYTE *)v84 != 8)
  {
    v63[0] = v69;
    nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_1::operator()();
  }
  v10 = *(int **)v84;
  if (*(_QWORD *)v84 != 1)
  {
    v63[0] = *(_QWORD *)v84;
    v75 = *(int **)(*((_QWORD *)&v90 + 1) - 8);
    if (v10 != v75)
    {
      v69[0] = v63;
      v69[1] = &v75;
      nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_2::operator()();
    }
    nitro::ndarray_container::canonicalize((nitro::ndarray_container *)v82, (uint64_t)v69);
    nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(&v88, v69);
    if (__p)
    {
      v74 = __p;
      operator delete(__p);
    }
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
    }
    v11 = v70;
    if (!v70)
      goto LABEL_68;
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    goto LABEL_66;
  }
  nitro::ndarray_container::compact((nitro::ndarray_container *)v82, (uint64_t)v63);
  if (LODWORD(v63[0]) == 9)
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v69, (const nitro::ndarray_container *)v63);
  else
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v63, (uint64_t)v69);
  nitro::ndarray<float>::ndarray((uint64_t)&v75, (uint64_t)v69);
  if (v81)
    goto LABEL_105;
  v14 = (char *)v78 - (_BYTE *)v77;
  if (v78 != v77)
  {
    if (!v75)
    {
      v15 = 0;
      goto LABEL_31;
    }
    if ((unint64_t)(v14 - 8) >= 8)
    {
      v17 = ((unint64_t)(v14 - 8) >> 3) + 1;
      v16 = (uint64_t *)((char *)v77 + 8 * (v17 & 0x3FFFFFFFFFFFFFFELL));
      v18 = (char *)v77 + 8;
      v19 = 1;
      v20 = v17 & 0x3FFFFFFFFFFFFFFELL;
      v21 = 1;
      do
      {
        v19 *= *(v18 - 1);
        v21 *= *v18;
        v18 += 2;
        v20 -= 2;
      }
      while (v20);
      v15 = v21 * v19;
      if (v17 == (v17 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_31:
        v23 = v14 >> 3;
        if ((unint64_t)(v14 >> 3) <= 1)
          v23 = 1;
        if (v23 >= 2)
        {
          v26 = 0;
          v27 = 0;
          v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
          v28 = (char *)v77 + 8;
          v29 = (char *)v79 + 8;
          v30 = v23 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v26 += *(v29 - 1) * (*(v28 - 1) - 1);
            v27 += *v29 * (*v28 - 1);
            v28 += 2;
            v29 += 2;
            v30 -= 2;
          }
          while (v30);
          v25 = v27 + v26;
          if (v23 == v24)
          {
LABEL_40:
            if (v15 == v25 + 1)
              goto LABEL_41;
LABEL_105:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          }
        }
        else
        {
          v24 = 0;
          v25 = 0;
        }
        v31 = v23 - v24;
        v32 = 8 * v24;
        v33 = (uint64_t *)((char *)v79 + v32);
        v34 = (uint64_t *)((char *)v77 + v32);
        do
        {
          v35 = *v34++;
          v36 = v35 - 1;
          v37 = *v33++;
          v25 += v37 * v36;
          --v31;
        }
        while (v31);
        goto LABEL_40;
      }
    }
    else
    {
      v15 = 1;
      v16 = (uint64_t *)v77;
    }
    do
    {
      v22 = *v16++;
      v15 *= v22;
    }
    while (v16 != v78);
    goto LABEL_31;
  }
LABEL_41:
  v101 = *v75;
  nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(&v88, (float *)&v101);
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  if (v77)
  {
    v78 = (uint64_t *)v77;
    operator delete(v77);
  }
  v38 = v76;
  if (v76)
  {
    v39 = (unint64_t *)&v76->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  v41 = v70;
  if (v70)
  {
    v42 = (unint64_t *)&v70->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  v11 = v64;
  if (!v64)
    goto LABEL_68;
  v44 = (unint64_t *)&v64->__shared_owners_;
  do
    v13 = __ldaxr(v44);
  while (__stlxr(v13 - 1, v44));
LABEL_66:
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_68:
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  v45 = v83;
  if (v83)
  {
    v46 = (unint64_t *)&v83->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_77:
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 9;
  v48 = operator new();
  *(_QWORD *)v48 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v48 + 8));
  *(_QWORD *)a3 = v48;
  *(_QWORD *)v48 = 1;
  *(_DWORD *)(v48 + 8) = v88;
  v49 = v89;
  v89 = 0uLL;
  v50 = *(std::__shared_weak_count **)(v48 + 24);
  *(_OWORD *)(v48 + 16) = v49;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(void **)(v48 + 32);
  if (v53)
  {
    *(_QWORD *)(v48 + 40) = v53;
    operator delete(v53);
    *(_QWORD *)(v48 + 32) = 0;
    *(_QWORD *)(v48 + 40) = 0;
    *(_QWORD *)(v48 + 48) = 0;
  }
  v54 = *(void **)(v48 + 56);
  *(_OWORD *)(v48 + 32) = v90;
  *(_QWORD *)(v48 + 48) = v91;
  v91 = 0;
  v90 = 0uLL;
  if (v54)
  {
    *(_QWORD *)(v48 + 64) = v54;
    operator delete(v54);
    *(_QWORD *)(v48 + 56) = 0;
    *(_QWORD *)(v48 + 64) = 0;
    *(_QWORD *)(v48 + 72) = 0;
    v54 = (void *)v90;
  }
  *(_OWORD *)(v48 + 56) = v92;
  v55 = v93;
  v56 = v94;
  v93 = 0;
  v92 = 0uLL;
  *(_QWORD *)(v48 + 72) = v55;
  *(_QWORD *)(v48 + 80) = v56;
  if (v54)
  {
    *((_QWORD *)&v90 + 1) = v54;
    operator delete(v54);
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  v60 = v96;
  if (v96)
  {
    v61 = (unint64_t *)&v96->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_191285A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a21);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a40);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v40 - 216));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v40 - 136));
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Sum(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3, const nitro::flexible_type *a4)
{
  void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  unint64_t v12;
  std::vector<int>::pointer v13;
  uint64_t v14;
  std::vector<int>::pointer v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  char *v20;
  char *v21;
  int64_t v22;
  int64_t v23;
  _QWORD *v24;
  uint64_t v25;
  std::string::size_type v26;
  size_t v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::string::size_type v31;
  size_t v32;
  int64_t v33;
  _QWORD *v34;
  uint64_t v35;
  std::string::size_type v36;
  size_t v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  std::string::size_type v41;
  size_t v42;
  int64_t v43;
  unint64_t v44;
  std::string::size_type v45;
  int *v46;
  int *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string::size_type v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  int *v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  const nitro::flexible_type *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  std::string::size_type v101;
  int *v102;
  int *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::string::size_type v107;
  char *v108;
  uint64_t v109;
  std::string::size_type v110;
  std::string::size_type v111;
  int *v112;
  uint64_t v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *p_shared_owners;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::string::size_type v155;
  int *v156;
  int *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  std::string::size_type v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  int *v165;
  uint64_t v166;
  int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v208;
  int v209;
  uint64_t v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  std::string::size_type v217;
  unint64_t v218;
  int *v219;
  unint64_t v220;
  int *v221;
  uint64_t v222;
  int *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  unint64_t v232;
  _QWORD *v233;
  unint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  unint64_t v247;
  _QWORD *v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  std::string::size_type v258;
  uint64_t v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  int *v274;
  int *v275;
  int *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  char *v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  std::string::size_type v286;
  unint64_t v287;
  std::string::size_type v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  size_t __len;
  size_t __lena;
  size_t __lenb;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int64_t v310;
  int64_t v311;
  int64_t v312;
  const nitro::flexible_type *v313;
  void *v314;
  void *v315;
  char *v316;
  void *v317;
  int *v318;
  char *v319;
  int v320;
  void *v321;
  char *v322;
  char *v323;
  _DWORD v324[4];
  void *v325;
  _BYTE *v326;
  std::vector<int> v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  void *v330;
  void *v331;
  void *__p;
  void *v333[2];
  uint64_t v334;
  uint64_t __dst;
  std::__shared_weak_count *__dst_8;
  char *v337;
  _BYTE *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  std::string v342;

  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)this, &v327);
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v324, (const nitro::ndarray_container *)(*(_QWORD *)a3 + 8));
  v321 = 0;
  v322 = 0;
  v323 = 0;
  v6 = v325;
  v7 = v326 - (_BYTE *)v325;
  if (v326 == v325)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v326 - (_BYTE *)v325);
    v9 = &v8[8 * (v7 >> 3)];
    v321 = v8;
    v323 = v9;
    memcpy(v8, v6, v7);
    v322 = v9;
  }
  begin = v327.__begin_;
  end = v327.__end_;
  if (v327.__begin_ != v327.__end_)
  {
    v12 = (char *)v327.__end_ - (char *)v327.__begin_ - 4;
    v13 = v327.__begin_;
    if (v12 < 4)
      goto LABEL_289;
    v14 = (v12 >> 2) + 1;
    v13 = &v327.__begin_[v14 & 0x7FFFFFFFFFFFFFFELL];
    v15 = v327.__begin_ + 1;
    v16 = v14 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v17 = *v15;
      *(_QWORD *)&v8[8 * *(v15 - 1)] = 1;
      *(_QWORD *)&v8[8 * v17] = 1;
      v15 += 2;
      v16 -= 2;
    }
    while (v16);
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_289:
      do
      {
        v18 = *v13++;
        *(_QWORD *)&v8[8 * v18] = 1;
      }
      while (v13 != end);
    }
  }
  v315 = 0;
  v316 = 0;
  v314 = 0;
  v19 = v9 - v8;
  if (v9 != v8)
  {
    if (v19 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v20 = (char *)operator new(v9 - v8);
    v21 = &v20[8 * (v19 >> 3)];
    v314 = v20;
    v316 = v21;
    memcpy(v20, v8, v19);
    v315 = v21;
  }
  v317 = 0;
  v318 = 0;
  v319 = 0;
  v22 = (char *)end - (char *)begin;
  if (end != begin)
  {
    if (v22 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v317 = operator new((char *)end - (char *)begin);
    v319 = (char *)v317 + 4 * (v22 >> 2);
    memcpy(v317, begin, v22);
    v318 = (int *)v319;
  }
  v313 = a2;
  switch(v324[0])
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&__dst, (uint64_t)v324);
      memset(&v342, 0, sizeof(v342));
      v23 = v338 - v337;
      if (v338 == v337)
      {
        v26 = 0;
        v24 = 0;
        v310 = 0;
      }
      else
      {
        if (v23 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v24 = operator new(v338 - v337);
        v25 = v23 >> 3;
        v26 = (std::string::size_type)&v24[v23 >> 3];
        v342.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
        v342.__r_.__value_.__r.__words[2] = v26;
        v27 = v23 & 0xFFFFFFFFFFFFFFF8;
        bzero(v24, v23 & 0xFFFFFFFFFFFFFFF8);
        v342.__r_.__value_.__l.__size_ = v26;
        v23 = (int64_t)operator new(v23);
        v310 = v23 + 8 * v25;
        bzero((void *)v23, v27);
      }
      nitro::ndarray<int>::init_from_shape((uint64_t **)&v314, &v328);
      if ((unint64_t)((v310 - v23) >> 3) <= 1)
        v100 = 1;
      else
        v100 = (v310 - v23) >> 3;
      v101 = v26 - (_QWORD)v24;
      v103 = (int *)v317;
      v102 = v318;
      if ((unint64_t)((uint64_t)(v26 - (_QWORD)v24) >> 3) <= 1)
        v104 = 1;
      else
        v104 = (uint64_t)(v26 - (_QWORD)v24) >> 3;
      v105 = v328;
      v106 = v334;
      v107 = v101 >> 3;
      __lena = v26 - (_QWORD)v24;
      v308 = v341;
      v296 = (char *)v318 - (_BYTE *)v317 - 4;
      v278 = (v296 >> 2) + 1;
      v281 = v339;
      v275 = (int *)((char *)v317 + 4 * (v278 & 0x7FFFFFFFFFFFFFFELL));
      v305 = __dst;
      v108 = v337;
      v293 = v104 & 0xFFFFFFFFFFFFFFFELL;
      v287 = v104;
      v290 = v100 & 0xFFFFFFFFFFFFFFFELL;
      v272 = (char *)v317 + 4;
      v269 = v339 + 8;
      v284 = (char *)__p;
      v266 = (char *)__p + 8;
      v109 = (v101 >> 3) + 1;
      v299 = v100;
      while (1)
      {
        if ((_QWORD *)v26 != v24)
        {
          v110 = v26;
          v111 = v107;
          memmove((void *)v23, v24, __lena);
          v107 = v111;
          v26 = v110;
          v104 = v287;
          v100 = v299;
        }
        if (v103 != v102)
        {
          v112 = v103;
          if (v296 < 4)
            goto LABEL_290;
          v113 = v278 & 0x7FFFFFFFFFFFFFFELL;
          v114 = (int *)v272;
          do
          {
            v115 = *v114;
            *(_QWORD *)(v23 + 8 * *(v114 - 1)) = 0;
            *(_QWORD *)(v23 + 8 * v115) = 0;
            v114 += 2;
            v113 -= 2;
          }
          while (v113);
          v112 = v275;
          if (v278 != (v278 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_290:
            do
            {
              v116 = *v112++;
              *(_QWORD *)(v23 + 8 * v116) = 0;
            }
            while (v112 != v102);
          }
        }
        if ((_QWORD *)v26 == v24)
        {
          v117 = 0;
          goto LABEL_116;
        }
        if (v104 < 2)
          break;
        v119 = 0;
        v120 = 0;
        v121 = v293;
        v122 = v269;
        v123 = v24 + 1;
        do
        {
          v119 += *(v122 - 1) * *(v123 - 1);
          v120 += *v122 * *v123;
          v123 += 2;
          v122 += 2;
          v121 -= 2;
        }
        while (v121);
        v117 = v120 + v119;
        v118 = v293;
        if (v104 != v293)
          goto LABEL_114;
LABEL_116:
        v131 = *(_DWORD *)(v305 + 4 * (v117 + v308));
        if (v310 == v23)
        {
          v132 = 0;
          goto LABEL_125;
        }
        if (v100 < 2)
        {
          v132 = 0;
          v133 = 0;
LABEL_123:
          v139 = v100 - v133;
          v140 = 8 * v133;
          v141 = &v284[8 * v133];
          v142 = (uint64_t *)(v23 + v140);
          do
          {
            v144 = *v142++;
            v143 = v144;
            v145 = *(_QWORD *)v141;
            v141 += 8;
            v132 += v145 * v143;
            --v139;
          }
          while (v139);
          goto LABEL_125;
        }
        v134 = 0;
        v135 = 0;
        v136 = v290;
        v137 = v266;
        v138 = (_QWORD *)(v23 + 8);
        do
        {
          v134 += *(v137 - 1) * *(v138 - 1);
          v135 += *v137 * *v138;
          v138 += 2;
          v137 += 2;
          v136 -= 2;
        }
        while (v136);
        v132 = v135 + v134;
        v133 = v290;
        if (v100 != v290)
          goto LABEL_123;
LABEL_125:
        *(_DWORD *)(v105 + 4 * (v132 + v106)) += v131;
        if ((int)v107 >= 1)
        {
          v146 = v109;
          v147 = v107;
          while (1)
          {
            v148 = (v146 - 2);
            v149 = v24[v148] + 1;
            v24[v148] = v149;
            if (v149 < *(_QWORD *)&v108[v148 * 8])
              break;
            v24[(v146 - 2)] = 0;
            --v147;
            if ((unint64_t)--v146 <= 1)
              goto LABEL_131;
          }
          if (v147 >= 1)
            continue;
        }
LABEL_131:
        nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v320, &v328);
        v93 = v313;
        if (__p)
        {
          v333[0] = __p;
          operator delete(__p);
        }
        if (v330)
        {
          v331 = v330;
          operator delete(v330);
        }
        v150 = v329;
        if (v329)
        {
          p_shared_owners = (unint64_t *)&v329->__shared_owners_;
          do
            v152 = __ldaxr(p_shared_owners);
          while (__stlxr(v152 - 1, p_shared_owners));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        if (v23)
          operator delete((void *)v23);
        if (v342.__r_.__value_.__r.__words[0])
          operator delete(v342.__r_.__value_.__l.__data_);
        if (v339)
        {
          v340 = v339;
          operator delete(v339);
        }
        if (v337)
        {
          v338 = v337;
          operator delete(v337);
        }
        v97 = __dst_8;
        if (__dst_8)
        {
          v153 = (unint64_t *)&__dst_8->__shared_owners_;
          do
            v99 = __ldaxr(v153);
          while (__stlxr(v99 - 1, v153));
LABEL_272:
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        goto LABEL_274;
      }
      v117 = 0;
      v118 = 0;
LABEL_114:
      v124 = v104 - v118;
      v125 = v118;
      v126 = &v281[8 * v118];
      v127 = &v24[v125];
      do
      {
        v129 = *v127++;
        v128 = v129;
        v130 = *(_QWORD *)v126;
        v126 += 8;
        v117 += v130 * v128;
        --v124;
      }
      while (v124);
      goto LABEL_116;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&__dst, (uint64_t)v324);
      memset(&v342, 0, sizeof(v342));
      v38 = v338 - v337;
      if (v338 == v337)
      {
        v41 = 0;
        v39 = 0;
        v43 = 0;
      }
      else
      {
        if (v38 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v39 = operator new(v338 - v337);
        v40 = v38 >> 3;
        v41 = (std::string::size_type)&v39[v38 >> 3];
        v342.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
        v342.__r_.__value_.__r.__words[2] = v41;
        v42 = v38 & 0xFFFFFFFFFFFFFFF8;
        bzero(v39, v38 & 0xFFFFFFFFFFFFFFF8);
        v342.__r_.__value_.__l.__size_ = v41;
        v38 = (int64_t)operator new(v38);
        v43 = v38 + 8 * v40;
        bzero((void *)v38, v42);
      }
      nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v314, &v328);
      if ((unint64_t)((v43 - v38) >> 3) <= 1)
        v216 = 1;
      else
        v216 = (v43 - v38) >> 3;
      v217 = v41 - (_QWORD)v39;
      if ((unint64_t)((uint64_t)(v41 - (_QWORD)v39) >> 3) <= 1)
        v218 = 1;
      else
        v218 = (uint64_t)(v41 - (_QWORD)v39) >> 3;
      while (1)
      {
        if ((_QWORD *)v41 != v39)
          memmove((void *)v38, v39, v41 - (_QWORD)v39);
        v219 = v318;
        if (v317 != v318)
        {
          v220 = (char *)v318 - (_BYTE *)v317 - 4;
          v221 = (int *)v317;
          if (v220 < 4)
            goto LABEL_291;
          v222 = (v220 >> 2) + 1;
          v221 = (int *)((char *)v317 + 4 * (v222 & 0x7FFFFFFFFFFFFFFELL));
          v223 = (int *)((char *)v317 + 4);
          v224 = v222 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            v225 = *v223;
            *(_QWORD *)(v38 + 8 * *(v223 - 1)) = 0;
            *(_QWORD *)(v38 + 8 * v225) = 0;
            v223 += 2;
            v224 -= 2;
          }
          while (v224);
          if (v222 != (v222 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_291:
            do
            {
              v226 = *v221++;
              *(_QWORD *)(v38 + 8 * v226) = 0;
            }
            while (v221 != v219);
          }
        }
        if ((_QWORD *)v41 == v39)
        {
          v227 = 0;
          goto LABEL_237;
        }
        if (v218 < 2)
          break;
        v229 = 0;
        v230 = 0;
        v231 = v339 + 8;
        v233 = v39 + 1;
        v232 = v218 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v229 += *(v231 - 1) * *(v233 - 1);
          v230 += *v231 * *v233;
          v233 += 2;
          v231 += 2;
          v232 -= 2;
        }
        while (v232);
        v227 = v230 + v229;
        v228 = v218 & 0xFFFFFFFFFFFFFFFELL;
        if (v218 != (v218 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_235;
LABEL_237:
        v241 = *(_BYTE *)(__dst + v341 + v227);
        if (v43 == v38)
        {
          v242 = 0;
          goto LABEL_246;
        }
        if (v216 < 2)
        {
          v242 = 0;
          v243 = 0;
LABEL_244:
          v249 = v216 - v243;
          v250 = 8 * v243;
          v251 = (uint64_t *)((char *)__p + v250);
          v252 = (uint64_t *)(v38 + v250);
          do
          {
            v254 = *v252++;
            v253 = v254;
            v255 = *v251++;
            v242 += v255 * v253;
            --v249;
          }
          while (v249);
          goto LABEL_246;
        }
        v244 = 0;
        v245 = 0;
        v246 = (char *)__p + 8;
        v247 = v216 & 0xFFFFFFFFFFFFFFFELL;
        v248 = (_QWORD *)(v38 + 8);
        do
        {
          v244 += *(v246 - 1) * *(v248 - 1);
          v245 += *v246 * *v248;
          v248 += 2;
          v246 += 2;
          v247 -= 2;
        }
        while (v247);
        v242 = v245 + v244;
        v243 = v216 & 0xFFFFFFFFFFFFFFFELL;
        if (v216 != (v216 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_244;
LABEL_246:
        *(_BYTE *)(v328 + v334 + v242) += v241;
        if ((int)(v217 >> 3) >= 1)
        {
          v256 = v337;
          v257 = (v217 >> 3) + 1;
          v258 = v217 >> 3;
          while (1)
          {
            v259 = (v257 - 2);
            v260 = v39[v259] + 1;
            v39[v259] = v260;
            if (v260 < *(_QWORD *)&v256[v259 * 8])
              break;
            v39[(v257 - 2)] = 0;
            LODWORD(v258) = v258 - 1;
            if ((unint64_t)--v257 <= 1)
              goto LABEL_252;
          }
          if ((int)v258 >= 1)
            continue;
        }
LABEL_252:
        nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&v320, &v328);
        v93 = a2;
        if (__p)
        {
          v333[0] = __p;
          operator delete(__p);
        }
        if (v330)
        {
          v331 = v330;
          operator delete(v330);
        }
        v261 = v329;
        if (v329)
        {
          v262 = (unint64_t *)&v329->__shared_owners_;
          do
            v263 = __ldaxr(v262);
          while (__stlxr(v263 - 1, v262));
          if (!v263)
          {
            ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
            std::__shared_weak_count::__release_weak(v261);
          }
        }
        if (v38)
          operator delete((void *)v38);
        if (v342.__r_.__value_.__r.__words[0])
          operator delete(v342.__r_.__value_.__l.__data_);
        if (v339)
        {
          v340 = v339;
          operator delete(v339);
        }
        if (v337)
        {
          v338 = v337;
          operator delete(v337);
        }
        v97 = __dst_8;
        if (__dst_8)
        {
          v264 = (unint64_t *)&__dst_8->__shared_owners_;
          do
            v99 = __ldaxr(v264);
          while (__stlxr(v99 - 1, v264));
          goto LABEL_272;
        }
LABEL_274:
        if (v317)
        {
          v318 = (int *)v317;
          operator delete(v317);
        }
        if (v314)
        {
          v315 = v314;
          operator delete(v314);
        }
        __asm { BR              X10 }
      }
      v227 = 0;
      v228 = 0;
LABEL_235:
      v234 = v218 - v228;
      v235 = v228;
      v236 = &v339[v235 * 8];
      v237 = &v39[v235];
      do
      {
        v239 = *v237++;
        v238 = v239;
        v240 = *(_QWORD *)v236;
        v236 += 8;
        v227 += v240 * v238;
        --v234;
      }
      while (v234);
      goto LABEL_237;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&__dst, (uint64_t)v324);
      memset(&v342, 0, sizeof(v342));
      v28 = v338 - v337;
      if (v338 == v337)
      {
        v31 = 0;
        v29 = 0;
        v311 = 0;
      }
      else
      {
        if (v28 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v29 = operator new(v338 - v337);
        v30 = v28 >> 3;
        v31 = (std::string::size_type)&v29[v28 >> 3];
        v342.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        v342.__r_.__value_.__r.__words[2] = v31;
        v32 = v28 & 0xFFFFFFFFFFFFFFF8;
        bzero(v29, v28 & 0xFFFFFFFFFFFFFFF8);
        v342.__r_.__value_.__l.__size_ = v31;
        v28 = (int64_t)operator new(v28);
        v311 = v28 + 8 * v30;
        bzero((void *)v28, v32);
      }
      nitro::ndarray<float>::init_from_shape((uint64_t **)&v314, &v328);
      if ((unint64_t)((v311 - v28) >> 3) <= 1)
        v44 = 1;
      else
        v44 = (v311 - v28) >> 3;
      v45 = v31 - (_QWORD)v29;
      v46 = (int *)v317;
      v47 = v318;
      if ((unint64_t)((uint64_t)(v31 - (_QWORD)v29) >> 3) <= 1)
        v48 = 1;
      else
        v48 = (uint64_t)(v31 - (_QWORD)v29) >> 3;
      v49 = v328;
      v50 = v334;
      v51 = v45 >> 3;
      __len = v31 - (_QWORD)v29;
      v307 = v341;
      v295 = (char *)v318 - (_BYTE *)v317 - 4;
      v277 = (v295 >> 2) + 1;
      v280 = v339;
      v274 = (int *)((char *)v317 + 4 * (v277 & 0x7FFFFFFFFFFFFFFELL));
      v304 = __dst;
      v52 = v337;
      v292 = v48 & 0xFFFFFFFFFFFFFFFELL;
      v286 = v31;
      v289 = v44 & 0xFFFFFFFFFFFFFFFELL;
      v271 = (char *)v317 + 4;
      v268 = v339 + 8;
      v283 = (char *)__p;
      v265 = (char *)__p + 8;
      v53 = (v45 >> 3) + 1;
      v298 = v48;
      while (1)
      {
        if ((_QWORD *)v31 != v29)
        {
          v54 = v44;
          memmove((void *)v28, v29, __len);
          v48 = v298;
          v44 = v54;
          v31 = v286;
        }
        if (v46 != v47)
        {
          v55 = v46;
          if (v295 < 4)
            goto LABEL_292;
          v56 = v277 & 0x7FFFFFFFFFFFFFFELL;
          v57 = (int *)v271;
          do
          {
            v58 = *v57;
            *(_QWORD *)(v28 + 8 * *(v57 - 1)) = 0;
            *(_QWORD *)(v28 + 8 * v58) = 0;
            v57 += 2;
            v56 -= 2;
          }
          while (v56);
          v55 = v274;
          if (v277 != (v277 & 0x7FFFFFFFFFFFFFFELL))
          {
LABEL_292:
            do
            {
              v59 = *v55++;
              *(_QWORD *)(v28 + 8 * v59) = 0;
            }
            while (v55 != v47);
          }
        }
        if ((_QWORD *)v31 == v29)
        {
          v60 = 0;
          goto LABEL_55;
        }
        if (v48 < 2)
          break;
        v62 = 0;
        v63 = 0;
        v64 = v292;
        v65 = v268;
        v66 = v29 + 1;
        do
        {
          v62 += *(v65 - 1) * *(v66 - 1);
          v63 += *v65 * *v66;
          v66 += 2;
          v65 += 2;
          v64 -= 2;
        }
        while (v64);
        v60 = v63 + v62;
        v61 = v292;
        if (v48 != v292)
          goto LABEL_53;
LABEL_55:
        v74 = *(float *)(v304 + 4 * (v60 + v307));
        if (v311 == v28)
        {
          v75 = 0;
          goto LABEL_64;
        }
        if (v44 < 2)
        {
          v75 = 0;
          v76 = 0;
LABEL_62:
          v82 = v44 - v76;
          v83 = 8 * v76;
          v84 = &v283[8 * v76];
          v85 = (uint64_t *)(v28 + v83);
          do
          {
            v87 = *v85++;
            v86 = v87;
            v88 = *(_QWORD *)v84;
            v84 += 8;
            v75 += v88 * v86;
            --v82;
          }
          while (v82);
          goto LABEL_64;
        }
        v77 = 0;
        v78 = 0;
        v79 = v289;
        v80 = v265;
        v81 = (_QWORD *)(v28 + 8);
        do
        {
          v77 += *(v80 - 1) * *(v81 - 1);
          v78 += *v80 * *v81;
          v81 += 2;
          v80 += 2;
          v79 -= 2;
        }
        while (v79);
        v75 = v78 + v77;
        v76 = v289;
        if (v44 != v289)
          goto LABEL_62;
LABEL_64:
        *(float *)(v49 + 4 * (v75 + v50)) = v74 + *(float *)(v49 + 4 * (v75 + v50));
        if ((int)v51 >= 1)
        {
          v89 = v53;
          v90 = v51;
          while (1)
          {
            v91 = (v89 - 2);
            v92 = v29[v91] + 1;
            v29[v91] = v92;
            if (v92 < *(_QWORD *)&v52[v91 * 8])
              break;
            v29[(v89 - 2)] = 0;
            --v90;
            if ((unint64_t)--v89 <= 1)
              goto LABEL_70;
          }
          if (v90 >= 1)
            continue;
        }
LABEL_70:
        nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v320, &v328);
        v93 = v313;
        if (__p)
        {
          v333[0] = __p;
          operator delete(__p);
        }
        if (v330)
        {
          v331 = v330;
          operator delete(v330);
        }
        v94 = v329;
        if (v329)
        {
          v95 = (unint64_t *)&v329->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        if (v28)
          operator delete((void *)v28);
        if (v342.__r_.__value_.__r.__words[0])
          operator delete(v342.__r_.__value_.__l.__data_);
        if (v339)
        {
          v340 = v339;
          operator delete(v339);
        }
        if (v337)
        {
          v338 = v337;
          operator delete(v337);
        }
        v97 = __dst_8;
        if (__dst_8)
        {
          v98 = (unint64_t *)&__dst_8->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          goto LABEL_272;
        }
        goto LABEL_274;
      }
      v60 = 0;
      v61 = 0;
LABEL_53:
      v67 = v48 - v61;
      v68 = v61;
      v69 = &v280[8 * v61];
      v70 = &v29[v68];
      do
      {
        v72 = *v70++;
        v71 = v72;
        v73 = *(_QWORD *)v69;
        v69 += 8;
        v60 += v73 * v71;
        --v67;
      }
      while (v67);
      goto LABEL_55;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&__dst, (uint64_t)v324);
      memset(&v342, 0, sizeof(v342));
      v33 = v338 - v337;
      if (v338 == v337)
      {
        v36 = 0;
        v34 = 0;
        v312 = 0;
      }
      else
      {
        if (v33 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v34 = operator new(v338 - v337);
        v35 = v33 >> 3;
        v36 = (std::string::size_type)&v34[v33 >> 3];
        v342.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        v342.__r_.__value_.__r.__words[2] = v36;
        v37 = v33 & 0xFFFFFFFFFFFFFFF8;
        bzero(v34, v33 & 0xFFFFFFFFFFFFFFF8);
        v342.__r_.__value_.__l.__size_ = v36;
        v33 = (int64_t)operator new(v33);
        v312 = v33 + 8 * v35;
        bzero((void *)v33, v37);
      }
      nitro::ndarray<half>::init_from_shape((uint64_t **)&v314, &v328);
      if ((unint64_t)((v312 - v33) >> 3) <= 1)
        v154 = 1;
      else
        v154 = (v312 - v33) >> 3;
      v155 = v36 - (_QWORD)v34;
      v156 = (int *)v317;
      v157 = v318;
      if ((unint64_t)((uint64_t)(v36 - (_QWORD)v34) >> 3) <= 1)
        v158 = 1;
      else
        v158 = (uint64_t)(v36 - (_QWORD)v34) >> 3;
      v159 = v328;
      v160 = v334;
      v161 = v155 >> 3;
      __lenb = v36 - (_QWORD)v34;
      v309 = v341;
      v297 = (char *)v318 - (_BYTE *)v317 - 4;
      v279 = (v297 >> 2) + 1;
      v282 = v339;
      v276 = (int *)((char *)v317 + 4 * (v279 & 0x7FFFFFFFFFFFFFFELL));
      v306 = __dst;
      v162 = v337;
      v294 = v158 & 0xFFFFFFFFFFFFFFFELL;
      v288 = v36;
      v291 = v154 & 0xFFFFFFFFFFFFFFFELL;
      v273 = (char *)v317 + 4;
      v270 = v339 + 8;
      v285 = (char *)__p;
      v267 = (char *)__p + 8;
      v163 = (v155 >> 3) + 1;
      v300 = v158;
      break;
    default:
      printf("%d\n", v324[0]);
      nitro::ndarray_container::visit<nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
  while (1)
  {
    if ((_QWORD *)v36 != v34)
    {
      v164 = v154;
      memmove((void *)v33, v34, __lenb);
      v158 = v300;
      v154 = v164;
      v36 = v288;
    }
    if (v156 != v157)
    {
      v165 = v156;
      if (v297 < 4)
        goto LABEL_293;
      v166 = v279 & 0x7FFFFFFFFFFFFFFELL;
      v167 = (int *)v273;
      do
      {
        v168 = *v167;
        *(_QWORD *)(v33 + 8 * *(v167 - 1)) = 0;
        *(_QWORD *)(v33 + 8 * v168) = 0;
        v167 += 2;
        v166 -= 2;
      }
      while (v166);
      v165 = v276;
      if (v279 != (v279 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_293:
        do
        {
          v169 = *v165++;
          *(_QWORD *)(v33 + 8 * v169) = 0;
        }
        while (v165 != v157);
      }
    }
    if ((_QWORD *)v36 == v34)
    {
      v170 = 0;
      goto LABEL_177;
    }
    if (v158 < 2)
      break;
    v172 = 0;
    v173 = 0;
    v174 = v294;
    v175 = v270;
    v176 = v34 + 1;
    do
    {
      v172 += *(v175 - 1) * *(v176 - 1);
      v173 += *v175 * *v176;
      v176 += 2;
      v175 += 2;
      v174 -= 2;
    }
    while (v174);
    v170 = v173 + v172;
    v171 = v294;
    if (v158 != v294)
      goto LABEL_175;
LABEL_177:
    _H0 = *(_WORD *)(v306 + 2 * (v170 + v309));
    if (v312 == v33)
    {
      v185 = 0;
      goto LABEL_186;
    }
    if (v154 < 2)
    {
      v185 = 0;
      v186 = 0;
LABEL_184:
      v192 = v154 - v186;
      v193 = 8 * v186;
      v194 = &v285[8 * v186];
      v195 = (uint64_t *)(v33 + v193);
      do
      {
        v197 = *v195++;
        v196 = v197;
        v198 = *(_QWORD *)v194;
        v194 += 8;
        v185 += v198 * v196;
        --v192;
      }
      while (v192);
      goto LABEL_186;
    }
    v187 = 0;
    v188 = 0;
    v189 = v291;
    v190 = v267;
    v191 = (_QWORD *)(v33 + 8);
    do
    {
      v187 += *(v190 - 1) * *(v191 - 1);
      v188 += *v190 * *v191;
      v191 += 2;
      v190 += 2;
      v189 -= 2;
    }
    while (v189);
    v185 = v188 + v187;
    v186 = v291;
    if (v154 != v291)
      goto LABEL_184;
LABEL_186:
    v199 = 2 * (v185 + v160);
    _H1 = *(_WORD *)(v159 + v199);
    __asm
    {
      FCVT            S1, H1
      FCVT            S0, H0
    }
    _S0 = _S0 + _S1;
    __asm { FCVT            H0, S0 }
    *(_WORD *)(v159 + v199) = LOWORD(_S0);
    if ((int)v161 >= 1)
    {
      v208 = v163;
      v209 = v161;
      while (1)
      {
        v210 = (v208 - 2);
        v211 = v34[v210] + 1;
        v34[v210] = v211;
        if (v211 < *(_QWORD *)&v162[v210 * 8])
          break;
        v34[(v208 - 2)] = 0;
        --v209;
        if ((unint64_t)--v208 <= 1)
          goto LABEL_192;
      }
      if (v209 >= 1)
        continue;
    }
LABEL_192:
    nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&v320, &v328);
    v93 = v313;
    if (__p)
    {
      v333[0] = __p;
      operator delete(__p);
    }
    if (v330)
    {
      v331 = v330;
      operator delete(v330);
    }
    v212 = v329;
    if (v329)
    {
      v213 = (unint64_t *)&v329->__shared_owners_;
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    if (v33)
      operator delete((void *)v33);
    if (v342.__r_.__value_.__r.__words[0])
      operator delete(v342.__r_.__value_.__l.__data_);
    if (v339)
    {
      v340 = v339;
      operator delete(v339);
    }
    if (v337)
    {
      v338 = v337;
      operator delete(v337);
    }
    v97 = __dst_8;
    if (__dst_8)
    {
      v215 = (unint64_t *)&__dst_8->__shared_owners_;
      do
        v99 = __ldaxr(v215);
      while (__stlxr(v99 - 1, v215));
      goto LABEL_272;
    }
    goto LABEL_274;
  }
  v170 = 0;
  v171 = 0;
LABEL_175:
  v177 = v158 - v171;
  v178 = v171;
  v179 = &v282[8 * v171];
  v180 = &v34[v178];
  do
  {
    v182 = *v180++;
    v181 = v182;
    v183 = *(_QWORD *)v179;
    v179 += 8;
    v170 += v183 * v181;
    --v177;
  }
  while (v177);
  goto LABEL_177;
}

